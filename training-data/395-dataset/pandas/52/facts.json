{
    "1.1.1": "def nunique(self, dropna: bool = True) -> Series:\n    \n    ids, _, _ = self.grouper.group_info\n\n    val = self.obj._internal_get_values()\n\n    # GH 27951\n    # temporary fix while we wait for NumPy bug 12629 to be fixed\n    val[isna(val)] = np.datetime64(\"NaT\")\n\n    try:\n        sorter = np.lexsort((val, ids))\n    except TypeError:  # catches object dtypes\n        msg = f\"val.dtype must be object, got {val.dtype}\"\n        assert val.dtype == object, msg\n        val, _ = algorithms.factorize(val, sort=False)\n        sorter = np.lexsort((val, ids))\n        _isna = lambda a: a == -1\n    else:\n        _isna = isna\n\n    ids, val = ids[sorter], val[sorter]\n\n    # group boundaries are where group ids change\n    # unique observations are where sorted values change\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n    inc = np.r_[1, val[1:] != val[:-1]]\n\n    # 1st item of each group is a new unique observation\n    mask = _isna(val)\n    if dropna:\n        inc[idx] = 1\n        inc[mask] = 0\n    else:\n        inc[mask & np.r_[False, mask[:-1]]] = 0\n        inc[idx] = 1\n\n    out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n    if len(ids):\n        # NaN/NaT group exists if the head of ids is -1,\n        # so remove it from res and exclude its index from idx\n        if ids[0] == -1:\n            res = out[1:]\n            idx = idx[np.flatnonzero(idx)]\n        else:\n            res = out\n    else:\n        res = out[1:]\n    ri = self.grouper.result_index\n\n    # we might have duplications among the bins\n    if len(res) != len(ri):\n        res, out = np.zeros(len(ri), dtype=out.dtype), res\n        res[ids[idx]] = out\n\n    result = Series(res, index=ri, name=self._selection_name)\n    return self._reindex_output(result, fill_value=0)\n",
    "1.1.2": "Return number of unique elements in the group.\n\nReturns\n-------\nSeries\n    Number of unique values within each group.",
    "1.2.1": "@pin_whitelisted_properties(Series, base.series_apply_whitelist)\nclass SeriesGroupBy(GroupBy)",
    "1.2.2": null,
    "1.2.3": [
        "_selection_name(self)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/core/groupby/generic.py",
    "1.3.2": [
        "_selection_name(self)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [6.0, 7.0, 4.0, 6.0, 1.0, 4.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 8.0, 1.0, 3.0, 3.0, 4.0, 1.0, 6.0, 9.0, 0.0, 6.0, 9.0, 0.0, 2.0, 6.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 3.0, 4.0, 8.0, 3.0, 0.0, 6.0, 2.0, 2.0, 1.0, 3.0, 4.0, 4.0, 7.0, 2.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 3.0, 5.0, 7.0, 3.0, 7.0, 7.0, 0.0, 5.0, 2.0, 8.0, 8.0, 2.0, 7.0, 9.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 0.0, 1.0, 4.0, 8.0, 7.0, 0.0, 0.0, 0.0, 8.0, 4.0, 1.0, 3.0, 5.0, 1.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 9.0, 7.0, 8.0, 5.0, 1.0, 4.0, 9.0, 4.0, 3.0, 1.0, 8.0, 0.0, 1.0]\nE   [right]: [6.0, 7.0, 4.0, 6.0, 1.0, 4.0, 1.0, nan, nan, nan, 5.0, 8.0, 1.0, 3.0, 3.0, 4.0, 1.0, 6.0, 9.0, 0.0, 6.0, 9.0, 0.0, 2.0, 6.0, 9.0, nan, nan, nan, 1.0, 3.0, 4.0, 8.0, 3.0, 0.0, 6.0, 2.0, 2.0, 1.0, 3.0, 4.0, 4.0, 7.0, 2.0, 1.0, nan, nan, nan, 6.0, 3.0, 5.0, 7.0, 3.0, 7.0, 7.0, 0.0, 5.0, 2.0, 8.0, 8.0, 2.0, 7.0, 9.0, 8.0, nan, nan, nan, 7.0, 0.0, 1.0, 4.0, 8.0, 7.0, 0.0, 0.0, 0.0, 8.0, 4.0, 1.0, 3.0, 5.0, 1.0, 1.0, nan, nan, nan, 8.0, 9.0, 7.0, 8.0, 5.0, 1.0, 4.0, 9.0, 4.0, 3.0, 1.0, 8.0, 0.0, 1.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [6.0, 0.0, 4.0, 5.0, 8.0, 6.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 0.0, 1.0, 1.0, 3.0, 1.0, 3.0, 1.0, 2.0, 6.0, 7.0, 9.0, 0.0, 8.0, 7.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 9.0, 3.0, 5.0, 5.0, 3.0, 3.0, 8.0, 5.0, 6.0, 5.0, 3.0, 1.0, 0.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 6.0, 4.0, 4.0, 1.0, 3.0, 5.0, 5.0, 9.0, 7.0, 7.0, 2.0, 5.0, 3.0, 8.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 3.0, 6.0, 5.0, 1.0, 2.0, 9.0, 6.0, 1.0, 9.0, 3.0, 9.0, 7.0, 5.0, 9.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 7.0, 0.0, 5.0, 4.0, 1.0, 2.0, 0.0, 6.0, 9.0, 1.0, 4.0, 8.0, 2.0, ...]\nE   [right]: [6.0, 0.0, 4.0, 5.0, 8.0, 6.0, 9.0, nan, nan, nan, 4.0, 0.0, 1.0, 1.0, 3.0, 1.0, 3.0, 1.0, 2.0, 6.0, 7.0, 9.0, 0.0, 8.0, 7.0, 7.0, nan, nan, nan, 7.0, 9.0, 3.0, 5.0, 5.0, 3.0, 3.0, 8.0, 5.0, 6.0, 5.0, 3.0, 1.0, 0.0, 7.0, 0.0, nan, nan, nan, 6.0, 6.0, 4.0, 4.0, 1.0, 3.0, 5.0, 5.0, 9.0, 7.0, 7.0, 2.0, 5.0, 3.0, 8.0, 1.0, nan, nan, nan, 0.0, 3.0, 6.0, 5.0, 1.0, 2.0, 9.0, 6.0, 1.0, 9.0, 3.0, 9.0, 7.0, 5.0, 9.0, 1.0, nan, nan, nan, 0.0, 7.0, 0.0, 5.0, 4.0, 1.0, 2.0, 0.0, 6.0, 9.0, 1.0, 4.0, 8.0, 2.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [8.0, 6.0, 8.0, 4.0, 0.0, 5.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 8.0, 4.0, 3.0, 4.0, 3.0, 3.0, 0.0, 4.0, 6.0, 7.0, 0.0, 7.0, 4.0, 6.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 7.0, 4.0, 2.0, 6.0, 7.0, 1.0, 0.0, 4.0, 4.0, 4.0, 7.0, 4.0, 3.0, 2.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 6.0, 9.0, 1.0, 2.0, 6.0, 7.0, 0.0, 4.0, 4.0, 7.0, 3.0, 6.0, 8.0, 6.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 7.0, 6.0, 5.0, 3.0, 5.0, 9.0, 6.0, 1.0, 1.0, 5.0, 7.0, 0.0, 1.0, 9.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 2.0, 4.0, 6.0, 8.0, 8.0, 0.0, 8.0, 7.0, 3.0, 5.0, 4.0, 5.0, 3.0, ...]\nE   [right]: [8.0, 6.0, 8.0, 4.0, 0.0, 5.0, 7.0, nan, nan, nan, 5.0, 8.0, 4.0, 3.0, 4.0, 3.0, 3.0, 0.0, 4.0, 6.0, 7.0, 0.0, 7.0, 4.0, 6.0, 6.0, nan, nan, nan, 9.0, 7.0, 4.0, 2.0, 6.0, 7.0, 1.0, 0.0, 4.0, 4.0, 4.0, 7.0, 4.0, 3.0, 2.0, 1.0, nan, nan, nan, 2.0, 6.0, 9.0, 1.0, 2.0, 6.0, 7.0, 0.0, 4.0, 4.0, 7.0, 3.0, 6.0, 8.0, 6.0, 6.0, nan, nan, nan, 9.0, 7.0, 6.0, 5.0, 3.0, 5.0, 9.0, 6.0, 1.0, 1.0, 5.0, 7.0, 0.0, 1.0, 9.0, 8.0, nan, nan, nan, 6.0, 2.0, 4.0, 6.0, 8.0, 8.0, 0.0, 8.0, 7.0, 3.0, 5.0, 4.0, 5.0, 3.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [7.0, 1.0, 4.0, 2.0, 4.0, 1.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 6.0, 7.0, 2.0, 1.0, 5.0, 0.0, 9.0, 8.0, 3.0, 4.0, 5.0, 0.0, 6.0, 2.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 6.0, 8.0, 0.0, 9.0, 0.0, 9.0, 3.0, 4.0, 1.0, 2.0, 4.0, 7.0, 4.0, 8.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 5.0, 5.0, 0.0, 5.0, 6.0, 1.0, 4.0, 7.0, 2.0, 7.0, 6.0, 9.0, 6.0, 4.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 7.0, 0.0, 1.0, 9.0, 2.0, 2.0, 2.0, 4.0, 4.0, 3.0, 8.0, 3.0, 5.0, 6.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 9.0, 3.0, 3.0, 1.0, 0.0, 9.0, 6.0, 2.0, 6.0, 7.0, 6.0, 9.0, 9.0, ...]\nE   [right]: [7.0, 1.0, 4.0, 2.0, 4.0, 1.0, 9.0, nan, nan, nan, 9.0, 6.0, 7.0, 2.0, 1.0, 5.0, 0.0, 9.0, 8.0, 3.0, 4.0, 5.0, 0.0, 6.0, 2.0, 4.0, nan, nan, nan, 9.0, 6.0, 8.0, 0.0, 9.0, 0.0, 9.0, 3.0, 4.0, 1.0, 2.0, 4.0, 7.0, 4.0, 8.0, 5.0, nan, nan, nan, 1.0, 5.0, 5.0, 0.0, 5.0, 6.0, 1.0, 4.0, 7.0, 2.0, 7.0, 6.0, 9.0, 6.0, 4.0, 7.0, nan, nan, nan, 9.0, 7.0, 0.0, 1.0, 9.0, 2.0, 2.0, 2.0, 4.0, 4.0, 3.0, 8.0, 3.0, 5.0, 6.0, 9.0, nan, nan, nan, 8.0, 9.0, 3.0, 3.0, 1.0, 0.0, 9.0, 6.0, 2.0, 6.0, 7.0, 6.0, 9.0, 9.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [18.0, 5.0, 22.0, 75.0, 58.0, 4.0, 63.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 57.0, 46.0, 52.0, 81.0, 50.0, 5.0, 38.0, 78.0, 38.0, 81.0, 58.0, 52.0, 51.0, 64.0, 73.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 32.0, 86.0, 60.0, 44.0, 52.0, 71.0, 18.0, 31.0, 9.0, 8.0, 13.0, 35.0, 27.0, 24.0, 74.0, 17.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 67.0, 99.0, 36.0, 3.0, 30.0, 4.0, 55.0, 92.0, 99.0, 5.0, 10.0, 71.0, 73.0, 34.0, 92.0, 53.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 78.0, 77.0, 54.0, 25.0, 69.0, 81.0, 85.0, 13.0, 58.0, 26.0, 98.0, 37.0, 65.0, 29.0, 44.0, 82.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 98.0, 17.0, 52.0, 68.0, 0.0, 31.0, 77.0, 82.0, 75.0, 22.0, 6.0, 44.0, 94.0, 6.0]\nE   [right]: [18.0, 5.0, 22.0, 75.0, 58.0, 4.0, 63.0, nan, nan, nan, 25.0, 57.0, 46.0, 52.0, 81.0, 50.0, 5.0, 38.0, 78.0, 38.0, 81.0, 58.0, 52.0, 51.0, 64.0, 73.0, nan, nan, nan, 32.0, 86.0, 60.0, 44.0, 52.0, 71.0, 18.0, 31.0, 9.0, 8.0, 13.0, 35.0, 27.0, 24.0, 74.0, 17.0, nan, nan, nan, 67.0, 99.0, 36.0, 3.0, 30.0, 4.0, 55.0, 92.0, 99.0, 5.0, 10.0, 71.0, 73.0, 34.0, 92.0, 53.0, nan, nan, nan, 78.0, 77.0, 54.0, 25.0, 69.0, 81.0, 85.0, 13.0, 58.0, 26.0, 98.0, 37.0, 65.0, 29.0, 44.0, 82.0, nan, nan, nan, 98.0, 17.0, 52.0, 68.0, 0.0, 31.0, 77.0, 82.0, 75.0, 22.0, 6.0, 44.0, 94.0, 6.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [85.0, 72.0, 79.0, 82.0, 32.0, 98.0, 65.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 32.0, 76.0, 42.0, 64.0, 52.0, 76.0, 39.0, 27.0, 40.0, 12.0, 52.0, 60.0, 24.0, 64.0, 34.0, 56.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 3.0, 64.0, 85.0, 58.0, 61.0, 9.0, 30.0, 71.0, 92.0, 66.0, 25.0, 74.0, 63.0, 6.0, 20.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 73.0, 43.0, 32.0, 91.0, 2.0, 25.0, 55.0, 56.0, 44.0, 67.0, 67.0, 16.0, 71.0, 35.0, 74.0, 62.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 32.0, 84.0, 24.0, 83.0, 13.0, 99.0, 72.0, 49.0, 38.0, 43.0, 20.0, 31.0, 86.0, 58.0, 61.0, 22.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 81.0, 36.0, 82.0, 88.0, 6.0, 67.0, 89.0, 33.0, 5.0, 65.0, 34.0, 24.0, 94.0, 2.0, ...]\nE   [right]: [85.0, 72.0, 79.0, 82.0, 32.0, 98.0, 65.0, nan, nan, nan, 32.0, 76.0, 42.0, 64.0, 52.0, 76.0, 39.0, 27.0, 40.0, 12.0, 52.0, 60.0, 24.0, 64.0, 34.0, 56.0, nan, nan, nan, 6.0, 3.0, 64.0, 85.0, 58.0, 61.0, 9.0, 30.0, 71.0, 92.0, 66.0, 25.0, 74.0, 63.0, 6.0, 20.0, nan, nan, nan, 73.0, 43.0, 32.0, 91.0, 2.0, 25.0, 55.0, 56.0, 44.0, 67.0, 67.0, 16.0, 71.0, 35.0, 74.0, 62.0, nan, nan, nan, 32.0, 84.0, 24.0, 83.0, 13.0, 99.0, 72.0, 49.0, 38.0, 43.0, 20.0, 31.0, 86.0, 58.0, 61.0, 22.0, nan, nan, nan, 81.0, 36.0, 82.0, 88.0, 6.0, 67.0, 89.0, 33.0, 5.0, 65.0, 34.0, 24.0, 94.0, 2.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [55.0, 68.0, 55.0, 79.0, 0.0, 55.0, 79.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 21.0, 54.0, 71.0, 75.0, 58.0, 34.0, 50.0, 99.0, 28.0, 27.0, 25.0, 51.0, 11.0, 46.0, 46.0, 94.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 29.0, 11.0, 96.0, 55.0, 13.0, 35.0, 88.0, 85.0, 25.0, 38.0, 15.0, 0.0, 78.0, 38.0, 60.0, 71.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 81.0, 43.0, 12.0, 14.0, 64.0, 37.0, 61.0, 46.0, 46.0, 98.0, 99.0, 97.0, 54.0, 93.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 78.0, 76.0, 33.0, 89.0, 12.0, 84.0, 31.0, 6.0, 28.0, 68.0, 33.0, 58.0, 59.0, 59.0, 43.0, 98.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 24.0, 54.0, 86.0, 21.0, 70.0, 62.0, 55.0, 9.0, 93.0, 28.0, 54.0, 61.0, 21.0, 51.0, ...]\nE   [right]: [55.0, 68.0, 55.0, 79.0, 0.0, 55.0, 79.0, nan, nan, nan, 21.0, 54.0, 71.0, 75.0, 58.0, 34.0, 50.0, 99.0, 28.0, 27.0, 25.0, 51.0, 11.0, 46.0, 46.0, 94.0, nan, nan, nan, 29.0, 11.0, 96.0, 55.0, 13.0, 35.0, 88.0, 85.0, 25.0, 38.0, 15.0, 0.0, 78.0, 38.0, 60.0, 71.0, nan, nan, nan, 44.0, 81.0, 43.0, 12.0, 14.0, 64.0, 37.0, 61.0, 46.0, 46.0, 98.0, 99.0, 97.0, 54.0, 93.0, 5.0, nan, nan, nan, 78.0, 76.0, 33.0, 89.0, 12.0, 84.0, 31.0, 6.0, 28.0, 68.0, 33.0, 58.0, 59.0, 59.0, 43.0, 98.0, nan, nan, nan, 24.0, 54.0, 86.0, 21.0, 70.0, 62.0, 55.0, 9.0, 93.0, 28.0, 54.0, 61.0, 21.0, 51.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [18.0, 94.0, 37.0, 62.0, 68.0, 86.0, 41.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 19.0, 65.0, 15.0, 45.0, 50.0, 70.0, 70.0, 90.0, 47.0, 13.0, 12.0, 77.0, 59.0, 28.0, 10.0, 28.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 85.0, 85.0, 0.0, 92.0, 89.0, 64.0, 64.0, 47.0, 61.0, 22.0, 17.0, 74.0, 33.0, 69.0, 30.0, 11.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 19.0, 66.0, 76.0, 7.0, 46.0, 20.0, 49.0, 86.0, 5.0, 0.0, 58.0, 3.0, 80.0, 44.0, 48.0, 63.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 34.0, 50.0, 90.0, 59.0, 69.0, 33.0, 37.0, 32.0, 94.0, 39.0, 23.0, 24.0, 17.0, 74.0, 79.0, 21.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 90.0, 22.0, 22.0, 60.0, 72.0, 13.0, 5.0, 33.0, 42.0, 93.0, 88.0, 45.0, 7.0, 33.0, ...]\nE   [right]: [18.0, 94.0, 37.0, 62.0, 68.0, 86.0, 41.0, nan, nan, nan, 19.0, 65.0, 15.0, 45.0, 50.0, 70.0, 70.0, 90.0, 47.0, 13.0, 12.0, 77.0, 59.0, 28.0, 10.0, 28.0, nan, nan, nan, 85.0, 85.0, 0.0, 92.0, 89.0, 64.0, 64.0, 47.0, 61.0, 22.0, 17.0, 74.0, 33.0, 69.0, 30.0, 11.0, nan, nan, nan, 19.0, 66.0, 76.0, 7.0, 46.0, 20.0, 49.0, 86.0, 5.0, 0.0, 58.0, 3.0, 80.0, 44.0, 48.0, 63.0, nan, nan, nan, 34.0, 50.0, 90.0, 59.0, 69.0, 33.0, 37.0, 32.0, 94.0, 39.0, 23.0, 24.0, 17.0, 74.0, 79.0, 21.0, nan, nan, nan, 90.0, 22.0, 22.0, 60.0, 72.0, 13.0, 5.0, 33.0, 42.0, 93.0, 88.0, 45.0, 7.0, 33.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [30.0, 548.0, 199.0, 738.0, 495.0, 184.0, 976.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 162.0, 727.0, 866.0, 113.0, 402.0, 64.0, 882.0, 740.0, 524.0, 950.0, 291.0, 150.0, 111.0, 666.0, 886.0, 984.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 769.0, 653.0, 76.0, 586.0, 917.0, 472.0, 876.0, 572.0, 444.0, 730.0, 331.0, 38.0, 766.0, 352.0, 862.0, 56.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 558.0, 5.0, 359.0, 571.0, 263.0, 879.0, 770.0, 710.0, 574.0, 789.0, 964.0, 252.0, 553.0, 3.0, 434.0, 559.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 693.0, 846.0, 981.0, 495.0, 738.0, 973.0, 472.0, 356.0, 168.0, 683.0, 607.0, 257.0, 221.0, 448.0, 721.0, 411.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 135.0, 177.0, 831.0, 112.0, 683.0, 101.0, 473.0, 170.0, 118.0, 780.0, 966.0, 593.0, 178.0, 931.0]\nE   [right]: [30.0, 548.0, 199.0, 738.0, 495.0, 184.0, 976.0, nan, nan, nan, 162.0, 727.0, 866.0, 113.0, 402.0, 64.0, 882.0, 740.0, 524.0, 950.0, 291.0, 150.0, 111.0, 666.0, 886.0, 984.0, nan, nan, nan, 769.0, 653.0, 76.0, 586.0, 917.0, 472.0, 876.0, 572.0, 444.0, 730.0, 331.0, 38.0, 766.0, 352.0, 862.0, 56.0, nan, nan, nan, 558.0, 5.0, 359.0, 571.0, 263.0, 879.0, 770.0, 710.0, 574.0, 789.0, 964.0, 252.0, 553.0, 3.0, 434.0, 559.0, nan, nan, nan, 693.0, 846.0, 981.0, 495.0, 738.0, 973.0, 472.0, 356.0, 168.0, 683.0, 607.0, 257.0, 221.0, 448.0, 721.0, 411.0, nan, nan, nan, 135.0, 177.0, 831.0, 112.0, 683.0, 101.0, 473.0, 170.0, 118.0, 780.0, 966.0, 593.0, 178.0, 931.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [370.0, 212.0, 562.0, 812.0, 533.0, 947.0, 348.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 33.0, 527.0, 68.0, 739.0, 17.0, 534.0, 954.0, 454.0, 180.0, 674.0, 81.0, 63.0, 829.0, 163.0, 758.0, 627.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 454.0, 246.0, 412.0, 686.0, 771.0, 529.0, 331.0, 384.0, 170.0, 541.0, 3.0, 574.0, 911.0, 481.0, 986.0, 867.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 805.0, 502.0, 15.0, 928.0, 122.0, 651.0, 283.0, 903.0, 808.0, 787.0, 479.0, 345.0, 476.0, 132.0, 998.0, 830.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 426.0, 761.0, 715.0, 918.0, 954.0, 813.0, 172.0, 675.0, 959.0, 91.0, 7.0, 337.0, 903.0, 110.0, 501.0, 628.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 878.0, 92.0, 667.0, 810.0, 240.0, 847.0, 949.0, 452.0, 143.0, 676.0, 250.0, 973.0, 913.0, 305.0, ...]\nE   [right]: [370.0, 212.0, 562.0, 812.0, 533.0, 947.0, 348.0, nan, nan, nan, 33.0, 527.0, 68.0, 739.0, 17.0, 534.0, 954.0, 454.0, 180.0, 674.0, 81.0, 63.0, 829.0, 163.0, 758.0, 627.0, nan, nan, nan, 454.0, 246.0, 412.0, 686.0, 771.0, 529.0, 331.0, 384.0, 170.0, 541.0, 3.0, 574.0, 911.0, 481.0, 986.0, 867.0, nan, nan, nan, 805.0, 502.0, 15.0, 928.0, 122.0, 651.0, 283.0, 903.0, 808.0, 787.0, 479.0, 345.0, 476.0, 132.0, 998.0, 830.0, nan, nan, nan, 426.0, 761.0, 715.0, 918.0, 954.0, 813.0, 172.0, 675.0, 959.0, 91.0, 7.0, 337.0, 903.0, 110.0, 501.0, 628.0, nan, nan, nan, 878.0, 92.0, 667.0, 810.0, 240.0, 847.0, 949.0, 452.0, 143.0, 676.0, 250.0, 973.0, 913.0, 305.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [69.0, 144.0, 420.0, 12.0, 833.0, 398.0, 570.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 153.0, 882.0, 614.0, 830.0, 20.0, 856.0, 724.0, 779.0, 306.0, 581.0, 270.0, 764.0, 619.0, 472.0, 73.0, 703.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 750.0, 282.0, 472.0, 532.0, 747.0, 856.0, 633.0, 729.0, 103.0, 724.0, 495.0, 993.0, 52.0, 773.0, 190.0, 472.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 82.0, 538.0, 571.0, 437.0, 648.0, 782.0, 854.0, 283.0, 500.0, 550.0, 918.0, 465.0, 184.0, 615.0, 916.0, 512.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 599.0, 688.0, 15.0, 370.0, 873.0, 595.0, 386.0, 654.0, 396.0, 492.0, 346.0, 318.0, 656.0, 436.0, 747.0, 772.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 962.0, 574.0, 612.0, 239.0, 478.0, 230.0, 780.0, 897.0, 122.0, 901.0, 268.0, 847.0, 911.0, 568.0, ...]\nE   [right]: [69.0, 144.0, 420.0, 12.0, 833.0, 398.0, 570.0, nan, nan, nan, 153.0, 882.0, 614.0, 830.0, 20.0, 856.0, 724.0, 779.0, 306.0, 581.0, 270.0, 764.0, 619.0, 472.0, 73.0, 703.0, nan, nan, nan, 750.0, 282.0, 472.0, 532.0, 747.0, 856.0, 633.0, 729.0, 103.0, 724.0, 495.0, 993.0, 52.0, 773.0, 190.0, 472.0, nan, nan, nan, 82.0, 538.0, 571.0, 437.0, 648.0, 782.0, 854.0, 283.0, 500.0, 550.0, 918.0, 465.0, 184.0, 615.0, 916.0, 512.0, nan, nan, nan, 599.0, 688.0, 15.0, 370.0, 873.0, 595.0, 386.0, 654.0, 396.0, 492.0, 346.0, 318.0, 656.0, 436.0, 747.0, 772.0, nan, nan, nan, 962.0, 574.0, 612.0, 239.0, 478.0, 230.0, 780.0, 897.0, 122.0, 901.0, 268.0, 847.0, 911.0, 568.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [491.0, 958.0, 27.0, 827.0, 951.0, 626.0, 45.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 612.0, 727.0, 972.0, 192.0, 521.0, 571.0, 546.0, 252.0, 800.0, 162.0, 917.0, 489.0, 230.0, 186.0, 362.0, 730.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 963.0, 905.0, 377.0, 140.0, 425.0, 195.0, 631.0, 771.0, 309.0, 117.0, 489.0, 392.0, 699.0, 206.0, 4.0, 518.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 843.0, 833.0, 888.0, 968.0, 499.0, 448.0, 471.0, 442.0, 923.0, 394.0, 275.0, 228.0, 401.0, 908.0, 894.0, 392.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 877.0, 302.0, 404.0, 590.0, 349.0, 883.0, 625.0, 809.0, 628.0, 172.0, 826.0, 287.0, 489.0, 521.0, 449.0, 423.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 728.0, 783.0, 653.0, 853.0, 67.0, 531.0, 731.0, 269.0, 107.0, 614.0, 741.0, 862.0, 34.0, 804.0, ...]\nE   [right]: [491.0, 958.0, 27.0, 827.0, 951.0, 626.0, 45.0, nan, nan, nan, 612.0, 727.0, 972.0, 192.0, 521.0, 571.0, 546.0, 252.0, 800.0, 162.0, 917.0, 489.0, 230.0, 186.0, 362.0, 730.0, nan, nan, nan, 963.0, 905.0, 377.0, 140.0, 425.0, 195.0, 631.0, 771.0, 309.0, 117.0, 489.0, 392.0, 699.0, 206.0, 4.0, 518.0, nan, nan, nan, 843.0, 833.0, 888.0, 968.0, 499.0, 448.0, 471.0, 442.0, 923.0, 394.0, 275.0, 228.0, 401.0, 908.0, 894.0, 392.0, nan, nan, nan, 877.0, 302.0, 404.0, 590.0, 349.0, 883.0, 625.0, 809.0, 628.0, 172.0, 826.0, 287.0, 489.0, 521.0, 449.0, 423.0, nan, nan, nan, 728.0, 783.0, 653.0, 853.0, 67.0, 531.0, 731.0, 269.0, 107.0, 614.0, 741.0, 862.0, 34.0, 804.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [7.0, 0.0, 1.0, 2.0, 1.0, 2.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 1.0, 5.0, 9.0, 9.0, 3.0, 9.0, 7.0, 3.0, 8.0, 8.0, 6.0, 4.0, 9.0, 5.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 0.0, 5.0, 3.0, 0.0, 1.0, 2.0, 1.0, 5.0, 7.0, 5.0, 2.0, 8.0, 1.0, 4.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 8.0, 9.0, 4.0, 8.0, 5.0, 2.0, 1.0, 7.0, 7.0, 8.0, 9.0, 8.0, 5.0, 6.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 7.0, 1.0, 1.0, 7.0, 6.0, 3.0, 9.0, 5.0, 2.0, 3.0, 5.0, 8.0, 5.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 0.0, 3.0, 9.0, 2.0, 6.0, 9.0, 8.0, 6.0, 5.0, 9.0, 3.0, 8.0, 1.0]\nE   [right]: [7.0, 0.0, 1.0, 2.0, 1.0, 2.0, 7.0, nan, nan, nan, 8.0, 1.0, 5.0, 9.0, 9.0, 3.0, 9.0, 7.0, 3.0, 8.0, 8.0, 6.0, 4.0, 9.0, 5.0, 3.0, nan, nan, nan, 6.0, 0.0, 5.0, 3.0, 0.0, 1.0, 2.0, 1.0, 5.0, 7.0, 5.0, 2.0, 8.0, 1.0, 4.0, 5.0, nan, nan, nan, 2.0, 8.0, 9.0, 4.0, 8.0, 5.0, 2.0, 1.0, 7.0, 7.0, 8.0, 9.0, 8.0, 5.0, 6.0, 9.0, nan, nan, nan, 2.0, 7.0, 1.0, 1.0, 7.0, 6.0, 3.0, 9.0, 5.0, 2.0, 3.0, 5.0, 8.0, 5.0, 0.0, 3.0, nan, nan, nan, 4.0, 0.0, 3.0, 9.0, 2.0, 6.0, 9.0, 8.0, 6.0, 5.0, 9.0, 3.0, 8.0, 1.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [7.0, 8.0, 7.0, 8.0, 3.0, 2.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 2.0, 7.0, 8.0, 6.0, 6.0, 8.0, 8.0, 3.0, 9.0, 9.0, 3.0, 0.0, 8.0, 3.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 8.0, 3.0, 1.0, 7.0, 2.0, 0.0, 2.0, 1.0, 8.0, 8.0, 0.0, 1.0, 6.0, 5.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 7.0, 4.0, 7.0, 5.0, 2.0, 1.0, 5.0, 2.0, 5.0, 9.0, 5.0, 9.0, 7.0, 6.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 3.0, 1.0, 7.0, 3.0, 0.0, 7.0, 0.0, 3.0, 7.0, 1.0, 8.0, 6.0, 5.0, 6.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 4.0, 0.0, 0.0, 5.0, 0.0, 9.0, 1.0, 9.0, 7.0, 3.0, 4.0, 9.0, 0.0, ...]\nE   [right]: [7.0, 8.0, 7.0, 8.0, 3.0, 2.0, 3.0, nan, nan, nan, 6.0, 2.0, 7.0, 8.0, 6.0, 6.0, 8.0, 8.0, 3.0, 9.0, 9.0, 3.0, 0.0, 8.0, 3.0, 7.0, nan, nan, nan, 4.0, 8.0, 3.0, 1.0, 7.0, 2.0, 0.0, 2.0, 1.0, 8.0, 8.0, 0.0, 1.0, 6.0, 5.0, 1.0, nan, nan, nan, 3.0, 7.0, 4.0, 7.0, 5.0, 2.0, 1.0, 5.0, 2.0, 5.0, 9.0, 5.0, 9.0, 7.0, 6.0, 8.0, nan, nan, nan, 4.0, 3.0, 1.0, 7.0, 3.0, 0.0, 7.0, 0.0, 3.0, 7.0, 1.0, 8.0, 6.0, 5.0, 6.0, 1.0, nan, nan, nan, 6.0, 4.0, 0.0, 0.0, 5.0, 0.0, 9.0, 1.0, 9.0, 7.0, 3.0, 4.0, 9.0, 0.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [4.0, 5.0, 3.0, 8.0, 3.0, 3.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 9.0, 3.0, 2.0, 8.0, 4.0, 0.0, 1.0, 6.0, 2.0, 6.0, 4.0, 6.0, 6.0, 2.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 9.0, 7.0, 3.0, 6.0, 3.0, 7.0, 8.0, 3.0, 1.0, 0.0, 3.0, 9.0, 6.0, 1.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 6.0, 3.0, 8.0, 1.0, 3.0, 6.0, 8.0, 5.0, 1.0, 9.0, 7.0, 0.0, 1.0, 8.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 0.0, 9.0, 7.0, 8.0, 5.0, 9.0, 5.0, 4.0, 2.0, 2.0, 9.0, 1.0, 5.0, 6.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 6.0, 6.0, 2.0, 0.0, 9.0, 7.0, 3.0, 9.0, 3.0, 6.0, 5.0, 9.0, 7.0, ...]\nE   [right]: [4.0, 5.0, 3.0, 8.0, 3.0, 3.0, 0.0, nan, nan, nan, 1.0, 9.0, 3.0, 2.0, 8.0, 4.0, 0.0, 1.0, 6.0, 2.0, 6.0, 4.0, 6.0, 6.0, 2.0, 5.0, nan, nan, nan, 6.0, 9.0, 7.0, 3.0, 6.0, 3.0, 7.0, 8.0, 3.0, 1.0, 0.0, 3.0, 9.0, 6.0, 1.0, 8.0, nan, nan, nan, 8.0, 6.0, 3.0, 8.0, 1.0, 3.0, 6.0, 8.0, 5.0, 1.0, 9.0, 7.0, 0.0, 1.0, 8.0, 5.0, nan, nan, nan, 6.0, 0.0, 9.0, 7.0, 8.0, 5.0, 9.0, 5.0, 4.0, 2.0, 2.0, 9.0, 1.0, 5.0, 6.0, 7.0, nan, nan, nan, 3.0, 6.0, 6.0, 2.0, 0.0, 9.0, 7.0, 3.0, 9.0, 3.0, 6.0, 5.0, 9.0, 7.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [2.0, 7.0, 8.0, 6.0, 3.0, 7.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 7.0, 3.0, 3.0, 1.0, 1.0, 2.0, 7.0, 2.0, 8.0, 1.0, 2.0, 6.0, 2.0, 5.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 5.0, 1.0, 9.0, 2.0, 9.0, 8.0, 3.0, 3.0, 8.0, 7.0, 7.0, 4.0, 6.0, 4.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 5.0, 9.0, 6.0, 2.0, 9.0, 3.0, 1.0, 8.0, 5.0, 5.0, 8.0, 8.0, 9.0, 1.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 3.0, 5.0, 0.0, 7.0, 8.0, 3.0, 8.0, 9.0, 1.0, 2.0, 5.0, 2.0, 4.0, 3.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 0.0, 2.0, 9.0, 9.0, 5.0, 4.0, 9.0, 0.0, 5.0, 0.0, 6.0, 8.0, 1.0, ...]\nE   [right]: [2.0, 7.0, 8.0, 6.0, 3.0, 7.0, 7.0, nan, nan, nan, 7.0, 7.0, 3.0, 3.0, 1.0, 1.0, 2.0, 7.0, 2.0, 8.0, 1.0, 2.0, 6.0, 2.0, 5.0, 3.0, nan, nan, nan, 7.0, 5.0, 1.0, 9.0, 2.0, 9.0, 8.0, 3.0, 3.0, 8.0, 7.0, 7.0, 4.0, 6.0, 4.0, 2.0, nan, nan, nan, 9.0, 5.0, 9.0, 6.0, 2.0, 9.0, 3.0, 1.0, 8.0, 5.0, 5.0, 8.0, 8.0, 9.0, 1.0, 2.0, nan, nan, nan, 8.0, 3.0, 5.0, 0.0, 7.0, 8.0, 3.0, 8.0, 9.0, 1.0, 2.0, 5.0, 2.0, 4.0, 3.0, 6.0, nan, nan, nan, 8.0, 0.0, 2.0, 9.0, 9.0, 5.0, 4.0, 9.0, 0.0, 5.0, 0.0, 6.0, 8.0, 1.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [86.0, 11.0, 5.0, 81.0, 71.0, 51.0, 70.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 51.0, 46.0, 20.0, 43.0, 31.0, 5.0, 22.0, 75.0, 37.0, 72.0, 75.0, 95.0, 49.0, 71.0, 14.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 20.0, 30.0, 7.0, 92.0, 87.0, 45.0, 73.0, 22.0, 12.0, 36.0, 6.0, 44.0, 61.0, 88.0, 84.0, 30.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 70.0, 72.0, 78.0, 58.0, 49.0, 61.0, 77.0, 81.0, 84.0, 74.0, 13.0, 93.0, 1.0, 98.0, 97.0, 94.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 73.0, 66.0, 12.0, 95.0, 18.0, 42.0, 0.0, 38.0, 26.0, 21.0, 39.0, 82.0, 73.0, 71.0, 66.0, 55.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 80.0, 81.0, 19.0, 20.0, 55.0, 77.0, 16.0, 98.0, 32.0, 40.0, 36.0, 3.0, 70.0, 74.0]\nE   [right]: [86.0, 11.0, 5.0, 81.0, 71.0, 51.0, 70.0, nan, nan, nan, 51.0, 46.0, 20.0, 43.0, 31.0, 5.0, 22.0, 75.0, 37.0, 72.0, 75.0, 95.0, 49.0, 71.0, 14.0, 2.0, nan, nan, nan, 20.0, 30.0, 7.0, 92.0, 87.0, 45.0, 73.0, 22.0, 12.0, 36.0, 6.0, 44.0, 61.0, 88.0, 84.0, 30.0, nan, nan, nan, 70.0, 72.0, 78.0, 58.0, 49.0, 61.0, 77.0, 81.0, 84.0, 74.0, 13.0, 93.0, 1.0, 98.0, 97.0, 94.0, nan, nan, nan, 73.0, 66.0, 12.0, 95.0, 18.0, 42.0, 0.0, 38.0, 26.0, 21.0, 39.0, 82.0, 73.0, 71.0, 66.0, 55.0, nan, nan, nan, 80.0, 81.0, 19.0, 20.0, 55.0, 77.0, 16.0, 98.0, 32.0, 40.0, 36.0, 3.0, 70.0, 74.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [39.0, 80.0, 26.0, 6.0, 80.0, 34.0, 49.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 42.0, 83.0, 40.0, 94.0, 25.0, 57.0, 82.0, 29.0, 44.0, 23.0, 44.0, 35.0, 80.0, 32.0, 56.0, 13.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 16.0, 7.0, 27.0, 73.0, 68.0, 92.0, 38.0, 8.0, 59.0, 59.0, 71.0, 51.0, 94.0, 47.0, 81.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 53.0, 47.0, 47.0, 11.0, 34.0, 71.0, 96.0, 85.0, 63.0, 95.0, 38.0, 55.0, 77.0, 92.0, 20.0, 32.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 92.0, 83.0, 16.0, 8.0, 49.0, 16.0, 89.0, 19.0, 65.0, 98.0, 83.0, 37.0, 53.0, 88.0, 25.0, 60.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 97.0, 23.0, 74.0, 56.0, 17.0, 53.0, 76.0, 49.0, 30.0, 66.0, 86.0, 11.0, 34.0, 95.0, ...]\nE   [right]: [39.0, 80.0, 26.0, 6.0, 80.0, 34.0, 49.0, nan, nan, nan, 42.0, 83.0, 40.0, 94.0, 25.0, 57.0, 82.0, 29.0, 44.0, 23.0, 44.0, 35.0, 80.0, 32.0, 56.0, 13.0, nan, nan, nan, 12.0, 16.0, 7.0, 27.0, 73.0, 68.0, 92.0, 38.0, 8.0, 59.0, 59.0, 71.0, 51.0, 94.0, 47.0, 81.0, nan, nan, nan, 53.0, 47.0, 47.0, 11.0, 34.0, 71.0, 96.0, 85.0, 63.0, 95.0, 38.0, 55.0, 77.0, 92.0, 20.0, 32.0, nan, nan, nan, 92.0, 83.0, 16.0, 8.0, 49.0, 16.0, 89.0, 19.0, 65.0, 98.0, 83.0, 37.0, 53.0, 88.0, 25.0, 60.0, nan, nan, nan, 97.0, 23.0, 74.0, 56.0, 17.0, 53.0, 76.0, 49.0, 30.0, 66.0, 86.0, 11.0, 34.0, 95.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [20.0, 59.0, 37.0, 37.0, 61.0, 70.0, 98.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 74.0, 77.0, 93.0, 50.0, 70.0, 93.0, 98.0, 90.0, 50.0, 40.0, 31.0, 62.0, 28.0, 37.0, 22.0, 69.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 68.0, 67.0, 16.0, 45.0, 14.0, 75.0, 54.0, 43.0, 86.0, 35.0, 90.0, 31.0, 50.0, 81.0, 50.0, 15.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 28.0, 5.0, 68.0, 64.0, 68.0, 40.0, 79.0, 91.0, 55.0, 9.0, 52.0, 37.0, 78.0, 90.0, 21.0, 42.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 26.0, 18.0, 74.0, 67.0, 4.0, 86.0, 29.0, 70.0, 74.0, 62.0, 54.0, 50.0, 20.0, 72.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 34.0, 33.0, 15.0, 74.0, 93.0, 0.0, 44.0, 95.0, 28.0, 30.0, 46.0, 68.0, 42.0, ...]\nE   [right]: [20.0, 59.0, 37.0, 37.0, 61.0, 70.0, 98.0, nan, nan, nan, 74.0, 77.0, 93.0, 50.0, 70.0, 93.0, 98.0, 90.0, 50.0, 40.0, 31.0, 62.0, 28.0, 37.0, 22.0, 69.0, nan, nan, nan, 68.0, 67.0, 16.0, 45.0, 14.0, 75.0, 54.0, 43.0, 86.0, 35.0, 90.0, 31.0, 50.0, 81.0, 50.0, 15.0, nan, nan, nan, 28.0, 5.0, 68.0, 64.0, 68.0, 40.0, 79.0, 91.0, 55.0, 9.0, 52.0, 37.0, 78.0, 90.0, 21.0, 42.0, nan, nan, nan, 4.0, 26.0, 18.0, 74.0, 67.0, 4.0, 86.0, 29.0, 70.0, 74.0, 62.0, 54.0, 50.0, 20.0, 72.0, 3.0, nan, nan, nan, 31.0, 34.0, 33.0, 15.0, 74.0, 93.0, 0.0, 44.0, 95.0, 28.0, 30.0, 46.0, 68.0, 42.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [81.0, 3.0, 25.0, 28.0, 52.0, 14.0, 48.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 53.0, 87.0, 24.0, 79.0, 39.0, 66.0, 91.0, 31.0, 47.0, 33.0, 86.0, 28.0, 23.0, 71.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 94.0, 72.0, 89.0, 64.0, 32.0, 34.0, 60.0, 38.0, 28.0, 61.0, 88.0, 14.0, 65.0, 64.0, 55.0, 81.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 10.0, 9.0, 74.0, 13.0, 56.0, 90.0, 54.0, 84.0, 87.0, 7.0, 8.0, 80.0, 17.0, 43.0, 4.0, 97.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 46.0, 20.0, 96.0, 4.0, 82.0, 46.0, 9.0, 83.0, 35.0, 93.0, 32.0, 14.0, 80.0, 17.0, 38.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 20.0, 60.0, 86.0, 78.0, 4.0, 66.0, 63.0, 48.0, 19.0, 75.0, 20.0, 36.0, 23.0, 46.0, ...]\nE   [right]: [81.0, 3.0, 25.0, 28.0, 52.0, 14.0, 48.0, nan, nan, nan, 2.0, 53.0, 87.0, 24.0, 79.0, 39.0, 66.0, 91.0, 31.0, 47.0, 33.0, 86.0, 28.0, 23.0, 71.0, 5.0, nan, nan, nan, 94.0, 72.0, 89.0, 64.0, 32.0, 34.0, 60.0, 38.0, 28.0, 61.0, 88.0, 14.0, 65.0, 64.0, 55.0, 81.0, nan, nan, nan, 10.0, 9.0, 74.0, 13.0, 56.0, 90.0, 54.0, 84.0, 87.0, 7.0, 8.0, 80.0, 17.0, 43.0, 4.0, 97.0, nan, nan, nan, 46.0, 20.0, 96.0, 4.0, 82.0, 46.0, 9.0, 83.0, 35.0, 93.0, 32.0, 14.0, 80.0, 17.0, 38.0, 0.0, nan, nan, nan, 20.0, 60.0, 86.0, 78.0, 4.0, 66.0, 63.0, 48.0, 19.0, 75.0, 20.0, 36.0, 23.0, 46.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [94.0, 228.0, 220.0, 379.0, 718.0, 142.0, 874.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 942.0, 175.0, 920.0, 557.0, 614.0, 798.0, 990.0, 281.0, 816.0, 167.0, 982.0, 709.0, 265.0, 643.0, 152.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 111.0, 200.0, 91.0, 591.0, 354.0, 674.0, 256.0, 562.0, 908.0, 756.0, 944.0, 347.0, 30.0, 720.0, 212.0, 969.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 856.0, 419.0, 336.0, 995.0, 900.0, 633.0, 808.0, 227.0, 910.0, 587.0, 149.0, 543.0, 225.0, 645.0, 363.0, 808.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 572.0, 299.0, 512.0, 691.0, 964.0, 964.0, 92.0, 933.0, 684.0, 516.0, 574.0, 393.0, 943.0, 232.0, 217.0, 667.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 645.0, 173.0, 888.0, 925.0, 473.0, 297.0, 716.0, 535.0, 43.0, 960.0, 626.0, 534.0, 776.0, 405.0]\nE   [right]: [94.0, 228.0, 220.0, 379.0, 718.0, 142.0, 874.0, nan, nan, nan, 0.0, 942.0, 175.0, 920.0, 557.0, 614.0, 798.0, 990.0, 281.0, 816.0, 167.0, 982.0, 709.0, 265.0, 643.0, 152.0, nan, nan, nan, 111.0, 200.0, 91.0, 591.0, 354.0, 674.0, 256.0, 562.0, 908.0, 756.0, 944.0, 347.0, 30.0, 720.0, 212.0, 969.0, nan, nan, nan, 856.0, 419.0, 336.0, 995.0, 900.0, 633.0, 808.0, 227.0, 910.0, 587.0, 149.0, 543.0, 225.0, 645.0, 363.0, 808.0, nan, nan, nan, 572.0, 299.0, 512.0, 691.0, 964.0, 964.0, 92.0, 933.0, 684.0, 516.0, 574.0, 393.0, 943.0, 232.0, 217.0, 667.0, nan, nan, nan, 645.0, 173.0, 888.0, 925.0, 473.0, 297.0, 716.0, 535.0, 43.0, 960.0, 626.0, 534.0, 776.0, 405.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [916.0, 303.0, 483.0, 27.0, 536.0, 558.0, 532.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 227.0, 156.0, 166.0, 996.0, 697.0, 509.0, 417.0, 255.0, 898.0, 712.0, 535.0, 800.0, 48.0, 413.0, 69.0, 584.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 430.0, 730.0, 366.0, 903.0, 457.0, 589.0, 835.0, 799.0, 416.0, 431.0, 619.0, 747.0, 115.0, 205.0, 110.0, 720.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 681.0, 28.0, 497.0, 409.0, 116.0, 287.0, 600.0, 149.0, 532.0, 783.0, 470.0, 387.0, 348.0, 80.0, 614.0, 650.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 520.0, 858.0, 208.0, 984.0, 26.0, 89.0, 566.0, 774.0, 644.0, 875.0, 578.0, 76.0, 784.0, 840.0, 438.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 503.0, 121.0, 851.0, 453.0, 121.0, 797.0, 151.0, 770.0, 125.0, 148.0, 531.0, 762.0, 731.0, 369.0, ...]\nE   [right]: [916.0, 303.0, 483.0, 27.0, 536.0, 558.0, 532.0, nan, nan, nan, 227.0, 156.0, 166.0, 996.0, 697.0, 509.0, 417.0, 255.0, 898.0, 712.0, 535.0, 800.0, 48.0, 413.0, 69.0, 584.0, nan, nan, nan, 430.0, 730.0, 366.0, 903.0, 457.0, 589.0, 835.0, 799.0, 416.0, 431.0, 619.0, 747.0, 115.0, 205.0, 110.0, 720.0, nan, nan, nan, 681.0, 28.0, 497.0, 409.0, 116.0, 287.0, 600.0, 149.0, 532.0, 783.0, 470.0, 387.0, 348.0, 80.0, 614.0, 650.0, nan, nan, nan, 44.0, 520.0, 858.0, 208.0, 984.0, 26.0, 89.0, 566.0, 774.0, 644.0, 875.0, 578.0, 76.0, 784.0, 840.0, 438.0, nan, nan, nan, 503.0, 121.0, 851.0, 453.0, 121.0, 797.0, 151.0, 770.0, 125.0, 148.0, 531.0, 762.0, 731.0, 369.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [779.0, 269.0, 908.0, 219.0, 867.0, 856.0, 195.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 596.0, 789.0, 885.0, 903.0, 504.0, 300.0, 439.0, 215.0, 77.0, 962.0, 234.0, 263.0, 796.0, 406.0, 589.0, 858.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 491.0, 686.0, 276.0, 71.0, 150.0, 627.0, 823.0, 319.0, 172.0, 762.0, 213.0, 896.0, 811.0, 185.0, 565.0, 71.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 37.0, 241.0, 884.0, 656.0, 609.0, 987.0, 264.0, 736.0, 505.0, 582.0, 163.0, 615.0, 751.0, 5.0, 903.0, 735.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 112.0, 294.0, 692.0, 6.0, 930.0, 891.0, 24.0, 711.0, 935.0, 317.0, 402.0, 280.0, 215.0, 653.0, 467.0, 540.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 319.0, 694.0, 882.0, 143.0, 117.0, 637.0, 619.0, 785.0, 383.0, 928.0, 149.0, 363.0, 460.0, 561.0, ...]\nE   [right]: [779.0, 269.0, 908.0, 219.0, 867.0, 856.0, 195.0, nan, nan, nan, 596.0, 789.0, 885.0, 903.0, 504.0, 300.0, 439.0, 215.0, 77.0, 962.0, 234.0, 263.0, 796.0, 406.0, 589.0, 858.0, nan, nan, nan, 491.0, 686.0, 276.0, 71.0, 150.0, 627.0, 823.0, 319.0, 172.0, 762.0, 213.0, 896.0, 811.0, 185.0, 565.0, 71.0, nan, nan, nan, 37.0, 241.0, 884.0, 656.0, 609.0, 987.0, 264.0, 736.0, 505.0, 582.0, 163.0, 615.0, 751.0, 5.0, 903.0, 735.0, nan, nan, nan, 112.0, 294.0, 692.0, 6.0, 930.0, 891.0, 24.0, 711.0, 935.0, 317.0, 402.0, 280.0, 215.0, 653.0, 467.0, 540.0, nan, nan, nan, 319.0, 694.0, 882.0, 143.0, 117.0, 637.0, 619.0, 785.0, 383.0, 928.0, 149.0, 363.0, 460.0, 561.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [509.0, 59.0, 879.0, 372.0, 849.0, 979.0, 219.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 920.0, 832.0, 77.0, 293.0, 362.0, 241.0, 104.0, 339.0, 78.0, 72.0, 243.0, 712.0, 76.0, 213.0, 875.0, 677.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 848.0, 402.0, 324.0, 794.0, 495.0, 990.0, 636.0, 252.0, 520.0, 516.0, 204.0, 988.0, 361.0, 194.0, 970.0, 594.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 994.0, 738.0, 521.0, 24.0, 271.0, 5.0, 595.0, 0.0, 359.0, 847.0, 876.0, 846.0, 702.0, 436.0, 555.0, 557.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 888.0, 201.0, 957.0, 726.0, 437.0, 690.0, 500.0, 936.0, 43.0, 568.0, 569.0, 610.0, 991.0, 624.0, 610.0, 167.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 413.0, 260.0, 458.0, 733.0, 929.0, 966.0, 525.0, 354.0, 226.0, 880.0, 312.0, 17.0, 601.0, 391.0, ...]\nE   [right]: [509.0, 59.0, 879.0, 372.0, 849.0, 979.0, 219.0, nan, nan, nan, 920.0, 832.0, 77.0, 293.0, 362.0, 241.0, 104.0, 339.0, 78.0, 72.0, 243.0, 712.0, 76.0, 213.0, 875.0, 677.0, nan, nan, nan, 848.0, 402.0, 324.0, 794.0, 495.0, 990.0, 636.0, 252.0, 520.0, 516.0, 204.0, 988.0, 361.0, 194.0, 970.0, 594.0, nan, nan, nan, 994.0, 738.0, 521.0, 24.0, 271.0, 5.0, 595.0, 0.0, 359.0, 847.0, 876.0, 846.0, 702.0, 436.0, 555.0, 557.0, nan, nan, nan, 888.0, 201.0, 957.0, 726.0, 437.0, 690.0, 500.0, 936.0, 43.0, 568.0, 569.0, 610.0, 991.0, 624.0, 610.0, 167.0, nan, nan, nan, 413.0, 260.0, 458.0, 733.0, 929.0, 966.0, 525.0, 354.0, 226.0, 880.0, 312.0, 17.0, 601.0, 391.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [6.0, 9.0, 2.0, 7.0, 2.0, 4.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 0.0, 7.0, 4.0, 8.0, 1.0, 1.0, 5.0, 5.0, 8.0, 8.0, 4.0, 8.0, 8.0, 9.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 6.0, 0.0, 3.0, 9.0, 2.0, 2.0, 0.0, 3.0, 9.0, 2.0, 9.0, 3.0, 0.0, 4.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 7.0, 9.0, 5.0, 8.0, 1.0, 1.0, 5.0, 0.0, 0.0, 8.0, 5.0, 5.0, 0.0, 0.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 7.0, 0.0, 5.0, 4.0, 4.0, 0.0, 7.0, 1.0, 2.0, 3.0, 8.0, 1.0, 4.0, 8.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 2.0, 3.0, 8.0, 8.0, 0.0, 6.0, 5.0, 9.0, 8.0, 7.0, 5.0, 4.0, 2.0]\nE   [right]: [6.0, 9.0, 2.0, 7.0, 2.0, 4.0, 4.0, nan, nan, nan, 7.0, 0.0, 7.0, 4.0, 8.0, 1.0, 1.0, 5.0, 5.0, 8.0, 8.0, 4.0, 8.0, 8.0, 9.0, 6.0, nan, nan, nan, 7.0, 6.0, 0.0, 3.0, 9.0, 2.0, 2.0, 0.0, 3.0, 9.0, 2.0, 9.0, 3.0, 0.0, 4.0, 9.0, nan, nan, nan, 9.0, 7.0, 9.0, 5.0, 8.0, 1.0, 1.0, 5.0, 0.0, 0.0, 8.0, 5.0, 5.0, 0.0, 0.0, 8.0, nan, nan, nan, 6.0, 7.0, 0.0, 5.0, 4.0, 4.0, 0.0, 7.0, 1.0, 2.0, 3.0, 8.0, 1.0, 4.0, 8.0, 9.0, nan, nan, nan, 7.0, 2.0, 3.0, 8.0, 8.0, 0.0, 6.0, 5.0, 9.0, 8.0, 7.0, 5.0, 4.0, 2.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [6.0, 2.0, 2.0, 8.0, 3.0, 6.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 7.0, 9.0, 0.0, 9.0, 5.0, 9.0, 8.0, 5.0, 2.0, 0.0, 8.0, 8.0, 2.0, 5.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 6.0, 2.0, 3.0, 1.0, 5.0, 0.0, 2.0, 9.0, 3.0, 6.0, 0.0, 7.0, 8.0, 5.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 3.0, 7.0, 7.0, 9.0, 6.0, 2.0, 2.0, 3.0, 0.0, 8.0, 5.0, 6.0, 1.0, 3.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 2.0, 4.0, 8.0, 6.0, 4.0, 5.0, 0.0, 7.0, 7.0, 2.0, 9.0, 7.0, 1.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 3.0, 5.0, 8.0, 3.0, 1.0, 6.0, 2.0, 6.0, 0.0, 7.0, 5.0, 1.0, 7.0, ...]\nE   [right]: [6.0, 2.0, 2.0, 8.0, 3.0, 6.0, 5.0, nan, nan, nan, 5.0, 7.0, 9.0, 0.0, 9.0, 5.0, 9.0, 8.0, 5.0, 2.0, 0.0, 8.0, 8.0, 2.0, 5.0, 5.0, nan, nan, nan, 4.0, 6.0, 2.0, 3.0, 1.0, 5.0, 0.0, 2.0, 9.0, 3.0, 6.0, 0.0, 7.0, 8.0, 5.0, 9.0, nan, nan, nan, 6.0, 3.0, 7.0, 7.0, 9.0, 6.0, 2.0, 2.0, 3.0, 0.0, 8.0, 5.0, 6.0, 1.0, 3.0, 6.0, nan, nan, nan, 8.0, 2.0, 4.0, 8.0, 6.0, 4.0, 5.0, 0.0, 7.0, 7.0, 2.0, 9.0, 7.0, 1.0, 0.0, 3.0, nan, nan, nan, 0.0, 3.0, 5.0, 8.0, 3.0, 1.0, 6.0, 2.0, 6.0, 0.0, 7.0, 5.0, 1.0, 7.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 9.0, 8.0, 7.0, 2.0, 9.0, 2.0, 2.0, 8.0, 7.0, 2.0, 8.0, 9.0, 9.0, 6.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 7.0, 6.0, 3.0, 3.0, 0.0, 2.0, 7.0, 3.0, 5.0, 3.0, 8.0, 9.0, 4.0, 4.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 6.0, 4.0, 0.0, 7.0, 0.0, 0.0, 8.0, 2.0, 6.0, 7.0, 5.0, 8.0, 8.0, 5.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 9.0, 2.0, 0.0, 2.0, 1.0, 8.0, 8.0, 7.0, 9.0, 5.0, 2.0, 4.0, 6.0, 5.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 4.0, 6.0, 8.0, 0.0, 7.0, 5.0, 0.0, 1.0, 6.0, 4.0, 0.0, 1.0, 9.0, ...]\nE   [right]: [1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 5.0, nan, nan, nan, 4.0, 9.0, 8.0, 7.0, 2.0, 9.0, 2.0, 2.0, 8.0, 7.0, 2.0, 8.0, 9.0, 9.0, 6.0, 2.0, nan, nan, nan, 0.0, 7.0, 6.0, 3.0, 3.0, 0.0, 2.0, 7.0, 3.0, 5.0, 3.0, 8.0, 9.0, 4.0, 4.0, 6.0, nan, nan, nan, 8.0, 6.0, 4.0, 0.0, 7.0, 0.0, 0.0, 8.0, 2.0, 6.0, 7.0, 5.0, 8.0, 8.0, 5.0, 0.0, nan, nan, nan, 9.0, 9.0, 2.0, 0.0, 2.0, 1.0, 8.0, 8.0, 7.0, 9.0, 5.0, 2.0, 4.0, 6.0, 5.0, 7.0, nan, nan, nan, 6.0, 4.0, 6.0, 8.0, 0.0, 7.0, 5.0, 0.0, 1.0, 6.0, 4.0, 0.0, 1.0, 9.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [4.0, 4.0, 5.0, 6.0, 0.0, 8.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 6.0, 2.0, 1.0, 6.0, 3.0, 7.0, 3.0, 4.0, 1.0, 4.0, 2.0, 3.0, 8.0, 7.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 2.0, 2.0, 4.0, 1.0, 9.0, 5.0, 0.0, 2.0, 7.0, 0.0, 5.0, 4.0, 7.0, 8.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 1.0, 6.0, 1.0, 0.0, 5.0, 2.0, 8.0, 4.0, 6.0, 8.0, 5.0, 8.0, 7.0, 1.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 0.0, 4.0, 3.0, 1.0, 8.0, 8.0, 1.0, 1.0, 6.0, 1.0, 6.0, 9.0, 7.0, 0.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 7.0, 9.0, 2.0, 4.0, 4.0, 2.0, 2.0, 6.0, 9.0, 5.0, 5.0, 0.0, 1.0, ...]\nE   [right]: [4.0, 4.0, 5.0, 6.0, 0.0, 8.0, 9.0, nan, nan, nan, 2.0, 6.0, 2.0, 1.0, 6.0, 3.0, 7.0, 3.0, 4.0, 1.0, 4.0, 2.0, 3.0, 8.0, 7.0, 4.0, nan, nan, nan, 6.0, 2.0, 2.0, 4.0, 1.0, 9.0, 5.0, 0.0, 2.0, 7.0, 0.0, 5.0, 4.0, 7.0, 8.0, 6.0, nan, nan, nan, 9.0, 1.0, 6.0, 1.0, 0.0, 5.0, 2.0, 8.0, 4.0, 6.0, 8.0, 5.0, 8.0, 7.0, 1.0, 6.0, nan, nan, nan, 7.0, 0.0, 4.0, 3.0, 1.0, 8.0, 8.0, 1.0, 1.0, 6.0, 1.0, 6.0, 9.0, 7.0, 0.0, 1.0, nan, nan, nan, 0.0, 7.0, 9.0, 2.0, 4.0, 4.0, 2.0, 2.0, 6.0, 9.0, 5.0, 5.0, 0.0, 1.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [35.0, 45.0, 42.0, 42.0, 13.0, 68.0, 38.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 68.0, 57.0, 21.0, 8.0, 3.0, 12.0, 73.0, 97.0, 73.0, 47.0, 93.0, 22.0, 75.0, 22.0, 18.0, 77.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 86.0, 97.0, 44.0, 53.0, 64.0, 43.0, 76.0, 10.0, 19.0, 80.0, 77.0, 36.0, 88.0, 12.0, 49.0, 56.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 21.0, 74.0, 68.0, 65.0, 73.0, 79.0, 3.0, 27.0, 64.0, 44.0, 1.0, 15.0, 87.0, 57.0, 88.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 74.0, 54.0, 36.0, 57.0, 7.0, 17.0, 7.0, 95.0, 19.0, 78.0, 50.0, 74.0, 82.0, 38.0, 7.0, 20.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 19.0, 25.0, 32.0, 64.0, 27.0, 85.0, 92.0, 66.0, 1.0, 17.0, 70.0, 65.0, 68.0, 75.0]\nE   [right]: [35.0, 45.0, 42.0, 42.0, 13.0, 68.0, 38.0, nan, nan, nan, 68.0, 57.0, 21.0, 8.0, 3.0, 12.0, 73.0, 97.0, 73.0, 47.0, 93.0, 22.0, 75.0, 22.0, 18.0, 77.0, nan, nan, nan, 86.0, 97.0, 44.0, 53.0, 64.0, 43.0, 76.0, 10.0, 19.0, 80.0, 77.0, 36.0, 88.0, 12.0, 49.0, 56.0, nan, nan, nan, 21.0, 74.0, 68.0, 65.0, 73.0, 79.0, 3.0, 27.0, 64.0, 44.0, 1.0, 15.0, 87.0, 57.0, 88.0, 3.0, nan, nan, nan, 74.0, 54.0, 36.0, 57.0, 7.0, 17.0, 7.0, 95.0, 19.0, 78.0, 50.0, 74.0, 82.0, 38.0, 7.0, 20.0, nan, nan, nan, 19.0, 25.0, 32.0, 64.0, 27.0, 85.0, 92.0, 66.0, 1.0, 17.0, 70.0, 65.0, 68.0, 75.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [99.0, 93.0, 8.0, 88.0, 79.0, 15.0, 48.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 90.0, 77.0, 3.0, 29.0, 65.0, 24.0, 26.0, 1.0, 76.0, 36.0, 17.0, 40.0, 33.0, 93.0, 45.0, 59.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 38.0, 33.0, 86.0, 40.0, 45.0, 40.0, 94.0, 25.0, 2.0, 29.0, 81.0, 37.0, 65.0, 63.0, 59.0, 78.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 73.0, 94.0, 91.0, 22.0, 14.0, 16.0, 79.0, 2.0, 95.0, 23.0, 28.0, 48.0, 26.0, 0.0, 52.0, 47.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 26.0, 94.0, 95.0, 23.0, 33.0, 48.0, 41.0, 68.0, 39.0, 36.0, 21.0, 79.0, 97.0, 23.0, 38.0, 14.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 14.0, 8.0, 67.0, 50.0, 55.0, 14.0, 87.0, 11.0, 14.0, 53.0, 32.0, 67.0, 93.0, ...]\nE   [right]: [99.0, 93.0, 8.0, 88.0, 79.0, 15.0, 48.0, nan, nan, nan, 90.0, 77.0, 3.0, 29.0, 65.0, 24.0, 26.0, 1.0, 76.0, 36.0, 17.0, 40.0, 33.0, 93.0, 45.0, 59.0, nan, nan, nan, 38.0, 33.0, 86.0, 40.0, 45.0, 40.0, 94.0, 25.0, 2.0, 29.0, 81.0, 37.0, 65.0, 63.0, 59.0, 78.0, nan, nan, nan, 73.0, 94.0, 91.0, 22.0, 14.0, 16.0, 79.0, 2.0, 95.0, 23.0, 28.0, 48.0, 26.0, 0.0, 52.0, 47.0, nan, nan, nan, 26.0, 94.0, 95.0, 23.0, 33.0, 48.0, 41.0, 68.0, 39.0, 36.0, 21.0, 79.0, 97.0, 23.0, 38.0, 14.0, nan, nan, nan, 31.0, 14.0, 8.0, 67.0, 50.0, 55.0, 14.0, 87.0, 11.0, 14.0, 53.0, 32.0, 67.0, 93.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [28.0, 82.0, 25.0, 28.0, 44.0, 44.0, 81.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 35.0, 94.0, 59.0, 19.0, 13.0, 35.0, 6.0, 8.0, 18.0, 61.0, 44.0, 90.0, 6.0, 4.0, 31.0, 87.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 21.0, 94.0, 39.0, 87.0, 74.0, 51.0, 99.0, 42.0, 8.0, 88.0, 92.0, 32.0, 5.0, 60.0, 7.0, 39.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 81.0, 72.0, 88.0, 48.0, 94.0, 32.0, 36.0, 16.0, 31.0, 20.0, 8.0, 71.0, 44.0, 57.0, 20.0, 38.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 20.0, 31.0, 90.0, 85.0, 90.0, 33.0, 71.0, 23.0, 33.0, 62.0, 54.0, 0.0, 15.0, 95.0, 33.0, 46.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 52.0, 43.0, 26.0, 40.0, 35.0, 47.0, 91.0, 11.0, 49.0, 96.0, 41.0, 0.0, 41.0, 63.0, ...]\nE   [right]: [28.0, 82.0, 25.0, 28.0, 44.0, 44.0, 81.0, nan, nan, nan, 35.0, 94.0, 59.0, 19.0, 13.0, 35.0, 6.0, 8.0, 18.0, 61.0, 44.0, 90.0, 6.0, 4.0, 31.0, 87.0, nan, nan, nan, 21.0, 94.0, 39.0, 87.0, 74.0, 51.0, 99.0, 42.0, 8.0, 88.0, 92.0, 32.0, 5.0, 60.0, 7.0, 39.0, nan, nan, nan, 81.0, 72.0, 88.0, 48.0, 94.0, 32.0, 36.0, 16.0, 31.0, 20.0, 8.0, 71.0, 44.0, 57.0, 20.0, 38.0, nan, nan, nan, 20.0, 31.0, 90.0, 85.0, 90.0, 33.0, 71.0, 23.0, 33.0, 62.0, 54.0, 0.0, 15.0, 95.0, 33.0, 46.0, nan, nan, nan, 52.0, 43.0, 26.0, 40.0, 35.0, 47.0, 91.0, 11.0, 49.0, 96.0, 41.0, 0.0, 41.0, 63.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [99.0, 56.0, 81.0, 7.0, 0.0, 57.0, 33.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 33.0, 76.0, 9.0, 28.0, 96.0, 47.0, 14.0, 12.0, 62.0, 1.0, 78.0, 51.0, 57.0, 38.0, 70.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 39.0, 11.0, 82.0, 58.0, 65.0, 4.0, 69.0, 7.0, 22.0, 68.0, 26.0, 37.0, 35.0, 6.0, 22.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 90.0, 80.0, 99.0, 70.0, 12.0, 69.0, 62.0, 70.0, 14.0, 86.0, 41.0, 79.0, 30.0, 95.0, 65.0, 94.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 45.0, 5.0, 10.0, 83.0, 74.0, 85.0, 30.0, 99.0, 94.0, 36.0, 66.0, 38.0, 73.0, 61.0, 29.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 55.0, 1.0, 58.0, 21.0, 87.0, 63.0, 43.0, 96.0, 28.0, 85.0, 35.0, 57.0, 84.0, 6.0, ...]\nE   [right]: [99.0, 56.0, 81.0, 7.0, 0.0, 57.0, 33.0, nan, nan, nan, 33.0, 76.0, 9.0, 28.0, 96.0, 47.0, 14.0, 12.0, 62.0, 1.0, 78.0, 51.0, 57.0, 38.0, 70.0, 8.0, nan, nan, nan, 39.0, 11.0, 82.0, 58.0, 65.0, 4.0, 69.0, 7.0, 22.0, 68.0, 26.0, 37.0, 35.0, 6.0, 22.0, 5.0, nan, nan, nan, 90.0, 80.0, 99.0, 70.0, 12.0, 69.0, 62.0, 70.0, 14.0, 86.0, 41.0, 79.0, 30.0, 95.0, 65.0, 94.0, nan, nan, nan, 44.0, 45.0, 5.0, 10.0, 83.0, 74.0, 85.0, 30.0, 99.0, 94.0, 36.0, 66.0, 38.0, 73.0, 61.0, 29.0, nan, nan, nan, 55.0, 1.0, 58.0, 21.0, 87.0, 63.0, 43.0, 96.0, 28.0, 85.0, 35.0, 57.0, 84.0, 6.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [646.0, 684.0, 894.0, 304.0, 948.0, 536.0, 505.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 693.0, 148.0, 32.0, 657.0, 770.0, 838.0, 570.0, 638.0, 885.0, 92.0, 333.0, 250.0, 441.0, 281.0, 491.0, 107.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 48.0, 706.0, 476.0, 194.0, 695.0, 754.0, 489.0, 347.0, 624.0, 729.0, 278.0, 136.0, 81.0, 861.0, 394.0, 148.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 35.0, 834.0, 672.0, 193.0, 174.0, 79.0, 234.0, 415.0, 643.0, 347.0, 683.0, 894.0, 731.0, 22.0, 413.0, 769.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 560.0, 806.0, 173.0, 147.0, 450.0, 142.0, 84.0, 917.0, 639.0, 353.0, 387.0, 412.0, 804.0, 605.0, 500.0, 879.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 309.0, 743.0, 165.0, 78.0, 292.0, 366.0, 966.0, 712.0, 780.0, 380.0, 497.0, 921.0, 890.0, 661.0]\nE   [right]: [646.0, 684.0, 894.0, 304.0, 948.0, 536.0, 505.0, nan, nan, nan, 693.0, 148.0, 32.0, 657.0, 770.0, 838.0, 570.0, 638.0, 885.0, 92.0, 333.0, 250.0, 441.0, 281.0, 491.0, 107.0, nan, nan, nan, 48.0, 706.0, 476.0, 194.0, 695.0, 754.0, 489.0, 347.0, 624.0, 729.0, 278.0, 136.0, 81.0, 861.0, 394.0, 148.0, nan, nan, nan, 35.0, 834.0, 672.0, 193.0, 174.0, 79.0, 234.0, 415.0, 643.0, 347.0, 683.0, 894.0, 731.0, 22.0, 413.0, 769.0, nan, nan, nan, 560.0, 806.0, 173.0, 147.0, 450.0, 142.0, 84.0, 917.0, 639.0, 353.0, 387.0, 412.0, 804.0, 605.0, 500.0, 879.0, nan, nan, nan, 309.0, 743.0, 165.0, 78.0, 292.0, 366.0, 966.0, 712.0, 780.0, 380.0, 497.0, 921.0, 890.0, 661.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [98.0, 910.0, 50.0, 692.0, 770.0, 280.0, 709.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 673.0, 783.0, 636.0, 7.0, 949.0, 141.0, 249.0, 187.0, 28.0, 293.0, 389.0, 127.0, 689.0, 986.0, 133.0, 396.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 261.0, 597.0, 979.0, 967.0, 933.0, 255.0, 977.0, 590.0, 557.0, 624.0, 143.0, 607.0, 510.0, 32.0, 339.0, 949.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 620.0, 450.0, 326.0, 822.0, 616.0, 130.0, 482.0, 879.0, 898.0, 119.0, 448.0, 50.0, 90.0, 317.0, 636.0, 590.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 522.0, 698.0, 673.0, 599.0, 366.0, 424.0, 271.0, 451.0, 768.0, 25.0, 234.0, 496.0, 285.0, 458.0, 37.0, 393.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 331.0, 742.0, 94.0, 835.0, 432.0, 809.0, 900.0, 913.0, 198.0, 501.0, 710.0, 699.0, 305.0, 580.0, ...]\nE   [right]: [98.0, 910.0, 50.0, 692.0, 770.0, 280.0, 709.0, nan, nan, nan, 673.0, 783.0, 636.0, 7.0, 949.0, 141.0, 249.0, 187.0, 28.0, 293.0, 389.0, 127.0, 689.0, 986.0, 133.0, 396.0, nan, nan, nan, 261.0, 597.0, 979.0, 967.0, 933.0, 255.0, 977.0, 590.0, 557.0, 624.0, 143.0, 607.0, 510.0, 32.0, 339.0, 949.0, nan, nan, nan, 620.0, 450.0, 326.0, 822.0, 616.0, 130.0, 482.0, 879.0, 898.0, 119.0, 448.0, 50.0, 90.0, 317.0, 636.0, 590.0, nan, nan, nan, 522.0, 698.0, 673.0, 599.0, 366.0, 424.0, 271.0, 451.0, 768.0, 25.0, 234.0, 496.0, 285.0, 458.0, 37.0, 393.0, nan, nan, nan, 331.0, 742.0, 94.0, 835.0, 432.0, 809.0, 900.0, 913.0, 198.0, 501.0, 710.0, 699.0, 305.0, 580.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [809.0, 289.0, 638.0, 787.0, 255.0, 144.0, 255.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 399.0, 329.0, 309.0, 883.0, 648.0, 948.0, 492.0, 977.0, 451.0, 101.0, 914.0, 139.0, 492.0, 819.0, 582.0, 878.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 309.0, 49.0, 541.0, 426.0, 259.0, 23.0, 129.0, 347.0, 519.0, 21.0, 854.0, 897.0, 790.0, 68.0, 583.0, 136.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 661.0, 437.0, 497.0, 84.0, 459.0, 336.0, 950.0, 369.0, 492.0, 395.0, 559.0, 901.0, 113.0, 815.0, 414.0, 370.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 954.0, 691.0, 808.0, 530.0, 746.0, 93.0, 888.0, 716.0, 130.0, 312.0, 205.0, 689.0, 37.0, 534.0, 491.0, 455.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 560.0, 394.0, 636.0, 827.0, 17.0, 307.0, 595.0, 871.0, 175.0, 420.0, 700.0, 630.0, 164.0, 481.0, ...]\nE   [right]: [809.0, 289.0, 638.0, 787.0, 255.0, 144.0, 255.0, nan, nan, nan, 399.0, 329.0, 309.0, 883.0, 648.0, 948.0, 492.0, 977.0, 451.0, 101.0, 914.0, 139.0, 492.0, 819.0, 582.0, 878.0, nan, nan, nan, 309.0, 49.0, 541.0, 426.0, 259.0, 23.0, 129.0, 347.0, 519.0, 21.0, 854.0, 897.0, 790.0, 68.0, 583.0, 136.0, nan, nan, nan, 661.0, 437.0, 497.0, 84.0, 459.0, 336.0, 950.0, 369.0, 492.0, 395.0, 559.0, 901.0, 113.0, 815.0, 414.0, 370.0, nan, nan, nan, 954.0, 691.0, 808.0, 530.0, 746.0, 93.0, 888.0, 716.0, 130.0, 312.0, 205.0, 689.0, 37.0, 534.0, 491.0, 455.0, nan, nan, nan, 560.0, 394.0, 636.0, 827.0, 17.0, 307.0, 595.0, 871.0, 175.0, 420.0, 700.0, 630.0, 164.0, 481.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [500.0, 692.0, 709.0, 799.0, 70.0, 569.0, 840.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 82.0, 919.0, 878.0, 658.0, 929.0, 881.0, 12.0, 488.0, 976.0, 212.0, 147.0, 359.0, 481.0, 430.0, 795.0, 774.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 960.0, 635.0, 981.0, 296.0, 199.0, 199.0, 414.0, 41.0, 934.0, 378.0, 607.0, 919.0, 775.0, 617.0, 412.0, 529.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 255.0, 618.0, 425.0, 215.0, 607.0, 990.0, 472.0, 152.0, 313.0, 588.0, 25.0, 350.0, 735.0, 903.0, 932.0, 287.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 918.0, 891.0, 509.0, 604.0, 630.0, 250.0, 215.0, 337.0, 127.0, 433.0, 155.0, 25.0, 820.0, 645.0, 385.0, 913.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 914.0, 403.0, 906.0, 496.0, 77.0, 394.0, 142.0, 298.0, 122.0, 897.0, 557.0, 825.0, 912.0, 625.0, ...]\nE   [right]: [500.0, 692.0, 709.0, 799.0, 70.0, 569.0, 840.0, nan, nan, nan, 82.0, 919.0, 878.0, 658.0, 929.0, 881.0, 12.0, 488.0, 976.0, 212.0, 147.0, 359.0, 481.0, 430.0, 795.0, 774.0, nan, nan, nan, 960.0, 635.0, 981.0, 296.0, 199.0, 199.0, 414.0, 41.0, 934.0, 378.0, 607.0, 919.0, 775.0, 617.0, 412.0, 529.0, nan, nan, nan, 255.0, 618.0, 425.0, 215.0, 607.0, 990.0, 472.0, 152.0, 313.0, 588.0, 25.0, 350.0, 735.0, 903.0, 932.0, 287.0, nan, nan, nan, 918.0, 891.0, 509.0, 604.0, 630.0, 250.0, 215.0, 337.0, 127.0, 433.0, 155.0, 25.0, 820.0, 645.0, 385.0, 913.0, nan, nan, nan, 914.0, 403.0, 906.0, 496.0, 77.0, 394.0, 142.0, 298.0, 122.0, 897.0, 557.0, 825.0, 912.0, 625.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [6.0, 3.0, 4.0, 4.0, 5.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 0.0, 3.0, 8.0, 9.0, 5.0, 7.0, 6.0, 9.0, 8.0, 7.0, 3.0, 2.0, 8.0, 5.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 2.0, 3.0, 0.0, 7.0, 2.0, 1.0, 1.0, 7.0, 8.0, 3.0, 4.0, 7.0, 9.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 8.0, 1.0, 7.0, 7.0, 5.0, 3.0, 2.0, 6.0, 0.0, 2.0, 4.0, 2.0, 3.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 9.0, 6.0, 8.0, 9.0, 5.0, 0.0, 1.0, 1.0, 9.0, 1.0, 9.0, 8.0, 8.0, 9.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 9.0, 8.0, 4.0, 5.0, 7.0, 3.0, 7.0, 6.0, 7.0, 2.0, 7.0, 6.0, 5.0]\nE   [right]: [6.0, 3.0, 4.0, 4.0, 5.0, 3.0, 1.0, nan, nan, nan, 3.0, 0.0, 3.0, 8.0, 9.0, 5.0, 7.0, 6.0, 9.0, 8.0, 7.0, 3.0, 2.0, 8.0, 5.0, 1.0, nan, nan, nan, 5.0, 2.0, 3.0, 0.0, 7.0, 2.0, 1.0, 1.0, 7.0, 8.0, 3.0, 4.0, 7.0, 9.0, 3.0, 1.0, nan, nan, nan, 4.0, 8.0, 1.0, 7.0, 7.0, 5.0, 3.0, 2.0, 6.0, 0.0, 2.0, 4.0, 2.0, 3.0, 7.0, 0.0, nan, nan, nan, 1.0, 9.0, 6.0, 8.0, 9.0, 5.0, 0.0, 1.0, 1.0, 9.0, 1.0, 9.0, 8.0, 8.0, 9.0, 2.0, nan, nan, nan, 4.0, 9.0, 8.0, 4.0, 5.0, 7.0, 3.0, 7.0, 6.0, 7.0, 2.0, 7.0, 6.0, 5.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [4.0, 8.0, 2.0, 6.0, 7.0, 0.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 2.0, 1.0, 6.0, 8.0, 8.0, 6.0, 2.0, 7.0, 0.0, 3.0, 1.0, 1.0, 4.0, 4.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 2.0, 1.0, 6.0, 5.0, 7.0, 1.0, 7.0, 8.0, 9.0, 5.0, 3.0, 0.0, 8.0, 4.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 0.0, 8.0, 4.0, 5.0, 4.0, 6.0, 1.0, 8.0, 5.0, 5.0, 4.0, 3.0, 0.0, 8.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 1.0, 2.0, 0.0, 4.0, 3.0, 9.0, 4.0, 9.0, 7.0, 7.0, 7.0, 8.0, 3.0, 8.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 0.0, 5.0, 5.0, 3.0, 4.0, 4.0, 4.0, 1.0, 2.0, 6.0, 4.0, 5.0, 0.0, ...]\nE   [right]: [4.0, 8.0, 2.0, 6.0, 7.0, 0.0, 2.0, nan, nan, nan, 5.0, 2.0, 1.0, 6.0, 8.0, 8.0, 6.0, 2.0, 7.0, 0.0, 3.0, 1.0, 1.0, 4.0, 4.0, 0.0, nan, nan, nan, 1.0, 2.0, 1.0, 6.0, 5.0, 7.0, 1.0, 7.0, 8.0, 9.0, 5.0, 3.0, 0.0, 8.0, 4.0, 1.0, nan, nan, nan, 7.0, 0.0, 8.0, 4.0, 5.0, 4.0, 6.0, 1.0, 8.0, 5.0, 5.0, 4.0, 3.0, 0.0, 8.0, 9.0, nan, nan, nan, 1.0, 1.0, 2.0, 0.0, 4.0, 3.0, 9.0, 4.0, 9.0, 7.0, 7.0, 7.0, 8.0, 3.0, 8.0, 6.0, nan, nan, nan, 2.0, 0.0, 5.0, 5.0, 3.0, 4.0, 4.0, 4.0, 1.0, 2.0, 6.0, 4.0, 5.0, 0.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [8.0, 3.0, 8.0, 5.0, 0.0, 5.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 2.0, 7.0, 0.0, 4.0, 5.0, 1.0, 3.0, 9.0, 2.0, 2.0, 6.0, 5.0, 9.0, 6.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 8.0, 5.0, 9.0, 7.0, 6.0, 7.0, 8.0, 8.0, 6.0, 4.0, 7.0, 6.0, 0.0, 5.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 9.0, 4.0, 4.0, 2.0, 8.0, 9.0, 1.0, 3.0, 3.0, 0.0, 5.0, 0.0, 9.0, 4.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 4.0, 1.0, 9.0, 6.0, 0.0, 5.0, 8.0, 3.0, 5.0, 5.0, 7.0, 5.0, 9.0, 9.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 9.0, 9.0, 5.0, 0.0, 2.0, 9.0, 6.0, 2.0, 6.0, 7.0, 2.0, 6.0, 6.0, ...]\nE   [right]: [8.0, 3.0, 8.0, 5.0, 0.0, 5.0, 9.0, nan, nan, nan, 8.0, 2.0, 7.0, 0.0, 4.0, 5.0, 1.0, 3.0, 9.0, 2.0, 2.0, 6.0, 5.0, 9.0, 6.0, 4.0, nan, nan, nan, 3.0, 8.0, 5.0, 9.0, 7.0, 6.0, 7.0, 8.0, 8.0, 6.0, 4.0, 7.0, 6.0, 0.0, 5.0, 7.0, nan, nan, nan, 9.0, 9.0, 4.0, 4.0, 2.0, 8.0, 9.0, 1.0, 3.0, 3.0, 0.0, 5.0, 0.0, 9.0, 4.0, 7.0, nan, nan, nan, 2.0, 4.0, 1.0, 9.0, 6.0, 0.0, 5.0, 8.0, 3.0, 5.0, 5.0, 7.0, 5.0, 9.0, 9.0, 6.0, nan, nan, nan, 3.0, 9.0, 9.0, 5.0, 0.0, 2.0, 9.0, 6.0, 2.0, 6.0, 7.0, 2.0, 6.0, 6.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [8.0, 2.0, 1.0, 9.0, 7.0, 3.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 4.0, 7.0, 3.0, 8.0, 4.0, 5.0, 3.0, 6.0, 4.0, 9.0, 4.0, 7.0, 4.0, 0.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 6.0, 4.0, 8.0, 9.0, 0.0, 7.0, 2.0, 0.0, 6.0, 8.0, 0.0, 5.0, 3.0, 4.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 1.0, 2.0, 8.0, 3.0, 0.0, 5.0, 2.0, 8.0, 0.0, 8.0, 6.0, 3.0, 3.0, 0.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 7.0, 7.0, 6.0, 1.0, 8.0, 5.0, 5.0, 9.0, 8.0, 4.0, 0.0, 1.0, 5.0, 2.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 5.0, 1.0, 1.0, 6.0, 5.0, 8.0, 5.0, 4.0, 0.0, 1.0, 1.0, 7.0, 5.0, ...]\nE   [right]: [8.0, 2.0, 1.0, 9.0, 7.0, 3.0, 8.0, nan, nan, nan, 9.0, 4.0, 7.0, 3.0, 8.0, 4.0, 5.0, 3.0, 6.0, 4.0, 9.0, 4.0, 7.0, 4.0, 0.0, 1.0, nan, nan, nan, 5.0, 6.0, 4.0, 8.0, 9.0, 0.0, 7.0, 2.0, 0.0, 6.0, 8.0, 0.0, 5.0, 3.0, 4.0, 4.0, nan, nan, nan, 5.0, 1.0, 2.0, 8.0, 3.0, 0.0, 5.0, 2.0, 8.0, 0.0, 8.0, 6.0, 3.0, 3.0, 0.0, 6.0, nan, nan, nan, 8.0, 7.0, 7.0, 6.0, 1.0, 8.0, 5.0, 5.0, 9.0, 8.0, 4.0, 0.0, 1.0, 5.0, 2.0, 1.0, nan, nan, nan, 3.0, 5.0, 1.0, 1.0, 6.0, 5.0, 8.0, 5.0, 4.0, 0.0, 1.0, 1.0, 7.0, 5.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [58.0, 11.0, 64.0, 78.0, 28.0, 91.0, 37.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 17.0, 61.0, 11.0, 34.0, 15.0, 90.0, 52.0, 27.0, 49.0, 6.0, 94.0, 55.0, 49.0, 38.0, 57.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 15.0, 89.0, 62.0, 84.0, 18.0, 2.0, 4.0, 55.0, 47.0, 51.0, 56.0, 70.0, 38.0, 58.0, 54.0, 27.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 97.0, 67.0, 5.0, 59.0, 83.0, 49.0, 25.0, 13.0, 27.0, 82.0, 6.0, 36.0, 98.0, 98.0, 35.0, 17.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 38.0, 35.0, 93.0, 13.0, 18.0, 21.0, 79.0, 13.0, 86.0, 59.0, 3.0, 19.0, 55.0, 31.0, 63.0, 64.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 74.0, 66.0, 76.0, 3.0, 62.0, 55.0, 41.0, 12.0, 95.0, 45.0, 91.0, 43.0, 92.0, 58.0]\nE   [right]: [58.0, 11.0, 64.0, 78.0, 28.0, 91.0, 37.0, nan, nan, nan, 6.0, 17.0, 61.0, 11.0, 34.0, 15.0, 90.0, 52.0, 27.0, 49.0, 6.0, 94.0, 55.0, 49.0, 38.0, 57.0, nan, nan, nan, 15.0, 89.0, 62.0, 84.0, 18.0, 2.0, 4.0, 55.0, 47.0, 51.0, 56.0, 70.0, 38.0, 58.0, 54.0, 27.0, nan, nan, nan, 97.0, 67.0, 5.0, 59.0, 83.0, 49.0, 25.0, 13.0, 27.0, 82.0, 6.0, 36.0, 98.0, 98.0, 35.0, 17.0, nan, nan, nan, 38.0, 35.0, 93.0, 13.0, 18.0, 21.0, 79.0, 13.0, 86.0, 59.0, 3.0, 19.0, 55.0, 31.0, 63.0, 64.0, nan, nan, nan, 74.0, 66.0, 76.0, 3.0, 62.0, 55.0, 41.0, 12.0, 95.0, 45.0, 91.0, 43.0, 92.0, 58.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [94.0, 42.0, 21.0, 86.0, 61.0, 77.0, 90.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 97.0, 31.0, 69.0, 16.0, 51.0, 52.0, 22.0, 32.0, 70.0, 46.0, 57.0, 33.0, 91.0, 57.0, 72.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 12.0, 2.0, 40.0, 19.0, 92.0, 80.0, 60.0, 82.0, 79.0, 25.0, 88.0, 66.0, 36.0, 63.0, 78.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 26.0, 69.0, 23.0, 95.0, 71.0, 40.0, 27.0, 15.0, 38.0, 74.0, 58.0, 79.0, 90.0, 75.0, 49.0, 99.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 18.0, 62.0, 42.0, 83.0, 26.0, 49.0, 42.0, 53.0, 6.0, 61.0, 46.0, 94.0, 7.0, 22.0, 71.0, 21.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 30.0, 18.0, 15.0, 89.0, 50.0, 3.0, 47.0, 84.0, 17.0, 35.0, 90.0, 93.0, 38.0, ...]\nE   [right]: [94.0, 42.0, 21.0, 86.0, 61.0, 77.0, 90.0, nan, nan, nan, 12.0, 97.0, 31.0, 69.0, 16.0, 51.0, 52.0, 22.0, 32.0, 70.0, 46.0, 57.0, 33.0, 91.0, 57.0, 72.0, nan, nan, nan, 5.0, 12.0, 2.0, 40.0, 19.0, 92.0, 80.0, 60.0, 82.0, 79.0, 25.0, 88.0, 66.0, 36.0, 63.0, 78.0, nan, nan, nan, 26.0, 69.0, 23.0, 95.0, 71.0, 40.0, 27.0, 15.0, 38.0, 74.0, 58.0, 79.0, 90.0, 75.0, 49.0, 99.0, nan, nan, nan, 18.0, 62.0, 42.0, 83.0, 26.0, 49.0, 42.0, 53.0, 6.0, 61.0, 46.0, 94.0, 7.0, 22.0, 71.0, 21.0, nan, nan, nan, 4.0, 30.0, 18.0, 15.0, 89.0, 50.0, 3.0, 47.0, 84.0, 17.0, 35.0, 90.0, 93.0, 38.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [67.0, 25.0, 99.0, 79.0, 73.0, 43.0, 10.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 51.0, 48.0, 14.0, 84.0, 5.0, 86.0, 24.0, 52.0, 74.0, 64.0, 99.0, 88.0, 19.0, 53.0, 33.0, 61.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 77.0, 19.0, 85.0, 35.0, 68.0, 10.0, 78.0, 87.0, 69.0, 31.0, 64.0, 55.0, 34.0, 47.0, 98.0, 67.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 3.0, 30.0, 48.0, 22.0, 33.0, 47.0, 61.0, 4.0, 74.0, 16.0, 33.0, 67.0, 23.0, 53.0, 19.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 91.0, 93.0, 86.0, 60.0, 46.0, 48.0, 17.0, 74.0, 38.0, 77.0, 84.0, 50.0, 39.0, 77.0, 75.0, 34.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 26.0, 58.0, 36.0, 73.0, 41.0, 79.0, 95.0, 58.0, 26.0, 50.0, 70.0, 66.0, 66.0, 79.0, ...]\nE   [right]: [67.0, 25.0, 99.0, 79.0, 73.0, 43.0, 10.0, nan, nan, nan, 51.0, 48.0, 14.0, 84.0, 5.0, 86.0, 24.0, 52.0, 74.0, 64.0, 99.0, 88.0, 19.0, 53.0, 33.0, 61.0, nan, nan, nan, 77.0, 19.0, 85.0, 35.0, 68.0, 10.0, 78.0, 87.0, 69.0, 31.0, 64.0, 55.0, 34.0, 47.0, 98.0, 67.0, nan, nan, nan, 7.0, 3.0, 30.0, 48.0, 22.0, 33.0, 47.0, 61.0, 4.0, 74.0, 16.0, 33.0, 67.0, 23.0, 53.0, 19.0, nan, nan, nan, 91.0, 93.0, 86.0, 60.0, 46.0, 48.0, 17.0, 74.0, 38.0, 77.0, 84.0, 50.0, 39.0, 77.0, 75.0, 34.0, nan, nan, nan, 26.0, 58.0, 36.0, 73.0, 41.0, 79.0, 95.0, 58.0, 26.0, 50.0, 70.0, 66.0, 66.0, 79.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [48.0, 1.0, 69.0, 51.0, 56.0, 47.0, 40.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 98.0, 32.0, 72.0, 26.0, 24.0, 11.0, 78.0, 1.0, 61.0, 23.0, 90.0, 6.0, 50.0, 17.0, 14.0, 20.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 34.0, 20.0, 74.0, 40.0, 19.0, 54.0, 19.0, 52.0, 64.0, 83.0, 0.0, 67.0, 86.0, 34.0, 3.0, 60.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 17.0, 50.0, 22.0, 63.0, 80.0, 18.0, 51.0, 97.0, 57.0, 37.0, 8.0, 69.0, 48.0, 86.0, 59.0, 89.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 78.0, 35.0, 98.0, 54.0, 77.0, 16.0, 6.0, 74.0, 13.0, 98.0, 38.0, 9.0, 5.0, 62.0, 27.0, 40.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 69.0, 56.0, 47.0, 79.0, 83.0, 71.0, 42.0, 7.0, 88.0, 44.0, 60.0, 61.0, 76.0, 46.0, ...]\nE   [right]: [48.0, 1.0, 69.0, 51.0, 56.0, 47.0, 40.0, nan, nan, nan, 98.0, 32.0, 72.0, 26.0, 24.0, 11.0, 78.0, 1.0, 61.0, 23.0, 90.0, 6.0, 50.0, 17.0, 14.0, 20.0, nan, nan, nan, 34.0, 20.0, 74.0, 40.0, 19.0, 54.0, 19.0, 52.0, 64.0, 83.0, 0.0, 67.0, 86.0, 34.0, 3.0, 60.0, nan, nan, nan, 17.0, 50.0, 22.0, 63.0, 80.0, 18.0, 51.0, 97.0, 57.0, 37.0, 8.0, 69.0, 48.0, 86.0, 59.0, 89.0, nan, nan, nan, 78.0, 35.0, 98.0, 54.0, 77.0, 16.0, 6.0, 74.0, 13.0, 98.0, 38.0, 9.0, 5.0, 62.0, 27.0, 40.0, nan, nan, nan, 69.0, 56.0, 47.0, 79.0, 83.0, 71.0, 42.0, 7.0, 88.0, 44.0, 60.0, 61.0, 76.0, 46.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [301.0, 545.0, 460.0, 169.0, 248.0, 855.0, 812.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 592.0, 577.0, 601.0, 613.0, 986.0, 369.0, 21.0, 210.0, 669.0, 234.0, 905.0, 158.0, 103.0, 947.0, 638.0, 540.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 706.0, 731.0, 111.0, 242.0, 768.0, 825.0, 560.0, 356.0, 625.0, 939.0, 388.0, 648.0, 371.0, 450.0, 234.0, 335.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 833.0, 221.0, 369.0, 360.0, 79.0, 962.0, 396.0, 185.0, 943.0, 484.0, 676.0, 846.0, 117.0, 794.0, 775.0, 392.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 164.0, 533.0, 252.0, 15.0, 932.0, 354.0, 622.0, 445.0, 911.0, 714.0, 952.0, 439.0, 777.0, 280.0, 558.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 369.0, 155.0, 709.0, 60.0, 111.0, 481.0, 855.0, 772.0, 575.0, 790.0, 371.0, 623.0, 504.0, 715.0]\nE   [right]: [301.0, 545.0, 460.0, 169.0, 248.0, 855.0, 812.0, nan, nan, nan, 592.0, 577.0, 601.0, 613.0, 986.0, 369.0, 21.0, 210.0, 669.0, 234.0, 905.0, 158.0, 103.0, 947.0, 638.0, 540.0, nan, nan, nan, 706.0, 731.0, 111.0, 242.0, 768.0, 825.0, 560.0, 356.0, 625.0, 939.0, 388.0, 648.0, 371.0, 450.0, 234.0, 335.0, nan, nan, nan, 833.0, 221.0, 369.0, 360.0, 79.0, 962.0, 396.0, 185.0, 943.0, 484.0, 676.0, 846.0, 117.0, 794.0, 775.0, 392.0, nan, nan, nan, 1.0, 164.0, 533.0, 252.0, 15.0, 932.0, 354.0, 622.0, 445.0, 911.0, 714.0, 952.0, 439.0, 777.0, 280.0, 558.0, nan, nan, nan, 369.0, 155.0, 709.0, 60.0, 111.0, 481.0, 855.0, 772.0, 575.0, 790.0, 371.0, 623.0, 504.0, 715.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [667.0, 245.0, 590.0, 203.0, 844.0, 66.0, 332.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 748.0, 748.0, 785.0, 426.0, 446.0, 83.0, 614.0, 356.0, 792.0, 563.0, 540.0, 161.0, 871.0, 601.0, 15.0, 39.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 841.0, 552.0, 55.0, 133.0, 634.0, 769.0, 877.0, 614.0, 82.0, 352.0, 776.0, 884.0, 522.0, 243.0, 396.0, 964.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 983.0, 639.0, 389.0, 951.0, 320.0, 865.0, 106.0, 727.0, 882.0, 446.0, 9.0, 910.0, 409.0, 492.0, 26.0, 835.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 328.0, 186.0, 861.0, 155.0, 836.0, 724.0, 294.0, 885.0, 550.0, 6.0, 193.0, 255.0, 814.0, 182.0, 551.0, 457.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 429.0, 447.0, 558.0, 396.0, 351.0, 26.0, 191.0, 211.0, 273.0, 108.0, 611.0, 711.0, 630.0, 715.0, ...]\nE   [right]: [667.0, 245.0, 590.0, 203.0, 844.0, 66.0, 332.0, nan, nan, nan, 748.0, 748.0, 785.0, 426.0, 446.0, 83.0, 614.0, 356.0, 792.0, 563.0, 540.0, 161.0, 871.0, 601.0, 15.0, 39.0, nan, nan, nan, 841.0, 552.0, 55.0, 133.0, 634.0, 769.0, 877.0, 614.0, 82.0, 352.0, 776.0, 884.0, 522.0, 243.0, 396.0, 964.0, nan, nan, nan, 983.0, 639.0, 389.0, 951.0, 320.0, 865.0, 106.0, 727.0, 882.0, 446.0, 9.0, 910.0, 409.0, 492.0, 26.0, 835.0, nan, nan, nan, 328.0, 186.0, 861.0, 155.0, 836.0, 724.0, 294.0, 885.0, 550.0, 6.0, 193.0, 255.0, 814.0, 182.0, 551.0, 457.0, nan, nan, nan, 429.0, 447.0, 558.0, 396.0, 351.0, 26.0, 191.0, 211.0, 273.0, 108.0, 611.0, 711.0, 630.0, 715.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [580.0, 447.0, 396.0, 504.0, 277.0, 768.0, 598.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 431.0, 205.0, 934.0, 894.0, 425.0, 939.0, 292.0, 397.0, 755.0, 398.0, 334.0, 473.0, 621.0, 56.0, 166.0, 292.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 161.0, 475.0, 890.0, 596.0, 844.0, 49.0, 616.0, 708.0, 653.0, 491.0, 627.0, 619.0, 232.0, 163.0, 116.0, 992.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 415.0, 533.0, 163.0, 945.0, 337.0, 834.0, 799.0, 329.0, 74.0, 220.0, 331.0, 42.0, 180.0, 622.0, 139.0, 27.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 955.0, 691.0, 241.0, 424.0, 693.0, 945.0, 424.0, 915.0, 792.0, 489.0, 971.0, 268.0, 397.0, 666.0, 272.0, 595.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 804.0, 405.0, 334.0, 287.0, 337.0, 891.0, 810.0, 436.0, 761.0, 228.0, 956.0, 665.0, 705.0, 883.0, ...]\nE   [right]: [580.0, 447.0, 396.0, 504.0, 277.0, 768.0, 598.0, nan, nan, nan, 431.0, 205.0, 934.0, 894.0, 425.0, 939.0, 292.0, 397.0, 755.0, 398.0, 334.0, 473.0, 621.0, 56.0, 166.0, 292.0, nan, nan, nan, 161.0, 475.0, 890.0, 596.0, 844.0, 49.0, 616.0, 708.0, 653.0, 491.0, 627.0, 619.0, 232.0, 163.0, 116.0, 992.0, nan, nan, nan, 415.0, 533.0, 163.0, 945.0, 337.0, 834.0, 799.0, 329.0, 74.0, 220.0, 331.0, 42.0, 180.0, 622.0, 139.0, 27.0, nan, nan, nan, 955.0, 691.0, 241.0, 424.0, 693.0, 945.0, 424.0, 915.0, 792.0, 489.0, 971.0, 268.0, 397.0, 666.0, 272.0, 595.0, nan, nan, nan, 804.0, 405.0, 334.0, 287.0, 337.0, 891.0, 810.0, 436.0, 761.0, 228.0, 956.0, 665.0, 705.0, 883.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [984.0, 660.0, 658.0, 404.0, 243.0, 569.0, 308.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 940.0, 272.0, 709.0, 759.0, 810.0, 720.0, 983.0, 340.0, 846.0, 3.0, 295.0, 206.0, 680.0, 875.0, 460.0, 289.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 192.0, 648.0, 429.0, 649.0, 699.0, 844.0, 413.0, 378.0, 141.0, 414.0, 522.0, 947.0, 362.0, 578.0, 270.0, 680.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 906.0, 767.0, 819.0, 214.0, 632.0, 25.0, 504.0, 722.0, 804.0, 462.0, 818.0, 520.0, 58.0, 807.0, 115.0, 440.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 636.0, 61.0, 370.0, 522.0, 489.0, 378.0, 551.0, 12.0, 828.0, 264.0, 712.0, 39.0, 564.0, 677.0, 637.0, 335.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 499.0, 775.0, 290.0, 896.0, 236.0, 474.0, 613.0, 212.0, 467.0, 279.0, 465.0, 256.0, 276.0, 323.0, ...]\nE   [right]: [984.0, 660.0, 658.0, 404.0, 243.0, 569.0, 308.0, nan, nan, nan, 940.0, 272.0, 709.0, 759.0, 810.0, 720.0, 983.0, 340.0, 846.0, 3.0, 295.0, 206.0, 680.0, 875.0, 460.0, 289.0, nan, nan, nan, 192.0, 648.0, 429.0, 649.0, 699.0, 844.0, 413.0, 378.0, 141.0, 414.0, 522.0, 947.0, 362.0, 578.0, 270.0, 680.0, nan, nan, nan, 906.0, 767.0, 819.0, 214.0, 632.0, 25.0, 504.0, 722.0, 804.0, 462.0, 818.0, 520.0, 58.0, 807.0, 115.0, 440.0, nan, nan, nan, 636.0, 61.0, 370.0, 522.0, 489.0, 378.0, 551.0, 12.0, 828.0, 264.0, 712.0, 39.0, 564.0, 677.0, 637.0, 335.0, nan, nan, nan, 499.0, 775.0, 290.0, 896.0, 236.0, 474.0, 613.0, 212.0, 467.0, 279.0, 465.0, 256.0, 276.0, 323.0, ...]"
        ]
    ],
    "2.1.2": [
        [
            "n = 100, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e07bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e07e80>",
                "self.obj": "0     3\n1     0\n2     8\n3     4\n4     1\n     ..\n95    4\n96    4\n97    4\n98    3\n99    7\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  3,  3,  3,  4,  4,\n        4,  4,  5,  5,  5,  5,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,\n        8,  9,  9,  9,  9, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12,\n       13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n       17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21,\n       21, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 25])",
                "_": "26",
                "val": "array([1, 2, 3, 4, 5, 0, 2, 3, 7, 7, 3, 8, 0, 3, 4, 3, 3, 4, 6, 3, 4, 6,\n       9, 0, 4, 4, 5, 5, 5, 9, 0, 1, 3, 4, 6, 3, 6, 8, 8, 2, 4, 9, 1, 1,\n       3, 7, 7, 1, 6, 7, 8, 2, 8, 1, 1, 2, 4, 5, 6, 5, 6, 7, 7, 0, 4, 8,\n       9, 2, 2, 3, 3, 7, 8, 2, 4, 6, 1, 6, 8, 1, 2, 8, 2, 2, 4, 4, 0, 0,\n       8, 9, 3, 5, 6, 7, 7, 9, 0, 1, 8, 4])",
                "sorter": "array([ 4, 56,  0, 23, 72,  1, 91, 42, 52, 53, 37,  2, 58, 90,  3,  5, 98,\n       64, 75,  6, 45, 60, 19,  7, 34, 97,  8, 10, 15, 46,  9, 39, 73, 68,\n       81, 82, 49, 11, 35, 21, 22, 12, 13, 70, 71, 32, 99, 84, 17, 83, 14,\n       16, 27, 29, 61, 57, 18, 62, 48, 20, 40, 30, 76, 92, 95, 24, 41, 25,\n       33, 50, 65, 66, 44, 26, 85, 93, 94, 86, 28, 31, 69, 59, 36, 88, 63,\n       96, 47, 67, 38, 77, 87, 80, 78, 43, 89, 54, 79, 74, 51, 55])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  5, 10, 12, 15, 19, 23, 24, 30, 35, 39, 42, 47, 51, 53, 59, 63,\n       67, 73, 76, 79, 82, 86, 90, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 4, 2, 3, 3, 4, 1, 3, 5, 3, 3, 3, 4, 2, 5, 3, 4, 4, 3, 3, 3, 2,\n       3, 5, 3, 1])",
                "res": "array([5, 4, 2, 3, 3, 4, 1, 3, 5, 3, 3, 3, 4, 2, 5, 3, 4, 4, 3, 3, 3, 2,\n       3, 5, 3, 1])",
                "ri": "Index(['y', 'd', 'c', 'u', 's', 'e', 'h', 'o', 'x', 't', 'k', 'i', 'w', 'a',\n       'j', 'g', 'm', 'n', 'l', 'q', 'b', 'z', 'p', 'f', 'r', 'v'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    5\nd    4\nc    2\nu    3\ns    3\ne    4\nh    1\no    3\nx    5\nt    3\nk    3\ni    3\nw    4\na    2\nj    5\ng    3\nm    4\nn    4\nl    3\nq    3\nb    3\nz    2\np    3\nf    5\nr    3\nv    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e07280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e07250>",
                "self.obj": "0     3\n1     0\n2     8\n3     4\n4     1\n     ..\n95    4\n96    4\n97    4\n98    3\n99    7\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  2,  3,  4,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n       15, 15, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 26, 27,\n       27, 27, 28, 29, 30, 30, 31, 32, 33, 33, 34, 35, 36, 37, 38, 39, 40,\n       41, 41, 42, 43, 44, 45, 46, 46, 47, 48, 48, 49, 50, 51, 52, 53, 54,\n       55, 56, 57, 57, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 82, 83])",
                "_": "84",
                "val": "array([3, 4, 0, 8, 4, 1, 5, 3, 3, 0, 5, 0, 5, 8, 9, 1, 8, 4, 5, 9, 2, 8,\n       6, 4, 9, 5, 2, 4, 4, 8, 2, 2, 8, 1, 2, 6, 7, 1, 1, 7, 2, 4, 6, 8,\n       2, 3, 8, 1, 6, 9, 3, 7, 9, 8, 4, 0, 3, 1, 8, 7, 2, 7, 4, 2, 0, 8,\n       6, 1, 5, 4, 3, 4, 3, 7, 0, 4, 2, 3, 3, 6, 7, 9, 6, 0, 5, 6, 3, 7,\n       1, 4, 6, 3, 2, 4, 7, 3, 0, 6, 1, 7])",
                "sorter": "array([ 0, 23,  1,  2,  3,  4, 72,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n       97, 15, 46, 16, 27, 17, 18, 19, 20, 21, 22, 95, 24, 25, 26, 28, 29,\n       57, 48, 30, 31, 70, 32, 33, 34, 49, 35, 36, 37, 38, 39, 40, 41, 42,\n       43, 54, 44, 45, 47, 50, 74, 51, 52, 91, 53, 55, 56, 58, 59, 60, 61,\n       62, 63, 98, 64, 65, 66, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 80,\n       81, 82, 83, 84, 85, 86, 87, 88, 96, 89, 90, 92, 93, 94, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  2,  3,  4,  5,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 20,\n       22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42,\n       44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 62, 63,\n       64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n       83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (84,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-29    2\nd    2015-08-30    1\nc    2015-08-25    1\nu    2015-08-30    1\ny    2015-08-27    2\n                  ..\nu    2015-08-31    1\nm    2015-08-26    1\nl    2015-08-30    1\nq    2015-08-28    1\ni    2015-08-30    1\nName: julie, Length: 84, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e07040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e07bb0>",
                "self.obj": "0     3.0\n1     0.0\n2     8.0\n3     4.0\n4     1.0\n     ... \n95    4.0\n96    4.0\n97    4.0\n98    3.0\n99    7.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  3,\n        3,  3,  3,  4,  4,  4,  4,  5,  6,  6,  6,  6,  6,  6,  7,  7,  7,\n        7,  7,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11,\n       12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16,\n       16, 16, 17, 17, 18, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21,\n       21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([ 1, 69, 18, 86, 52, 35,  4, 56,  0, 23, 72, 37,  2, 58, 90,  3, 64,\n        5, 98, 75, 45,  6, 60, 19,  7,  8, 46, 34, 97, 10, 15,  9, 39, 73,\n       68, 81, 82, 49, 11, 21, 22, 12, 13, 70, 71, 32, 99, 83, 84, 17, 14,\n       27, 16, 20, 40, 30, 76, 92, 95, 24, 41, 65, 66, 25, 33, 50, 44, 26,\n       85, 93, 28, 94, 29, 61, 57, 62, 48, 31, 59, 36, 88, 63, 96, 47, 67,\n       38, 77, 91, 42, 53, 87, 80, 78, 43, 89, 54, 79, 74, 51, 55])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 11, 13, 16, 20, 24, 25, 31, 36, 39, 42, 47, 51, 53, 57, 61, 67,\n       70, 72, 77, 79, 83, 87, 90, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 5, 2, 3, 3, 4, 1, 3, 5, 3, 3, 3, 3, 2, 3, 4, 4, 2, 2, 4, 2, 2,\n       4, 3, 5, 3, 1])",
                "res": "array([5, 2, 3, 3, 4, 1, 3, 5, 3, 3, 3, 3, 2, 3, 4, 4, 2, 2, 4, 2, 2, 4,\n       3, 5, 3, 1])",
                "ri": "Index(['y', 'c', 'u', 's', 'e', 'h', 'o', 'x', 't', 'k', 'i', 'w', 'a', 'g',\n       'm', 'n', 'l', 'q', 'j', 'b', 'z', 'p', 'd', 'f', 'r', 'v'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    5\nc    2\nu    3\ns    3\ne    4\nh    1\no    3\nx    5\nt    3\nk    3\ni    3\nw    3\na    2\ng    3\nm    4\nn    4\nl    2\nq    2\nj    4\nb    2\nz    2\np    4\nd    3\nf    5\nr    3\nv    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e83f40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e83cd0>",
                "self.obj": "0      1\n1      0\n2      3\n3      6\n4      0\n      ..\n995    2\n996    9\n997    5\n998    8\n999    6\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  45,  79, 120, 142, 178, 216, 262, 298, 342, 386, 416, 455,\n       498, 545, 591, 629, 663, 699, 741, 780, 818, 854, 895, 934, 971])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10, 10,  9, 10, 10, 10,  9, 10, 10,  9, 10, 10,  9, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10,  9, 10, 10, 10,  9, 10, 10,  9, 10, 10,  9, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['x', 'l', 'h', 'v', 'b', 'e', 'j', 's', 'u', 'd', 'z', 't', 'w', 'm',\n       'a', 'i', 'n', 'q', 'k', 'o', 'c', 'y', 'g', 'r', 'p', 'f'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nx    10\nl    10\nh    10\nv     9\nb    10\ne    10\nj    10\ns     9\nu    10\nd    10\nz     9\nt    10\nw    10\nm     9\na    10\ni    10\nn    10\nq    10\nk    10\no    10\nc    10\ny    10\ng    10\nr    10\np    10\nf    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e83d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e83f70>",
                "self.obj": "0      1\n1      0\n2      3\n3      6\n4      0\n      ..\n995    2\n996    9\n997    5\n998    8\n999    6\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "254",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (254,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (254,)",
                "ri": "array of shape (254,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nx    2015-08-26    5\nl    2015-08-24    3\nh    2015-09-01    4\nv    2015-08-26    3\nb    2015-08-31    2\n                  ..\ny    2015-08-24    1\nr    2015-09-01    3\nz    2015-08-28    1\nm    2015-08-27    1\np    2015-08-29    2\nName: julie, Length: 254, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dfe430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dfe220>",
                "self.obj": "0      1.0\n1      0.0\n2      3.0\n3      6.0\n4      0.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    8.0\n999    6.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      1.000000e+00\n1      0.000000e+00\n2      3.000000e+00\n3      6.000000e+00\n4      0.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    8.000000e+00\n999    6.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59, 103, 143, 162, 197, 235, 278, 311, 351, 390, 420, 455, 494,\n       536, 580, 616, 647, 678, 714, 752, 791, 828, 865, 904, 939, 967])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([11, 11, 10, 10, 10, 11, 11,  9, 11, 11, 10, 11, 11,  9, 10, 11, 10,\n       11, 11, 11, 11, 11, 11, 11, 10, 11, 11])",
                "res": "array([11, 10, 10, 10, 11, 11,  9, 11, 11, 10, 11, 11,  9, 10, 11, 10, 11,\n       11, 11, 11, 11, 11, 11, 10, 11, 11])",
                "ri": "Index(['x', 'h', 'v', 'b', 'e', 'j', 's', 'u', 'd', 'z', 't', 'w', 'm', 'a',\n       'i', 'l', 'n', 'q', 'k', 'o', 'c', 'g', 'r', 'p', 'f', 'y'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nx    11\nh    10\nv    10\nb    10\ne    11\nj    11\ns     9\nu    11\nd    11\nz    10\nt    11\nw    11\nm     9\na    10\ni    11\nl    10\nn    11\nq    11\nk    11\no    11\nc    11\ng    11\nr    11\np    10\nf    11\ny    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dfedc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dfea00>",
                "self.obj": "0       8\n1       8\n2       3\n3       4\n4       0\n       ..\n9995    1\n9996    3\n9997    5\n9998    1\n9999    2\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 550, 1030, 1054, ..., 9265, 9651, 9799])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  382,  765, 1131, 1527, 1910, 2316, 2676, 3040, 3413, 3760,\n       4168, 4559, 4963, 5356, 5745, 6140, 6537, 6928, 7307, 7728, 8106,\n       8490, 8862, 9245, 9606])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['g', 'v', 'u', 's', 'z', 'a', 'q', 'i', 'e', 'h', 'j', 'w', 'x', 'y',\n       'k', 'n', 'c', 'm', 'p', 'o', 'b', 'l', 't', 'r', 'f', 'd'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng    10\nv    10\nu    10\ns    10\nz    10\na    10\nq    10\ni    10\ne    10\nh    10\nj    10\nw    10\nx    10\ny    10\nk    10\nn    10\nc    10\nm    10\np    10\no    10\nb    10\nl    10\nt    10\nr    10\nf    10\nd    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dfeca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dfe7f0>",
                "self.obj": "0       8\n1       8\n2       3\n3       4\n4       0\n       ..\n9995    1\n9996    3\n9997    5\n9998    1\n9999    2\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([2039, 3392, 6350, ..., 1647, 1763, 2923])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ng    2015-08-25    10\n     2015-09-01    10\nv    2015-08-27    10\nu    2015-08-27    10\ns    2015-08-23    10\n                   ..\n     2015-08-26    10\nn    2015-08-30    10\ng    2015-08-31    10\nv    2015-09-01    10\nk    2015-08-23    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e0ec10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e0e7c0>",
                "self.obj": "0       8.0\n1       8.0\n2       3.0\n3       4.0\n4       0.0\n       ... \n9995    1.0\n9996    3.0\n9997    5.0\n9998    1.0\n9999    2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([ 103,  256,  273, ..., 9265, 9651, 9799])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  941, 1304, 1646, 2019, 2379, 2764, 3103, 3440, 3795, 4126,\n       4508, 4868, 5249, 5617, 5985, 6359, 6731, 7097, 7453, 7854, 8208,\n       8571, 8918, 9280, 9623])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['g', 'v', 'u', 's', 'z', 'a', 'q', 'i', 'e', 'h', 'j', 'w', 'x', 'y',\n       'k', 'n', 'c', 'm', 'p', 'o', 'b', 'l', 't', 'r', 'f', 'd'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng    11\nv    11\nu    11\ns    11\nz    11\na    11\nq    11\ni    11\ne    11\nh    11\nj    11\nw    11\nx    11\ny    11\nk    11\nn    11\nc    11\nm    11\np    11\no    11\nb    11\nl    11\nt    11\nr    11\nf    11\nd    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c69550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c694f0>",
                "self.obj": "0        3\n1        4\n2        8\n3        8\n4        4\n        ..\n99995    0\n99996    9\n99997    9\n99998    1\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  363,   664,   988, ..., 99475, 99727, 99811])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3819,  7707, 11521, 15238, 19151, 23062, 26874, 30707,\n       34554, 38389, 42214, 45989, 49907, 53785, 57625, 61375, 65177,\n       69023, 72966, 76910, 80657, 84505, 88348, 92164, 96123])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['f', 'y', 's', 'o', 'v', 't', 'q', 'd', 'k', 'e', 'j', 'r', 'm', 'u',\n       'p', 'l', 'w', 'i', 'b', 'a', 'z', 'n', 'g', 'h', 'c', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nf    10\ny    10\ns    10\no    10\nv    10\nt    10\nq    10\nd    10\nk    10\ne    10\nj    10\nr    10\nm    10\nu    10\np    10\nl    10\nw    10\ni    10\nb    10\na    10\nz    10\nn    10\ng    10\nh    10\nc    10\nx    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e83d00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e83520>",
                "self.obj": "0        3\n1        4\n2        8\n3        8\n4        4\n        ..\n99995    0\n99996    9\n99997    9\n99998    1\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 1127,  2523,  6482, ..., 96803, 97329, 98036])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nf    2015-08-26    10\ny    2015-08-26    10\ns    2015-09-01    10\no    2015-08-30    10\nv    2015-08-25    10\n                   ..\no    2015-08-25    10\nq    2015-08-25    10\nr    2015-08-31    10\nc    2015-08-23    10\nh    2015-08-23    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c69550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c69310>",
                "self.obj": "0        3.0\n1        4.0\n2        8.0\n3        8.0\n4        4.0\n        ... \n99995    0.0\n99996    9.0\n99997    9.0\n99998    1.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([  103,   256,   273, ..., 99475, 99727, 99811])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9504, 13093, 16588, 20269, 23948, 27535, 31133, 34760,\n       38378, 41969, 45527, 49215, 52875, 56517, 60139, 63656, 67210,\n       70834, 74547, 78264, 81772, 85397, 89034, 92619, 96323])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['f', 's', 'o', 'v', 't', 'q', 'd', 'k', 'e', 'j', 'r', 'm', 'y', 'u',\n       'p', 'l', 'w', 'i', 'b', 'a', 'z', 'n', 'g', 'h', 'c', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nf    11\ns    11\no    11\nv    11\nt    11\nq    11\nd    11\nk    11\ne    11\nj    11\nr    11\nm    11\ny    11\nu    11\np    11\nl    11\nw    11\ni    11\nb    11\na    11\nz    11\nn    11\ng    11\nh    11\nc    11\nx    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d41f10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d41df0>",
                "self.obj": "0     50\n1     76\n2     55\n3     66\n4     65\n      ..\n95    30\n96    91\n97    73\n98    76\n99    16\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,\n        3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,\n        8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11,\n       12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 16, 16, 16, 16, 16, 17,\n       17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21,\n       21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "25",
                "val": "array([ 0,  1, 50, 59, 70, 61, 76, 81,  5, 35, 42, 46, 55, 16, 22, 49, 65,\n       66,  6, 14, 66, 79, 92,  0,  9, 33, 76,  1, 50, 87, 13, 17, 30, 97,\n       14, 42, 60, 65, 73, 91, 98, 41, 41, 49, 92,  6, 12, 57, 81, 91, 94,\n       21, 31, 41, 66, 51, 54, 66,  0, 46, 78, 42, 29, 31, 43, 47, 63, 11,\n       27, 28, 41, 67, 88, 98, 17, 20, 25, 34, 59, 91, 26, 48, 16, 46, 48,\n       83, 91, 98, 26, 41, 44, 72, 16, 33, 73, 78,  4, 44, 52, 71])",
                "sorter": "array([80, 89,  0,  8, 62, 73,  1, 35, 29, 87, 83, 34,  2, 58, 78, 30,  4,\n        3, 14, 23,  5, 15, 56, 86, 91,  6, 98,  7, 67, 40, 43, 11, 95,  9,\n       10, 12, 13, 90, 44, 84, 88, 54, 66, 32, 16, 49, 55, 17, 81, 48, 20,\n       18, 57, 50, 42, 19, 59, 72, 24, 85, 21, 22, 37, 28, 82, 25, 68, 61,\n       47, 31, 64, 26, 69, 79, 60, 27, 45, 33, 39, 94, 70, 36, 99, 77, 63,\n       38, 96, 74, 76, 75, 46, 41, 51, 71, 97, 65, 52, 92, 93, 53])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  5,  8, 13, 18, 23, 27, 30, 34, 35, 41, 45, 51, 55, 58, 61, 62,\n       67, 74, 77, 80, 82, 88, 92, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 3, 5, 5, 5, 4, 3, 4, 1, 6, 3, 6, 4, 3, 3, 1, 5, 7, 3, 3, 2, 6,\n       4, 4, 4])",
                "res": "array([5, 3, 5, 5, 5, 4, 3, 4, 1, 6, 3, 6, 4, 3, 3, 1, 5, 7, 3, 3, 2, 6,\n       4, 4, 4])",
                "ri": "Index(['q', 'm', 'c', 'p', 'g', 'f', 'u', 'x', 'y', 'j', 'b', 'e', 'h', 'n',\n       'w', 'd', 'r', 'v', 'a', 'z', 'o', 's', 'k', 't', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    5\nm    3\nc    5\np    5\ng    5\nf    4\nu    3\nx    4\ny    1\nj    6\nb    3\ne    6\nh    4\nn    3\nw    3\nd    1\nr    5\nv    7\na    3\nz    3\no    2\ns    6\nk    4\nt    4\ni    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d41eb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d41dc0>",
                "self.obj": "0     50\n1     76\n2     55\n3     66\n4     65\n      ..\n95    30\n96    91\n97    73\n98    76\n99    16\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  3,  3,  3,  4,  5,  6,  7,  8,  9, 10, 11, 11, 12,\n       12, 13, 14, 15, 16, 17, 18, 18, 18, 19, 20, 21, 22, 23, 24, 24, 25,\n       26, 27, 28, 29, 30, 31, 32, 33, 33, 34, 35, 36, 36, 37, 38, 39, 40,\n       41, 42, 43, 44, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55,\n       56, 56, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85])",
                "_": "86",
                "val": "array([50, 76, 35, 55, 16, 65, 66, 66, 33,  1, 59, 97, 14, 17, 42, 60,  6,\n       92, 79, 92, 57, 21, 51,  6, 91, 94, 78, 42, 14,  0, 47, 27, 67, 20,\n       31,  5, 49, 28, 49, 34, 46, 61, 81, 48, 29, 46, 83, 59, 87, 72, 66,\n       13, 73, 25, 26, 44, 41, 16,  4, 71, 41, 12, 31, 54, 66, 17, 11, 70,\n       48, 91, 41, 88, 78, 41, 50, 63, 26, 33, 98, 41, 22, 98,  0, 81, 43,\n       42, 91, 46,  0, 98,  1, 65,  9, 44, 52, 91, 30, 73, 76, 16])",
                "sorter": "array([ 0,  1, 87,  2, 58,  4,  3,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n       56, 15, 16, 17, 18, 19, 49, 48, 20, 21, 22, 23, 24, 25, 47, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 73, 35, 36, 37, 77, 38, 39, 40, 41, 42,\n       43, 44, 45, 76, 46, 50, 51, 52, 53, 54, 55, 57, 59, 72, 60, 61, 62,\n       63, 96, 64, 69, 65, 66, 67, 68, 70, 71, 74, 75, 78, 79, 80, 81, 82,\n       83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  4,  7,  8,  9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21,\n       22, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n       43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61,\n       62, 63, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\n       82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n       99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (86,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-23    1\nm    2015-08-24    1\nc    2015-08-31    2\np    2015-08-23    3\ng    2015-08-30    1\n                  ..\nz    2015-08-31    1\nx    2015-08-27    1\nt    2015-08-29    1\nf    2015-08-26    1\ns    2015-08-28    1\nName: julie, Length: 86, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d41dc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d417f0>",
                "self.obj": "0     50.0\n1     76.0\n2     55.0\n3     66.0\n4     65.0\n      ... \n95    30.0\n96    91.0\n97    73.0\n98    76.0\n99    16.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,\n        2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  6,  6,\n        6,  6,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10,\n       10, 10, 11, 11, 11, 12, 12, 12, 13, 14, 14, 14, 14, 14, 15, 15, 15,\n       15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19, 19,\n       20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24])",
                "_": "25",
                "val": "array of shape (100,)",
                "sorter": "array([86, 52, 18,  1, 35, 69,  8, 80, 89,  0, 62, 83, 29, 87, 34,  2, 58,\n       78, 30,  4,  3, 14, 23,  5, 15, 56, 91,  6, 98,  7, 67, 40,  9, 43,\n       11, 95, 10, 84, 12, 13, 90, 44, 88, 66, 54, 32, 16, 49, 55, 17, 81,\n       48, 20, 19, 59, 72, 85, 24, 21, 22, 28, 37, 82, 25, 68, 26, 47, 64,\n       61, 31, 79, 27, 45, 60, 33, 39, 94, 70, 36, 99, 77, 63, 38, 96, 74,\n       46, 76, 75, 41, 57, 50, 42, 65, 51, 71, 97, 92, 93, 53, 73])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 11, 16, 21, 26, 29, 32, 36, 37, 43, 47, 53, 56, 59, 60, 65, 71,\n       74, 77, 79, 85, 89, 92, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 5, 5, 5, 5, 3, 3, 4, 1, 6, 4, 6, 3, 3, 1, 5, 4, 2, 3, 2, 6, 4,\n       3, 4, 3, 1])",
                "res": "array([5, 5, 5, 5, 3, 3, 4, 1, 6, 4, 6, 3, 3, 1, 5, 4, 2, 3, 2, 6, 4, 3,\n       4, 3, 1])",
                "ri": "Index(['q', 'c', 'p', 'g', 'f', 'u', 'x', 'y', 'j', 'b', 'e', 'n', 'w', 'd',\n       'r', 'v', 'a', 'z', 'o', 's', 'k', 'h', 't', 'i', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    5\nc    5\np    5\ng    5\nf    3\nu    3\nx    4\ny    1\nj    6\nb    4\ne    6\nn    3\nw    3\nd    1\nr    5\nv    4\na    2\nz    3\no    2\ns    6\nk    4\nh    3\nt    4\ni    3\nm    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d15190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d156d0>",
                "self.obj": "0      71\n1      36\n2      45\n3      18\n4      37\n       ..\n995    28\n996    78\n997    31\n998    29\n999     7\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  41,  75, 130, 171, 215, 266, 312, 343, 378, 422, 450, 486,\n       531, 575, 621, 662, 692, 726, 761, 798, 821, 857, 896, 933, 966])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([36, 26, 42, 33, 37, 43, 35, 25, 29, 39, 24, 34, 36, 36, 36, 31, 28,\n       28, 29, 30, 20, 32, 35, 32, 29, 28])",
                "res": "array([36, 26, 42, 33, 37, 43, 35, 25, 29, 39, 24, 34, 36, 36, 36, 31, 28,\n       28, 29, 30, 20, 32, 35, 32, 29, 28])",
                "ri": "Index(['a', 'e', 'l', 'o', 'n', 'q', 'j', 'b', 's', 'z', 'd', 'x', 'w', 'f',\n       'u', 'h', 't', 'p', 'c', 'g', 'k', 'v', 'y', 'r', 'i', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    36\ne    26\nl    42\no    33\nn    37\nq    43\nj    35\nb    25\ns    29\nz    39\nd    24\nx    34\nw    36\nf    36\nu    36\nh    31\nt    28\np    28\nc    29\ng    30\nk    20\nv    32\ny    35\nr    32\ni    29\nm    28\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d15040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d152e0>",
                "self.obj": "0      71\n1      36\n2      45\n3      18\n4      37\n       ..\n995    28\n996    78\n997    31\n998    29\n999     7\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "256",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (256,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (256,)",
                "res": "array of shape (256,)",
                "ri": "array of shape (256,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-26    3\n     2015-08-28    4\ne    2015-08-28    4\nl    2015-08-25    4\no    2015-08-30    2\n                  ..\ni    2015-08-31    2\nr    2015-09-01    5\no    2015-09-01    3\ne    2015-08-24    1\nb    2015-08-28    1\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c94b80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c94be0>",
                "self.obj": "0      71.0\n1      36.0\n2      45.0\n3      18.0\n4      37.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    29.0\n999     7.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      7.100000e+01\n1      3.600000e+01\n2      4.500000e+01\n3      1.800000e+01\n4      3.700000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    2.900000e+01\n999    7.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  96, 128, 182, 221, 261, 309, 350, 378, 411, 452, 479, 513,\n       552, 596, 632, 666, 695, 726, 761, 784, 820, 854, 891, 923, 967])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([40, 27, 25, 36, 28, 31, 40, 29, 20, 25, 32, 22, 30, 29, 30, 23, 24,\n       23, 26, 25, 16, 30, 26, 29, 22, 32, 25])",
                "res": "array([27, 25, 36, 28, 31, 40, 29, 20, 25, 32, 22, 30, 29, 30, 23, 24, 23,\n       26, 25, 16, 30, 26, 29, 22, 32, 25])",
                "ri": "Index(['a', 'e', 'l', 'o', 'n', 'q', 'j', 'b', 's', 'z', 'd', 'x', 'f', 'u',\n       'h', 'p', 't', 'c', 'g', 'k', 'v', 'y', 'r', 'i', 'w', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    27\ne    25\nl    36\no    28\nn    31\nq    40\nj    29\nb    20\ns    25\nz    32\nd    22\nx    30\nf    29\nu    30\nh    23\np    24\nt    23\nc    26\ng    25\nk    16\nv    30\ny    26\nr    29\ni    22\nw    32\nm    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0c6a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0c640>",
                "self.obj": "0       49\n1       56\n2       21\n3       94\n4       99\n        ..\n9995    56\n9996    84\n9997    27\n9998    15\n9999    13\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 98, 98, 98])",
                "sorter": "array([ 496, 3359, 4507, ..., 3112, 9089, 9198])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  403,  776, 1166, 1576, 1950, 2334, 2682, 3054, 3439, 3844,\n       4237, 4647, 5028, 5400, 5755, 6126, 6517, 6917, 7289, 7695, 8061,\n       8479, 8867, 9248, 9640])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 97,  97,  99,  98,  98,  98,  99,  99,  96,  99,  95, 100,  98,\n        96,  96,  99,  99,  98,  98, 100,  97,  98,  99,  94, 100,  95])",
                "res": "array([ 97,  97,  99,  98,  98,  98,  99,  99,  96,  99,  95, 100,  98,\n        96,  96,  99,  99,  98,  98, 100,  97,  98,  99,  94, 100,  95])",
                "ri": "Index(['h', 'r', 'y', 'u', 'x', 'j', 'l', 'w', 'b', 's', 'z', 'o', 'n', 't',\n       'p', 'v', 'f', 'q', 'a', 'c', 'k', 'g', 'i', 'm', 'd', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh     97\nr     97\ny     99\nu     98\nx     98\nj     98\nl     99\nw     99\nb     96\ns     99\nz     95\no    100\nn     98\nt     96\np     96\nv     99\nf     99\nq     98\na     98\nc    100\nk     97\ng     98\ni     99\nm     94\nd    100\ne     95\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0c7f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0cfd0>",
                "self.obj": "0       49\n1       56\n2       21\n3       94\n4       99\n        ..\n9995    56\n9996    84\n9997    27\n9998    15\n9999    13\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 2,  3,  4, ..., 95, 96, 97])",
                "sorter": "array([ 282,  431, 1001, ..., 9701, 3853, 6750])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-29    32\nr    2015-08-23    35\ny    2015-09-01    30\nu    2015-08-27    34\nh    2015-08-26    32\n                   ..\ns    2015-08-28    23\nv    2015-08-29    27\nm    2015-08-26    25\np    2015-08-31    20\nq    2015-08-30    38\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d4aac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d4a850>",
                "self.obj": "0       49.0\n1       56.0\n2       21.0\n3       94.0\n4       99.0\n        ... \n9995    56.0\n9996    84.0\n9997    27.0\n9998    15.0\n9999    13.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.70000000e+01,  9.80000000e+01,  9.80000000e+01])",
                "sorter": "array([ 103,  256,  273, ..., 9771, 1380, 2679])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  967, 1337, 1727, 2079, 2434, 2762, 3113, 3462, 3829, 4209,\n       4584, 4966, 5324, 5670, 6004, 6355, 6729, 7098, 7441, 7819, 8167,\n       8560, 8930, 9290, 9663])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101,  96,  99,  97,  96,  94, 100,  97,  96,  94,  95,  93,  97,\n        97,  96,  92,  98,  99,  95,  95,  98,  95,  99, 100,  93,  98,\n        94])",
                "res": "array([ 96,  99,  97,  96,  94, 100,  97,  96,  94,  95,  93,  97,  97,\n        96,  92,  98,  99,  95,  95,  98,  95,  99, 100,  93,  98,  94])",
                "ri": "Index(['h', 'y', 'u', 'x', 'j', 'l', 'r', 'w', 'b', 's', 'z', 'o', 'n', 't',\n       'p', 'v', 'f', 'q', 'a', 'c', 'k', 'g', 'i', 'm', 'd', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh     96\ny     99\nu     97\nx     96\nj     94\nl    100\nr     97\nw     96\nb     94\ns     95\nz     93\no     97\nn     97\nt     96\np     92\nv     98\nf     99\nq     95\na     95\nc     98\nk     95\ng     99\ni    100\nm     93\nd     98\ne     94\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cc0730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cc0790>",
                "self.obj": "0         9\n1        24\n2        51\n3         8\n4        20\n         ..\n99995    63\n99996    17\n99997    18\n99998    25\n99999    33\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 2978,  9260,  9469, ..., 94773, 96248, 99180])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3892,  7738, 11548, 15377, 19149, 22961, 26824, 30572,\n       34446, 38197, 41961, 45866, 49705, 53515, 57450, 61222, 65148,\n       69041, 72916, 76917, 80866, 84704, 88548, 92273, 96107])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['h', 'q', 'b', 'y', 'u', 'p', 'w', 'c', 'i', 'f', 't', 'e', 'g', 'r',\n       'x', 'o', 'l', 'a', 'j', 'v', 'n', 'k', 's', 'd', 'z', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    100\nq    100\nb    100\ny    100\nu    100\np    100\nw    100\nc    100\ni    100\nf    100\nt    100\ne    100\ng    100\nr    100\nx    100\no    100\nl    100\na    100\nj    100\nv    100\nn    100\nk    100\ns    100\nd    100\nz    100\nm    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cc0310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cc0e80>",
                "self.obj": "0         9\n1        24\n2        51\n3         8\n4        20\n         ..\n99995    63\n99996    17\n99997    18\n99998    25\n99999    33\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  0,  0, ..., 98, 99, 99])",
                "sorter": "array([30110, 36958, 39635, ..., 94051, 53476, 56668])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-24    99\nq    2015-08-26    99\nb    2015-09-01    97\ny    2015-09-01    99\nu    2015-08-29    97\n                   ..\ne    2015-08-24    98\nc    2015-08-25    98\nh    2015-08-23    95\nl    2015-08-27    98\ns    2015-08-29    98\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d047f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d04940>",
                "self.obj": "0         9.0\n1        24.0\n2        51.0\n3         8.0\n4        20.0\n         ... \n99995    63.0\n99996    17.0\n99997    18.0\n99998    25.0\n99999    33.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([  103,   256,   273, ..., 94773, 96248, 99180])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9573, 13158, 16761, 20344, 23922, 27564, 31066, 34694,\n       38231, 41809, 45499, 49101, 52658, 56374, 60075, 63739, 67384,\n       71151, 74872, 78464, 82071, 85561, 89126, 92744, 96344])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['h', 'b', 'y', 'u', 'p', 'w', 'c', 'i', 'f', 't', 'e', 'g', 'r', 'x',\n       'l', 'a', 'j', 'v', 'n', 'k', 's', 'd', 'o', 'q', 'z', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    101\nb    101\ny    101\nu    101\np    101\nw    101\nc    101\ni    101\nf    101\nt    101\ne    101\ng    101\nr    101\nx    101\nl    101\na    101\nj    101\nv    101\nn    101\nk    101\ns    101\nd    101\no    101\nq    101\nz    101\nm    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121f9ee80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121f9e5b0>",
                "self.obj": "0      84\n1     331\n2     918\n3     172\n4     217\n     ... \n95    680\n96    410\n97    987\n98    887\n99    793\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,\n        3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,\n        6,  6,  6,  7,  7,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 11, 11,\n       11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15,\n       15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 19,\n       19, 19, 20, 20, 20, 21, 22, 22, 22, 22, 22, 23, 23, 24, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([43,  0, 34, 21, 82, 98,  1, 89, 14, 81, 68, 49, 96, 48,  2, 70, 46,\n        3, 92, 32,  4, 39, 56, 30, 77, 35, 95, 27, 90,  9, 53,  5, 11, 29,\n        6, 18, 72,  7, 99,  8, 59, 36, 94, 93, 10, 62, 58, 24, 12, 22, 76,\n       13, 61, 54, 55, 15, 88, 37, 91, 69, 67, 42, 25, 16, 17, 40, 28, 60,\n       19, 63, 86, 97, 31, 83, 84, 20, 80, 23, 47, 26, 87, 44, 33, 51, 78,\n       38, 79, 50, 64, 41, 45, 52, 71, 74, 65, 73, 66, 57, 75, 85])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  6, 11, 15, 18, 29, 34, 37, 39, 42, 46, 49, 53, 59, 64, 67, 72,\n       76, 81, 84, 87, 90, 91, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([ 6,  5,  4,  3, 11,  5,  3,  2,  3,  4,  3,  4,  6,  5,  3,  5,  4,\n        5,  3,  3,  3,  1,  5,  2,  1,  1])",
                "res": "array([ 6,  5,  4,  3, 11,  5,  3,  2,  3,  4,  3,  4,  6,  5,  3,  5,  4,\n        5,  3,  3,  3,  1,  5,  2,  1,  1])",
                "ri": "Index(['g', 'f', 'y', 'h', 'e', 'v', 'i', 'm', 'u', 'z', 'n', 't', 'w', 'b',\n       'q', 'a', 'o', 'p', 'j', 'x', 'k', 'c', 'd', 'l', 's', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng     6\nf     5\ny     4\nh     3\ne    11\nv     5\ni     3\nm     2\nu     3\nz     4\nn     3\nt     4\nw     6\nb     5\nq     3\na     5\no     4\np     5\nj     3\nx     3\nk     3\nc     1\nd     5\nl     2\ns     1\nr     1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121f9e8b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121f9e790>",
                "self.obj": "0      84\n1     331\n2     918\n3     172\n4     217\n     ... \n95    680\n96    410\n97    987\n98    887\n99    793\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 10, 11, 12, 12,\n       13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27,\n       28, 29, 30, 30, 30, 31, 32, 33, 34, 34, 35, 36, 37, 38, 39, 40, 41,\n       42, 43, 44, 45, 46, 46, 47, 48, 48, 49, 50, 51, 52, 53, 53, 54, 55,\n       56, 57, 58, 59, 60, 61, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n       71, 72, 72, 73, 74, 75, 76, 77, 78, 79, 79, 80, 81, 82, 83])",
                "_": "84",
                "val": "array of shape (100,)",
                "sorter": "array([ 0,  1, 89, 81,  2,  3,  4,  5,  6,  7,  8,  9, 93, 10, 11, 58, 12,\n       13, 14, 15, 42, 16, 17, 18, 19, 20, 21, 22, 23, 24, 67, 25, 26, 27,\n       28, 29, 39, 30, 77, 31, 32, 33, 34, 82, 35, 36, 37, 38, 40, 41, 43,\n       44, 45, 46, 47, 96, 48, 49, 50, 64, 51, 52, 53, 54, 55, 91, 56, 57,\n       59, 60, 61, 62, 63, 65, 73, 66, 68, 69, 70, 71, 72, 74, 75, 76, 78,\n       79, 80, 87, 83, 84, 85, 86, 88, 90, 92, 95, 94, 97, 98, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  4,  5,  6,  7,  8,  9, 10, 11, 12, 14, 15, 17, 18, 19, 20,\n       22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 39, 40, 41,\n       42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61,\n       62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80,\n       81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1])",
                "res": "array([1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1])",
                "ri": "array of shape (84,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ng    2015-08-28    1\nf    2015-08-27    3\ny    2015-08-27    1\nh    2015-08-27    1\ne    2015-09-01    1\n                  ..\n     2015-08-30    2\nz    2015-08-25    1\na    2015-08-24    1\ng    2015-08-29    1\nm    2015-08-23    1\nName: julie, Length: 84, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c8e070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c8ee20>",
                "self.obj": "0      84.0\n1     331.0\n2     918.0\n3     172.0\n4     217.0\n      ...  \n95    680.0\n96    410.0\n97    987.0\n98    887.0\n99    793.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,\n        2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,\n        5,  5,  6,  6,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10,\n       10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14,\n       14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18,\n       19, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 23, 23, 24, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([69,  1, 52, 35, 18, 86, 43,  0, 34, 21, 82, 98, 49, 96, 48,  2, 46,\n       70,  3, 27, 92, 32,  4, 39, 56, 30, 77, 95, 90,  9, 53,  5, 11, 29,\n        6, 72,  7, 99,  8, 59, 36, 94, 93, 10, 62, 58, 24, 12, 22, 76, 13,\n       61, 89, 14, 81, 68, 54, 55, 15, 88, 37, 91, 67, 42, 25, 16, 28, 17,\n       40, 60, 19, 63, 97, 83, 84, 31, 20, 26, 47, 80, 23, 87, 44, 33, 51,\n       78, 38, 79, 64, 50, 41, 45, 66, 57, 65, 71, 74, 73, 75, 85])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 12, 16, 19, 29, 34, 36, 38, 41, 45, 48, 52, 56, 62, 66, 69, 73,\n       77, 82, 85, 88, 91, 92, 94, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([ 6,  6,  4,  3, 10,  5,  2,  2,  3,  4,  3,  4,  4,  6,  4,  3,  4,\n        3,  4,  3,  3,  3,  1,  2,  4,  1,  1])",
                "res": "array([ 6,  4,  3, 10,  5,  2,  2,  3,  4,  3,  4,  4,  6,  4,  3,  4,  3,\n        4,  3,  3,  3,  1,  2,  4,  1,  1])",
                "ri": "Index(['g', 'y', 'h', 'e', 'v', 'i', 'm', 'u', 'z', 'n', 't', 'f', 'w', 'b',\n       'q', 'a', 'o', 'p', 'j', 'x', 'k', 'c', 'l', 'd', 's', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng     6\ny     4\nh     3\ne    10\nv     5\ni     2\nm     2\nu     3\nz     4\nn     3\nt     4\nf     4\nw     6\nb     4\nq     3\na     4\no     3\np     4\nj     3\nx     3\nk     3\nc     1\nl     2\nd     4\ns     1\nr     1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121f9e2e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121f9e0a0>",
                "self.obj": "0       23\n1      405\n2      441\n3       47\n4      179\n      ... \n995    197\n996    555\n997     48\n998    692\n999    688\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  40,  85, 133, 168, 207, 256, 298, 330, 356, 389, 436, 472,\n       515, 552, 592, 638, 681, 713, 746, 789, 816, 856, 882, 913, 965])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([40, 42, 48, 34, 38, 48, 42, 31, 26, 33, 47, 36, 43, 37, 40, 43, 39,\n       32, 33, 41, 26, 39, 26, 31, 52, 35])",
                "res": "array([40, 42, 48, 34, 38, 48, 42, 31, 26, 33, 47, 36, 43, 37, 40, 43, 39,\n       32, 33, 41, 26, 39, 26, 31, 52, 35])",
                "ri": "Index(['k', 'i', 'x', 't', 'z', 'o', 'y', 'n', 'd', 'v', 'r', 'q', 'h', 'j',\n       'w', 'f', 's', 'g', 'e', 'b', 'c', 'l', 'a', 'p', 'm', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    40\ni    42\nx    48\nt    34\nz    38\no    48\ny    42\nn    31\nd    26\nv    33\nr    47\nq    36\nh    43\nj    37\nw    40\nf    43\ns    39\ng    32\ne    33\nb    41\nc    26\nl    39\na    26\np    31\nm    52\nu    35\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121f9e1f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121f9e6a0>",
                "self.obj": "0       23\n1      405\n2      441\n3       47\n4      179\n      ... \n995    197\n996    555\n997     48\n998    692\n999    688\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "258",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (258,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (258,)",
                "res": "array of shape (258,)",
                "ri": "array of shape (258,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-24    4\ni    2015-08-26    5\nx    2015-08-25    8\nt    2015-08-28    5\nz    2015-08-23    7\n                  ..\nw    2015-08-25    1\ny    2015-08-24    1\na    2015-08-27    1\nk    2015-09-01    1\ng    2015-08-31    1\nName: julie, Length: 258, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d04280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d043d0>",
                "self.obj": "0       23.0\n1      405.0\n2      441.0\n3       47.0\n4      179.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    692.0\n999    688.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      2.300000e+01\n1      4.050000e+02\n2      4.410000e+02\n3      4.700000e+01\n4      1.790000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    6.920000e+02\n999    6.880000e+02\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  95, 140, 171, 206, 252, 294, 323, 348, 379, 424, 458, 500,\n       536, 573, 616, 658, 698, 729, 770, 796, 825, 863, 888, 917, 965])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([49, 34, 39, 29, 31, 38, 38, 26, 16, 26, 37, 29, 34, 32, 34, 35, 38,\n       35, 28, 36, 21, 24, 31, 22, 25, 43, 29])",
                "res": "array([34, 39, 29, 31, 38, 38, 26, 16, 26, 37, 29, 34, 32, 34, 35, 38, 35,\n       28, 36, 21, 24, 31, 22, 25, 43, 29])",
                "ri": "Index(['k', 'x', 't', 'z', 'o', 'y', 'n', 'd', 'v', 'r', 'q', 'h', 'j', 'w',\n       'f', 'i', 's', 'e', 'b', 'c', 'g', 'l', 'a', 'p', 'm', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    34\nx    39\nt    29\nz    31\no    38\ny    38\nn    26\nd    16\nv    26\nr    37\nq    29\nh    34\nj    32\nw    34\nf    35\ni    38\ns    35\ne    28\nb    36\nc    21\ng    24\nl    31\na    22\np    25\nm    43\nu    29\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c94790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c94760>",
                "self.obj": "0       694\n1       335\n2       545\n3       960\n4       910\n       ... \n9995    980\n9996    706\n9997    784\n9998    696\n9999     36\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  3,   7,   8, ..., 997, 997, 998])",
                "sorter": "array([7411, 4518, 3746, ..., 3130, 4467, 5192])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  396,  818, 1203, 1591, 2009, 2373, 2709, 3096, 3488, 3877,\n       4245, 4631, 5065, 5435, 5824, 6199, 6614, 6975, 7352, 7738, 8109,\n       8508, 8883, 9268, 9630])",
                "inc": "array([1, 1, 1, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([329, 335, 328, 323, 352, 309, 278, 322, 321, 326, 318, 322, 353,\n       301, 319, 324, 332, 295, 319, 322, 315, 334, 315, 311, 295, 316])",
                "res": "array([329, 335, 328, 323, 352, 309, 278, 322, 321, 326, 318, 322, 353,\n       301, 319, 324, 332, 295, 319, 322, 315, 334, 315, 311, 295, 316])",
                "ri": "Index(['i', 'x', 'c', 'm', 'd', 'w', 'r', 'b', 'z', 'g', 'f', 'u', 'q', 'e',\n       'h', 't', 'k', 's', 'p', 'o', 'l', 'n', 'v', 'y', 'j', 'a'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ni    329\nx    335\nc    328\nm    323\nd    352\nw    309\nr    278\nb    322\nz    321\ng    326\nf    318\nu    322\nq    353\ne    301\nh    319\nt    324\nk    332\ns    295\np    319\no    322\nl    315\nn    334\nv    315\ny    311\nj    295\na    316\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c942e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c94340>",
                "self.obj": "0       694\n1       335\n2       545\n3       960\n4       910\n       ... \n9995    980\n9996    706\n9997    784\n9998    696\n9999     36\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  9, 123, 137, ..., 889, 918, 998])",
                "sorter": "array([2519, 2331,  646, ..., 3631, 3756, 4830])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ni    2015-08-23    41\nx    2015-08-30    37\nc    2015-09-01    37\nm    2015-08-27    31\n     2015-08-24    33\n                   ..\nj    2015-08-28    33\nd    2015-08-28    31\nw    2015-09-01    37\nv    2015-08-30    25\nx    2015-08-31    34\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c7c8e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c7cb20>",
                "self.obj": "0       694.0\n1       335.0\n2       545.0\n3       960.0\n4       910.0\n        ...  \n9995    980.0\n9996    706.0\n9997    784.0\n9998    696.0\n9999     36.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.97000000e+02,  9.97000000e+02,  9.98000000e+02])",
                "sorter": "array([ 103,  256,  273, ..., 3130, 4467, 5192])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  958, 1317, 1676, 2067, 2411, 2732, 3099, 3492, 3858, 4228,\n       4572, 4937, 5354, 5706, 6071, 6426, 6813, 7145, 7505, 7868, 8214,\n       8592, 8944, 9309, 9648])",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([390, 279, 268, 256, 293, 258, 242, 274, 271, 262, 276, 261, 270,\n       293, 246, 260, 269, 283, 241, 255, 265, 253, 275, 255, 257, 247,\n       266])",
                "res": "array([279, 268, 256, 293, 258, 242, 274, 271, 262, 276, 261, 270, 293,\n       246, 260, 269, 283, 241, 255, 265, 253, 275, 255, 257, 247, 266])",
                "ri": "Index(['i', 'c', 'm', 'd', 'w', 'r', 'b', 'x', 'z', 'g', 'f', 'u', 'q', 'e',\n       'h', 't', 'k', 's', 'p', 'o', 'l', 'n', 'v', 'y', 'j', 'a'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ni    279\nc    268\nm    256\nd    293\nw    258\nr    242\nb    274\nx    271\nz    262\ng    276\nf    261\nu    270\nq    293\ne    246\nh    260\nt    269\nk    283\ns    241\np    255\no    265\nl    253\nn    275\nv    255\ny    257\nj    247\na    266\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0c520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0ca00>",
                "self.obj": "0        462\n1        579\n2        829\n3        436\n4        646\n        ... \n99995    208\n99996    555\n99997    719\n99998    685\n99999    842\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([20204, 47266, 93337, ..., 39182, 45832, 77540])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3794,  7598, 11508, 15424, 19226, 22997, 26888, 30732,\n       34503, 38297, 42210, 46079, 49975, 53817, 57771, 61586, 65429,\n       69227, 73137, 76976, 80767, 84590, 88538, 92418, 96223])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([977, 982, 975, 978, 979, 982, 972, 986, 972, 980, 978, 976, 983,\n       984, 980, 981, 978, 984, 985, 974, 971, 979, 974, 980, 982, 972])",
                "res": "array([977, 982, 975, 978, 979, 982, 972, 986, 972, 980, 978, 976, 983,\n       984, 980, 981, 978, 984, 985, 974, 971, 979, 974, 980, 982, 972])",
                "ri": "Index(['k', 'e', 'i', 'h', 'a', 'w', 'n', 'x', 'p', 'f', 'r', 'q', 'u', 'g',\n       'b', 'm', 's', 'y', 'v', 'z', 'd', 'c', 'j', 'l', 'o', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    977\ne    982\ni    975\nh    978\na    979\nw    982\nn    972\nx    986\np    972\nf    980\nr    978\nq    976\nu    983\ng    984\nb    980\nm    981\ns    978\ny    984\nv    985\nz    974\nd    971\nc    979\nj    974\nl    980\no    982\nt    972\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0cc40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0c970>",
                "self.obj": "0        462\n1        579\n2        829\n3        436\n4        646\n        ... \n99995    208\n99996    555\n99997    719\n99998    685\n99999    842\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  1,   3,   4, ..., 995, 998, 998])",
                "sorter": "array([78839, 75498, 11047, ..., 97683, 22811, 71614])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-23    316\ne    2015-08-26    316\ni    2015-08-26    322\nh    2015-08-28    320\na    2015-08-23    315\n                  ... \ny    2015-08-29    296\nm    2015-08-31    301\ne    2015-08-30    300\nd    2015-08-29    329\ny    2015-09-01    298\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c7cf70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c7cd30>",
                "self.obj": "0        462.0\n1        579.0\n2        829.0\n3        436.0\n4        646.0\n         ...  \n99995    208.0\n99996    555.0\n99997    719.0\n99998    685.0\n99999    842.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])",
                "sorter": "array([  103,   256,   273, ..., 39182, 45832, 77540])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9454, 13126, 16784, 20381, 23934, 27587, 31187, 34750,\n       38319, 41998, 45649, 49308, 52940, 56664, 60258, 63841, 67410,\n       71105, 74690, 78275, 81892, 85620, 89288, 92859, 96439])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([992, 950, 959, 948, 952, 959, 952, 962, 948, 955, 955, 946, 957,\n       963, 965, 946, 949, 965, 957, 951, 943, 952, 957, 956, 951, 961,\n       954])",
                "res": "array([950, 959, 948, 952, 959, 952, 962, 948, 955, 955, 946, 957, 963,\n       965, 946, 949, 965, 957, 951, 943, 952, 957, 956, 951, 961, 954])",
                "ri": "Index(['k', 'i', 'h', 'a', 'w', 'n', 'x', 'p', 'f', 'r', 'q', 'u', 'g', 'b',\n       'm', 's', 'y', 'v', 'z', 'd', 'c', 'j', 'l', 'o', 'e', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    950\ni    959\nh    948\na    952\nw    959\nn    952\nx    962\np    948\nf    955\nr    955\nq    946\nu    957\ng    963\nb    965\nm    946\ns    949\ny    965\nv    957\nz    951\nd    943\nc    952\nj    957\nl    956\no    951\ne    961\nt    954\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d41d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d41a90>",
                "self.obj": "0     6\n1     1\n2     8\n3     5\n4     2\n     ..\n95    5\n96    6\n97    0\n98    6\n99    6\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  4,  4,  4,  4,  5,\n        5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  7,  7,  7,  7,  7,  8,\n        8,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12,\n       12, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 16, 16, 17,\n       17, 17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21,\n       21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 25, 25])",
                "_": "26",
                "val": "array([2, 3, 1, 2, 6, 6, 6, 1, 1, 4, 8, 6, 2, 6, 9, 9, 0, 1, 2, 3, 3, 5,\n       5, 6, 6, 8, 0, 6, 0, 2, 4, 8, 9, 1, 2, 2, 6, 3, 5, 8, 8, 6, 8, 1,\n       4, 6, 6, 8, 1, 2, 7, 7, 9, 0, 1, 2, 2, 6, 0, 4, 0, 2, 6, 6, 9, 7,\n       8, 1, 1, 2, 4, 9, 3, 5, 1, 2, 5, 0, 2, 5, 8, 9, 0, 1, 3, 3, 9, 0,\n       1, 3, 9, 0, 2, 2, 5, 5, 6, 0, 2, 6])",
                "sorter": "array([66, 55,  9, 64,  0, 34, 98, 24, 43, 77, 31, 93, 65, 14, 11, 67, 26,\n       44,  6, 53, 85, 58, 84, 18, 88, 71, 69, 91, 27, 45, 83, 56, 59, 89,\n       47, 63, 99,  7, 73, 19, 60, 12, 92, 70, 87, 30, 96,  2,  8, 10, 25,\n       52, 28, 72, 79, 17, 36, 42, 68, 35, 81, 41, 22, 23, 74, 61, 76, 48,\n       86, 16, 50, 54, 46, 95, 82,  5, 37, 33, 29,  3, 15, 51, 78,  1, 13,\n       94, 21, 90, 40, 39, 20, 97, 57, 32, 62, 75, 38, 80,  4, 49])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  2,  7, 11, 12, 16, 26, 28, 33, 37, 41, 43, 48, 53, 58, 60, 65,\n       67, 72, 74, 77, 82, 87, 91, 93, 97])",
                "inc": "array([1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,\n       0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 3, 3, 1, 3, 7, 2, 5, 3, 3, 2, 4, 4, 4, 2, 4, 2, 4, 2, 3, 5, 4,\n       4, 2, 3, 3])",
                "res": "array([2, 3, 3, 1, 3, 7, 2, 5, 3, 3, 2, 4, 4, 4, 2, 4, 2, 4, 2, 3, 5, 4,\n       4, 2, 3, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    3\nc    3\nd    1\ne    3\nf    7\ng    2\nh    5\ni    3\nj    3\nk    2\nl    4\nm    4\nn    4\no    2\np    4\nq    2\nr    4\ns    2\nt    3\nu    5\nv    4\nw    4\nx    2\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d41c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d41d00>",
                "self.obj": "0     6\n1     1\n2     8\n3     5\n4     2\n     ..\n95    5\n96    6\n97    0\n98    6\n99    6\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 13, 14, 15,\n       15, 15, 16, 16, 17, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n       28, 29, 30, 31, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 40, 40, 41,\n       42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 51, 52, 52, 53, 54, 55, 56,\n       57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 66, 67, 67, 68,\n       69, 70, 71, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])",
                "_": "83",
                "val": "array([3, 2, 6, 6, 1, 2, 6, 4, 1, 1, 8, 6, 6, 9, 9, 2, 3, 5, 8, 6, 6, 2,\n       5, 0, 3, 1, 0, 6, 9, 0, 8, 2, 4, 1, 2, 2, 6, 3, 8, 8, 5, 6, 8, 6,\n       4, 6, 8, 1, 2, 7, 9, 7, 1, 2, 2, 6, 0, 1, 4, 0, 0, 9, 2, 6, 6, 8,\n       7, 1, 1, 2, 9, 4, 3, 5, 5, 1, 2, 0, 9, 2, 5, 8, 3, 9, 0, 3, 1, 0,\n       1, 9, 3, 2, 0, 2, 6, 5, 5, 0, 6, 2])",
                "sorter": "array([55, 66,  0, 98,  9, 64, 34, 77, 24, 43, 31, 93, 14, 67, 11, 65, 85,\n       58, 71, 18, 88,  6, 84, 26, 53, 44, 69, 91, 59, 27, 56, 45, 83, 89,\n       63, 47, 99,  7, 60, 19, 73, 12, 92, 96, 87, 30,  2, 70, 10, 52, 28,\n       25,  8, 36, 17, 42, 72, 79, 35, 68, 81, 74, 41, 22, 23, 76, 61, 86,\n       48, 16, 54, 50, 46, 95, 37, 82,  5, 33, 51, 29,  3, 15, 94, 21, 78,\n       13,  1, 90, 40, 20, 39, 57, 97, 32, 38, 75, 62, 80, 49,  4])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 11, 12, 13, 14, 15, 16, 19,\n       21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40,\n       41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82,\n       84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1,\n       3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1,\n       3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (83,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-30    1\n     2015-09-01    1\nb    2015-08-23    1\n     2015-08-25    1\n     2015-08-26    1\n                  ..\ny    2015-08-28    1\n     2015-09-01    1\nz    2015-08-26    1\n     2015-08-27    1\n     2015-08-31    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0c5b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0c550>",
                "self.obj": "0     6.0\n1     1.0\n2     8.0\n3     5.0\n4     2.0\n     ... \n95    5.0\n96    6.0\n97    0.0\n98    6.0\n99    6.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,\n        3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  7,  7,\n        7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 11, 11,\n       11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 15, 15, 15, 16,\n       16, 17, 17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21,\n       21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 25, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([69,  1, 86, 35, 18, 52, 66, 55,  9, 64,  0, 34, 98, 24, 43, 77, 31,\n       93, 65, 14, 11, 67, 26, 84, 85, 44,  6, 53, 58, 88, 71, 91, 27, 45,\n       83, 56, 59, 47, 89, 63, 99,  7, 73, 19, 60, 12, 92, 70, 87, 30, 96,\n        2,  8, 28, 10, 25, 72, 79, 17, 36, 42, 68, 81, 41, 22, 23, 74, 61,\n       76, 48, 16, 50, 54, 46, 95, 82,  5, 37, 33, 29,  3, 15, 51, 78, 13,\n       94, 21, 90, 40, 39, 20, 97, 57, 32, 62, 75, 38, 80,  4, 49])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  8, 13, 17, 18, 22, 31, 32, 37, 41, 45, 47, 52, 56, 61, 62, 67,\n       69, 73, 75, 78, 83, 87, 91, 93, 97])",
                "inc": "array([1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 2, 2, 3, 1, 3, 7, 1, 3, 4, 3, 2, 4, 3, 4, 1, 4, 2, 4, 2, 3, 5,\n       3, 4, 2, 3, 3])",
                "res": "array([2, 2, 3, 1, 3, 7, 1, 3, 4, 3, 2, 4, 3, 4, 1, 4, 2, 4, 2, 3, 5, 3,\n       4, 2, 3, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    2\nc    3\nd    1\ne    3\nf    7\ng    1\nh    3\ni    4\nj    3\nk    2\nl    4\nm    3\nn    4\no    1\np    4\nq    2\nr    4\ns    2\nt    3\nu    5\nv    3\nw    4\nx    2\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0ce20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0cdc0>",
                "self.obj": "0      7\n1      2\n2      0\n3      8\n4      9\n      ..\n995    3\n996    7\n997    0\n998    7\n999    1\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  37,  85, 128, 162, 200, 240, 275, 314, 349, 391, 428, 468,\n       518, 557, 609, 644, 679, 709, 731, 772, 812, 849, 889, 930, 967])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9,  9, 10, 10, 10, 10,  9, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9,  9, 10, 10, 10, 10,  9, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr     9\ns     9\nt    10\nu    10\nv    10\nw    10\nx     9\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0cca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0c790>",
                "self.obj": "0      7\n1      2\n2      0\n3      8\n4      9\n      ..\n995    3\n996    7\n997    0\n998    7\n999    1\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "250",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (250,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (250,)",
                "res": "array of shape (250,)",
                "ri": "array of shape (250,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    5\n     2015-08-24    4\n     2015-08-25    2\n     2015-08-26    2\n     2015-08-27    5\n                  ..\nz    2015-08-28    3\n     2015-08-29    5\n     2015-08-30    5\n     2015-08-31    2\n     2015-09-01    4\nName: julie, Length: 250, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220eeaf0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220ee7c0>",
                "self.obj": "0      7.0\n1      2.0\n2      0.0\n3      8.0\n4      9.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    1.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      7.000000e+00\n1      2.000000e+00\n2      0.000000e+00\n3      8.000000e+00\n4      9.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.000000e+00\n999    1.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  94, 139, 177, 206, 242, 281, 315, 352, 385, 425, 461, 499,\n       546, 583, 633, 664, 697, 726, 747, 784, 820, 856, 896, 936, 969])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([11, 11, 11, 10, 10, 11, 10, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11,\n       11, 10, 10, 11, 11, 11, 10, 10, 10, 11])",
                "res": "array([11, 11, 10, 10, 11, 10, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11,\n       10, 10, 11, 11, 11, 10, 10, 10, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    10\nd    10\ne    11\nf    10\ng    11\nh    11\ni    11\nj    10\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    10\ns    10\nt    11\nu    11\nv    11\nw    10\nx    10\ny    10\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dfe670>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dfebe0>",
                "self.obj": "0       1\n1       1\n2       3\n3       9\n4       6\n       ..\n9995    5\n9996    4\n9997    2\n9998    8\n9999    4\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  53,  359,  961, ..., 9620, 9682, 9793])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  381,  773, 1141, 1537, 1939, 2348, 2722, 3095, 3447, 3829,\n       4204, 4607, 4985, 5382, 5780, 6172, 6579, 6966, 7329, 7727, 8092,\n       8489, 8860, 9249, 9630])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dfe9a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dfedc0>",
                "self.obj": "0       1\n1       1\n2       3\n3       9\n4       6\n       ..\n9995    5\n9996    4\n9997    2\n9998    8\n9999    4\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([1114, 3170, 5401, ..., 4527, 7610, 8966])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30     9\n     2015-08-31     9\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e13fd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121e13460>",
                "self.obj": "0       1.0\n1       1.0\n2       3.0\n3       9.0\n4       6.0\n       ... \n9995    5.0\n9996    4.0\n9997    2.0\n9998    8.0\n9999    4.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([ 103,  256,  273, ..., 9342, 9620, 9682])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  948, 1319, 1673, 2041, 2419, 2805, 3154, 3501, 3827, 4184,\n       4536, 4911, 5269, 5643, 6022, 6393, 6771, 7131, 7475, 7850, 8191,\n       8569, 8922, 9283, 9645])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121f8b610>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121f8b040>",
                "self.obj": "0        7\n1        5\n2        4\n3        4\n4        4\n        ..\n99995    2\n99996    5\n99997    3\n99998    3\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  545,   888,  1189, ..., 99362, 99511, 99846])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3850,  7679, 11430, 15309, 19268, 23110, 26941, 30842,\n       34625, 38449, 42316, 46224, 50178, 54032, 57935, 61745, 65587,\n       69425, 73295, 77130, 80957, 84730, 88533, 92330, 96178])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121f8b0a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121f8b730>",
                "self.obj": "0        7\n1        5\n2        4\n3        4\n4        4\n        ..\n99995    2\n99996    5\n99997    3\n99998    3\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 2066,  2483,  3433, ..., 93464, 95952, 98945])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119ceaca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119ceacd0>",
                "self.obj": "0        7.0\n1        5.0\n2        4.0\n3        4.0\n4        4.0\n        ... \n99995    2.0\n99996    5.0\n99997    3.0\n99998    3.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([  103,   256,   273, ..., 99139, 99362, 99846])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9488, 13084, 16597, 20272, 24013, 27625, 31249, 34923,\n       38487, 42082, 45734, 49420, 53112, 56755, 60403, 63988, 67586,\n       71200, 74845, 78462, 82062, 85618, 89180, 92786, 96408])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dcd9a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dcd880>",
                "self.obj": "0     58\n1     30\n2     28\n3     70\n4     96\n      ..\n95    35\n96    15\n97    17\n98    24\n99    84\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  5,  5,  5,\n        6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9, 10,\n       10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14,\n       15, 15, 15, 15, 15, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,\n       19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23,\n       23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25])",
                "_": "26",
                "val": "array([31, 59, 68, 24, 48, 58, 81, 97,  0,  1, 51, 74,  8, 27, 28, 37, 93,\n       43, 70, 70, 22, 88, 15, 28, 30, 56, 76, 77, 36, 73, 79, 80, 93, 44,\n       71, 31, 48, 72, 84,  7, 15, 23, 68, 17, 51, 53,  7, 62, 63, 65, 84,\n       38, 55, 57, 61, 94, 29,  7,  8, 33, 43, 57,  6, 14, 75, 86, 31, 55,\n       72, 82, 92, 96, 13, 34, 70, 72, 33, 57, 78, 90, 14, 15, 63, 38, 61,\n       93, 23, 33, 35, 45, 65, 75, 79, 91, 21, 24, 33, 35, 53, 68])",
                "sorter": "array([30, 71, 35, 92,  6,  0, 19, 91, 14, 93, 52, 38, 45, 24, 60, 80, 75,\n        7,  3, 36, 43, 73, 96,  2,  1, 12, 70, 56, 11, 88, 90, 34, 18, 82,\n       33, 44, 48, 46, 99, 83, 10, 59, 89, 97, 78, 86, 21, 49, 22, 50, 84,\n       29, 87, 69, 23,  9,  5, 25,  8, 81, 40, 41, 32, 72, 20, 47, 66, 28,\n       94, 55, 37,  4, 77, 79, 67, 13, 15, 16, 53, 51, 17, 27, 63, 74, 26,\n       64, 68, 65, 62, 54, 85, 57, 58, 61, 42, 98, 31, 95, 39, 76])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  3,  8, 12, 14, 17, 20, 22, 28, 33, 35, 39, 43, 46, 51, 56,\n       57, 62, 66, 72, 76, 80, 83, 86, 94])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 2, 5, 4, 2, 3, 2, 2, 6, 5, 2, 4, 4, 3, 5, 5, 1, 5, 4, 6, 4, 4,\n       3, 3, 8, 6])",
                "res": "array([1, 2, 5, 4, 2, 3, 2, 2, 6, 5, 2, 4, 4, 3, 5, 5, 1, 5, 4, 6, 4, 4,\n       3, 3, 8, 6])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    1\nb    2\nc    5\nd    4\ne    2\nf    3\ng    2\nh    2\ni    6\nj    5\nk    2\nl    4\nm    4\nn    3\no    5\np    5\nq    1\nr    5\ns    4\nt    6\nu    4\nv    4\nw    3\nx    3\ny    8\nz    6\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dcda30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dcd340>",
                "self.obj": "0     58\n1     30\n2     28\n3     70\n4     96\n      ..\n95    35\n96    15\n97    17\n98    24\n99    84\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 30,\n       31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40, 41, 42, 42, 43, 44, 45,\n       46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 57, 57, 58, 59, 60,\n       60, 61, 61, 62, 63, 63, 64, 64, 65, 66, 67, 68, 69, 69, 70, 71, 72,\n       73, 74, 74, 75, 76, 76, 77, 78, 78, 79, 80, 81, 81, 82, 83])",
                "_": "84",
                "val": "array([31, 59, 68, 48, 81, 24, 58, 97,  0,  1, 74, 51, 27,  8, 93, 37, 28,\n       43, 70, 70, 88, 22, 77, 28, 15, 30, 56, 76, 36, 80, 73, 79, 93, 71,\n       44, 48, 72, 31, 84, 15, 23,  7, 68, 17, 51, 53, 62, 65, 63, 84,  7,\n       55, 94, 38, 61, 57, 29,  7, 43, 33,  8, 57,  6, 14, 75, 86, 82, 31,\n       92, 55, 72, 96, 70, 72, 13, 34, 33, 90, 57, 78, 15, 63, 14, 61, 38,\n       93, 35, 75, 45, 23, 91, 65, 33, 79, 35, 21, 24, 53, 68, 33])",
                "sorter": "array([30, 71, 35,  6, 19, 92,  0, 91, 14, 93, 38, 52, 24, 45, 75, 80, 60,\n        7,  3, 36, 73, 43, 56,  2, 96,  1, 12, 70, 11, 34, 88, 90, 18, 33,\n       82, 48, 46, 44, 99, 10, 59, 83, 89, 97, 78, 86, 49, 50, 22, 84, 21,\n       87,  9, 29, 23, 69,  5, 25, 40, 81,  8, 41, 32, 72, 20, 47, 55, 66,\n       37, 28, 94,  4, 67, 13, 77, 79, 15, 51, 16, 53, 27, 63, 17, 26, 74,\n       64, 62, 57, 54, 68, 61, 85, 65, 58, 95, 42, 98, 39, 76, 31])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36,\n       37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55,\n       56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 69, 71, 72, 74, 76, 77, 78,\n       79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 1, 2, 2, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 1, 2, 2, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1])",
                "ri": "array of shape (84,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-09-01    1\nb    2015-08-23    1\n     2015-08-29    1\nc    2015-08-24    1\n     2015-08-27    1\n                  ..\nz    2015-08-24    1\n     2015-08-26    1\n     2015-08-27    2\n     2015-08-28    1\n     2015-08-29    1\nName: julie, Length: 84, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121d13370>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121d13d00>",
                "self.obj": "0     58.0\n1     30.0\n2     28.0\n3     70.0\n4     96.0\n      ... \n95    35.0\n96    15.0\n97    17.0\n98    24.0\n99    84.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  2,  2,  2,  3,  3,  3,  4,\n        4,  5,  5,  5,  6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,\n        9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14, 14,\n       14, 15, 15, 15, 15, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,\n       19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23,\n       23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([ 1, 52, 86, 69, 35, 18, 30, 71, 92,  6,  0, 19, 91, 14, 93, 38, 45,\n       24, 60, 80, 75,  7,  3, 36, 43, 73, 96,  2, 12, 70, 56, 11, 88, 90,\n       34, 82, 33, 46, 44, 48, 99, 83, 10, 59, 89, 97, 78, 84, 21, 49, 22,\n       50,  9, 29, 87, 23,  5,  8, 25, 81, 40, 41, 47, 32, 72, 20, 28, 66,\n       94, 55, 37,  4, 77, 79, 67, 13, 15, 16, 53, 51, 27, 17, 63, 26, 64,\n       74, 65, 85, 68, 62, 54, 57, 58, 61, 42, 98, 31, 95, 39, 76])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  7,  8, 13, 16, 18, 21, 24, 26, 31, 35, 37, 41, 45, 47, 52, 56,\n       57, 62, 66, 72, 76, 80, 83, 86, 94])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 1, 1, 5, 3, 2, 3, 2, 2, 5, 4, 2, 4, 4, 2, 5, 4, 1, 5, 4, 5, 4,\n       4, 3, 2, 7, 6])",
                "res": "array([1, 1, 5, 3, 2, 3, 2, 2, 5, 4, 2, 4, 4, 2, 5, 4, 1, 5, 4, 5, 4, 4,\n       3, 2, 7, 6])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    1\nb    1\nc    5\nd    3\ne    2\nf    3\ng    2\nh    2\ni    5\nj    4\nk    2\nl    4\nm    4\nn    2\no    5\np    4\nq    1\nr    5\ns    4\nt    5\nu    4\nv    4\nw    3\nx    2\ny    7\nz    6\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d15a00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d15670>",
                "self.obj": "0      75\n1      68\n2      28\n3      56\n4      49\n       ..\n995    72\n996     9\n997    96\n998     4\n999    56\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  47,  93, 137, 181, 217, 256, 293, 330, 363, 397, 435, 477,\n       514, 544, 585, 627, 666, 697, 740, 785, 818, 860, 894, 931, 964])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([34, 41, 37, 35, 30, 31, 30, 32, 28, 30, 34, 34, 31, 25, 29, 35, 31,\n       28, 33, 36, 29, 33, 26, 32, 31, 29])",
                "res": "array([34, 41, 37, 35, 30, 31, 30, 32, 28, 30, 34, 34, 31, 25, 29, 35, 31,\n       28, 33, 36, 29, 33, 26, 32, 31, 29])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    34\nb    41\nc    37\nd    35\ne    30\nf    31\ng    30\nh    32\ni    28\nj    30\nk    34\nl    34\nm    31\nn    25\no    29\np    35\nq    31\nr    28\ns    33\nt    36\nu    29\nv    33\nw    26\nx    32\ny    31\nz    29\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d15f40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d157f0>",
                "self.obj": "0      75\n1      68\n2      28\n3      56\n4      49\n       ..\n995    72\n996     9\n997    96\n998     4\n999    56\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "256",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (256,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (256,)",
                "res": "array of shape (256,)",
                "ri": "array of shape (256,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    4\n     2015-08-24    7\n     2015-08-25    3\n     2015-08-26    4\n     2015-08-27    6\n                  ..\nz    2015-08-28    3\n     2015-08-29    3\n     2015-08-30    4\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d15a00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d15100>",
                "self.obj": "0      75.0\n1      68.0\n2      28.0\n3      56.0\n4      49.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     4.0\n999    56.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      7.500000e+01\n1      6.800000e+01\n2      2.800000e+01\n3      5.600000e+01\n4      4.900000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    4.000000e+00\n999    5.600000e+01\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59, 102, 147, 187, 226, 260, 299, 333, 369, 400, 433, 468, 508,\n       543, 572, 612, 648, 685, 714, 753, 796, 827, 866, 899, 935, 966])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([41, 29, 37, 30, 30, 24, 27, 27, 29, 24, 28, 30, 25, 27, 21, 25, 23,\n       25, 26, 30, 32, 26, 28, 23, 29, 29, 24])",
                "res": "array([29, 37, 30, 30, 24, 27, 27, 29, 24, 28, 30, 25, 27, 21, 25, 23, 25,\n       26, 30, 32, 26, 28, 23, 29, 29, 24])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    29\nb    37\nc    30\nd    30\ne    24\nf    27\ng    27\nh    29\ni    24\nj    28\nk    30\nl    25\nm    27\nn    21\no    25\np    23\nq    25\nr    26\ns    30\nt    32\nu    26\nv    28\nw    23\nx    29\ny    29\nz    24\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220b7940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220b7a00>",
                "self.obj": "0        0\n1       26\n2       38\n3       99\n4       15\n        ..\n9995     6\n9996    56\n9997    93\n9998    89\n9999    68\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([2649, 3052, 3441, ..., 4933, 5915, 7284])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  376,  781, 1200, 1579, 1969, 2360, 2735, 3111, 3495, 3852,\n       4238, 4639, 5040, 5390, 5798, 6232, 6605, 7018, 7393, 7785, 8157,\n       8557, 8929, 9285, 9676])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 97,  96,  99,  99,  98,  96,  98, 100,  98,  95,  97,  99,  98,\n        99,  95, 100,  98,  98,  98,  97,  98,  95,  98,  96,  94,  92])",
                "res": "array([ 97,  96,  99,  99,  98,  96,  98, 100,  98,  95,  97,  99,  98,\n        99,  95, 100,  98,  98,  98,  97,  98,  95,  98,  96,  94,  92])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     97\nb     96\nc     99\nd     99\ne     98\nf     96\ng     98\nh    100\ni     98\nj     95\nk     97\nl     99\nm     98\nn     99\no     95\np    100\nq     98\nr     98\ns     98\nt     97\nu     98\nv     95\nw     98\nx     96\ny     94\nz     92\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220b7220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220b77c0>",
                "self.obj": "0        0\n1       26\n2       38\n3       99\n4       15\n        ..\n9995     6\n9996    56\n9997    93\n9998    89\n9999    68\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 4,  9, 10, ..., 83, 97, 99])",
                "sorter": "array([4637, 9171, 1899, ..., 2983,  133, 5915])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    26\n     2015-08-24    28\n     2015-08-25    39\n     2015-08-26    25\n     2015-08-27    29\n                   ..\nz    2015-08-28    32\n     2015-08-29    31\n     2015-08-30    26\n     2015-08-31    30\n     2015-09-01    19\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220b7220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220b7f10>",
                "self.obj": "0        0.0\n1       26.0\n2       38.0\n3       99.0\n4       15.0\n        ... \n9995     6.0\n9996    56.0\n9997    93.0\n9998    89.0\n9999    68.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([ 103,  256,  273, ..., 2225, 4933, 5915])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  937, 1316, 1711, 2067, 2432, 2805, 3156, 3515, 3876, 4216,\n       4583, 4955, 5333, 5657, 6039, 6446, 6803, 7191, 7556, 7920, 8269,\n       8640, 8992, 9323, 9687])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101,  94,  92,  99,  97,  95,  96,  99,  97,  97,  94,  94,  99,\n        96,  98,  93,  98,  96,  96,  98,  96,  98,  94,  97,  94,  89,\n        90])",
                "res": "array([94, 92, 99, 97, 95, 96, 99, 97, 97, 94, 94, 99, 96, 98, 93, 98, 96,\n       96, 98, 96, 98, 94, 97, 94, 89, 90])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    94\nb    92\nc    99\nd    97\ne    95\nf    96\ng    99\nh    97\ni    97\nj    94\nk    94\nl    99\nm    96\nn    98\no    93\np    98\nq    96\nr    96\ns    98\nt    96\nu    98\nv    94\nw    97\nx    94\ny    89\nz    90\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e0ecd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e0ea00>",
                "self.obj": "0        86\n1        48\n2        57\n3        67\n4        70\n         ..\n99995    48\n99996    63\n99997    63\n99998    88\n99999    95\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 1742,  3174,  5457, ..., 88644, 90177, 90595])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3832,  7638, 11432, 15168, 19041, 22815, 26774, 30636,\n       34445, 38335, 42137, 46127, 49894, 53847, 57633, 61420, 65320,\n       69230, 73094, 76898, 80786, 84675, 88505, 92394, 96173])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e0e970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e0ea00>",
                "self.obj": "0        86\n1        48\n2        57\n3        67\n4        70\n         ..\n99995    48\n99996    63\n99997    63\n99998    88\n99999    95\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  1,  1, ..., 99, 99, 99])",
                "sorter": "array([93372,  5210, 22087, ..., 23902, 41942, 90177])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    98\n     2015-08-24    99\n     2015-08-25    99\n     2015-08-26    98\n     2015-08-27    99\n                   ..\nz    2015-08-28    96\n     2015-08-29    98\n     2015-08-30    99\n     2015-08-31    98\n     2015-09-01    96\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e0e490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e0e5b0>",
                "self.obj": "0        86.0\n1        48.0\n2        57.0\n3        67.0\n4        70.0\n         ... \n99995    48.0\n99996    63.0\n99997    63.0\n99998    88.0\n99999    95.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([  103,   256,   273, ..., 86342, 90177, 90595])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9477, 13053, 16605, 20140, 23814, 27353, 31080, 34722,\n       38284, 41946, 45490, 49248, 52805, 56523, 60105, 63667, 67338,\n       71028, 74709, 78297, 81949, 85597, 89209, 92897, 96426])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e07d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c47130>",
                "self.obj": "0     732\n1     695\n2     843\n3     741\n4     159\n     ... \n95    127\n96    326\n97    995\n98    213\n99    607\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  1,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,\n        4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  7,  7,\n        7,  8,  8,  8,  8,  8,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11,\n       11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14,\n       15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 19, 19, 19, 19,\n       19, 20, 20, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([10, 54, 46,  5, 92, 87,  2, 26, 68, 85, 16, 19, 56, 81, 69, 89, 44,\n       32, 78, 24, 31, 55, 12, 75, 61,  6, 79, 71, 52, 72, 86, 64, 34, 59,\n       23, 38, 51, 73, 88, 70, 43, 82, 65, 11,  3, 97, 39, 91, 14, 27, 63,\n       76, 49, 57, 22,  0, 60, 53, 35, 42,  9,  8, 83, 84, 33, 30, 36, 90,\n       67, 15, 80, 98, 48, 50, 95,  4, 13, 21, 94, 58, 93, 62, 74, 41,  1,\n       18, 96, 99, 20, 25, 45, 29, 40, 37, 66, 28,  7, 77, 17, 47])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  4,  7,  9, 17, 21, 25, 28, 35, 40, 41, 46, 52, 59, 66, 68, 70,\n       73, 80, 81, 86, 88, 92, 93, 95, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 3, 2, 8, 4, 4, 3, 7, 5, 1, 5, 6, 7, 7, 2, 2, 3, 7, 1, 5, 2, 4,\n       1, 2, 4, 1])",
                "res": "array([4, 3, 2, 8, 4, 4, 3, 7, 5, 1, 5, 6, 7, 7, 2, 2, 3, 7, 1, 5, 2, 4,\n       1, 2, 4, 1])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    4\nb    3\nc    2\nd    8\ne    4\nf    4\ng    3\nh    7\ni    5\nj    1\nk    5\nl    6\nm    7\nn    7\no    2\np    2\nq    3\nr    7\ns    1\nt    5\nu    2\nv    4\nw    1\nx    2\ny    4\nz    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e07460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e07160>",
                "self.obj": "0     732\n1     695\n2     843\n3     741\n4     159\n     ... \n95    127\n96    326\n97    995\n98    213\n99    607\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 13, 13,\n       14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 27, 27,\n       27, 28, 29, 30, 30, 31, 32, 33, 34, 34, 35, 36, 37, 37, 38, 39, 40,\n       41, 42, 43, 43, 43, 44, 44, 45, 46, 47, 48, 48, 49, 50, 50, 51, 52,\n       53, 53, 54, 55, 55, 56, 56, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64,\n       65, 66, 67, 68, 69, 69, 69, 70, 71, 72, 73, 74, 75, 76, 77])",
                "_": "78",
                "val": "array of shape (100,)",
                "sorter": "array([54, 46, 10,  5, 87,  2, 92, 68, 26, 19, 16, 89, 56, 85, 81, 69, 44,\n       24, 31, 32, 78, 12, 55, 61, 75, 79,  6, 71, 52, 86, 64, 72, 34, 59,\n       23, 70, 51, 38, 88, 73, 43, 11,  3, 97, 65, 82, 91, 63, 39, 27, 14,\n       76, 22, 49, 57, 53, 60, 35,  0, 42, 33, 83, 30,  9,  8, 84, 36, 90,\n       67, 15, 80, 98, 48, 13, 21, 58, 50, 95,  4, 94, 93,  1, 62, 18, 74,\n       41, 99, 96, 20, 25, 45, 29, 40, 37, 66, 77,  7, 28, 17, 47])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 35, 36, 37, 39, 40, 41,\n       42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 56, 58, 59, 60, 61, 63, 64,\n       66, 67, 68, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87,\n       88, 89, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 3,\n       2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 3,\n       2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (78,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-25    1\n     2015-08-31    1\nb    2015-08-26    1\n     2015-08-28    1\n                  ..\ny    2015-08-25    1\n     2015-08-26    1\n     2015-08-28    1\n     2015-08-30    1\nz    2015-08-29    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121fd6c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121fd63d0>",
                "self.obj": "0     732.0\n1     695.0\n2     843.0\n3     741.0\n4     159.0\n      ...  \n95    127.0\n96    326.0\n97    995.0\n98    213.0\n99    607.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  2,  2,  3,  3,\n        3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  7,\n        7,  7,  7,  7,  8,  8,  8,  8,  8,  9, 10, 10, 10, 10, 10, 11, 11,\n       11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13,\n       14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 19, 19,\n       19, 20, 20, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([52, 86, 69,  1, 18, 35, 46, 10, 54,  5, 92, 87,  2, 26, 68, 85, 16,\n       19, 56, 81, 89, 44, 32, 78, 24, 31, 55, 12, 75, 61,  6, 79, 71, 64,\n       72, 34, 59, 23, 38, 51, 73, 88, 70, 43, 65, 82, 11,  3, 97, 27, 39,\n       91, 14, 63, 76, 49, 57, 22,  0, 60, 53,  8,  9, 83, 84, 42, 33, 30,\n       36, 90, 67, 15, 80, 98, 48, 50, 95,  4, 13, 21, 94, 58, 93, 62, 74,\n       41, 96, 99, 45, 20, 25, 29, 40, 66, 37,  7, 28, 77, 17, 47])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 10, 13, 15, 22, 26, 30, 33, 38, 43, 44, 49, 55, 61, 68, 70, 72,\n       75, 82, 83, 86, 88, 92, 93, 95, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 4, 3, 2, 7, 4, 4, 3, 5, 5, 1, 5, 6, 6, 4, 2, 2, 3, 7, 1, 3, 2,\n       4, 1, 2, 3, 1])",
                "res": "array([4, 3, 2, 7, 4, 4, 3, 5, 5, 1, 5, 6, 6, 4, 2, 2, 3, 7, 1, 3, 2, 4,\n       1, 2, 3, 1])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    4\nb    3\nc    2\nd    7\ne    4\nf    4\ng    3\nh    5\ni    5\nj    1\nk    5\nl    6\nm    6\nn    4\no    2\np    2\nq    3\nr    7\ns    1\nt    3\nu    2\nv    4\nw    1\nx    2\ny    3\nz    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e0ebe0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e0eac0>",
                "self.obj": "0      980\n1      243\n2      862\n3      375\n4      766\n      ... \n995    638\n996    647\n997    143\n998    968\n999    794\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  41,  78, 115, 151, 189, 223, 260, 295, 332, 374, 409, 440,\n       478, 521, 567, 600, 651, 694, 731, 766, 802, 830, 871, 915, 949])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([41, 37, 36, 36, 37, 32, 35, 35, 37, 41, 35, 31, 38, 42, 45, 31, 51,\n       43, 34, 35, 35, 26, 41, 43, 34, 50])",
                "res": "array([41, 37, 36, 36, 37, 32, 35, 35, 37, 41, 35, 31, 38, 42, 45, 31, 51,\n       43, 34, 35, 35, 26, 41, 43, 34, 50])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    41\nb    37\nc    36\nd    36\ne    37\nf    32\ng    35\nh    35\ni    37\nj    41\nk    35\nl    31\nm    38\nn    42\no    45\np    31\nq    51\nr    43\ns    34\nt    35\nu    35\nv    26\nw    41\nx    43\ny    34\nz    50\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e0ea30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e0eca0>",
                "self.obj": "0      980\n1      243\n2      862\n3      375\n4      766\n      ... \n995    638\n996    647\n997    143\n998    968\n999    794\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "255",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (255,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (255,)",
                "res": "array of shape (255,)",
                "ri": "array of shape (255,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    5\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    4\n     2015-08-27    2\n                  ..\nz    2015-08-28    4\n     2015-08-29    8\n     2015-08-30    2\n     2015-08-31    5\n     2015-09-01    8\nName: julie, Length: 255, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119e0eac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119e0ea30>",
                "self.obj": "0      980.0\n1      243.0\n2      862.0\n3      375.0\n4      766.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    968.0\n999    794.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      9.800000e+02\n1      2.430000e+02\n2      8.620000e+02\n3      3.750000e+02\n4      7.660000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    9.680000e+02\n999    7.940000e+02\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  97, 132, 167, 202, 238, 270, 305, 338, 371, 411, 446, 474,\n       510, 548, 591, 624, 674, 714, 749, 781, 815, 842, 880, 921, 950])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([51, 31, 33, 29, 28, 30, 30, 23, 32, 27, 39, 26, 27, 28, 35, 41, 27,\n       42, 37, 26, 24, 27, 24, 31, 36, 27, 44])",
                "res": "array([31, 33, 29, 28, 30, 30, 23, 32, 27, 39, 26, 27, 28, 35, 41, 27, 42,\n       37, 26, 24, 27, 24, 31, 36, 27, 44])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    31\nb    33\nc    29\nd    28\ne    30\nf    30\ng    23\nh    32\ni    27\nj    39\nk    26\nl    27\nm    28\nn    35\no    41\np    27\nq    42\nr    37\ns    26\nt    24\nu    27\nv    24\nw    31\nx    36\ny    27\nz    44\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ff6e20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121ff68b0>",
                "self.obj": "0       251\n1       776\n2       589\n3       666\n4       991\n       ... \n9995    153\n9996    709\n9997    444\n9998    624\n9999    668\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   6,   7, ..., 990, 990, 991])",
                "sorter": "array([ 188,  777,  126, ..., 2874, 7564, 7746])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  374,  799, 1179, 1557, 1928, 2304, 2693, 3058, 3438, 3823,\n       4179, 4595, 5002, 5389, 5756, 6126, 6502, 6898, 7266, 7652, 8027,\n       8426, 8817, 9194, 9624])",
                "inc": "array([1, 1, 1, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([312, 353, 310, 308, 316, 316, 326, 303, 320, 320, 316, 339, 335,\n       326, 301, 318, 311, 329, 303, 321, 296, 317, 321, 306, 353, 304])",
                "res": "array([312, 353, 310, 308, 316, 316, 326, 303, 320, 320, 316, 339, 335,\n       326, 301, 318, 311, 329, 303, 321, 296, 317, 321, 306, 353, 304])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    312\nb    353\nc    310\nd    308\ne    316\nf    316\ng    326\nh    303\ni    320\nj    320\nk    316\nl    339\nm    335\nn    326\no    301\np    318\nq    311\nr    329\ns    303\nt    321\nu    296\nv    317\nw    321\nx    306\ny    353\nz    304\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ff6e20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121ff61f0>",
                "self.obj": "0       251\n1       776\n2       589\n3       666\n4       991\n       ... \n9995    153\n9996    709\n9997    444\n9998    624\n9999    668\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  7,  22,  43, ..., 907, 915, 976])",
                "sorter": "array([6916, 1379, 5382, ..., 9773, 6772, 2388])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    37\n     2015-08-24    50\n     2015-08-25    32\n     2015-08-26    36\n     2015-08-27    35\n                   ..\nz    2015-08-28    45\n     2015-08-29    43\n     2015-08-30    33\n     2015-08-31    33\n     2015-09-01    34\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cc0970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cc09d0>",
                "self.obj": "0       251.0\n1       776.0\n2       589.0\n3       666.0\n4       991.0\n        ...  \n9995    153.0\n9996    709.0\n9997    444.0\n9998    624.0\n9999    668.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.84000000e+02,  9.90000000e+02,  9.91000000e+02])",
                "sorter": "array([ 103,  256,  273, ..., 6323, 7564, 7746])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  943, 1345, 1708, 2063, 2414, 2767, 3123, 3472, 3836, 4190,\n       4520, 4901, 5289, 5657, 6002, 6352, 6704, 7076, 7424, 7780, 8127,\n       8503, 8884, 9240, 9647])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([394, 254, 284, 261, 254, 260, 261, 260, 245, 259, 262, 251, 280,\n       279, 272, 251, 259, 254, 278, 259, 262, 231, 261, 264, 253, 303,\n       252])",
                "res": "array([254, 284, 261, 254, 260, 261, 260, 245, 259, 262, 251, 280, 279,\n       272, 251, 259, 254, 278, 259, 262, 231, 261, 264, 253, 303, 252])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    254\nb    284\nc    261\nd    254\ne    260\nf    261\ng    260\nh    245\ni    259\nj    262\nk    251\nl    280\nm    279\nn    272\no    251\np    259\nq    254\nr    278\ns    259\nt    262\nu    231\nv    261\nw    264\nx    253\ny    303\nz    252\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121fea4c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121fea430>",
                "self.obj": "0        187\n1        977\n2        503\n3        129\n4        194\n        ... \n99995    196\n99996    469\n99997     26\n99998    877\n99999    344\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([28927, 30497, 40688, ..., 32171, 88951, 96123])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3983,  7908, 11706, 15585, 19455, 23371, 27220, 31111,\n       34858, 38677, 42475, 46395, 50035, 53866, 57639, 61570, 65419,\n       69330, 73148, 77070, 80784, 84570, 88429, 92288, 96147])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([978, 982, 983, 981, 969, 987, 980, 987, 976, 984, 980, 978, 963,\n       972, 968, 983, 979, 973, 981, 971, 977, 978, 978, 979, 975, 972])",
                "res": "array([978, 982, 983, 981, 969, 987, 980, 987, 976, 984, 980, 978, 963,\n       972, 968, 983, 979, 973, 981, 971, 977, 978, 978, 979, 975, 972])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    978\nb    982\nc    983\nd    981\ne    969\nf    987\ng    980\nh    987\ni    976\nj    984\nk    980\nl    978\nm    963\nn    972\no    968\np    983\nq    979\nr    973\ns    981\nt    971\nu    977\nv    978\nw    978\nx    979\ny    975\nz    972\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121fea1c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121fea5b0>",
                "self.obj": "0        187\n1        977\n2        503\n3        129\n4        194\n        ... \n99995    196\n99996    469\n99997     26\n99998    877\n99999    344\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  1,   4,   8, ..., 977, 987, 993])",
                "sorter": "array([30986, 41278, 36070, ..., 54668, 53289, 78239])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    319\n     2015-08-24    325\n     2015-08-25    352\n     2015-08-26    334\n     2015-08-27    339\n                  ... \nz    2015-08-28    322\n     2015-08-29    332\n     2015-08-30    327\n     2015-08-31    306\n     2015-09-01    310\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c349a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c34430>",
                "self.obj": "0        187.0\n1        977.0\n2        503.0\n3        129.0\n4        194.0\n         ...  \n99995    196.0\n99996    469.0\n99997     26.0\n99998    877.0\n99999    344.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])",
                "sorter": "array([  103,   256,   273, ..., 32171, 88951, 96123])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9622, 13340, 16915, 20579, 24235, 27927, 31564, 35199,\n       38720, 42324, 45899, 49600, 53035, 56623, 60155, 63852, 67457,\n       71132, 74704, 78392, 81901, 85474, 89127, 92754, 96374])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([997, 955, 964, 947, 961, 944, 961, 959, 955, 954, 966, 955, 957,\n       933, 955, 946, 964, 949, 949, 949, 947, 954, 963, 953, 958, 946,\n       954])",
                "res": "array([955, 964, 947, 961, 944, 961, 959, 955, 954, 966, 955, 957, 933,\n       955, 946, 964, 949, 949, 949, 947, 954, 963, 953, 958, 946, 954])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    955\nb    964\nc    947\nd    961\ne    944\nf    961\ng    959\nh    955\ni    954\nj    966\nk    955\nl    957\nm    933\nn    955\no    946\np    964\nq    949\nr    949\ns    949\nt    947\nu    954\nv    963\nw    953\nx    958\ny    946\nz    954\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d9fe50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d9fb50>",
                "self.obj": "0     8\n1     5\n2     5\n3     4\n4     2\n     ..\n95    5\n96    4\n97    7\n98    0\n99    5\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  3,  3,\n        3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  6,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11,\n       11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15,\n       15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18,\n       18, 19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 25, 25])",
                "_": "26",
                "val": "array([0, 3, 8, 9, 1, 5, 5, 9, 0, 3, 4, 4, 4, 5, 5, 1, 2, 2, 3, 7, 1, 6,\n       7, 8, 0, 2, 3, 6, 6, 9, 0, 6, 8, 8, 9, 9, 5, 6, 2, 4, 4, 6, 0, 2,\n       6, 7, 1, 2, 4, 8, 0, 3, 5, 8, 9, 9, 1, 2, 4, 6, 8, 5, 5, 6, 7, 7,\n       9, 7, 7, 1, 4, 4, 6, 1, 2, 2, 2, 3, 7, 8, 5, 7, 7, 8, 9, 9, 6, 8,\n       4, 2, 4, 9, 9, 1, 8, 2, 5, 6, 1, 6])",
                "sorter": "array([98, 58,  0, 82, 31,  1, 95, 71, 14, 91,  3, 25, 73,  2, 99, 13,  4,\n       94,  9, 97, 45, 49,  5, 42, 60, 67, 43, 20, 66,  6, 57, 12,  8, 15,\n        7, 70, 90, 10, 11, 16, 96, 78, 85, 33, 17, 38, 19, 18, 22, 86, 34,\n       65, 21, 29, 23, 27, 32, 24, 80, 55, 76, 26, 81, 53, 52, 63, 93, 28,\n       56, 50, 68, 75, 30, 35, 46, 64, 87, 69, 59, 89, 54, 44, 48, 40, 36,\n       62, 37, 39, 41, 79, 77, 47, 84, 51, 61, 72, 83, 92, 88, 74])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  4,  8, 15, 20, 24, 30, 36, 38, 42, 46, 50, 54, 56, 61, 67, 69,\n       73, 80, 86, 88, 89, 93, 94, 95, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 3, 4, 4, 4, 5, 4, 2, 3, 4, 4, 4, 1, 5, 4, 1, 3, 5, 4, 2, 1, 3,\n       1, 1, 3, 2])",
                "res": "array([4, 3, 4, 4, 4, 5, 4, 2, 3, 4, 4, 4, 1, 5, 4, 1, 3, 5, 4, 2, 1, 3,\n       1, 1, 3, 2])",
                "ri": "Index(['m', 'g', 'd', 'z', 'n', 'a', 'i', 'h', 'o', 'p', 'u', 'x', 'q', 'f',\n       'k', 'y', 'w', 'r', 'b', 's', 'j', 'v', 'e', 't', 'c', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    4\ng    3\nd    4\nz    4\nn    4\na    5\ni    4\nh    2\no    3\np    4\nu    4\nx    4\nq    1\nf    5\nk    4\ny    1\nw    3\nr    5\nb    4\ns    2\nj    1\nv    3\ne    1\nt    1\nc    3\nl    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d9f4f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d9ffa0>",
                "self.obj": "0     8\n1     5\n2     5\n3     4\n4     2\n     ..\n95    5\n96    4\n97    7\n98    0\n99    5\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  2,  3,  4,  4,  4,  5,  6,  6,  6,  7,  7,  7,  8,\n        9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22,\n       22, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 31, 31, 32, 32, 33,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48,\n       49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63,\n       64, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77])",
                "_": "78",
                "val": "array([8, 5, 0, 3, 5, 4, 2, 3, 7, 7, 0, 6, 9, 8, 9, 9, 6, 2, 6, 8, 1, 4,\n       6, 2, 1, 6, 3, 5, 4, 9, 2, 8, 4, 5, 5, 7, 9, 7, 8, 6, 1, 9, 1, 2,\n       0, 1, 2, 3, 5, 9, 6, 8, 7, 8, 4, 8, 3, 7, 1, 2, 4, 9, 7, 6, 1, 1,\n       6, 6, 7, 0, 3, 7, 8, 9, 7, 2, 8, 2, 4, 2, 6, 4, 6, 4, 6, 2, 9, 4,\n       9, 5, 0, 8, 1, 5, 9, 2, 5, 4, 0, 5])",
                "sorter": "array([ 0,  1, 14, 91,  2,  3,  4,  9, 97,  5, 60, 66,  6,  8,  7, 70, 10,\n       11, 12, 15, 13, 16, 17, 18, 19, 20, 65, 21, 22, 23, 24, 76, 25, 26,\n       81, 52, 27, 28, 29, 30, 31, 71, 32, 33, 34, 35, 87, 69, 54, 36, 37,\n       39, 38, 40, 41, 42, 43, 44, 45, 46, 77, 47, 48, 49, 50, 51, 53, 55,\n       56, 57, 58, 59, 61, 62, 63, 64, 89, 67, 68, 72, 92, 73, 74, 75, 78,\n       79, 84, 80, 82, 83, 85, 86, 88, 90, 93, 94, 95, 96, 98, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  5,  6,  9, 10, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25,\n       26, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 50,\n       52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 3, 1, 3, 1, 3, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1,\n       2, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 3, 1, 3, 1, 3, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1,\n       2, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (78,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-27    1\ng    2015-08-23    1\nd    2015-08-28    3\n     2015-08-27    1\nz    2015-08-26    3\n                  ..\n     2015-08-29    1\ng    2015-08-26    1\no    2015-08-23    1\nm    2015-08-28    1\nd    2015-09-01    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d9ffa0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d9f700>",
                "self.obj": "0     8.0\n1     5.0\n2     5.0\n3     4.0\n4     2.0\n     ... \n95    5.0\n96    4.0\n97    7.0\n98    0.0\n99    5.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,\n        2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  5,  5,\n        5,  5,  5,  5,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9, 10,\n       10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14,\n       15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 19, 20,\n       20, 20, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 25, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([35, 18, 69,  1, 52, 86, 98, 58,  0, 82, 14, 91,  3, 25, 73,  2, 99,\n        9, 13,  4, 94, 97, 45, 49,  5, 42, 66, 60, 67, 43, 20,  6,  7,  8,\n       57, 12, 15, 70, 90, 10, 11, 16, 96, 78, 85, 33, 17, 38, 19, 22, 65,\n       34, 21, 29, 27, 23, 32, 24, 80, 55, 76, 26, 81, 53, 63, 93, 28, 56,\n       50, 68, 75, 30, 31, 95, 71, 54, 44, 48, 40, 36, 62, 37, 39, 41, 46,\n       64, 87, 59, 89, 47, 84, 79, 77, 51, 61, 83, 72, 92, 88, 74])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 10, 17, 22, 26, 32, 38, 40, 44, 48, 50, 54, 56, 61, 66, 68, 72,\n       75, 81, 83, 84, 89, 93, 94, 95, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 4, 4, 4, 4, 6, 5, 2, 3, 4, 2, 4, 2, 5, 5, 2, 3, 3, 4, 2, 1, 4,\n       3, 1, 1, 3, 2])",
                "res": "array([4, 4, 4, 4, 6, 5, 2, 3, 4, 2, 4, 2, 5, 5, 2, 3, 3, 4, 2, 1, 4, 3,\n       1, 1, 3, 2])",
                "ri": "Index(['m', 'd', 'z', 'n', 'a', 'i', 'h', 'o', 'p', 'u', 'x', 'q', 'f', 'k',\n       'y', 'w', 'g', 'b', 's', 'j', 'r', 'v', 'e', 't', 'c', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    4\nd    4\nz    4\nn    4\na    6\ni    5\nh    2\no    3\np    4\nu    2\nx    4\nq    2\nf    5\nk    5\ny    2\nw    3\ng    3\nb    4\ns    2\nj    1\nr    4\nv    3\ne    1\nt    1\nc    3\nl    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d9f670>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d9f520>",
                "self.obj": "0      1\n1      0\n2      9\n3      9\n4      8\n      ..\n995    8\n996    1\n997    4\n998    7\n999    3\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  39,  72, 114, 154, 193, 230, 273, 312, 355, 395, 429, 463,\n       498, 545, 582, 617, 660, 695, 730, 773, 811, 852, 880, 919, 960])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10,  9, 10, 10,  9, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10,  9, 10,  9, 10, 10])",
                "res": "array([10, 10,  9, 10, 10,  9, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10,  9, 10,  9, 10, 10])",
                "ri": "Index(['d', 'g', 'n', 's', 'p', 'l', 'h', 'm', 'j', 'e', 'b', 'z', 't', 'i',\n       'x', 'w', 'u', 'a', 'q', 'o', 'y', 'r', 'c', 'k', 'f', 'v'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nd    10\ng    10\nn     9\ns    10\np    10\nl     9\nh    10\nm     9\nj    10\ne    10\nb    10\nz    10\nt    10\ni    10\nx    10\nw    10\nu    10\na    10\nq    10\no    10\ny    10\nr     9\nc    10\nk     9\nf    10\nv    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d9fbb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d9fe50>",
                "self.obj": "0      1\n1      0\n2      9\n3      9\n4      8\n      ..\n995    8\n996    1\n997    4\n998    7\n999    3\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "255",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (255,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (255,)",
                "res": "array of shape (255,)",
                "ri": "array of shape (255,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nd    2015-08-26    4\ng    2015-08-31    3\nn    2015-08-24    4\ns    2015-08-28    3\np    2015-08-27    3\n                  ..\na    2015-08-26    2\ny    2015-08-24    1\na    2015-08-27    2\nc    2015-08-23    1\np    2015-08-30    1\nName: julie, Length: 255, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d9f460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d9f7c0>",
                "self.obj": "0      1.0\n1      0.0\n2      9.0\n3      9.0\n4      8.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    3.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      1.000000e+00\n1      0.000000e+00\n2      9.000000e+00\n3      9.000000e+00\n4      8.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.000000e+00\n999    3.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  95, 137, 176, 214, 247, 285, 323, 363, 400, 430, 459, 493,\n       523, 568, 600, 633, 674, 709, 742, 785, 822, 861, 886, 923, 961])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([11, 11, 10, 10, 11,  9, 11, 10, 11, 11, 11, 11, 11, 10, 11, 10, 11,\n       11, 10, 11, 11, 10, 10, 11, 10,  9, 11])",
                "res": "array([11, 10, 10, 11,  9, 11, 10, 11, 11, 11, 11, 11, 10, 11, 10, 11, 11,\n       10, 11, 11, 10, 10, 11, 10,  9, 11])",
                "ri": "Index(['d', 'n', 's', 'p', 'l', 'h', 'm', 'j', 'e', 'b', 'g', 't', 'z', 'i',\n       'x', 'w', 'u', 'a', 'q', 'o', 'y', 'r', 'c', 'k', 'f', 'v'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nd    11\nn    10\ns    10\np    11\nl     9\nh    11\nm    10\nj    11\ne    11\nb    11\ng    11\nt    11\nz    10\ni    11\nx    10\nw    11\nu    11\na    10\nq    11\no    11\ny    10\nr    10\nc    11\nk    10\nf     9\nv    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e00ca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121e00e50>",
                "self.obj": "0       9\n1       5\n2       8\n3       6\n4       3\n       ..\n9995    8\n9996    1\n9997    4\n9998    8\n9999    7\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 352,  390,  410, ..., 9244, 9320, 9335])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  381,  783, 1201, 1593, 1978, 2390, 2779, 3165, 3525, 3897,\n       4274, 4668, 5081, 5457, 5824, 6191, 6605, 6959, 7314, 7697, 8066,\n       8476, 8861, 9238, 9600])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['g', 'i', 'w', 'm', 'f', 'u', 't', 'a', 'v', 'n', 'y', 'k', 'd', 'e',\n       'h', 'x', 'j', 'q', 'o', 'r', 'b', 's', 'p', 'z', 'c', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng    10\ni    10\nw    10\nm    10\nf    10\nu    10\nt    10\na    10\nv    10\nn    10\ny    10\nk    10\nd    10\ne    10\nh    10\nx    10\nj    10\nq    10\no    10\nr    10\nb    10\ns    10\np    10\nz    10\nc    10\nl    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e00100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121e009d0>",
                "self.obj": "0       9\n1       5\n2       8\n3       6\n4       3\n       ..\n9995    8\n9996    1\n9997    4\n9998    8\n9999    7\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 1, ..., 8, 8, 9])",
                "sorter": "array([3887, 5777, 1632, ..., 7290, 9125, 7589])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 1, ..., 0, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ng    2015-08-26    10\ni    2015-08-28    10\nw    2015-08-31    10\nm    2015-08-23    10\nf    2015-08-30    10\n                   ..\nk    2015-08-29    10\no    2015-08-28    10\nf    2015-08-27    10\nr    2015-08-31    10\nc    2015-08-30     9\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e13550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121e130d0>",
                "self.obj": "0       9.0\n1       5.0\n2       8.0\n3       6.0\n4       3.0\n       ... \n9995    8.0\n9996    1.0\n9997    4.0\n9998    8.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([ 103,  256,  273, ..., 9244, 9320, 9335])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  948, 1339, 1700, 2062, 2454, 2815, 3166, 3511, 3859, 4216,\n       4594, 4983, 5338, 5712, 6057, 6401, 6730, 7066, 7426, 7824, 8175,\n       8563, 8927, 9283, 9628])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['g', 'w', 'm', 'f', 'u', 't', 'a', 'v', 'n', 'y', 'k', 'd', 'e', 'i',\n       'h', 'x', 'q', 'o', 'r', 'j', 'b', 's', 'p', 'z', 'c', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng    11\nw    11\nm    11\nf    11\nu    11\nt    11\na    11\nv    11\nn    11\ny    11\nk    11\nd    11\ne    11\ni    11\nh    11\nx    11\nq    11\no    11\nr    11\nj    11\nb    11\ns    11\np    11\nz    11\nc    11\nl    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119da4820>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119da4190>",
                "self.obj": "0        7\n1        8\n2        5\n3        0\n4        6\n        ..\n99995    0\n99996    2\n99997    2\n99998    1\n99999    0\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  304,   331,   600, ..., 99449, 99590, 99669])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3775,  7732, 11536, 15394, 19257, 23032, 26854, 30561,\n       34435, 38283, 42227, 46038, 49868, 53736, 57568, 61491, 65277,\n       69206, 72921, 76810, 80671, 84457, 88311, 92239, 96120])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['w', 'k', 'o', 'i', 'j', 'u', 'y', 'x', 'm', 'h', 'c', 'e', 'v', 'd',\n       'b', 's', 'g', 'z', 'n', 't', 'r', 'q', 'f', 'l', 'a', 'p'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    10\nk    10\no    10\ni    10\nj    10\nu    10\ny    10\nx    10\nm    10\nh    10\nc    10\ne    10\nv    10\nd    10\nb    10\ns    10\ng    10\nz    10\nn    10\nt    10\nr    10\nq    10\nf    10\nl    10\na    10\np    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119da4190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119da4250>",
                "self.obj": "0        7\n1        8\n2        5\n3        0\n4        6\n        ..\n99995    0\n99996    2\n99997    2\n99998    1\n99999    0\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  331,  4803,  5091, ..., 98557, 98616, 99588])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-27    10\nk    2015-08-25    10\no    2015-08-27    10\ni    2015-08-29    10\nj    2015-09-01    10\n                   ..\ns    2015-08-23    10\nk    2015-08-28    10\nx    2015-08-27    10\nl    2015-08-24    10\no    2015-08-28    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c47490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c47460>",
                "self.obj": "0        7.0\n1        8.0\n2        5.0\n3        0.0\n4        6.0\n        ... \n99995    0.0\n99996    2.0\n99997    2.0\n99998    1.0\n99999    0.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([  103,   256,   273, ..., 99449, 99590, 99669])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9441, 13018, 16679, 20318, 23883, 27475, 30950, 34583,\n       38209, 41888, 45451, 49062, 52698, 56306, 59971, 63541, 67233,\n       70736, 74369, 77944, 81579, 85312, 89014, 92665, 96341])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['w', 'o', 'i', 'j', 'u', 'y', 'x', 'm', 'h', 'c', 'e', 'v', 'd', 'b',\n       's', 'g', 'z', 'n', 'r', 'q', 'f', 'k', 'l', 'a', 't', 'p'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    11\no    11\ni    11\nj    11\nu    11\ny    11\nx    11\nm    11\nh    11\nc    11\ne    11\nv    11\nd    11\nb    11\ns    11\ng    11\nz    11\nn    11\nr    11\nq    11\nf    11\nk    11\nl    11\na    11\nt    11\np    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220b7fa0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220b7d60>",
                "self.obj": "0     81\n1     45\n2     98\n3     45\n4     55\n      ..\n95    53\n96    63\n97    53\n98    58\n99    30\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,\n        3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,\n        6,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10,\n       10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13,\n       14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19,\n       19, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24])",
                "_": "25",
                "val": "array([19, 41, 43, 53, 81, 82, 16, 39, 45, 65, 86, 41, 43, 98, 45, 46, 48,\n       92,  3, 46, 53, 55, 60,  2, 12, 12, 41, 79, 92,  5, 24, 26, 31, 36,\n       95, 31, 41, 55, 66, 76, 48, 84,  3, 11, 25, 52, 56, 61,  4, 42, 51,\n       57, 90, 94, 13, 36, 59, 92, 95, 40, 43, 46, 53, 87, 30, 36, 60, 88,\n        1, 70, 20, 57, 58, 71, 81, 82, 95, 63, 66, 69, 33, 44, 77, 97, 40,\n       50, 19, 85, 10, 14, 25, 58, 21, 25, 31, 39, 47, 74, 87, 58])",
                "sorter": "array([16, 13, 20, 14,  0, 42,  7, 24,  1, 48, 92, 57, 15,  2,  3, 58, 22,\n       77,  8, 79, 97,  4, 61, 56, 41, 70,  5, 51, 46, 88, 28, 89,  6, 45,\n       33, 90, 76, 40, 59,  9, 10, 53, 11, 62, 43, 66, 31, 26, 72, 12, 65,\n       94, 25, 50, 93, 30, 71, 18, 17, 73, 80, 19, 95, 32, 99, 34, 21, 27,\n       23, 47, 69, 83, 39, 87, 29, 91, 81, 96, 35, 44, 55, 36, 37, 68, 38,\n       64, 49, 86, 82, 52, 54, 98, 63, 60, 75, 84, 78, 67, 85, 74])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  6, 11, 14, 18, 23, 29, 35, 40, 42, 48, 54, 59, 64, 68, 70, 77,\n       80, 82, 84, 86, 88, 90, 92, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 5, 3, 4, 5, 5, 6, 5, 2, 6, 6, 5, 5, 4, 2, 7, 3, 2, 2, 2, 2, 2,\n       2, 7, 1])",
                "res": "array([6, 5, 3, 4, 5, 5, 6, 5, 2, 6, 6, 5, 5, 4, 2, 7, 3, 2, 2, 2, 2, 2,\n       2, 7, 1])",
                "ri": "Index(['x', 'y', 'h', 'u', 'q', 'g', 'z', 'w', 'c', 't', 'r', 'a', 'k', 'p',\n       's', 'j', 'm', 'o', 'n', 'd', 'b', 'i', 'l', 'v', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nx    6\ny    5\nh    3\nu    4\nq    5\ng    5\nz    6\nw    5\nc    2\nt    6\nr    6\na    5\nk    5\np    4\ns    2\nj    7\nm    3\no    2\nn    2\nd    2\nb    2\ni    2\nl    2\nv    7\ne    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220b7c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220b7eb0>",
                "self.obj": "0     81\n1     45\n2     98\n3     45\n4     55\n      ..\n95    53\n96    63\n97    53\n98    58\n99    30\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  6,  6,  7,  7,  8,  9, 10,\n       10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 23,\n       23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38,\n       39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n       56, 57, 57, 57, 58, 59, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68,\n       69, 70, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])",
                "_": "83",
                "val": "array([81, 16, 45, 41, 98, 45, 92,  3, 55, 41, 24, 31, 66, 76, 48,  3, 42,\n       90, 41, 53, 43, 19, 95, 92, 40, 46, 43, 60, 46, 48,  1, 70, 39, 11,\n       61, 88, 81, 36, 56, 87, 95, 36, 66, 44, 77, 40, 58, 55, 12, 92, 82,\n       25, 69, 36, 65, 19, 94, 79, 14, 84, 25, 33,  2, 25, 60, 21, 50, 51,\n       52, 39, 47, 74, 97, 20, 71, 12, 59,  4, 58, 31, 31, 41, 46, 43, 95,\n       10, 57, 82, 87, 85,  5, 26, 86, 13, 57, 53, 63, 53, 58, 30])",
                "sorter": "array([ 0,  7,  1, 57,  2,  3, 77,  8,  4,  5, 28,  6, 59,  9, 10, 11, 12,\n       25, 13, 14, 15, 16, 17, 18, 73, 19, 20, 21, 58, 22, 23, 47, 24, 62,\n       26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 42,\n       43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 65,\n       66, 84, 78, 67, 68, 69, 87, 70, 71, 72, 74, 75, 90, 76, 79, 80, 81,\n       82, 83, 91, 85, 86, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  3,  5,  7,  9, 10, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23,\n       24, 26, 27, 28, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n       63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83,\n       84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (83,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nx    2015-08-31    1\ny    2015-08-29    2\nh    2015-08-28    2\nu    2015-08-24    2\nq    2015-08-27    2\n                  ..\nk    2015-08-27    1\nm    2015-08-29    1\nq    2015-08-25    1\nl    2015-08-28    1\np    2015-08-26    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cc03a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220b7ee0>",
                "self.obj": "0     81.0\n1     45.0\n2     98.0\n3     45.0\n4     55.0\n      ... \n95    53.0\n96    63.0\n97    53.0\n98    58.0\n99    30.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,\n        2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,\n        5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,\n        9,  9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12,\n       13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 17, 17, 18,\n       18, 19, 19, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 24])",
                "_": "25",
                "val": "array of shape (100,)",
                "sorter": "array([52, 69,  1, 35, 86, 18, 16, 13, 20, 14,  0, 42, 57, 15,  2,  3, 58,\n       22, 77,  8, 79, 97,  4, 61, 46, 56, 41, 70,  5, 51, 28, 45, 88, 89,\n        6, 33,  7, 24, 48, 92,  9, 90, 76, 40, 59, 10, 53, 26, 66, 11, 62,\n       43, 31, 65, 72, 12, 94, 25, 50, 93, 30, 71, 17, 73, 80, 19, 95, 32,\n       27, 99, 34, 21, 47, 23, 83, 39, 87, 29, 91, 81, 55, 36, 37, 68, 64,\n       38, 96, 44, 49, 54, 98, 84, 85, 63, 60, 75, 78, 67, 74, 82])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 12, 15, 19, 24, 30, 36, 40, 45, 47, 53, 59, 63, 68, 72, 74, 80,\n       82, 84, 86, 88, 89, 91, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 6, 3, 4, 5, 5, 5, 4, 5, 2, 5, 6, 4, 5, 4, 2, 6, 2, 2, 2, 2, 1,\n       2, 6, 1, 1])",
                "res": "array([6, 3, 4, 5, 5, 5, 4, 5, 2, 5, 6, 4, 5, 4, 2, 6, 2, 2, 2, 2, 1, 2,\n       6, 1, 1])",
                "ri": "Index(['x', 'h', 'u', 'q', 'g', 'z', 'y', 'w', 'c', 't', 'r', 'a', 'k', 'p',\n       's', 'j', 'o', 'n', 'd', 'm', 'b', 'l', 'v', 'e', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nx    6\nh    3\nu    4\nq    5\ng    5\nz    5\ny    4\nw    5\nc    2\nt    5\nr    6\na    4\nk    5\np    4\ns    2\nj    6\no    2\nn    2\nd    2\nm    2\nb    1\nl    2\nv    6\ne    1\ni    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cc0dc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cc0280>",
                "self.obj": "0      69\n1      11\n2      53\n3      48\n4      97\n       ..\n995    45\n996    12\n997    85\n998    62\n999     8\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  45,  83, 112, 150, 197, 236, 287, 336, 362, 398, 431, 466,\n       494, 540, 568, 616, 665, 698, 731, 760, 805, 850, 880, 923, 967])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([36, 33, 26, 35, 35, 33, 45, 39, 22, 31, 30, 29, 25, 37, 24, 39, 36,\n       31, 25, 25, 37, 38, 28, 38, 34, 26])",
                "res": "array([36, 33, 26, 35, 35, 33, 45, 39, 22, 31, 30, 29, 25, 37, 24, 39, 36,\n       31, 25, 25, 37, 38, 28, 38, 34, 26])",
                "ri": "Index(['l', 'e', 'w', 's', 'j', 't', 'a', 'h', 'v', 'c', 'f', 'i', 'x', 'b',\n       'g', 'o', 'd', 'r', 'k', 'y', 'p', 'm', 'u', 'n', 'q', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    36\ne    33\nw    26\ns    35\nj    35\nt    33\na    45\nh    39\nv    22\nc    31\nf    30\ni    29\nx    25\nb    37\ng    24\no    39\nd    36\nr    31\nk    25\ny    25\np    37\nm    38\nu    28\nn    38\nq    34\nz    26\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cc0d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cc0580>",
                "self.obj": "0      69\n1      11\n2      53\n3      48\n4      97\n       ..\n995    45\n996    12\n997    85\n998    62\n999     8\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "252",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (252,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (252,)",
                "res": "array of shape (252,)",
                "ri": "array of shape (252,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nl    2015-08-31    6\ne    2015-08-23    4\nw    2015-08-30    5\ns    2015-08-27    6\nj    2015-08-25    4\n                  ..\nz    2015-09-01    1\ng    2015-09-01    1\ny    2015-08-25    2\ng    2015-08-25    1\nf    2015-08-29    1\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cc0400>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cc0dc0>",
                "self.obj": "0      69.0\n1      11.0\n2      53.0\n3      48.0\n4      97.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    62.0\n999     8.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      6.900000e+01\n1      1.100000e+01\n2      5.300000e+01\n3      4.800000e+01\n4      9.700000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    6.200000e+01\n999    8.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59, 101, 129, 161, 205, 243, 290, 336, 362, 397, 425, 459, 486,\n       529, 556, 602, 650, 684, 717, 749, 776, 818, 861, 890, 929, 971])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([40, 32, 20, 26, 30, 29, 37, 35, 19, 28, 23, 26, 24, 30, 20, 38, 30,\n       28, 29, 21, 24, 33, 34, 24, 31, 27, 22])",
                "res": "array([32, 20, 26, 30, 29, 37, 35, 19, 28, 23, 26, 24, 30, 20, 38, 30, 28,\n       29, 21, 24, 33, 34, 24, 31, 27, 22])",
                "ri": "Index(['l', 'w', 's', 'j', 't', 'a', 'h', 'v', 'c', 'f', 'i', 'x', 'b', 'g',\n       'o', 'd', 'e', 'r', 'k', 'y', 'p', 'm', 'u', 'n', 'q', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    32\nw    20\ns    26\nj    30\nt    29\na    37\nh    35\nv    19\nc    28\nf    23\ni    26\nx    24\nb    30\ng    20\no    38\nd    30\ne    28\nr    29\nk    21\ny    24\np    33\nm    34\nu    24\nn    31\nq    27\nz    22\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d04310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d04100>",
                "self.obj": "0       29\n1       42\n2       29\n3       97\n4       85\n        ..\n9995    81\n9996    39\n9997    70\n9998    72\n9999    30\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([6378, 6500, 6667, ..., 6897, 8441, 9522])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  393,  770, 1171, 1531, 1928, 2334, 2703, 3090, 3502, 3860,\n       4253, 4657, 5063, 5413, 5802, 6189, 6560, 6957, 7354, 7733, 8096,\n       8481, 8828, 9229, 9617])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 99,  96, 100,  98, 100, 100,  97,  97,  98,  98,  99,  98,  99,\n        96,  98,  99, 100,  99,  97,  96,  97, 100,  97,  96,  99,  98])",
                "res": "array([ 99,  96, 100,  98, 100, 100,  97,  97,  98,  98,  99,  98,  99,\n        96,  98,  99, 100,  99,  97,  96,  97, 100,  97,  96,  99,  98])",
                "ri": "Index(['w', 'u', 'o', 's', 'h', 'p', 'g', 'q', 't', 'z', 'k', 'b', 'r', 'i',\n       'e', 'j', 'l', 'c', 'n', 'd', 'x', 'm', 'a', 'f', 'y', 'v'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw     99\nu     96\no    100\ns     98\nh    100\np    100\ng     97\nq     97\nt     98\nz     98\nk     99\nb     98\nr     99\ni     96\ne     98\nj     99\nl    100\nc     99\nn     97\nd     96\nx     97\nm    100\na     97\nf     96\ny     99\nv     98\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d04e20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d04f40>",
                "self.obj": "0       29\n1       42\n2       29\n3       97\n4       85\n        ..\n9995    81\n9996    39\n9997    70\n9998    72\n9999    30\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  0,  3, ..., 94, 94, 99])",
                "sorter": "array([6500, 8563, 1596, ..., 5526, 8666, 7370])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 1, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-29    37\nu    2015-08-25    28\no    2015-08-27    33\ns    2015-09-01    32\nh    2015-08-26    32\n                   ..\nt    2015-08-23    35\ny    2015-08-31    30\ng    2015-08-26    13\na    2015-08-31    26\nk    2015-08-30    26\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0c940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0cb80>",
                "self.obj": "0       29.0\n1       42.0\n2       29.0\n3       97.0\n4       85.0\n        ... \n9995    81.0\n9996    39.0\n9997    70.0\n9998    72.0\n9999    30.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([ 103,  256,  273, ..., 6295, 8343, 8555])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  960, 1342, 1674, 2046, 2431, 2784, 3153, 3530, 3868, 4241,\n       4618, 4998, 5325, 5694, 6041, 6413, 6780, 7138, 7482, 7848, 8175,\n       8554, 8904, 9277, 9635])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100,  98,  99,  95,  99, 100,  93,  93,  96,  96,  96,  97,  97,\n        95,  96,  97, 100,  96,  95,  94,  99,  96,  96,  97,  98,  95,\n        98])",
                "res": "array([ 98,  99,  95,  99, 100,  93,  93,  96,  96,  96,  97,  97,  95,\n        96,  97, 100,  96,  95,  94,  99,  96,  96,  97,  98,  95,  98])",
                "ri": "Index(['w', 'o', 's', 'h', 'p', 'g', 'q', 't', 'z', 'k', 'b', 'r', 'i', 'j',\n       'l', 'c', 'n', 'd', 'x', 'm', 'a', 'f', 'u', 'y', 'v', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw     98\no     99\ns     95\nh     99\np    100\ng     93\nq     93\nt     96\nz     96\nk     96\nb     97\nr     97\ni     95\nj     96\nl     97\nc    100\nn     96\nd     95\nx     94\nm     99\na     96\nf     96\nu     97\ny     98\nv     95\ne     98\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cf9190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cf9730>",
                "self.obj": "0        77\n1        46\n2        98\n3        78\n4        19\n         ..\n99995     6\n99996    39\n99997    73\n99998    95\n99999    28\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 4621,  4648,  5765, ..., 90329, 95023, 96542])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3850,  7693, 11558, 15433, 19180, 22968, 26814, 30659,\n       34484, 38287, 42036, 45914, 49809, 53681, 57579, 61327, 65103,\n       68982, 72842, 76813, 80680, 84577, 88478, 92275, 96153])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['o', 'u', 'i', 'b', 'x', 'g', 'c', 't', 'm', 'j', 'r', 'f', 'p', 'q',\n       's', 'h', 'v', 'd', 'w', 'k', 'e', 'y', 'z', 'n', 'a', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    100\nu    100\ni    100\nb    100\nx    100\ng    100\nc    100\nt    100\nm    100\nj    100\nr    100\nf    100\np    100\nq    100\ns    100\nh    100\nv    100\nd    100\nw    100\nk    100\ne    100\ny    100\nz    100\nn    100\na    100\nl    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cf98e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cf9a60>",
                "self.obj": "0        77\n1        46\n2        98\n3        78\n4        19\n         ..\n99995     6\n99996    39\n99997    73\n99998    95\n99999    28\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 4648, 19764, 56007, ..., 67961, 86062, 94738])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \no    2015-08-31     97\nu    2015-08-27     98\ni    2015-08-27    100\nb    2015-09-01     99\nx    2015-08-24     97\n                  ... \nd    2015-08-29     96\np    2015-08-29     96\nm    2015-08-24     97\nr    2015-08-30     97\ni    2015-08-23     98\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cf9220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cf9f40>",
                "self.obj": "0        77.0\n1        46.0\n2        98.0\n3        78.0\n4        19.0\n         ... \n99995     6.0\n99996    39.0\n99997    73.0\n99998    95.0\n99999    28.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([  103,   256,   273, ..., 90337, 93844, 95101])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9491, 13106, 16747, 20271, 23825, 27448, 31060, 34650,\n       38258, 41775, 45427, 49106, 52748, 56400, 59930, 63488, 67144,\n       70814, 74464, 78207, 81840, 85483, 89157, 92747, 96370])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['o', 'i', 'b', 'x', 'g', 'c', 't', 'm', 'j', 'r', 'f', 'p', 'u', 's',\n       'h', 'v', 'q', 'd', 'w', 'k', 'e', 'y', 'z', 'n', 'l', 'a'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    101\ni    101\nb    101\nx    101\ng    101\nc    101\nt    101\nm    101\nj    101\nr    101\nf    101\np    101\nu    101\ns    101\nh    101\nv    101\nq    101\nd    101\nw    101\nk    101\ne    101\ny    101\nz    101\nn    101\nl    101\na    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220078e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x122007d60>",
                "self.obj": "0      99\n1     307\n2     892\n3     316\n4     718\n     ... \n95    829\n96    928\n97    678\n98    636\n99    577\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,\n        2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  4,  4,  5,  5,  5,  5,\n        6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,\n        9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14,\n       15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19,\n       19, 19, 19, 19, 20, 21, 21, 22, 22, 22, 23, 24, 24, 24, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([57, 35,  0,  3, 82, 68, 96, 51, 17,  1, 60, 54, 61, 12, 52, 85, 26,\n        5, 34,  4, 94,  2,  6, 84, 56, 38, 71, 86,  7, 83, 73, 98, 27,  8,\n        9, 25, 53, 10, 32, 24, 33, 95, 43, 93, 11, 62, 55, 92, 75, 13, 99,\n       46, 48, 15, 29, 14, 63, 69, 16, 37, 18, 65, 77, 67, 89, 19, 97, 20,\n       21, 80, 30, 88, 49, 22, 70, 47, 79, 81, 36, 23, 28, 58, 91, 44, 87,\n       64, 41, 31, 45, 39, 78, 40, 90, 66, 42, 50, 72, 59, 76, 74])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  8, 15, 22, 28, 30, 34, 36, 44, 48, 52, 56, 60, 64, 67, 68, 71,\n       77, 80, 83, 89, 90, 92, 95, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([8, 7, 7, 6, 2, 4, 2, 8, 4, 4, 4, 4, 4, 3, 1, 3, 6, 3, 3, 6, 1, 2,\n       3, 1, 3, 1])",
                "res": "array([8, 7, 7, 6, 2, 4, 2, 8, 4, 4, 4, 4, 4, 3, 1, 3, 6, 3, 3, 6, 1, 2,\n       3, 1, 3, 1])",
                "ri": "Index(['c', 'm', 'g', 'j', 'p', 'r', 's', 'n', 'a', 'd', 'i', 'z', 'x', 'q',\n       'y', 'f', 't', 'u', 'h', 'k', 'o', 'l', 'w', 'b', 'v', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nc    8\nm    7\ng    7\nj    6\np    2\nr    4\ns    2\nn    8\na    4\nd    4\ni    4\nz    4\nx    4\nq    3\ny    1\nf    3\nt    6\nu    3\nh    3\nk    6\no    1\nl    2\nw    3\nb    1\nv    3\ne    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x122007070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x122007970>",
                "self.obj": "0      99\n1     307\n2     892\n3     316\n4     718\n     ... \n95    829\n96    928\n97    678\n98    636\n99    577\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  1,  2,  2,  3,  3,  4,  5,  6,  7,  7,  8,  9, 10, 11, 11,\n       11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 21, 22, 23, 24,\n       25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34, 34, 34, 35, 36, 37, 38,\n       39, 40, 40, 40, 41, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 58, 59, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])",
                "_": "83",
                "val": "array of shape (100,)",
                "sorter": "array([ 0,  1, 54,  5,  2,  3, 68,  4,  6,  7, 73,  8,  9, 10, 11, 60, 61,\n       12, 13, 14, 15, 16, 37, 17, 18, 19, 20, 21, 80, 88, 22, 23, 24, 25,\n       26, 27, 28, 29, 30, 31, 32, 33, 85, 34, 35, 82, 96, 36, 38, 39, 40,\n       41, 90, 66, 42, 53, 95, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55,\n       56, 57, 58, 59, 62, 63, 64, 65, 67, 69, 70, 71, 72, 74, 75, 76, 77,\n       78, 79, 81, 83, 84, 86, 87, 89, 91, 92, 93, 94, 97, 98, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  3,  5,  7,  8,  9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 23,\n       24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n       44, 47, 48, 49, 50, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 3, 3, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 3, 3, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (83,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nc    2015-08-24    1\nm    2015-08-27    2\ng    2015-08-25    2\nc    2015-08-31    2\ng    2015-08-30    1\n                  ..\nn    2015-08-29    1\ng    2015-08-24    1\nq    2015-08-28    1\nr    2015-09-01    1\nd    2015-08-24    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220079a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220076a0>",
                "self.obj": "0      99.0\n1     307.0\n2     892.0\n3     316.0\n4     718.0\n      ...  \n95    829.0\n96    928.0\n97    678.0\n98    636.0\n99    577.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,\n        6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  9,\n        9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 14, 14, 14,\n       15, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 18,\n       18, 19, 20, 20, 21, 21, 21, 22, 23, 23, 23, 24, 24, 24, 25])",
                "_": "26",
                "val": "array of shape (100,)",
                "sorter": "array([35, 18,  1, 69, 86, 52, 57,  0,  3, 82, 68, 96, 51, 26, 85,  5, 34,\n        4, 94,  2, 84,  6, 56, 38, 71,  7, 83,  8, 27, 73, 98,  9, 25, 53,\n       10, 32, 24, 33, 95, 43, 93, 11, 62, 55, 92, 17, 60, 54, 61, 12, 46,\n       75, 13, 99, 48, 15, 29, 14, 63, 16, 37, 89, 19, 97, 20, 21, 80, 30,\n       47, 88, 49, 22, 70, 79, 81, 36, 23, 28, 58, 91, 45, 64, 44, 87, 41,\n       31, 39, 78, 40, 66, 90, 42, 50, 72, 59, 76, 65, 77, 67, 74])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 13, 20, 25, 27, 31, 33, 41, 45, 50, 54, 58, 61, 64, 65, 68, 74,\n       77, 80, 86, 87, 89, 92, 93, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 7, 6, 5, 1, 3, 2, 8, 4, 5, 4, 4, 3, 3, 1, 3, 6, 3, 3, 5, 1, 2,\n       3, 1, 3, 3, 1])",
                "res": "array([7, 6, 5, 1, 3, 2, 8, 4, 5, 4, 4, 3, 3, 1, 3, 6, 3, 3, 5, 1, 2, 3,\n       1, 3, 3, 1])",
                "ri": "Index(['c', 'g', 'j', 'p', 'r', 's', 'n', 'a', 'm', 'd', 'i', 'z', 'q', 'y',\n       'f', 't', 'u', 'h', 'k', 'o', 'l', 'w', 'b', 'v', 'x', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nc    7\ng    6\nj    5\np    1\nr    3\ns    2\nn    8\na    4\nm    5\nd    4\ni    4\nz    3\nq    3\ny    1\nf    3\nt    6\nu    3\nh    3\nk    5\no    1\nl    2\nw    3\nb    1\nv    3\nx    3\ne    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d51190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d511f0>",
                "self.obj": "0      641\n1      216\n2        2\n3      871\n4       49\n      ... \n995    657\n996    482\n997    626\n998    291\n999    724\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  40,  88, 126, 164, 208, 235, 281, 315, 355, 384, 430, 466,\n       499, 532, 565, 594, 624, 675, 718, 756, 787, 829, 870, 915, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([38, 48, 37, 37, 44, 27, 46, 34, 39, 29, 45, 36, 33, 32, 32, 29, 28,\n       47, 43, 38, 30, 42, 39, 43, 52, 31])",
                "res": "array([38, 48, 37, 37, 44, 27, 46, 34, 39, 29, 45, 36, 33, 32, 32, 29, 28,\n       47, 43, 38, 30, 42, 39, 43, 52, 31])",
                "ri": "Index(['p', 'f', 'o', 's', 'v', 'u', 'w', 'q', 'k', 'j', 'i', 'a', 'n', 'z',\n       'h', 'c', 'r', 'l', 'b', 't', 'g', 'e', 'm', 'd', 'y', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\np    38\nf    48\no    37\ns    37\nv    44\nu    27\nw    46\nq    34\nk    39\nj    29\ni    45\na    36\nn    33\nz    32\nh    32\nc    29\nr    28\nl    47\nb    43\nt    38\ng    30\ne    42\nm    39\nd    43\ny    52\nx    31\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d51970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d51e80>",
                "self.obj": "0      641\n1      216\n2        2\n3      871\n4       49\n      ... \n995    657\n996    482\n997    626\n998    291\n999    724\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "256",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (256,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (256,)",
                "res": "array of shape (256,)",
                "ri": "array of shape (256,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \np    2015-08-24    7\nf    2015-08-26    7\no    2015-08-23    5\ns    2015-08-29    5\nv    2015-08-27    8\n                  ..\nw    2015-09-01    3\na    2015-08-31    1\nv    2015-08-31    3\nr    2015-08-23    1\np    2015-08-29    1\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220071f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x122007190>",
                "self.obj": "0      641.0\n1      216.0\n2        2.0\n3      871.0\n4       49.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    291.0\n999    724.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      6.410000e+02\n1      2.160000e+02\n2      2.000000e+00\n3      8.710000e+02\n4      4.900000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    2.910000e+02\n999    7.240000e+02\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  93, 128, 164, 208, 234, 277, 309, 345, 373, 417, 451, 482,\n       515, 547, 575, 604, 655, 691, 726, 754, 792, 831, 875, 919, 969])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([51, 28, 30, 32, 35, 24, 39, 28, 34, 24, 37, 33, 27, 27, 29, 23, 22,\n       42, 27, 31, 23, 34, 31, 35, 39, 45, 25])",
                "res": "array([28, 30, 32, 35, 24, 39, 28, 34, 24, 37, 33, 27, 27, 29, 23, 22, 42,\n       27, 31, 23, 34, 31, 35, 39, 45, 25])",
                "ri": "Index(['p', 'o', 's', 'v', 'u', 'w', 'q', 'k', 'j', 'i', 'a', 'n', 'z', 'h',\n       'c', 'r', 'l', 'b', 't', 'g', 'e', 'm', 'd', 'f', 'y', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\np    28\no    30\ns    32\nv    35\nu    24\nw    39\nq    28\nk    34\nj    24\ni    37\na    33\nn    27\nz    27\nh    29\nc    23\nr    22\nl    42\nb    27\nt    31\ng    23\ne    34\nm    31\nd    35\nf    39\ny    45\nx    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dff220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dff850>",
                "self.obj": "0       488\n1       633\n2        25\n3       234\n4       763\n       ... \n9995    993\n9996    534\n9997    971\n9998    143\n9999    731\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  4,   5,  10, ..., 994, 997, 998])",
                "sorter": "array([4348, 3858, 6760, ..., 7288, 9740, 3412])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  366,  778, 1142, 1559, 1964, 2363, 2751, 3137, 3536, 3953,\n       4317, 4678, 5065, 5445, 5870, 6266, 6643, 7019, 7374, 7726, 8103,\n       8492, 8851, 9244, 9631])",
                "inc": "array([1, 1, 1, ..., 0, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([309, 331, 301, 345, 345, 334, 316, 320, 331, 348, 309, 301, 317,\n       319, 350, 332, 312, 324, 293, 297, 301, 324, 296, 320, 317, 308])",
                "res": "array([309, 331, 301, 345, 345, 334, 316, 320, 331, 348, 309, 301, 317,\n       319, 350, 332, 312, 324, 293, 297, 301, 324, 296, 320, 317, 308])",
                "ri": "Index(['e', 'q', 'j', 'h', 'c', 'a', 'd', 'm', 'w', 'i', 'r', 'z', 's', 'f',\n       'p', 'b', 'n', 'u', 'y', 't', 'k', 'o', 'g', 'x', 'v', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ne    309\nq    331\nj    301\nh    345\nc    345\na    334\nd    316\nm    320\nw    331\ni    348\nr    309\nz    301\ns    317\nf    319\np    350\nb    332\nn    312\nu    324\ny    293\nt    297\nk    301\no    324\ng    296\nx    320\nv    317\nl    308\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dff820>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dff6d0>",
                "self.obj": "0       488\n1       633\n2        25\n3       234\n4       763\n       ... \n9995    993\n9996    534\n9997    971\n9998    143\n9999    731\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 23,  33,  35, ..., 934, 974, 982])",
                "sorter": "array([4157, 8303, 6293, ..., 7897, 8963, 4035])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ne    2015-09-01    40\nq    2015-08-26    38\nj    2015-08-25    35\nh    2015-09-01    38\nc    2015-08-28    41\n                   ..\ny    2015-08-30    35\np    2015-08-24    44\nw    2015-08-24    44\nu    2015-08-25    26\nt    2015-08-30    27\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dff940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dff430>",
                "self.obj": "0       488.0\n1       633.0\n2        25.0\n3       234.0\n4       763.0\n        ...  \n9995    993.0\n9996    534.0\n9997    971.0\n9998    143.0\n9999    731.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.94000000e+02,  9.97000000e+02,  9.98000000e+02])",
                "sorter": "array([ 103,  256,  273, ..., 7288, 9740, 3412])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  932, 1267, 1661, 2045, 2422, 2788, 3148, 3529, 3917, 4312,\n       4655, 4998, 5363, 5715, 6119, 6473, 6823, 7151, 7489, 7843, 8217,\n       8556, 8923, 9297, 9658])",
                "inc": "array([1, 0, 0, ..., 0, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([402, 250, 257, 286, 293, 263, 256, 267, 274, 284, 283, 260, 250,\n       263, 264, 287, 260, 259, 232, 244, 246, 270, 242, 256, 260, 265,\n       247])",
                "res": "array([250, 257, 286, 293, 263, 256, 267, 274, 284, 283, 260, 250, 263,\n       264, 287, 260, 259, 232, 244, 246, 270, 242, 256, 260, 265, 247])",
                "ri": "Index(['e', 'j', 'h', 'c', 'a', 'd', 'm', 'w', 'q', 'i', 'r', 'z', 's', 'f',\n       'p', 'n', 'u', 'y', 't', 'k', 'o', 'g', 'x', 'b', 'v', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ne    250\nj    257\nh    286\nc    293\na    263\nd    256\nm    267\nw    274\nq    284\ni    283\nr    260\nz    250\ns    263\nf    264\np    287\nn    260\nu    259\ny    232\nt    244\nk    246\no    270\ng    242\nx    256\nb    260\nv    265\nl    247\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121fc4c70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121fc41f0>",
                "self.obj": "0        110\n1         87\n2        109\n3        345\n4        211\n        ... \n99995    118\n99996    364\n99997    831\n99998    789\n99999    153\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([ 6252, 57318, 70470, ..., 32828, 59865, 76474])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3786,  7589, 11522, 15450, 19263, 23040, 26845, 30790,\n       34688, 38471, 42369, 46343, 50173, 53955, 57770, 61585, 65412,\n       69328, 73076, 76942, 80804, 84608, 88490, 92346, 96195])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([971, 978, 984, 972, 979, 983, 978, 983, 982, 972, 983, 981, 972,\n       977, 982, 974, 974, 977, 970, 978, 974, 978, 978, 975, 978, 982])",
                "res": "array([971, 978, 984, 972, 979, 983, 978, 983, 982, 972, 983, 981, 972,\n       977, 982, 974, 974, 977, 970, 978, 974, 978, 978, 975, 978, 982])",
                "ri": "Index(['s', 'p', 'f', 'c', 'd', 'a', 'u', 'g', 'i', 'q', 'v', 'b', 'r', 'k',\n       'w', 'n', 'l', 'x', 'o', 'z', 'y', 'j', 'm', 'h', 't', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ns    971\np    978\nf    984\nc    972\nd    979\na    983\nu    978\ng    983\ni    982\nq    972\nv    983\nb    981\nr    972\nk    977\nw    982\nn    974\nl    974\nx    977\no    970\nz    978\ny    974\nj    978\nm    978\nh    975\nt    978\ne    982\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121fc43d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121fc40a0>",
                "self.obj": "0        110\n1         87\n2        109\n3        345\n4        211\n        ... \n99995    118\n99996    364\n99997    831\n99998    789\n99999    153\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  1,   2,   4, ..., 997, 997, 998])",
                "sorter": "array([24923,  2697, 21910, ..., 43145, 67367,  7716])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 0, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ns    2015-08-31    323\np    2015-08-23    302\nf    2015-08-31    318\nc    2015-08-31    312\nd    2015-08-29    319\n                  ... \nk    2015-08-23    307\nr    2015-08-24    319\nj    2015-08-24    302\nd    2015-08-30    311\ni    2015-08-26    308\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121fc4370>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121fc4c40>",
                "self.obj": "0        110.0\n1         87.0\n2        109.0\n3        345.0\n4        211.0\n         ...  \n99995    118.0\n99996    364.0\n99997    831.0\n99998    789.0\n99999    153.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])",
                "sorter": "array([  103,   256,   273, ...,  6452, 59865, 76474])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9463, 13146, 16864, 20458, 23998, 27554, 31277, 34969,\n       38540, 42211, 45956, 49568, 53140, 56738, 60290, 63922, 67609,\n       71196, 74744, 78371, 81984, 85546, 89191, 92815, 96441])",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([994, 935, 963, 950, 965, 958, 944, 967, 959, 953, 958, 962, 954,\n       946, 956, 947, 951, 950, 954, 937, 954, 941, 948, 958, 951, 957,\n       963])",
                "res": "array([935, 963, 950, 965, 958, 944, 967, 959, 953, 958, 962, 954, 946,\n       956, 947, 951, 950, 954, 937, 954, 941, 948, 958, 951, 957, 963])",
                "ri": "Index(['s', 'f', 'c', 'd', 'a', 'u', 'g', 'i', 'q', 'v', 'b', 'r', 'k', 'w',\n       'n', 'l', 'x', 'p', 'o', 'z', 'y', 'j', 'm', 'h', 't', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ns    935\nf    963\nc    950\nd    965\na    958\nu    944\ng    967\ni    959\nq    953\nv    958\nb    962\nr    954\nk    946\nw    956\nn    947\nl    951\nx    950\np    954\no    937\nz    954\ny    941\nj    948\nm    958\nh    951\nt    957\ne    963\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cdff10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cdf370>",
                "self.obj": "0     9\n1     5\n2     6\n3     3\n4     2\n     ..\n95    7\n96    8\n97    2\n98    9\n99    8\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,\n        3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n        6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,\n        9, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\n       14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 18, 18, 18,\n       18, 18, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24])",
                "_": "25",
                "val": "array([2, 5, 7, 2, 3, 5, 5, 8, 3, 3, 5, 6, 6, 7, 1, 1, 2, 3, 4, 6, 8, 0,\n       4, 6, 8, 0, 0, 1, 2, 2, 3, 5, 7, 8, 1, 1, 2, 2, 3, 9, 0, 2, 3, 5,\n       7, 7, 2, 6, 1, 3, 6, 8, 1, 3, 4, 6, 8, 8, 9, 2, 3, 3, 5, 7, 2, 2,\n       7, 2, 4, 5, 9, 1, 8, 9, 4, 5, 6, 8, 9, 9, 0, 3, 2, 2, 6, 7, 8, 0,\n       0, 1, 4, 5, 8, 3, 4, 6, 6, 0, 3, 6])",
                "sorter": "array([18, 84, 90, 48, 23, 19, 69, 78, 52, 89, 92, 34, 73, 95, 66, 71, 83,\n        3, 56,  2, 31, 62, 76, 28, 37, 15, 39, 59, 47, 88, 16, 41,  6, 80,\n       22, 55,  4, 74, 29, 36, 70, 63, 44, 64, 77, 81, 24, 91, 67, 43, 75,\n       96, 33, 58,  5, 30, 53, 99, 13, 85, 11, 14, 82, 27, 54, 97, 93, 21,\n       68, 65,  0, 61, 20,  9, 72,  1, 26, 32, 42, 98, 35, 51, 10, 79, 38,\n       17, 57, 46, 94, 40, 50, 45, 86,  7, 12, 60, 25, 87, 49,  8])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  3,  8, 14, 21, 25, 34, 40, 46, 48, 52, 54, 59, 64, 67, 71, 74,\n       80, 82, 87, 88, 92, 93, 96, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([3, 4, 4, 6, 4, 7, 4, 5, 2, 4, 2, 4, 4, 2, 4, 3, 5, 2, 4, 1, 4, 1,\n       3, 1, 3])",
                "res": "array([3, 4, 4, 6, 4, 7, 4, 5, 2, 4, 2, 4, 4, 2, 4, 3, 5, 2, 4, 1, 4, 1,\n       3, 1, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    4\nc    4\nd    6\ne    4\nf    7\ng    4\nh    5\ni    2\nj    4\nk    2\nl    4\nm    4\nn    2\no    4\np    3\nq    5\nr    2\nt    4\nu    1\nv    4\nw    1\nx    3\ny    1\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cdf8e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cdfb80>",
                "self.obj": "0     9\n1     5\n2     6\n3     3\n4     2\n     ..\n95    7\n96    8\n97    2\n98    9\n99    8\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 13, 13,\n       14, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 23, 24,\n       25, 26, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 38,\n       39, 40, 41, 42, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 53, 54,\n       54, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 81, 82])",
                "_": "83",
                "val": "array([2, 5, 7, 8, 2, 5, 3, 5, 5, 6, 7, 3, 6, 3, 2, 4, 6, 1, 8, 1, 3, 4,\n       8, 6, 0, 0, 3, 2, 2, 7, 8, 0, 1, 5, 1, 1, 2, 2, 9, 3, 0, 3, 2, 7,\n       5, 7, 6, 2, 1, 3, 6, 8, 3, 1, 9, 4, 8, 8, 6, 3, 5, 3, 7, 2, 2, 7,\n       2, 2, 9, 4, 5, 8, 9, 1, 9, 4, 8, 6, 5, 9, 3, 0, 7, 2, 2, 8, 6, 0,\n       1, 5, 4, 0, 8, 6, 3, 4, 6, 3, 6, 0])",
                "sorter": "array([18, 84, 90, 78, 48, 69, 23, 19, 92, 73, 95, 89, 34, 52, 83, 56,  2,\n       66, 31, 71,  3, 76, 37, 28, 62, 39, 16, 88, 47,  6, 80, 15, 59, 41,\n       55, 22, 74,  4, 36, 29, 70, 44, 63, 77, 64, 81, 91, 24, 67, 43, 75,\n       96, 58, 33, 13,  5, 99, 53, 30, 14, 82, 11, 27, 85, 97, 93, 54, 21,\n        0, 68, 65, 20,  9, 61, 98, 72, 32, 26,  1, 42, 51, 35, 17, 79, 10,\n       57, 38, 46, 40, 45, 50, 94, 86, 60,  7, 12, 25, 49,  8, 87])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  3,  4,  6,  7,  8,  9, 10, 11, 12, 13, 14, 17, 19, 20,\n       21, 23, 24, 25, 27, 28, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44,\n       45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63,\n       64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 2, 1, 1, 2, 1,\n       3, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "res": "array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 2, 1, 1, 2, 1,\n       3, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (83,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-25    1\n     2015-08-28    1\n     2015-09-01    1\nb    2015-08-26    1\n     2015-08-28    2\n                  ..\nx    2015-08-28    1\n     2015-08-31    1\ny    2015-08-31    1\nz    2015-08-24    2\n     2015-09-01    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119dffb20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119dff220>",
                "self.obj": "0     9.0\n1     5.0\n2     6.0\n3     3.0\n4     2.0\n     ... \n95    7.0\n96    8.0\n97    2.0\n98    9.0\n99    8.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,\n        3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,\n        5,  5,  5,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,\n        9,  9,  9,  9, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13,\n       13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18,\n       18, 18, 18, 19, 20, 20, 20, 20, 21, 21, 21, 22, 23, 23, 23])",
                "_": "24",
                "val": "array of shape (100,)",
                "sorter": "array([35, 18, 52,  1, 69, 86, 84, 90, 48, 23, 19, 78, 89, 92, 34, 73, 95,\n       66, 83, 71,  3, 56,  2, 31, 28, 62, 76, 37, 47, 15, 39, 59, 88, 16,\n       41,  6, 80, 22, 55,  4, 74, 29, 36, 64, 70, 63, 44, 77, 81, 24, 91,\n       67, 43, 75, 96, 33, 58,  5, 30, 53, 99, 13, 27, 85, 11, 14, 82, 54,\n       97, 93, 65, 21, 68,  0,  9, 61, 20, 26, 72, 32, 42, 98, 51, 10, 79,\n       38, 17, 57, 46, 45, 94, 40, 50,  7, 12, 60, 25,  8, 87, 49])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  8, 12, 17, 24, 28, 37, 43, 49, 51, 55, 57, 62, 67, 70, 74, 77,\n       82, 83, 88, 89, 93, 96, 97])",
                "inc": "array([1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 2, 4, 4, 6, 4, 8, 4, 5, 2, 4, 2, 4, 3, 2, 4, 3, 4, 1, 4, 1, 4,\n       3, 1, 3])",
                "res": "array([2, 4, 4, 6, 4, 8, 4, 5, 2, 4, 2, 4, 3, 2, 4, 3, 4, 1, 4, 1, 4, 3,\n       1, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    4\nc    4\nd    6\ne    4\nf    8\ng    4\nh    5\ni    2\nj    4\nk    2\nl    4\nm    3\nn    2\no    4\np    3\nq    4\nr    1\nt    4\nu    1\nv    4\nx    3\ny    1\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ffe250>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121ffe4c0>",
                "self.obj": "0      9\n1      6\n2      6\n3      1\n4      8\n      ..\n995    8\n996    6\n997    5\n998    7\n999    6\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  33,  80, 133, 168, 199, 232, 270, 305, 342, 388, 418, 451,\n       487, 532, 566, 608, 654, 692, 732, 768, 815, 850, 881, 916, 957])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10, 10, 10, 10, 10,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10, 10, 10,  9, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10, 10, 10,  9, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng     9\nh     9\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr     9\ns    10\nt    10\nu    10\nv    10\nw    10\nx     9\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121ffe1c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121ffe130>",
                "self.obj": "0      9\n1      6\n2      6\n3      1\n4      8\n      ..\n995    8\n996    6\n997    5\n998    7\n999    6\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "251",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (251,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (251,)",
                "res": "array of shape (251,)",
                "ri": "array of shape (251,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    4\n     2015-08-24    4\n     2015-08-25    1\n     2015-08-26    2\n     2015-08-27    3\n                  ..\nz    2015-08-28    3\n     2015-08-29    1\n     2015-08-30    4\n     2015-08-31    5\n     2015-09-01    6\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220b4b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1220b4f70>",
                "self.obj": "0      9.0\n1      6.0\n2      6.0\n3      1.0\n4      8.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    6.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      9.000000e+00\n1      6.000000e+00\n2      6.000000e+00\n3      1.000000e+00\n4      8.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.000000e+00\n999    6.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  92, 139, 191, 224, 255, 284, 315, 349, 383, 425, 454, 484,\n       518, 561, 593, 633, 677, 710, 747, 781, 824, 859, 888, 920, 959])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11,\n       10, 10, 11, 11, 10, 10,  7, 10, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10,\n       10, 11, 11, 10, 10,  7, 10, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    10\nh    10\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    10\nr    10\ns    11\nt    11\nu    10\nv    10\nw     7\nx    10\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d4a0d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d4af10>",
                "self.obj": "0       5\n1       1\n2       3\n3       6\n4       2\n       ..\n9995    9\n9996    2\n9997    1\n9998    8\n9999    3\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([1203, 1559, 2102, ..., 9630, 9682, 9683])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  346,  724, 1094, 1486, 1844, 2233, 2634, 3031, 3384, 3752,\n       4172, 4583, 4976, 5360, 5725, 6107, 6461, 6871, 7250, 7634, 8010,\n       8403, 8791, 9172, 9568])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d4a610>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d4a760>",
                "self.obj": "0       5\n1       1\n2       3\n3       6\n4       2\n       ..\n9995    9\n9996    2\n9997    1\n9998    8\n9999    3\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([2522, 3033, 5518, ..., 2728, 8669, 8795])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24     9\n     2015-08-25    10\n     2015-08-26     8\n     2015-08-27     9\n                   ..\nz    2015-08-28     9\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d4a6d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d4adc0>",
                "self.obj": "0       5.0\n1       1.0\n2       3.0\n3       6.0\n4       2.0\n       ... \n9995    9.0\n9996    2.0\n9997    1.0\n9998    8.0\n9999    3.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([ 103,  256,  273, ..., 9630, 9682, 9683])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  908, 1261, 1607, 1977, 2310, 2680, 3058, 3421, 3754, 4098,\n       4498, 4884, 5251, 5618, 5961, 6323, 6657, 7042, 7401, 7761, 8112,\n       8488, 8850, 9206, 9590])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cdfa00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cdfd60>",
                "self.obj": "0        4\n1        2\n2        6\n3        4\n4        5\n        ..\n99995    8\n99996    2\n99997    3\n99998    7\n99999    8\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  226,   235,   328, ..., 99223, 99345, 99570])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3954,  7814, 11691, 15588, 19389, 23293, 27107, 30896,\n       34763, 38514, 42439, 46318, 50009, 53884, 57775, 61670, 65416,\n       69366, 73141, 76952, 80799, 84688, 88501, 92317, 96132])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cdf700>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cdff10>",
                "self.obj": "0        4\n1        2\n2        6\n3        4\n4        5\n        ..\n99995    8\n99996    2\n99997    3\n99998    7\n99999    8\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 3793,  6379,  7788, ..., 94273, 95126, 98445])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cdf700>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cdf370>",
                "self.obj": "0        4.0\n1        2.0\n2        6.0\n3        4.0\n4        5.0\n        ... \n99995    8.0\n99996    2.0\n99997    3.0\n99998    7.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([  103,   256,   273, ..., 99067, 99223, 99345])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9595, 13237, 16913, 20548, 24149, 27843, 31450, 35015,\n       38662, 42208, 45932, 49540, 53009, 56649, 60298, 63947, 67460,\n       71189, 74746, 78328, 81952, 85619, 89215, 92799, 96380])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c8e2e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c8ed30>",
                "self.obj": "0     65\n1      7\n2     34\n3      7\n4     62\n      ..\n95    97\n96    18\n97    66\n98    79\n99    85\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  4,  4,  4,  4,  4,  5,\n        6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,\n        8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12,\n       12, 12, 12, 12, 12, 13, 13, 14, 15, 15, 16, 16, 16, 16, 16, 16, 17,\n       17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21,\n       21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "25",
                "val": "array([77, 46, 51, 65, 10, 11, 29, 34, 36, 69, 86, 12, 31, 83, 90, 94,  9,\n        7, 31, 33, 66,  5,  6,  9, 12, 16, 29, 63,  9, 15, 23, 32, 34, 43,\n       47, 65, 77, 94,  8, 68, 83,  8, 15, 18, 85,  2,  6,  7, 37, 40, 13,\n       14, 30, 30, 58, 62, 13, 18,  2, 45, 86,  2, 19, 51, 58, 67, 68, 11,\n       66, 26, 52, 54, 79, 24, 38, 45, 46, 60, 71, 85, 92, 27, 51, 87,  7,\n       50, 80, 93, 34, 53, 73, 34, 68, 76, 77, 78,  7, 84, 95, 97])",
                "sorter": "array([72, 10,  7,  0, 77, 13, 29, 19, 55, 52, 60, 50, 92, 89, 17, 91, 65,\n       39, 38, 82, 75, 49, 47, 63, 79, 18, 94, 24, 68, 48, 56, 62, 90, 27,\n       41, 85, 36, 45, 22, 76, 66,  9, 23, 93, 99, 57, 25,  3, 35, 26, 33,\n       16, 40, 61, 46,  4, 71, 96,  5, 73, 11, 32, 34, 84, 21, 44, 87, 69,\n       97, 67, 28, 14, 98, 37,  8, 15, 74, 64, 53, 51, 30, 58,  6, 54,  1,\n       80, 43, 70, 83, 42, 20,  2, 86, 12, 81, 31, 78, 88, 59, 95])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  4, 10, 11, 16, 17, 21, 28, 38, 41, 45, 50, 56, 58, 59, 61,\n       67, 69, 73, 81, 84, 88, 91, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([ 1,  3,  6,  1,  5,  1,  4,  7, 10,  3,  4,  5,  5,  2,  1,  2,  6,\n        2,  4,  8,  3,  4,  3,  5,  4])",
                "res": "array([ 1,  3,  6,  1,  5,  1,  4,  7, 10,  3,  4,  5,  5,  2,  1,  2,  6,\n        2,  4,  8,  3,  4,  3,  5,  4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     1\nb     3\nc     6\nd     1\ne     5\nf     1\ng     4\nh     7\ni    10\nj     3\nk     4\nl     5\nm     5\nn     2\no     1\np     2\nq     6\nr     2\nt     4\nu     8\nv     3\nw     4\nx     3\ny     5\nz     4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119c8eca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119c8e670>",
                "self.obj": "0     65\n1      7\n2     34\n3      7\n4     62\n      ..\n95    97\n96    18\n97    66\n98    79\n99    85\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 11, 12, 13, 14, 15,\n       16, 17, 18, 18, 19, 19, 19, 20, 20, 21, 22, 23, 23, 24, 25, 26, 27,\n       27, 27, 28, 28, 29, 30, 31, 32, 32, 33, 33, 34, 35, 35, 36, 37, 38,\n       38, 39, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 48, 48, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59, 60, 61, 62, 63, 63, 64,\n       65, 66, 67, 68, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77])",
                "_": "78",
                "val": "array([77, 51, 46, 65, 36, 34, 29, 10, 69, 11, 86, 31, 94, 90, 83, 12,  9,\n       33, 31,  7, 66,  5, 12, 29,  9, 63, 16,  6,  9, 65, 23, 43, 15, 32,\n       77, 94, 34, 47, 68, 83,  8, 15, 18,  8, 85, 37,  6, 40,  7,  2, 58,\n       62, 14, 30, 30, 13, 13, 18,  2, 45, 86, 68, 51,  2, 19, 58, 67, 11,\n       66, 79, 52, 54, 26, 24, 38, 46, 45, 85, 92, 71, 60, 27, 51, 87,  7,\n       93, 80, 50, 53, 73, 34, 68, 76, 78, 34, 77, 97,  7, 95, 84])",
                "sorter": "array([72,  7, 10,  0, 55, 19, 29, 77, 52, 13, 60, 92, 91, 17, 89, 50, 65,\n       82, 38, 39, 75, 49, 79, 94, 63, 24, 18, 47, 68, 85, 56, 27, 48, 62,\n       36, 45, 90, 41, 76, 66, 22, 23, 93,  9, 99, 35, 25, 26,  3, 57, 46,\n        4, 16, 40, 61, 33, 71, 96,  5, 73, 11, 87, 84, 32, 34, 21, 44, 69,\n       97, 98, 28, 14, 67, 37,  8, 74, 15, 51, 30, 53, 64, 58,  6, 54,  1,\n       70, 43, 80, 42, 20, 83, 86, 12, 31,  2, 81, 95, 78, 59, 88])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14, 15, 16, 17,\n       18, 19, 21, 24, 26, 27, 28, 30, 31, 32, 33, 36, 38, 39, 40, 41, 43,\n       45, 46, 48, 49, 50, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87,\n       88, 90, 91, 92, 93, 94, 95, 96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1,\n       1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 2, 1,\n       1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (78,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\nb    2015-08-26    1\n     2015-08-28    1\n     2015-08-29    1\nc    2015-08-23    1\n                  ..\ny    2015-08-31    1\n     2015-09-01    1\nz    2015-08-25    1\n     2015-08-27    2\n     2015-08-28    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119cea190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119cea160>",
                "self.obj": "0     65.0\n1      7.0\n2     34.0\n3      7.0\n4     62.0\n      ... \n95    97.0\n96    18.0\n97    66.0\n98    79.0\n99    85.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  2,  2,  2,  2,  2,  3,  4,\n        4,  4,  4,  4,  5,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,\n        8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 11, 11,\n       11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 14, 15, 15, 16, 16, 16, 16,\n       16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20,\n       20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "25",
                "val": "array of shape (100,)",
                "sorter": "array([ 1, 69, 18, 35, 86, 52, 72,  7, 10,  0, 77, 13, 29, 19, 55, 60, 50,\n       92, 89, 17, 91, 65, 39, 38, 82, 75, 47, 49, 63, 79, 94, 24, 27, 45,\n       85, 68, 48, 56, 62, 90, 41, 36, 66, 22, 76,  9, 23, 93, 99, 26, 57,\n       25,  3, 46, 33, 16, 40, 61,  4, 71, 96,  5, 73, 11, 84, 32, 34, 21,\n       44, 87, 97, 28, 67, 14, 98,  8, 64, 37, 15, 74, 53, 51, 30, 58,  6,\n       54, 80, 43, 70, 83, 42, 20,  2, 12, 81, 31, 78, 88, 59, 95])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  7, 10, 15, 16, 21, 22, 26, 32, 42, 45, 49, 53, 59, 61, 62, 64,\n       70, 71, 75, 83, 86, 89, 92, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 1, 3, 5, 1, 5, 1, 4, 6, 8, 3, 4, 4, 5, 2, 1, 2, 6, 1, 4, 7, 3,\n       3, 3, 4, 4])",
                "res": "array([1, 3, 5, 1, 5, 1, 4, 6, 8, 3, 4, 4, 5, 2, 1, 2, 6, 1, 4, 7, 3, 3,\n       3, 4, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    1\nb    3\nc    5\nd    1\ne    5\nf    1\ng    4\nh    6\ni    8\nj    3\nk    4\nl    4\nm    5\nn    2\no    1\np    2\nq    6\nr    1\nt    4\nu    7\nv    3\nw    3\nx    3\ny    4\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121fea910>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121feafd0>",
                "self.obj": "0      54\n1      90\n2      32\n3      62\n4      20\n       ..\n995    14\n996    92\n997     6\n998    92\n999    30\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  37,  67, 109, 142, 173, 210, 239, 273, 311, 351, 394, 426,\n       473, 513, 555, 587, 622, 666, 710, 755, 785, 829, 866, 904, 949])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([29, 24, 35, 29, 29, 30, 23, 31, 29, 33, 34, 28, 41, 35, 37, 26, 31,\n       35, 37, 37, 23, 34, 32, 33, 36, 38])",
                "res": "array([29, 24, 35, 29, 29, 30, 23, 31, 29, 33, 34, 28, 41, 35, 37, 26, 31,\n       35, 37, 37, 23, 34, 32, 33, 36, 38])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    29\nb    24\nc    35\nd    29\ne    29\nf    30\ng    23\nh    31\ni    29\nj    33\nk    34\nl    28\nm    41\nn    35\no    37\np    26\nq    31\nr    35\ns    37\nt    37\nu    23\nv    34\nw    32\nx    33\ny    36\nz    38\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121fea880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121feaa60>",
                "self.obj": "0      54\n1      90\n2      32\n3      62\n4      20\n       ..\n995    14\n996    92\n997     6\n998    92\n999    30\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "256",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (256,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (256,)",
                "res": "array of shape (256,)",
                "ri": "array of shape (256,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    3\n     2015-08-25    3\n     2015-08-26    4\n     2015-08-27    8\n                  ..\nz    2015-08-28    4\n     2015-08-29    5\n     2015-08-30    4\n     2015-08-31    3\n     2015-09-01    3\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121feaa30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121fea970>",
                "self.obj": "0      54.0\n1      90.0\n2      32.0\n3      62.0\n4      20.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    92.0\n999    30.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      5.400000e+01\n1      9.000000e+01\n2      3.200000e+01\n3      6.200000e+01\n4      2.000000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    9.200000e+01\n999    3.000000e+01\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  94, 123, 163, 195, 224, 259, 286, 318, 353, 391, 434, 463,\n       509, 545, 586, 615, 649, 688, 729, 770, 798, 839, 874, 910, 952])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([41, 24, 20, 30, 27, 24, 27, 18, 26, 28, 27, 28, 21, 34, 29, 35, 26,\n       28, 29, 30, 29, 20, 29, 27, 28, 29, 36])",
                "res": "array([24, 20, 30, 27, 24, 27, 18, 26, 28, 27, 28, 21, 34, 29, 35, 26, 28,\n       29, 30, 29, 20, 29, 27, 28, 29, 36])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    24\nb    20\nc    30\nd    27\ne    24\nf    27\ng    18\nh    26\ni    28\nj    27\nk    28\nl    21\nm    34\nn    29\no    35\np    26\nq    28\nr    29\ns    30\nt    29\nu    20\nv    29\nw    27\nx    28\ny    29\nz    36\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121df6c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121df6280>",
                "self.obj": "0       72\n1       19\n2       60\n3       65\n4       19\n        ..\n9995    80\n9996    68\n9997    16\n9998    50\n9999    57\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([6052, 7320, 7598, ..., 8387, 8634, 8998])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  369,  744, 1107, 1482, 1896, 2252, 2585, 2959, 3374, 3761,\n       4159, 4531, 4902, 5303, 5696, 6104, 6495, 6911, 7309, 7650, 8047,\n       8429, 8806, 9202, 9583])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 97,  96,  99,  99,  98,  95,  97,  97, 100,  96,  98,  98, 100,\n        97,  97,  99,  99,  98,  95,  98, 100,  98, 100,  98,  96,  98])",
                "res": "array([ 97,  96,  99,  99,  98,  95,  97,  97, 100,  96,  98,  98, 100,\n        97,  97,  99,  99,  98,  95,  98, 100,  98, 100,  98,  96,  98])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     97\nb     96\nc     99\nd     99\ne     98\nf     95\ng     97\nh     97\ni    100\nj     96\nk     98\nl     98\nm    100\nn     97\no     97\np     99\nq     99\nr     98\ns     95\nt     98\nu    100\nv     98\nw    100\nx     98\ny     96\nz     98\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121df6d00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121df67c0>",
                "self.obj": "0       72\n1       19\n2       60\n3       65\n4       19\n        ..\n9995    80\n9996    68\n9997    16\n9998    50\n9999    57\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 4,  6,  6, ..., 90, 97, 97])",
                "sorter": "array([  39, 4556, 4627, ..., 7311, 6630, 9043])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 0, ..., 1, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    36\n     2015-08-24    24\n     2015-08-25    38\n     2015-08-26    25\n     2015-08-27    32\n                   ..\nz    2015-08-28    39\n     2015-08-29    38\n     2015-08-30    30\n     2015-08-31    35\n     2015-09-01    30\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121df6c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121df6d00>",
                "self.obj": "0       72.0\n1       19.0\n2       60.0\n3       65.0\n4       19.0\n        ... \n9995    80.0\n9996    68.0\n9997    16.0\n9998    50.0\n9999    57.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([ 103,  256,  273, ..., 6160, 7805, 8998])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  945, 1296, 1640, 2003, 2387, 2723, 3039, 3389, 3778, 4147,\n       4521, 4869, 5222, 5596, 5965, 6350, 6709, 7102, 7476, 7802, 8167,\n       8527, 8878, 9251, 9611])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100,  97,  95,  98,  99,  95,  94,  94,  96,  98,  95,  97,  95,\n        98,  92,  95,  97,  93,  98,  93,  95,  99,  93,  95,  96,  96,\n        96])",
                "res": "array([97, 95, 98, 99, 95, 94, 94, 96, 98, 95, 97, 95, 98, 92, 95, 97, 93,\n       98, 93, 95, 99, 93, 95, 96, 96, 96])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    97\nb    95\nc    98\nd    99\ne    95\nf    94\ng    94\nh    96\ni    98\nj    95\nk    97\nl    95\nm    98\nn    92\no    95\np    97\nq    93\nr    98\ns    93\nt    95\nu    99\nv    93\nw    95\nx    96\ny    96\nz    96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121d2dbb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121d2d340>",
                "self.obj": "0        24\n1        13\n2        43\n3        89\n4        36\n         ..\n99995    58\n99996    37\n99997    43\n99998    96\n99999    98\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 3231,  3892,  5471, ..., 97292, 97301, 97611])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3904,  7779, 11588, 15420, 19295, 23235, 27053, 30858,\n       34595, 38425, 42233, 46116, 49960, 53854, 57742, 61396, 65213,\n       69023, 72865, 76717, 80589, 84419, 88292, 92211, 96153])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121d2d520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121d2d940>",
                "self.obj": "0        24\n1        13\n2        43\n3        89\n4        36\n         ..\n99995    58\n99996    37\n99997    43\n99998    96\n99999    98\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([75999, 78796, 91375, ..., 13090, 14360, 83326])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    100\n     2015-08-24     99\n     2015-08-25     99\n     2015-08-26     97\n     2015-08-27     97\n                  ... \nz    2015-08-28     99\n     2015-08-29     97\n     2015-08-30     95\n     2015-08-31    100\n     2015-09-01    100\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121d2dbb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121d2d640>",
                "self.obj": "0        24.0\n1        13.0\n2        43.0\n3        89.0\n4        36.0\n         ... \n99995    58.0\n99996    37.0\n99997    43.0\n99998    96.0\n99999    98.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([  103,   256,   273, ..., 93949, 94575, 97301])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9529, 13169, 16782, 20389, 24041, 27754, 31333, 34904,\n       38414, 42010, 45599, 49257, 52884, 56557, 60215, 63679, 67270,\n       70851, 74428, 78064, 81705, 85302, 88946, 92653, 96365])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121cfeb80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121cfeaf0>",
                "self.obj": "0     844\n1     921\n2      14\n3      87\n4     811\n     ... \n95    257\n96    887\n97    282\n98    832\n99     63\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,  4,  4,  4,  4,  5,\n        5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  8,  9,  9,  9,  9,\n        9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13,\n       13, 13, 13, 13, 13, 14, 14, 14, 15, 16, 16, 16, 17, 17, 17, 17, 18,\n       18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21,\n       21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "25",
                "val": "array of shape (100,)",
                "sorter": "array([10, 51, 52, 20, 29, 59, 35, 47,  7, 87, 21,  4, 48, 37, 11, 73, 70,\n       95, 18,  5, 32, 22, 61, 89, 82, 85, 96, 90, 79, 46, 58, 93, 17, 53,\n       77, 69, 57,  6, 24, 55,  2, 84, 66,  0, 78, 71,  8, 80, 74, 31, 16,\n       23, 97, 30, 45, 41, 91, 12, 83, 33, 42, 67, 14, 40, 76, 26, 75, 99,\n        3, 36, 34, 13, 56, 28,  1, 64, 81,  9, 15, 68, 54, 43, 94, 65, 49,\n       98, 62, 63, 39, 27, 60, 38, 19, 25, 44, 72, 50, 92, 88, 86])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  2,  7, 10, 12, 16, 22, 27, 29, 30, 35, 39, 44, 50, 56, 59, 60,\n       63, 67, 75, 80, 83, 86, 89, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 5, 3, 2, 4, 6, 5, 2, 1, 5, 4, 5, 6, 6, 3, 1, 3, 4, 8, 5, 3, 3,\n       3, 7, 4])",
                "res": "array([2, 5, 3, 2, 4, 6, 5, 2, 1, 5, 4, 5, 6, 6, 3, 1, 3, 4, 8, 5, 3, 3,\n       3, 7, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    5\nc    3\nd    2\ne    4\nf    6\ng    5\nh    2\ni    1\nj    5\nk    4\nl    5\nm    6\nn    6\no    3\np    1\nq    3\nr    4\nt    8\nu    5\nv    3\nw    3\nx    3\ny    7\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121cfe190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121cfe1f0>",
                "self.obj": "0     844\n1     921\n2      14\n3      87\n4     811\n     ... \n95    257\n96    887\n97    282\n98    832\n99     63\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30,\n       31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40, 40, 41, 42, 43, 44, 45,\n       46, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 62, 63, 64, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 73, 74,\n       75, 76, 77, 78, 79, 80, 81, 81, 82, 83, 84, 85, 86, 86, 87])",
                "_": "88",
                "val": "array of shape (100,)",
                "sorter": "array([10, 51, 52, 35, 29, 59, 20, 47, 87,  7,  4, 21, 73, 11, 48, 37, 70,\n       95,  5, 18, 32, 22, 89, 85, 82, 96, 61, 79, 90, 46, 58, 53, 93, 17,\n       77, 24, 69,  6, 57, 55, 66, 84,  2,  0,  8, 31, 71, 74, 80, 78, 41,\n       16, 97, 23, 30, 45, 12, 83, 91, 33, 67, 14, 42, 40, 26, 76, 75, 56,\n        3, 99, 36, 34, 28,  1, 13, 15, 81,  9, 68, 64, 54, 94, 43, 49, 65,\n       98, 63, 62, 39, 27, 72, 38, 19, 25, 44, 60, 92, 50, 86, 88])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  3,  4,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36,\n       37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56,\n       58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76,\n       78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95,\n       96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1])",
                "res": "array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (88,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-09-01    1\nb    2015-08-23    1\n     2015-08-29    1\n     2015-08-31    2\n                  ..\ny    2015-08-30    1\n     2015-09-01    1\nz    2015-08-24    1\n     2015-08-28    2\n     2015-08-31    1\nName: julie, Length: 88, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1220e1c70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121cfe130>",
                "self.obj": "0     844.0\n1     921.0\n2      14.0\n3      87.0\n4     811.0\n      ...  \n95    257.0\n96    887.0\n97    282.0\n98    832.0\n99     63.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  2,  2,  2,  3,  3,  4,\n        4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  8,  9,\n        9,  9,  9,  9, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12,\n       12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 16, 16, 16, 17, 17, 17,\n       17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21,\n       21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "25",
                "val": "array of shape (100,)",
                "sorter": "array([52, 69, 86, 18,  1, 35, 10, 51, 20, 29, 59,  7, 47, 87, 21,  4, 48,\n       37, 11, 73, 70, 95,  5, 32, 22, 85, 61, 89, 82, 96, 90, 79, 46, 58,\n       93, 17, 53, 77, 57,  6, 24, 66, 84, 55,  2,  0,  8, 78, 71, 80, 74,\n       31, 45, 16, 23, 97, 30, 41, 83, 91, 12, 33, 42, 67, 14, 26, 40, 76,\n       75, 28, 99,  3, 36, 34, 13, 56,  9, 64, 81, 15, 68, 54, 43, 94, 65,\n       49, 98, 62, 63, 39, 27, 60, 38, 19, 25, 44, 72, 50, 92, 88])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  8, 11, 14, 16, 20, 25, 30, 32, 33, 38, 41, 46, 52, 58, 61, 62,\n       65, 69, 76, 81, 84, 87, 90, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 2, 3, 2, 2, 4, 5, 5, 2, 1, 5, 3, 4, 6, 6, 3, 1, 3, 4, 7, 4, 3,\n       3, 3, 7, 3])",
                "res": "array([2, 3, 2, 2, 4, 5, 5, 2, 1, 5, 3, 4, 6, 6, 3, 1, 3, 4, 7, 4, 3, 3,\n       3, 7, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    3\nc    2\nd    2\ne    4\nf    5\ng    5\nh    2\ni    1\nj    5\nk    3\nl    4\nm    6\nn    6\no    3\np    1\nq    3\nr    4\nt    7\nu    4\nv    3\nw    3\nx    3\ny    7\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0c7f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0ce50>",
                "self.obj": "0      348\n1      348\n2      911\n3      145\n4      971\n      ... \n995    227\n996    104\n997    670\n998    483\n999    782\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  44,  82, 111, 138, 174, 218, 272, 322, 354, 397, 429, 459,\n       496, 533, 577, 611, 655, 692, 723, 770, 806, 845, 878, 922, 964])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([43, 38, 29, 27, 36, 44, 51, 48, 32, 42, 31, 30, 37, 37, 44, 34, 44,\n       36, 31, 46, 36, 39, 32, 42, 42, 35])",
                "res": "array([43, 38, 29, 27, 36, 44, 51, 48, 32, 42, 31, 30, 37, 37, 44, 34, 44,\n       36, 31, 46, 36, 39, 32, 42, 42, 35])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    43\nb    38\nc    29\nd    27\ne    36\nf    44\ng    51\nh    48\ni    32\nj    42\nk    31\nl    30\nm    37\nn    37\no    44\np    34\nq    44\nr    36\ns    31\nt    46\nu    36\nv    39\nw    32\nx    42\ny    42\nz    35\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0cf70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0c190>",
                "self.obj": "0      348\n1      348\n2      911\n3      145\n4      971\n      ... \n995    227\n996    104\n997    670\n998    483\n999    782\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "253",
                "val": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    5\n     2015-08-24    2\n     2015-08-25    5\n     2015-08-26    3\n     2015-08-27    6\n                  ..\nz    2015-08-28    3\n     2015-08-29    3\n     2015-08-30    3\n     2015-08-31    1\n     2015-09-01    6\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x119d0cc10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x119d0cb80>",
                "self.obj": "0      348.0\n1      348.0\n2      911.0\n3      145.0\n4      971.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    483.0\n999    782.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "26",
                "val": "array of shape (1000,)",
                "self.obj": "0      3.480000e+02\n1      3.480000e+02\n2      9.110000e+02\n3      1.450000e+02\n4      9.710000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    4.830000e+02\n999    7.820000e+02\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape (1000,)",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59, 100, 134, 158, 184, 219, 261, 313, 360, 390, 431, 460, 490,\n       525, 561, 603, 637, 674, 709, 739, 784, 818, 853, 883, 924, 966])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([51, 38, 28, 20, 23, 31, 33, 46, 40, 27, 35, 24, 27, 27, 30, 36, 30,\n       33, 28, 27, 41, 32, 31, 27, 34, 36, 24])",
                "res": "array([38, 28, 20, 23, 31, 33, 46, 40, 27, 35, 24, 27, 27, 30, 36, 30, 33,\n       28, 27, 41, 32, 31, 27, 34, 36, 24])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    38\nb    28\nc    20\nd    23\ne    31\nf    33\ng    46\nh    40\ni    27\nj    35\nk    24\nl    27\nm    27\nn    30\no    36\np    30\nq    33\nr    28\ns    27\nt    41\nu    32\nv    31\nw    27\nx    34\ny    36\nz    24\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121d13a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121d13be0>",
                "self.obj": "0       519\n1       643\n2       736\n3       875\n4       182\n       ... \n9995    536\n9996    406\n9997    978\n9998    954\n9999    939\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  3,  11,  12, ..., 996, 999, 999])",
                "sorter": "array([4858, 1969, 4592, ..., 2816, 5478, 9884])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  370,  769, 1132, 1531, 1908, 2272, 2640, 3039, 3443, 3824,\n       4160, 4545, 4940, 5354, 5744, 6134, 6494, 6892, 7285, 7663, 8083,\n       8453, 8826, 9203, 9599])",
                "inc": "array([1, 1, 1, ..., 1, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([321, 335, 305, 329, 316, 308, 309, 322, 330, 329, 286, 318, 320,\n       325, 323, 333, 314, 339, 323, 315, 337, 299, 315, 316, 316, 327])",
                "res": "array([321, 335, 305, 329, 316, 308, 309, 322, 330, 329, 286, 318, 320,\n       325, 323, 333, 314, 339, 323, 315, 337, 299, 315, 316, 316, 327])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    321\nb    335\nc    305\nd    329\ne    316\nf    308\ng    309\nh    322\ni    330\nj    329\nk    286\nl    318\nm    320\nn    325\no    323\np    333\nq    314\nr    339\ns    323\nt    315\nu    337\nv    299\nw    315\nx    316\ny    316\nz    327\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121d13370>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121d13e80>",
                "self.obj": "0       519\n1       643\n2       736\n3       875\n4       182\n       ... \n9995    536\n9996    406\n9997    978\n9998    954\n9999    939\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 44,  54,  57, ..., 955, 987, 988])",
                "sorter": "array([2085, 4203, 7159, ..., 9524, 2179, 1990])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    45\n     2015-08-24    29\n     2015-08-25    35\n     2015-08-26    25\n     2015-08-27    32\n                   ..\nz    2015-08-28    32\n     2015-08-29    45\n     2015-08-30    41\n     2015-08-31    31\n     2015-09-01    48\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121d13940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121d13fa0>",
                "self.obj": "0       519.0\n1       643.0\n2       736.0\n3       875.0\n4       182.0\n        ...  \n9995    536.0\n9996    406.0\n9997    978.0\n9998    954.0\n9999    939.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.96000000e+02,  9.99000000e+02,  9.99000000e+02])",
                "sorter": "array([ 103,  256,  273, ..., 2816, 5478, 9884])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  945, 1328, 1670, 2039, 2396, 2731, 3082, 3460, 3839, 4190,\n       4506, 4867, 5242, 5625, 5997, 6366, 6702, 7078, 7446, 7802, 8201,\n       8541, 8900, 9256, 9623])",
                "inc": "array([1, 0, 0, ..., 1, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([394, 279, 276, 250, 267, 265, 254, 250, 269, 288, 267, 232, 261,\n       261, 266, 270, 277, 245, 275, 262, 243, 283, 244, 264, 269, 266,\n       277])",
                "res": "array([279, 276, 250, 267, 265, 254, 250, 269, 288, 267, 232, 261, 261,\n       266, 270, 277, 245, 275, 262, 243, 283, 244, 264, 269, 266, 277])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    279\nb    276\nc    250\nd    267\ne    265\nf    254\ng    250\nh    269\ni    288\nj    267\nk    232\nl    261\nm    261\nn    266\no    270\np    277\nq    245\nr    275\ns    262\nt    243\nu    283\nv    244\nw    264\nx    269\ny    266\nz    277\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e00070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121e00880>",
                "self.obj": "0        457\n1        630\n2        205\n3        774\n4        235\n        ... \n99995    172\n99996    756\n99997    939\n99998    779\n99999    166\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   1,   2, ..., 999, 999, 999])",
                "sorter": "array([97574, 28941,  9998, ..., 21148, 47194, 67243])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3887,  7793, 11557, 15429, 19331, 23203, 27078, 30841,\n       34573, 38453, 42272, 46129, 49914, 53769, 57624, 61429, 65204,\n       69019, 72847, 76780, 80639, 84545, 88365, 92155, 96083])",
                "inc": "array([1, 1, 1, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([973, 978, 980, 986, 977, 980, 979, 966, 977, 979, 975, 981, 980,\n       975, 974, 983, 970, 971, 978, 985, 984, 980, 975, 977, 981, 984])",
                "res": "array([973, 978, 980, 986, 977, 980, 979, 966, 977, 979, 975, 981, 980,\n       975, 974, 983, 970, 971, 978, 985, 984, 980, 975, 977, 981, 984])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    973\nb    978\nc    980\nd    986\ne    977\nf    980\ng    979\nh    966\ni    977\nj    979\nk    975\nl    981\nm    980\nn    975\no    974\np    983\nq    970\nr    971\ns    978\nt    985\nu    984\nv    980\nw    975\nx    977\ny    981\nz    984\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e00e50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121e003a0>",
                "self.obj": "0        457\n1        630\n2        205\n3        774\n4        235\n        ... \n99995    172\n99996    756\n99997    939\n99998    779\n99999    166\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  2,   2,   2, ..., 989, 996, 998])",
                "sorter": "array([25627, 60323, 93098, ..., 94405, 97181, 81802])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    338\n     2015-08-24    297\n     2015-08-25    312\n     2015-08-26    321\n     2015-08-27    314\n                  ... \nz    2015-08-28    339\n     2015-08-29    313\n     2015-08-30    334\n     2015-08-31    329\n     2015-09-01    309\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x121e00760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x121e00d90>",
                "self.obj": "0        457.0\n1        630.0\n2        205.0\n3        774.0\n4        235.0\n         ...  \n99995    172.0\n99996    756.0\n99997    939.0\n99998    779.0\n99999    166.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])",
                "sorter": "array([  103,   256,   273, ..., 21148, 47194, 67243])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9548, 13239, 16807, 20455, 24104, 27745, 31397, 34935,\n       38454, 42094, 45668, 49301, 52864, 56482, 60122, 63700, 67247,\n       70878, 74483, 78160, 81780, 85438, 89042, 92594, 96284])",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([993, 954, 961, 957, 952, 957, 958, 965, 947, 955, 945, 943, 961,\n       959, 951, 948, 960, 945, 950, 952, 963, 954, 959, 955, 949, 955,\n       962])",
                "res": "array([954, 961, 957, 952, 957, 958, 965, 947, 955, 945, 943, 961, 959,\n       951, 948, 960, 945, 950, 952, 963, 954, 959, 955, 949, 955, 962])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    954\nb    961\nc    957\nd    952\ne    957\nf    958\ng    965\nh    947\ni    955\nj    945\nk    943\nl    961\nm    959\nn    951\no    948\np    960\nq    945\nr    950\ns    952\nt    963\nu    954\nv    959\nw    955\nx    949\ny    955\nz    962\nName: julie, dtype: int64"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1a4d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1a4c10>",
                "self.obj": "0     3\n1     6\n2     5\n3     1\n4     2\n     ..\n95    3\n96    9\n97    4\n98    6\n99    8\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  5,\n        5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,\n        8,  9,  9,  9,  9,  9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12,\n       12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15,\n       16, 16, 16, 16, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 21,\n       21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25])",
                "_": "array([3, 6, 5, 1, 2, 4, 9, 8, 7, 0])",
                "val": "array([3, 6, 5, 1, 2, 4, 9, 4, 8, 8, 7, 9, 9, 1, 3, 8, 6, 7, 1, 9, 2, 6,\n       8, 2, 4, 9, 1, 5, 3, 2, 2, 1, 9, 6, 9, 9, 6, 3, 1, 7, 5, 2, 3, 6,\n       5, 7, 0, 8, 4, 9, 6, 9, 7, 4, 9, 2, 5, 8, 4, 0, 0, 0, 0, 1, 1, 4,\n       5, 4, 3, 6, 3, 3, 8, 7, 9, 8, 0, 5, 7, 8, 6, 8, 5, 4, 5, 9, 1, 9,\n       7, 0, 3, 7, 8, 3, 1, 3, 9, 4, 6, 8])",
                "codes": "array([0, 1, 4, 5, 1, 5, 2, 7, 9, 9, 3, 7, 3, 4, 0, 1, 4, 4, 5, 6, 7, 8,\n       1, 2, 6, 6, 7, 9, 2, 3, 5, 5, 6, 6, 7, 1, 2, 5, 6, 7, 0, 0, 8, 0,\n       0, 1, 6, 0, 6, 7, 8, 9, 0, 0, 3, 3, 5, 6, 8, 8, 4, 6, 7, 7, 8, 8,\n       1, 7, 2, 4, 6, 7, 6, 9, 1, 3, 6, 2, 3, 6, 8, 9, 1, 8, 0, 1, 2, 3,\n       6, 9, 0, 4, 5, 5, 2, 3, 2, 3, 7, 5])",
                "sorter": "array([ 0, 98, 30, 48,  1, 24,  2, 75, 46, 76,  3, 15, 13,  4, 90, 69, 29,\n       55,  5, 32, 92, 88, 33, 44,  6, 11, 57, 62, 66, 38,  7, 58, 85, 96,\n        8, 16, 84, 65, 12,  9, 28, 93, 10, 14, 42, 50, 87, 71, 74, 79, 17,\n       59, 37, 68, 18, 86, 83, 35, 73, 78, 20, 19, 22, 47, 39, 91, 21, 72,\n       27, 23, 34, 81, 25, 61, 43, 26, 54, 56, 31, 49, 45, 60, 36, 52, 95,\n       80, 40, 63, 51, 89, 70, 41, 53, 67, 77, 64, 82, 94, 99, 97])",
                "idx": "array([ 0,  4,  6, 10, 12, 14, 22, 28, 31, 35, 40, 43, 47, 52, 60, 66, 68,\n       72, 74, 77, 82, 84, 90, 94, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 2, 3, 2, 2, 7, 5, 3, 3, 5, 2, 3, 5, 5, 4, 2, 4, 2, 3, 5, 2, 6,\n       3, 2, 3, 1])",
                "res": "array([4, 2, 3, 2, 2, 7, 5, 3, 3, 5, 2, 3, 5, 5, 4, 2, 4, 2, 3, 5, 2, 6,\n       3, 2, 3, 1])",
                "ri": "Index(['w', 'c', 'd', 'u', 'x', 'o', 'q', 't', 'l', 'g', 'b', 'n', 'h', 'p',\n       'e', 'm', 'r', 'i', 'y', 'v', 's', 'z', 'a', 'k', 'f', 'j'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    4\nc    2\nd    3\nu    2\nx    2\no    7\nq    5\nt    3\nl    3\ng    5\nb    2\nn    3\nh    5\np    5\ne    4\nm    2\nr    4\ni    2\ny    3\nv    5\ns    2\nz    6\na    3\nk    2\nf    3\nj    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1a4100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1a4550>",
                "self.obj": "0     3\n1     6\n2     5\n3     1\n4     2\n     ..\n95    3\n96    9\n97    4\n98    6\n99    8\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9,  9, 10, 11, 11, 12, 13,\n       14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29,\n       30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n       62, 63, 64, 65, 66, 66, 67, 68, 68, 69, 69, 70, 71, 72, 73, 74, 75,\n       76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90])",
                "_": "array([3, 6, 5, 1, 2, 4, 9, 8, 7, 0])",
                "val": "array([3, 6, 5, 1, 2, 4, 9, 4, 8, 8, 7, 9, 9, 1, 3, 8, 6, 7, 1, 9, 2, 6,\n       8, 2, 4, 9, 1, 5, 3, 2, 2, 1, 9, 6, 9, 9, 6, 3, 1, 7, 5, 2, 3, 6,\n       5, 7, 0, 8, 4, 9, 6, 9, 7, 4, 9, 2, 5, 8, 4, 0, 0, 0, 0, 1, 1, 4,\n       5, 4, 3, 6, 3, 3, 8, 7, 9, 8, 0, 5, 7, 8, 6, 8, 5, 4, 5, 9, 1, 9,\n       7, 0, 3, 7, 8, 3, 1, 3, 9, 4, 6, 8])",
                "codes": "array([0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 6, 7, 8, 2, 6, 3, 0, 7, 1, 8, 3, 6,\n       4, 1, 7, 4, 5, 6, 3, 2, 0, 4, 4, 5, 2, 3, 6, 1, 6, 6, 1, 0, 3, 8,\n       2, 4, 0, 1, 1, 8, 9, 7, 6, 6, 8, 5, 6, 4, 7, 5, 9, 9, 9, 9, 3, 3,\n       5, 2, 5, 0, 1, 0, 0, 6, 7, 5, 8, 7, 9, 2, 8, 7, 1, 7, 2, 2, 3, 6,\n       8, 9, 0, 8, 7, 0, 3, 0, 6, 5, 1, 7])",
                "sorter": "array([ 0,  1,  2,  3,  4,  5,  6,  7, 85,  8, 12,  9, 10, 44, 11, 13, 14,\n       15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 48,\n       56, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 45, 46,\n       47, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 74, 72, 83, 73, 75, 76, 77, 78, 79, 80, 81, 82,\n       84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 12, 13, 15, 16, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38,\n       39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56,\n       57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74,\n       75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n       94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1])",
                "ri": "array of shape (91,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-28    1\nc    2015-08-26    1\nd    2015-08-23    1\nu    2015-08-28    1\nx    2015-08-28    1\n                  ..\nz    2015-08-30    1\nl    2015-08-23    1\nj    2015-08-23    1\nw    2015-08-31    1\nf    2015-08-25    1\nName: julie, Length: 91, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1a4a90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1a43d0>",
                "self.obj": "0     3.0\n1     6.0\n2     5.0\n3     1.0\n4     2.0\n     ... \n95    3.0\n96    9.0\n97    4.0\n98    6.0\n99    8.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,\n        3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,\n        7,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 11,\n       11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 14, 15,\n       16, 16, 17, 17, 17, 18, 18, 18, 18, 18, 19, 20, 20, 20, 20, 20, 21,\n       21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25])",
                "_": "array([3., 6., 5., 1., 2., 4., 9., 7., 8., 0.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  3,  3,  6,  7,  0,  1,  4,  5, -1,  2,  8,  9,  3,  8,  3,\n        4,  0,  4,  4,  5,  6,  7,  8,  1,  2,  6,  6,  8,  9, -1, -1,  3,\n       -1, -1,  5,  6, -1, -1, -1,  1,  6, -1,  0,  7,  0,  0,  1,  6,  0,\n        6,  7,  8,  9, -1,  4,  6,  7,  7,  8,  1,  8, -1,  4,  6,  8,  5,\n        6,  9, -1,  1,  6, -1,  2,  3,  6,  9,  1, -1,  0,  0,  7,  7,  0,\n        1,  2,  3,  6,  9,  0,  4,  5,  5, -1,  2,  2,  3,  8,  5])",
                "sorter": "array([ 1, 69, 18, 86, 35, 52,  0, 98, 30, 48, 46,  2, 75, 76,  3, 15, 13,\n        4, 90, 29, 55,  5, 32, 88, 92, 33, 44,  6, 11, 57, 62,  7, 66, 38,\n        8, 85, 58, 96,  9, 65, 84, 16, 12, 28, 93, 10, 14, 42, 50, 87, 71,\n       74, 17, 79, 59, 47, 20, 19, 39, 91, 22, 21, 72, 27, 23, 34, 81, 24,\n       25, 61, 26, 43, 54, 45, 56, 31, 49, 60, 36, 83, 37, 68, 73, 78, 95,\n       80, 40, 63, 51, 89, 70, 41, 53, 67, 64, 77, 82, 94, 99, 97])",
                "idx": "array([ 6, 10, 14, 16, 18, 25, 31, 34, 38, 43, 46, 50, 55, 61, 63, 67, 68,\n       70, 73, 78, 79, 84, 90, 94, 96, 99])",
                "inc": "array([1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 4, 4, 2, 2, 6, 5, 2, 3, 3, 3, 3, 5, 5, 2, 4, 1, 2, 3, 5, 1, 3,\n       6, 3, 2, 3, 1])",
                "res": "array([4, 4, 2, 2, 6, 5, 2, 3, 3, 3, 3, 5, 5, 2, 4, 1, 2, 3, 5, 1, 3, 6,\n       3, 2, 3, 1])",
                "ri": "Index(['w', 'd', 'u', 'x', 'o', 'q', 't', 'l', 'g', 'b', 'n', 'h', 'e', 'm',\n       'r', 'c', 'i', 'y', 'v', 's', 'p', 'z', 'a', 'k', 'f', 'j'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    4\nd    4\nu    2\nx    2\no    6\nq    5\nt    2\nl    3\ng    3\nb    3\nn    3\nh    5\ne    5\nm    2\nr    4\nc    1\ni    2\ny    3\nv    5\ns    1\np    3\nz    6\na    3\nk    2\nf    3\nj    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1a4280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1a48e0>",
                "self.obj": "0     3.0\n1     6.0\n2     5.0\n3     1.0\n4     2.0\n     ... \n95    3.0\n96    9.0\n97    4.0\n98    6.0\n99    8.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  7,  8,  9,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n       22, 23, 24, 25, 26, 26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 57, 58, 59, 59, 60, 61, 61, 62, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81])",
                "_": "array([3., 6., 5., 1., 2., 4., 9., 7., 8., 0.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  2,  2,  3,  3,  3,  6,  7,  0,  2,  4,  5,  6, -1, -1, -1,\n       -1,  6,  7,  2,  6,  3,  0,  8,  1,  7,  6,  4,  1,  8,  4,  5,  6,\n       -1, -1, -1,  4,  4,  5,  2,  3,  6,  1,  6,  1,  0,  3,  7,  4,  0,\n        1,  1, -1, -1, -1,  6,  6,  5,  6,  4,  8,  5,  9,  9,  9,  9,  3,\n       -1, -1, -1,  5,  0,  0,  0,  6,  8, -1,  7,  8,  9,  7,  8,  1,  8,\n        2, -1,  6,  7,  9,  0,  7,  8,  0,  3,  0,  6,  5,  1,  8])",
                "sorter": "array([ 1, 69, 40, 77,  3, 18, 86, 35, 52,  0,  2,  4,  5,  6,  7,  8, 85,\n        9, 12, 10, 44, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25,\n       26, 27, 28, 29, 30, 48, 56, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42,\n       50, 43, 45, 46, 47, 49, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 66, 67, 68, 70, 71, 74, 72, 83, 73, 75, 76, 78, 79, 80, 81,\n       82, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28,\n       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47,\n       48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85,\n       86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (82,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-28    1\nd    2015-08-23    1\nx    2015-08-28    1\no    2015-08-30    1\nq    2015-08-26    1\n                  ..\nz    2015-08-30    1\nl    2015-08-23    1\nj    2015-08-23    1\nw    2015-08-31    1\nf    2015-08-25    1\nName: julie, Length: 82, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab6a0>",
                "self.obj": "0     3.0\n1     6.0\n2     5.0\n3     1.0\n4     2.0\n     ... \n95    3.0\n96    9.0\n97    4.0\n98    6.0\n99    8.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,\n        3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,\n        7,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 11,\n       11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 14, 15,\n       16, 16, 17, 17, 17, 18, 18, 18, 18, 18, 19, 20, 20, 20, 20, 20, 21,\n       21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25])",
                "_": "array([3., 6., 5., 1., 2., 4., 9., 7., 8., 0.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  3,  3,  6,  7,  0,  1,  4,  5, -1,  2,  8,  9,  3,  8,  3,\n        4,  0,  4,  4,  5,  6,  7,  8,  1,  2,  6,  6,  8,  9, -1, -1,  3,\n       -1, -1,  5,  6, -1, -1, -1,  1,  6, -1,  0,  7,  0,  0,  1,  6,  0,\n        6,  7,  8,  9, -1,  4,  6,  7,  7,  8,  1,  8, -1,  4,  6,  8,  5,\n        6,  9, -1,  1,  6, -1,  2,  3,  6,  9,  1, -1,  0,  0,  7,  7,  0,\n        1,  2,  3,  6,  9,  0,  4,  5,  5, -1,  2,  2,  3,  8,  5])",
                "sorter": "array([ 1, 69, 18, 86, 35, 52,  0, 98, 30, 48, 46,  2, 75, 76,  3, 15, 13,\n        4, 90, 29, 55,  5, 32, 88, 92, 33, 44,  6, 11, 57, 62,  7, 66, 38,\n        8, 85, 58, 96,  9, 65, 84, 16, 12, 28, 93, 10, 14, 42, 50, 87, 71,\n       74, 17, 79, 59, 47, 20, 19, 39, 91, 22, 21, 72, 27, 23, 34, 81, 24,\n       25, 61, 26, 43, 54, 45, 56, 31, 49, 60, 36, 83, 37, 68, 73, 78, 95,\n       80, 40, 63, 51, 89, 70, 41, 53, 67, 64, 77, 82, 94, 99, 97])",
                "idx": "array([ 6, 10, 14, 16, 18, 25, 31, 34, 38, 43, 46, 50, 55, 61, 63, 67, 68,\n       70, 73, 78, 79, 84, 90, 94, 96, 99])",
                "inc": "array([1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 4, 4, 2, 2, 6, 5, 2, 3, 3, 3, 3, 5, 5, 2, 4, 1, 2, 3, 5, 1, 3,\n       6, 3, 2, 3, 1])",
                "res": "array([4, 4, 2, 2, 6, 5, 2, 3, 3, 3, 3, 5, 5, 2, 4, 1, 2, 3, 5, 1, 3, 6,\n       3, 2, 3, 1])",
                "ri": "Index(['w', 'd', 'u', 'x', 'o', 'q', 't', 'l', 'g', 'b', 'n', 'h', 'e', 'm',\n       'r', 'c', 'i', 'y', 'v', 's', 'p', 'z', 'a', 'k', 'f', 'j'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    4\nd    4\nu    2\nx    2\no    6\nq    5\nt    2\nl    3\ng    3\nb    3\nn    3\nh    5\ne    5\nm    2\nr    4\nc    1\ni    2\ny    3\nv    5\ns    1\np    3\nz    6\na    3\nk    2\nf    3\nj    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1abf10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abc40>",
                "self.obj": "0     3.0\n1     6.0\n2     5.0\n3     1.0\n4     2.0\n     ... \n95    3.0\n96    9.0\n97    4.0\n98    6.0\n99    8.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  7,  8,  9,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n       22, 23, 24, 25, 26, 26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 57, 58, 59, 59, 60, 61, 61, 62, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81])",
                "_": "array([3., 6., 5., 1., 2., 4., 9., 7., 8., 0.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  2,  2,  3,  3,  3,  6,  7,  0,  2,  4,  5,  6, -1, -1, -1,\n       -1,  6,  7,  2,  6,  3,  0,  8,  1,  7,  6,  4,  1,  8,  4,  5,  6,\n       -1, -1, -1,  4,  4,  5,  2,  3,  6,  1,  6,  1,  0,  3,  7,  4,  0,\n        1,  1, -1, -1, -1,  6,  6,  5,  6,  4,  8,  5,  9,  9,  9,  9,  3,\n       -1, -1, -1,  5,  0,  0,  0,  6,  8, -1,  7,  8,  9,  7,  8,  1,  8,\n        2, -1,  6,  7,  9,  0,  7,  8,  0,  3,  0,  6,  5,  1,  8])",
                "sorter": "array([ 1, 69, 40, 77,  3, 18, 86, 35, 52,  0,  2,  4,  5,  6,  7,  8, 85,\n        9, 12, 10, 44, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25,\n       26, 27, 28, 29, 30, 48, 56, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42,\n       50, 43, 45, 46, 47, 49, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 66, 67, 68, 70, 71, 74, 72, 83, 73, 75, 76, 78, 79, 80, 81,\n       82, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28,\n       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47,\n       48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85,\n       86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (82,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-28    1\nd    2015-08-23    1\nx    2015-08-28    1\no    2015-08-30    1\nq    2015-08-26    1\n                  ..\nz    2015-08-30    1\nl    2015-08-23    1\nj    2015-08-23    1\nw    2015-08-31    1\nf    2015-08-25    1\nName: julie, Length: 82, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c5970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c59a0>",
                "self.obj": "0      5\n1      2\n2      3\n3      5\n4      2\n      ..\n995    4\n996    8\n997    6\n998    7\n999    9\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5, 2, 3, 0, 7, 9, 6, 4, 8, 1])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  42,  79, 129, 156, 184, 222, 258, 300, 337, 377, 409, 462,\n       501, 545, 589, 640, 679, 720, 760, 789, 833, 869, 893, 928, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([ 9, 10,  9,  9, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10,  9, 10, 10, 10])",
                "res": "array([ 9, 10,  9,  9, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10,  9, 10, 10, 10])",
                "ri": "Index(['k', 'q', 'w', 'i', 'o', 'a', 'r', 'v', 'z', 't', 'x', 'p', 'h', 'l',\n       'y', 'f', 'b', 'e', 'm', 'c', 'n', 's', 'g', 'd', 'j', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk     9\nq    10\nw     9\ni     9\no    10\na    10\nr     9\nv    10\nz    10\nt    10\nx    10\np    10\nh    10\nl    10\ny    10\nf    10\nb    10\ne    10\nm    10\nc    10\nn    10\ns    10\ng     9\nd    10\nj    10\nu    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c5c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c53a0>",
                "self.obj": "0      5\n1      2\n2      3\n3      5\n4      2\n      ..\n995    4\n996    8\n997    6\n998    7\n999    9\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5, 2, 3, 0, 7, 9, 6, 4, 8, 1])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (257,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (257,)",
                "res": "array of shape (257,)",
                "ri": "array of shape (257,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-26    3\nq    2015-08-31    2\nw    2015-08-28    7\ni    2015-08-27    1\no    2015-09-01    4\n                  ..\nx    2015-08-26    1\nc    2015-08-29    2\n     2015-09-01    1\nt    2015-08-28    1\ng    2015-08-29    1\nName: julie, Length: 257, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab580>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1aba30>",
                "self.obj": "0      5.0\n1      2.0\n2      3.0\n3      5.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5., 2., 3., 0., 6., 9., 4., 7., 8., 1.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  97, 143, 169, 196, 232, 268, 308, 345, 384, 413, 461, 498,\n       538, 581, 613, 650, 696, 735, 773, 799, 840, 874, 898, 931, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([11, 10, 10, 10, 10, 11, 10, 11, 11, 11, 10, 11, 11, 11, 11, 11, 10,\n       11, 11, 11, 11, 11, 10, 10,  9, 11, 11])",
                "res": "array([10, 10, 10, 10, 11, 10, 11, 11, 11, 10, 11, 11, 11, 11, 11, 10, 11,\n       11, 11, 11, 11, 10, 10,  9, 11, 11])",
                "ri": "Index(['k', 'w', 'i', 'o', 'a', 'r', 'v', 'z', 't', 'x', 'p', 'h', 'l', 'y',\n       'q', 'b', 'f', 'e', 'm', 'c', 'n', 's', 'g', 'd', 'j', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    10\nw    10\ni    10\no    10\na    11\nr    10\nv    11\nz    11\nt    11\nx    10\np    11\nh    11\nl    11\ny    11\nq    11\nb    10\nf    11\ne    11\nm    11\nc    11\nn    11\ns    10\ng    10\nd     9\nj    11\nu    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab1c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abeb0>",
                "self.obj": "0      5.0\n1      2.0\n2      3.0\n3      5.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5., 2., 3., 0., 6., 9., 4., 7., 8., 1.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (257,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (258,)",
                "res": "array of shape (257,)",
                "ri": "array of shape (257,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-26    3\nw    2015-08-28    7\no    2015-09-01    4\na    2015-08-29    4\nr    2015-08-28    1\n                  ..\nc    2015-08-29    2\n     2015-09-01    1\nt    2015-08-28    1\ng    2015-08-29    1\nk    2015-08-31    1\nName: julie, Length: 257, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e32a910>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e32ac10>",
                "self.obj": "0      5.0\n1      2.0\n2      3.0\n3      5.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5., 2., 3., 0., 6., 9., 4., 7., 8., 1.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  97, 143, 169, 196, 232, 268, 308, 345, 384, 413, 461, 498,\n       538, 581, 613, 650, 696, 735, 773, 799, 840, 874, 898, 931, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([11, 10, 10, 10, 10, 11, 10, 11, 11, 11, 10, 11, 11, 11, 11, 11, 10,\n       11, 11, 11, 11, 11, 10, 10,  9, 11, 11])",
                "res": "array([10, 10, 10, 10, 11, 10, 11, 11, 11, 10, 11, 11, 11, 11, 11, 10, 11,\n       11, 11, 11, 11, 10, 10,  9, 11, 11])",
                "ri": "Index(['k', 'w', 'i', 'o', 'a', 'r', 'v', 'z', 't', 'x', 'p', 'h', 'l', 'y',\n       'q', 'b', 'f', 'e', 'm', 'c', 'n', 's', 'g', 'd', 'j', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    10\nw    10\ni    10\no    10\na    11\nr    10\nv    11\nz    11\nt    11\nx    10\np    11\nh    11\nl    11\ny    11\nq    11\nb    10\nf    11\ne    11\nm    11\nc    11\nn    11\ns    10\ng    10\nd     9\nj    11\nu    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e32ad90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e32a220>",
                "self.obj": "0      5.0\n1      2.0\n2      3.0\n3      5.0\n4      2.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    7.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5., 2., 3., 0., 6., 9., 4., 7., 8., 1.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (257,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (258,)",
                "res": "array of shape (257,)",
                "ri": "array of shape (257,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-26    3\nw    2015-08-28    7\no    2015-09-01    4\na    2015-08-29    4\nr    2015-08-28    1\n                  ..\nc    2015-08-29    2\n     2015-09-01    1\nt    2015-08-28    1\ng    2015-08-29    1\nk    2015-08-31    1\nName: julie, Length: 257, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e099fd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e08d220>",
                "self.obj": "0       3\n1       0\n2       9\n3       0\n4       6\n       ..\n9995    3\n9996    5\n9997    4\n9998    9\n9999    2\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([3, 0, 9, 6, 2, 5, 7, 8, 4, 1])",
                "val": "array([3, 0, 9, ..., 4, 9, 2])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   0,  203, 1091, ..., 9669, 9734, 9985])",
                "idx": "array([   0,  393,  794, 1177, 1570, 1954, 2298, 2672, 3023, 3401, 3786,\n       4193, 4582, 4983, 5373, 5762, 6139, 6499, 6922, 7313, 7703, 8091,\n       8468, 8844, 9243, 9635])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['j', 'n', 'y', 'r', 'e', 'l', 'o', 'm', 's', 'k', 'q', 'd', 'p', 'b',\n       'z', 'i', 'c', 'v', 'w', 'h', 'u', 't', 'a', 'f', 'x', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    10\nn    10\ny    10\nr    10\ne    10\nl    10\no    10\nm    10\ns    10\nk    10\nq    10\nd    10\np    10\nb    10\nz    10\ni    10\nc    10\nv    10\nw    10\nh    10\nu    10\nt    10\na    10\nf    10\nx    10\ng    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e32a550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e32acd0>",
                "self.obj": "0       3\n1       0\n2       9\n3       0\n4       6\n       ..\n9995    3\n9996    5\n9997    4\n9998    9\n9999    2\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([3, 0, 9, 6, 2, 5, 7, 8, 4, 1])",
                "val": "array([3, 0, 9, ..., 4, 9, 2])",
                "codes": "array([0, 0, 1, ..., 9, 9, 9])",
                "sorter": "array([   0, 6352, 1621, ..., 5691, 5711, 7581])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 1, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-30    10\nn    2015-08-25    10\ny    2015-09-01    10\nr    2015-08-25    10\ne    2015-08-24    10\n                   ..\nx    2015-08-29    10\nz    2015-08-28    10\nq    2015-08-31    10\ni    2015-08-28     8\n     2015-08-23     9\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e099b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e099d30>",
                "self.obj": "0       3.0\n1       0.0\n2       9.0\n3       0.0\n4       6.0\n       ... \n9995    3.0\n9996    5.0\n9997    4.0\n9998    9.0\n9999    2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([3., 0., 9., 6., 2., 5., 7., 8., 4., 1.])",
                "val": "array([3., 0., 9., ..., 4., 9., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9669, 9734, 9985])",
                "idx": "array([ 589,  957, 1315, 1683, 2041, 2366, 2720, 3053, 3402, 3760, 4146,\n       4517, 4888, 5253, 5628, 5982, 6325, 6725, 7092, 7456, 7822, 8177,\n       8559, 8915, 9290, 9658])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['j', 'y', 'r', 'e', 'l', 'o', 'm', 's', 'k', 'q', 'd', 'p', 'b', 'z',\n       'i', 'c', 'v', 'w', 'h', 'u', 't', 'n', 'a', 'f', 'x', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    11\ny    11\nr    11\ne    11\nl    11\no    11\nm    11\ns    11\nk    11\nq    11\nd    11\np    11\nb    11\nz    11\ni    11\nc    11\nv    11\nw    11\nh    11\nu    11\nt    11\nn    11\na    11\nf    11\nx    11\ng    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e08d220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e0f5340>",
                "self.obj": "0       3.0\n1       0.0\n2       9.0\n3       0.0\n4       6.0\n       ... \n9995    3.0\n9996    5.0\n9997    4.0\n9998    9.0\n9999    2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([3., 0., 9., 6., 2., 5., 7., 8., 4., 1.])",
                "val": "array([3., 0., 9., ..., 4., 9., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 5691, 5711, 7581])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-30     9\ny    2015-09-01    10\ne    2015-08-24    10\nl    2015-08-25    11\nr    2015-08-23    10\n                   ..\nx    2015-08-29    10\nz    2015-08-28    11\nq    2015-08-31    10\ni    2015-08-28     9\n     2015-08-23     9\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e099ac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e336430>",
                "self.obj": "0       3.0\n1       0.0\n2       9.0\n3       0.0\n4       6.0\n       ... \n9995    3.0\n9996    5.0\n9997    4.0\n9998    9.0\n9999    2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([3., 0., 9., 6., 2., 5., 7., 8., 4., 1.])",
                "val": "array([3., 0., 9., ..., 4., 9., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9669, 9734, 9985])",
                "idx": "array([ 589,  957, 1315, 1683, 2041, 2366, 2720, 3053, 3402, 3760, 4146,\n       4517, 4888, 5253, 5628, 5982, 6325, 6725, 7092, 7456, 7822, 8177,\n       8559, 8915, 9290, 9658])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['j', 'y', 'r', 'e', 'l', 'o', 'm', 's', 'k', 'q', 'd', 'p', 'b', 'z',\n       'i', 'c', 'v', 'w', 'h', 'u', 't', 'n', 'a', 'f', 'x', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    11\ny    11\nr    11\ne    11\nl    11\no    11\nm    11\ns    11\nk    11\nq    11\nd    11\np    11\nb    11\nz    11\ni    11\nc    11\nv    11\nw    11\nh    11\nu    11\nt    11\nn    11\na    11\nf    11\nx    11\ng    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e0f5340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e0996d0>",
                "self.obj": "0       3.0\n1       0.0\n2       9.0\n3       0.0\n4       6.0\n       ... \n9995    3.0\n9996    5.0\n9997    4.0\n9998    9.0\n9999    2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([3., 0., 9., 6., 2., 5., 7., 8., 4., 1.])",
                "val": "array([3., 0., 9., ..., 4., 9., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 5691, 5711, 7581])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-30     9\ny    2015-09-01    10\ne    2015-08-24    10\nl    2015-08-25    11\nr    2015-08-23    10\n                   ..\nx    2015-08-29    10\nz    2015-08-28    11\nq    2015-08-31    10\ni    2015-08-28     9\n     2015-08-23     9\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abb20>",
                "self.obj": "0        3\n1        1\n2        0\n3        2\n4        5\n        ..\n99995    4\n99996    1\n99997    6\n99998    4\n99999    1\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([3, 1, 0, 2, 5, 6, 8, 7, 9, 4])",
                "val": "array([3, 1, 0, ..., 6, 4, 1])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,   758,   821, ..., 99475, 99495, 99992])",
                "idx": "array([    0,  3810,  7625, 11493, 15389, 19210, 23101, 26890, 30760,\n       34578, 38404, 42268, 46096, 49979, 53810, 57647, 61524, 65396,\n       69154, 73036, 76913, 80727, 84513, 88419, 92334, 96155])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['t', 'i', 'g', 'w', 'e', 'k', 'b', 'r', 'u', 'n', 'v', 'f', 'x', 's',\n       'y', 'm', 'p', 'h', 'z', 'q', 'd', 'j', 'a', 'o', 'c', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nt    10\ni    10\ng    10\nw    10\ne    10\nk    10\nb    10\nr    10\nu    10\nn    10\nv    10\nf    10\nx    10\ns    10\ny    10\nm    10\np    10\nh    10\nz    10\nq    10\nd    10\nj    10\na    10\no    10\nc    10\nl    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1abac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1aba00>",
                "self.obj": "0        3\n1        1\n2        0\n3        2\n4        5\n        ..\n99995    4\n99996    1\n99997    6\n99998    4\n99999    1\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([3, 1, 0, 2, 5, 6, 8, 7, 9, 4])",
                "val": "array([3, 1, 0, ..., 6, 4, 1])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,  2936,  4502, ..., 78731, 81054, 92967])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nt    2015-08-30    10\ni    2015-09-01    10\ng    2015-08-28    10\nw    2015-08-28    10\n     2015-08-25    10\n                   ..\nq    2015-08-30    10\nk    2015-09-01    10\nm    2015-08-31    10\nw    2015-08-30    10\nb    2015-08-27    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e3360a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e336b20>",
                "self.obj": "0        3.0\n1        1.0\n2        0.0\n3        2.0\n4        5.0\n        ... \n99995    4.0\n99996    1.0\n99997    6.0\n99998    4.0\n99999    1.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([3., 1., 0., 2., 5., 6., 8., 9., 4., 7.])",
                "val": "array([3., 1., 0., ..., 6., 4., 1.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 98700, 99518, 99661])",
                "idx": "array([ 5883,  9473, 13129, 16803, 20414, 24076, 27649, 31286, 34885,\n       38491, 42134, 45751, 49395, 53003, 56658, 60254, 63812, 67406,\n       71038, 74686, 78280, 81848, 85537, 89189, 92786, 96408])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['t', 'g', 'w', 'e', 'k', 'b', 'r', 'u', 'n', 'v', 'f', 'x', 'y', 'm',\n       'p', 'h', 's', 'z', 'q', 'd', 'j', 'a', 'o', 'c', 'l', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nt    11\ng    11\nw    11\ne    11\nk    11\nb    11\nr    11\nu    11\nn    11\nv    11\nf    11\nx    11\ny    11\nm    11\np    11\nh    11\ns    11\nz    11\nq    11\nd    11\nj    11\na    11\no    11\nc    11\nl    11\ni    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e336340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e336160>",
                "self.obj": "0        3.0\n1        1.0\n2        0.0\n3        2.0\n4        5.0\n        ... \n99995    4.0\n99996    1.0\n99997    6.0\n99998    4.0\n99999    1.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([3., 1., 0., 2., 5., 6., 8., 9., 4., 7.])",
                "val": "array([3., 1., 0., ..., 6., 4., 1.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 91630, 95125, 96994])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nt    2015-08-30    11\ng    2015-08-28    11\nw    2015-08-25    11\ne    2015-08-27    11\nk    2015-08-31    11\n                   ..\nn    2015-08-23    11\nm    2015-08-31    11\nw    2015-08-30    11\nb    2015-08-27    11\ns    2015-08-28    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1abe20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abee0>",
                "self.obj": "0        3.0\n1        1.0\n2        0.0\n3        2.0\n4        5.0\n        ... \n99995    4.0\n99996    1.0\n99997    6.0\n99998    4.0\n99999    1.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([3., 1., 0., 2., 5., 6., 8., 9., 4., 7.])",
                "val": "array([3., 1., 0., ..., 6., 4., 1.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 98700, 99518, 99661])",
                "idx": "array([ 5883,  9473, 13129, 16803, 20414, 24076, 27649, 31286, 34885,\n       38491, 42134, 45751, 49395, 53003, 56658, 60254, 63812, 67406,\n       71038, 74686, 78280, 81848, 85537, 89189, 92786, 96408])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['t', 'g', 'w', 'e', 'k', 'b', 'r', 'u', 'n', 'v', 'f', 'x', 'y', 'm',\n       'p', 'h', 's', 'z', 'q', 'd', 'j', 'a', 'o', 'c', 'l', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nt    11\ng    11\nw    11\ne    11\nk    11\nb    11\nr    11\nu    11\nn    11\nv    11\nf    11\nx    11\ny    11\nm    11\np    11\nh    11\ns    11\nz    11\nq    11\nd    11\nj    11\na    11\no    11\nc    11\nl    11\ni    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1abb20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab610>",
                "self.obj": "0        3.0\n1        1.0\n2        0.0\n3        2.0\n4        5.0\n        ... \n99995    4.0\n99996    1.0\n99997    6.0\n99998    4.0\n99999    1.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([3., 1., 0., 2., 5., 6., 8., 9., 4., 7.])",
                "val": "array([3., 1., 0., ..., 6., 4., 1.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 91630, 95125, 96994])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nt    2015-08-30    11\ng    2015-08-28    11\nw    2015-08-25    11\ne    2015-08-27    11\nk    2015-08-31    11\n                   ..\nn    2015-08-23    11\nm    2015-08-31    11\nw    2015-08-30    11\nb    2015-08-27    11\ns    2015-08-28    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e336bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e3360a0>",
                "self.obj": "0     75\n1     81\n2     39\n3     26\n4     50\n      ..\n95    73\n96     8\n97    50\n98    28\n99    29\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,\n        3,  3,  3,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  7,  7,\n        7,  7,  7,  8,  8,  9,  9,  9,  9,  9, 10, 11, 11, 11, 11, 11, 11,\n       12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16,\n       16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 19, 20, 20, 20,\n       21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 24, 24, 24])",
                "_": "array([75, 81, 39, 26, 50,  9, 11, 94, 32, 92,  5, 53, 86, 51, 88, 17, 25,\n       85, 69, 80, 15,  2, 76, 73, 40, 35, 70, 27, 46, 43, 78, 71,  7,  4,\n       56, 29, 16, 66, 49, 59, 12, 95, 31, 47, 57, 19, 45, 98, 91, 68, 61,\n       74, 41, 79, 48, 96, 83, 64,  3, 72, 34, 65, 23, 24, 99,  8, 28])",
                "val": "array([75, 81, 39, 26, 50,  9, 11, 94, 32, 92,  5, 53, 53, 86, 51, 88, 17,\n       81, 25, 85, 69, 50, 80, 15,  2, 76, 17, 73, 81, 40, 35, 70, 27, 80,\n       46, 43,  9, 78, 25, 71,  7,  4, 56, 29, 16,  4, 46, 66, 70, 49, 35,\n       59, 12, 95, 35, 59, 31, 47,  5, 57, 19, 51,  9, 53, 45, 98, 85, 91,\n       31, 68, 61, 74, 41, 79, 48, 11, 96, 85, 83, 49, 64,  3, 43, 72, 34,\n       65, 98, 61, 23, 35, 72, 24, 86, 43, 99, 73,  8, 50, 28, 29])",
                "codes": "array([ 0, 13, 17, 23, 29, 35, 36, 54,  1,  1, 16, 62,  2, 25, 41, 59,  3,\n       17, 25, 60,  4, 27, 46,  5, 19, 50,  5,  6, 16, 19, 47, 65,  7,  9,\n       17, 23, 25,  8, 50, 10, 12, 20, 53, 57, 11,  1, 11, 28, 33, 49, 56,\n       12, 55,  4, 13, 24, 32, 40, 47, 14, 42, 44,  5, 10, 15, 64, 18, 35,\n       38, 38, 39, 45, 51, 52, 21, 28, 29, 33, 22, 39, 15, 25,  4, 26, 63,\n        6, 30, 42, 43, 48, 26, 29, 31, 59, 61, 66, 34, 11, 37, 58])",
                "sorter": "array([ 0, 61, 77, 27, 35, 99, 44, 74,  1, 17, 18, 88,  2, 54, 53, 90,  3,\n       66, 30, 84,  4, 32, 64,  5, 33, 70, 62,  6, 38, 22, 86, 96,  7,  9,\n       19, 95, 50,  8, 87, 10, 92, 23, 73, 80, 11, 28, 12, 34, 45, 69, 78,\n       13, 76, 21, 14, 29, 40, 52, 65, 15, 56, 59, 36, 58, 16, 94, 20, 43,\n       49, 79, 55, 60, 71, 72, 24, 46, 82, 41, 25, 51, 26, 89, 97, 31, 91,\n       75, 37, 68, 57, 67, 48, 93, 39, 83, 85, 98, 42, 63, 47, 81])",
                "idx": "array([ 0,  8, 12, 16, 20, 23, 26, 32, 37, 39, 44, 45, 51, 53, 59, 62, 66,\n       74, 78, 80, 82, 85, 90, 96, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([8, 3, 4, 4, 3, 3, 6, 5, 2, 5, 1, 6, 2, 6, 3, 4, 7, 4, 2, 2, 3, 5,\n       6, 1, 3])",
                "res": "array([8, 3, 4, 4, 3, 3, 6, 5, 2, 5, 1, 6, 2, 6, 3, 4, 7, 4, 2, 2, 3, 5,\n       6, 1, 3])",
                "ri": "Index(['y', 'b', 'x', 'c', 'l', 'f', 'w', 'e', 'v', 'u', 'i', 'q', 'd', 'h',\n       'p', 't', 'o', 'k', 'a', 'g', 's', 'j', 'n', 'm', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    8\nb    3\nx    4\nc    4\nl    3\nf    3\nw    6\ne    5\nv    2\nu    5\ni    1\nq    6\nd    2\nh    6\np    3\nt    4\no    7\nk    4\na    2\ng    2\ns    3\nj    5\nn    6\nm    1\nr    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e336b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e336a90>",
                "self.obj": "0     75\n1     81\n2     39\n3     26\n4     50\n      ..\n95    73\n96     8\n97    50\n98    28\n99    29\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  3,  4,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n       15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29,\n       30, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 39, 40, 41, 42, 42, 43,\n       44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       59, 60, 61, 62, 63, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 71, 72,\n       73, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86])",
                "_": "array([75, 81, 39, 26, 50,  9, 11, 94, 32, 92,  5, 53, 86, 51, 88, 17, 25,\n       85, 69, 80, 15,  2, 76, 73, 40, 35, 70, 27, 46, 43, 78, 71,  7,  4,\n       56, 29, 16, 66, 49, 59, 12, 95, 31, 47, 57, 19, 45, 98, 91, 68, 61,\n       74, 41, 79, 48, 96, 83, 64,  3, 72, 34, 65, 23, 24, 99,  8, 28])",
                "val": "array([75, 81, 39, 26, 50,  9, 11, 94, 32, 92,  5, 53, 53, 86, 51, 88, 17,\n       81, 25, 85, 69, 50, 80, 15,  2, 76, 17, 73, 81, 40, 35, 70, 27, 80,\n       46, 43,  9, 78, 25, 71,  7,  4, 56, 29, 16,  4, 46, 66, 70, 49, 35,\n       59, 12, 95, 35, 59, 31, 47,  5, 57, 19, 51,  9, 53, 45, 98, 85, 91,\n       31, 68, 61, 74, 41, 79, 48, 11, 96, 85, 83, 49, 64,  3, 43, 72, 34,\n       65, 98, 61, 23, 35, 72, 24, 86, 43, 99, 73,  8, 50, 28, 29])",
                "codes": "array([ 0,  1,  2,  3, 25,  4, 46,  5,  6,  7,  8,  9, 10, 11, 11, 12, 13,\n       14, 15,  1, 16, 62, 17, 18,  4, 19, 20, 21, 28, 22, 15, 23,  1, 24,\n       26, 27, 19, 28, 29,  5, 30, 16, 29, 31, 32, 40, 33, 34, 35, 45, 36,\n       33, 37, 26, 66, 38, 25, 39, 41, 25, 39, 42, 43, 10, 44, 13,  5, 11,\n       58, 47, 17, 48,  6, 42, 49, 50, 38, 51, 52, 53, 54, 55, 17, 35, 56,\n       12, 57, 29, 59, 60, 61, 47, 50, 25, 59, 63, 64, 23, 65,  4])",
                "sorter": "array([ 0,  1,  2,  3, 30,  4, 64,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n       15, 16, 17, 18, 88, 19, 20, 21, 22, 23, 24, 46, 25, 26, 27, 28, 29,\n       31, 32, 33, 34, 35, 36, 37, 38, 93, 39, 40, 52, 41, 42, 43, 60, 44,\n       45, 47, 48, 98, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63,\n       81, 65, 66, 67, 75, 68, 69, 70, 79, 71, 72, 73, 74, 76, 77, 99, 78,\n       92, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 97])",
                "idx": "array([ 0,  1,  2,  3,  5,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n       19, 20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37,\n       38, 39, 40, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58,\n       59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78,\n       79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,\n       98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\n       2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (87,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-25    1\nb    2015-08-28    1\nx    2015-08-29    1\nc    2015-08-25    2\nl    2015-08-28    2\n                  ..\ns    2015-08-26    1\nt    2015-08-28    1\ne    2015-08-25    1\nw    2015-08-26    1\ns    2015-08-27    1\nName: julie, Length: 87, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e336be0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e336eb0>",
                "self.obj": "0     75.0\n1     81.0\n2     39.0\n3     26.0\n4     50.0\n      ... \n95    73.0\n96     8.0\n97    50.0\n98    28.0\n99    29.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  9, 10, 10, 10, 10, 10, 11,\n       11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16,\n       16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 19, 20, 20, 20,\n       21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 24, 24, 24])",
                "_": "array([75., 81., 39., 26., 50.,  9., 11.,  5., 53., 86., 51., 88., 17.,\n       25., 85., 69., 80., 15.,  2., 76., 40., 35., 70., 27., 46., 43.,\n       78., 71.,  7.,  4., 56., 29., 16., 49., 59., 12., 95., 31., 47.,\n       57., 19., 91., 68., 61., 74., 41., 79., 48., 96., 83., 64.,  3.,\n       98., 23., 72., 24., 99., 73.,  8., 28.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 13, 25, 35, 42, 52, -1,  0, 10, 14, 31, 32, 47,  2, 21, 36, 54,\n       -1, -1,  3, 21, -1,  4, 23,  5, 16, 43,  5,  6, 13, 16, 58, -1, -1,\n       14, 21, 57, -1, 43,  7,  9, 17, 46, 50,  8, -1, -1,  8, 24, 49,  9,\n       48, -1,  4, 10, 20, 28, 11, 37, 39,  5,  7, 12, 56,  1, 53, 15, 31,\n       33, 33, 34, 40, 44, 45, -1, 18, 25, 29, 19, 34, -1, 21,  4, 22, 55,\n        6, 26, 37, 38, 41, -1, -1, 22, 25, 27, 59, 30, -1,  8, 51])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 27,  0, 61, 77, 99, 44, 74,  2, 54, 53, 90,\n       66, 84,  3, 30, 64,  4, 32,  5, 33, 70, 62,  6, 38, 22, 96,  7,  9,\n       19, 50, 95,  8, 87, 10, 92, 23, 73, 80, 11, 28, 45, 12, 34, 78, 13,\n       76, 65, 21, 14, 29, 40, 15, 56, 59, 36, 58, 16, 94, 17, 88, 20, 43,\n       49, 79, 55, 60, 71, 72, 46, 24, 82, 41, 25, 51, 26, 89, 97, 31, 91,\n       75, 37, 68, 57, 67, 83, 85, 48, 93, 39, 98, 42, 47, 63, 81])",
                "idx": "array([ 6, 13, 17, 21, 24, 27, 32, 37, 39, 44, 45, 50, 52, 57, 60, 64, 66,\n       74, 78, 80, 82, 85, 90, 96, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 7, 4, 3, 3, 3, 5, 4, 2, 5, 1, 4, 2, 5, 3, 4, 2, 7, 4, 2, 2, 3,\n       5, 5, 1, 3])",
                "res": "array([7, 4, 3, 3, 3, 5, 4, 2, 5, 1, 4, 2, 5, 3, 4, 2, 7, 4, 2, 2, 3, 5,\n       5, 1, 3])",
                "ri": "Index(['y', 'x', 'c', 'l', 'f', 'w', 'e', 'v', 'u', 'i', 'q', 'd', 'h', 'p',\n       't', 'b', 'o', 'k', 'a', 'g', 's', 'j', 'n', 'm', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    7\nx    4\nc    3\nl    3\nf    3\nw    5\ne    4\nv    2\nu    5\ni    1\nq    4\nd    2\nh    5\np    3\nt    4\nb    2\no    7\nk    4\na    2\ng    2\ns    3\nj    5\nn    5\nm    1\nr    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e336bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e336a90>",
                "self.obj": "0     75.0\n1     81.0\n2     39.0\n3     26.0\n4     50.0\n      ... \n95    73.0\n96     8.0\n97    50.0\n98    28.0\n99    29.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  3,  4,  5,  6,\n        7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22,\n       23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38,\n       38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 55, 56, 57, 58, 59, 59, 60, 61, 61, 62, 63, 64, 65, 66, 67,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81])",
                "_": "array([75., 81., 39., 26., 50.,  9., 11.,  5., 53., 86., 51., 88., 17.,\n       25., 85., 69., 80., 15.,  2., 76., 40., 35., 70., 27., 46., 43.,\n       78., 71.,  7.,  4., 56., 29., 16., 49., 59., 12., 95., 31., 47.,\n       57., 19., 91., 68., 61., 74., 41., 79., 48., 96., 83., 64.,  3.,\n       98., 23., 72., 24., 99., 73.,  8., 28.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 13, 14, 25, 28, 35, 42, 52,  0,  2, -1,  4,  5,  6, -1, -1,\n       -1,  7,  8,  8,  9, 10, 11, 12,  1, 14, 15,  4, 16, 17, -1, 18, 19,\n       -1, -1, -1, 20, 21, 22, 23, 16, 24,  5, 26, 13, 25, 27, 29, 30, 31,\n       40, 32, -1, -1, 22, 59, 33, 21, 34, 36, 21, 34, 37, 38,  7, 39, 10,\n        5,  8, 51, -1, -1, 41,  6, 37, 43, 33, 44, 45, 46, 47, 48, 49,  9,\n       50, 25, -1, -1, -1, 43, 53, 21, 54, 55, 56, 57, 58,  4, 31])",
                "sorter": "array([ 1,  3, 18, 77, 35, 40, 52, 69, 86,  0,  2, 64,  4,  5,  6,  7,  8,\n        9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 46, 24, 25,\n       26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 93, 39, 41, 42, 43,\n       60, 44, 45, 47, 48, 98, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61,\n       62, 63, 81, 65, 66, 67, 75, 68, 70, 79, 71, 72, 73, 74, 76, 78, 92,\n       80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 99])",
                "idx": "array([ 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84,\n       86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (82,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-25    1\nx    2015-08-29    1\nl    2015-08-28    2\nf    2015-08-30    1\nw    2015-08-23    1\n                  ..\nt    2015-08-28    1\ne    2015-08-25    1\nw    2015-08-26    1\ns    2015-08-27    1\ny    2015-08-24    1\nName: julie, Length: 82, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e220>",
                "self.obj": "0     75.0\n1     81.0\n2     39.0\n3     26.0\n4     50.0\n      ... \n95    73.0\n96     8.0\n97    50.0\n98    28.0\n99    29.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n        2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  9, 10, 10, 10, 10, 10, 11,\n       11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16,\n       16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 19, 20, 20, 20,\n       21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 24, 24, 24])",
                "_": "array([75., 81., 39., 26., 50.,  9., 11.,  5., 53., 86., 51., 88., 17.,\n       25., 85., 69., 80., 15.,  2., 76., 40., 35., 70., 27., 46., 43.,\n       78., 71.,  7.,  4., 56., 29., 16., 49., 59., 12., 95., 31., 47.,\n       57., 19., 91., 68., 61., 74., 41., 79., 48., 96., 83., 64.,  3.,\n       98., 23., 72., 24., 99., 73.,  8., 28.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 13, 25, 35, 42, 52, -1,  0, 10, 14, 31, 32, 47,  2, 21, 36, 54,\n       -1, -1,  3, 21, -1,  4, 23,  5, 16, 43,  5,  6, 13, 16, 58, -1, -1,\n       14, 21, 57, -1, 43,  7,  9, 17, 46, 50,  8, -1, -1,  8, 24, 49,  9,\n       48, -1,  4, 10, 20, 28, 11, 37, 39,  5,  7, 12, 56,  1, 53, 15, 31,\n       33, 33, 34, 40, 44, 45, -1, 18, 25, 29, 19, 34, -1, 21,  4, 22, 55,\n        6, 26, 37, 38, 41, -1, -1, 22, 25, 27, 59, 30, -1,  8, 51])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 27,  0, 61, 77, 99, 44, 74,  2, 54, 53, 90,\n       66, 84,  3, 30, 64,  4, 32,  5, 33, 70, 62,  6, 38, 22, 96,  7,  9,\n       19, 50, 95,  8, 87, 10, 92, 23, 73, 80, 11, 28, 45, 12, 34, 78, 13,\n       76, 65, 21, 14, 29, 40, 15, 56, 59, 36, 58, 16, 94, 17, 88, 20, 43,\n       49, 79, 55, 60, 71, 72, 46, 24, 82, 41, 25, 51, 26, 89, 97, 31, 91,\n       75, 37, 68, 57, 67, 83, 85, 48, 93, 39, 98, 42, 47, 63, 81])",
                "idx": "array([ 6, 13, 17, 21, 24, 27, 32, 37, 39, 44, 45, 50, 52, 57, 60, 64, 66,\n       74, 78, 80, 82, 85, 90, 96, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 7, 4, 3, 3, 3, 5, 4, 2, 5, 1, 4, 2, 5, 3, 4, 2, 7, 4, 2, 2, 3,\n       5, 5, 1, 3])",
                "res": "array([7, 4, 3, 3, 3, 5, 4, 2, 5, 1, 4, 2, 5, 3, 4, 2, 7, 4, 2, 2, 3, 5,\n       5, 1, 3])",
                "ri": "Index(['y', 'x', 'c', 'l', 'f', 'w', 'e', 'v', 'u', 'i', 'q', 'd', 'h', 'p',\n       't', 'b', 'o', 'k', 'a', 'g', 's', 'j', 'n', 'm', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    7\nx    4\nc    3\nl    3\nf    3\nw    5\ne    4\nv    2\nu    5\ni    1\nq    4\nd    2\nh    5\np    3\nt    4\nb    2\no    7\nk    4\na    2\ng    2\ns    3\nj    5\nn    5\nm    1\nr    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16eac0>",
                "self.obj": "0     75.0\n1     81.0\n2     39.0\n3     26.0\n4     50.0\n      ... \n95    73.0\n96     8.0\n97    50.0\n98    28.0\n99    29.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  3,  4,  5,  6,\n        7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22,\n       23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38,\n       38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 55, 56, 57, 58, 59, 59, 60, 61, 61, 62, 63, 64, 65, 66, 67,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81])",
                "_": "array([75., 81., 39., 26., 50.,  9., 11.,  5., 53., 86., 51., 88., 17.,\n       25., 85., 69., 80., 15.,  2., 76., 40., 35., 70., 27., 46., 43.,\n       78., 71.,  7.,  4., 56., 29., 16., 49., 59., 12., 95., 31., 47.,\n       57., 19., 91., 68., 61., 74., 41., 79., 48., 96., 83., 64.,  3.,\n       98., 23., 72., 24., 99., 73.,  8., 28.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 13, 14, 25, 28, 35, 42, 52,  0,  2, -1,  4,  5,  6, -1, -1,\n       -1,  7,  8,  8,  9, 10, 11, 12,  1, 14, 15,  4, 16, 17, -1, 18, 19,\n       -1, -1, -1, 20, 21, 22, 23, 16, 24,  5, 26, 13, 25, 27, 29, 30, 31,\n       40, 32, -1, -1, 22, 59, 33, 21, 34, 36, 21, 34, 37, 38,  7, 39, 10,\n        5,  8, 51, -1, -1, 41,  6, 37, 43, 33, 44, 45, 46, 47, 48, 49,  9,\n       50, 25, -1, -1, -1, 43, 53, 21, 54, 55, 56, 57, 58,  4, 31])",
                "sorter": "array([ 1,  3, 18, 77, 35, 40, 52, 69, 86,  0,  2, 64,  4,  5,  6,  7,  8,\n        9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 46, 24, 25,\n       26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 93, 39, 41, 42, 43,\n       60, 44, 45, 47, 48, 98, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61,\n       62, 63, 81, 65, 66, 67, 75, 68, 70, 79, 71, 72, 73, 74, 76, 78, 92,\n       80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 99])",
                "idx": "array([ 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84,\n       86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (82,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-25    1\nx    2015-08-29    1\nl    2015-08-28    2\nf    2015-08-30    1\nw    2015-08-23    1\n                  ..\nt    2015-08-28    1\ne    2015-08-25    1\nw    2015-08-26    1\ns    2015-08-27    1\ny    2015-08-24    1\nName: julie, Length: 82, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e0d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e9a0>",
                "self.obj": "0      71\n1      41\n2      11\n3      86\n4      23\n       ..\n995    40\n996     2\n997    28\n998    23\n999     7\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([71, 41, 11, 86, 23, 27, 22, 51, 15, 97, 25, 68, 90, 32, 18,  7, 40,\n        2,  4, 66, 92,  8, 64, 36, 17, 20, 44, 47, 56, 81,  3, 65, 54, 76,\n       74, 49, 62, 67, 96, 39, 60, 37, 13, 43, 99, 16, 63, 48, 33, 61, 38,\n       73, 58, 21, 88, 34,  6, 82, 85, 19, 45, 84, 28, 42, 59, 95, 75, 80,\n       30, 69, 83, 94, 10, 79, 72, 12, 78, 52,  9, 31, 46, 91,  1, 87, 57,\n       93, 24, 53, 26, 29,  5, 55,  0, 98, 89, 50, 14, 70, 77, 35])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  36,  77, 108, 147, 197, 240, 290, 338, 379, 414, 440, 476,\n       520, 558, 598, 644, 682, 714, 756, 797, 827, 863, 899, 925, 971])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([27, 36, 27, 31, 39, 36, 42, 36, 34, 30, 24, 30, 34, 29, 33, 34, 34,\n       24, 33, 37, 27, 29, 28, 24, 34, 23])",
                "res": "array([27, 36, 27, 31, 39, 36, 42, 36, 34, 30, 24, 30, 34, 29, 33, 34, 34,\n       24, 33, 37, 27, 29, 28, 24, 34, 23])",
                "ri": "Index(['a', 'o', 'r', 'j', 'q', 'w', 'y', 's', 'b', 'u', 'l', 'i', 'p', 'k',\n       'x', 'f', 'h', 'c', 'z', 'm', 'v', 't', 'd', 'n', 'e', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    27\no    36\nr    27\nj    31\nq    39\nw    36\ny    42\ns    36\nb    34\nu    30\nl    24\ni    30\np    34\nk    29\nx    33\nf    34\nh    34\nc    24\nz    33\nm    37\nv    27\nt    29\nd    28\nn    24\ne    34\ng    23\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e0d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16eac0>",
                "self.obj": "0      71\n1      41\n2      11\n3      86\n4      23\n       ..\n995    40\n996     2\n997    28\n998    23\n999     7\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([71, 41, 11, 86, 23, 27, 22, 51, 15, 97, 25, 68, 90, 32, 18,  7, 40,\n        2,  4, 66, 92,  8, 64, 36, 17, 20, 44, 47, 56, 81,  3, 65, 54, 76,\n       74, 49, 62, 67, 96, 39, 60, 37, 13, 43, 99, 16, 63, 48, 33, 61, 38,\n       73, 58, 21, 88, 34,  6, 82, 85, 19, 45, 84, 28, 42, 59, 95, 75, 80,\n       30, 69, 83, 94, 10, 79, 72, 12, 78, 52,  9, 31, 46, 91,  1, 87, 57,\n       93, 24, 53, 26, 29,  5, 55,  0, 98, 89, 50, 14, 70, 77, 35])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (256,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (256,)",
                "res": "array of shape (256,)",
                "ri": "array of shape (256,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-29    4\no    2015-08-31    5\nr    2015-08-23    3\nj    2015-08-28    6\nq    2015-08-31    9\n                  ..\nc    2015-08-26    1\nk    2015-08-30    1\nr    2015-08-31    1\nv    2015-08-30    1\nb    2015-08-24    2\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f61c0>",
                "self.obj": "0      71.0\n1      41.0\n2      11.0\n3      86.0\n4      23.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    23.0\n999     7.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  92, 123, 159, 208, 249, 298, 345, 383, 416, 441, 484, 520,\n       555, 596, 633, 669, 696, 738, 778, 810, 839, 873, 906, 930, 973])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([40, 23, 20, 28, 33, 29, 35, 32, 28, 23, 21, 33, 27, 24, 30, 32, 26,\n       19, 31, 29, 23, 22, 24, 19, 20, 33, 22])",
                "res": "array([23, 20, 28, 33, 29, 35, 32, 28, 23, 21, 33, 27, 24, 30, 32, 26, 19,\n       31, 29, 23, 22, 24, 19, 20, 33, 22])",
                "ri": "Index(['a', 'r', 'j', 'q', 'w', 'y', 's', 'b', 'u', 'l', 'p', 'k', 'x', 'f',\n       'o', 'h', 'c', 'z', 'm', 'i', 'v', 't', 'd', 'n', 'e', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    23\nr    20\nj    28\nq    33\nw    29\ny    35\ns    32\nb    28\nu    23\nl    21\np    33\nk    27\nx    24\nf    30\no    32\nh    26\nc    19\nz    31\nm    29\ni    23\nv    22\nt    24\nd    19\nn    20\ne    33\ng    22\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f62e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6700>",
                "self.obj": "0      71.0\n1      41.0\n2      11.0\n3      86.0\n4      23.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    23.0\n999     7.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-29    2\nr    2015-08-23    2\nq    2015-08-31    8\nw    2015-09-01    7\ny    2015-08-31    5\n                  ..\ni    2015-09-01    1\nk    2015-08-30    1\nr    2015-08-31    1\nv    2015-08-30    1\nb    2015-08-24    2\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f67c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6bb0>",
                "self.obj": "0      71.0\n1      41.0\n2      11.0\n3      86.0\n4      23.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    23.0\n999     7.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  92, 123, 159, 208, 249, 298, 345, 383, 416, 441, 484, 520,\n       555, 596, 633, 669, 696, 738, 778, 810, 839, 873, 906, 930, 973])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([40, 23, 20, 28, 33, 29, 35, 32, 28, 23, 21, 33, 27, 24, 30, 32, 26,\n       19, 31, 29, 23, 22, 24, 19, 20, 33, 22])",
                "res": "array([23, 20, 28, 33, 29, 35, 32, 28, 23, 21, 33, 27, 24, 30, 32, 26, 19,\n       31, 29, 23, 22, 24, 19, 20, 33, 22])",
                "ri": "Index(['a', 'r', 'j', 'q', 'w', 'y', 's', 'b', 'u', 'l', 'p', 'k', 'x', 'f',\n       'o', 'h', 'c', 'z', 'm', 'i', 'v', 't', 'd', 'n', 'e', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    23\nr    20\nj    28\nq    33\nw    29\ny    35\ns    32\nb    28\nu    23\nl    21\np    33\nk    27\nx    24\nf    30\no    32\nh    26\nc    19\nz    31\nm    29\ni    23\nv    22\nt    24\nd    19\nn    20\ne    33\ng    22\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f68b0>",
                "self.obj": "0      71.0\n1      41.0\n2      11.0\n3      86.0\n4      23.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    23.0\n999     7.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-29    2\nr    2015-08-23    2\nq    2015-08-31    8\nw    2015-09-01    7\ny    2015-08-31    5\n                  ..\ni    2015-09-01    1\nk    2015-08-30    1\nr    2015-08-31    1\nv    2015-08-30    1\nb    2015-08-24    2\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6d60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6610>",
                "self.obj": "0       45\n1       57\n2       49\n3       84\n4       79\n        ..\n9995    61\n9996    55\n9997     4\n9998    64\n9999    30\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([45, 57, 49, 84, 79, 33, 91, 52, 29, 17,  2, 55, 39, 93, 63, 13, 19,\n        1, 65, 32, 46, 88, 15, 83, 78, 92, 94, 77, 10, 67, 85, 21, 25, 24,\n       47, 51,  0, 96, 60, 99, 30, 73, 14, 37,  8, 22, 68, 54, 11, 62, 80,\n       64, 20,  5, 95, 16, 35, 42, 48,  4, 76, 28, 56,  9, 12, 31, 44,  7,\n       82, 90, 27,  6, 81, 26, 34, 74,  3, 43, 98, 72, 59, 53, 61, 41, 18,\n       36, 50, 40, 86, 97, 75, 87, 38, 58, 69, 66, 89, 23, 71, 70])",
                "val": "array([45, 57, 49, ...,  4, 64, 30])",
                "codes": "array([ 0,  0,  0, ..., 98, 99, 99])",
                "sorter": "array([   0,  329, 2489, ..., 9153, 1796, 4307])",
                "idx": "array([   0,  391,  782, 1173, 1532, 1879, 2249, 2635, 3047, 3412, 3824,\n       4233, 4625, 5062, 5462, 5843, 6242, 6622, 7007, 7389, 7788, 8130,\n       8521, 8889, 9252, 9624])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100,  96,  98,  97,  97,  96,  96,  99, 100,  99,  99,  99,\n        97,  97,  98,  99,  95,  99, 100,  96,  99,  98,  94,  98,  98])",
                "res": "array([100, 100,  96,  98,  97,  97,  96,  96,  99, 100,  99,  99,  99,\n        97,  97,  98,  99,  95,  99, 100,  96,  99,  98,  94,  98,  98])",
                "ri": "Index(['q', 'm', 'y', 'u', 'p', 't', 'b', 'z', 'w', 'x', 'l', 's', 'r', 'c',\n       'a', 'g', 'i', 'd', 'n', 'k', 'f', 'e', 'j', 'o', 'h', 'v'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    100\nm    100\ny     96\nu     98\np     97\nt     97\nb     96\nz     96\nw     99\nx    100\nl     99\ns     99\nr     99\nc     97\na     97\ng     98\ni     99\nd     95\nn     99\nk    100\nf     96\ne     99\nj     98\no     94\nh     98\nv     98\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f67c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6520>",
                "self.obj": "0       45\n1       57\n2       49\n3       84\n4       79\n        ..\n9995    61\n9996    55\n9997     4\n9998    64\n9999    30\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([45, 57, 49, 84, 79, 33, 91, 52, 29, 17,  2, 55, 39, 93, 63, 13, 19,\n        1, 65, 32, 46, 88, 15, 83, 78, 92, 94, 77, 10, 67, 85, 21, 25, 24,\n       47, 51,  0, 96, 60, 99, 30, 73, 14, 37,  8, 22, 68, 54, 11, 62, 80,\n       64, 20,  5, 95, 16, 35, 42, 48,  4, 76, 28, 56,  9, 12, 31, 44,  7,\n       82, 90, 27,  6, 81, 26, 34, 74,  3, 43, 98, 72, 59, 53, 61, 41, 18,\n       36, 50, 40, 86, 97, 75, 87, 38, 58, 69, 66, 89, 23, 71, 70])",
                "val": "array([45, 57, 49, ...,  4, 64, 30])",
                "codes": "array([ 0,  3,  4, ..., 90, 93, 96])",
                "sorter": "array([   0, 7281,  299, ..., 2662, 3195, 4092])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 0, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-29    37\nm    2015-08-30    34\ny    2015-08-23    32\nu    2015-08-29    27\np    2015-09-01    30\n                   ..\nt    2015-09-01    20\nu    2015-08-30    29\nz    2015-08-31    35\ng    2015-08-25    36\nh    2015-08-26    27\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e336400>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e3368b0>",
                "self.obj": "0       45.0\n1       57.0\n2       49.0\n3       84.0\n4       79.0\n        ... \n9995    61.0\n9996    55.0\n9997     4.0\n9998    64.0\n9999    30.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([45., 57., 49., ...,  4., 64., 30.])",
                "codes": "array([-1, -1, -1, ..., 98, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 7497, 1796, 4307])",
                "idx": "array([ 589,  962, 1329, 1665, 1996, 2343, 2712, 3092, 3434, 3828, 4207,\n       4577, 4946, 5363, 5718, 6094, 6461, 6817, 7174, 7533, 7909, 8235,\n       8607, 8950, 9291, 9638])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([99, 96, 95, 97, 95, 94, 94, 94, 97, 99, 99, 99, 98, 98, 95, 96, 94,\n       99, 95, 98, 97, 92, 99, 95, 94, 95, 98])",
                "res": "array([96, 95, 97, 95, 94, 94, 94, 97, 99, 99, 99, 98, 98, 95, 96, 94, 99,\n       95, 98, 97, 92, 99, 95, 94, 95, 98])",
                "ri": "Index(['q', 'y', 'u', 'p', 't', 'b', 'z', 'w', 'x', 'l', 'm', 's', 'r', 'a',\n       'c', 'g', 'i', 'd', 'n', 'k', 'f', 'e', 'j', 'o', 'h', 'v'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    96\ny    95\nu    97\np    95\nt    94\nb    94\nz    94\nw    97\nx    99\nl    99\nm    99\ns    98\nr    98\na    95\nc    96\ng    94\ni    99\nd    95\nn    98\nk    97\nf    92\ne    99\nj    95\no    94\nh    95\nv    98\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e336bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e336ac0>",
                "self.obj": "0       45.0\n1       57.0\n2       49.0\n3       84.0\n4       79.0\n        ... \n9995    61.0\n9996    55.0\n9997     4.0\n9998    64.0\n9999    30.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([45., 57., 49., ...,  4., 64., 30.])",
                "codes": "array([-1, -1, -1, ..., 87, 87, 88])",
                "sorter": "array([ 103,  256,  273, ..., 6522, 6815, 3195])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-29    30\ny    2015-08-23    28\np    2015-09-01    22\nt    2015-08-23    23\nb    2015-08-31    24\n                   ..\nt    2015-09-01    16\nu    2015-08-30    26\ng    2015-08-25    29\nz    2015-08-31    30\nh    2015-08-26    22\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6f40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6d00>",
                "self.obj": "0       45.0\n1       57.0\n2       49.0\n3       84.0\n4       79.0\n        ... \n9995    61.0\n9996    55.0\n9997     4.0\n9998    64.0\n9999    30.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([45., 57., 49., ...,  4., 64., 30.])",
                "codes": "array([-1, -1, -1, ..., 98, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 7497, 1796, 4307])",
                "idx": "array([ 589,  962, 1329, 1665, 1996, 2343, 2712, 3092, 3434, 3828, 4207,\n       4577, 4946, 5363, 5718, 6094, 6461, 6817, 7174, 7533, 7909, 8235,\n       8607, 8950, 9291, 9638])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([99, 96, 95, 97, 95, 94, 94, 94, 97, 99, 99, 99, 98, 98, 95, 96, 94,\n       99, 95, 98, 97, 92, 99, 95, 94, 95, 98])",
                "res": "array([96, 95, 97, 95, 94, 94, 94, 97, 99, 99, 99, 98, 98, 95, 96, 94, 99,\n       95, 98, 97, 92, 99, 95, 94, 95, 98])",
                "ri": "Index(['q', 'y', 'u', 'p', 't', 'b', 'z', 'w', 'x', 'l', 'm', 's', 'r', 'a',\n       'c', 'g', 'i', 'd', 'n', 'k', 'f', 'e', 'j', 'o', 'h', 'v'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    96\ny    95\nu    97\np    95\nt    94\nb    94\nz    94\nw    97\nx    99\nl    99\nm    99\ns    98\nr    98\na    95\nc    96\ng    94\ni    99\nd    95\nn    98\nk    97\nf    92\ne    99\nj    95\no    94\nh    95\nv    98\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6130>",
                "self.obj": "0       45.0\n1       57.0\n2       49.0\n3       84.0\n4       79.0\n        ... \n9995    61.0\n9996    55.0\n9997     4.0\n9998    64.0\n9999    30.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([45., 57., 49., ...,  4., 64., 30.])",
                "codes": "array([-1, -1, -1, ..., 87, 87, 88])",
                "sorter": "array([ 103,  256,  273, ..., 6522, 6815, 3195])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-29    30\ny    2015-08-23    28\np    2015-09-01    22\nt    2015-08-23    23\nb    2015-08-31    24\n                   ..\nt    2015-09-01    16\nu    2015-08-30    26\ng    2015-08-25    29\nz    2015-08-31    30\nh    2015-08-26    22\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce820>",
                "self.obj": "0        37\n1        43\n2         6\n3        19\n4        22\n         ..\n99995     3\n99996    94\n99997    62\n99998    78\n99999    98\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([37, 43,  6, 19, 22, 73, 57, 84, 23, 36, 79, 24, 39, 27, 16, 26, 76,\n        4, 42, 89,  8, 70,  2, 59, 44, 71, 32, 20, 18, 34, 85, 92, 97, 12,\n       60, 94, 47, 25, 38, 21, 31, 53, 99, 66, 69, 10, 72, 56, 82, 52, 48,\n        9, 51, 74, 45, 87, 63, 50, 46, 62, 28,  0, 78, 67, 13, 68, 91,  3,\n       55,  7, 90, 17, 40, 14, 41,  5, 15, 95, 75, 96, 29,  1, 98, 61, 86,\n       83, 80, 54, 35, 11, 30, 93, 49, 88, 77, 64, 33, 81, 58, 65])",
                "val": "array([37, 43,  6, ..., 62, 78, 98])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([    0,  2669,  3249, ..., 97409, 97770, 99561])",
                "idx": "array([    0,  3924,  7616, 11442, 15325, 19205, 23084, 26862, 30866,\n       34636, 38396, 42190, 45995, 49806, 53707, 57567, 61472, 65312,\n       69151, 72996, 76735, 80605, 84547, 88477, 92331, 96185])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['e', 't', 'c', 'v', 'z', 's', 'a', 'f', 'p', 'y', 'k', 'b', 'q', 'n',\n       'x', 'j', 'h', 'w', 'm', 'l', 'i', 'g', 'u', 'd', 'o', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ne    100\nt    100\nc    100\nv    100\nz    100\ns    100\na    100\nf    100\np    100\ny    100\nk    100\nb    100\nq    100\nn    100\nx    100\nj    100\nh    100\nw    100\nm    100\nl    100\ni    100\ng    100\nu    100\nd    100\no    100\nr    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cea90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ceee0>",
                "self.obj": "0        37\n1        43\n2         6\n3        19\n4        22\n         ..\n99995     3\n99996    94\n99997    62\n99998    78\n99999    98\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([37, 43,  6, 19, 22, 73, 57, 84, 23, 36, 79, 24, 39, 27, 16, 26, 76,\n        4, 42, 89,  8, 70,  2, 59, 44, 71, 32, 20, 18, 34, 85, 92, 97, 12,\n       60, 94, 47, 25, 38, 21, 31, 53, 99, 66, 69, 10, 72, 56, 82, 52, 48,\n        9, 51, 74, 45, 87, 63, 50, 46, 62, 28,  0, 78, 67, 13, 68, 91,  3,\n       55,  7, 90, 17, 40, 14, 41,  5, 15, 95, 75, 96, 29,  1, 98, 61, 86,\n       83, 80, 54, 35, 11, 30, 93, 49, 88, 77, 64, 33, 81, 58, 65])",
                "val": "array([37, 43,  6, ..., 62, 78, 98])",
                "codes": "array([ 0,  0,  0, ..., 98, 99, 99])",
                "sorter": "array([    0,  2669,  9023, ..., 87551, 32650, 97450])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ne    2015-08-31    98\nt    2015-08-24    97\nc    2015-08-23    98\nv    2015-08-24    98\nz    2015-08-25    97\n                   ..\nq    2015-08-23    99\no    2015-08-23    99\nh    2015-08-31    93\nr    2015-08-25    99\nv    2015-08-28    99\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6100>",
                "self.obj": "0        37.0\n1        43.0\n2         6.0\n3        19.0\n4        22.0\n         ... \n99995     3.0\n99996    94.0\n99997    62.0\n99998    78.0\n99999    98.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([37., 43.,  6., ..., 62., 78., 98.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 91212, 93003, 94658])",
                "idx": "array([ 5883,  9566, 13187, 16834, 20467, 24117, 27688, 31443, 34985,\n       38534, 42108, 45701, 49294, 52932, 56605, 60203, 63809, 67449,\n       70985, 74636, 78325, 81971, 85671, 89304, 92938, 96522])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['e', 'c', 'v', 'z', 's', 'a', 'f', 'p', 'y', 'k', 'b', 'q', 'x', 'j',\n       'h', 'w', 'm', 'l', 'i', 'g', 'n', 'u', 'd', 'o', 'r', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ne    101\nc    101\nv    101\nz    101\ns    101\na    101\nf    101\np    101\ny    101\nk    101\nb    101\nq    101\nx    101\nj    101\nh    101\nw    101\nm    101\nl    101\ni    101\ng    101\nn    101\nu    101\nd    101\no    101\nr    101\nt    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6580>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f62b0>",
                "self.obj": "0        37.0\n1        43.0\n2         6.0\n3        19.0\n4        22.0\n         ... \n99995     3.0\n99996    94.0\n99997    62.0\n99998    78.0\n99999    98.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([37., 43.,  6., ..., 62., 78., 98.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 13607, 38652, 81787])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ne    2015-08-31    96\nc    2015-08-23    98\nz    2015-08-25    94\ns    2015-08-29    96\n     2015-08-26    96\n                   ..\nq    2015-08-23    99\no    2015-08-23    97\nh    2015-08-31    92\nr    2015-08-25    95\nv    2015-08-28    99\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cecd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2cea30>",
                "self.obj": "0        37.0\n1        43.0\n2         6.0\n3        19.0\n4        22.0\n         ... \n99995     3.0\n99996    94.0\n99997    62.0\n99998    78.0\n99999    98.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([37., 43.,  6., ..., 62., 78., 98.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 91212, 93003, 94658])",
                "idx": "array([ 5883,  9566, 13187, 16834, 20467, 24117, 27688, 31443, 34985,\n       38534, 42108, 45701, 49294, 52932, 56605, 60203, 63809, 67449,\n       70985, 74636, 78325, 81971, 85671, 89304, 92938, 96522])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['e', 'c', 'v', 'z', 's', 'a', 'f', 'p', 'y', 'k', 'b', 'q', 'x', 'j',\n       'h', 'w', 'm', 'l', 'i', 'g', 'n', 'u', 'd', 'o', 'r', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ne    101\nc    101\nv    101\nz    101\ns    101\na    101\nf    101\np    101\ny    101\nk    101\nb    101\nq    101\nx    101\nj    101\nh    101\nw    101\nm    101\nl    101\ni    101\ng    101\nn    101\nu    101\nd    101\no    101\nr    101\nt    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cea30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce6d0>",
                "self.obj": "0        37.0\n1        43.0\n2         6.0\n3        19.0\n4        22.0\n         ... \n99995     3.0\n99996    94.0\n99997    62.0\n99998    78.0\n99999    98.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([37., 43.,  6., ..., 62., 78., 98.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 13607, 38652, 81787])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ne    2015-08-31    96\nc    2015-08-23    98\nz    2015-08-25    94\ns    2015-08-29    96\n     2015-08-26    96\n                   ..\nq    2015-08-23    99\no    2015-08-23    97\nh    2015-08-31    92\nr    2015-08-25    95\nv    2015-08-28    99\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f65b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6910>",
                "self.obj": "0     795\n1     388\n2     757\n3     584\n4     414\n     ... \n95    107\n96    625\n97    276\n98    581\n99    157\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,\n        3,  3,  4,  4,  5,  5,  5,  5,  5,  6,  7,  7,  7,  7,  7,  7,  8,\n        8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 11, 11, 11, 11,\n       11, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16,\n       16, 16, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20,\n       21, 21, 21, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 25, 25])",
                "_": "array of shape (96,)",
                "val": "array of shape (100,)",
                "codes": "array([ 0,  4,  7, 23, 60,  1, 10, 26, 35, 38, 64, 75,  2, 25, 50, 66,  3,\n       27, 90,  5, 86,  6, 31, 80, 87, 88,  8,  9, 46, 49, 67, 72, 94,  4,\n       11, 22, 54, 61, 79, 12, 33, 52, 78, 13, 34, 13, 14, 58, 59, 62, 70,\n       84, 15, 16, 17, 19, 30, 39, 63, 18, 65, 20, 37, 77, 95, 21, 40, 73,\n       82, 83, 24, 29, 28, 42, 44, 48, 57, 92, 32, 69, 91, 93, 36, 74, 81,\n       24, 41, 47, 43, 45, 56, 51, 64, 53, 68, 76, 85, 55, 71, 89])",
                "sorter": "array([ 0,  4,  7, 24, 62,  1, 10, 27, 36, 39, 66, 78,  2, 26, 52, 69,  3,\n       28, 94,  5, 90,  6, 32, 84, 91, 92,  8,  9, 48, 51, 70, 75, 98, 16,\n       11, 23, 56, 63, 82, 12, 34, 54, 81, 13, 35, 41, 14, 60, 61, 64, 73,\n       88, 15, 17, 18, 20, 31, 40, 65, 19, 67, 21, 38, 80, 99, 22, 42, 76,\n       86, 87, 25, 30, 29, 44, 46, 50, 59, 96, 33, 72, 95, 97, 37, 77, 85,\n       68, 43, 49, 45, 47, 58, 53, 83, 55, 71, 79, 89, 57, 74, 93])",
                "idx": "array([ 0,  5, 12, 16, 19, 21, 26, 27, 33, 39, 43, 45, 52, 53, 59, 61, 65,\n       70, 72, 78, 82, 85, 88, 91, 93, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 7, 4, 3, 2, 5, 1, 6, 6, 4, 2, 7, 1, 6, 2, 4, 5, 2, 6, 4, 3, 3,\n       3, 2, 4, 3])",
                "res": "array([5, 7, 4, 3, 2, 5, 1, 6, 6, 4, 2, 7, 1, 6, 2, 4, 5, 2, 6, 4, 3, 3,\n       3, 2, 4, 3])",
                "ri": "Index(['l', 'o', 'k', 'v', 's', 'w', 'u', 'f', 'c', 'g', 'q', 'm', 'x', 'i',\n       'z', 'n', 'b', 'j', 'a', 'd', 'r', 'e', 'h', 'y', 'p', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    5\no    7\nk    4\nv    3\ns    2\nw    5\nu    1\nf    6\nc    6\ng    4\nq    2\nm    7\nx    1\ni    6\nz    2\nn    4\nb    5\nj    2\na    6\nd    4\nr    3\ne    3\nh    3\ny    2\np    4\nt    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6250>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6d60>",
                "self.obj": "0     795\n1     388\n2     757\n3     584\n4     414\n     ... \n95    107\n96    625\n97    276\n98    581\n99    157\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  2,  3,  4,  4,  5,  6,  7,  8,  8,  9,  9, 10, 11, 12,\n       13, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 25,\n       26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 39, 40,\n       41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 52, 52, 53,\n       54, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 80, 81, 82])",
                "_": "array of shape (96,)",
                "val": "array of shape (100,)",
                "codes": "array([ 0,  7,  1,  2,  3,  4, 23,  5,  6,  8,  9, 94, 10, 35, 11, 12, 13,\n       14, 84, 15,  4, 16, 63, 17, 18, 19, 20, 21, 83, 22, 24, 25, 26, 64,\n       27, 28, 57, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 13, 40, 73, 41,\n       42, 43, 56, 44, 45, 46, 47, 48, 49, 50, 51, 64, 52, 53, 68, 85, 54,\n       55, 71, 89, 58, 59, 60, 61, 62, 65, 24, 66, 67, 69, 70, 72, 74, 75,\n       76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 90, 91, 93, 92, 95])",
                "sorter": "array([ 0,  7,  1,  2,  3,  4, 24,  5,  6,  8,  9, 98, 10, 36, 11, 12, 13,\n       14, 88, 15, 16, 17, 65, 18, 19, 20, 21, 22, 87, 23, 25, 26, 27, 66,\n       28, 29, 59, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 76, 43,\n       44, 45, 58, 46, 47, 48, 49, 50, 51, 52, 53, 83, 54, 55, 71, 89, 56,\n       57, 74, 93, 60, 61, 62, 63, 64, 67, 68, 69, 70, 72, 73, 75, 77, 78,\n       79, 80, 81, 82, 84, 85, 86, 90, 91, 92, 94, 95, 97, 96, 99])",
                "idx": "array([ 0,  2,  3,  4,  5,  7,  8,  9, 10, 12, 14, 15, 16, 17, 19, 20, 21,\n       23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42,\n       43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61,\n       63, 64, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "res": "array([2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "ri": "array of shape (83,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nl    2015-08-29    2\no    2015-08-25    1\nk    2015-08-28    1\nv    2015-09-01    1\nl    2015-08-28    2\n                  ..\nw    2015-08-28    1\nv    2015-08-29    1\nd    2015-08-23    2\na    2015-08-24    1\nn    2015-09-01    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cefa0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ceca0>",
                "self.obj": "0     795.0\n1     388.0\n2     757.0\n3     584.0\n4     414.0\n      ...  \n95    107.0\n96    625.0\n97    276.0\n98    581.0\n99    157.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  3,\n        3,  4,  4,  4,  4,  4,  5,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,\n        7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 11, 11, 11, 11,\n       11, 11, 11, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16,\n       16, 16, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20,\n       21, 21, 21, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 25, 25])",
                "_": "array of shape (82,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 14, 28, 41, 54, 68, -1,  0,  4, 20, 51, -1,  2, -1,  3, 76,  5,\n       72, -1,  6, 25, 73, 74, -1, -1, 37, 40, 55, 60, 80, -1, -1,  7, 29,\n       32, 63,  4,  8, 19, 45, 52, 67,  9, 27, 43, 66, 10, -1, 10, 11, 49,\n       50, 58, 70, 12, -1, 13, 16, 24, 33, 15, 53, 17, 31, 65, 81, 18, 34,\n       61, 69, 21, 23, -1, 22, 36, 39, 48, 78, 26, 57, 77, 79, -1, 30, 62,\n       21, 35, 38, -1, -1, 47, -1, 42, 44, 56, 64, 71, 46, 59, 75])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86,  7,  0,  4, 24, 62, 26,  2, 28,  3, 94,  5,\n       90, 84,  6, 32, 91, 92,  8,  9, 48, 51, 70, 75, 98, 27, 66, 10, 36,\n       39, 78, 16, 11, 23, 56, 63, 82, 12, 34, 54, 81, 13, 64, 41, 14, 60,\n       61, 73, 88, 15, 65, 17, 20, 31, 40, 19, 67, 21, 38, 80, 99, 22, 42,\n       76, 87, 25, 30, 46, 29, 44, 50, 59, 96, 33, 72, 95, 97, 85, 37, 77,\n       68, 43, 49, 45, 47, 58, 83, 53, 55, 71, 79, 89, 57, 74, 93])",
                "idx": "array([ 6, 11, 13, 16, 18, 23, 24, 30, 36, 42, 46, 47, 54, 55, 60, 62, 66,\n       70, 72, 78, 82, 85, 88, 91, 93, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 5, 2, 3, 2, 5, 1, 6, 5, 6, 4, 1, 7, 1, 5, 2, 4, 4, 2, 6, 4, 3,\n       3, 2, 2, 4, 3])",
                "res": "array([5, 2, 3, 2, 5, 1, 6, 5, 6, 4, 1, 7, 1, 5, 2, 4, 4, 2, 6, 4, 3, 3,\n       2, 2, 4, 3])",
                "ri": "Index(['l', 'k', 'v', 's', 'w', 'u', 'f', 'o', 'c', 'g', 'q', 'm', 'x', 'i',\n       'z', 'n', 'b', 'j', 'a', 'd', 'r', 'e', 'h', 'y', 'p', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    5\nk    2\nv    3\ns    2\nw    5\nu    1\nf    6\no    5\nc    6\ng    4\nq    1\nm    7\nx    1\ni    5\nz    2\nn    4\nb    4\nj    2\na    6\nd    4\nr    3\ne    3\nh    2\ny    2\np    4\nt    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cecd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce2e0>",
                "self.obj": "0     795.0\n1     388.0\n2     757.0\n3     584.0\n4     414.0\n      ...  \n95    107.0\n96    625.0\n97    276.0\n98    581.0\n99    157.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  2,  3,  4,  5,\n        6,  6,  7,  7,  8,  9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 17, 18,\n       18, 19, 20, 21, 22, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 44, 45, 46,\n       46, 46, 47, 48, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71, 72, 73])",
                "_": "array of shape (82,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 14, 28, 33, 41, 54, 62, 68, -1,  0,  2,  4, 20,  5,  6, -1,\n       -1, 80,  7, 29,  8,  9, 10, 11, 70, 12,  4, -1, 13, 15, 16, 17, 18,\n       69, 19, 21, -1, -1, -1, -1, 22, 48, 23, 24, 25, 26, 27, 30, 31, 32,\n       10, 34, 61, 35, 36, -1, 47, -1, -1, 37, 38, 39, 40, -1, 42, 43, 44,\n       56, 71, 45, 46, 59, 75, 49, 50, 51, 52, -1, 53, 21, 55, 57, 58, 60,\n       63, 64, 65, 66, 67, -1, -1, 72, 73, 74, 76, 77, 79, 78, 81])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  7,  0,  2,  4, 24,  5,  6,  8,\n        9, 98, 10, 36, 11, 12, 13, 14, 88, 15, 16, 65, 17, 19, 20, 21, 22,\n       87, 23, 25, 26, 27, 66, 28, 29, 59, 30, 31, 32, 33, 34, 37, 38, 39,\n       41, 42, 76, 43, 44, 45, 58, 46, 47, 48, 49, 50, 51, 83, 53, 54, 55,\n       71, 89, 56, 57, 74, 93, 60, 61, 62, 63, 64, 67, 68, 70, 72, 73, 75,\n       78, 79, 80, 81, 82, 84, 85, 90, 91, 92, 94, 95, 97, 96, 99])",
                "idx": "array([ 9, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31,\n       32, 33, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70, 71, 74, 75,\n       76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\n       93, 94, 95, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 2, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "res": "array([2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       2, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1])",
                "ri": "array of shape (74,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nl    2015-08-29    2\nk    2015-08-28    1\nl    2015-08-28    2\ns    2015-08-30    1\nw    2015-08-25    1\n                  ..\n     2015-08-28    1\nv    2015-08-29    1\nd    2015-08-23    2\na    2015-08-24    1\nn    2015-09-01    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce2e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbd60>",
                "self.obj": "0     795.0\n1     388.0\n2     757.0\n3     584.0\n4     414.0\n      ...  \n95    107.0\n96    625.0\n97    276.0\n98    581.0\n99    157.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  3,\n        3,  4,  4,  4,  4,  4,  5,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,\n        7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 11, 11, 11, 11,\n       11, 11, 11, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16,\n       16, 16, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20,\n       21, 21, 21, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 25, 25])",
                "_": "array of shape (82,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 14, 28, 41, 54, 68, -1,  0,  4, 20, 51, -1,  2, -1,  3, 76,  5,\n       72, -1,  6, 25, 73, 74, -1, -1, 37, 40, 55, 60, 80, -1, -1,  7, 29,\n       32, 63,  4,  8, 19, 45, 52, 67,  9, 27, 43, 66, 10, -1, 10, 11, 49,\n       50, 58, 70, 12, -1, 13, 16, 24, 33, 15, 53, 17, 31, 65, 81, 18, 34,\n       61, 69, 21, 23, -1, 22, 36, 39, 48, 78, 26, 57, 77, 79, -1, 30, 62,\n       21, 35, 38, -1, -1, 47, -1, 42, 44, 56, 64, 71, 46, 59, 75])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86,  7,  0,  4, 24, 62, 26,  2, 28,  3, 94,  5,\n       90, 84,  6, 32, 91, 92,  8,  9, 48, 51, 70, 75, 98, 27, 66, 10, 36,\n       39, 78, 16, 11, 23, 56, 63, 82, 12, 34, 54, 81, 13, 64, 41, 14, 60,\n       61, 73, 88, 15, 65, 17, 20, 31, 40, 19, 67, 21, 38, 80, 99, 22, 42,\n       76, 87, 25, 30, 46, 29, 44, 50, 59, 96, 33, 72, 95, 97, 85, 37, 77,\n       68, 43, 49, 45, 47, 58, 83, 53, 55, 71, 79, 89, 57, 74, 93])",
                "idx": "array([ 6, 11, 13, 16, 18, 23, 24, 30, 36, 42, 46, 47, 54, 55, 60, 62, 66,\n       70, 72, 78, 82, 85, 88, 91, 93, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 5, 2, 3, 2, 5, 1, 6, 5, 6, 4, 1, 7, 1, 5, 2, 4, 4, 2, 6, 4, 3,\n       3, 2, 2, 4, 3])",
                "res": "array([5, 2, 3, 2, 5, 1, 6, 5, 6, 4, 1, 7, 1, 5, 2, 4, 4, 2, 6, 4, 3, 3,\n       2, 2, 4, 3])",
                "ri": "Index(['l', 'k', 'v', 's', 'w', 'u', 'f', 'o', 'c', 'g', 'q', 'm', 'x', 'i',\n       'z', 'n', 'b', 'j', 'a', 'd', 'r', 'e', 'h', 'y', 'p', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    5\nk    2\nv    3\ns    2\nw    5\nu    1\nf    6\no    5\nc    6\ng    4\nq    1\nm    7\nx    1\ni    5\nz    2\nn    4\nb    4\nj    2\na    6\nd    4\nr    3\ne    3\nh    2\ny    2\np    4\nt    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6e50>",
                "self.obj": "0     795.0\n1     388.0\n2     757.0\n3     584.0\n4     414.0\n      ...  \n95    107.0\n96    625.0\n97    276.0\n98    581.0\n99    157.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  2,  3,  4,  5,\n        6,  6,  7,  7,  8,  9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 17, 18,\n       18, 19, 20, 21, 22, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 44, 45, 46,\n       46, 46, 47, 48, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71, 72, 73])",
                "_": "array of shape (82,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 14, 28, 33, 41, 54, 62, 68, -1,  0,  2,  4, 20,  5,  6, -1,\n       -1, 80,  7, 29,  8,  9, 10, 11, 70, 12,  4, -1, 13, 15, 16, 17, 18,\n       69, 19, 21, -1, -1, -1, -1, 22, 48, 23, 24, 25, 26, 27, 30, 31, 32,\n       10, 34, 61, 35, 36, -1, 47, -1, -1, 37, 38, 39, 40, -1, 42, 43, 44,\n       56, 71, 45, 46, 59, 75, 49, 50, 51, 52, -1, 53, 21, 55, 57, 58, 60,\n       63, 64, 65, 66, 67, -1, -1, 72, 73, 74, 76, 77, 79, 78, 81])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  7,  0,  2,  4, 24,  5,  6,  8,\n        9, 98, 10, 36, 11, 12, 13, 14, 88, 15, 16, 65, 17, 19, 20, 21, 22,\n       87, 23, 25, 26, 27, 66, 28, 29, 59, 30, 31, 32, 33, 34, 37, 38, 39,\n       41, 42, 76, 43, 44, 45, 58, 46, 47, 48, 49, 50, 51, 83, 53, 54, 55,\n       71, 89, 56, 57, 74, 93, 60, 61, 62, 63, 64, 67, 68, 70, 72, 73, 75,\n       78, 79, 80, 81, 82, 84, 85, 90, 91, 92, 94, 95, 97, 96, 99])",
                "idx": "array([ 9, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31,\n       32, 33, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70, 71, 74, 75,\n       76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\n       93, 94, 95, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 2, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "res": "array([2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       2, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1])",
                "ri": "array of shape (74,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nl    2015-08-29    2\nk    2015-08-28    1\nl    2015-08-28    2\ns    2015-08-30    1\nw    2015-08-25    1\n                  ..\n     2015-08-28    1\nv    2015-08-29    1\nd    2015-08-23    2\na    2015-08-24    1\nn    2015-09-01    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e0d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16eac0>",
                "self.obj": "0      119\n1      648\n2      471\n3      531\n4      543\n      ... \n995    600\n996    923\n997    557\n998    908\n999     42\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (632,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  35,  82, 114, 163, 201, 246, 283, 326, 365, 400, 449, 488,\n       525, 553, 598, 647, 683, 718, 751, 790, 832, 868, 911, 943, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([34, 47, 32, 49, 38, 45, 36, 41, 39, 34, 46, 38, 36, 28, 45, 49, 35,\n       35, 33, 39, 42, 36, 41, 31, 24, 32])",
                "res": "array([34, 47, 32, 49, 38, 45, 36, 41, 39, 34, 46, 38, 36, 28, 45, 49, 35,\n       35, 33, 39, 42, 36, 41, 31, 24, 32])",
                "ri": "Index(['n', 'k', 't', 'm', 'o', 'z', 'h', 'y', 'f', 'a', 'q', 'w', 'v', 'p',\n       'i', 'j', 'b', 'd', 'r', 'e', 'u', 'c', 'g', 'x', 'l', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nn    34\nk    47\nt    32\nm    49\no    38\nz    45\nh    36\ny    41\nf    39\na    34\nq    46\nw    38\nv    36\np    28\ni    45\nj    49\nb    35\nd    35\nr    33\ne    39\nu    42\nc    36\ng    41\nx    31\nl    24\ns    32\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e0d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e460>",
                "self.obj": "0      119\n1      648\n2      471\n3      531\n4      543\n      ... \n995    600\n996    923\n997    557\n998    908\n999     42\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (632,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nn    2015-08-27    4\nk    2015-08-24    5\nt    2015-08-26    5\nm    2015-08-24    4\no    2015-08-28    4\n                  ..\nk    2015-08-26    1\nl    2015-08-27    1\n     2015-08-25    1\nh    2015-08-26    2\no    2015-09-01    1\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6d30>",
                "self.obj": "0      119.0\n1      648.0\n2      471.0\n3      531.0\n4      543.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    908.0\n999     42.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (562,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  93, 124, 172, 209, 251, 295, 330, 371, 407, 440, 487, 525,\n       551, 592, 639, 675, 706, 737, 774, 812, 846, 878, 917, 946, 971])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([50, 32, 28, 40, 33, 36, 37, 28, 33, 31, 25, 43, 32, 23, 40, 40, 32,\n       28, 27, 31, 34, 32, 28, 29, 21, 24, 21])",
                "res": "array([32, 28, 40, 33, 36, 37, 28, 33, 31, 25, 43, 32, 23, 40, 40, 32, 28,\n       27, 31, 34, 32, 28, 29, 21, 24, 21])",
                "ri": "Index(['n', 't', 'm', 'o', 'z', 'k', 'h', 'y', 'f', 'a', 'q', 'w', 'p', 'i',\n       'j', 'b', 'd', 'r', 'e', 'u', 'c', 'v', 'g', 'x', 'l', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nn    32\nt    28\nm    40\no    33\nz    36\nk    37\nh    28\ny    33\nf    31\na    25\nq    43\nw    32\np    23\ni    40\nj    40\nb    32\nd    28\nr    27\ne    31\nu    34\nc    32\nv    28\ng    29\nx    21\nl    24\ns    21\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6a00>",
                "self.obj": "0      119.0\n1      648.0\n2      471.0\n3      531.0\n4      543.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    908.0\n999     42.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (562,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (251,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (252,)",
                "res": "array of shape (251,)",
                "ri": "array of shape (251,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nn    2015-08-27    4\nt    2015-08-26    5\no    2015-08-28    4\nz    2015-08-23    4\nk    2015-09-01    2\n                  ..\n     2015-08-26    1\nl    2015-08-27    1\n     2015-08-25    1\nh    2015-08-26    2\no    2015-09-01    1\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6a00>",
                "self.obj": "0      119.0\n1      648.0\n2      471.0\n3      531.0\n4      543.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    908.0\n999     42.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (562,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  93, 124, 172, 209, 251, 295, 330, 371, 407, 440, 487, 525,\n       551, 592, 639, 675, 706, 737, 774, 812, 846, 878, 917, 946, 971])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([50, 32, 28, 40, 33, 36, 37, 28, 33, 31, 25, 43, 32, 23, 40, 40, 32,\n       28, 27, 31, 34, 32, 28, 29, 21, 24, 21])",
                "res": "array([32, 28, 40, 33, 36, 37, 28, 33, 31, 25, 43, 32, 23, 40, 40, 32, 28,\n       27, 31, 34, 32, 28, 29, 21, 24, 21])",
                "ri": "Index(['n', 't', 'm', 'o', 'z', 'k', 'h', 'y', 'f', 'a', 'q', 'w', 'p', 'i',\n       'j', 'b', 'd', 'r', 'e', 'u', 'c', 'v', 'g', 'x', 'l', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nn    32\nt    28\nm    40\no    33\nz    36\nk    37\nh    28\ny    33\nf    31\na    25\nq    43\nw    32\np    23\ni    40\nj    40\nb    32\nd    28\nr    27\ne    31\nu    34\nc    32\nv    28\ng    29\nx    21\nl    24\ns    21\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e336a90>",
                "self.obj": "0      119.0\n1      648.0\n2      471.0\n3      531.0\n4      543.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    908.0\n999     42.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (562,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (251,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (252,)",
                "res": "array of shape (251,)",
                "ri": "array of shape (251,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nn    2015-08-27    4\nt    2015-08-26    5\no    2015-08-28    4\nz    2015-08-23    4\nk    2015-09-01    2\n                  ..\n     2015-08-26    1\nl    2015-08-27    1\n     2015-08-25    1\nh    2015-08-26    2\no    2015-09-01    1\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbeb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb4f0>",
                "self.obj": "0       670\n1       107\n2       439\n3        89\n4       927\n       ... \n9995    987\n9996    543\n9997    211\n9998    945\n9999    106\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([670, 107, 439, ..., 211, 945, 106])",
                "codes": "array([  0,   1,   4, ..., 979, 994, 995])",
                "sorter": "array([   0, 2940, 3076, ..., 9789, 8828, 7225])",
                "idx": "array([   0,  362,  778, 1120, 1478, 1860, 2234, 2581, 2971, 3336, 3735,\n       4114, 4525, 4950, 5338, 5729, 6112, 6488, 6889, 7315, 7705, 8101,\n       8465, 8850, 9244, 9616])",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([301, 334, 295, 316, 311, 318, 305, 334, 309, 330, 306, 344, 347,\n       323, 316, 318, 314, 327, 348, 335, 331, 313, 331, 314, 317, 326])",
                "res": "array([301, 334, 295, 316, 311, 318, 305, 334, 309, 330, 306, 344, 347,\n       323, 316, 318, 314, 327, 348, 335, 331, 313, 331, 314, 317, 326])",
                "ri": "Index(['r', 'g', 'p', 'h', 'e', 'i', 'q', 'o', 't', 'w', 'k', 'l', 'n', 'u',\n       'v', 'b', 'z', 'y', 'a', 'f', 'j', 'd', 'm', 's', 'x', 'c'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    301\ng    334\np    295\nh    316\ne    311\ni    318\nq    305\no    334\nt    309\nw    330\nk    306\nl    344\nn    347\nu    323\nv    316\nb    318\nz    314\ny    327\na    348\nf    335\nj    331\nd    313\nm    331\ns    314\nx    317\nc    326\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb4c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb6d0>",
                "self.obj": "0       670\n1       107\n2       439\n3        89\n4       927\n       ... \n9995    987\n9996    543\n9997    211\n9998    945\n9999    106\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([670, 107, 439, ..., 211, 945, 106])",
                "codes": "array([  0,  14,  31, ..., 933, 950, 970])",
                "sorter": "array([   0, 9254, 2010, ..., 3941, 5026, 9047])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    30\ng    2015-08-30    31\np    2015-08-30    42\nh    2015-08-28    37\ne    2015-08-28    39\n                   ..\nr    2015-08-25    34\nm    2015-08-27    24\na    2015-08-29    41\nd    2015-08-28    25\ns    2015-09-01    36\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16ee50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16ed30>",
                "self.obj": "0       670.0\n1       107.0\n2       439.0\n3        89.0\n4       927.0\n        ...  \n9995    987.0\n9996    543.0\n9997    211.0\n9998    945.0\n9999    106.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([670., 107., 439., ..., 211., 945., 106.])",
                "codes": "array([ -1,  -1,  -1, ..., 975, 977, 983])",
                "sorter": "array([ 103,  256,  273, ..., 8650, 6626, 5230])",
                "idx": "array([ 589,  929, 1252, 1582, 1941, 2297, 2631, 2991, 3337, 3716, 4079,\n       4460, 4849, 5254, 5619, 5979, 6339, 6690, 7068, 7469, 7834, 8175,\n       8535, 8917, 9270, 9631])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([398, 252, 249, 247, 259, 268, 253, 269, 255, 262, 257, 282, 274,\n       292, 277, 260, 264, 251, 270, 282, 275, 255, 269, 266, 258, 273,\n       272])",
                "res": "array([252, 249, 247, 259, 268, 253, 269, 255, 262, 257, 282, 274, 292,\n       277, 260, 264, 251, 270, 282, 275, 255, 269, 266, 258, 273, 272])",
                "ri": "Index(['r', 'p', 'h', 'e', 'i', 'q', 'o', 't', 'w', 'k', 'l', 'g', 'n', 'u',\n       'v', 'b', 'z', 'y', 'a', 'j', 'd', 'm', 's', 'x', 'c', 'f'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    252\np    249\nh    247\ne    259\ni    268\nq    253\no    269\nt    255\nw    262\nk    257\nl    282\ng    274\nn    292\nu    277\nv    260\nb    264\nz    251\ny    270\na    282\nj    275\nd    255\nm    269\ns    266\nx    258\nc    273\nf    272\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16eac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e5e0>",
                "self.obj": "0       670.0\n1       107.0\n2       439.0\n3        89.0\n4       927.0\n        ...  \n9995    987.0\n9996    543.0\n9997    211.0\n9998    945.0\n9999    106.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([670., 107., 439., ..., 211., 945., 106.])",
                "codes": "array([ -1,  -1,  -1, ..., 859, 865, 927])",
                "sorter": "array([ 103,  256,  273, ..., 6826, 2569, 4448])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    22\np    2015-08-30    39\ne    2015-08-28    32\ni    2015-08-23    28\nq    2015-08-25    31\n                   ..\nm    2015-08-27    19\nr    2015-08-29    25\na    2015-08-29    28\ns    2015-09-01    29\nd    2015-08-28    16\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e970>",
                "self.obj": "0       670.0\n1       107.0\n2       439.0\n3        89.0\n4       927.0\n        ...  \n9995    987.0\n9996    543.0\n9997    211.0\n9998    945.0\n9999    106.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([670., 107., 439., ..., 211., 945., 106.])",
                "codes": "array([ -1,  -1,  -1, ..., 975, 977, 983])",
                "sorter": "array([ 103,  256,  273, ..., 8650, 6626, 5230])",
                "idx": "array([ 589,  929, 1252, 1582, 1941, 2297, 2631, 2991, 3337, 3716, 4079,\n       4460, 4849, 5254, 5619, 5979, 6339, 6690, 7068, 7469, 7834, 8175,\n       8535, 8917, 9270, 9631])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([398, 252, 249, 247, 259, 268, 253, 269, 255, 262, 257, 282, 274,\n       292, 277, 260, 264, 251, 270, 282, 275, 255, 269, 266, 258, 273,\n       272])",
                "res": "array([252, 249, 247, 259, 268, 253, 269, 255, 262, 257, 282, 274, 292,\n       277, 260, 264, 251, 270, 282, 275, 255, 269, 266, 258, 273, 272])",
                "ri": "Index(['r', 'p', 'h', 'e', 'i', 'q', 'o', 't', 'w', 'k', 'l', 'g', 'n', 'u',\n       'v', 'b', 'z', 'y', 'a', 'j', 'd', 'm', 's', 'x', 'c', 'f'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    252\np    249\nh    247\ne    259\ni    268\nq    253\no    269\nt    255\nw    262\nk    257\nl    282\ng    274\nn    292\nu    277\nv    260\nb    264\nz    251\ny    270\na    282\nj    275\nd    255\nm    269\ns    266\nx    258\nc    273\nf    272\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e580>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16ea30>",
                "self.obj": "0       670.0\n1       107.0\n2       439.0\n3        89.0\n4       927.0\n        ...  \n9995    987.0\n9996    543.0\n9997    211.0\n9998    945.0\n9999    106.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([670., 107., 439., ..., 211., 945., 106.])",
                "codes": "array([ -1,  -1,  -1, ..., 859, 865, 927])",
                "sorter": "array([ 103,  256,  273, ..., 6826, 2569, 4448])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    22\np    2015-08-30    39\ne    2015-08-28    32\ni    2015-08-23    28\nq    2015-08-25    31\n                   ..\nm    2015-08-27    19\nr    2015-08-29    25\na    2015-08-29    28\ns    2015-09-01    29\nd    2015-08-28    16\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce640>",
                "self.obj": "0        279\n1        768\n2        264\n3        573\n4        504\n        ... \n99995    621\n99996    348\n99997      9\n99998    887\n99999    410\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([279, 768, 264, ...,   9, 887, 410])",
                "codes": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([    0,  5977, 49663, ..., 16040, 35553, 59428])",
                "idx": "array([    0,  3872,  7735, 11632, 15437, 19215, 23057, 26913, 30761,\n       34613, 38347, 42124, 45846, 49622, 53450, 57249, 61221, 65100,\n       69001, 72928, 76704, 80535, 84427, 88265, 92207, 96148])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([980, 981, 975, 973, 974, 966, 980, 985, 981, 972, 972, 973, 978,\n       974, 982, 976, 980, 979, 972, 976, 975, 980, 979, 979, 985, 983])",
                "res": "array([980, 981, 975, 973, 974, 966, 980, 985, 981, 972, 972, 973, 978,\n       974, 982, 976, 980, 979, 972, 976, 975, 980, 979, 979, 985, 983])",
                "ri": "Index(['u', 'd', 'j', 'g', 'q', 'r', 'n', 'x', 'm', 'a', 'k', 'o', 'l', 'b',\n       'w', 'f', 'y', 'p', 'i', 'c', 's', 'h', 'z', 'v', 't', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    980\nd    981\nj    975\ng    973\nq    974\nr    966\nn    980\nx    985\nm    981\na    972\nk    972\no    973\nl    978\nb    974\nw    982\nf    976\ny    980\np    979\ni    972\nc    976\ns    975\nh    980\nz    979\nv    979\nt    985\ne    983\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce310>",
                "self.obj": "0        279\n1        768\n2        264\n3        573\n4        504\n        ... \n99995    621\n99996    348\n99997      9\n99998    887\n99999    410\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([279, 768, 264, ...,   9, 887, 410])",
                "codes": "array([  0,   0,   4, ..., 995, 995, 995])",
                "sorter": "array([    0, 63782, 24216, ..., 18580, 76903, 92425])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 1, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-31    311\nd    2015-08-25    292\nj    2015-08-29    303\ng    2015-08-30    325\nq    2015-08-27    297\n                  ... \no    2015-08-31    322\nr    2015-08-30    322\ns    2015-08-26    314\nx    2015-08-30    309\np    2015-08-24    314\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1abb20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab640>",
                "self.obj": "0        279.0\n1        768.0\n2        264.0\n3        573.0\n4        504.0\n         ...  \n99995    621.0\n99996    348.0\n99997      9.0\n99998    887.0\n99999    410.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([279., 768., 264., ...,   9., 887., 410.])",
                "codes": "array([ -1,  -1,  -1, ..., 999, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 16040, 35553, 59428])",
                "idx": "array([ 5883,  9529, 13181, 16781, 20325, 23946, 27561, 31164, 34795,\n       38316, 41858, 45395, 48949, 52548, 56101, 59843, 63493, 67179,\n       70879, 74470, 78053, 81728, 85351, 89046, 92754, 96392])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([994, 954, 943, 945, 947, 944, 960, 966, 958, 947, 941, 941, 954,\n       949, 958, 952, 942, 963, 954, 950, 947, 954, 950, 951, 967, 951,\n       960])",
                "res": "array([954, 943, 945, 947, 944, 960, 966, 958, 947, 941, 941, 954, 949,\n       958, 952, 942, 963, 954, 950, 947, 954, 950, 951, 967, 951, 960])",
                "ri": "Index(['u', 'j', 'g', 'q', 'r', 'n', 'x', 'm', 'a', 'k', 'o', 'l', 'b', 'w',\n       'f', 'y', 'p', 'i', 'c', 's', 'h', 'z', 'v', 't', 'd', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    954\nj    943\ng    945\nq    947\nr    944\nn    960\nx    966\nm    958\na    947\nk    941\no    941\nl    954\nb    949\nw    958\nf    952\ny    942\np    963\ni    954\nc    950\ns    947\nh    954\nz    950\nv    951\nt    967\nd    951\ne    960\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab2e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abe50>",
                "self.obj": "0        279.0\n1        768.0\n2        264.0\n3        573.0\n4        504.0\n         ...  \n99995    621.0\n99996    348.0\n99997      9.0\n99998    887.0\n99999    410.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([279., 768., 264., ...,   9., 887., 410.])",
                "codes": "array([ -1,  -1,  -1, ..., 992, 997, 998])",
                "sorter": "array([  103,   256,   273, ..., 30785, 85746, 83694])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-31    245\nj    2015-08-29    238\nq    2015-08-27    241\nr    2015-08-28    264\nn    2015-08-31    257\n                  ... \ny    2015-08-23    256\np    2015-08-24    241\nk    2015-08-26    245\ny    2015-08-29    244\nb    2015-08-31    259\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab8e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab340>",
                "self.obj": "0        279.0\n1        768.0\n2        264.0\n3        573.0\n4        504.0\n         ...  \n99995    621.0\n99996    348.0\n99997      9.0\n99998    887.0\n99999    410.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([279., 768., 264., ...,   9., 887., 410.])",
                "codes": "array([ -1,  -1,  -1, ..., 999, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 16040, 35553, 59428])",
                "idx": "array([ 5883,  9529, 13181, 16781, 20325, 23946, 27561, 31164, 34795,\n       38316, 41858, 45395, 48949, 52548, 56101, 59843, 63493, 67179,\n       70879, 74470, 78053, 81728, 85351, 89046, 92754, 96392])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([994, 954, 943, 945, 947, 944, 960, 966, 958, 947, 941, 941, 954,\n       949, 958, 952, 942, 963, 954, 950, 947, 954, 950, 951, 967, 951,\n       960])",
                "res": "array([954, 943, 945, 947, 944, 960, 966, 958, 947, 941, 941, 954, 949,\n       958, 952, 942, 963, 954, 950, 947, 954, 950, 951, 967, 951, 960])",
                "ri": "Index(['u', 'j', 'g', 'q', 'r', 'n', 'x', 'm', 'a', 'k', 'o', 'l', 'b', 'w',\n       'f', 'y', 'p', 'i', 'c', 's', 'h', 'z', 'v', 't', 'd', 'e'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    954\nj    943\ng    945\nq    947\nr    944\nn    960\nx    966\nm    958\na    947\nk    941\no    941\nl    954\nb    949\nw    958\nf    952\ny    942\np    963\ni    954\nc    950\ns    947\nh    954\nz    950\nv    951\nt    967\nd    951\ne    960\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abe50>",
                "self.obj": "0        279.0\n1        768.0\n2        264.0\n3        573.0\n4        504.0\n         ...  \n99995    621.0\n99996    348.0\n99997      9.0\n99998    887.0\n99999    410.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([279., 768., 264., ...,   9., 887., 410.])",
                "codes": "array([ -1,  -1,  -1, ..., 992, 997, 998])",
                "sorter": "array([  103,   256,   273, ..., 30785, 85746, 83694])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-31    245\nj    2015-08-29    238\nq    2015-08-27    241\nr    2015-08-28    264\nn    2015-08-31    257\n                  ... \ny    2015-08-23    256\np    2015-08-24    241\nk    2015-08-26    245\ny    2015-08-29    244\nb    2015-08-31    259\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340ac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e340b50>",
                "self.obj": "0     0\n1     1\n2     2\n3     4\n4     8\n     ..\n95    6\n96    7\n97    8\n98    2\n99    0\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  4,  4,\n        5,  6,  6,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,\n        9, 10, 10, 11, 11, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 16,\n       16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18,\n       18, 19, 19, 19, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23,\n       23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25])",
                "_": "array([0, 1, 2, 4, 8, 3, 7, 6, 9, 5])",
                "val": "array([0, 1, 2, 4, 8, 2, 3, 7, 2, 6, 3, 0, 0, 8, 4, 1, 4, 1, 4, 7, 0, 9,\n       2, 8, 7, 1, 3, 5, 3, 2, 1, 8, 2, 0, 2, 1, 1, 4, 9, 1, 6, 8, 8, 7,\n       0, 7, 2, 2, 4, 6, 8, 8, 0, 5, 7, 0, 7, 5, 2, 9, 4, 4, 0, 4, 5, 2,\n       5, 8, 6, 6, 1, 4, 5, 3, 9, 6, 0, 5, 5, 5, 3, 9, 4, 2, 4, 7, 1, 7,\n       9, 3, 3, 4, 9, 7, 2, 6, 7, 8, 2, 0])",
                "codes": "array([2, 6, 0, 2, 7, 8, 9, 2, 5, 9, 9, 1, 1, 3, 4, 5, 7, 6, 0, 0, 1, 1,\n       3, 7, 8, 9, 9, 2, 2, 3, 7, 2, 5, 6, 6, 0, 4, 2, 8, 3, 2, 3, 3, 4,\n       6, 6, 7, 0, 3, 5, 1, 2, 4, 5, 5, 6, 8, 9, 0, 1, 2, 8, 2, 2, 3, 4,\n       5, 9, 9, 1, 2, 3, 6, 0, 4, 4, 7, 0, 4, 6, 6, 0, 3, 3, 3, 3, 8, 9,\n       0, 1, 1, 1, 2, 4, 6, 8, 0, 4, 5, 7])",
                "sorter": "array([58, 85, 12, 46, 95, 74, 77, 34, 89, 27, 72, 17, 30, 61, 42, 80, 75,\n       19,  0, 44, 39, 70, 18,  9, 21, 78, 79,  5, 98, 14, 40, 29, 73, 45,\n       93, 62, 23, 94, 59, 71,  2, 84, 91,  4, 24, 56, 68, 99, 16, 26, 25,\n       83, 67, 10, 90,  7, 92, 53, 20, 35, 32, 88,  8, 47, 48, 13, 28, 57,\n       64, 86, 22, 37, 43, 11, 31, 41, 69, 76, 50, 87, 96, 52,  3, 60, 63,\n       82, 38, 66, 33,  1, 15, 36, 65, 97, 54, 81, 55, 51,  6, 49])",
                "idx": "array([ 0,  2,  7, 11, 13, 17, 18, 20, 27, 31, 35, 37, 39, 40, 45, 47, 50,\n       58, 62, 69, 72, 73, 77, 81, 88, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 5, 3, 1, 4, 1, 1, 5, 3, 3, 2, 2, 1, 4, 2, 3, 7, 4, 5, 3, 1, 3,\n       3, 4, 6, 4])",
                "res": "array([2, 5, 3, 1, 4, 1, 1, 5, 3, 3, 2, 2, 1, 4, 2, 3, 7, 4, 5, 3, 1, 3,\n       3, 4, 6, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    5\nc    3\nd    1\ne    4\nf    1\ng    1\nh    5\ni    3\nj    3\nk    2\nl    2\nm    1\nn    4\no    2\np    3\nq    7\nr    4\ns    5\nt    3\nu    1\nv    3\nw    3\nx    4\ny    6\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340ca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e3408e0>",
                "self.obj": "0     0\n1     1\n2     2\n3     4\n4     8\n     ..\n95    6\n96    7\n97    8\n98    2\n99    0\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 29, 30,\n       31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n       48, 49, 50, 50, 50, 51, 51, 52, 53, 54, 55, 56, 57, 58, 58, 59, 59,\n       60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71, 72, 73, 73, 73,\n       74, 75, 76, 77, 78, 78, 79, 79, 80, 81, 82, 83, 84, 84, 85])",
                "_": "array([0, 1, 2, 4, 8, 3, 7, 6, 9, 5])",
                "val": "array([0, 1, 2, 4, 8, 2, 3, 7, 2, 6, 3, 0, 0, 8, 4, 1, 4, 1, 4, 7, 0, 9,\n       2, 8, 7, 1, 3, 5, 3, 2, 1, 8, 2, 0, 2, 1, 1, 4, 9, 1, 6, 8, 8, 7,\n       0, 7, 2, 2, 4, 6, 8, 8, 0, 5, 7, 0, 7, 5, 2, 9, 4, 4, 0, 4, 5, 2,\n       5, 8, 6, 6, 1, 4, 5, 3, 9, 6, 0, 5, 5, 5, 3, 9, 4, 2, 4, 7, 1, 7,\n       9, 3, 3, 4, 9, 7, 2, 6, 7, 8, 2, 0])",
                "codes": "array([2, 6, 0, 7, 9, 2, 8, 5, 2, 9, 9, 1, 1, 3, 5, 4, 7, 6, 0, 0, 1, 8,\n       7, 9, 9, 1, 3, 2, 7, 3, 2, 5, 6, 2, 6, 4, 0, 2, 8, 3, 3, 4, 6, 3,\n       2, 6, 7, 0, 3, 5, 2, 4, 1, 5, 6, 9, 5, 8, 1, 8, 2, 0, 9, 3, 2, 9,\n       2, 5, 4, 1, 2, 3, 6, 0, 7, 4, 4, 4, 6, 6, 0, 8, 0, 3, 3, 9, 3, 3,\n       1, 2, 4, 0, 8, 6, 1, 1, 4, 5, 7, 0])",
                "sorter": "array([58, 85, 12, 95, 77, 46, 74, 89, 34, 27, 72, 17, 30, 61, 80, 42, 75,\n       19,  0, 44, 70, 21,  9, 78, 79, 39, 18, 98, 40, 14,  5, 73, 45, 29,\n       93, 23, 62, 94, 59, 71, 91,  4, 24, 84,  2, 56, 68, 99, 16, 26, 83,\n       67, 25, 10,  7, 53, 90, 92, 35, 88, 32, 20, 64, 48,  8, 57, 47, 28,\n       13, 86, 22, 37, 43, 11, 69, 41, 31, 50, 87, 96, 76, 38, 52,  3, 82,\n       66, 63, 60,  1, 65, 97, 33, 81, 54, 15, 36, 51,  6, 49, 55])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36,\n       37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       56, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 76,\n       77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97,\n       99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1])",
                "res": "array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (86,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-27    1\nb    2015-08-23    1\n     2015-08-24    1\n     2015-08-30    1\n                  ..\ny    2015-08-30    1\n     2015-08-31    1\nz    2015-08-27    1\n     2015-08-28    2\n     2015-08-30    1\nName: julie, Length: 86, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce3d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce2e0>",
                "self.obj": "0     0.0\n1     1.0\n2     2.0\n3     4.0\n4     8.0\n     ... \n95    6.0\n96    7.0\n97    8.0\n98    2.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,\n        3,  3,  4,  4,  4,  4,  5,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,\n        8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 12, 13, 13, 13, 13, 13, 14,\n       14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 18, 18,\n       18, 18, 18, 18, 18, 19, 19, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23,\n       23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25])",
                "_": "array([0., 1., 2., 4., 8., 3., 7., 9., 6., 5.])",
                "val": "array of shape (100,)",
                "codes": "array([ 0,  1,  1,  1,  3,  8, -1,  2, -1,  0,  7,  8,  9, -1,  2,  5,  9,\n        1,  1,  3,  4,  5,  8,  6,  0,  0, -1,  1,  1,  7,  9,  9,  2,  2,\n        3,  8, -1,  2,  5,  6,  0,  4,  2,  7,  3, -1,  2,  3,  4,  6,  6,\n        8, -1,  0,  3, -1, -1,  1,  4,  5,  5,  7,  9,  0,  2,  7, -1, -1,\n       -1, -1,  3,  4,  9,  2,  3,  6,  0,  4,  4,  0,  4,  6,  6, -1,  3,\n        3,  3,  3,  7, -1,  0,  1,  1,  4,  6,  7,  0,  4,  5,  8])",
                "sorter": "array([52,  1, 35, 86, 18, 69, 85, 58, 46, 12, 74, 95, 77, 27, 34, 89, 72,\n       17, 30, 61, 42, 80, 75, 19,  0, 44,  9, 39, 70, 21, 78, 79,  5, 98,\n       14, 40, 45, 29, 73, 93, 62, 23, 94, 59, 71, 84,  2, 91,  4, 24, 56,\n       68, 26, 99, 16,  7, 83, 25, 67, 10, 90, 92, 53, 20, 32, 88,  8, 28,\n       47, 64, 48, 13, 57, 22, 37, 43, 11, 31, 41, 76, 50, 87, 96, 66,  3,\n       60, 63, 82, 38, 65, 33, 15, 36, 97, 54, 81, 55, 51,  6, 49])",
                "idx": "array([ 6,  8, 13, 17, 19, 23, 24, 26, 32, 36, 40, 42, 44, 45, 50, 52, 55,\n       63, 66, 73, 75, 76, 79, 83, 89, 96])",
                "inc": "array([1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 2, 5, 4, 1, 4, 1, 1, 4, 3, 4, 2, 2, 1, 5, 2, 3, 6, 3, 4, 2, 1,\n       2, 3, 3, 6, 4])",
                "res": "array([2, 5, 4, 1, 4, 1, 1, 4, 3, 4, 2, 2, 1, 5, 2, 3, 6, 3, 4, 2, 1, 2,\n       3, 3, 6, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    5\nc    4\nd    1\ne    4\nf    1\ng    1\nh    4\ni    3\nj    4\nk    2\nl    2\nm    1\nn    5\no    2\np    3\nq    6\nr    3\ns    4\nt    2\nu    1\nv    2\nw    3\nx    3\ny    6\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce3d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce730>",
                "self.obj": "0     0.0\n1     1.0\n2     2.0\n3     4.0\n4     8.0\n     ... \n95    6.0\n96    7.0\n97    8.0\n98    2.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  4,  5,  6,\n        7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n       24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 48, 49, 49, 50, 51, 52, 53,\n       54, 55, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 73, 74, 74, 75, 76, 77, 78, 79, 79, 80])",
                "_": "array([0., 1., 2., 4., 8., 3., 7., 9., 6., 5.])",
                "val": "array of shape (100,)",
                "codes": "array([ 0,  1,  1,  1,  3,  3,  8,  8,  9,  2, -1,  0,  8, -1,  7,  5,  2,\n       -1,  9,  1,  1,  3,  5,  4,  8,  6,  0,  0,  1,  7, -1,  9,  9,  1,\n        2,  3,  2, -1,  5,  2,  6,  4,  0,  2,  7,  3,  3,  4,  6, -1,  2,\n        6,  8,  0,  3, -1, -1,  4,  1, -1,  5,  9,  5,  7,  7,  2,  0, -1,\n        3, -1,  9, -1, -1,  4,  2,  3,  6,  0,  4,  4,  4,  6,  6,  0,  7,\n        3, -1,  3,  3, -1,  4,  0,  7,  6,  1,  1,  4,  5,  8,  0])",
                "sorter": "array([52,  1, 35, 86,  3, 18, 40, 69, 77, 58, 85, 12, 95, 46, 74, 89, 34,\n       27, 72, 17, 30, 61, 80, 42, 75, 19,  0, 44, 70, 21,  9, 78, 79, 39,\n       98, 14,  5, 45, 73, 29, 93, 23, 62, 94, 59, 71, 91,  4, 24, 84,  2,\n       56, 68, 99, 16, 26, 83, 67, 25,  7, 10, 53, 90, 92, 88, 32, 20, 64,\n       48,  8, 57, 28, 47, 13, 22, 37, 43, 11, 41, 31, 50, 87, 96, 76, 38,\n       82, 66, 63, 60, 65, 97, 33, 81, 54, 15, 36, 51,  6, 49, 55])",
                "idx": "array([ 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64,\n       65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 99])",
                "inc": "array([1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1])",
                "res": "array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (81,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-27    1\nb    2015-08-23    1\n     2015-08-24    1\n     2015-08-31    2\n                  ..\ny    2015-08-30    1\n     2015-08-31    1\nz    2015-08-27    1\n     2015-08-28    2\n     2015-08-30    1\nName: julie, Length: 81, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e760>",
                "self.obj": "0     0.0\n1     1.0\n2     2.0\n3     4.0\n4     8.0\n     ... \n95    6.0\n96    7.0\n97    8.0\n98    2.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,\n        3,  3,  4,  4,  4,  4,  5,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,\n        8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 12, 13, 13, 13, 13, 13, 14,\n       14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 18, 18,\n       18, 18, 18, 18, 18, 19, 19, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23,\n       23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25])",
                "_": "array([0., 1., 2., 4., 8., 3., 7., 9., 6., 5.])",
                "val": "array of shape (100,)",
                "codes": "array([ 0,  1,  1,  1,  3,  8, -1,  2, -1,  0,  7,  8,  9, -1,  2,  5,  9,\n        1,  1,  3,  4,  5,  8,  6,  0,  0, -1,  1,  1,  7,  9,  9,  2,  2,\n        3,  8, -1,  2,  5,  6,  0,  4,  2,  7,  3, -1,  2,  3,  4,  6,  6,\n        8, -1,  0,  3, -1, -1,  1,  4,  5,  5,  7,  9,  0,  2,  7, -1, -1,\n       -1, -1,  3,  4,  9,  2,  3,  6,  0,  4,  4,  0,  4,  6,  6, -1,  3,\n        3,  3,  3,  7, -1,  0,  1,  1,  4,  6,  7,  0,  4,  5,  8])",
                "sorter": "array([52,  1, 35, 86, 18, 69, 85, 58, 46, 12, 74, 95, 77, 27, 34, 89, 72,\n       17, 30, 61, 42, 80, 75, 19,  0, 44,  9, 39, 70, 21, 78, 79,  5, 98,\n       14, 40, 45, 29, 73, 93, 62, 23, 94, 59, 71, 84,  2, 91,  4, 24, 56,\n       68, 26, 99, 16,  7, 83, 25, 67, 10, 90, 92, 53, 20, 32, 88,  8, 28,\n       47, 64, 48, 13, 57, 22, 37, 43, 11, 31, 41, 76, 50, 87, 96, 66,  3,\n       60, 63, 82, 38, 65, 33, 15, 36, 97, 54, 81, 55, 51,  6, 49])",
                "idx": "array([ 6,  8, 13, 17, 19, 23, 24, 26, 32, 36, 40, 42, 44, 45, 50, 52, 55,\n       63, 66, 73, 75, 76, 79, 83, 89, 96])",
                "inc": "array([1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 2, 5, 4, 1, 4, 1, 1, 4, 3, 4, 2, 2, 1, 5, 2, 3, 6, 3, 4, 2, 1,\n       2, 3, 3, 6, 4])",
                "res": "array([2, 5, 4, 1, 4, 1, 1, 4, 3, 4, 2, 2, 1, 5, 2, 3, 6, 3, 4, 2, 1, 2,\n       3, 3, 6, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    5\nc    4\nd    1\ne    4\nf    1\ng    1\nh    4\ni    3\nj    4\nk    2\nl    2\nm    1\nn    5\no    2\np    3\nq    6\nr    3\ns    4\nt    2\nu    1\nv    2\nw    3\nx    3\ny    6\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce3d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e760>",
                "self.obj": "0     0.0\n1     1.0\n2     2.0\n3     4.0\n4     8.0\n     ... \n95    6.0\n96    7.0\n97    8.0\n98    2.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  4,  5,  6,\n        7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n       24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 48, 49, 49, 50, 51, 52, 53,\n       54, 55, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 73, 74, 74, 75, 76, 77, 78, 79, 79, 80])",
                "_": "array([0., 1., 2., 4., 8., 3., 7., 9., 6., 5.])",
                "val": "array of shape (100,)",
                "codes": "array([ 0,  1,  1,  1,  3,  3,  8,  8,  9,  2, -1,  0,  8, -1,  7,  5,  2,\n       -1,  9,  1,  1,  3,  5,  4,  8,  6,  0,  0,  1,  7, -1,  9,  9,  1,\n        2,  3,  2, -1,  5,  2,  6,  4,  0,  2,  7,  3,  3,  4,  6, -1,  2,\n        6,  8,  0,  3, -1, -1,  4,  1, -1,  5,  9,  5,  7,  7,  2,  0, -1,\n        3, -1,  9, -1, -1,  4,  2,  3,  6,  0,  4,  4,  4,  6,  6,  0,  7,\n        3, -1,  3,  3, -1,  4,  0,  7,  6,  1,  1,  4,  5,  8,  0])",
                "sorter": "array([52,  1, 35, 86,  3, 18, 40, 69, 77, 58, 85, 12, 95, 46, 74, 89, 34,\n       27, 72, 17, 30, 61, 80, 42, 75, 19,  0, 44, 70, 21,  9, 78, 79, 39,\n       98, 14,  5, 45, 73, 29, 93, 23, 62, 94, 59, 71, 91,  4, 24, 84,  2,\n       56, 68, 99, 16, 26, 83, 67, 25,  7, 10, 53, 90, 92, 88, 32, 20, 64,\n       48,  8, 57, 28, 47, 13, 22, 37, 43, 11, 41, 31, 50, 87, 96, 76, 38,\n       82, 66, 63, 60, 65, 97, 33, 81, 54, 15, 36, 51,  6, 49, 55])",
                "idx": "array([ 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64,\n       65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 99])",
                "inc": "array([1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1])",
                "res": "array([1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (81,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-27    1\nb    2015-08-23    1\n     2015-08-24    1\n     2015-08-31    2\n                  ..\ny    2015-08-30    1\n     2015-08-31    1\nz    2015-08-27    1\n     2015-08-28    2\n     2015-08-30    1\nName: julie, Length: 81, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0850>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0610>",
                "self.obj": "0      3\n1      3\n2      4\n3      2\n4      6\n      ..\n995    6\n996    3\n997    8\n998    5\n999    9\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([3, 4, 2, 6, 8, 9, 0, 5, 1, 7])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  40,  78, 120, 158, 201, 228, 261, 298, 340, 376, 418, 459,\n       500, 537, 579, 623, 668, 702, 746, 780, 813, 853, 896, 928, 964])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10, 10, 10, 10, 10,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10,  9, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10,  9, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng     9\nh     9\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr     9\ns    10\nt    10\nu    10\nv     9\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0fd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0820>",
                "self.obj": "0      3\n1      3\n2      4\n3      2\n4      6\n      ..\n995    6\n996    3\n997    8\n998    5\n999    9\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([3, 4, 2, 6, 8, 9, 0, 5, 1, 7])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (255,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (255,)",
                "res": "array of shape (255,)",
                "ri": "array of shape (255,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    2\n     2015-08-25    5\n     2015-08-26    2\n     2015-08-27    8\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    4\n     2015-08-31    5\n     2015-09-01    3\nName: julie, Length: 255, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce5b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce940>",
                "self.obj": "0      3.0\n1      3.0\n2      4.0\n3      2.0\n4      6.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([3., 4., 2., 6., 0., 5., 8., 9., 1., 7.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  97, 132, 172, 207, 247, 273, 306, 340, 378, 413, 454, 494,\n       533, 565, 605, 646, 689, 722, 765, 799, 830, 868, 908, 935, 966])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([11, 11, 10, 11, 10, 11, 11, 10, 10,  9, 11, 11, 11, 10, 11, 11, 11,\n       11,  9, 11, 10, 11, 10, 10, 10, 11, 11])",
                "res": "array([11, 10, 11, 10, 11, 11, 10, 10,  9, 11, 11, 11, 10, 11, 11, 11, 11,\n        9, 11, 10, 11, 10, 10, 10, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    10\nc    11\nd    10\ne    11\nf    11\ng    10\nh    10\ni     9\nj    11\nk    11\nl    11\nm    10\nn    11\no    11\np    11\nq    11\nr     9\ns    11\nt    10\nu    11\nv    10\nw    10\nx    10\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0a90>",
                "self.obj": "0      3.0\n1      3.0\n2      4.0\n3      2.0\n4      6.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([3., 4., 2., 6., 0., 5., 8., 9., 1., 7.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (254,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (255,)",
                "res": "array of shape (254,)",
                "ri": "array of shape (254,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    2\n     2015-08-25    6\n     2015-08-26    2\n     2015-08-27    8\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 254, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cea30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c05b0>",
                "self.obj": "0      3.0\n1      3.0\n2      4.0\n3      2.0\n4      6.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([3., 4., 2., 6., 0., 5., 8., 9., 1., 7.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  97, 132, 172, 207, 247, 273, 306, 340, 378, 413, 454, 494,\n       533, 565, 605, 646, 689, 722, 765, 799, 830, 868, 908, 935, 966])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([11, 11, 10, 11, 10, 11, 11, 10, 10,  9, 11, 11, 11, 10, 11, 11, 11,\n       11,  9, 11, 10, 11, 10, 10, 10, 11, 11])",
                "res": "array([11, 10, 11, 10, 11, 11, 10, 10,  9, 11, 11, 11, 10, 11, 11, 11, 11,\n        9, 11, 10, 11, 10, 10, 10, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    10\nc    11\nd    10\ne    11\nf    11\ng    10\nh    10\ni     9\nj    11\nk    11\nl    11\nm    10\nn    11\no    11\np    11\nq    11\nr     9\ns    11\nt    10\nu    11\nv    10\nw    10\nx    10\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cea30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce970>",
                "self.obj": "0      3.0\n1      3.0\n2      4.0\n3      2.0\n4      6.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([3., 4., 2., 6., 0., 5., 8., 9., 1., 7.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (254,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (255,)",
                "res": "array of shape (254,)",
                "ri": "array of shape (254,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    2\n     2015-08-25    6\n     2015-08-26    2\n     2015-08-27    8\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 254, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0b80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0910>",
                "self.obj": "0       7\n1       9\n2       9\n3       9\n4       1\n       ..\n9995    0\n9996    8\n9997    4\n9998    6\n9999    7\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([7, 9, 1, 3, 8, 0, 5, 4, 2, 6])",
                "val": "array([7, 9, 9, ..., 4, 6, 7])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  77,  182,  360, ..., 9158, 9481, 9998])",
                "idx": "array([   0,  356,  765, 1129, 1505, 1909, 2306, 2679, 3061, 3450, 3843,\n       4214, 4639, 5058, 5419, 5813, 6207, 6579, 6991, 7374, 7750, 8106,\n       8479, 8845, 9213, 9604])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0cd0>",
                "self.obj": "0       7\n1       9\n2       9\n3       9\n4       1\n       ..\n9995    0\n9996    8\n9997    4\n9998    6\n9999    7\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([7, 9, 1, 3, 8, 0, 5, 4, 2, 6])",
                "val": "array([7, 9, 9, ..., 4, 6, 7])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([1558, 1574, 1784, ..., 6176, 6666, 9998])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27     7\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0b80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0730>",
                "self.obj": "0       7.0\n1       9.0\n2       9.0\n3       9.0\n4       1.0\n       ... \n9995    0.0\n9996    8.0\n9997    4.0\n9998    6.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([7., 9., 1., 3., 0., 5., 4., 2., 6., 8.])",
                "val": "array([7., 9., 9., ..., 4., 6., 7.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9078, 9492, 9863])",
                "idx": "array([ 589,  924, 1310, 1650, 1999, 2379, 2755, 3092, 3455, 3824, 4200,\n       4549, 4953, 5355, 5701, 6074, 6440, 6786, 7174, 7536, 7891, 8231,\n       8583, 8923, 9266, 9637])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c08b0>",
                "self.obj": "0       7.0\n1       9.0\n2       9.0\n3       9.0\n4       1.0\n       ... \n9995    0.0\n9996    8.0\n9997    4.0\n9998    6.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([7., 9., 1., 3., 0., 5., 4., 2., 6., 8.])",
                "val": "array([7., 9., 9., ..., 4., 6., 7.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 6470, 6842, 9078])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27     8\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e340d60>",
                "self.obj": "0       7.0\n1       9.0\n2       9.0\n3       9.0\n4       1.0\n       ... \n9995    0.0\n9996    8.0\n9997    4.0\n9998    6.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([7., 9., 1., 3., 0., 5., 4., 2., 6., 8.])",
                "val": "array([7., 9., 9., ..., 4., 6., 7.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9078, 9492, 9863])",
                "idx": "array([ 589,  924, 1310, 1650, 1999, 2379, 2755, 3092, 3455, 3824, 4200,\n       4549, 4953, 5355, 5701, 6074, 6440, 6786, 7174, 7536, 7891, 8231,\n       8583, 8923, 9266, 9637])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e3401c0>",
                "self.obj": "0       7.0\n1       9.0\n2       9.0\n3       9.0\n4       1.0\n       ... \n9995    0.0\n9996    8.0\n9997    4.0\n9998    6.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([7., 9., 1., 3., 0., 5., 4., 2., 6., 8.])",
                "val": "array([7., 9., 9., ..., 4., 6., 7.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 6470, 6842, 9078])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27     8\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340e50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e340bb0>",
                "self.obj": "0        2\n1        3\n2        2\n3        3\n4        3\n        ..\n99995    1\n99996    4\n99997    5\n99998    6\n99999    8\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([2, 3, 9, 5, 7, 4, 8, 0, 1, 6])",
                "val": "array([2, 3, 2, ..., 5, 6, 8])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  110,   288,   458, ..., 98668, 99394, 99885])",
                "idx": "array([    0,  3904,  7762, 11588, 15415, 19379, 23203, 27038, 30996,\n       34729, 38713, 42569, 46379, 50215, 54046, 57933, 61773, 65576,\n       69409, 73183, 76984, 80864, 84723, 88442, 92237, 96096])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e340d90>",
                "self.obj": "0        2\n1        3\n2        2\n3        3\n4        3\n        ..\n99995    1\n99996    4\n99997    5\n99998    6\n99999    8\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([2, 3, 9, 5, 7, 4, 8, 0, 1, 6])",
                "val": "array([2, 3, 2, ..., 5, 6, 8])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  689,  2090,  2562, ..., 96846, 97069, 97634])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e340970>",
                "self.obj": "0        2.0\n1        3.0\n2        2.0\n3        3.0\n4        3.0\n        ... \n99995    1.0\n99996    4.0\n99997    5.0\n99998    6.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([2., 3., 9., 5., 8., 4., 0., 1., 6., 7.])",
                "val": "array([2., 3., 2., ..., 5., 6., 8.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 99288, 99403, 99696])",
                "idx": "array([ 5883,  9585, 13192, 16824, 20414, 24173, 27787, 31403, 35145,\n       38679, 42413, 46042, 49630, 53221, 56821, 60482, 64103, 67663,\n       71271, 74819, 78370, 82036, 85671, 89171, 92740, 96365])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e340b20>",
                "self.obj": "0        2.0\n1        3.0\n2        2.0\n3        3.0\n4        3.0\n        ... \n99995    1.0\n99996    4.0\n99997    5.0\n99998    6.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([2., 3., 9., 5., 8., 4., 0., 1., 6., 7.])",
                "val": "array([2., 3., 2., ..., 5., 6., 8.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 87436, 88905, 89077])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab4c0>",
                "self.obj": "0        2.0\n1        3.0\n2        2.0\n3        3.0\n4        3.0\n        ... \n99995    1.0\n99996    4.0\n99997    5.0\n99998    6.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([2., 3., 9., 5., 8., 4., 0., 1., 6., 7.])",
                "val": "array([2., 3., 2., ..., 5., 6., 8.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 99288, 99403, 99696])",
                "idx": "array([ 5883,  9585, 13192, 16824, 20414, 24173, 27787, 31403, 35145,\n       38679, 42413, 46042, 49630, 53221, 56821, 60482, 64103, 67663,\n       71271, 74819, 78370, 82036, 85671, 89171, 92740, 96365])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e340d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab730>",
                "self.obj": "0        2.0\n1        3.0\n2        2.0\n3        3.0\n4        3.0\n        ... \n99995    1.0\n99996    4.0\n99997    5.0\n99998    6.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([2., 3., 9., 5., 8., 4., 0., 1., 6., 7.])",
                "val": "array([2., 3., 2., ..., 5., 6., 8.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 87436, 88905, 89077])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c05e0>",
                "self.obj": "0     34\n1     28\n2     20\n3      1\n4     23\n      ..\n95    80\n96    87\n97    31\n98    37\n99    81\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,\n        3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  7,\n        7,  7,  7,  8,  8,  8,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 11,\n       11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 17,\n       17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20,\n       20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 24, 24, 24, 24, 24])",
                "_": "array([34, 28, 20,  1, 23,  5, 19, 60, 63, 49, 92, 14, 29, 46, 16,  3, 31,\n       57, 86, 17, 98, 97,  6, 78, 85, 79, 26, 84, 22, 99, 68, 11, 87, 58,\n        4, 32, 55, 59, 33, 73, 74, 41, 12, 24, 27, 75, 83, 10, 25, 44, 80,\n       91, 53, 88,  8, 21,  7,  2, 65, 67, 64, 37, 81])",
                "val": "array([34, 28, 20,  1, 23,  5, 19, 60, 63, 49, 92, 14, 29, 46,  1, 16,  3,\n        3, 31, 57, 86, 17, 98, 97,  6, 63, 78, 85,  1, 31, 97, 79, 26, 84,\n       28, 22, 99, 68, 97,  1, 11, 68, 87, 58,  4, 32, 31, 55, 59, 33,  5,\n       73, 49, 97, 98, 60, 74, 97, 41, 12, 24, 16, 27, 86, 31, 12, 79, 34,\n       75, 79, 33, 83, 10, 58, 25, 44, 92, 80, 91, 27, 23, 53, 88, 11,  8,\n       21, 68,  7,  2, 65, 67, 64, 86, 75, 12, 80, 87, 31, 37, 81])",
                "codes": "array([22, 32, 42, 20, 39, 44, 52, 57,  0, 25, 33, 55, 56,  3, 19, 34, 40,\n       42, 47, 14, 38, 38, 46,  1,  7, 16, 62,  9, 16, 21, 31, 35, 53,  4,\n        4, 21, 50,  3, 18, 29,  0,  8, 14, 16, 25, 59,  9, 25, 30, 37, 49,\n       54, 28, 41, 15, 61, 10, 18, 21,  2,  3,  8, 13, 44, 45, 16, 42,  3,\n       21, 24, 50,  6,  7, 11, 12, 17, 27, 32, 48,  5, 15, 31, 18, 23, 30,\n       36,  5, 20, 30, 45,  1, 10, 33, 43, 58, 16, 21, 26, 51, 60])",
                "sorter": "array([24, 96, 59, 22, 51, 62, 81, 88, 67, 69, 43, 85, 87, 39, 21, 44, 56,\n       65, 72, 61, 49, 70, 71,  1, 55, 18, 99, 52, 29, 23, 83, 45, 82,  4,\n       80, 30, 77, 14, 92, 36,  0, 25, 15, 46, 66, 90,  9, 31, 37, 48, 75,\n       84, 35, 58, 17, 98, 10, 63, 38,  2, 28,  8, 13, 79, 68, 64, 94,  3,\n       57, 27, 95,  6,  7, 11, 12, 19, 33, 42, 74, 50, 16, 40, 20, 26, 41,\n       47,  5, 54, 86, 93, 34, 76, 73, 60, 89, 97, 53, 32, 78, 91])",
                "idx": "array([ 0,  3,  8, 13, 19, 23, 27, 33, 37, 40, 42, 46, 52, 54, 56, 59, 65,\n       67, 71, 79, 82, 86, 90, 93, 95])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([3, 5, 5, 6, 3, 4, 6, 3, 3, 2, 4, 6, 2, 2, 3, 6, 2, 4, 8, 3, 4, 4,\n       3, 2, 5])",
                "res": "array([3, 5, 5, 6, 3, 4, 6, 3, 3, 2, 4, 6, 2, 2, 3, 6, 2, 4, 8, 3, 4, 4,\n       3, 2, 5])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    5\nc    5\nd    6\ne    3\nf    4\ng    6\nh    3\ni    3\nj    2\nk    4\nl    6\nm    2\nn    2\no    3\np    6\nq    2\nr    4\ns    8\nu    3\nv    4\nw    4\nx    3\ny    2\nz    5\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c05e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0970>",
                "self.obj": "0     34\n1     28\n2     20\n3      1\n4     23\n      ..\n95    80\n96    87\n97    31\n98    37\n99    81\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  2,  3,  4,  4,  4,  5,  5,  6,  7,  8,  9,  9, 10, 11,\n       12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 22, 23, 24, 25,\n       26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 36, 37, 38, 38, 39, 40,\n       41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 52, 53, 54, 55,\n       56, 57, 58, 59, 59, 60, 61, 62, 63, 64, 64, 65, 66, 66, 67, 68, 69,\n       70, 71, 72, 73, 73, 74, 75, 76, 77, 78, 79, 80, 81, 81, 82])",
                "_": "array([34, 28, 20,  1, 23,  5, 19, 60, 63, 49, 92, 14, 29, 46, 16,  3, 31,\n       57, 86, 17, 98, 97,  6, 78, 85, 79, 26, 84, 22, 99, 68, 11, 87, 58,\n        4, 32, 55, 59, 33, 73, 74, 41, 12, 24, 27, 75, 83, 10, 25, 44, 80,\n       91, 53, 88,  8, 21,  7,  2, 65, 67, 64, 37, 81])",
                "val": "array([34, 28, 20,  1, 23,  5, 19, 60, 63, 49, 92, 14, 29, 46,  1, 16,  3,\n        3, 31, 57, 86, 17, 98, 97,  6, 63, 78, 85,  1, 31, 97, 79, 26, 84,\n       28, 22, 99, 68, 97,  1, 11, 68, 87, 58,  4, 32, 31, 55, 59, 33,  5,\n       73, 49, 97, 98, 60, 74, 97, 41, 12, 24, 16, 27, 86, 31, 12, 79, 34,\n       75, 79, 33, 83, 10, 58, 25, 44, 92, 80, 91, 27, 23, 53, 88, 11,  8,\n       21, 68,  7,  2, 65, 67, 64, 86, 75, 12, 80, 87, 31, 37, 81])",
                "codes": "array([22, 42, 32, 44, 57, 20, 39, 52, 25, 56, 55, 33,  0,  3, 42, 47, 34,\n       19, 40, 14, 46, 38, 38,  1, 16, 62,  7,  9, 16, 31, 35, 21, 53, 21,\n       50,  4,  4, 18,  3, 29,  0,  8, 59, 14, 16, 25, 25,  9, 49, 37, 54,\n       30, 28, 41, 61, 15, 21, 18, 10, 45,  8,  3,  2, 13, 44, 42, 16, 21,\n       50,  3, 24, 17, 32, 11, 27,  7, 12,  6, 48,  5, 15, 31, 36, 23, 30,\n       18, 45, 20,  5, 30, 10,  1, 33, 43, 58, 16, 60, 21, 26, 51])",
                "sorter": "array([24, 59, 96, 62, 88, 22, 51, 81, 69, 87, 85, 43, 67, 39, 65, 72, 44,\n       21, 56, 61, 71, 49, 70,  1, 18, 99, 55, 52, 29, 83, 45, 23, 82, 30,\n       77,  4, 80, 92, 14, 36,  0, 25, 90, 15, 46, 66, 31,  9, 75, 48, 84,\n       37, 35, 58, 98, 17, 38, 63, 10, 68,  8, 28,  2, 13, 79, 94, 64, 57,\n       95,  3, 27, 19, 42, 11, 33,  7, 12,  6, 74, 50, 16, 40, 47, 26, 41,\n       20, 93, 54,  5, 86, 76, 34, 73, 60, 89, 97, 91, 53, 32, 78])",
                "idx": "array([ 0,  2,  3,  4,  5,  8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22,\n       23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n       42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82,\n       83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 1, 1, 1, 3, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "res": "array([2, 1, 1, 1, 3, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (83,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-27    2\n     2015-09-01    1\nb    2015-08-30    1\n     2015-08-31    1\n     2015-09-01    3\n                  ..\ny    2015-08-30    1\nz    2015-08-23    1\n     2015-08-27    1\n     2015-08-29    2\n     2015-08-31    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1abd00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abca0>",
                "self.obj": "0     34.0\n1     28.0\n2     20.0\n3      1.0\n4     23.0\n      ... \n95    80.0\n96    87.0\n97    31.0\n98    37.0\n99    81.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6,  6,  6,\n        6,  7,  7,  7,  7,  8,  8,  8,  9,  9, 10, 10, 10, 10, 11, 11, 11,\n       11, 11, 11, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16,\n       17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 20, 20,\n       20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 24, 24, 24, 24, 24])",
                "_": "array([34., 28., 20.,  1., 23.,  5., 19., 92., 14., 29., 46., 16.,  3.,\n       31., 57., 86., 17., 98., 97.,  6., 63., 79., 26., 84., 22., 99.,\n       68., 11., 87., 58.,  4., 59., 33., 73., 49., 60., 74., 41., 12.,\n       24., 27., 75., 83., 10., 25., 44., 80., 91., 53., 88.,  7.,  2.,\n       65., 67., 64., 37., 81.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 13, 21, 24, 26, 34, 19, 28, 38, 17, 33, 40, 48, 51, -1,  0, 29,\n       50, -1,  3, 16, 30, 36, 43, 11, 32, 32, 42, 35, 56, -1, -1, 13, 18,\n       49,  4,  4, 18, 46,  3, 15, 25,  0, 20, -1, -1, 11, 53, -1, -1, 21,\n       26, 31, 45, 37, 12, 55,  7, 15, 18, -1, -1,  2, 10, 40, 41, -1, 38,\n       -1,  3, 18, 46, -1,  6,  8,  9, 14, 23, 28, 44,  5, 12, 27, -1, -1,\n       15, 26,  5, 17, 41,  1,  7, 29, 39, 52, 13, 18, 22, 47, 54])",
                "sorter": "array([ 1, 18, 69, 35, 86, 52, 24, 96, 59, 22, 51, 62, 81, 88, 85, 67, 43,\n       87, 65, 39, 21, 44, 56, 72, 61, 49, 70, 71, 55, 99, 45, 83, 29, 23,\n       82,  4, 80, 30, 77, 14, 92, 36,  0, 25, 46, 66, 15, 90,  9, 84, 31,\n       37, 48, 75, 58, 17, 98, 10, 63, 38,  8, 28,  2, 13, 79, 68, 64, 94,\n       27,  3, 57, 95,  7,  6, 11, 12, 19, 33, 42, 74, 50, 16, 40, 26, 47,\n       20, 41,  5, 54, 93, 34, 76, 73, 60, 89, 97, 53, 32, 78, 91])",
                "idx": "array([ 6,  9, 14, 18, 24, 28, 30, 35, 39, 42, 44, 48, 54, 55, 57, 60, 66,\n       68, 72, 80, 83, 87, 90, 93, 95])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 3, 5, 4, 6, 3, 2, 4, 3, 3, 2, 3, 5, 1, 2, 3, 5, 2, 4, 8, 3, 3,\n       3, 3, 2, 5])",
                "res": "array([3, 5, 4, 6, 3, 2, 4, 3, 3, 2, 3, 5, 1, 2, 3, 5, 2, 4, 8, 3, 3, 3,\n       3, 2, 5])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    5\nc    4\nd    6\ne    3\nf    2\ng    4\nh    3\ni    3\nj    2\nk    3\nl    5\nm    1\nn    2\no    3\np    5\nq    2\nr    4\ns    8\nu    3\nv    3\nw    3\nx    3\ny    2\nz    5\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1abd00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abb80>",
                "self.obj": "0     34.0\n1     28.0\n2     20.0\n3      1.0\n4     23.0\n      ... \n95    80.0\n96    87.0\n97    31.0\n98    37.0\n99    81.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  3,  4,  4,  4,\n        5,  6,  7,  8,  9,  9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19,\n       20, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34,\n       35, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 48,\n       49, 50, 51, 52, 53, 54, 54, 55, 56, 57, 58, 59, 59, 60, 61, 62, 63,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77])",
                "_": "array([34., 28., 20.,  1., 23.,  5., 19., 92., 14., 29., 46., 16.,  3.,\n       31., 57., 86., 17., 98., 97.,  6., 63., 79., 26., 84., 22., 99.,\n       68., 11., 87., 58.,  4., 59., 33., 73., 49., 60., 74., 41., 12.,\n       24., 27., 75., 83., 10., 25., 44., 80., 91., 53., 88.,  7.,  2.,\n       65., 67., 64., 37., 81.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 13, 21, 24, 26, 27, 34, 46, 19, 38, 28, 40, 51, 17, 33, 48,\n       50, -1, 29,  0, -1,  3, 43, 30, 16, 36, 11, 42, 32, 32, 56, 35, 13,\n       -1, -1, 18, 49, 18,  4,  4, 15,  3, 25,  0, 20, 53, 11, -1, -1, 21,\n       -1, 45, 31, -1, 26, 37, 55, 12, 18, 15,  7, 41, -1, -1,  2, 10, 40,\n       38, -1, 18, 46, -1, 14, 28,  8, 23, -1,  9,  6, 44,  5, 12, -1, -1,\n       26, 15, 41, 17,  5,  7,  1, 29, 39, 52, 13, 54, 18, 22, 47])",
                "sorter": "array([ 1,  3, 18, 69, 35, 86, 40, 52, 77, 24, 59, 96, 62, 88, 22, 51, 81,\n       87, 85, 43, 67, 65, 39, 72, 44, 21, 56, 61, 71, 49, 70, 99, 55, 29,\n       45, 83, 23, 82, 30,  4, 80, 92, 14, 36,  0, 25, 90, 15, 46, 66, 31,\n        9, 75, 48, 84, 37, 58, 98, 17, 38, 63, 10, 68,  8, 28,  2, 13, 79,\n       94, 64, 57, 95, 27, 19, 42, 11, 33,  7, 12,  6, 74, 50, 16, 47, 26,\n       41, 20, 93, 54,  5, 76, 34, 73, 60, 89, 97, 91, 53, 32, 78])",
                "idx": "array([ 9, 11, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30,\n       31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n       50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69,\n       70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "res": "array([2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (78,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-27    2\n     2015-09-01    1\nb    2015-08-30    1\n     2015-08-31    1\n     2015-09-01    3\n                  ..\ny    2015-08-30    1\nz    2015-08-23    1\n     2015-08-27    1\n     2015-08-29    2\n     2015-08-31    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16efa0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16eeb0>",
                "self.obj": "0     34.0\n1     28.0\n2     20.0\n3      1.0\n4     23.0\n      ... \n95    80.0\n96    87.0\n97    31.0\n98    37.0\n99    81.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6,  6,  6,\n        6,  7,  7,  7,  7,  8,  8,  8,  9,  9, 10, 10, 10, 10, 11, 11, 11,\n       11, 11, 11, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16,\n       17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 20, 20,\n       20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 24, 24, 24, 24, 24])",
                "_": "array([34., 28., 20.,  1., 23.,  5., 19., 92., 14., 29., 46., 16.,  3.,\n       31., 57., 86., 17., 98., 97.,  6., 63., 79., 26., 84., 22., 99.,\n       68., 11., 87., 58.,  4., 59., 33., 73., 49., 60., 74., 41., 12.,\n       24., 27., 75., 83., 10., 25., 44., 80., 91., 53., 88.,  7.,  2.,\n       65., 67., 64., 37., 81.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 13, 21, 24, 26, 34, 19, 28, 38, 17, 33, 40, 48, 51, -1,  0, 29,\n       50, -1,  3, 16, 30, 36, 43, 11, 32, 32, 42, 35, 56, -1, -1, 13, 18,\n       49,  4,  4, 18, 46,  3, 15, 25,  0, 20, -1, -1, 11, 53, -1, -1, 21,\n       26, 31, 45, 37, 12, 55,  7, 15, 18, -1, -1,  2, 10, 40, 41, -1, 38,\n       -1,  3, 18, 46, -1,  6,  8,  9, 14, 23, 28, 44,  5, 12, 27, -1, -1,\n       15, 26,  5, 17, 41,  1,  7, 29, 39, 52, 13, 18, 22, 47, 54])",
                "sorter": "array([ 1, 18, 69, 35, 86, 52, 24, 96, 59, 22, 51, 62, 81, 88, 85, 67, 43,\n       87, 65, 39, 21, 44, 56, 72, 61, 49, 70, 71, 55, 99, 45, 83, 29, 23,\n       82,  4, 80, 30, 77, 14, 92, 36,  0, 25, 46, 66, 15, 90,  9, 84, 31,\n       37, 48, 75, 58, 17, 98, 10, 63, 38,  8, 28,  2, 13, 79, 68, 64, 94,\n       27,  3, 57, 95,  7,  6, 11, 12, 19, 33, 42, 74, 50, 16, 40, 26, 47,\n       20, 41,  5, 54, 93, 34, 76, 73, 60, 89, 97, 53, 32, 78, 91])",
                "idx": "array([ 6,  9, 14, 18, 24, 28, 30, 35, 39, 42, 44, 48, 54, 55, 57, 60, 66,\n       68, 72, 80, 83, 87, 90, 93, 95])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 3, 5, 4, 6, 3, 2, 4, 3, 3, 2, 3, 5, 1, 2, 3, 5, 2, 4, 8, 3, 3,\n       3, 3, 2, 5])",
                "res": "array([3, 5, 4, 6, 3, 2, 4, 3, 3, 2, 3, 5, 1, 2, 3, 5, 2, 4, 8, 3, 3, 3,\n       3, 2, 5])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    5\nc    4\nd    6\ne    3\nf    2\ng    4\nh    3\ni    3\nj    2\nk    3\nl    5\nm    1\nn    2\no    3\np    5\nq    2\nr    4\ns    8\nu    3\nv    3\nw    3\nx    3\ny    2\nz    5\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e340910>",
                "self.obj": "0     34.0\n1     28.0\n2     20.0\n3      1.0\n4     23.0\n      ... \n95    80.0\n96    87.0\n97    31.0\n98    37.0\n99    81.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  3,  4,  4,  4,\n        5,  6,  7,  8,  9,  9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19,\n       20, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34,\n       35, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 48,\n       49, 50, 51, 52, 53, 54, 54, 55, 56, 57, 58, 59, 59, 60, 61, 62, 63,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77])",
                "_": "array([34., 28., 20.,  1., 23.,  5., 19., 92., 14., 29., 46., 16.,  3.,\n       31., 57., 86., 17., 98., 97.,  6., 63., 79., 26., 84., 22., 99.,\n       68., 11., 87., 58.,  4., 59., 33., 73., 49., 60., 74., 41., 12.,\n       24., 27., 75., 83., 10., 25., 44., 80., 91., 53., 88.,  7.,  2.,\n       65., 67., 64., 37., 81.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 13, 21, 24, 26, 27, 34, 46, 19, 38, 28, 40, 51, 17, 33, 48,\n       50, -1, 29,  0, -1,  3, 43, 30, 16, 36, 11, 42, 32, 32, 56, 35, 13,\n       -1, -1, 18, 49, 18,  4,  4, 15,  3, 25,  0, 20, 53, 11, -1, -1, 21,\n       -1, 45, 31, -1, 26, 37, 55, 12, 18, 15,  7, 41, -1, -1,  2, 10, 40,\n       38, -1, 18, 46, -1, 14, 28,  8, 23, -1,  9,  6, 44,  5, 12, -1, -1,\n       26, 15, 41, 17,  5,  7,  1, 29, 39, 52, 13, 54, 18, 22, 47])",
                "sorter": "array([ 1,  3, 18, 69, 35, 86, 40, 52, 77, 24, 59, 96, 62, 88, 22, 51, 81,\n       87, 85, 43, 67, 65, 39, 72, 44, 21, 56, 61, 71, 49, 70, 99, 55, 29,\n       45, 83, 23, 82, 30,  4, 80, 92, 14, 36,  0, 25, 90, 15, 46, 66, 31,\n        9, 75, 48, 84, 37, 58, 98, 17, 38, 63, 10, 68,  8, 28,  2, 13, 79,\n       94, 64, 57, 95, 27, 19, 42, 11, 33,  7, 12,  6, 74, 50, 16, 47, 26,\n       41, 20, 93, 54,  5, 76, 34, 73, 60, 89, 97, 91, 53, 32, 78])",
                "idx": "array([ 9, 11, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30,\n       31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n       50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69,\n       70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "res": "array([2, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape (78,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-27    2\n     2015-09-01    1\nb    2015-08-30    1\n     2015-08-31    1\n     2015-09-01    3\n                  ..\ny    2015-08-30    1\nz    2015-08-23    1\n     2015-08-27    1\n     2015-08-29    2\n     2015-08-31    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0e80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0c70>",
                "self.obj": "0       4\n1       1\n2      85\n3      60\n4      85\n       ..\n995    19\n996    75\n997    44\n998    61\n999    61\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([ 4,  1, 85, 60, 49, 62, 56, 22, 16, 12,  3, 23, 25, 81, 46,  2, 21,\n       87, 74, 38, 63, 93, 97, 27, 42, 58, 77, 78, 55,  7, 19, 59, 33, 13,\n       14, 48, 72,  6, 31, 70, 17, 36, 15, 37, 41, 50, 65, 79, 88, 54, 67,\n       32, 29,  8, 64, 92,  0, 76, 69, 10, 75, 94, 39, 20, 66, 52, 82, 98,\n       99, 26, 11, 61, 45, 51, 18, 71, 90, 73, 28, 80, 43, 83, 89, 30, 86,\n       47, 53,  9, 57, 35, 44, 68, 95, 96, 91, 40, 84, 34,  5, 24])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  35,  70, 106, 141, 176, 218, 259, 301, 345, 392, 434, 466,\n       499, 534, 578, 616, 653, 687, 726, 762, 806, 843, 885, 918, 958])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([28, 29, 33, 31, 29, 35, 34, 35, 37, 40, 35, 26, 29, 28, 40, 29, 32,\n       30, 34, 31, 34, 31, 31, 27, 34, 32])",
                "res": "array([28, 29, 33, 31, 29, 35, 34, 35, 37, 40, 35, 26, 29, 28, 40, 29, 32,\n       30, 34, 31, 34, 31, 31, 27, 34, 32])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    28\nb    29\nc    33\nd    31\ne    29\nf    35\ng    34\nh    35\ni    37\nj    40\nk    35\nl    26\nm    29\nn    28\no    40\np    29\nq    32\nr    30\ns    34\nt    31\nu    34\nv    31\nw    31\nx    27\ny    34\nz    32\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0c40>",
                "self.obj": "0       4\n1       1\n2      85\n3      60\n4      85\n       ..\n995    19\n996    75\n997    44\n998    61\n999    61\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([ 4,  1, 85, 60, 49, 62, 56, 22, 16, 12,  3, 23, 25, 81, 46,  2, 21,\n       87, 74, 38, 63, 93, 97, 27, 42, 58, 77, 78, 55,  7, 19, 59, 33, 13,\n       14, 48, 72,  6, 31, 70, 17, 36, 15, 37, 41, 50, 65, 79, 88, 54, 67,\n       32, 29,  8, 64, 92,  0, 76, 69, 10, 75, 94, 39, 20, 66, 52, 82, 98,\n       99, 26, 11, 61, 45, 51, 18, 71, 90, 73, 28, 80, 43, 83, 89, 30, 86,\n       47, 53,  9, 57, 35, 44, 68, 95, 96, 91, 40, 84, 34,  5, 24])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    4\n     2015-08-25    6\n     2015-08-26    2\n     2015-08-27    3\n                  ..\nz    2015-08-28    4\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    5\n     2015-09-01    6\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e2b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16eaf0>",
                "self.obj": "0       4.0\n1       1.0\n2      85.0\n3      60.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    61.0\n999    61.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  92, 125, 159, 192, 227, 268, 306, 347, 386, 430, 470, 501,\n       532, 563, 602, 636, 667, 699, 736, 771, 812, 848, 890, 922, 959])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([38, 22, 25, 29, 24, 24, 31, 29, 31, 30, 32, 27, 24, 26, 24, 33, 24,\n       23, 28, 30, 30, 30, 26, 24, 22, 30, 27])",
                "res": "array([22, 25, 29, 24, 24, 31, 29, 31, 30, 32, 27, 24, 26, 24, 33, 24, 23,\n       28, 30, 30, 30, 26, 24, 22, 30, 27])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    22\nb    25\nc    29\nd    24\ne    24\nf    31\ng    29\nh    31\ni    30\nj    32\nk    27\nl    24\nm    26\nn    24\no    33\np    24\nq    23\nr    28\ns    30\nt    30\nu    30\nv    26\nw    24\nx    22\ny    30\nz    27\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e7c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16eb50>",
                "self.obj": "0       4.0\n1       1.0\n2      85.0\n3      60.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    61.0\n999    61.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (252,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (252,)",
                "ri": "array of shape (252,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    2\n     2015-08-27    3\n                  ..\nz    2015-08-28    4\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    4\n     2015-09-01    6\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e8e0>",
                "self.obj": "0       4.0\n1       1.0\n2      85.0\n3      60.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    61.0\n999    61.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  92, 125, 159, 192, 227, 268, 306, 347, 386, 430, 470, 501,\n       532, 563, 602, 636, 667, 699, 736, 771, 812, 848, 890, 922, 959])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([38, 22, 25, 29, 24, 24, 31, 29, 31, 30, 32, 27, 24, 26, 24, 33, 24,\n       23, 28, 30, 30, 30, 26, 24, 22, 30, 27])",
                "res": "array([22, 25, 29, 24, 24, 31, 29, 31, 30, 32, 27, 24, 26, 24, 33, 24, 23,\n       28, 30, 30, 30, 26, 24, 22, 30, 27])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    22\nb    25\nc    29\nd    24\ne    24\nf    31\ng    29\nh    31\ni    30\nj    32\nk    27\nl    24\nm    26\nn    24\no    33\np    24\nq    23\nr    28\ns    30\nt    30\nu    30\nv    26\nw    24\nx    22\ny    30\nz    27\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab4c0>",
                "self.obj": "0       4.0\n1       1.0\n2      85.0\n3      60.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    61.0\n999    61.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (252,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (252,)",
                "ri": "array of shape (252,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    2\n     2015-08-27    3\n                  ..\nz    2015-08-28    4\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    4\n     2015-09-01    6\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e9a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e790>",
                "self.obj": "0       25\n1       67\n2       98\n3       90\n4       41\n        ..\n9995    99\n9996     1\n9997    67\n9998    90\n9999    11\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([25, 67, 98, 90, 41, 75, 80,  1,  4, 18, 42, 95,  6, 97, 82, 70, 30,\n       66, 78, 69, 58, 35, 11, 71, 59, 12, 20, 52, 33, 72, 79, 13, 73, 53,\n       49, 86, 50, 21, 99, 91, 26, 55, 14, 96, 62, 92, 32, 63, 38, 16, 45,\n       29,  0, 74, 34, 93, 31, 57, 10, 15, 39, 89, 22, 40, 88, 65, 61, 36,\n       56, 46,  2, 43, 28, 83, 76,  7,  8, 19, 60, 48, 85, 47, 17, 77, 37,\n       51,  5, 27,  9, 64, 23, 24, 94, 81, 44, 84, 87, 68, 54,  3])",
                "val": "array([25, 67, 98, ..., 67, 90, 11])",
                "codes": "array([ 0,  1,  1, ..., 99, 99, 99])",
                "sorter": "array([ 797, 1182, 2541, ..., 5529, 6031, 9167])",
                "idx": "array([   0,  361,  772, 1140, 1521, 1904, 2271, 2650, 3047, 3428, 3806,\n       4154, 4575, 4963, 5375, 5739, 6141, 6505, 6887, 7265, 7645, 8053,\n       8456, 8856, 9223, 9599])",
                "inc": "array([1, 1, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 95,  99,  99,  97,  98,  95,  96,  99,  98,  97,  96,  98, 100,\n        98,  98,  98,  99, 100,  97,  97,  99,  99,  99,  98,  97, 100])",
                "res": "array([ 95,  99,  99,  97,  98,  95,  96,  99,  98,  97,  96,  98, 100,\n        98,  98,  98,  99, 100,  97,  97,  99,  99,  99,  98,  97, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     95\nb     99\nc     99\nd     97\ne     98\nf     95\ng     96\nh     99\ni     98\nj     97\nk     96\nl     98\nm    100\nn     98\no     98\np     98\nq     99\nr    100\ns     97\nt     97\nu     99\nv     99\nw     99\nx     98\ny     97\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16edc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16e2b0>",
                "self.obj": "0       25\n1       67\n2       98\n3       90\n4       41\n        ..\n9995    99\n9996     1\n9997    67\n9998    90\n9999    11\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([25, 67, 98, 90, 41, 75, 80,  1,  4, 18, 42, 95,  6, 97, 82, 70, 30,\n       66, 78, 69, 58, 35, 11, 71, 59, 12, 20, 52, 33, 72, 79, 13, 73, 53,\n       49, 86, 50, 21, 99, 91, 26, 55, 14, 96, 62, 92, 32, 63, 38, 16, 45,\n       29,  0, 74, 34, 93, 31, 57, 10, 15, 39, 89, 22, 40, 88, 65, 61, 36,\n       56, 46,  2, 43, 28, 83, 76,  7,  8, 19, 60, 48, 85, 47, 17, 77, 37,\n       51,  5, 27,  9, 64, 23, 24, 94, 81, 44, 84, 87, 68, 54,  3])",
                "val": "array([25, 67, 98, ..., 67, 90, 11])",
                "codes": "array([ 4,  4, 18, ..., 92, 95, 99])",
                "sorter": "array([ 590, 8785, 2960, ..., 7735, 2222, 3368])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 1, ..., 0, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    27\n     2015-08-24    30\n     2015-08-25    29\n     2015-08-26    36\n     2015-08-27    32\n                   ..\nz    2015-08-28    22\n     2015-08-29    31\n     2015-08-30    37\n     2015-08-31    37\n     2015-09-01    32\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c07f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c02b0>",
                "self.obj": "0       25.0\n1       67.0\n2       98.0\n3       90.0\n4       41.0\n        ... \n9995    99.0\n9996     1.0\n9997    67.0\n9998    90.0\n9999    11.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([25., 67., 98., ..., 67., 90., 11.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 2062, 3368, 5529])",
                "idx": "array([ 589,  925, 1320, 1671, 2026, 2387, 2732, 3084, 3451, 3807, 4165,\n       4486, 4878, 5242, 5625, 5967, 6350, 6694, 7058, 7422, 7786, 8166,\n       8546, 8922, 9266, 9622])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([ 99,  92,  98,  98,  94,  96,  93,  94,  97,  97,  96,  93,  99,\n        97,  95,  95,  98,  99, 100,  95,  93,  97,  95,  96,  98,  95,\n       101])",
                "res": "array([ 92,  98,  98,  94,  96,  93,  94,  97,  97,  96,  93,  99,  97,\n        95,  95,  98,  99, 100,  95,  93,  97,  95,  96,  98,  95, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     92\nb     98\nc     98\nd     94\ne     96\nf     93\ng     94\nh     97\ni     97\nj     96\nk     93\nl     99\nm     97\nn     95\no     95\np     98\nq     99\nr    100\ns     95\nt     93\nu     97\nv     95\nw     96\nx     98\ny     95\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0d60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0e50>",
                "self.obj": "0       25.0\n1       67.0\n2       98.0\n3       90.0\n4       41.0\n        ... \n9995    99.0\n9996     1.0\n9997    67.0\n9998    90.0\n9999    11.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([25., 67., 98., ..., 67., 90., 11.])",
                "codes": "array([-1, -1, -1, ..., 88, 91, 99])",
                "sorter": "array([ 103,  256,  273, ..., 7735, 2222, 3368])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    27\n     2015-08-24    25\n     2015-08-25    23\n     2015-08-26    28\n     2015-08-27    24\n                   ..\nz    2015-08-28    20\n     2015-08-29    30\n     2015-08-30    33\n     2015-08-31    31\n     2015-09-01    25\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0130>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0cd0>",
                "self.obj": "0       25.0\n1       67.0\n2       98.0\n3       90.0\n4       41.0\n        ... \n9995    99.0\n9996     1.0\n9997    67.0\n9998    90.0\n9999    11.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([25., 67., 98., ..., 67., 90., 11.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 2062, 3368, 5529])",
                "idx": "array([ 589,  925, 1320, 1671, 2026, 2387, 2732, 3084, 3451, 3807, 4165,\n       4486, 4878, 5242, 5625, 5967, 6350, 6694, 7058, 7422, 7786, 8166,\n       8546, 8922, 9266, 9622])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([ 99,  92,  98,  98,  94,  96,  93,  94,  97,  97,  96,  93,  99,\n        97,  95,  95,  98,  99, 100,  95,  93,  97,  95,  96,  98,  95,\n       101])",
                "res": "array([ 92,  98,  98,  94,  96,  93,  94,  97,  97,  96,  93,  99,  97,\n        95,  95,  98,  99, 100,  95,  93,  97,  95,  96,  98,  95, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     92\nb     98\nc     98\nd     94\ne     96\nf     93\ng     94\nh     97\ni     97\nj     96\nk     93\nl     99\nm     97\nn     95\no     95\np     98\nq     99\nr    100\ns     95\nt     93\nu     97\nv     95\nw     96\nx     98\ny     95\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c09a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab040>",
                "self.obj": "0       25.0\n1       67.0\n2       98.0\n3       90.0\n4       41.0\n        ... \n9995    99.0\n9996     1.0\n9997    67.0\n9998    90.0\n9999    11.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([25., 67., 98., ..., 67., 90., 11.])",
                "codes": "array([-1, -1, -1, ..., 88, 91, 99])",
                "sorter": "array([ 103,  256,  273, ..., 7735, 2222, 3368])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    27\n     2015-08-24    25\n     2015-08-25    23\n     2015-08-26    28\n     2015-08-27    24\n                   ..\nz    2015-08-28    20\n     2015-08-29    30\n     2015-08-30    33\n     2015-08-31    31\n     2015-09-01    25\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1abdc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab610>",
                "self.obj": "0        53\n1        81\n2        17\n3         1\n4        53\n         ..\n99995    40\n99996    75\n99997    97\n99998    23\n99999    71\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([53, 81, 17,  1,  9, 36, 92, 29,  7, 50, 14, 74, 37, 45, 26, 18, 84,\n       78, 82, 47, 94, 33, 96, 90, 70, 60,  3, 48, 71, 61, 20, 58, 43, 21,\n       93, 91, 52,  5, 10, 38, 69, 85, 28, 67, 89, 79, 25, 34, 15, 75, 99,\n       24, 19, 76, 42, 63, 22,  8, 57, 65, 11, 72, 98, 97,  2, 54, 13, 46,\n       49, 30,  4, 77, 31, 41, 32, 27,  6, 51, 68, 16, 83, 12, 23, 80, 35,\n       66, 62, 56, 40, 44, 55,  0, 59, 95, 87, 88, 64, 39, 73, 86])",
                "val": "array([53, 81, 17, ..., 97, 23, 71])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 4948,  5217,  8208, ..., 93816, 95705, 96555])",
                "idx": "array([    0,  3875,  7652, 11430, 15252, 19020, 22915, 26801, 30663,\n       34496, 38352, 42220, 46033, 49832, 53756, 57624, 61409, 65223,\n       69087, 72954, 76744, 80599, 84465, 88352, 92148, 96034])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab6a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abbe0>",
                "self.obj": "0        53\n1        81\n2        17\n3         1\n4        53\n         ..\n99995    40\n99996    75\n99997    97\n99998    23\n99999    71\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([53, 81, 17,  1,  9, 36, 92, 29,  7, 50, 14, 74, 37, 45, 26, 18, 84,\n       78, 82, 47, 94, 33, 96, 90, 70, 60,  3, 48, 71, 61, 20, 58, 43, 21,\n       93, 91, 52,  5, 10, 38, 69, 85, 28, 67, 89, 79, 25, 34, 15, 75, 99,\n       24, 19, 76, 42, 63, 22,  8, 57, 65, 11, 72, 98, 97,  2, 54, 13, 46,\n       49, 30,  4, 77, 31, 41, 32, 27,  6, 51, 68, 16, 83, 12, 23, 80, 35,\n       66, 62, 56, 40, 44, 55,  0, 59, 95, 87, 88, 64, 39, 73, 86])",
                "val": "array([53, 81, 17, ..., 97, 23, 71])",
                "codes": "array([ 0,  0,  0, ..., 98, 98, 99])",
                "sorter": "array([34100, 38828, 83292, ..., 58047, 60001, 93816])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23     99\n     2015-08-24    100\n     2015-08-25     96\n     2015-08-26     95\n     2015-08-27     98\n                  ... \nz    2015-08-28    100\n     2015-08-29     97\n     2015-08-30    100\n     2015-08-31     97\n     2015-09-01     98\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab610>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab730>",
                "self.obj": "0        53.0\n1        81.0\n2        17.0\n3         1.0\n4        53.0\n         ... \n99995    40.0\n99996    75.0\n99997    97.0\n99998    23.0\n99999    71.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([53., 81., 17., ..., 97., 23., 71.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 93816, 95705, 96555])",
                "idx": "array([ 5883,  9515, 13076, 16630, 20211, 23754, 27418, 31071, 34683,\n       38311, 41946, 45593, 49158, 52726, 56412, 60062, 63651, 67226,\n       70842, 74497, 78074, 81711, 85379, 89037, 92596, 96262])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab610>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abdc0>",
                "self.obj": "0        53.0\n1        81.0\n2        17.0\n3         1.0\n4        53.0\n         ... \n99995    40.0\n99996    75.0\n99997    97.0\n99998    23.0\n99999    71.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([53., 81., 17., ..., 97., 23., 71.])",
                "codes": "array([-1, -1, -1, ..., 98, 98, 99])",
                "sorter": "array([  103,   256,   273, ..., 58047, 60001, 93816])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    94\n     2015-08-24    96\n     2015-08-25    89\n     2015-08-26    92\n     2015-08-27    93\n                   ..\nz    2015-08-28    96\n     2015-08-29    93\n     2015-08-30    95\n     2015-08-31    95\n     2015-09-01    96\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e7c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e16ea00>",
                "self.obj": "0        53.0\n1        81.0\n2        17.0\n3         1.0\n4        53.0\n         ... \n99995    40.0\n99996    75.0\n99997    97.0\n99998    23.0\n99999    71.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([53., 81., 17., ..., 97., 23., 71.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 93816, 95705, 96555])",
                "idx": "array([ 5883,  9515, 13076, 16630, 20211, 23754, 27418, 31071, 34683,\n       38311, 41946, 45593, 49158, 52726, 56412, 60062, 63651, 67226,\n       70842, 74497, 78074, 81711, 85379, 89037, 92596, 96262])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e16e610>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0070>",
                "self.obj": "0        53.0\n1        81.0\n2        17.0\n3         1.0\n4        53.0\n         ... \n99995    40.0\n99996    75.0\n99997    97.0\n99998    23.0\n99999    71.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([53., 81., 17., ..., 97., 23., 71.])",
                "codes": "array([-1, -1, -1, ..., 98, 98, 99])",
                "sorter": "array([  103,   256,   273, ..., 58047, 60001, 93816])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    94\n     2015-08-24    96\n     2015-08-25    89\n     2015-08-26    92\n     2015-08-27    93\n                   ..\nz    2015-08-28    96\n     2015-08-29    93\n     2015-08-30    95\n     2015-08-31    95\n     2015-09-01    96\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0cd0>",
                "self.obj": "0     134\n1     781\n2     411\n3     392\n4     967\n     ... \n95     73\n96    199\n97    760\n98    912\n99    272\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,\n        3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  7,  7,\n        8,  8,  9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13,\n       13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 17, 17, 17,\n       17, 17, 18, 18, 19, 19, 19, 19, 19, 20, 20, 21, 21, 21, 21, 21, 22,\n       22, 22, 22, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25])",
                "_": "array of shape (99,)",
                "val": "array of shape (100,)",
                "codes": "array([15, 59,  7,  8, 13, 41, 42, 51,  0, 14, 31, 77, 79,  2, 16, 26, 40,\n       68, 73, 83, 97,  1, 70, 74, 84, 86, 55, 57, 80, 85, 25, 69, 34, 98,\n        3, 56,  4, 10, 27, 50, 29, 45, 65,  6, 17, 43, 64, 81, 88, 95,  5,\n       18, 20, 44, 71, 22, 63, 23, 35, 54, 60, 61, 66, 76, 12, 19, 46, 47,\n       53, 89, 33, 75, 39, 49, 62, 87, 92, 58, 72,  9, 28, 32, 48, 67, 36,\n       37, 38, 91, 31, 11, 21, 82, 96, 24, 30, 52, 78, 90, 93, 94])",
                "sorter": "array([15, 60,  7,  8, 13, 42, 43, 52,  0, 14, 31, 78, 80,  2, 16, 26, 40,\n       69, 74, 84, 98,  1, 71, 75, 85, 87, 56, 58, 81, 86, 25, 70, 34, 99,\n        3, 57,  4, 10, 27, 51, 29, 46, 66,  6, 17, 44, 65, 82, 89, 96,  5,\n       18, 20, 45, 72, 22, 64, 23, 35, 55, 61, 62, 67, 77, 12, 19, 47, 48,\n       54, 90, 33, 76, 39, 50, 63, 88, 93, 59, 73,  9, 28, 32, 49, 68, 36,\n       37, 38, 92, 41, 11, 21, 83, 97, 24, 30, 53, 79, 91, 94, 95])",
                "idx": "array([ 0,  2,  8, 13, 21, 26, 30, 32, 34, 36, 37, 40, 43, 50, 55, 57, 64,\n       65, 70, 72, 77, 79, 84, 88, 89, 93])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 6, 5, 8, 5, 4, 2, 2, 2, 1, 3, 3, 7, 5, 2, 7, 1, 5, 2, 5, 2, 5,\n       4, 1, 4, 7])",
                "res": "array([2, 6, 5, 8, 5, 4, 2, 2, 2, 1, 3, 3, 7, 5, 2, 7, 1, 5, 2, 5, 2, 5,\n       4, 1, 4, 7])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    6\nc    5\nd    8\ne    5\nf    4\ng    2\nh    2\ni    2\nj    1\nk    3\nl    3\nm    7\nn    5\no    2\np    7\nq    1\nr    5\ns    2\nt    5\nu    2\nv    5\nw    4\nx    1\ny    4\nz    7\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0c10>",
                "self.obj": "0     134\n1     781\n2     411\n3     392\n4     967\n     ... \n95     73\n96    199\n97    760\n98    912\n99    272\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9,  9, 10, 11, 11, 12, 12,\n       13, 14, 15, 15, 16, 17, 17, 18, 18, 19, 20, 20, 21, 22, 23, 24, 25,\n       26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 36, 37, 38, 38, 39, 40,\n       41, 42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56,\n       57, 58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71,\n       72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 84])",
                "_": "array of shape (99,)",
                "val": "array of shape (100,)",
                "codes": "array([15, 59, 13,  8,  7, 41, 42, 51,  0, 14, 31, 77, 79, 26, 83,  2, 68,\n       40, 97, 16, 73, 70, 84, 86,  1, 74, 80, 55, 85, 57, 25, 69, 34, 98,\n       56,  3,  4, 10, 27, 50, 45, 65, 29, 17, 43, 88, 64,  6, 95, 81, 20,\n       44,  5, 71, 18, 63, 22, 66, 23, 54, 76, 61, 60, 35, 12, 19, 46, 47,\n       89, 53, 75, 33, 92, 49, 62, 87, 39, 58, 72, 28,  9, 32, 67, 48, 37,\n       38, 36, 91, 31, 82, 96, 21, 11, 90, 30, 52, 94, 93, 24, 78])",
                "sorter": "array([15, 60, 13,  8,  7, 42, 43, 52,  0, 14, 31, 78, 80, 26, 84,  2, 69,\n       40, 98, 16, 74, 71, 85, 87,  1, 75, 81, 56, 86, 58, 25, 70, 34, 99,\n       57,  3,  4, 10, 27, 51, 46, 66, 29, 17, 44, 89, 65,  6, 96, 82, 20,\n       45,  5, 72, 18, 64, 22, 67, 23, 55, 77, 62, 61, 35, 12, 19, 47, 48,\n       90, 54, 76, 33, 93, 50, 63, 88, 39, 59, 73, 28,  9, 32, 68, 49, 37,\n       38, 36, 92, 41, 83, 97, 21, 11, 91, 30, 53, 95, 94, 24, 79])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 10, 12, 13, 15, 17, 18, 19, 21,\n       22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n       42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61,\n       62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79,\n       80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2])",
                "ri": "array of shape (85,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-30    1\n     2015-09-01    1\nb    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n                  ..\nz    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-28    1\n     2015-09-01    2\nName: julie, Length: 85, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0430>",
                "self.obj": "0     134.0\n1     781.0\n2     411.0\n3     392.0\n4     967.0\n      ...  \n95     73.0\n96    199.0\n97    760.0\n98    912.0\n99    272.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,\n        7,  7,  8,  8,  9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12,\n       12, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 16, 17, 17, 17,\n       17, 17, 18, 18, 19, 19, 19, 19, 19, 20, 20, 21, 21, 21, 21, 21, 22,\n       22, 22, 22, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25])",
                "_": "array of shape (84,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 15, 29, 42, 56, 70, 12, 50, -1, -1, 10, 35, 36,  0, 11, 25, 65,\n       67, -1, -1,  2, 13, 34, 61, 82, -1, 58, 62, 71, 46, 48, 68, 22, 57,\n       28, 83,  3, 47,  4, -1,  7, 41, -1, -1, 23, -1,  6, 14, 37, 69, 73,\n       80, -1,  5, 17, 59, -1, 19, 20, 45, 51, 52, 54, 64,  9, -1, 16, 38,\n       44, 74, 27, 63, 33, 40, 53, 72, 77, 49, 60, -1, -1, 26, 39, 55, 30,\n       31, 32, 76, 25, -1,  8, 18, 81, 21, 24, 43, 66, 75, 78, 79])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 15, 60,  7,  8, 13, 42, 43,  0, 14, 31, 78,\n       80, 26, 84,  2, 16, 40, 74, 98, 85, 71, 75, 87, 56, 58, 81, 25, 70,\n       34, 99,  3, 57,  4, 27, 10, 51, 46, 66, 29, 65,  6, 17, 44, 82, 89,\n       96, 45,  5, 20, 72, 64, 22, 23, 55, 61, 62, 67, 77, 12, 47, 19, 48,\n       54, 90, 33, 76, 39, 50, 63, 88, 93, 59, 73,  9, 28, 32, 49, 68, 36,\n       37, 38, 92, 41, 83, 11, 21, 97, 24, 30, 53, 79, 91, 94, 95])",
                "idx": "array([ 6,  8, 13, 18, 25, 29, 32, 34, 36, 38, 39, 42, 45, 52, 56, 58, 64,\n       65, 70, 72, 77, 79, 84, 88, 89, 93])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 2, 4, 5, 6, 4, 3, 2, 2, 2, 1, 3, 2, 7, 4, 2, 6, 1, 5, 2, 5, 2,\n       4, 4, 1, 4, 7])",
                "res": "array([2, 4, 5, 6, 4, 3, 2, 2, 2, 1, 3, 2, 7, 4, 2, 6, 1, 5, 2, 5, 2, 4,\n       4, 1, 4, 7])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    4\nc    5\nd    6\ne    4\nf    3\ng    2\nh    2\ni    2\nj    1\nk    3\nl    2\nm    7\nn    4\no    2\np    6\nq    1\nr    5\ns    2\nt    5\nu    2\nv    4\nw    4\nx    1\ny    4\nz    7\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0bb0>",
                "self.obj": "0     134.0\n1     781.0\n2     411.0\n3     392.0\n4     967.0\n      ...  \n95     73.0\n96    199.0\n97    760.0\n98    912.0\n99    272.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        7,  8,  8,  9, 10, 10, 11, 12, 13, 13, 14, 15, 15, 16, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34, 35,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65, 66,\n       67, 68, 69, 70, 71, 71, 72, 73, 74, 75, 76, 77, 78, 79, 79])",
                "_": "array of shape (84,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 15, 29, 34, 42, 56, 64, 70, 12, 50, 10, -1, -1, 35, 36,  0,\n       11, 25, 65, 67, -1, -1,  2, 82, 13, 61, 58, -1, 71, 62, 68, 46, 48,\n       22, 57, 28, 83, 47,  4,  7, -1, 41, -1, -1, 23, 14, 37, 73, -1,  6,\n       80, 69, 17, -1,  5, 59, -1, 19, 54, 20, 45, 52, 51,  9, 16, -1, 38,\n       74, 44, 63, 27, 77, 40, 53, 72, 33, 49, 60, -1, -1, 26, 55, 39, 31,\n       32, 30, 76, 25, -1, 81, 18,  8, 75, 24, 43, 79, 78, 21, 66])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 15, 60, 13,  8,  7, 42, 43,  0,\n       14, 31, 78, 80, 26, 84,  2, 98, 16, 74, 71, 85, 87, 75, 81, 56, 58,\n       25, 70, 34, 99, 57,  4, 10, 27, 51, 46, 66, 29, 17, 44, 89, 65,  6,\n       96, 82, 20, 45,  5, 72, 64, 22, 67, 23, 55, 62, 61, 12, 19, 47, 48,\n       90, 54, 76, 33, 93, 50, 63, 88, 39, 59, 73, 28,  9, 32, 68, 49, 37,\n       38, 36, 92, 41, 83, 97, 21, 11, 91, 30, 53, 95, 94, 24, 79])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 25, 27, 28, 30,\n       31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n       49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85,\n       86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2])",
                "ri": "array of shape (80,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-30    1\n     2015-09-01    1\nb    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n                  ..\nz    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-28    1\n     2015-09-01    2\nName: julie, Length: 80, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0640>",
                "self.obj": "0     134.0\n1     781.0\n2     411.0\n3     392.0\n4     967.0\n      ...  \n95     73.0\n96    199.0\n97    760.0\n98    912.0\n99    272.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,\n        7,  7,  8,  8,  9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12,\n       12, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 16, 17, 17, 17,\n       17, 17, 18, 18, 19, 19, 19, 19, 19, 20, 20, 21, 21, 21, 21, 21, 22,\n       22, 22, 22, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25])",
                "_": "array of shape (84,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 15, 29, 42, 56, 70, 12, 50, -1, -1, 10, 35, 36,  0, 11, 25, 65,\n       67, -1, -1,  2, 13, 34, 61, 82, -1, 58, 62, 71, 46, 48, 68, 22, 57,\n       28, 83,  3, 47,  4, -1,  7, 41, -1, -1, 23, -1,  6, 14, 37, 69, 73,\n       80, -1,  5, 17, 59, -1, 19, 20, 45, 51, 52, 54, 64,  9, -1, 16, 38,\n       44, 74, 27, 63, 33, 40, 53, 72, 77, 49, 60, -1, -1, 26, 39, 55, 30,\n       31, 32, 76, 25, -1,  8, 18, 81, 21, 24, 43, 66, 75, 78, 79])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 15, 60,  7,  8, 13, 42, 43,  0, 14, 31, 78,\n       80, 26, 84,  2, 16, 40, 74, 98, 85, 71, 75, 87, 56, 58, 81, 25, 70,\n       34, 99,  3, 57,  4, 27, 10, 51, 46, 66, 29, 65,  6, 17, 44, 82, 89,\n       96, 45,  5, 20, 72, 64, 22, 23, 55, 61, 62, 67, 77, 12, 47, 19, 48,\n       54, 90, 33, 76, 39, 50, 63, 88, 93, 59, 73,  9, 28, 32, 49, 68, 36,\n       37, 38, 92, 41, 83, 11, 21, 97, 24, 30, 53, 79, 91, 94, 95])",
                "idx": "array([ 6,  8, 13, 18, 25, 29, 32, 34, 36, 38, 39, 42, 45, 52, 56, 58, 64,\n       65, 70, 72, 77, 79, 84, 88, 89, 93])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 2, 4, 5, 6, 4, 3, 2, 2, 2, 1, 3, 2, 7, 4, 2, 6, 1, 5, 2, 5, 2,\n       4, 4, 1, 4, 7])",
                "res": "array([2, 4, 5, 6, 4, 3, 2, 2, 2, 1, 3, 2, 7, 4, 2, 6, 1, 5, 2, 5, 2, 4,\n       4, 1, 4, 7])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    4\nc    5\nd    6\ne    4\nf    3\ng    2\nh    2\ni    2\nj    1\nk    3\nl    2\nm    7\nn    4\no    2\np    6\nq    1\nr    5\ns    2\nt    5\nu    2\nv    4\nw    4\nx    1\ny    4\nz    7\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4a00>",
                "self.obj": "0     134.0\n1     781.0\n2     411.0\n3     392.0\n4     967.0\n      ...  \n95     73.0\n96    199.0\n97    760.0\n98    912.0\n99    272.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        7,  8,  8,  9, 10, 10, 11, 12, 13, 13, 14, 15, 15, 16, 17, 18, 19,\n       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34, 35,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65, 66,\n       67, 68, 69, 70, 71, 71, 72, 73, 74, 75, 76, 77, 78, 79, 79])",
                "_": "array of shape (84,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 15, 29, 34, 42, 56, 64, 70, 12, 50, 10, -1, -1, 35, 36,  0,\n       11, 25, 65, 67, -1, -1,  2, 82, 13, 61, 58, -1, 71, 62, 68, 46, 48,\n       22, 57, 28, 83, 47,  4,  7, -1, 41, -1, -1, 23, 14, 37, 73, -1,  6,\n       80, 69, 17, -1,  5, 59, -1, 19, 54, 20, 45, 52, 51,  9, 16, -1, 38,\n       74, 44, 63, 27, 77, 40, 53, 72, 33, 49, 60, -1, -1, 26, 55, 39, 31,\n       32, 30, 76, 25, -1, 81, 18,  8, 75, 24, 43, 79, 78, 21, 66])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 15, 60, 13,  8,  7, 42, 43,  0,\n       14, 31, 78, 80, 26, 84,  2, 98, 16, 74, 71, 85, 87, 75, 81, 56, 58,\n       25, 70, 34, 99, 57,  4, 10, 27, 51, 46, 66, 29, 17, 44, 89, 65,  6,\n       96, 82, 20, 45,  5, 72, 64, 22, 67, 23, 55, 62, 61, 12, 19, 47, 48,\n       90, 54, 76, 33, 93, 50, 63, 88, 39, 59, 73, 28,  9, 32, 68, 49, 37,\n       38, 36, 92, 41, 83, 97, 21, 11, 91, 30, 53, 95, 94, 24, 79])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 25, 27, 28, 30,\n       31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n       49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85,\n       86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2])",
                "ri": "array of shape (80,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-30    1\n     2015-09-01    1\nb    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n                  ..\nz    2015-08-24    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-28    1\n     2015-09-01    2\nName: julie, Length: 80, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c07f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0640>",
                "self.obj": "0      760\n1      416\n2      430\n3      261\n4      110\n      ... \n995    301\n996    993\n997    870\n998     59\n999    387\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (633,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  36,  79, 109, 144, 179, 211, 249, 278, 311, 355, 402, 444,\n       488, 525, 569, 603, 631, 665, 709, 753, 801, 848, 893, 932, 965])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([35, 43, 30, 35, 35, 32, 37, 28, 31, 41, 47, 42, 44, 37, 43, 33, 27,\n       34, 44, 43, 47, 46, 45, 38, 33, 35])",
                "res": "array([35, 43, 30, 35, 35, 32, 37, 28, 31, 41, 47, 42, 44, 37, 43, 33, 27,\n       34, 44, 43, 47, 46, 45, 38, 33, 35])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    35\nb    43\nc    30\nd    35\ne    35\nf    32\ng    37\nh    28\ni    31\nj    41\nk    47\nl    42\nm    44\nn    37\no    43\np    33\nq    27\nr    34\ns    44\nt    43\nu    47\nv    46\nw    45\nx    38\ny    33\nz    35\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0c70>",
                "self.obj": "0      760\n1      416\n2      430\n3      261\n4      110\n      ... \n995    301\n996    993\n997    870\n998     59\n999    387\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (633,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (250,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (250,)",
                "res": "array of shape (250,)",
                "ri": "array of shape (250,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    4\n     2015-08-26    3\n     2015-08-27    2\n     2015-08-28    4\n                  ..\nz    2015-08-28    6\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    3\n     2015-09-01    4\nName: julie, Length: 250, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0490>",
                "self.obj": "0      760.0\n1      416.0\n2      430.0\n3      261.0\n4      110.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     59.0\n999    387.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (576,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  91, 133, 163, 196, 230, 261, 298, 324, 355, 398, 441, 481,\n       519, 553, 593, 625, 651, 684, 727, 767, 811, 857, 898, 935, 966])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([51, 28, 40, 29, 26, 29, 27, 32, 23, 25, 36, 36, 33, 30, 29, 37, 28,\n       23, 28, 32, 35, 35, 42, 37, 30, 29, 29])",
                "res": "array([28, 40, 29, 26, 29, 27, 32, 23, 25, 36, 36, 33, 30, 29, 37, 28, 23,\n       28, 32, 35, 35, 42, 37, 30, 29, 29])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    28\nb    40\nc    29\nd    26\ne    29\nf    27\ng    32\nh    23\ni    25\nj    36\nk    36\nl    33\nm    30\nn    29\no    37\np    28\nq    23\nr    28\ns    32\nt    35\nu    35\nv    42\nw    37\nx    30\ny    29\nz    29\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0cd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0ee0>",
                "self.obj": "0      760.0\n1      416.0\n2      430.0\n3      261.0\n4      110.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     59.0\n999    387.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (576,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (249,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (250,)",
                "res": "array of shape (249,)",
                "ri": "array of shape (249,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-26    3\n     2015-08-27    2\n     2015-08-28    3\n                  ..\nz    2015-08-28    6\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    3\n     2015-09-01    4\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0c70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c0cd0>",
                "self.obj": "0      760.0\n1      416.0\n2      430.0\n3      261.0\n4      110.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     59.0\n999    387.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (576,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  91, 133, 163, 196, 230, 261, 298, 324, 355, 398, 441, 481,\n       519, 553, 593, 625, 651, 684, 727, 767, 811, 857, 898, 935, 966])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([51, 28, 40, 29, 26, 29, 27, 32, 23, 25, 36, 36, 33, 30, 29, 37, 28,\n       23, 28, 32, 35, 35, 42, 37, 30, 29, 29])",
                "res": "array([28, 40, 29, 26, 29, 27, 32, 23, 25, 36, 36, 33, 30, 29, 37, 28, 23,\n       28, 32, 35, 35, 42, 37, 30, 29, 29])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    28\nb    40\nc    29\nd    26\ne    29\nf    27\ng    32\nh    23\ni    25\nj    36\nk    36\nl    33\nm    30\nn    29\no    37\np    28\nq    23\nr    28\ns    32\nt    35\nu    35\nv    42\nw    37\nx    30\ny    29\nz    29\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2c0a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2c02b0>",
                "self.obj": "0      760.0\n1      416.0\n2      430.0\n3      261.0\n4      110.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     59.0\n999    387.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (576,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (249,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (250,)",
                "res": "array of shape (249,)",
                "ri": "array of shape (249,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-26    3\n     2015-08-27    2\n     2015-08-28    3\n                  ..\nz    2015-08-28    6\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    3\n     2015-09-01    4\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1aba00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab040>",
                "self.obj": "0        94\n1         8\n2       703\n3       631\n4       886\n       ... \n9995    634\n9996     41\n9997    671\n9998    381\n9999    333\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([ 94,   8, 703, ..., 671, 381, 333])",
                "codes": "array([  0,   1,   2, ..., 991, 991, 992])",
                "sorter": "array([2324, 1596,  779, ..., 4639, 6883, 7349])",
                "idx": "array([   0,  395,  800, 1180, 1592, 1932, 2320, 2698, 3081, 3449, 3864,\n       4230, 4606, 4993, 5378, 5753, 6146, 6538, 6913, 7312, 7694, 8084,\n       8485, 8835, 9226, 9599])",
                "inc": "array([1, 1, 1, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([336, 351, 319, 346, 288, 321, 313, 315, 319, 335, 314, 315, 329,\n       301, 327, 324, 322, 319, 326, 321, 326, 321, 298, 322, 309, 322])",
                "res": "array([336, 351, 319, 346, 288, 321, 313, 315, 319, 335, 314, 315, 329,\n       301, 327, 324, 322, 319, 326, 321, 326, 321, 298, 322, 309, 322])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    336\nb    351\nc    319\nd    346\ne    288\nf    321\ng    313\nh    315\ni    319\nj    335\nk    314\nl    315\nm    329\nn    301\no    327\np    324\nq    322\nr    319\ns    326\nt    321\nu    326\nv    321\nw    298\nx    322\ny    309\nz    322\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abd00>",
                "self.obj": "0        94\n1         8\n2       703\n3       631\n4       886\n       ... \n9995    634\n9996     41\n9997    671\n9998    381\n9999    333\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([ 94,   8, 703, ..., 671, 381, 333])",
                "codes": "array([  9,  11,  28, ..., 893, 924, 959])",
                "sorter": "array([9430, 2945, 1524, ..., 2325, 9925, 3260])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    46\n     2015-08-24    37\n     2015-08-25    41\n     2015-08-26    37\n     2015-08-27    44\n                   ..\nz    2015-08-28    44\n     2015-08-29    37\n     2015-08-30    38\n     2015-08-31    33\n     2015-09-01    31\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1aba60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1ab040>",
                "self.obj": "0        94.0\n1         8.0\n2       703.0\n3       631.0\n4       886.0\n        ...  \n9995    634.0\n9996     41.0\n9997    671.0\n9998    381.0\n9999    333.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (999,)",
                "val": "array([ 94.,   8., 703., ..., 671., 381., 333.])",
                "codes": "array([ -1,  -1,  -1, ..., 988, 993, 997])",
                "sorter": "array([ 103,  256,  273, ..., 5904, 5921, 6684])",
                "idx": "array([ 589,  968, 1354, 1705, 2088, 2409, 2775, 3128, 3487, 3828, 4218,\n       4561, 4915, 5281, 5643, 6002, 6372, 6742, 7099, 7470, 7828, 8199,\n       8574, 8906, 9279, 9629])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([386, 281, 288, 259, 286, 233, 265, 248, 260, 250, 277, 262, 260,\n       263, 254, 277, 267, 264, 269, 281, 252, 276, 264, 245, 273, 252,\n       266])",
                "res": "array([281, 288, 259, 286, 233, 265, 248, 260, 250, 277, 262, 260, 263,\n       254, 277, 267, 264, 269, 281, 252, 276, 264, 245, 273, 252, 266])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    281\nb    288\nc    259\nd    286\ne    233\nf    265\ng    248\nh    260\ni    250\nj    277\nk    262\nl    260\nm    263\nn    254\no    277\np    267\nq    264\nr    269\ns    281\nt    252\nu    276\nv    264\nw    245\nx    273\ny    252\nz    266\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1aba00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1abd00>",
                "self.obj": "0        94.0\n1         8.0\n2       703.0\n3       631.0\n4       886.0\n        ...  \n9995    634.0\n9996     41.0\n9997    671.0\n9998    381.0\n9999    333.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (999,)",
                "val": "array([ 94.,   8., 703., ..., 671., 381., 333.])",
                "codes": "array([ -1,  -1,  -1, ..., 934, 968, 993])",
                "sorter": "array([ 103,  256,  273, ..., 3260, 4651, 5921])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    42\n     2015-08-24    30\n     2015-08-25    31\n     2015-08-26    33\n     2015-08-27    32\n                   ..\nz    2015-08-28    37\n     2015-08-29    29\n     2015-08-30    27\n     2015-08-31    27\n     2015-09-01    20\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1ab040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4ca0>",
                "self.obj": "0        94.0\n1         8.0\n2       703.0\n3       631.0\n4       886.0\n        ...  \n9995    634.0\n9996     41.0\n9997    671.0\n9998    381.0\n9999    333.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (999,)",
                "val": "array([ 94.,   8., 703., ..., 671., 381., 333.])",
                "codes": "array([ -1,  -1,  -1, ..., 988, 993, 997])",
                "sorter": "array([ 103,  256,  273, ..., 5904, 5921, 6684])",
                "idx": "array([ 589,  968, 1354, 1705, 2088, 2409, 2775, 3128, 3487, 3828, 4218,\n       4561, 4915, 5281, 5643, 6002, 6372, 6742, 7099, 7470, 7828, 8199,\n       8574, 8906, 9279, 9629])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([386, 281, 288, 259, 286, 233, 265, 248, 260, 250, 277, 262, 260,\n       263, 254, 277, 267, 264, 269, 281, 252, 276, 264, 245, 273, 252,\n       266])",
                "res": "array([281, 288, 259, 286, 233, 265, 248, 260, 250, 277, 262, 260, 263,\n       254, 277, 267, 264, 269, 281, 252, 276, 264, 245, 273, 252, 266])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    281\nb    288\nc    259\nd    286\ne    233\nf    265\ng    248\nh    260\ni    250\nj    277\nk    262\nl    260\nm    263\nn    254\no    277\np    267\nq    264\nr    269\ns    281\nt    252\nu    276\nv    264\nw    245\nx    273\ny    252\nz    266\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1aba60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4ca0>",
                "self.obj": "0        94.0\n1         8.0\n2       703.0\n3       631.0\n4       886.0\n        ...  \n9995    634.0\n9996     41.0\n9997    671.0\n9998    381.0\n9999    333.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (999,)",
                "val": "array([ 94.,   8., 703., ..., 671., 381., 333.])",
                "codes": "array([ -1,  -1,  -1, ..., 934, 968, 993])",
                "sorter": "array([ 103,  256,  273, ..., 3260, 4651, 5921])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    42\n     2015-08-24    30\n     2015-08-25    31\n     2015-08-26    33\n     2015-08-27    32\n                   ..\nz    2015-08-28    37\n     2015-08-29    29\n     2015-08-30    27\n     2015-08-31    27\n     2015-09-01    20\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4be0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a44c0>",
                "self.obj": "0        507\n1        355\n2        660\n3        917\n4        633\n        ... \n99995    117\n99996    856\n99997    663\n99998    960\n99999    842\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([507, 355, 660, ..., 663, 960, 842])",
                "codes": "array([  0,   0,   0, ..., 998, 999, 999])",
                "sorter": "array([ 7414, 34833, 36390, ..., 78180, 24033, 96900])",
                "idx": "array([    0,  3921,  7875, 11784, 15610, 19471, 23239, 27024, 30768,\n       34626, 38436, 42315, 46212, 50077, 53979, 57935, 61740, 65486,\n       69274, 73162, 77027, 80823, 84763, 88488, 92243, 96181])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([979, 977, 973, 970, 980, 973, 975, 974, 977, 976, 977, 980, 984,\n       985, 988, 978, 971, 978, 977, 985, 979, 978, 976, 974, 980, 983])",
                "res": "array([979, 977, 973, 970, 980, 973, 975, 974, 977, 976, 977, 980, 984,\n       985, 988, 978, 971, 978, 977, 985, 979, 978, 976, 974, 980, 983])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    979\nb    977\nc    973\nd    970\ne    980\nf    973\ng    975\nh    974\ni    977\nj    976\nk    977\nl    980\nm    984\nn    985\no    988\np    978\nq    971\nr    978\ns    977\nt    985\nu    979\nv    978\nw    976\nx    974\ny    980\nz    983\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4e80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4130>",
                "self.obj": "0        507\n1        355\n2        660\n3        917\n4        633\n        ... \n99995    117\n99996    856\n99997    663\n99998    960\n99999    842\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([507, 355, 660, ..., 663, 960, 842])",
                "codes": "array([  3,   4,   5, ..., 990, 990, 999])",
                "sorter": "array([37293, 58332, 15761, ..., 76700, 76759, 96900])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    320\n     2015-08-24    318\n     2015-08-25    329\n     2015-08-26    301\n     2015-08-27    331\n                  ... \nz    2015-08-28    313\n     2015-08-29    322\n     2015-08-30    311\n     2015-08-31    316\n     2015-09-01    328\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4fa0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4cd0>",
                "self.obj": "0        507.0\n1        355.0\n2        660.0\n3        917.0\n4        633.0\n         ...  \n99995    117.0\n99996    856.0\n99997    663.0\n99998    960.0\n99999    842.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([507., 355., 660., ..., 663., 960., 842.])",
                "codes": "array([ -1,  -1,  -1, ..., 999, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 81773, 93329, 96792])",
                "idx": "array([ 5883,  9557, 13291, 16976, 20593, 24250, 27762, 31305, 34838,\n       38425, 41996, 45638, 49313, 52982, 56667, 60393, 63987, 67486,\n       71057, 74694, 78337, 81917, 85605, 89136, 92687, 96390])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([995, 966, 952, 948, 938, 959, 947, 942, 945, 952, 954, 951, 957,\n       961, 961, 969, 952, 950, 953, 947, 960, 956, 958, 950, 945, 955,\n       958])",
                "res": "array([966, 952, 948, 938, 959, 947, 942, 945, 952, 954, 951, 957, 961,\n       961, 969, 952, 950, 953, 947, 960, 956, 958, 950, 945, 955, 958])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    966\nb    952\nc    948\nd    938\ne    959\nf    947\ng    942\nh    945\ni    952\nj    954\nk    951\nl    957\nm    961\nn    961\no    969\np    952\nq    950\nr    953\ns    947\nt    960\nu    956\nv    958\nw    950\nx    945\ny    955\nz    958\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a43d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4100>",
                "self.obj": "0        507.0\n1        355.0\n2        660.0\n3        917.0\n4        633.0\n         ...  \n99995    117.0\n99996    856.0\n99997    663.0\n99998    960.0\n99999    842.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([507., 355., 660., ..., 663., 960., 842.])",
                "codes": "array([ -1,  -1,  -1, ..., 986, 991, 997])",
                "sorter": "array([  103,   256,   273, ..., 76759, 11024, 96900])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    260\n     2015-08-24    262\n     2015-08-25    261\n     2015-08-26    251\n     2015-08-27    269\n                  ... \nz    2015-08-28    241\n     2015-08-29    259\n     2015-08-30    247\n     2015-08-31    253\n     2015-09-01    273\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a48b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4f10>",
                "self.obj": "0        507.0\n1        355.0\n2        660.0\n3        917.0\n4        633.0\n         ...  \n99995    117.0\n99996    856.0\n99997    663.0\n99998    960.0\n99999    842.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([507., 355., 660., ..., 663., 960., 842.])",
                "codes": "array([ -1,  -1,  -1, ..., 999, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 81773, 93329, 96792])",
                "idx": "array([ 5883,  9557, 13291, 16976, 20593, 24250, 27762, 31305, 34838,\n       38425, 41996, 45638, 49313, 52982, 56667, 60393, 63987, 67486,\n       71057, 74694, 78337, 81917, 85605, 89136, 92687, 96390])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([995, 966, 952, 948, 938, 959, 947, 942, 945, 952, 954, 951, 957,\n       961, 961, 969, 952, 950, 953, 947, 960, 956, 958, 950, 945, 955,\n       958])",
                "res": "array([966, 952, 948, 938, 959, 947, 942, 945, 952, 954, 951, 957, 961,\n       961, 969, 952, 950, 953, 947, 960, 956, 958, 950, 945, 955, 958])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    966\nb    952\nc    948\nd    938\ne    959\nf    947\ng    942\nh    945\ni    952\nj    954\nk    951\nl    957\nm    961\nn    961\no    969\np    952\nq    950\nr    953\ns    947\nt    960\nu    956\nv    958\nw    950\nx    945\ny    955\nz    958\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4f10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4100>",
                "self.obj": "0        507.0\n1        355.0\n2        660.0\n3        917.0\n4        633.0\n         ...  \n99995    117.0\n99996    856.0\n99997    663.0\n99998    960.0\n99999    842.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([507., 355., 660., ..., 663., 960., 842.])",
                "codes": "array([ -1,  -1,  -1, ..., 986, 991, 997])",
                "sorter": "array([  103,   256,   273, ..., 76759, 11024, 96900])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    260\n     2015-08-24    262\n     2015-08-25    261\n     2015-08-26    251\n     2015-08-27    269\n                  ... \nz    2015-08-28    241\n     2015-08-29    259\n     2015-08-30    247\n     2015-08-31    253\n     2015-09-01    273\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4d00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a49d0>",
                "self.obj": "0     8\n1     0\n2     6\n3     3\n4     8\n     ..\n95    5\n96    8\n97    3\n98    6\n99    7\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,\n        4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  7,\n        8,  8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15,\n       15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19,\n       20, 20, 21, 21, 21, 21, 22, 22, 23, 24, 24, 24, 25, 25, 25])",
                "_": "array([8, 0, 6, 3, 7, 5, 1, 4, 9, 2])",
                "val": "array([8, 0, 6, 3, 8, 7, 3, 0, 0, 5, 6, 5, 1, 0, 8, 6, 6, 5, 6, 7, 3, 4,\n       0, 8, 4, 3, 6, 6, 0, 5, 6, 4, 6, 0, 1, 1, 8, 6, 9, 4, 4, 4, 9, 5,\n       0, 3, 6, 5, 8, 5, 6, 6, 7, 1, 0, 4, 0, 5, 6, 7, 7, 2, 7, 7, 8, 5,\n       5, 4, 5, 7, 6, 4, 4, 0, 6, 0, 8, 0, 3, 1, 8, 0, 6, 4, 8, 2, 7, 4,\n       4, 1, 8, 2, 7, 0, 0, 5, 8, 3, 6, 7])",
                "codes": "array([0, 2, 3, 4, 9, 1, 2, 7, 1, 2, 2, 4, 2, 3, 7, 7, 0, 2, 2, 7, 4, 5,\n       6, 7, 8, 3, 4, 7, 9, 1, 2, 4, 5, 6, 1, 7, 9, 1, 2, 5, 5, 5, 0, 0,\n       1, 1, 2, 4, 4, 5, 6, 7, 0, 1, 4, 0, 1, 1, 2, 4, 3, 5, 7, 3, 7, 1,\n       1, 1, 3, 5, 6, 0, 1, 1, 2, 5, 7, 1, 3, 4, 7, 0, 2, 2, 2, 2, 5, 0,\n       0, 5, 6, 0, 2, 8, 4, 6, 7, 0, 2, 5])",
                "sorter": "array([ 0, 46, 25, 19, 61,  1, 50, 31, 28,  2, 51, 86, 10,  3, 55, 83,  4,\n       15, 18, 41,  5, 49, 79, 87, 42,  6, 63, 72, 91,  7, 98, 62, 29, 35,\n        8, 71, 85, 81, 82,  9, 65, 95, 14, 64, 75, 77, 58, 52, 92, 11, 12,\n       21, 90, 13, 69, 48, 44, 93, 16, 59, 97, 17, 39, 20, 67, 22, 56, 94,\n       78, 66, 89, 23, 54, 73, 70, 43, 88, 33, 45, 99, 24, 80, 26, 32, 27,\n       30, 68, 36, 96, 47, 34, 76, 37, 38, 60, 53, 40, 84, 74, 57])",
                "idx": "array([ 0,  5,  8, 12, 16, 20, 25, 29, 34, 37, 42, 52, 55, 60, 63, 65, 71,\n       77, 81, 84, 85, 87, 91, 93, 94, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 3, 3, 3, 3, 5, 4, 5, 3, 3, 7, 3, 4, 3, 2, 4, 5, 4, 2, 1, 2, 3,\n       2, 1, 3, 3])",
                "res": "array([5, 3, 3, 3, 3, 5, 4, 5, 3, 3, 7, 3, 4, 3, 2, 4, 5, 4, 2, 1, 2, 3,\n       2, 1, 3, 3])",
                "ri": "Index(['k', 'u', 'd', 'r', 'q', 'g', 'l', 'w', 'f', 'e', 'y', 'c', 'n', 'x',\n       'v', 'z', 'm', 'h', 'b', 'o', 'p', 'a', 'j', 'i', 't', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    5\nu    3\nd    3\nr    3\nq    3\ng    5\nl    4\nw    5\nf    3\ne    3\ny    7\nc    3\nn    4\nx    3\nv    2\nz    4\nm    5\nh    4\nb    2\no    1\np    2\na    3\nj    2\ni    1\nt    3\ns    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4df0>",
                "self.obj": "0     8\n1     0\n2     6\n3     3\n4     8\n     ..\n95    5\n96    8\n97    3\n98    6\n99    7\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  5,  5,  6,  7,  7,  8,  9,  9, 10, 11, 11,\n       12, 12, 13, 14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n       41, 41, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 50, 51, 52, 53,\n       54, 54, 55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])",
                "_": "array([8, 0, 6, 3, 7, 5, 1, 4, 9, 2])",
                "val": "array([8, 0, 6, 3, 8, 7, 3, 0, 0, 5, 6, 5, 1, 0, 8, 6, 6, 5, 6, 7, 3, 4,\n       0, 8, 4, 3, 6, 6, 0, 5, 6, 4, 6, 0, 1, 1, 8, 6, 9, 4, 4, 4, 9, 5,\n       0, 3, 6, 5, 8, 5, 6, 6, 7, 1, 0, 4, 0, 5, 6, 7, 7, 2, 7, 7, 8, 5,\n       5, 4, 5, 7, 6, 4, 4, 0, 6, 0, 8, 0, 3, 1, 8, 0, 6, 4, 8, 2, 7, 4,\n       4, 1, 8, 2, 7, 0, 0, 5, 8, 3, 6, 7])",
                "codes": "array([0, 1, 2, 3, 0, 4, 5, 7, 3, 1, 4, 1, 5, 5, 2, 0, 5, 0, 6, 1, 2, 2,\n       5, 2, 3, 4, 3, 7, 1, 0, 7, 2, 2, 1, 4, 5, 2, 7, 0, 2, 1, 6, 6, 0,\n       2, 8, 7, 7, 7, 8, 1, 1, 2, 5, 1, 3, 2, 5, 0, 4, 2, 2, 4, 4, 6, 7,\n       1, 5, 1, 2, 9, 4, 5, 7, 5, 0, 4, 7, 7, 2, 0, 1, 4, 3, 6, 1, 2, 7,\n       0, 9, 7, 6, 9, 1, 1, 5, 0, 3, 2, 4])",
                "sorter": "array([ 0,  1,  2,  3,  4,  5, 49, 87,  6,  7, 62,  8,  9, 65, 10, 64, 11,\n       14, 12, 13, 15, 16, 17, 18, 25, 19, 20, 21, 22, 23, 24, 26, 27, 28,\n       86, 29, 30, 31, 80, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 54,\n       73, 70, 43, 44, 45, 46, 47, 48, 59, 50, 51, 52, 60, 53, 55, 56, 57,\n       75, 58, 61, 63, 66, 67, 68, 90, 69, 71, 72, 74, 76, 77, 92, 78, 79,\n       81, 82, 83, 84, 85, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  8,  9, 11, 12, 14, 15, 17, 19, 20, 21, 22,\n       23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42,\n       43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 62, 63,\n       65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1,\n       1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1,\n       1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (83,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-24    1\nu    2015-08-27    1\nd    2015-08-27    1\nr    2015-08-31    1\nq    2015-09-01    1\n                  ..\ne    2015-08-29    1\na    2015-08-27    1\nx    2015-08-26    1\nw    2015-08-23    1\nh    2015-08-27    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4d00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4520>",
                "self.obj": "0     8.0\n1     0.0\n2     6.0\n3     3.0\n4     8.0\n     ... \n95    5.0\n96    8.0\n97    3.0\n98    6.0\n99    7.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,\n        2,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,\n        7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n       10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 14, 14,\n       14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 19, 19,\n       20, 20, 21, 21, 21, 21, 22, 22, 23, 24, 24, 24, 25, 25, 25])",
                "_": "array([8., 0., 6., 3., 7., 5., 1., 4., 9., 2.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  2,  4,  4,  4,  6, -1,  0,  3,  4,  9, -1,  2,  2, -1,  2,  3,\n        7,  0,  2,  7,  4,  5,  6,  7,  8,  3,  4,  7,  9, -1,  2,  4,  5,\n       -1, -1,  7, -1, -1,  1,  2,  5, -1,  0,  1,  1,  2,  4,  5,  6,  7,\n        0,  1,  0,  1,  1,  2,  4,  3,  5,  7,  3,  7, -1,  1,  1,  1,  3,\n        6,  0,  1,  1,  2,  5,  7, -1,  1,  4,  7, -1,  0,  2, -1,  2,  5,\n        2,  7, -1,  0,  0,  6,  0,  2,  8,  4,  6,  7, -1,  2,  5])",
                "sorter": "array([ 1, 18, 52, 69, 86, 35, 46,  0, 25, 19, 61, 28,  2, 51, 83, 10,  3,\n       55,  4, 15, 41,  5, 49, 79, 87, 42,  6, 63, 72, 91,  7, 98, 62, 29,\n        8, 85, 71,  9, 65, 81, 82, 95, 64, 14, 75, 77, 58, 92, 11, 12, 21,\n       90, 13, 48, 44, 93, 16, 59, 97, 17, 39, 20, 67, 66, 22, 56, 94, 78,\n       89, 23, 54, 73, 70, 43, 88, 45, 33, 99, 24, 26, 80, 32, 27, 30, 68,\n       50, 31, 47, 36, 96, 34, 76, 37, 38, 60, 53, 40, 84, 74, 57])",
                "idx": "array([ 6, 11, 14, 18, 21, 26, 30, 34, 37, 42, 51, 53, 58, 61, 63, 69, 75,\n       79, 82, 83, 85, 87, 91, 93, 94, 97])",
                "inc": "array([1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,\n       0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 4, 1, 3, 3, 5, 4, 3, 1, 3, 7, 2, 4, 3, 2, 3, 5, 3, 2, 0, 2, 2,\n       2, 2, 1, 3, 2])",
                "res": "array([4, 1, 3, 3, 5, 4, 3, 1, 3, 7, 2, 4, 3, 2, 3, 5, 3, 2, 0, 2, 2, 2,\n       2, 1, 3, 2])",
                "ri": "Index(['k', 'd', 'r', 'q', 'g', 'l', 'w', 'f', 'e', 'y', 'c', 'n', 'x', 'v',\n       'z', 'm', 'h', 'b', 'o', 'p', 'u', 'a', 'j', 'i', 't', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    4\nd    1\nr    3\nq    3\ng    5\nl    4\nw    3\nf    1\ne    3\ny    7\nc    2\nn    4\nx    3\nv    2\nz    3\nm    5\nh    3\nb    2\no    0\np    2\nu    2\na    2\nj    2\ni    1\nt    3\ns    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4ee0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4790>",
                "self.obj": "0     8.0\n1     0.0\n2     6.0\n3     3.0\n4     8.0\n     ... \n95    5.0\n96    8.0\n97    3.0\n98    6.0\n99    7.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  3,  3,  4,  5,\n        5,  6,  7,  7,  8,  9,  9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 36, 36, 36, 37, 38, 39, 40, 41, 41, 42, 43, 44, 44, 45,\n       46, 47, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n       62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76])",
                "_": "array([8., 0., 6., 3., 7., 5., 1., 4., 9., 2.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  2,  3,  4,  4,  4,  6,  7,  0,  2,  0,  4,  5,  7,  3, -1,\n        4, -1, -1, -1,  2, -1,  5,  0,  6,  1,  2,  2,  5,  3,  4,  3,  7,\n        1,  0,  7, -1, -1, -1,  5,  2,  7,  0,  2,  1,  6,  0,  2,  8,  7,\n        7,  8,  1,  1,  2,  5,  1, -1, -1, -1,  0,  4,  2,  2,  4,  6,  7,\n        1,  5,  1,  2,  9,  4, -1,  7,  5,  7,  7,  2,  0,  3,  6,  1,  2,\n       -1, -1, -1,  7,  6,  0,  9,  4,  1,  1,  5,  0,  3,  2,  4])",
                "sorter": "array([ 1, 77, 18,  3, 52, 69, 86, 35, 40,  0,  2,  4,  5, 49, 87,  6,  7,\n       62,  8,  9, 65, 10, 64, 11, 14, 12, 13, 15, 16, 17, 25, 19, 20, 21,\n       22, 23, 24, 26, 27, 28, 29, 30, 31, 80, 32, 33, 34, 36, 37, 38, 39,\n       41, 42, 54, 73, 70, 43, 44, 45, 46, 47, 48, 59, 50, 51, 60, 53, 55,\n       56, 57, 75, 58, 61, 63, 66, 67, 68, 71, 72, 74, 76, 78, 79, 81, 82,\n       83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 12, 15, 16, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 72, 73,\n       74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\n       91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 1, 1, 1, 3, 1, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0, 0, 0, 2, 1,\n       1, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 3, 1, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0,\n       0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0, 0, 0, 2, 1, 1,\n       2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (77,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-24    1\nd    2015-08-27    1\nq    2015-09-01    1\ng    2015-08-31    3\nl    2015-08-28    1\n                  ..\ne    2015-08-29    1\na    2015-08-27    1\nx    2015-08-26    1\nw    2015-08-23    1\nh    2015-08-27    1\nName: julie, Length: 77, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a45b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4ee0>",
                "self.obj": "0     8.0\n1     0.0\n2     6.0\n3     3.0\n4     8.0\n     ... \n95    5.0\n96    8.0\n97    3.0\n98    6.0\n99    7.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,\n        2,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,\n        7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n       10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 14, 14,\n       14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 19, 19,\n       20, 20, 21, 21, 21, 21, 22, 22, 23, 24, 24, 24, 25, 25, 25])",
                "_": "array([8., 0., 6., 3., 7., 5., 1., 4., 9., 2.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  2,  4,  4,  4,  6, -1,  0,  3,  4,  9, -1,  2,  2, -1,  2,  3,\n        7,  0,  2,  7,  4,  5,  6,  7,  8,  3,  4,  7,  9, -1,  2,  4,  5,\n       -1, -1,  7, -1, -1,  1,  2,  5, -1,  0,  1,  1,  2,  4,  5,  6,  7,\n        0,  1,  0,  1,  1,  2,  4,  3,  5,  7,  3,  7, -1,  1,  1,  1,  3,\n        6,  0,  1,  1,  2,  5,  7, -1,  1,  4,  7, -1,  0,  2, -1,  2,  5,\n        2,  7, -1,  0,  0,  6,  0,  2,  8,  4,  6,  7, -1,  2,  5])",
                "sorter": "array([ 1, 18, 52, 69, 86, 35, 46,  0, 25, 19, 61, 28,  2, 51, 83, 10,  3,\n       55,  4, 15, 41,  5, 49, 79, 87, 42,  6, 63, 72, 91,  7, 98, 62, 29,\n        8, 85, 71,  9, 65, 81, 82, 95, 64, 14, 75, 77, 58, 92, 11, 12, 21,\n       90, 13, 48, 44, 93, 16, 59, 97, 17, 39, 20, 67, 66, 22, 56, 94, 78,\n       89, 23, 54, 73, 70, 43, 88, 45, 33, 99, 24, 26, 80, 32, 27, 30, 68,\n       50, 31, 47, 36, 96, 34, 76, 37, 38, 60, 53, 40, 84, 74, 57])",
                "idx": "array([ 6, 11, 14, 18, 21, 26, 30, 34, 37, 42, 51, 53, 58, 61, 63, 69, 75,\n       79, 82, 83, 85, 87, 91, 93, 94, 97])",
                "inc": "array([1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,\n       0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 4, 1, 3, 3, 5, 4, 3, 1, 3, 7, 2, 4, 3, 2, 3, 5, 3, 2, 0, 2, 2,\n       2, 2, 1, 3, 2])",
                "res": "array([4, 1, 3, 3, 5, 4, 3, 1, 3, 7, 2, 4, 3, 2, 3, 5, 3, 2, 0, 2, 2, 2,\n       2, 1, 3, 2])",
                "ri": "Index(['k', 'd', 'r', 'q', 'g', 'l', 'w', 'f', 'e', 'y', 'c', 'n', 'x', 'v',\n       'z', 'm', 'h', 'b', 'o', 'p', 'u', 'a', 'j', 'i', 't', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    4\nd    1\nr    3\nq    3\ng    5\nl    4\nw    3\nf    1\ne    3\ny    7\nc    2\nn    4\nx    3\nv    2\nz    3\nm    5\nh    3\nb    2\no    0\np    2\nu    2\na    2\nj    2\ni    1\nt    3\ns    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4f70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4850>",
                "self.obj": "0     8.0\n1     0.0\n2     6.0\n3     3.0\n4     8.0\n     ... \n95    5.0\n96    8.0\n97    3.0\n98    6.0\n99    7.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  3,  3,  4,  5,\n        5,  6,  7,  7,  8,  9,  9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 36, 36, 36, 37, 38, 39, 40, 41, 41, 42, 43, 44, 44, 45,\n       46, 47, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n       62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76])",
                "_": "array([8., 0., 6., 3., 7., 5., 1., 4., 9., 2.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  2,  3,  4,  4,  4,  6,  7,  0,  2,  0,  4,  5,  7,  3, -1,\n        4, -1, -1, -1,  2, -1,  5,  0,  6,  1,  2,  2,  5,  3,  4,  3,  7,\n        1,  0,  7, -1, -1, -1,  5,  2,  7,  0,  2,  1,  6,  0,  2,  8,  7,\n        7,  8,  1,  1,  2,  5,  1, -1, -1, -1,  0,  4,  2,  2,  4,  6,  7,\n        1,  5,  1,  2,  9,  4, -1,  7,  5,  7,  7,  2,  0,  3,  6,  1,  2,\n       -1, -1, -1,  7,  6,  0,  9,  4,  1,  1,  5,  0,  3,  2,  4])",
                "sorter": "array([ 1, 77, 18,  3, 52, 69, 86, 35, 40,  0,  2,  4,  5, 49, 87,  6,  7,\n       62,  8,  9, 65, 10, 64, 11, 14, 12, 13, 15, 16, 17, 25, 19, 20, 21,\n       22, 23, 24, 26, 27, 28, 29, 30, 31, 80, 32, 33, 34, 36, 37, 38, 39,\n       41, 42, 54, 73, 70, 43, 44, 45, 46, 47, 48, 59, 50, 51, 60, 53, 55,\n       56, 57, 75, 58, 61, 63, 66, 67, 68, 71, 72, 74, 76, 78, 79, 81, 82,\n       83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 12, 15, 16, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 72, 73,\n       74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\n       91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 1, 1, 1, 3, 1, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0, 0, 0, 2, 1,\n       1, 2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 3, 1, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0,\n       0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0, 0, 0, 2, 1, 1,\n       2, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (77,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-24    1\nd    2015-08-27    1\nq    2015-09-01    1\ng    2015-08-31    3\nl    2015-08-28    1\n                  ..\ne    2015-08-29    1\na    2015-08-27    1\nx    2015-08-26    1\nw    2015-08-23    1\nh    2015-08-27    1\nName: julie, Length: 77, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4e80>",
                "self.obj": "0      8\n1      8\n2      7\n3      0\n4      1\n      ..\n995    9\n996    2\n997    4\n998    4\n999    5\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([8, 7, 0, 1, 5, 3, 6, 9, 2, 4])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  33,  75, 121, 171, 202, 244, 283, 328, 370, 413, 457, 494,\n       529, 568, 603, 644, 678, 717, 748, 780, 832, 863, 905, 937, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10, 10, 10,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10,  9, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10,  9, 10, 10, 10, 10])",
                "ri": "Index(['t', 'r', 'z', 'a', 'w', 'b', 'c', 'q', 'y', 'm', 'i', 'j', 'p', 'o',\n       'k', 'g', 'f', 'd', 'l', 'h', 'v', 'u', 's', 'e', 'n', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nt    10\nr    10\nz    10\na    10\nw     9\nb     9\nc    10\nq    10\ny    10\nm    10\ni    10\nj    10\np    10\no    10\nk    10\ng    10\nf    10\nd    10\nl    10\nh    10\nv    10\nu     9\ns    10\ne    10\nn    10\nx    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4df0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a45b0>",
                "self.obj": "0      8\n1      8\n2      7\n3      0\n4      1\n      ..\n995    9\n996    2\n997    4\n998    4\n999    5\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([8, 7, 0, 1, 5, 3, 6, 9, 2, 4])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (254,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (254,)",
                "ri": "array of shape (254,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nt    2015-08-24    3\nr    2015-08-24    3\nz    2015-08-23    3\na    2015-08-27    6\nw    2015-08-30    5\n                  ..\ne    2015-08-25    2\ng    2015-08-24    2\nb    2015-08-30    1\nx    2015-08-27    1\nk    2015-08-23    1\nName: julie, Length: 254, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4d00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a4df0>",
                "self.obj": "0      8.0\n1      8.0\n2      7.0\n3      0.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([8., 7., 0., 1., 5., 3., 6., 9., 2., 4.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  92, 136, 182, 212, 252, 291, 334, 372, 411, 450, 491, 525,\n       559, 593, 634, 668, 702, 736, 765, 815, 843, 884, 914, 944, 973])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10,  9,  9, 10,  9,  9, 10, 10, 10,  8, 10, 10, 10, 10,  9, 10, 10,\n       10, 10,  9, 10,  9, 10, 10, 10, 10,  9])",
                "res": "array([ 9,  9, 10,  9,  9, 10, 10, 10,  8, 10, 10, 10, 10,  9, 10, 10, 10,\n       10,  9, 10,  9, 10, 10, 10, 10,  9])",
                "ri": "Index(['t', 'z', 'a', 'w', 'b', 'c', 'q', 'y', 'm', 'r', 'i', 'j', 'o', 'k',\n       'g', 'f', 'd', 'p', 'h', 'v', 'u', 's', 'l', 'e', 'n', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nt     9\nz     9\na    10\nw     9\nb     9\nc    10\nq    10\ny    10\nm     8\nr    10\ni    10\nj    10\no    10\nk     9\ng    10\nf    10\nd    10\np    10\nh     9\nv    10\nu     9\ns    10\nl    10\ne    10\nn    10\nx     9\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de7f0>",
                "self.obj": "0      8.0\n1      8.0\n2      7.0\n3      0.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([8., 7., 0., 1., 5., 3., 6., 9., 2., 4.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nt    2015-08-24    3\nz    2015-08-23    3\nw    2015-08-30    5\nb    2015-08-26    3\nc    2015-08-28    3\n                  ..\ne    2015-08-25    1\ng    2015-08-24    0\nb    2015-08-30    1\nx    2015-08-27    1\nk    2015-08-23    1\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de3d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de6d0>",
                "self.obj": "0      8.0\n1      8.0\n2      7.0\n3      0.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([8., 7., 0., 1., 5., 3., 6., 9., 2., 4.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  92, 136, 182, 212, 252, 291, 334, 372, 411, 450, 491, 525,\n       559, 593, 634, 668, 702, 736, 765, 815, 843, 884, 914, 944, 973])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10,  9,  9, 10,  9,  9, 10, 10, 10,  8, 10, 10, 10, 10,  9, 10, 10,\n       10, 10,  9, 10,  9, 10, 10, 10, 10,  9])",
                "res": "array([ 9,  9, 10,  9,  9, 10, 10, 10,  8, 10, 10, 10, 10,  9, 10, 10, 10,\n       10,  9, 10,  9, 10, 10, 10, 10,  9])",
                "ri": "Index(['t', 'z', 'a', 'w', 'b', 'c', 'q', 'y', 'm', 'r', 'i', 'j', 'o', 'k',\n       'g', 'f', 'd', 'p', 'h', 'v', 'u', 's', 'l', 'e', 'n', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nt     9\nz     9\na    10\nw     9\nb     9\nc    10\nq    10\ny    10\nm     8\nr    10\ni    10\nj    10\no    10\nk     9\ng    10\nf    10\nd    10\np    10\nh     9\nv    10\nu     9\ns    10\nl    10\ne    10\nn    10\nx     9\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de6d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de6a0>",
                "self.obj": "0      8.0\n1      8.0\n2      7.0\n3      0.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([8., 7., 0., 1., 5., 3., 6., 9., 2., 4.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nt    2015-08-24    3\nz    2015-08-23    3\nw    2015-08-30    5\nb    2015-08-26    3\nc    2015-08-28    3\n                  ..\ne    2015-08-25    1\ng    2015-08-24    0\nb    2015-08-30    1\nx    2015-08-27    1\nk    2015-08-23    1\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de9a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2dec10>",
                "self.obj": "0       8\n1       3\n2       5\n3       3\n4       8\n       ..\n9995    1\n9996    1\n9997    1\n9998    4\n9999    6\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([8, 3, 5, 9, 7, 2, 0, 6, 4, 1])",
                "val": "array([8, 3, 5, ..., 1, 4, 6])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   0,    8,  182, ..., 7675, 7896, 9484])",
                "idx": "array([   0,  417,  781, 1184, 1563, 1943, 2316, 2671, 3073, 3455, 3823,\n       4252, 4654, 5015, 5366, 5778, 6147, 6518, 6910, 7318, 7690, 8060,\n       8416, 8810, 9200, 9594])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['q', 'e', 't', 's', 'a', 'r', 'x', 'p', 'i', 'h', 'b', 'o', 'c', 'z',\n       'm', 'u', 'f', 'l', 'k', 'n', 'j', 'w', 'y', 'g', 'v', 'd'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    10\ne    10\nt    10\ns    10\na    10\nr    10\nx    10\np    10\ni    10\nh    10\nb    10\no    10\nc    10\nz    10\nm    10\nu    10\nf    10\nl    10\nk    10\nn    10\nj    10\nw    10\ny    10\ng    10\nv    10\nd    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de8b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2deac0>",
                "self.obj": "0       8\n1       3\n2       5\n3       3\n4       8\n       ..\n9995    1\n9996    1\n9997    1\n9998    4\n9999    6\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([8, 3, 5, 9, 7, 2, 0, 6, 4, 1])",
                "val": "array([8, 3, 5, ..., 1, 4, 6])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   0,  387, 2886, ..., 3108, 3907, 9628])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-26    10\ne    2015-09-01    10\nt    2015-08-27     9\ns    2015-09-01     9\na    2015-08-25    10\n                   ..\nz    2015-08-23     9\nc    2015-08-31     9\nm    2015-08-30    10\nf    2015-08-26     9\nh    2015-08-29    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de8b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de3a0>",
                "self.obj": "0       8.0\n1       3.0\n2       5.0\n3       3.0\n4       8.0\n       ... \n9995    1.0\n9996    1.0\n9997    1.0\n9998    4.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([8., 3., 5., 9., 2., 0., 6., 4., 1., 7.])",
                "val": "array([8., 3., 5., ..., 1., 4., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9384, 9656, 9819])",
                "idx": "array([ 589,  977, 1312, 1692, 2056, 2421, 2773, 3108, 3485, 3845, 4186,\n       4585, 4970, 5310, 5636, 6026, 6371, 6719, 7085, 7470, 7820, 8178,\n       8509, 8885, 9258, 9623])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['q', 'e', 't', 's', 'a', 'r', 'x', 'p', 'i', 'h', 'b', 'o', 'c', 'z',\n       'm', 'u', 'f', 'l', 'k', 'n', 'j', 'w', 'y', 'g', 'v', 'd'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    10\ne    10\nt    10\ns    10\na    10\nr    10\nx    10\np    10\ni    10\nh    10\nb    10\no    10\nc    10\nz    10\nm    10\nu    10\nf    10\nl    10\nk    10\nn    10\nj    10\nw    10\ny    10\ng    10\nv    10\nd    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de0d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2deca0>",
                "self.obj": "0       8.0\n1       3.0\n2       5.0\n3       3.0\n4       8.0\n       ... \n9995    1.0\n9996    1.0\n9997    1.0\n9998    4.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([8., 3., 5., 9., 2., 0., 6., 4., 1., 7.])",
                "val": "array([8., 3., 5., ..., 1., 4., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 3491, 8477, 9937])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-26    10\ne    2015-09-01     9\ns    2015-09-01     9\na    2015-08-25    10\nr    2015-08-25    10\n                   ..\nu    2015-08-29     8\nf    2015-08-26     8\na    2015-08-27    10\nt    2015-08-27     9\nh    2015-08-29    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2defd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de640>",
                "self.obj": "0       8.0\n1       3.0\n2       5.0\n3       3.0\n4       8.0\n       ... \n9995    1.0\n9996    1.0\n9997    1.0\n9998    4.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([8., 3., 5., 9., 2., 0., 6., 4., 1., 7.])",
                "val": "array([8., 3., 5., ..., 1., 4., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9384, 9656, 9819])",
                "idx": "array([ 589,  977, 1312, 1692, 2056, 2421, 2773, 3108, 3485, 3845, 4186,\n       4585, 4970, 5310, 5636, 6026, 6371, 6719, 7085, 7470, 7820, 8178,\n       8509, 8885, 9258, 9623])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['q', 'e', 't', 's', 'a', 'r', 'x', 'p', 'i', 'h', 'b', 'o', 'c', 'z',\n       'm', 'u', 'f', 'l', 'k', 'n', 'j', 'w', 'y', 'g', 'v', 'd'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    10\ne    10\nt    10\ns    10\na    10\nr    10\nx    10\np    10\ni    10\nh    10\nb    10\no    10\nc    10\nz    10\nm    10\nu    10\nf    10\nl    10\nk    10\nn    10\nj    10\nw    10\ny    10\ng    10\nv    10\nd    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de460>",
                "self.obj": "0       8.0\n1       3.0\n2       5.0\n3       3.0\n4       8.0\n       ... \n9995    1.0\n9996    1.0\n9997    1.0\n9998    4.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([8., 3., 5., 9., 2., 0., 6., 4., 1., 7.])",
                "val": "array([8., 3., 5., ..., 1., 4., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 3491, 8477, 9937])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-26    10\ne    2015-09-01     9\ns    2015-09-01     9\na    2015-08-25    10\nr    2015-08-25    10\n                   ..\nu    2015-08-29     8\nf    2015-08-26     8\na    2015-08-27    10\nt    2015-08-27     9\nh    2015-08-29    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2defd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ded60>",
                "self.obj": "0        2\n1        5\n2        1\n3        6\n4        9\n        ..\n99995    7\n99996    2\n99997    0\n99998    4\n99999    6\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([2, 5, 1, 6, 9, 4, 0, 8, 7, 3])",
                "val": "array([2, 5, 1, ..., 0, 4, 6])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,   355,   669, ..., 98636, 99360, 99841])",
                "idx": "array([    0,  3830,  7644, 11534, 15410, 19245, 23005, 26836, 30661,\n       34620, 38382, 42290, 46095, 49970, 53853, 57593, 61423, 65220,\n       68996, 72975, 76970, 80816, 84657, 88493, 92334, 96127])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['h', 'r', 'e', 'p', 'w', 'u', 't', 'd', 'g', 'a', 'm', 'o', 'j', 'y',\n       'i', 'f', 'b', 'x', 'v', 'l', 's', 'n', 'k', 'z', 'c', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    10\nr    10\ne    10\np    10\nw    10\nu    10\nt    10\nd    10\ng    10\na    10\nm    10\no    10\nj    10\ny    10\ni    10\nf    10\nb    10\nx    10\nv    10\nl    10\ns    10\nn    10\nk    10\nz    10\nc    10\nq    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2deac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de8b0>",
                "self.obj": "0        2\n1        5\n2        1\n3        6\n4        9\n        ..\n99995    7\n99996    2\n99997    0\n99998    4\n99999    6\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([2, 5, 1, 6, 9, 4, 0, 8, 7, 3])",
                "val": "array([2, 5, 1, ..., 0, 4, 6])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,  5619,  8888, ..., 94111, 96867, 98416])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-28    10\nr    2015-08-28    10\ne    2015-08-29    10\np    2015-09-01    10\nw    2015-08-29    10\n                   ..\nu    2015-09-01    10\nw    2015-08-23    10\ns    2015-08-29    10\nf    2015-08-31    10\nd    2015-08-31    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2deac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de670>",
                "self.obj": "0        2.0\n1        5.0\n2        1.0\n3        6.0\n4        9.0\n        ... \n99995    7.0\n99996    2.0\n99997    0.0\n99998    4.0\n99999    6.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([2., 5., 1., 6., 9., 0., 4., 8., 7., 3.])",
                "val": "array([2., 5., 1., ..., 0., 4., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 98045, 98185, 99841])",
                "idx": "array([ 5883,  9492, 13154, 16802, 20405, 23948, 27554, 31142, 34842,\n       38384, 42023, 45582, 49254, 52905, 56427, 60031, 63626, 67196,\n       70918, 74670, 78287, 81928, 85520, 89122, 92732, 96324])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['h', 'e', 'p', 'w', 'u', 't', 'd', 'g', 'a', 'm', 'o', 'j', 'y', 'i',\n       'f', 'b', 'x', 'v', 'l', 's', 'n', 'r', 'k', 'z', 'c', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    10\ne    10\np    10\nw    10\nu    10\nt    10\nd    10\ng    10\na    10\nm    10\no    10\nj    10\ny    10\ni    10\nf    10\nb    10\nx    10\nv    10\nl    10\ns    10\nn    10\nr    10\nk    10\nz    10\nc    10\nq    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de0d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de070>",
                "self.obj": "0        2.0\n1        5.0\n2        1.0\n3        6.0\n4        9.0\n        ... \n99995    7.0\n99996    2.0\n99997    0.0\n99998    4.0\n99999    6.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([2., 5., 1., 6., 9., 0., 4., 8., 7., 3.])",
                "val": "array([2., 5., 1., ..., 0., 4., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 90156, 94111, 98416])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-28    10\ne    2015-08-29    10\nw    2015-08-29    10\nu    2015-08-26    10\nt    2015-08-31    10\n                   ..\nw    2015-08-23    10\ns    2015-08-29    10\nf    2015-08-31    10\nl    2015-08-25    10\nd    2015-08-31    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da340>",
                "self.obj": "0        2.0\n1        5.0\n2        1.0\n3        6.0\n4        9.0\n        ... \n99995    7.0\n99996    2.0\n99997    0.0\n99998    4.0\n99999    6.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([2., 5., 1., 6., 9., 0., 4., 8., 7., 3.])",
                "val": "array([2., 5., 1., ..., 0., 4., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 98045, 98185, 99841])",
                "idx": "array([ 5883,  9492, 13154, 16802, 20405, 23948, 27554, 31142, 34842,\n       38384, 42023, 45582, 49254, 52905, 56427, 60031, 63626, 67196,\n       70918, 74670, 78287, 81928, 85520, 89122, 92732, 96324])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['h', 'e', 'p', 'w', 'u', 't', 'd', 'g', 'a', 'm', 'o', 'j', 'y', 'i',\n       'f', 'b', 'x', 'v', 'l', 's', 'n', 'r', 'k', 'z', 'c', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    10\ne    10\np    10\nw    10\nu    10\nt    10\nd    10\ng    10\na    10\nm    10\no    10\nj    10\ny    10\ni    10\nf    10\nb    10\nx    10\nv    10\nl    10\ns    10\nn    10\nr    10\nk    10\nz    10\nc    10\nq    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de3a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de250>",
                "self.obj": "0        2.0\n1        5.0\n2        1.0\n3        6.0\n4        9.0\n        ... \n99995    7.0\n99996    2.0\n99997    0.0\n99998    4.0\n99999    6.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([2., 5., 1., 6., 9., 0., 4., 8., 7., 3.])",
                "val": "array([2., 5., 1., ..., 0., 4., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 90156, 94111, 98416])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-28    10\ne    2015-08-29    10\nw    2015-08-29    10\nu    2015-08-26    10\nt    2015-08-31    10\n                   ..\nw    2015-08-23    10\ns    2015-08-29    10\nf    2015-08-31    10\nl    2015-08-25    10\nd    2015-08-31    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2deac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2dae80>",
                "self.obj": "0      4\n1     62\n2     58\n3     95\n4     58\n      ..\n95    28\n96    44\n97    55\n98    51\n99     5\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,\n        3,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  7,  7,  8,  8,  8,  8,\n        8,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 11, 11, 11, 11, 11,\n       11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15,\n       15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19,\n       20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 24, 25])",
                "_": "array([ 4, 62, 58, 95, 71, 45, 42, 74, 94, 52, 22, 43, 67, 13, 23, 53, 41,\n       35, 10, 47, 69, 79, 29, 86,  6, 55, 46, 28, 64, 66, 48, 85, 91, 16,\n       93, 39, 87, 17, 97, 99, 65, 30, 40, 80, 98, 88, 54, 33,  3, 19, 32,\n       90, 81, 38, 73, 83, 21, 60,  8, 84, 34, 59, 56, 44, 51,  5])",
                "val": "array([ 4, 62, 58, 95, 58, 71, 45, 42, 74,  4, 94, 52, 22, 43, 67, 13, 23,\n       53, 41, 35, 10, 47, 69, 79, 13, 29, 86,  6, 55, 13, 46, 28, 86, 64,\n       66, 48, 85, 62, 91, 16, 93, 39, 67, 87, 17, 29, 97, 99, 65, 30, 40,\n       80, 13, 58, 98, 88, 28, 54, 33, 85, 64, 17,  3, 67, 94, 19, 32, 17,\n       23, 90, 81, 38, 35, 73, 83, 55, 21, 13, 46, 60,  8, 84, 48, 34, 79,\n       79, 93, 59, 23, 47, 43, 56, 80, 42, 38, 28, 44, 55, 51,  5])",
                "codes": "array([ 0,  1,  2,  2, 34, 36, 43,  1, 15, 19, 31,  3,  6, 51,  4,  8, 13,\n       17, 52, 64,  5, 30,  6, 13, 37, 54,  7, 65,  0, 23,  8, 11, 32, 60,\n       61, 62, 63,  9, 10, 22, 29, 40, 46, 12, 30, 37, 12, 14, 26, 39, 41,\n       45, 59,  2, 16, 28, 49, 53, 53, 13, 18, 21, 37, 42, 19, 22, 38, 11,\n       14, 20, 25, 13, 21, 27, 55, 23, 27, 43, 24, 47, 12, 25, 27, 44, 50,\n       25, 31, 34, 48, 56, 21, 33, 57, 17, 26, 35, 13, 28, 14, 58])",
                "sorter": "array([ 0, 37,  2,  4, 86, 43, 92,  1, 17, 89, 59,  3, 93, 69,  5, 64, 24,\n       19, 70, 98,  6, 35,  7, 15, 61, 73,  8, 99,  9, 32, 10, 13, 38, 83,\n       87, 91, 96, 11, 12, 45, 34, 48, 57, 14, 82, 44, 42, 16, 30, 47, 49,\n       55, 81, 53, 18, 33, 65, 71, 94, 52, 20, 84, 67, 50, 21, 25, 46, 90,\n       88, 22, 75, 29, 23, 31, 74, 26, 95, 51, 27, 58, 63, 28, 56, 54, 66,\n       97, 36, 40, 62, 76, 85, 39, 79, 72, 78, 41, 77, 60, 68, 80])",
                "idx": "array([ 0,  7, 11, 14, 20, 22, 26, 28, 30, 37, 43, 46, 53, 59, 64, 67, 71,\n       75, 78, 80, 85, 90, 93, 96, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 4, 3, 6, 2, 4, 2, 2, 7, 6, 3, 7, 5, 5, 3, 4, 4, 3, 2, 5, 5, 3,\n       3, 2, 1, 1])",
                "res": "array([6, 4, 3, 6, 2, 4, 2, 2, 7, 6, 3, 7, 5, 5, 3, 4, 4, 3, 2, 5, 5, 3,\n       3, 2, 1, 1])",
                "ri": "Index(['u', 'p', 'm', 'd', 'j', 'c', 't', 'r', 'e', 'a', 'h', 'x', 'i', 'w',\n       'y', 'l', 'v', 'f', 'n', 'k', 'o', 'g', 'z', 's', 'q', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    6\np    4\nm    3\nd    6\nj    2\nc    4\nt    2\nr    2\ne    7\na    6\nh    3\nx    7\ni    5\nw    5\ny    3\nl    4\nv    4\nf    3\nn    2\nk    5\no    5\ng    3\nz    3\ns    2\nq    1\nb    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2dad60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de070>",
                "self.obj": "0      4\n1     62\n2     58\n3     95\n4     58\n      ..\n95    28\n96    44\n97    55\n98    51\n99     5\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  2,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 11, 12,\n       12, 12, 13, 14, 15, 15, 15, 15, 16, 17, 17, 18, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 26, 27, 27, 28, 29, 30, 31, 32, 33, 33, 34, 34, 35,\n       35, 36, 37, 37, 38, 39, 40, 40, 41, 42, 43, 44, 44, 44, 45, 46, 47,\n       48, 49, 50, 51, 51, 52, 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 61,\n       62, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75])",
                "_": "array([ 4, 62, 58, 95, 71, 45, 42, 74, 94, 52, 22, 43, 67, 13, 23, 53, 41,\n       35, 10, 47, 69, 79, 29, 86,  6, 55, 46, 28, 64, 66, 48, 85, 91, 16,\n       93, 39, 87, 17, 97, 99, 65, 30, 40, 80, 98, 88, 54, 33,  3, 19, 32,\n       90, 81, 38, 73, 83, 21, 60,  8, 84, 34, 59, 56, 44, 51,  5])",
                "val": "array([ 4, 62, 58, 95, 58, 71, 45, 42, 74,  4, 94, 52, 22, 43, 67, 13, 23,\n       53, 41, 35, 10, 47, 69, 79, 13, 29, 86,  6, 55, 13, 46, 28, 86, 64,\n       66, 48, 85, 62, 91, 16, 93, 39, 67, 87, 17, 29, 97, 99, 65, 30, 40,\n       80, 13, 58, 98, 88, 28, 54, 33, 85, 64, 17,  3, 67, 94, 19, 32, 17,\n       23, 90, 81, 38, 35, 73, 83, 55, 21, 13, 46, 60,  8, 84, 48, 34, 79,\n       79, 93, 59, 23, 47, 43, 56, 80, 42, 38, 28, 44, 55, 51,  5])",
                "codes": "array([ 0, 36,  1,  2,  2,  3,  4,  5,  6, 54,  7,  0,  8,  9, 10, 29, 11,\n       61, 63, 12, 13, 12, 14, 45, 59, 15, 16, 53, 13, 17, 18, 19, 20, 21,\n       22, 23, 24, 25, 44, 13, 55, 26, 27, 23, 28, 30, 31, 56,  1, 43, 32,\n       60, 33, 25, 34, 35, 37, 22, 40, 38, 39, 41, 13, 37, 42, 43,  2, 27,\n       46, 47, 31, 13, 28, 37, 48, 12, 50,  8, 49, 14, 51, 52, 53, 17, 26,\n       14, 25, 57, 58, 30, 21, 21, 34, 19, 11, 62,  6, 27, 64, 65])",
                "sorter": "array([ 0, 43,  1,  2,  4,  3,  5,  6,  7, 73,  8,  9, 10, 11, 12, 34, 13,\n       87, 96, 14, 15, 42, 16, 55, 81, 17, 18, 94, 24, 19, 20, 21, 22, 23,\n       25, 26, 27, 28, 54, 29, 74, 30, 31, 32, 33, 35, 36, 76, 37, 92, 38,\n       83, 39, 97, 40, 41, 44, 45, 48, 46, 47, 49, 52, 67, 50, 51, 53, 56,\n       57, 58, 59, 77, 60, 61, 62, 63, 66, 64, 65, 68, 69, 70, 71, 72, 78,\n       88, 75, 79, 80, 82, 84, 85, 86, 89, 90, 91, 93, 95, 98, 99])",
                "idx": "array([ 0,  2,  3,  5,  6,  7,  8, 10, 11, 12, 13, 14, 16, 19, 20, 21, 25,\n       26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46,\n       48, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70,\n       71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91,\n       92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 3, 1, 1, 4, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1,\n       3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (76,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-31    2\np    2015-08-30    1\nu    2015-08-28    1\nm    2015-08-28    1\nd    2015-08-27    1\n                  ..\ne    2015-08-23    1\nm    2015-08-26    1\nf    2015-09-01    1\nd    2015-08-30    1\nt    2015-08-26    1\nName: julie, Length: 76, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2de2b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2dabb0>",
                "self.obj": "0      4.0\n1     62.0\n2     58.0\n3     95.0\n4     58.0\n      ... \n95    28.0\n96    44.0\n97    55.0\n98    51.0\n99     5.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,\n        2,  2,  2,  3,  4,  4,  4,  4,  5,  5,  6,  6,  7,  7,  7,  7,  7,\n        7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 10,\n       10, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15,\n       15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19,\n       20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 24, 25])",
                "_": "array([ 4., 62., 58., 95., 71., 45., 94., 52., 22., 43., 67., 13., 23.,\n       53., 41., 35., 10., 47., 69., 79., 29., 46., 28., 86., 64., 66.,\n       48., 85., 91., 16., 93., 39., 87., 17., 65., 30., 40., 80., 98.,\n       88., 54., 33.,  3., 90., 81., 38., 73., 83., 55., 21., 60.,  8.,\n       84., 59., 56., 42., 44., 51.,  5.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 11, 14, 26, 30, 43,  0,  1,  2,  2, 32, 37,  3, 55, -1,  4, 11,\n       15, 44, 57,  5, -1, 11, 33, 46, -1, 58, -1, 23, -1,  6,  9, 28, 53,\n       54, 56, -1,  7,  8, 25, 34, 40, 10, 26, 33, -1, 10, 12, 21, 35, 39,\n       52, 13, 17, 27, -1, 16, 33, 36, -1, 17, 20,  9, 12, 18, 48, 11, 19,\n       22, 47, -1, 22, 37, -1, 41, -1, -1, 10, 22, 38, -1,  2, 24, 45, 45,\n       27, 30, 42, 48, 49, -1, 29, 50, 15, 21, 31, 11, 24, 12, 51])",
                "sorter": "array([ 1, 52, 18, 35, 86, 69,  0, 37,  2,  4, 43, 92,  3, 93, 64,  5, 24,\n       19, 70, 98,  6,  7, 15, 61, 73,  8, 99,  9, 32, 83, 10, 13, 38, 87,\n       91, 96, 45, 11, 12, 34, 48, 57, 14, 82, 44, 47, 42, 16, 30, 49, 55,\n       81, 17, 89, 59, 84, 20, 67, 50, 46, 21, 25, 90, 88, 22, 75, 29, 23,\n       31, 74, 26, 95, 51, 27, 58, 28, 66, 63, 56, 54, 65, 53, 33, 71, 94,\n       36, 40, 62, 97, 76, 85, 39, 79, 72, 78, 41, 77, 60, 68, 80])",
                "idx": "array([ 6, 12, 14, 20, 21, 25, 27, 29, 36, 42, 45, 52, 55, 59, 62, 66, 70,\n       73, 75, 80, 85, 90, 93, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 5, 2, 5, 1, 3, 1, 1, 6, 5, 3, 6, 3, 3, 2, 4, 4, 2, 1, 3, 3, 5,\n       2, 3, 2, 1, 1])",
                "res": "array([5, 2, 5, 1, 3, 1, 1, 6, 5, 3, 6, 3, 3, 2, 4, 4, 2, 1, 3, 3, 5, 2,\n       3, 2, 1, 1])",
                "ri": "Index(['u', 'm', 'd', 'j', 'c', 't', 'r', 'e', 'a', 'h', 'x', 'p', 'w', 'y',\n       'l', 'v', 'f', 'n', 'k', 'i', 'o', 'g', 'z', 's', 'q', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    5\nm    2\nd    5\nj    1\nc    3\nt    1\nr    1\ne    6\na    5\nh    3\nx    6\np    3\nw    3\ny    2\nl    4\nv    4\nf    2\nn    1\nk    3\ni    3\no    5\ng    2\nz    3\ns    2\nq    1\nb    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2dad00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2de070>",
                "self.obj": "0      4.0\n1     62.0\n2     58.0\n3     95.0\n4     58.0\n      ... \n95    28.0\n96    44.0\n97    55.0\n98    51.0\n99     5.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  2,  3,  4,  4,\n        5,  6,  7,  8,  9,  9, 10, 10, 10, 11, 12, 13, 13, 13, 13, 14, 15,\n       15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 24, 25, 26, 27, 28, 29,\n       29, 30, 30, 31, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 39, 40, 41,\n       42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 55, 56,\n       56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70])",
                "_": "array([ 4., 62., 58., 95., 71., 45., 94., 52., 22., 43., 67., 13., 23.,\n       53., 41., 35., 10., 47., 69., 79., 29., 46., 28., 86., 64., 66.,\n       48., 85., 91., 16., 93., 39., 87., 17., 65., 30., 40., 80., 98.,\n       88., 54., 33.,  3., 90., 81., 38., 73., 83., 55., 21., 60.,  8.,\n       84., 59., 56., 42., 44., 51.,  5.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 11, 11, 14, 26, 30, 30, 43,  0, 32,  2,  2,  4,  5, -1, 46,\n       -1, -1,  6,  7,  8, 25,  9, 53, 56, 10, 11, 10, 12, 39, 52, 13, 11,\n       15, 16, 17, 18, 19, 20, -1, -1, -1, 38, 11, 47, 21, 22, 23, 24, 27,\n       49,  1, 37, -1, 28, 29, 31, 33, -1, 34, -1, -1, 35, 33, 36, 37,  2,\n       22, 40, 41, 27, 24, 33, 42, -1, 10, -1, -1, 12, 44, 45, 15, 21, 12,\n       48, 50, 51, 26, -1, -1, 17,  9, 54, 55, 45, 22, 48, 57, 58])",
                "sorter": "array([ 1,  3, 52, 77, 18, 35, 40, 86, 69,  0, 43,  2,  4,  5,  6,  7, 73,\n        8,  9, 10, 11, 12, 34, 13, 87, 96, 14, 15, 42, 16, 55, 81, 17, 24,\n       19, 20, 21, 22, 23, 25, 26, 27, 28, 54, 29, 74, 30, 31, 32, 33, 36,\n       76, 37, 92, 83, 38, 39, 41, 44, 45, 48, 46, 47, 49, 67, 50, 51, 53,\n       56, 57, 58, 59, 60, 61, 62, 66, 63, 64, 65, 68, 70, 71, 72, 78, 88,\n       75, 79, 80, 82, 84, 85, 89, 90, 91, 93, 94, 95, 97, 98, 99])",
                "idx": "array([ 9, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 26, 27, 28, 32, 33, 35,\n       36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 52, 54, 56, 57,\n       58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77,\n       78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n       97, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([7, 2, 1, 1, 1, 1, 0, 0, 1, 1, 2, 3, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1,\n       0, 0, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 1, 0, 0, 1, 1, 2, 3, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 0,\n       0, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1])",
                "ri": "array of shape (71,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-31    2\n     2015-08-28    1\nd    2015-08-27    1\nj    2015-08-27    1\nc    2015-08-28    1\n                  ..\ni    2015-08-23    1\nf    2015-09-01    1\no    2015-08-24    1\nd    2015-08-30    1\nt    2015-08-26    1\nName: julie, Length: 71, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da2e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2daee0>",
                "self.obj": "0      4.0\n1     62.0\n2     58.0\n3     95.0\n4     58.0\n      ... \n95    28.0\n96    44.0\n97    55.0\n98    51.0\n99     5.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,\n        2,  2,  2,  3,  4,  4,  4,  4,  5,  5,  6,  6,  7,  7,  7,  7,  7,\n        7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 10,\n       10, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15,\n       15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19,\n       20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 24, 25])",
                "_": "array([ 4., 62., 58., 95., 71., 45., 94., 52., 22., 43., 67., 13., 23.,\n       53., 41., 35., 10., 47., 69., 79., 29., 46., 28., 86., 64., 66.,\n       48., 85., 91., 16., 93., 39., 87., 17., 65., 30., 40., 80., 98.,\n       88., 54., 33.,  3., 90., 81., 38., 73., 83., 55., 21., 60.,  8.,\n       84., 59., 56., 42., 44., 51.,  5.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 11, 14, 26, 30, 43,  0,  1,  2,  2, 32, 37,  3, 55, -1,  4, 11,\n       15, 44, 57,  5, -1, 11, 33, 46, -1, 58, -1, 23, -1,  6,  9, 28, 53,\n       54, 56, -1,  7,  8, 25, 34, 40, 10, 26, 33, -1, 10, 12, 21, 35, 39,\n       52, 13, 17, 27, -1, 16, 33, 36, -1, 17, 20,  9, 12, 18, 48, 11, 19,\n       22, 47, -1, 22, 37, -1, 41, -1, -1, 10, 22, 38, -1,  2, 24, 45, 45,\n       27, 30, 42, 48, 49, -1, 29, 50, 15, 21, 31, 11, 24, 12, 51])",
                "sorter": "array([ 1, 52, 18, 35, 86, 69,  0, 37,  2,  4, 43, 92,  3, 93, 64,  5, 24,\n       19, 70, 98,  6,  7, 15, 61, 73,  8, 99,  9, 32, 83, 10, 13, 38, 87,\n       91, 96, 45, 11, 12, 34, 48, 57, 14, 82, 44, 47, 42, 16, 30, 49, 55,\n       81, 17, 89, 59, 84, 20, 67, 50, 46, 21, 25, 90, 88, 22, 75, 29, 23,\n       31, 74, 26, 95, 51, 27, 58, 28, 66, 63, 56, 54, 65, 53, 33, 71, 94,\n       36, 40, 62, 97, 76, 85, 39, 79, 72, 78, 41, 77, 60, 68, 80])",
                "idx": "array([ 6, 12, 14, 20, 21, 25, 27, 29, 36, 42, 45, 52, 55, 59, 62, 66, 70,\n       73, 75, 80, 85, 90, 93, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 5, 2, 5, 1, 3, 1, 1, 6, 5, 3, 6, 3, 3, 2, 4, 4, 2, 1, 3, 3, 5,\n       2, 3, 2, 1, 1])",
                "res": "array([5, 2, 5, 1, 3, 1, 1, 6, 5, 3, 6, 3, 3, 2, 4, 4, 2, 1, 3, 3, 5, 2,\n       3, 2, 1, 1])",
                "ri": "Index(['u', 'm', 'd', 'j', 'c', 't', 'r', 'e', 'a', 'h', 'x', 'p', 'w', 'y',\n       'l', 'v', 'f', 'n', 'k', 'i', 'o', 'g', 'z', 's', 'q', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    5\nm    2\nd    5\nj    1\nc    3\nt    1\nr    1\ne    6\na    5\nh    3\nx    6\np    3\nw    3\ny    2\nl    4\nv    4\nf    2\nn    1\nk    3\ni    3\no    5\ng    2\nz    3\ns    2\nq    1\nb    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2daee0>",
                "self.obj": "0      4.0\n1     62.0\n2     58.0\n3     95.0\n4     58.0\n      ... \n95    28.0\n96    44.0\n97    55.0\n98    51.0\n99     5.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  2,  3,  4,  4,\n        5,  6,  7,  8,  9,  9, 10, 10, 10, 11, 12, 13, 13, 13, 13, 14, 15,\n       15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 24, 25, 26, 27, 28, 29,\n       29, 30, 30, 31, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 39, 40, 41,\n       42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 55, 56,\n       56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70])",
                "_": "array([ 4., 62., 58., 95., 71., 45., 94., 52., 22., 43., 67., 13., 23.,\n       53., 41., 35., 10., 47., 69., 79., 29., 46., 28., 86., 64., 66.,\n       48., 85., 91., 16., 93., 39., 87., 17., 65., 30., 40., 80., 98.,\n       88., 54., 33.,  3., 90., 81., 38., 73., 83., 55., 21., 60.,  8.,\n       84., 59., 56., 42., 44., 51.,  5.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 11, 11, 14, 26, 30, 30, 43,  0, 32,  2,  2,  4,  5, -1, 46,\n       -1, -1,  6,  7,  8, 25,  9, 53, 56, 10, 11, 10, 12, 39, 52, 13, 11,\n       15, 16, 17, 18, 19, 20, -1, -1, -1, 38, 11, 47, 21, 22, 23, 24, 27,\n       49,  1, 37, -1, 28, 29, 31, 33, -1, 34, -1, -1, 35, 33, 36, 37,  2,\n       22, 40, 41, 27, 24, 33, 42, -1, 10, -1, -1, 12, 44, 45, 15, 21, 12,\n       48, 50, 51, 26, -1, -1, 17,  9, 54, 55, 45, 22, 48, 57, 58])",
                "sorter": "array([ 1,  3, 52, 77, 18, 35, 40, 86, 69,  0, 43,  2,  4,  5,  6,  7, 73,\n        8,  9, 10, 11, 12, 34, 13, 87, 96, 14, 15, 42, 16, 55, 81, 17, 24,\n       19, 20, 21, 22, 23, 25, 26, 27, 28, 54, 29, 74, 30, 31, 32, 33, 36,\n       76, 37, 92, 83, 38, 39, 41, 44, 45, 48, 46, 47, 49, 67, 50, 51, 53,\n       56, 57, 58, 59, 60, 61, 62, 66, 63, 64, 65, 68, 70, 71, 72, 78, 88,\n       75, 79, 80, 82, 84, 85, 89, 90, 91, 93, 94, 95, 97, 98, 99])",
                "idx": "array([ 9, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 26, 27, 28, 32, 33, 35,\n       36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 52, 54, 56, 57,\n       58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77,\n       78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n       97, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([7, 2, 1, 1, 1, 1, 0, 0, 1, 1, 2, 3, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1,\n       0, 0, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 1, 0, 0, 1, 1, 2, 3, 1, 1, 4, 1, 2, 1, 1, 1, 1, 1, 0,\n       0, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1])",
                "ri": "array of shape (71,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-31    2\n     2015-08-28    1\nd    2015-08-27    1\nj    2015-08-27    1\nc    2015-08-28    1\n                  ..\ni    2015-08-23    1\nf    2015-09-01    1\no    2015-08-24    1\nd    2015-08-30    1\nt    2015-08-26    1\nName: julie, Length: 71, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2dad90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2daa90>",
                "self.obj": "0      29\n1      37\n2      74\n3      14\n4      39\n       ..\n995    42\n996    56\n997    29\n998    54\n999    53\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([29, 37, 74, 14, 39, 47, 92, 96, 95, 20, 33, 10, 12, 62, 93, 72, 65,\n        7, 76,  6,  2, 35, 97,  8, 49,  5, 83, 84, 68,  3, 22, 19, 15, 67,\n       32, 38, 59, 17, 25, 56, 42, 80, 66, 53, 81, 73, 26, 90, 13, 69, 30,\n       55, 23, 36, 58, 86, 51,  4, 71, 54, 77, 88, 44, 82, 28, 87, 41,  0,\n       24, 50, 18, 52, 78, 64, 70, 48, 98, 43, 27, 79,  1, 85, 89, 31, 57,\n       61, 94,  9, 11, 60, 75, 63, 21, 91, 99, 34, 45, 46, 40, 16])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  52, 102, 141, 174, 217, 245, 285, 322, 364, 398, 437, 476,\n       505, 541, 572, 609, 661, 703, 746, 778, 814, 857, 890, 934, 972])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([37, 41, 33, 25, 34, 27, 34, 33, 36, 29, 30, 36, 24, 32, 27, 32, 40,\n       35, 39, 30, 32, 37, 28, 35, 33, 23])",
                "res": "array([37, 41, 33, 25, 34, 27, 34, 33, 36, 29, 30, 36, 24, 32, 27, 32, 40,\n       35, 39, 30, 32, 37, 28, 35, 33, 23])",
                "ri": "Index(['h', 'e', 'w', 'x', 'o', 'r', 'p', 'm', 'c', 't', 'v', 'j', 'd', 'b',\n       'g', 'a', 's', 'u', 'i', 'f', 'k', 'n', 'z', 'q', 'y', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    37\ne    41\nw    33\nx    25\no    34\nr    27\np    34\nm    33\nc    36\nt    29\nv    30\nj    36\nd    24\nb    32\ng    27\na    32\ns    40\nu    35\ni    39\nf    30\nk    32\nn    37\nz    28\nq    35\ny    33\nl    23\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da820>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2dad60>",
                "self.obj": "0      29\n1      37\n2      74\n3      14\n4      39\n       ..\n995    42\n996    56\n997    29\n998    54\n999    53\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([29, 37, 74, 14, 39, 47, 92, 96, 95, 20, 33, 10, 12, 62, 93, 72, 65,\n        7, 76,  6,  2, 35, 97,  8, 49,  5, 83, 84, 68,  3, 22, 19, 15, 67,\n       32, 38, 59, 17, 25, 56, 42, 80, 66, 53, 81, 73, 26, 90, 13, 69, 30,\n       55, 23, 36, 58, 86, 51,  4, 71, 54, 77, 88, 44, 82, 28, 87, 41,  0,\n       24, 50, 18, 52, 78, 64, 70, 48, 98, 43, 27, 79,  1, 85, 89, 31, 57,\n       61, 94,  9, 11, 60, 75, 63, 21, 91, 99, 34, 45, 46, 40, 16])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (252,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (252,)",
                "res": "array of shape (252,)",
                "ri": "array of shape (252,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-26    3\ne    2015-08-25    8\nw    2015-09-01    2\nx    2015-08-27    2\no    2015-08-25    4\n                  ..\nz    2015-08-29    1\na    2015-08-23    1\nd    2015-08-28    2\ny    2015-08-31    1\ni    2015-08-31    1\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da0a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da070>",
                "self.obj": "0      29.0\n1      37.0\n2      74.0\n3      14.0\n4      39.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    54.0\n999    53.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59, 109, 146, 176, 216, 243, 281, 314, 355, 389, 427, 464, 505,\n       532, 565, 595, 631, 681, 720, 749, 790, 826, 867, 898, 940, 975])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([42, 30, 24, 19, 29, 26, 26, 26, 27, 28, 23, 26, 32, 19, 27, 25, 27,\n       35, 25, 25, 35, 30, 28, 24, 30, 28, 19])",
                "res": "array([30, 24, 19, 29, 26, 26, 26, 27, 28, 23, 26, 32, 19, 27, 25, 27, 35,\n       25, 25, 35, 30, 28, 24, 30, 28, 19])",
                "ri": "Index(['h', 'w', 'x', 'o', 'r', 'p', 'm', 'c', 't', 'v', 'j', 'e', 'd', 'b',\n       'g', 'a', 's', 'u', 'f', 'i', 'k', 'n', 'z', 'q', 'y', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    30\nw    24\nx    19\no    29\nr    26\np    26\nm    26\nc    27\nt    28\nv    23\nj    26\ne    32\nd    19\nb    27\ng    25\na    27\ns    35\nu    25\nf    25\ni    35\nk    30\nn    28\nz    24\nq    30\ny    28\nl    19\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da7f0>",
                "self.obj": "0      29.0\n1      37.0\n2      74.0\n3      14.0\n4      39.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    54.0\n999    53.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (252,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (252,)",
                "ri": "array of shape (252,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-26    2\nw    2015-09-01    1\no    2015-08-25    3\nr    2015-08-24    4\np    2015-08-24    4\n                  ..\na    2015-08-23    1\nd    2015-08-28    2\ny    2015-08-31    1\ni    2015-08-31    0\nj    2015-08-29    0\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da7f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da5e0>",
                "self.obj": "0      29.0\n1      37.0\n2      74.0\n3      14.0\n4      39.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    54.0\n999    53.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59, 109, 146, 176, 216, 243, 281, 314, 355, 389, 427, 464, 505,\n       532, 565, 595, 631, 681, 720, 749, 790, 826, 867, 898, 940, 975])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([42, 30, 24, 19, 29, 26, 26, 26, 27, 28, 23, 26, 32, 19, 27, 25, 27,\n       35, 25, 25, 35, 30, 28, 24, 30, 28, 19])",
                "res": "array([30, 24, 19, 29, 26, 26, 26, 27, 28, 23, 26, 32, 19, 27, 25, 27, 35,\n       25, 25, 35, 30, 28, 24, 30, 28, 19])",
                "ri": "Index(['h', 'w', 'x', 'o', 'r', 'p', 'm', 'c', 't', 'v', 'j', 'e', 'd', 'b',\n       'g', 'a', 's', 'u', 'f', 'i', 'k', 'n', 'z', 'q', 'y', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    30\nw    24\nx    19\no    29\nr    26\np    26\nm    26\nc    27\nt    28\nv    23\nj    26\ne    32\nd    19\nb    27\ng    25\na    27\ns    35\nu    25\nf    25\ni    35\nk    30\nn    28\nz    24\nq    30\ny    28\nl    19\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da5e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da880>",
                "self.obj": "0      29.0\n1      37.0\n2      74.0\n3      14.0\n4      39.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    54.0\n999    53.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (252,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (252,)",
                "ri": "array of shape (252,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-26    2\nw    2015-09-01    1\no    2015-08-25    3\nr    2015-08-24    4\np    2015-08-24    4\n                  ..\na    2015-08-23    1\nd    2015-08-28    2\ny    2015-08-31    1\ni    2015-08-31    0\nj    2015-08-29    0\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da580>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da040>",
                "self.obj": "0       79\n1       51\n2       66\n3       23\n4       46\n        ..\n9995    25\n9996    70\n9997    98\n9998    70\n9999    86\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([79, 51, 66, 23, 46, 65, 83, 54,  5, 48, 82, 53, 92, 14, 94,  0, 15,\n        1, 52,  7, 10, 75, 69, 72, 35, 63, 91, 59,  4, 78, 30, 96, 95, 47,\n       45,  8, 62,  2, 12, 39, 17, 40, 21, 98, 49, 58, 43, 90, 50, 76, 11,\n       61, 55, 89,  3, 18, 85, 38, 71, 99, 86, 87, 60, 74, 22, 34, 77, 32,\n       31, 97, 42, 84, 16, 13, 93, 73, 28, 20, 29, 67, 68, 57, 56, 44,  9,\n       33, 26, 25, 24, 80, 88, 64, 81, 19,  6, 36, 70, 27, 41, 37])",
                "val": "array([79, 51, 66, ..., 98, 70, 86])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([   0,  971, 6512, ..., 2744, 3575, 6587])",
                "idx": "array([   0,  406,  795, 1180, 1525, 1915, 2303, 2699, 3108, 3514, 3886,\n       4282, 4687, 5074, 5457, 5802, 6205, 6556, 6923, 7294, 7662, 8045,\n       8423, 8828, 9216, 9618])",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 98,  97,  98,  99,  97,  97,  99,  99,  96,  99,  99,  98,  97,\n        99,  98, 100,  98,  98,  97,  92, 100,  98,  98,  98, 100, 100])",
                "res": "array([ 98,  97,  98,  99,  97,  97,  99,  99,  96,  99,  99,  98,  97,\n        99,  98, 100,  98,  98,  97,  92, 100,  98,  98,  98, 100, 100])",
                "ri": "Index(['a', 'd', 'u', 'v', 'f', 's', 'i', 'h', 'q', 'c', 'b', 't', 'y', 'r',\n       'm', 'z', 'k', 'l', 'p', 'w', 'o', 'j', 'e', 'n', 'g', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     98\nd     97\nu     98\nv     99\nf     97\ns     97\ni     99\nh     99\nq     96\nc     99\nb     99\nt     98\ny     97\nr     99\nm     98\nz    100\nk     98\nl     98\np     97\nw     92\no    100\nj     98\ne     98\nn     98\ng    100\nx    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da8b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da880>",
                "self.obj": "0       79\n1       51\n2       66\n3       23\n4       46\n        ..\n9995    25\n9996    70\n9997    98\n9998    70\n9999    86\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([79, 51, 66, 23, 46, 65, 83, 54,  5, 48, 82, 53, 92, 14, 94,  0, 15,\n        1, 52,  7, 10, 75, 69, 72, 35, 63, 91, 59,  4, 78, 30, 96, 95, 47,\n       45,  8, 62,  2, 12, 39, 17, 40, 21, 98, 49, 58, 43, 90, 50, 76, 11,\n       61, 55, 89,  3, 18, 85, 38, 71, 99, 86, 87, 60, 74, 22, 34, 77, 32,\n       31, 97, 42, 84, 16, 13, 93, 73, 28, 20, 29, 67, 68, 57, 56, 44,  9,\n       33, 26, 25, 24, 80, 88, 64, 81, 19,  6, 36, 70, 27, 41, 37])",
                "val": "array([79, 51, 66, ..., 98, 70, 86])",
                "codes": "array([ 0,  0,  0, ..., 95, 96, 97])",
                "sorter": "array([   0, 6512, 6629, ..., 9490, 2283, 8191])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-09-01    36\nd    2015-08-29    25\nu    2015-08-31    40\nv    2015-08-27    30\nf    2015-08-26    30\n                   ..\nn    2015-08-27    24\nx    2015-08-29    27\ns    2015-08-27    32\nd    2015-08-28    27\ne    2015-09-01    34\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da8b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da4f0>",
                "self.obj": "0       79.0\n1       51.0\n2       66.0\n3       23.0\n4       46.0\n        ... \n9995    25.0\n9996    70.0\n9997    98.0\n9998    70.0\n9999    86.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([79., 51., 66., ..., 98., 70., 86.])",
                "codes": "array([-1, -1, -1, ..., 98, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 7851, 3575, 6587])",
                "idx": "array([ 589,  967, 1327, 1649, 2017, 2391, 2766, 3153, 3535, 3888, 4255,\n       4642, 5005, 5318, 5696, 6024, 6373, 6725, 7093, 7452, 7800, 8159,\n       8513, 8888, 9256, 9643])",
                "inc": "array([0, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100,  96,  95,  92,  96,  97,  96,  92,  92,  97,  98,  97,  99,\n        94,  99,  98,  96,  93,  93,  95,  91,  97,  95,  96,  95,  97,\n        95])",
                "res": "array([96, 95, 92, 96, 97, 96, 92, 92, 97, 98, 97, 99, 94, 99, 98, 96, 93,\n       93, 95, 91, 97, 95, 96, 95, 97, 95])",
                "ri": "Index(['a', 'u', 'v', 'f', 's', 'i', 'h', 'q', 'c', 'b', 't', 'r', 'm', 'z',\n       'k', 'l', 'p', 'y', 'd', 'w', 'o', 'j', 'e', 'n', 'g', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    96\nu    95\nv    92\nf    96\ns    97\ni    96\nh    92\nq    92\nc    97\nb    98\nt    97\nr    99\nm    94\nz    99\nk    98\nl    96\np    93\ny    93\nd    95\nw    91\no    97\nj    95\ne    96\nn    95\ng    97\nx    95\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da3d0>",
                "self.obj": "0       79.0\n1       51.0\n2       66.0\n3       23.0\n4       46.0\n        ... \n9995    25.0\n9996    70.0\n9997    98.0\n9998    70.0\n9999    86.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([79., 51., 66., ..., 98., 70., 86.])",
                "codes": "array([-1, -1, -1, ..., 92, 93, 98])",
                "sorter": "array([ 103,  256,  273, ..., 8015, 8191, 7500])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-09-01    30\nu    2015-08-31    31\nf    2015-08-26    29\n     2015-08-27    30\ns    2015-08-28    32\n                   ..\nx    2015-08-29    21\nb    2015-08-26    23\ns    2015-08-27    22\nd    2015-08-28    19\ne    2015-09-01    28\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da0a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da700>",
                "self.obj": "0       79.0\n1       51.0\n2       66.0\n3       23.0\n4       46.0\n        ... \n9995    25.0\n9996    70.0\n9997    98.0\n9998    70.0\n9999    86.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([79., 51., 66., ..., 98., 70., 86.])",
                "codes": "array([-1, -1, -1, ..., 98, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 7851, 3575, 6587])",
                "idx": "array([ 589,  967, 1327, 1649, 2017, 2391, 2766, 3153, 3535, 3888, 4255,\n       4642, 5005, 5318, 5696, 6024, 6373, 6725, 7093, 7452, 7800, 8159,\n       8513, 8888, 9256, 9643])",
                "inc": "array([0, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100,  96,  95,  92,  96,  97,  96,  92,  92,  97,  98,  97,  99,\n        94,  99,  98,  96,  93,  93,  95,  91,  97,  95,  96,  95,  97,\n        95])",
                "res": "array([96, 95, 92, 96, 97, 96, 92, 92, 97, 98, 97, 99, 94, 99, 98, 96, 93,\n       93, 95, 91, 97, 95, 96, 95, 97, 95])",
                "ri": "Index(['a', 'u', 'v', 'f', 's', 'i', 'h', 'q', 'c', 'b', 't', 'r', 'm', 'z',\n       'k', 'l', 'p', 'y', 'd', 'w', 'o', 'j', 'e', 'n', 'g', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    96\nu    95\nv    92\nf    96\ns    97\ni    96\nh    92\nq    92\nc    97\nb    98\nt    97\nr    99\nm    94\nz    99\nk    98\nl    96\np    93\ny    93\nd    95\nw    91\no    97\nj    95\ne    96\nn    95\ng    97\nx    95\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da700>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da7f0>",
                "self.obj": "0       79.0\n1       51.0\n2       66.0\n3       23.0\n4       46.0\n        ... \n9995    25.0\n9996    70.0\n9997    98.0\n9998    70.0\n9999    86.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([79., 51., 66., ..., 98., 70., 86.])",
                "codes": "array([-1, -1, -1, ..., 92, 93, 98])",
                "sorter": "array([ 103,  256,  273, ..., 8015, 8191, 7500])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-09-01    30\nu    2015-08-31    31\nf    2015-08-26    29\n     2015-08-27    30\ns    2015-08-28    32\n                   ..\nx    2015-08-29    21\nb    2015-08-26    23\ns    2015-08-27    22\nd    2015-08-28    19\ne    2015-09-01    28\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2dadf0>",
                "self.obj": "0        43\n1        43\n2        78\n3        67\n4        74\n         ..\n99995    26\n99996     7\n99997    81\n99998    15\n99999    32\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([43, 78, 67, 74,  2, 90,  0, 56, 80, 68, 12, 18, 21, 85, 59, 77, 60,\n       97, 11, 52, 23,  6, 95, 88, 36, 61, 40, 94, 84, 35, 75, 89, 55, 17,\n       20, 71, 64, 15, 32, 29, 86, 91, 70,  4, 62, 48,  9,  5, 33, 49, 39,\n       73, 57, 19, 81, 63, 50, 34, 79, 65, 16, 22, 38, 66, 10, 82, 25, 42,\n       13, 28, 83, 27, 45, 92, 96, 41, 72, 93,  7, 44, 54, 14, 87,  3, 30,\n       98, 53, 76, 24,  8, 46, 69, 26, 51, 47, 58, 31,  1, 99, 37])",
                "val": "array([43, 43, 78, ..., 81, 15, 32])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([    0,  3121,  3277, ..., 97062, 98488, 98961])",
                "idx": "array([    0,  3729,  7576, 11314, 15202, 19054, 22960, 26951, 30701,\n       34575, 38487, 42358, 46197, 50057, 53920, 57676, 61419, 65388,\n       69250, 73185, 77122, 80973, 84907, 88658, 92462, 96252])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['y', 'e', 'b', 's', 'v', 'd', 'u', 'm', 'z', 'g', 'r', 'p', 'n', 'x',\n       'h', 'o', 'w', 'j', 'q', 'f', 'c', 't', 'a', 'i', 'k', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    100\ne    100\nb    100\ns    100\nv    100\nd    100\nu    100\nm    100\nz    100\ng    100\nr    100\np    100\nn    100\nx    100\nh    100\no    100\nw    100\nj    100\nq    100\nf    100\nc    100\nt    100\na    100\ni    100\nk    100\nl    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da5b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da3d0>",
                "self.obj": "0        43\n1        43\n2        78\n3        67\n4        74\n         ..\n99995    26\n99996     7\n99997    81\n99998    15\n99999    32\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([43, 78, 67, 74,  2, 90,  0, 56, 80, 68, 12, 18, 21, 85, 59, 77, 60,\n       97, 11, 52, 23,  6, 95, 88, 36, 61, 40, 94, 84, 35, 75, 89, 55, 17,\n       20, 71, 64, 15, 32, 29, 86, 91, 70,  4, 62, 48,  9,  5, 33, 49, 39,\n       73, 57, 19, 81, 63, 50, 34, 79, 65, 16, 22, 38, 66, 10, 82, 25, 42,\n       13, 28, 83, 27, 45, 92, 96, 41, 72, 93,  7, 44, 54, 14, 87,  3, 30,\n       98, 53, 76, 24,  8, 46, 69, 26, 51, 47, 58, 31,  1, 99, 37])",
                "val": "array([43, 43, 78, ..., 81, 15, 32])",
                "codes": "array([ 0,  0,  1, ..., 99, 99, 99])",
                "sorter": "array([    0, 52649,  2154, ..., 72179, 75658, 79677])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 1, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-27    100\ne    2015-08-23     97\nb    2015-08-27     98\ne    2015-08-28     96\ns    2015-08-27     99\n                  ... \nr    2015-09-01     97\nb    2015-08-30     97\ni    2015-09-01     98\ne    2015-08-24     96\nu    2015-08-28     98\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da0a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da5b0>",
                "self.obj": "0        43.0\n1        43.0\n2        78.0\n3        67.0\n4        74.0\n         ... \n99995    26.0\n99996     7.0\n99997    81.0\n99998    15.0\n99999    32.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([43., 43., 78., ..., 81., 15., 32.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 96075, 97062, 98488])",
                "idx": "array([ 5883,  9412, 12928, 16555, 20234, 23862, 27524, 31273, 34805,\n       38448, 42121, 45771, 49397, 53030, 56670, 60208, 63703, 67461,\n       71110, 74795, 78499, 82120, 85816, 89321, 92888, 96464])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['y', 'b', 'e', 's', 'v', 'd', 'u', 'm', 'z', 'g', 'r', 'p', 'n', 'x',\n       'h', 'o', 'w', 'j', 'q', 'f', 'c', 't', 'a', 'k', 'i', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    100\nb    100\ne    100\ns    100\nv    100\nd    100\nu    100\nm    100\nz    100\ng    100\nr    100\np    100\nn    100\nx    100\nh    100\no    100\nw    100\nj    100\nq    100\nf    100\nc    100\nt    100\na    100\nk    100\ni    100\nl    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2da130>",
                "self.obj": "0        43.0\n1        43.0\n2        78.0\n3        67.0\n4        74.0\n         ... \n99995    26.0\n99996     7.0\n99997    81.0\n99998    15.0\n99999    32.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([43., 43., 78., ..., 81., 15., 32.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 37709, 68905, 80901])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-27    96\nb    2015-08-27    95\ns    2015-08-27    99\nv    2015-08-31    96\nd    2015-09-01    92\n                   ..\ne    2015-08-24    93\nw    2015-08-28    97\nu    2015-08-28    96\nm    2015-08-26    90\nn    2015-08-26    92\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2700>",
                "self.obj": "0        43.0\n1        43.0\n2        78.0\n3        67.0\n4        74.0\n         ... \n99995    26.0\n99996     7.0\n99997    81.0\n99998    15.0\n99999    32.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([43., 43., 78., ..., 81., 15., 32.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 96075, 97062, 98488])",
                "idx": "array([ 5883,  9412, 12928, 16555, 20234, 23862, 27524, 31273, 34805,\n       38448, 42121, 45771, 49397, 53030, 56670, 60208, 63703, 67461,\n       71110, 74795, 78499, 82120, 85816, 89321, 92888, 96464])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['y', 'b', 'e', 's', 'v', 'd', 'u', 'm', 'z', 'g', 'r', 'p', 'n', 'x',\n       'h', 'o', 'w', 'j', 'q', 'f', 'c', 't', 'a', 'k', 'i', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    100\nb    100\ne    100\ns    100\nv    100\nd    100\nu    100\nm    100\nz    100\ng    100\nr    100\np    100\nn    100\nx    100\nh    100\no    100\nw    100\nj    100\nq    100\nf    100\nc    100\nt    100\na    100\nk    100\ni    100\nl    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2da790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2850>",
                "self.obj": "0        43.0\n1        43.0\n2        78.0\n3        67.0\n4        74.0\n         ... \n99995    26.0\n99996     7.0\n99997    81.0\n99998    15.0\n99999    32.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([43., 43., 78., ..., 81., 15., 32.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 37709, 68905, 80901])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-27    96\nb    2015-08-27    95\ns    2015-08-27    99\nv    2015-08-31    96\nd    2015-09-01    92\n                   ..\ne    2015-08-24    93\nw    2015-08-28    97\nu    2015-08-28    96\nm    2015-08-26    90\nn    2015-08-26    92\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2c10>",
                "self.obj": "0     714\n1       5\n2     850\n3      12\n4     854\n     ... \n95    926\n96    321\n97    380\n98      4\n99     86\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,\n        3,  3,  4,  4,  4,  4,  4,  4,  5,  5,  6,  6,  6,  6,  6,  7,  7,\n        7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9, 10,\n       10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14,\n       14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 17, 18, 18, 19, 19, 19,\n       19, 20, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "array of shape (94,)",
                "val": "array of shape (100,)",
                "codes": "array([ 0, 18, 76, 92,  1, 14, 38, 40, 82,  2, 24, 26, 47, 59,  3, 53, 54,\n       61, 80,  4, 51, 55, 72, 85, 88,  5, 45,  6, 15, 25, 36, 64,  7, 13,\n       26, 27, 39, 41, 73,  8, 10, 62, 87,  9, 32, 43, 46, 60, 67, 79, 11,\n       16, 83, 93, 12, 21, 33, 52, 58, 75, 17, 29, 86, 19, 63, 77, 89, 20,\n       22, 31, 49, 68, 23, 31, 48, 28, 30, 35, 50, 90, 34, 84, 37, 71, 78,\n       81, 42, 44, 57, 70, 23, 91, 46, 49, 56, 66, 71, 65, 69, 74])",
                "sorter": "array([ 0, 18, 81, 98,  1, 14, 39, 41, 87,  2, 24, 35, 49, 63,  3, 57, 58,\n       65, 85,  4, 55, 59, 77, 91, 94,  5, 47,  6, 15, 25, 37, 69,  7, 13,\n       26, 27, 40, 42, 78,  8, 10, 66, 93,  9, 32, 44, 52, 64, 72, 84, 11,\n       16, 88, 99, 12, 21, 33, 56, 62, 80, 17, 29, 92, 19, 67, 82, 95, 20,\n       22, 51, 53, 73, 23, 31, 50, 28, 30, 36, 54, 96, 34, 90, 38, 76, 83,\n       86, 43, 45, 61, 75, 46, 97, 48, 68, 60, 71, 89, 70, 74, 79])",
                "idx": "array([ 0,  4,  9, 14, 19, 25, 27, 32, 39, 43, 50, 54, 60, 63, 67, 72, 75,\n       76, 80, 82, 86, 87, 90, 92, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 5, 5, 5, 6, 2, 5, 7, 4, 7, 4, 6, 3, 4, 5, 3, 1, 4, 2, 4, 1, 3,\n       2, 5, 3])",
                "res": "array([4, 5, 5, 5, 6, 2, 5, 7, 4, 7, 4, 6, 3, 4, 5, 3, 1, 4, 2, 4, 1, 3,\n       2, 5, 3])",
                "ri": "Index(['m', 'l', 'i', 'c', 'd', 'v', 'h', 'b', 'w', 'q', 's', 'p', 'e', 't',\n       'g', 'u', 'a', 'j', 'k', 'f', 'r', 'x', 'o', 'y', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    4\nl    5\ni    5\nc    5\nd    6\nv    2\nh    5\nb    7\nw    4\nq    7\ns    4\np    6\ne    3\nt    4\ng    5\nu    3\na    1\nj    4\nk    2\nf    4\nr    1\nx    3\no    2\ny    5\nn    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2b80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c28b0>",
                "self.obj": "0     714\n1       5\n2     850\n3      12\n4     854\n     ... \n95    926\n96    321\n97    380\n98      4\n99     86\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 12, 13,\n       14, 14, 15, 16, 17, 18, 19, 19, 20, 20, 21, 21, 22, 23, 24, 24, 25,\n       26, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 38,\n       39, 40, 41, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51,\n       52, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 72, 73, 73, 74, 75, 76, 77, 78, 79])",
                "_": "array of shape (94,)",
                "val": "array of shape (100,)",
                "codes": "array([ 0,  1,  2, 26,  3,  4,  5,  6,  7,  8,  9, 32, 10, 11, 12, 33, 13,\n       14, 82, 15, 16, 17, 18, 19, 63, 20, 49, 21, 58, 22, 23, 24, 47, 25,\n       26, 41, 27, 39, 28, 29, 30, 31, 34, 84, 35, 36, 37, 78, 38, 40, 42,\n       43, 44, 23, 45, 46, 49, 48, 31, 68, 46, 50, 90, 51, 52, 53, 54, 55,\n       56, 71, 57, 59, 60, 61, 80, 62, 64, 65, 74, 66, 67, 69, 70, 71, 72,\n       73, 75, 76, 77, 79, 81, 83, 85, 88, 86, 87, 89, 91, 92, 93])",
                "sorter": "array([ 0,  1,  2, 35,  3,  4,  5,  6,  7,  8,  9, 32, 10, 11, 12, 33, 13,\n       14, 87, 15, 16, 17, 18, 19, 67, 20, 53, 21, 62, 22, 23, 24, 49, 25,\n       26, 42, 27, 40, 28, 29, 30, 31, 34, 90, 36, 37, 38, 83, 39, 41, 43,\n       44, 45, 46, 47, 48, 68, 50, 51, 73, 52, 54, 96, 55, 56, 57, 58, 59,\n       60, 89, 61, 63, 64, 65, 85, 66, 69, 70, 79, 71, 72, 74, 75, 76, 77,\n       78, 80, 81, 82, 84, 86, 88, 91, 94, 92, 93, 95, 97, 98, 99])",
                "idx": "array([ 0,  1,  2,  4,  5,  6,  7,  8,  9, 10, 12, 13, 14, 16, 17, 19, 20,\n       21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 36, 38, 39, 40, 41, 42, 44,\n       45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65,\n       67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86,\n       87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2,\n       1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2,\n       1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (80,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-29    1\nl    2015-08-26    1\ni    2015-08-31    2\nc    2015-08-26    1\nd    2015-09-01    1\n                  ..\nw    2015-08-24    1\nt    2015-08-31    1\no    2015-08-30    1\nm    2015-08-23    1\ns    2015-09-01    1\nName: julie, Length: 80, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2f40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2a00>",
                "self.obj": "0     714.0\n1       5.0\n2     850.0\n3      12.0\n4     854.0\n      ...  \n95    926.0\n96    321.0\n97    380.0\n98      4.0\n99     86.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,\n       10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13,\n       14, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 17, 18, 18, 19, 19,\n       19, 20, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "array of shape (81,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 15, 29, 39, 54, 68,  0, 66, 79,  2, 21, 40, 52, -1, -1,  3, 46,\n       47,  4, 44, 48, 62, 72, 75, -1,  5,  6, 12, 22, 31, -1, -1, -1, 10,\n       34, 36, 63, -1, -1,  7, 74, -1, -1, -1, 26, 38, 57,  8, 13, 70, 80,\n        9, 18, 27, 45, 51, 65, 11, 33, 35, 69, 14, 23, 73, 16, 53, 67, 76,\n       17, 19, 25, 42, 58, 20, 25, 41, -1, 24, 30, 43, 77, 28, 71, -1, 32,\n       61, 37, -1, 50, 60, -1, 78, 39, 42, 49, 56, 61, 55, 59, 64])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86,  0, 81, 98,  2, 24, 49, 63, 65, 85,  3, 57,\n       58,  4, 55, 59, 77, 91, 94, 47,  5,  6, 15, 25, 37,  7, 26, 27, 13,\n       40, 42, 78,  8, 66, 10, 93,  9, 64, 84, 32, 44, 72, 11, 16, 88, 99,\n       12, 21, 33, 56, 62, 80, 14, 39, 41, 87, 17, 29, 92, 19, 67, 82, 95,\n       20, 22, 51, 53, 73, 23, 31, 50, 28, 30, 36, 54, 96, 34, 90, 83, 38,\n       76, 43, 45, 61, 75, 46, 97, 48, 68, 60, 71, 89, 70, 74, 79])",
                "idx": "array([ 6,  9, 13, 18, 24, 26, 30, 37, 41, 47, 51, 57, 61, 64, 68, 73, 76,\n       77, 81, 83, 86, 87, 90, 92, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 3, 4, 3, 6, 1, 4, 4, 2, 3, 4, 6, 4, 3, 4, 5, 3, 0, 4, 2, 2, 1,\n       2, 1, 5, 3])",
                "res": "array([3, 4, 3, 6, 1, 4, 4, 2, 3, 4, 6, 4, 3, 4, 5, 3, 0, 4, 2, 2, 1, 2,\n       1, 5, 3])",
                "ri": "Index(['m', 'i', 'c', 'd', 'v', 'h', 'b', 'w', 'q', 's', 'p', 'l', 'e', 't',\n       'g', 'u', 'a', 'j', 'k', 'f', 'r', 'x', 'o', 'y', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    3\ni    4\nc    3\nd    6\nv    1\nh    4\nb    4\nw    2\nq    3\ns    4\np    6\nl    4\ne    3\nt    4\ng    5\nu    3\na    0\nj    4\nk    2\nf    2\nr    1\nx    2\no    1\ny    5\nn    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2670>",
                "self.obj": "0     714.0\n1       5.0\n2     850.0\n3      12.0\n4     854.0\n      ...  \n95    926.0\n96    321.0\n97    380.0\n98      4.0\n99     86.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        7,  8,  9, 10, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17, 17, 18, 18,\n       19, 20, 21, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32,\n       32, 33, 34, 35, 36, 37, 38, 39, 40, 40, 41, 42, 42, 43, 43, 44, 45,\n       46, 46, 47, 48, 48, 49, 50, 51, 52, 52, 53, 54, 54, 55, 56, 57, 58,\n       59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72])",
                "_": "array of shape (81,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 15, 29, 34, 39, 54, 62, 68,  0,  2,  4,  5,  6, -1, -1, -1,\n       26,  7,  8,  9, 27, 10, 11, 69, 12, 13, 14, 16, 53, 17, 42, 18, 51,\n       19, 20, 21, 40, 22, -1, 36, -1, -1, 23, 24, 25, 28, 71, 30, 31, -1,\n       32, 33, 35, 37, 38, -1, -1, -1, 39, 42, 41, 25, 58, 43, 77, 44, 45,\n       46, 47, 48, 49, 61, 50, 52, -1, -1, -1, -1, 55, 64, 56, 57, 59, 60,\n       61, 63, 65, 66, 67, -1, 70, 72, 75, 73, 74, 76, 78, 79, 80])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0,  2,  4,  5,  6,  7,  8,  9,\n       32, 10, 11, 12, 33, 13, 14, 87, 15, 16, 17, 19, 67, 20, 53, 21, 62,\n       22, 23, 24, 49, 25, 26, 42, 27, 28, 29, 30, 31, 34, 90, 36, 37, 83,\n       38, 39, 41, 43, 44, 45, 46, 47, 48, 68, 50, 51, 73, 54, 96, 55, 56,\n       57, 58, 59, 60, 89, 61, 63, 64, 65, 85, 66, 70, 79, 71, 72, 74, 75,\n       76, 78, 80, 81, 82, 84, 88, 91, 94, 92, 93, 95, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28,\n       30, 32, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52,\n       53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 71, 73, 74,\n       75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94,\n       95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1,\n       2, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 1, 2,\n       2, 1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 2, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2,\n       1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 1, 2, 2,\n       1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       2, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (73,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-29    1\ni    2015-08-31    1\nd    2015-09-01    1\nv    2015-09-01    1\nh    2015-08-28    1\n                  ..\nw    2015-08-24    1\nt    2015-08-31    1\no    2015-08-30    1\nm    2015-08-23    1\ns    2015-09-01    1\nName: julie, Length: 73, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2c70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2f70>",
                "self.obj": "0     714.0\n1       5.0\n2     850.0\n3      12.0\n4     854.0\n      ...  \n95    926.0\n96    321.0\n97    380.0\n98      4.0\n99     86.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,\n       10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13,\n       14, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 17, 18, 18, 19, 19,\n       19, 20, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "array of shape (81,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 15, 29, 39, 54, 68,  0, 66, 79,  2, 21, 40, 52, -1, -1,  3, 46,\n       47,  4, 44, 48, 62, 72, 75, -1,  5,  6, 12, 22, 31, -1, -1, -1, 10,\n       34, 36, 63, -1, -1,  7, 74, -1, -1, -1, 26, 38, 57,  8, 13, 70, 80,\n        9, 18, 27, 45, 51, 65, 11, 33, 35, 69, 14, 23, 73, 16, 53, 67, 76,\n       17, 19, 25, 42, 58, 20, 25, 41, -1, 24, 30, 43, 77, 28, 71, -1, 32,\n       61, 37, -1, 50, 60, -1, 78, 39, 42, 49, 56, 61, 55, 59, 64])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86,  0, 81, 98,  2, 24, 49, 63, 65, 85,  3, 57,\n       58,  4, 55, 59, 77, 91, 94, 47,  5,  6, 15, 25, 37,  7, 26, 27, 13,\n       40, 42, 78,  8, 66, 10, 93,  9, 64, 84, 32, 44, 72, 11, 16, 88, 99,\n       12, 21, 33, 56, 62, 80, 14, 39, 41, 87, 17, 29, 92, 19, 67, 82, 95,\n       20, 22, 51, 53, 73, 23, 31, 50, 28, 30, 36, 54, 96, 34, 90, 83, 38,\n       76, 43, 45, 61, 75, 46, 97, 48, 68, 60, 71, 89, 70, 74, 79])",
                "idx": "array([ 6,  9, 13, 18, 24, 26, 30, 37, 41, 47, 51, 57, 61, 64, 68, 73, 76,\n       77, 81, 83, 86, 87, 90, 92, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 3, 4, 3, 6, 1, 4, 4, 2, 3, 4, 6, 4, 3, 4, 5, 3, 0, 4, 2, 2, 1,\n       2, 1, 5, 3])",
                "res": "array([3, 4, 3, 6, 1, 4, 4, 2, 3, 4, 6, 4, 3, 4, 5, 3, 0, 4, 2, 2, 1, 2,\n       1, 5, 3])",
                "ri": "Index(['m', 'i', 'c', 'd', 'v', 'h', 'b', 'w', 'q', 's', 'p', 'l', 'e', 't',\n       'g', 'u', 'a', 'j', 'k', 'f', 'r', 'x', 'o', 'y', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    3\ni    4\nc    3\nd    6\nv    1\nh    4\nb    4\nw    2\nq    3\ns    4\np    6\nl    4\ne    3\nt    4\ng    5\nu    3\na    0\nj    4\nk    2\nf    2\nr    1\nx    2\no    1\ny    5\nn    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2c70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2190>",
                "self.obj": "0     714.0\n1       5.0\n2     850.0\n3      12.0\n4     854.0\n      ...  \n95    926.0\n96    321.0\n97    380.0\n98      4.0\n99     86.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        7,  8,  9, 10, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17, 17, 18, 18,\n       19, 20, 21, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32,\n       32, 33, 34, 35, 36, 37, 38, 39, 40, 40, 41, 42, 42, 43, 43, 44, 45,\n       46, 46, 47, 48, 48, 49, 50, 51, 52, 52, 53, 54, 54, 55, 56, 57, 58,\n       59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72])",
                "_": "array of shape (81,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 15, 29, 34, 39, 54, 62, 68,  0,  2,  4,  5,  6, -1, -1, -1,\n       26,  7,  8,  9, 27, 10, 11, 69, 12, 13, 14, 16, 53, 17, 42, 18, 51,\n       19, 20, 21, 40, 22, -1, 36, -1, -1, 23, 24, 25, 28, 71, 30, 31, -1,\n       32, 33, 35, 37, 38, -1, -1, -1, 39, 42, 41, 25, 58, 43, 77, 44, 45,\n       46, 47, 48, 49, 61, 50, 52, -1, -1, -1, -1, 55, 64, 56, 57, 59, 60,\n       61, 63, 65, 66, 67, -1, 70, 72, 75, 73, 74, 76, 78, 79, 80])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0,  2,  4,  5,  6,  7,  8,  9,\n       32, 10, 11, 12, 33, 13, 14, 87, 15, 16, 17, 19, 67, 20, 53, 21, 62,\n       22, 23, 24, 49, 25, 26, 42, 27, 28, 29, 30, 31, 34, 90, 36, 37, 83,\n       38, 39, 41, 43, 44, 45, 46, 47, 48, 68, 50, 51, 73, 54, 96, 55, 56,\n       57, 58, 59, 60, 89, 61, 63, 64, 65, 85, 66, 70, 79, 71, 72, 74, 75,\n       76, 78, 80, 81, 82, 84, 88, 91, 94, 92, 93, 95, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28,\n       30, 32, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52,\n       53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 71, 73, 74,\n       75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94,\n       95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1,\n       2, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 1, 2,\n       2, 1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 2, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2,\n       1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 1, 2, 2,\n       1, 1, 2, 1, 2, 1, 1, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       2, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (73,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-29    1\ni    2015-08-31    1\nd    2015-09-01    1\nv    2015-09-01    1\nh    2015-08-28    1\n                  ..\nw    2015-08-24    1\nt    2015-08-31    1\no    2015-08-30    1\nm    2015-08-23    1\ns    2015-09-01    1\nName: julie, Length: 73, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2c40>",
                "self.obj": "0      353\n1      232\n2      404\n3      929\n4        7\n      ... \n995    193\n996    221\n997    138\n998    267\n999    842\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (651,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  40,  79, 114, 154, 188, 232, 270, 314, 360, 401, 455, 501,\n       539, 574, 609, 648, 680, 708, 750, 788, 832, 869, 906, 934, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([39, 37, 34, 40, 33, 43, 37, 44, 45, 41, 52, 45, 36, 35, 35, 39, 32,\n       28, 42, 37, 43, 35, 36, 28, 34, 30])",
                "res": "array([39, 37, 34, 40, 33, 43, 37, 44, 45, 41, 52, 45, 36, 35, 35, 39, 32,\n       28, 42, 37, 43, 35, 36, 28, 34, 30])",
                "ri": "Index(['y', 'v', 'b', 's', 'z', 'g', 'j', 'x', 'm', 't', 'p', 'q', 'o', 'i',\n       'e', 'w', 'h', 'a', 'k', 'f', 'n', 'r', 'c', 'd', 'u', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    39\nv    37\nb    34\ns    40\nz    33\ng    43\nj    37\nx    44\nm    45\nt    41\np    52\nq    45\no    36\ni    35\ne    35\nw    39\nh    32\na    28\nk    42\nf    37\nn    43\nr    35\nc    36\nd    28\nu    34\nl    30\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2c70>",
                "self.obj": "0      353\n1      232\n2      404\n3      929\n4        7\n      ... \n995    193\n996    221\n997    138\n998    267\n999    842\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (651,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-09-01    5\nv    2015-08-29    5\nb    2015-08-23    6\ns    2015-08-24    7\nz    2015-08-23    5\n                  ..\nh    2015-08-27    3\ns    2015-08-27    1\na    2015-08-26    2\ne    2015-09-01    2\nb    2015-08-24    1\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2c70>",
                "self.obj": "0      353.0\n1      232.0\n2      404.0\n3      929.0\n4        7.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    267.0\n999    842.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (588,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  95, 129, 168, 202, 244, 280, 323, 364, 401, 450, 495, 532,\n       566, 603, 633, 661, 697, 728, 763, 803, 839, 873, 910, 937, 970])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([49, 27, 26, 34, 29, 32, 32, 35, 33, 30, 42, 31, 32, 27, 31, 27, 23,\n       32, 27, 31, 36, 28, 28, 31, 25, 25, 25])",
                "res": "array([27, 26, 34, 29, 32, 32, 35, 33, 30, 42, 31, 32, 27, 31, 27, 23, 32,\n       27, 31, 36, 28, 28, 31, 25, 25, 25])",
                "ri": "Index(['y', 'b', 's', 'z', 'g', 'j', 'x', 'm', 't', 'p', 'q', 'o', 'i', 'w',\n       'h', 'a', 'k', 'e', 'f', 'n', 'r', 'c', 'v', 'd', 'u', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    27\nb    26\ns    34\nz    29\ng    32\nj    32\nx    35\nm    33\nt    30\np    42\nq    31\no    32\ni    27\nw    31\nh    27\na    23\nk    32\ne    27\nf    31\nn    36\nr    28\nc    28\nv    31\nd    25\nu    25\nl    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2910>",
                "self.obj": "0      353.0\n1      232.0\n2      404.0\n3      929.0\n4        7.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    267.0\n999    842.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (588,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (251,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (252,)",
                "res": "array of shape (251,)",
                "ri": "array of shape (251,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-09-01    4\nb    2015-08-23    5\nz    2015-08-23    4\ng    2015-08-30    3\nz    2015-08-30    5\n                  ..\ns    2015-08-27    1\na    2015-08-26    1\ne    2015-09-01    2\nh    2015-08-27    1\nb    2015-08-24    1\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c20a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2af0>",
                "self.obj": "0      353.0\n1      232.0\n2      404.0\n3      929.0\n4        7.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    267.0\n999    842.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (588,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  95, 129, 168, 202, 244, 280, 323, 364, 401, 450, 495, 532,\n       566, 603, 633, 661, 697, 728, 763, 803, 839, 873, 910, 937, 970])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([49, 27, 26, 34, 29, 32, 32, 35, 33, 30, 42, 31, 32, 27, 31, 27, 23,\n       32, 27, 31, 36, 28, 28, 31, 25, 25, 25])",
                "res": "array([27, 26, 34, 29, 32, 32, 35, 33, 30, 42, 31, 32, 27, 31, 27, 23, 32,\n       27, 31, 36, 28, 28, 31, 25, 25, 25])",
                "ri": "Index(['y', 'b', 's', 'z', 'g', 'j', 'x', 'm', 't', 'p', 'q', 'o', 'i', 'w',\n       'h', 'a', 'k', 'e', 'f', 'n', 'r', 'c', 'v', 'd', 'u', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    27\nb    26\ns    34\nz    29\ng    32\nj    32\nx    35\nm    33\nt    30\np    42\nq    31\no    32\ni    27\nw    31\nh    27\na    23\nk    32\ne    27\nf    31\nn    36\nr    28\nc    28\nv    31\nd    25\nu    25\nl    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c27f0>",
                "self.obj": "0      353.0\n1      232.0\n2      404.0\n3      929.0\n4        7.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    267.0\n999    842.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (588,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (251,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (252,)",
                "res": "array of shape (251,)",
                "ri": "array of shape (251,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-09-01    4\nb    2015-08-23    5\nz    2015-08-23    4\ng    2015-08-30    3\nz    2015-08-30    5\n                  ..\ns    2015-08-27    1\na    2015-08-26    1\ne    2015-09-01    2\nh    2015-08-27    1\nb    2015-08-24    1\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c20a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2760>",
                "self.obj": "0       384\n1       757\n2       466\n3       112\n4       915\n       ... \n9995    851\n9996    450\n9997    437\n9998    307\n9999    626\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([384, 757, 466, ..., 437, 307, 626])",
                "codes": "array([  0,   0,   2, ..., 987, 991, 998])",
                "sorter": "array([   0, 4808, 2357, ..., 6083, 6245, 7998])",
                "idx": "array([   0,  384,  753, 1179, 1550, 1935, 2343, 2734, 3161, 3535, 3905,\n       4291, 4646, 5034, 5448, 5815, 6188, 6565, 6939, 7328, 7720, 8082,\n       8464, 8862, 9234, 9630])",
                "inc": "array([1, 0, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([326, 305, 353, 304, 334, 336, 320, 340, 306, 318, 321, 301, 321,\n       334, 300, 315, 307, 292, 324, 336, 314, 326, 329, 309, 335, 302])",
                "res": "array([326, 305, 353, 304, 334, 336, 320, 340, 306, 318, 321, 301, 321,\n       334, 300, 315, 307, 292, 324, 336, 314, 326, 329, 309, 335, 302])",
                "ri": "Index(['j', 'a', 'h', 'v', 'r', 'l', 'o', 'p', 's', 'q', 'x', 't', 'z', 'c',\n       'y', 'd', 'k', 'i', 'w', 'e', 'b', 'n', 'u', 'g', 'f', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    326\na    305\nh    353\nv    304\nr    334\nl    336\no    320\np    340\ns    306\nq    318\nx    321\nt    301\nz    321\nc    334\ny    300\nd    315\nk    307\ni    292\nw    324\ne    336\nb    314\nn    326\nu    329\ng    309\nf    335\nm    302\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c25b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2ee0>",
                "self.obj": "0       384\n1       757\n2       466\n3       112\n4       915\n       ... \n9995    851\n9996    450\n9997    437\n9998    307\n9999    626\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([384, 757, 466, ..., 437, 307, 626])",
                "codes": "array([  0,   8,  21, ..., 973, 984, 986])",
                "sorter": "array([   0, 9258, 2483, ..., 9384, 8730, 5566])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-31    32\na    2015-08-24    34\nh    2015-08-27    39\nv    2015-08-27    43\nr    2015-08-27    48\n                   ..\nm    2015-09-01    41\nz    2015-08-24    36\nw    2015-08-29    36\na    2015-08-29    38\nr    2015-08-28    40\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c25b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2d30>",
                "self.obj": "0       384.0\n1       757.0\n2       466.0\n3       112.0\n4       915.0\n        ...  \n9995    851.0\n9996    450.0\n9997    437.0\n9998    307.0\n9999    626.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([384., 757., 466., ..., 437., 307., 626.])",
                "codes": "array([ -1,  -1,  -1, ..., 978, 992, 996])",
                "sorter": "array([ 103,  256,  273, ..., 6083, 6245, 7998])",
                "idx": "array([ 589,  949, 1356, 1704, 2064, 2451, 2816, 3212, 3564, 3909, 4251,\n       4620, 4955, 5325, 5722, 6070, 6418, 6783, 7135, 7497, 7857, 8194,\n       8569, 8927, 9281, 9649])",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([387, 265, 305, 256, 269, 271, 261, 270, 248, 262, 248, 275, 250,\n       264, 282, 249, 243, 267, 237, 266, 259, 256, 269, 265, 257, 270,\n       248])",
                "res": "array([265, 305, 256, 269, 271, 261, 270, 248, 262, 248, 275, 250, 264,\n       282, 249, 243, 267, 237, 266, 259, 256, 269, 265, 257, 270, 248])",
                "ri": "Index(['j', 'h', 'v', 'r', 'l', 'o', 'p', 's', 'q', 'a', 'x', 't', 'z', 'c',\n       'y', 'd', 'k', 'i', 'w', 'e', 'b', 'u', 'n', 'g', 'f', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    265\nh    305\nv    256\nr    269\nl    271\no    261\np    270\ns    248\nq    262\na    248\nx    275\nt    250\nz    264\nc    282\ny    249\nd    243\nk    267\ni    237\nw    266\ne    259\nb    256\nu    269\nn    265\ng    257\nf    270\nm    248\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c26d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c29d0>",
                "self.obj": "0       384.0\n1       757.0\n2       466.0\n3       112.0\n4       915.0\n        ...  \n9995    851.0\n9996    450.0\n9997    437.0\n9998    307.0\n9999    626.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([384., 757., 466., ..., 437., 307., 626.])",
                "codes": "array([ -1,  -1,  -1, ..., 941, 963, 977])",
                "sorter": "array([ 103,  256,  273, ..., 8706, 9384, 5566])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-31    20\nh    2015-08-27    31\nr    2015-08-27    33\nl    2015-08-30    26\no    2015-08-29    33\n                   ..\nm    2015-09-01    35\nz    2015-08-24    31\nw    2015-08-29    29\na    2015-08-29    35\nr    2015-08-28    31\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2d90>",
                "self.obj": "0       384.0\n1       757.0\n2       466.0\n3       112.0\n4       915.0\n        ...  \n9995    851.0\n9996    450.0\n9997    437.0\n9998    307.0\n9999    626.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([384., 757., 466., ..., 437., 307., 626.])",
                "codes": "array([ -1,  -1,  -1, ..., 978, 992, 996])",
                "sorter": "array([ 103,  256,  273, ..., 6083, 6245, 7998])",
                "idx": "array([ 589,  949, 1356, 1704, 2064, 2451, 2816, 3212, 3564, 3909, 4251,\n       4620, 4955, 5325, 5722, 6070, 6418, 6783, 7135, 7497, 7857, 8194,\n       8569, 8927, 9281, 9649])",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([387, 265, 305, 256, 269, 271, 261, 270, 248, 262, 248, 275, 250,\n       264, 282, 249, 243, 267, 237, 266, 259, 256, 269, 265, 257, 270,\n       248])",
                "res": "array([265, 305, 256, 269, 271, 261, 270, 248, 262, 248, 275, 250, 264,\n       282, 249, 243, 267, 237, 266, 259, 256, 269, 265, 257, 270, 248])",
                "ri": "Index(['j', 'h', 'v', 'r', 'l', 'o', 'p', 's', 'q', 'a', 'x', 't', 'z', 'c',\n       'y', 'd', 'k', 'i', 'w', 'e', 'b', 'u', 'n', 'g', 'f', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    265\nh    305\nv    256\nr    269\nl    271\no    261\np    270\ns    248\nq    262\na    248\nx    275\nt    250\nz    264\nc    282\ny    249\nd    243\nk    267\ni    237\nw    266\ne    259\nb    256\nu    269\nn    265\ng    257\nf    270\nm    248\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c2be0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2190>",
                "self.obj": "0       384.0\n1       757.0\n2       466.0\n3       112.0\n4       915.0\n        ...  \n9995    851.0\n9996    450.0\n9997    437.0\n9998    307.0\n9999    626.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([384., 757., 466., ..., 437., 307., 626.])",
                "codes": "array([ -1,  -1,  -1, ..., 941, 963, 977])",
                "sorter": "array([ 103,  256,  273, ..., 8706, 9384, 5566])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-31    20\nh    2015-08-27    31\nr    2015-08-27    33\nl    2015-08-30    26\no    2015-08-29    33\n                   ..\nm    2015-09-01    35\nz    2015-08-24    31\nw    2015-08-29    29\na    2015-08-29    35\nr    2015-08-28    31\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c27f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c26d0>",
                "self.obj": "0        144\n1        209\n2          0\n3        824\n4          2\n        ... \n99995     50\n99996    882\n99997    801\n99998    549\n99999    276\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([144, 209,   0, ..., 801, 549, 276])",
                "codes": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([    0, 28054, 49196, ..., 80514, 82383, 94740])",
                "idx": "array([    0,  3787,  7782, 11662, 15587, 19448, 23294, 27240, 31021,\n       34871, 38709, 42498, 46315, 50132, 53980, 57866, 61593, 65451,\n       69297, 73126, 77043, 80755, 84566, 88367, 92276, 96143])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([982, 981, 981, 984, 985, 973, 984, 978, 977, 975, 980, 975, 984,\n       983, 974, 980, 980, 972, 978, 978, 971, 971, 983, 982, 984, 982])",
                "res": "array([982, 981, 981, 984, 985, 973, 984, 978, 977, 975, 980, 975, 984,\n       983, 974, 980, 980, 972, 978, 978, 971, 971, 983, 982, 984, 982])",
                "ri": "Index(['k', 'q', 'o', 'p', 'm', 'i', 'u', 'x', 'z', 'y', 'c', 'f', 'h', 't',\n       'a', 'b', 'l', 'g', 'r', 'd', 'j', 'n', 's', 'e', 'v', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    982\nq    981\no    981\np    984\nm    985\ni    973\nu    984\nx    978\nz    977\ny    975\nc    980\nf    975\nh    984\nt    983\na    974\nb    980\nl    980\ng    972\nr    978\nd    978\nj    971\nn    971\ns    983\ne    982\nv    984\nw    982\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c27f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c2a60>",
                "self.obj": "0        144\n1        209\n2          0\n3        824\n4          2\n        ... \n99995     50\n99996    882\n99997    801\n99998    549\n99999    276\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([144, 209,   0, ..., 801, 549, 276])",
                "codes": "array([  0,   4,   8, ..., 991, 993, 996])",
                "sorter": "array([    0, 49967, 23258, ..., 49381, 89755, 93005])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-30    308\nq    2015-08-29    334\no    2015-08-31    323\np    2015-08-23    334\nm    2015-08-26    321\n                  ... \nz    2015-08-29    291\nl    2015-08-23    328\nb    2015-08-31    294\nm    2015-08-27    336\ne    2015-08-25    316\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e1c26d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e1c25b0>",
                "self.obj": "0        144.0\n1        209.0\n2          0.0\n3        824.0\n4          2.0\n         ...  \n99995     50.0\n99996    882.0\n99997    801.0\n99998    549.0\n99999    276.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([144., 209.,   0., ..., 801., 549., 276.])",
                "codes": "array([ -1,  -1,  -1, ..., 998, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 94740, 18954, 24700])",
                "idx": "array([ 5883,  9464, 13115, 16806, 20479, 24093, 27792, 31544, 35111,\n       38731, 42332, 45888, 49493, 53103, 56701, 60332, 63825, 67479,\n       71063, 74730, 78385, 81905, 85487, 89062, 92755, 96383])",
                "inc": "array([0, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([991, 960, 951, 958, 962, 958, 961, 962, 947, 947, 954, 949, 949,\n       957, 953, 955, 949, 959, 956, 954, 953, 937, 942, 952, 955, 951,\n       948])",
                "res": "array([960, 951, 958, 962, 958, 961, 962, 947, 947, 954, 949, 949, 957,\n       953, 955, 949, 959, 956, 954, 953, 937, 942, 952, 955, 951, 948])",
                "ri": "Index(['k', 'o', 'p', 'm', 'i', 'u', 'q', 'x', 'z', 'y', 'c', 'f', 'h', 't',\n       'a', 'b', 'l', 'r', 'd', 'g', 'j', 'n', 's', 'e', 'v', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    960\no    951\np    958\nm    962\ni    958\nu    961\nq    962\nx    947\nz    947\ny    954\nc    949\nf    949\nh    957\nt    953\na    955\nb    949\nl    959\nr    956\nd    954\ng    953\nj    937\nn    942\ns    952\ne    955\nv    951\nw    948\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbe50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbeb0>",
                "self.obj": "0        144.0\n1        209.0\n2          0.0\n3        824.0\n4          2.0\n         ...  \n99995     50.0\n99996    882.0\n99997    801.0\n99998    549.0\n99999    276.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([144., 209.,   0., ..., 801., 549., 276.])",
                "codes": "array([ -1,  -1,  -1, ..., 987, 989, 990])",
                "sorter": "array([  103,   256,   273, ..., 65327, 98773, 90889])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-30    241\no    2015-08-31    253\nm    2015-08-26    255\no    2015-08-23    263\ni    2015-08-30    262\n                  ... \ne    2015-08-25    267\nv    2015-08-30    228\nm    2015-08-27    270\nl    2015-09-01    236\ng    2015-09-01    262\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbc70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbbb0>",
                "self.obj": "0        144.0\n1        209.0\n2          0.0\n3        824.0\n4          2.0\n         ...  \n99995     50.0\n99996    882.0\n99997    801.0\n99998    549.0\n99999    276.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([144., 209.,   0., ..., 801., 549., 276.])",
                "codes": "array([ -1,  -1,  -1, ..., 998, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 94740, 18954, 24700])",
                "idx": "array([ 5883,  9464, 13115, 16806, 20479, 24093, 27792, 31544, 35111,\n       38731, 42332, 45888, 49493, 53103, 56701, 60332, 63825, 67479,\n       71063, 74730, 78385, 81905, 85487, 89062, 92755, 96383])",
                "inc": "array([0, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([991, 960, 951, 958, 962, 958, 961, 962, 947, 947, 954, 949, 949,\n       957, 953, 955, 949, 959, 956, 954, 953, 937, 942, 952, 955, 951,\n       948])",
                "res": "array([960, 951, 958, 962, 958, 961, 962, 947, 947, 954, 949, 949, 957,\n       953, 955, 949, 959, 956, 954, 953, 937, 942, 952, 955, 951, 948])",
                "ri": "Index(['k', 'o', 'p', 'm', 'i', 'u', 'q', 'x', 'z', 'y', 'c', 'f', 'h', 't',\n       'a', 'b', 'l', 'r', 'd', 'g', 'j', 'n', 's', 'e', 'v', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    960\no    951\np    958\nm    962\ni    958\nu    961\nq    962\nx    947\nz    947\ny    954\nc    949\nf    949\nh    957\nt    953\na    955\nb    949\nl    959\nr    956\nd    954\ng    953\nj    937\nn    942\ns    952\ne    955\nv    951\nw    948\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb8b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbeb0>",
                "self.obj": "0        144.0\n1        209.0\n2          0.0\n3        824.0\n4          2.0\n         ...  \n99995     50.0\n99996    882.0\n99997    801.0\n99998    549.0\n99999    276.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([144., 209.,   0., ..., 801., 549., 276.])",
                "codes": "array([ -1,  -1,  -1, ..., 987, 989, 990])",
                "sorter": "array([  103,   256,   273, ..., 65327, 98773, 90889])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-30    241\no    2015-08-31    253\nm    2015-08-26    255\no    2015-08-23    263\ni    2015-08-30    262\n                  ... \ne    2015-08-25    267\nv    2015-08-30    228\nm    2015-08-27    270\nl    2015-09-01    236\ng    2015-09-01    262\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb7c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbdc0>",
                "self.obj": "0     0\n1     3\n2     2\n3     8\n4     4\n     ..\n95    5\n96    2\n97    2\n98    1\n99    9\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  4,  4,\n        4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,\n        7,  7,  7,  8,  8,  8,  8,  8,  9, 10, 10, 10, 11, 11, 12, 12, 12,\n       12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 17, 17,\n       17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22,\n       22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 25])",
                "_": "array([0, 3, 2, 8, 4, 9, 6, 5, 7, 1])",
                "val": "array([0, 3, 2, 8, 4, 3, 4, 9, 6, 4, 5, 0, 3, 2, 6, 2, 2, 7, 8, 1, 6, 6,\n       6, 6, 5, 8, 4, 4, 9, 3, 5, 8, 5, 3, 1, 3, 1, 2, 6, 9, 7, 8, 4, 0,\n       8, 2, 3, 7, 6, 5, 8, 0, 2, 7, 5, 2, 8, 6, 5, 1, 0, 3, 2, 0, 3, 4,\n       3, 1, 9, 9, 0, 5, 9, 8, 0, 0, 0, 6, 4, 2, 0, 2, 6, 4, 0, 2, 9, 4,\n       8, 3, 9, 9, 1, 9, 8, 5, 2, 2, 1, 9])",
                "codes": "array([2, 2, 3, 3, 9, 0, 1, 8, 0, 0, 1, 2, 7, 0, 1, 0, 1, 1, 2, 2, 4, 6,\n       9, 2, 3, 5, 6, 7, 0, 2, 4, 0, 3, 4, 6, 7, 9, 2, 4, 4, 6, 7, 2, 1,\n       2, 4, 5, 6, 1, 1, 3, 5, 0, 1, 3, 0, 1, 3, 6, 7, 5, 5, 6, 6, 7, 3,\n       4, 4, 7, 4, 8, 2, 2, 3, 4, 6, 7, 9, 1, 2, 3, 5, 9, 7, 9, 9, 2, 5,\n       5, 5, 6, 3, 5, 6, 0, 0, 0, 5, 8, 8])",
                "sorter": "array([13, 37, 25, 50, 36, 51,  5, 47, 60, 76, 61, 55, 30, 70, 64,  0, 29,\n       66, 62, 79, 65, 20, 92, 52, 88, 72, 48, 58, 43, 45,  6, 63, 18, 26,\n       38, 32, 19, 97, 27, 78, 21, 71, 16, 12,  2,  4, 28, 22, 33, 35,  3,\n       90, 74, 46, 56, 84,  1, 94, 23, 24, 86, 91, 14, 82, 49, 44, 42, 87,\n       95, 83, 17, 15, 81, 41,  9, 57, 54, 67, 89, 96, 31, 99, 59, 10, 34,\n       98, 85,  7, 39, 69, 77, 73, 68,  8, 11, 75, 80, 93, 40, 53])",
                "idx": "array([ 0,  5,  8, 13, 15, 23, 28, 31, 37, 42, 43, 46, 48, 52, 55, 60, 65,\n       66, 69, 71, 74, 78, 83, 86, 91, 94])",
                "inc": "array([1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0])",
                "mask": "array of shape (100,)",
                "out": "array([3, 3, 4, 2, 6, 5, 3, 6, 4, 1, 3, 2, 3, 3, 5, 3, 1, 2, 2, 2, 4, 5,\n       2, 3, 3, 3])",
                "res": "array([3, 3, 4, 2, 6, 5, 3, 6, 4, 1, 3, 2, 3, 3, 5, 3, 1, 2, 2, 2, 4, 5,\n       2, 3, 3, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    3\nc    4\nd    2\ne    6\nf    5\ng    3\nh    6\ni    4\nj    1\nk    3\nl    2\nm    3\nn    3\no    5\np    3\nq    1\nr    2\ns    2\nt    2\nu    4\nv    5\nw    2\nx    3\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbee0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbd90>",
                "self.obj": "0     0\n1     3\n2     2\n3     8\n4     4\n     ..\n95    5\n96    2\n97    2\n98    1\n99    9\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  8,  9, 10, 11, 12, 13, 14,\n       15, 16, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n       30, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 38, 39, 40, 41, 42, 43,\n       43, 44, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n       58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71, 72, 73,\n       74, 75, 76, 77, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87])",
                "_": "array([0, 3, 2, 8, 4, 9, 6, 5, 7, 1])",
                "val": "array([0, 3, 2, 8, 4, 3, 4, 9, 6, 4, 5, 0, 3, 2, 6, 2, 2, 7, 8, 1, 6, 6,\n       6, 6, 5, 8, 4, 4, 9, 3, 5, 8, 5, 3, 1, 3, 1, 2, 6, 9, 7, 8, 4, 0,\n       8, 2, 3, 7, 6, 5, 8, 0, 2, 7, 5, 2, 8, 6, 5, 1, 0, 3, 2, 0, 3, 4,\n       3, 1, 9, 9, 0, 5, 9, 8, 0, 0, 0, 6, 4, 2, 0, 2, 6, 4, 0, 2, 9, 4,\n       8, 3, 9, 9, 1, 9, 8, 5, 2, 2, 1, 9])",
                "codes": "array([3, 9, 2, 3, 2, 0, 1, 8, 0, 0, 7, 1, 2, 0, 1, 1, 4, 2, 1, 6, 2, 0,\n       9, 5, 6, 3, 2, 7, 0, 2, 4, 9, 7, 3, 0, 4, 6, 4, 7, 4, 2, 6, 2, 1,\n       2, 4, 6, 5, 3, 1, 1, 5, 0, 1, 3, 1, 3, 6, 0, 7, 5, 6, 5, 6, 7, 3,\n       4, 7, 4, 8, 4, 2, 2, 3, 6, 4, 7, 9, 2, 9, 5, 3, 1, 7, 9, 9, 5, 2,\n       5, 5, 6, 3, 6, 5, 8, 8, 5, 0, 0, 0])",
                "sorter": "array([25, 36, 13, 50, 37, 51,  5, 47, 76, 60, 30, 61, 55, 70, 64, 66, 65,\n       79, 29, 20, 62,  0, 92, 72, 48, 88, 52, 58, 43, 45,  6, 19, 32, 18,\n       63, 26, 38, 78, 71, 27, 97, 21, 16, 12,  2,  4, 22, 28,  3, 35, 33,\n       90, 74, 46, 56,  1, 94, 23, 84, 24, 91, 14, 86, 82, 49, 44, 42, 95,\n       87, 17, 83, 15, 81, 41, 57,  9, 54, 67, 96, 59, 99, 31, 89, 10, 34,\n       98,  7, 85, 39, 69, 77, 73,  8, 68, 40, 53, 93, 11, 75, 80])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  8,  9, 11, 12, 13, 14, 15, 16, 17, 18,\n       20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38,\n       39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 52, 54, 55, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n       78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96,\n       97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2,\n       2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2,\n       2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (88,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    1\n     2015-08-27    1\n     2015-08-28    1\n     2015-09-01    1\n                  ..\nz    2015-08-27    1\n     2015-08-28    1\n     2015-08-29    1\n     2015-08-30    1\n     2015-08-31    1\nName: julie, Length: 88, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb5e0>",
                "self.obj": "0     0.0\n1     3.0\n2     2.0\n3     8.0\n4     4.0\n     ... \n95    5.0\n96    2.0\n97    2.0\n98    1.0\n99    9.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,\n        2,  2,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,\n        6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  9, 10, 10, 10, 11,\n       11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 17,\n       17, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22,\n       22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 25])",
                "_": "array([0., 3., 2., 8., 4., 5., 6., 7., 1., 9.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  2,  3,  9,  9,  2,  2,  3,  3,  8, -1,  0,  1,  0,  0,  1,\n        2,  5, -1,  0, -1, -1,  0,  1,  2,  2,  6,  8,  3,  5,  6,  9, -1,\n        0,  4, -1,  0,  5,  6,  8, -1,  2,  4,  5,  6,  2,  1,  2,  4, -1,\n        6,  1,  3,  9, -1,  0,  3, -1,  3,  5,  6,  5,  6,  6,  9,  3,  4,\n        4,  5, -1,  7,  2,  2,  3, -1,  5,  6,  8,  1,  2,  3,  8,  9,  5,\n        8,  8, -1, -1,  6,  9, -1,  3,  9,  0,  0,  0,  7,  7,  9])",
                "sorter": "array([ 1, 35, 52, 18, 69, 86, 13, 37, 25, 50, 36, 47, 51,  5, 60, 76, 61,\n       55, 30, 64, 70, 65, 66,  0, 29, 62, 79, 20, 92, 88, 58, 48, 72, 45,\n       43,  6, 26, 63, 32, 38, 19, 27, 97, 78, 71, 21, 16, 12,  2,  4, 28,\n       22, 33,  3, 90, 46, 74, 56, 84, 94, 24, 23, 49, 14, 82, 91, 44, 42,\n       87, 95, 83, 17, 15, 81, 41,  9, 54, 57, 67, 89, 96, 31, 59, 99, 10,\n       34, 98,  7, 85, 77, 39,  8, 73, 68, 11, 75, 80, 40, 53, 93])",
                "idx": "array([ 6, 11, 14, 19, 21, 29, 33, 36, 41, 46, 47, 50, 52, 55, 58, 62, 66,\n       67, 70, 72, 75, 79, 84, 87, 91, 94])",
                "inc": "array([1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,\n       0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 3, 2, 4, 1, 5, 4, 2, 4, 4, 1, 3, 1, 3, 2, 3, 3, 1, 2, 1, 2, 3,\n       5, 2, 2, 2, 3])",
                "res": "array([3, 2, 4, 1, 5, 4, 2, 4, 4, 1, 3, 1, 3, 2, 3, 3, 1, 2, 1, 2, 3, 5,\n       2, 2, 2, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    2\nc    4\nd    1\ne    5\nf    4\ng    2\nh    4\ni    4\nj    1\nk    3\nl    1\nm    3\nn    2\no    3\np    3\nq    1\nr    2\ns    1\nt    2\nu    3\nv    5\nw    2\nx    2\ny    2\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6670>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6b80>",
                "self.obj": "0     0.0\n1     3.0\n2     2.0\n3     8.0\n4     4.0\n     ... \n95    5.0\n96    2.0\n97    2.0\n98    1.0\n99    9.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  8,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33, 33, 34, 35,\n       36, 36, 37, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80])",
                "_": "array([0., 3., 2., 8., 4., 5., 6., 7., 1., 9.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  2,  3,  3,  6,  7,  9,  9,  3,  8,  2,  3,  2,  0, -1,  1,\n        0,  0,  5,  1,  2,  0, -1, -1, -1,  2,  1,  6,  2,  0,  8,  9,  6,\n        3,  5,  0, -1,  4,  8,  5, -1,  0,  6,  4,  5, -1,  2,  6,  2,  1,\n        2,  4,  6, -1,  1,  9, -1,  0,  3,  3,  6, -1,  5,  9,  6,  6,  5,\n        3,  4,  5,  4,  7, -1,  2,  2,  3,  6, -1,  5,  8,  2,  8,  9,  3,\n        1,  5,  8,  8, -1, -1,  9,  3, -1,  9,  7,  9,  0,  0,  0])",
                "sorter": "array([ 1, 35, 52,  3, 18, 77, 40, 69, 86, 25, 36, 13, 50, 37, 51, 47,  5,\n       76, 60, 30, 61, 55, 70, 64, 66, 65, 79, 29, 20, 62,  0, 92, 72, 48,\n       88, 58, 43, 45,  6, 19, 32, 26, 63, 38, 78, 71, 27, 97, 21, 16, 12,\n        2,  4, 22, 28, 33, 90, 46, 74, 56, 94, 23, 84, 24, 91, 14, 82, 49,\n       44, 42, 95, 87, 17, 83, 15, 81, 41, 57,  9, 54, 67, 96, 59, 99, 31,\n       89, 10, 34, 98,  7, 85, 39, 73,  8, 68, 53, 93, 11, 75, 80])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27,\n       29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47,\n       49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86,\n       87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 2, 1, 2, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0, 2, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0, 2, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (81,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    1\n     2015-08-27    1\n     2015-08-28    1\n     2015-09-01    1\n                  ..\nz    2015-08-27    1\n     2015-08-28    1\n     2015-08-29    1\n     2015-08-30    1\n     2015-08-31    1\nName: julie, Length: 81, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbe80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb5e0>",
                "self.obj": "0     0.0\n1     3.0\n2     2.0\n3     8.0\n4     4.0\n     ... \n95    5.0\n96    2.0\n97    2.0\n98    1.0\n99    9.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,\n        2,  2,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,\n        6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  9, 10, 10, 10, 11,\n       11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 17,\n       17, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22,\n       22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 25])",
                "_": "array([0., 3., 2., 8., 4., 5., 6., 7., 1., 9.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  2,  3,  9,  9,  2,  2,  3,  3,  8, -1,  0,  1,  0,  0,  1,\n        2,  5, -1,  0, -1, -1,  0,  1,  2,  2,  6,  8,  3,  5,  6,  9, -1,\n        0,  4, -1,  0,  5,  6,  8, -1,  2,  4,  5,  6,  2,  1,  2,  4, -1,\n        6,  1,  3,  9, -1,  0,  3, -1,  3,  5,  6,  5,  6,  6,  9,  3,  4,\n        4,  5, -1,  7,  2,  2,  3, -1,  5,  6,  8,  1,  2,  3,  8,  9,  5,\n        8,  8, -1, -1,  6,  9, -1,  3,  9,  0,  0,  0,  7,  7,  9])",
                "sorter": "array([ 1, 35, 52, 18, 69, 86, 13, 37, 25, 50, 36, 47, 51,  5, 60, 76, 61,\n       55, 30, 64, 70, 65, 66,  0, 29, 62, 79, 20, 92, 88, 58, 48, 72, 45,\n       43,  6, 26, 63, 32, 38, 19, 27, 97, 78, 71, 21, 16, 12,  2,  4, 28,\n       22, 33,  3, 90, 46, 74, 56, 84, 94, 24, 23, 49, 14, 82, 91, 44, 42,\n       87, 95, 83, 17, 15, 81, 41,  9, 54, 57, 67, 89, 96, 31, 59, 99, 10,\n       34, 98,  7, 85, 77, 39,  8, 73, 68, 11, 75, 80, 40, 53, 93])",
                "idx": "array([ 6, 11, 14, 19, 21, 29, 33, 36, 41, 46, 47, 50, 52, 55, 58, 62, 66,\n       67, 70, 72, 75, 79, 84, 87, 91, 94])",
                "inc": "array([1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,\n       0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 3, 2, 4, 1, 5, 4, 2, 4, 4, 1, 3, 1, 3, 2, 3, 3, 1, 2, 1, 2, 3,\n       5, 2, 2, 2, 3])",
                "res": "array([3, 2, 4, 1, 5, 4, 2, 4, 4, 1, 3, 1, 3, 2, 3, 3, 1, 2, 1, 2, 3, 5,\n       2, 2, 2, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    2\nc    4\nd    1\ne    5\nf    4\ng    2\nh    4\ni    4\nj    1\nk    3\nl    1\nm    3\nn    2\no    3\np    3\nq    1\nr    2\ns    1\nt    2\nu    3\nv    5\nw    2\nx    2\ny    2\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbee0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6670>",
                "self.obj": "0     0.0\n1     3.0\n2     2.0\n3     8.0\n4     4.0\n     ... \n95    5.0\n96    2.0\n97    2.0\n98    1.0\n99    9.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  8,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33, 33, 34, 35,\n       36, 36, 37, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80])",
                "_": "array([0., 3., 2., 8., 4., 5., 6., 7., 1., 9.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  1,  2,  3,  3,  6,  7,  9,  9,  3,  8,  2,  3,  2,  0, -1,  1,\n        0,  0,  5,  1,  2,  0, -1, -1, -1,  2,  1,  6,  2,  0,  8,  9,  6,\n        3,  5,  0, -1,  4,  8,  5, -1,  0,  6,  4,  5, -1,  2,  6,  2,  1,\n        2,  4,  6, -1,  1,  9, -1,  0,  3,  3,  6, -1,  5,  9,  6,  6,  5,\n        3,  4,  5,  4,  7, -1,  2,  2,  3,  6, -1,  5,  8,  2,  8,  9,  3,\n        1,  5,  8,  8, -1, -1,  9,  3, -1,  9,  7,  9,  0,  0,  0])",
                "sorter": "array([ 1, 35, 52,  3, 18, 77, 40, 69, 86, 25, 36, 13, 50, 37, 51, 47,  5,\n       76, 60, 30, 61, 55, 70, 64, 66, 65, 79, 29, 20, 62,  0, 92, 72, 48,\n       88, 58, 43, 45,  6, 19, 32, 26, 63, 38, 78, 71, 27, 97, 21, 16, 12,\n        2,  4, 22, 28, 33, 90, 46, 74, 56, 94, 23, 84, 24, 91, 14, 82, 49,\n       44, 42, 95, 87, 17, 83, 15, 81, 41, 57,  9, 54, 67, 96, 59, 99, 31,\n       89, 10, 34, 98,  7, 85, 39, 73,  8, 68, 53, 93, 11, 75, 80])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27,\n       29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47,\n       49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86,\n       87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 2, 1, 2, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0, 2, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 2, 1, 0, 2, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (81,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    1\n     2015-08-27    1\n     2015-08-28    1\n     2015-09-01    1\n                  ..\nz    2015-08-27    1\n     2015-08-28    1\n     2015-08-29    1\n     2015-08-30    1\n     2015-08-31    1\nName: julie, Length: 81, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6820>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6b80>",
                "self.obj": "0      5\n1      4\n2      2\n3      5\n4      1\n      ..\n995    3\n996    9\n997    5\n998    9\n999    5\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5, 4, 2, 1, 9, 3, 0, 6, 8, 7])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  36,  76, 112, 145, 178, 219, 244, 283, 310, 340, 401, 449,\n       489, 526, 569, 600, 645, 689, 720, 759, 805, 837, 870, 919, 964])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10, 10, 10,  9, 10,  9, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10,\n        9,  9,  9, 10,  9, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10,  9, 10,  9, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10,\n        9,  9,  9, 10,  9, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne     9\nf    10\ng     9\nh    10\ni    10\nj    10\nk    10\nl    10\nm     9\nn    10\no    10\np    10\nq    10\nr     9\ns     9\nt     9\nu    10\nv     9\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6bb0>",
                "self.obj": "0      5\n1      4\n2      2\n3      5\n4      1\n      ..\n995    3\n996    9\n997    5\n998    9\n999    5\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5, 4, 2, 1, 9, 3, 0, 6, 8, 7])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (251,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (251,)",
                "res": "array of shape (251,)",
                "ri": "array of shape (251,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    5\n     2015-08-25    4\n     2015-08-27    7\n     2015-08-28    3\n                  ..\nz    2015-08-28    4\n     2015-08-29    3\n     2015-08-30    4\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f68e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f63d0>",
                "self.obj": "0      5.0\n1      4.0\n2      2.0\n3      5.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5., 4., 2., 1., 9., 0., 6., 3., 8., 7.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  91, 128, 163, 195, 224, 261, 283, 322, 348, 374, 432, 477,\n       516, 553, 594, 622, 664, 704, 735, 773, 815, 847, 873, 922, 965])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10, 10, 10,  9,  8, 10,  9, 10, 10,  9, 10, 10,  9,  9, 10,  9,\n       10,  9,  8,  9, 10,  9,  9, 10,  8, 10])",
                "res": "array([10, 10, 10,  9,  8, 10,  9, 10, 10,  9, 10, 10,  9,  9, 10,  9, 10,\n        9,  8,  9, 10,  9,  9, 10,  8, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd     9\ne     8\nf    10\ng     9\nh    10\ni    10\nj     9\nk    10\nl    10\nm     9\nn     9\no    10\np     9\nq    10\nr     9\ns     8\nt     9\nu    10\nv     9\nw     9\nx    10\ny     8\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f67f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6bb0>",
                "self.obj": "0      5.0\n1      4.0\n2      2.0\n3      5.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5., 4., 2., 1., 9., 0., 6., 3., 8., 7.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (249,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (250,)",
                "res": "array of shape (249,)",
                "ri": "array of shape (249,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    2\n     2015-08-25    3\n     2015-08-27    6\n     2015-08-28    3\n                  ..\nz    2015-08-28    3\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f63d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5c10>",
                "self.obj": "0      5.0\n1      4.0\n2      2.0\n3      5.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5., 4., 2., 1., 9., 0., 6., 3., 8., 7.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  91, 128, 163, 195, 224, 261, 283, 322, 348, 374, 432, 477,\n       516, 553, 594, 622, 664, 704, 735, 773, 815, 847, 873, 922, 965])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([10, 10, 10, 10,  9,  8, 10,  9, 10, 10,  9, 10, 10,  9,  9, 10,  9,\n       10,  9,  8,  9, 10,  9,  9, 10,  8, 10])",
                "res": "array([10, 10, 10,  9,  8, 10,  9, 10, 10,  9, 10, 10,  9,  9, 10,  9, 10,\n        9,  8,  9, 10,  9,  9, 10,  8, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd     9\ne     8\nf    10\ng     9\nh    10\ni    10\nj     9\nk    10\nl    10\nm     9\nn     9\no    10\np     9\nq    10\nr     9\ns     8\nt     9\nu    10\nv     9\nw     9\nx    10\ny     8\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5550>",
                "self.obj": "0      5.0\n1      4.0\n2      2.0\n3      5.0\n4      1.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([5., 4., 2., 1., 9., 0., 6., 3., 8., 7.])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (249,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (250,)",
                "res": "array of shape (249,)",
                "ri": "array of shape (249,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    2\n     2015-08-25    3\n     2015-08-27    6\n     2015-08-28    3\n                  ..\nz    2015-08-28    3\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    3\n     2015-09-01    2\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c53a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5100>",
                "self.obj": "0       7\n1       7\n2       1\n3       0\n4       3\n       ..\n9995    9\n9996    1\n9997    6\n9998    8\n9999    9\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([7, 1, 0, 3, 9, 5, 8, 6, 4, 2])",
                "val": "array([7, 7, 1, ..., 6, 8, 9])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 658,  864, 1121, ..., 9818, 9949, 9988])",
                "idx": "array([   0,  390,  766, 1141, 1516, 1925, 2321, 2716, 3105, 3494, 3897,\n       4286, 4649, 5054, 5429, 5805, 6182, 6577, 6961, 7343, 7733, 8127,\n       8504, 8900, 9281, 9660])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5a00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5eb0>",
                "self.obj": "0       7\n1       7\n2       1\n3       0\n4       3\n       ..\n9995    9\n9996    1\n9997    6\n9998    8\n9999    9\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([7, 1, 0, 3, 9, 5, 8, 6, 4, 2])",
                "val": "array([7, 7, 1, ..., 6, 8, 9])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([1121, 1812, 5629, ..., 6652, 9818, 9988])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5c40>",
                "self.obj": "0       7.0\n1       7.0\n2       1.0\n3       0.0\n4       3.0\n       ... \n9995    9.0\n9996    1.0\n9997    6.0\n9998    8.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([7., 1., 0., 3., 9., 8., 5., 6., 4., 2.])",
                "val": "array([7., 7., 1., ..., 6., 8., 9.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9818, 9949, 9988])",
                "idx": "array([ 589,  955, 1310, 1664, 2018, 2395, 2766, 3140, 3507, 3872, 4247,\n       4611, 4959, 5334, 5681, 6034, 6389, 6760, 7118, 7477, 7843, 8218,\n       8583, 8954, 9321, 9686])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5fd0>",
                "self.obj": "0       7.0\n1       7.0\n2       1.0\n3       0.0\n4       3.0\n       ... \n9995    9.0\n9996    1.0\n9997    6.0\n9998    8.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([7., 1., 0., 3., 9., 8., 5., 6., 4., 2.])",
                "val": "array([7., 7., 1., ..., 6., 8., 9.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 6652, 9818, 9988])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26     9\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29     8\n     2015-08-30     9\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5af0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5a90>",
                "self.obj": "0       7.0\n1       7.0\n2       1.0\n3       0.0\n4       3.0\n       ... \n9995    9.0\n9996    1.0\n9997    6.0\n9998    8.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([7., 1., 0., 3., 9., 8., 5., 6., 4., 2.])",
                "val": "array([7., 7., 1., ..., 6., 8., 9.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9818, 9949, 9988])",
                "idx": "array([ 589,  955, 1310, 1664, 2018, 2395, 2766, 3140, 3507, 3872, 4247,\n       4611, 4959, 5334, 5681, 6034, 6389, 6760, 7118, 7477, 7843, 8218,\n       8583, 8954, 9321, 9686])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5cd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5a90>",
                "self.obj": "0       7.0\n1       7.0\n2       1.0\n3       0.0\n4       3.0\n       ... \n9995    9.0\n9996    1.0\n9997    6.0\n9998    8.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([7., 1., 0., 3., 9., 8., 5., 6., 4., 2.])",
                "val": "array([7., 7., 1., ..., 6., 8., 9.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 6652, 9818, 9988])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26     9\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29     8\n     2015-08-30     9\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5e80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5130>",
                "self.obj": "0        2\n1        9\n2        3\n3        2\n4        2\n        ..\n99995    3\n99996    8\n99997    9\n99998    9\n99999    4\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([2, 9, 3, 8, 4, 6, 7, 1, 0, 5])",
                "val": "array([2, 9, 3, ..., 9, 9, 4])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   29,   283,   323, ..., 98886, 99426, 99807])",
                "idx": "array([    0,  3755,  7584, 11380, 15271, 19176, 22954, 26717, 30585,\n       34454, 38247, 42143, 46033, 49840, 53764, 57638, 61483, 65359,\n       69193, 73046, 76920, 80803, 84573, 88344, 92313, 96248])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5220>",
                "self.obj": "0        2\n1        9\n2        3\n3        2\n4        2\n        ..\n99995    3\n99996    8\n99997    9\n99998    9\n99999    4\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([2, 9, 3, 8, 4, 6, 7, 1, 0, 5])",
                "val": "array([2, 9, 3, ..., 9, 9, 4])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   29,  1226,  4965, ..., 81161, 93893, 96350])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c51c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5c40>",
                "self.obj": "0        2.0\n1        9.0\n2        3.0\n3        2.0\n4        2.0\n        ... \n99995    3.0\n99996    8.0\n99997    9.0\n99998    9.0\n99999    4.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([2., 9., 3., 8., 4., 6., 7., 1., 0., 5.])",
                "val": "array([2., 9., 3., ..., 9., 9., 4.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 98886, 99426, 99807])",
                "idx": "array([ 5883,  9426, 13019, 16565, 20258, 23919, 27452, 30998, 34621,\n       38296, 41861, 45514, 49185, 52761, 56468, 60118, 63737, 67374,\n       70998, 74610, 78263, 81919, 85460, 89029, 92785, 96481])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5b20>",
                "self.obj": "0        2.0\n1        9.0\n2        3.0\n3        2.0\n4        2.0\n        ... \n99995    3.0\n99996    8.0\n99997    9.0\n99998    9.0\n99999    4.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([2., 9., 3., 8., 4., 6., 7., 1., 0., 5.])",
                "val": "array([2., 9., 3., ..., 9., 9., 4.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 81161, 93893, 96350])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5c40>",
                "self.obj": "0        2.0\n1        9.0\n2        3.0\n3        2.0\n4        2.0\n        ... \n99995    3.0\n99996    8.0\n99997    9.0\n99998    9.0\n99999    4.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([2., 9., 3., 8., 4., 6., 7., 1., 0., 5.])",
                "val": "array([2., 9., 3., ..., 9., 9., 4.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 98886, 99426, 99807])",
                "idx": "array([ 5883,  9426, 13019, 16565, 20258, 23919, 27452, 30998, 34621,\n       38296, 41861, 45514, 49185, 52761, 56468, 60118, 63737, 67374,\n       70998, 74610, 78263, 81919, 85460, 89029, 92785, 96481])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5250>",
                "self.obj": "0        2.0\n1        9.0\n2        3.0\n3        2.0\n4        2.0\n        ... \n99995    3.0\n99996    8.0\n99997    9.0\n99998    9.0\n99999    4.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([2., 9., 3., 8., 4., 6., 7., 1., 0., 5.])",
                "val": "array([2., 9., 3., ..., 9., 9., 4.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 81161, 93893, 96350])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5b20>",
                "self.obj": "0     43\n1     40\n2     44\n3     22\n4     99\n      ..\n95    51\n96    88\n97    35\n98    56\n99    14\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,\n        3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        7,  7,  7,  8,  8,  9,  9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12,\n       13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16,\n       17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n       20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 23, 24, 24, 25, 25])",
                "_": "array([43, 40, 44, 22, 99, 36, 37, 57, 61,  4, 28,  5, 97, 62,  3, 86,  8,\n       63, 95, 87, 24, 48, 29, 78, 17, 30, 42, 67, 46, 19, 58, 26, 68, 92,\n       66, 45, 33, 75,  0, 10, 55, 50,  9,  2, 15, 71, 65, 60, 76, 96, 14,\n        7, 12, 79, 20, 81, 51, 88, 35, 56])",
                "val": "array([43, 40, 44, 22, 99, 36, 36, 37, 57, 40, 61,  4, 44, 28,  5, 97, 62,\n        3, 86,  8, 63, 40, 95, 87, 24, 48, 95, 29, 78, 28, 17, 30, 42, 67,\n       67, 46, 19, 58, 26, 68, 92, 66, 45, 33, 22, 17, 75,  0, 66, 66, 19,\n       10, 66, 99, 22, 55, 92,  5, 50,  9, 63,  2, 15,  4, 66, 71, 65, 57,\n       62, 46, 60, 76, 57, 96, 14, 29,  7, 28, 99, 96, 12, 50, 78, 48, 37,\n       79,  5, 12, 97, 67, 20, 63, 76, 81, 46, 51, 88, 35, 56, 14])",
                "codes": "array([ 0,  1,  6, 17,  3,  9, 11, 12, 20, 22, 29, 34, 47,  1,  4,  7,  8,\n       15, 18, 38,  5,  9, 50, 54, 17, 24, 24, 28, 39, 48, 17, 19, 30, 43,\n       11, 23, 56,  4, 44, 33, 55, 22, 27, 52, 34, 41,  4,  7, 10, 14, 58,\n        3, 13, 27, 32, 36, 37, 48, 49, 52, 53,  6, 34, 35, 42, 31, 34, 57,\n        2, 18, 28, 33, 50, 10, 45, 51,  7, 21, 23, 26, 41, 49,  3, 13, 16,\n       27, 29, 40,  1,  2,  5, 11, 21, 46, 34, 10, 28, 59, 12, 25])",
                "sorter": "array([ 0,  1,  7, 91, 54, 63, 86, 88, 24, 75, 36, 41, 70, 21, 53,  8, 10,\n       18, 22, 47,  5, 11, 99, 90, 20, 30, 45, 35, 51, 71, 60, 23, 37, 61,\n       57, 82, 95, 78, 62, 40, 93, 27, 34, 87, 64, 58,  4, 67, 77, 17, 97,\n       44, 16, 33, 39, 43, 46, 92, 79, 80, 85, 84, 48, 42, 59, 38, 52, 96,\n       12, 26, 94, 56, 74, 29, 65, 76, 72, 25, 28, 32, 81, 73,  3, 68, 19,\n       89, 50, 55,  9,  2,  6, 14, 83, 66, 49, 13, 69, 98, 15, 31])",
                "idx": "array([ 0,  4,  5, 13, 20, 24, 30, 34, 37, 39, 41, 44, 46, 51, 57, 61, 65,\n       68, 73, 76, 82, 88, 94, 95, 96, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([4, 1, 8, 7, 4, 5, 4, 3, 2, 2, 3, 2, 5, 6, 4, 4, 3, 5, 3, 6, 6, 6,\n       1, 1, 2, 2])",
                "res": "array([4, 1, 8, 7, 4, 5, 4, 3, 2, 2, 3, 2, 5, 6, 4, 4, 3, 5, 3, 6, 6, 6,\n       1, 1, 2, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    4\nb    1\nc    8\nd    7\ne    4\nf    5\ng    4\nh    3\ni    2\nj    2\nk    3\nl    2\nm    5\nn    6\no    4\np    4\nq    3\nr    5\ns    3\nt    6\nu    6\nv    6\nw    1\nx    1\ny    2\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5130>",
                "self.obj": "0     43\n1     40\n2     44\n3     22\n4     99\n      ..\n95    51\n96    88\n97    35\n98    56\n99    14\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  6,  6,  7,  8,  8,  9, 10, 11, 12, 13,\n       14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 26, 27,\n       28, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 40, 41,\n       42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 55, 56,\n       57, 58, 59, 60, 60, 61, 62, 63, 64, 64, 65, 65, 66, 67, 68, 69, 70,\n       71, 72, 72, 73, 74, 75, 75, 76, 76, 77, 78, 79, 80, 81, 82])",
                "_": "array([43, 40, 44, 22, 99, 36, 37, 57, 61,  4, 28,  5, 97, 62,  3, 86,  8,\n       63, 95, 87, 24, 48, 29, 78, 17, 30, 42, 67, 46, 19, 58, 26, 68, 92,\n       66, 45, 33, 75,  0, 10, 55, 50,  9,  2, 15, 71, 65, 60, 76, 96, 14,\n        7, 12, 79, 20, 81, 51, 88, 35, 56])",
                "val": "array([43, 40, 44, 22, 99, 36, 36, 37, 57, 40, 61,  4, 44, 28,  5, 97, 62,\n        3, 86,  8, 63, 40, 95, 87, 24, 48, 95, 29, 78, 28, 17, 30, 42, 67,\n       67, 46, 19, 58, 26, 68, 92, 66, 45, 33, 22, 17, 75,  0, 66, 66, 19,\n       10, 66, 99, 22, 55, 92,  5, 50,  9, 63,  2, 15,  4, 66, 71, 65, 57,\n       62, 46, 60, 76, 57, 96, 14, 29,  7, 28, 99, 96, 12, 50, 78, 48, 37,\n       79,  5, 12, 97, 67, 20, 63, 76, 81, 46, 51, 88, 35, 56, 14])",
                "codes": "array([ 6,  0, 17,  1,  3, 11, 12, 22, 47, 20,  9, 29, 34,  7, 38,  8,  4,\n       15, 18,  1,  5, 50,  9, 54, 48, 28, 17, 24, 24, 39, 17, 30, 43, 19,\n       11, 56, 23,  4, 44, 33, 55, 27, 22, 52, 41, 34,  4,  7, 10, 14, 58,\n       13, 37, 32,  3, 36, 27, 53, 52, 49, 48, 34, 42, 35,  6, 34, 57, 31,\n       33,  2, 50, 18, 28, 45, 10, 51,  7, 26, 41, 49, 23, 21, 13,  3, 40,\n       29, 16, 27, 46,  2,  1, 11,  5, 21, 34, 10, 59, 28, 12, 25])",
                "sorter": "array([ 7,  0, 91,  1, 54, 86, 88, 75, 70, 24, 63, 36, 41,  8, 47, 10, 53,\n       18, 22, 21,  5, 99, 11, 90, 71, 35, 20, 45, 30, 51, 60, 37, 61, 23,\n       57, 95, 82, 78, 62, 40, 93, 34, 27, 87, 58, 64,  4, 67, 77, 17, 97,\n       16, 46, 39, 44, 43, 33, 85, 80, 79, 92, 48, 59, 42, 84, 52, 96, 38,\n       56, 12, 74, 26, 94, 65, 29, 76, 72, 32, 81, 73, 28, 25, 68,  3, 55,\n       50, 19, 89, 66,  2,  9, 14,  6, 83, 49, 13, 98, 69, 15, 31])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  9, 10, 12, 13, 14, 15, 16, 17, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36, 37, 38, 39, 40,\n       41, 42, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 80, 81,\n       82, 83, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (83,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-26    1\n     2015-08-30    1\n     2015-08-31    1\n     2015-09-01    1\nb    2015-08-28    1\n                  ..\nx    2015-08-24    1\ny    2015-08-25    1\n     2015-09-01    1\nz    2015-08-25    1\n     2015-08-31    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c59d0>",
                "self.obj": "0     43.0\n1     40.0\n2     44.0\n3     22.0\n4     99.0\n      ... \n95    51.0\n96    88.0\n97    35.0\n98    56.0\n99    14.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  2,  2,  2,  2,  2,  2,\n        3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  7,  7,  7,  8,  8,  9,  9, 10, 10, 10, 11, 11, 12, 12, 12,\n       12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16,\n       16, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20,\n       20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 23, 24, 25, 25])",
                "_": "array([43., 40., 44., 22., 99., 36., 61.,  4., 28.,  5., 97., 62.,  3.,\n       86.,  8., 63., 95., 87., 24., 48., 17., 30., 42., 67., 46., 19.,\n       58., 26., 68., 92., 66., 45., 33., 10., 55., 50.,  9.,  2., 15.,\n       57., 60., 76., 96., 14., 29.,  7., 12., 78., 20., 81., 51., 88.,\n       35., 56.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  9, 13, 24, 24, 30, -1,  0, 15,  3,  7, 10, 18, 25, 30, 40, 44,\n       -1, -1,  1,  4,  6, 16,  5,  7, 43, 48, -1, 15, 20, 33, 41, 15, 17,\n       26, 37,  9, 47, 50,  4, 38, 29, 49, -1, 23, 46, -1, 35,  4,  8, 12,\n       39, 52, -1,  3, 11, 23, 28, 32, -1, 41, 42, 46, -1, 30, 31, 36, 27,\n       51, -1,  2, 24, 29, 43, -1,  8, 45, -1, 19, 22, 35, 39, 42,  3, 11,\n       14, 23, 25, 34, -1, -1, -1,  2,  5,  9, 30,  8, 53, 10, 21])",
                "sorter": "array([ 1, 86, 18, 35, 69, 52,  7,  0, 91, 54, 63, 88, 24, 36, 41, 70, 75,\n        8, 47, 21, 53, 10, 22,  5, 11, 99, 90, 45, 20, 30, 51, 71, 60, 23,\n       37, 61, 57, 82, 95, 78, 62, 40, 93, 27, 34, 87, 64, 58,  4, 77, 17,\n       67, 97, 46, 44, 16, 33, 39, 43, 85, 92, 79, 80, 84, 48, 42, 59, 38,\n       96, 26, 12, 94, 56, 74, 65, 29, 76, 28, 25, 32, 81, 72, 73,  3, 68,\n       19, 89, 50, 55,  9, 66, 83,  2,  6, 14, 49, 13, 98, 15, 31])",
                "idx": "array([ 6,  9, 10, 17, 23, 27, 32, 36, 39, 41, 43, 46, 48, 53, 59, 63, 67,\n       69, 74, 77, 83, 89, 95, 96, 97, 98])",
                "inc": "array([1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 2, 1, 7, 4, 4, 4, 4, 3, 2, 2, 2, 1, 5, 5, 3, 3, 2, 4, 2, 5, 6,\n       3, 1, 1, 1, 2])",
                "res": "array([2, 1, 7, 4, 4, 4, 4, 3, 2, 2, 2, 1, 5, 5, 3, 3, 2, 4, 2, 5, 6, 3,\n       1, 1, 1, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    1\nc    7\nd    4\ne    4\nf    4\ng    4\nh    3\ni    2\nj    2\nk    2\nl    1\nm    5\nn    5\no    3\np    3\nq    2\nr    4\ns    2\nt    5\nu    6\nv    3\nw    1\nx    1\ny    1\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5130>",
                "self.obj": "0     43.0\n1     40.0\n2     44.0\n3     22.0\n4     99.0\n      ... \n95    51.0\n96    88.0\n97    35.0\n98    56.0\n99    14.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  4,  4,  5,\n        6,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n       22, 23, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 33, 34,\n       35, 36, 37, 38, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 60, 61, 61, 62, 63, 64,\n       65, 66, 67, 67, 68, 69, 70, 70, 71, 71, 72, 73, 74, 75, 76])",
                "_": "array([43., 40., 44., 22., 99., 36., 61.,  4., 28.,  5., 97., 62.,  3.,\n       86.,  8., 63., 95., 87., 24., 48., 17., 30., 42., 67., 46., 19.,\n       58., 26., 68., 92., 66., 45., 33., 10., 55., 50.,  9.,  2., 15.,\n       57., 60., 76., 96., 14., 29.,  7., 12., 78., 20., 81., 51., 88.,\n       35., 56.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3,  8,  9, 13, 24, 24, 29, 30, -1,  0, 15,  3, 10, 40, 44, 18,\n        7, 25, 30, -1, -1,  6,  4, 16,  1,  5, 43,  7, 48, 41, 15, -1, 20,\n       33, 15, 26, 37, 17,  9, 50, 47,  4, 38, 49, 23, -1, 46, 35, -1,  4,\n       39, 12, 52, -1, 11, 28,  3, 32, 23, -1, 46, 42, 41, 30, 36, 31, -1,\n       51, 27, 29,  2, 43, -1, 24, -1,  8, 45, 22, 39, 35, 42, -1, 19, 11,\n       34, 25, 14, 23, -1,  2, -1,  9, -1,  5, 30,  8, 53, 10, 21])",
                "sorter": "array([ 1,  3, 77, 86, 18, 35, 69, 40, 52,  7,  0, 91, 54, 88, 70, 75, 24,\n       63, 36, 41,  8, 47, 10, 53, 22, 21,  5, 99, 11, 90, 71, 20, 45, 30,\n       51, 60, 37, 61, 23, 57, 95, 82, 78, 62, 93, 34, 27, 87, 58, 64,  4,\n       67, 17, 97, 46, 16, 39, 44, 43, 33, 85, 80, 79, 92, 48, 59, 42, 84,\n       96, 38, 56, 12, 74, 26, 94, 65, 29, 76, 32, 72, 81, 73, 28, 25, 68,\n       55, 50, 19, 89, 66,  2,  9, 14, 83,  6, 49, 13, 98, 15, 31])",
                "idx": "array([ 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\n       29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49,\n       50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87,\n       89, 90, 91, 93, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([8, 0, 1, 1, 1, 3, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 0, 1, 1,\n       1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([0, 1, 1, 1, 3, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 0, 1, 1, 1,\n       1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (77,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-26    0\n     2015-08-30    1\n     2015-08-31    1\nb    2015-08-28    1\nc    2015-08-25    3\n                  ..\nw    2015-09-01    1\nx    2015-08-24    1\ny    2015-08-25    1\nz    2015-08-25    1\n     2015-08-31    1\nName: julie, Length: 77, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e30cd60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e30cee0>",
                "self.obj": "0     43.0\n1     40.0\n2     44.0\n3     22.0\n4     99.0\n      ... \n95    51.0\n96    88.0\n97    35.0\n98    56.0\n99    14.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  2,  2,  2,  2,  2,  2,\n        3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  7,  7,  7,  8,  8,  9,  9, 10, 10, 10, 11, 11, 12, 12, 12,\n       12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16,\n       16, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20,\n       20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 23, 24, 25, 25])",
                "_": "array([43., 40., 44., 22., 99., 36., 61.,  4., 28.,  5., 97., 62.,  3.,\n       86.,  8., 63., 95., 87., 24., 48., 17., 30., 42., 67., 46., 19.,\n       58., 26., 68., 92., 66., 45., 33., 10., 55., 50.,  9.,  2., 15.,\n       57., 60., 76., 96., 14., 29.,  7., 12., 78., 20., 81., 51., 88.,\n       35., 56.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  9, 13, 24, 24, 30, -1,  0, 15,  3,  7, 10, 18, 25, 30, 40, 44,\n       -1, -1,  1,  4,  6, 16,  5,  7, 43, 48, -1, 15, 20, 33, 41, 15, 17,\n       26, 37,  9, 47, 50,  4, 38, 29, 49, -1, 23, 46, -1, 35,  4,  8, 12,\n       39, 52, -1,  3, 11, 23, 28, 32, -1, 41, 42, 46, -1, 30, 31, 36, 27,\n       51, -1,  2, 24, 29, 43, -1,  8, 45, -1, 19, 22, 35, 39, 42,  3, 11,\n       14, 23, 25, 34, -1, -1, -1,  2,  5,  9, 30,  8, 53, 10, 21])",
                "sorter": "array([ 1, 86, 18, 35, 69, 52,  7,  0, 91, 54, 63, 88, 24, 36, 41, 70, 75,\n        8, 47, 21, 53, 10, 22,  5, 11, 99, 90, 45, 20, 30, 51, 71, 60, 23,\n       37, 61, 57, 82, 95, 78, 62, 40, 93, 27, 34, 87, 64, 58,  4, 77, 17,\n       67, 97, 46, 44, 16, 33, 39, 43, 85, 92, 79, 80, 84, 48, 42, 59, 38,\n       96, 26, 12, 94, 56, 74, 65, 29, 76, 28, 25, 32, 81, 72, 73,  3, 68,\n       19, 89, 50, 55,  9, 66, 83,  2,  6, 14, 49, 13, 98, 15, 31])",
                "idx": "array([ 6,  9, 10, 17, 23, 27, 32, 36, 39, 41, 43, 46, 48, 53, 59, 63, 67,\n       69, 74, 77, 83, 89, 95, 96, 97, 98])",
                "inc": "array([1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 2, 1, 7, 4, 4, 4, 4, 3, 2, 2, 2, 1, 5, 5, 3, 3, 2, 4, 2, 5, 6,\n       3, 1, 1, 1, 2])",
                "res": "array([2, 1, 7, 4, 4, 4, 4, 3, 2, 2, 2, 1, 5, 5, 3, 3, 2, 4, 2, 5, 6, 3,\n       1, 1, 1, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    1\nc    7\nd    4\ne    4\nf    4\ng    4\nh    3\ni    2\nj    2\nk    2\nl    1\nm    5\nn    5\no    3\np    3\nq    2\nr    4\ns    2\nt    5\nu    6\nv    3\nw    1\nx    1\ny    1\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e30c970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5bb0>",
                "self.obj": "0     43.0\n1     40.0\n2     44.0\n3     22.0\n4     99.0\n      ... \n95    51.0\n96    88.0\n97    35.0\n98    56.0\n99    14.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  4,  4,  5,\n        6,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n       22, 23, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 33, 34,\n       35, 36, 37, 38, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 60, 61, 61, 62, 63, 64,\n       65, 66, 67, 67, 68, 69, 70, 70, 71, 71, 72, 73, 74, 75, 76])",
                "_": "array([43., 40., 44., 22., 99., 36., 61.,  4., 28.,  5., 97., 62.,  3.,\n       86.,  8., 63., 95., 87., 24., 48., 17., 30., 42., 67., 46., 19.,\n       58., 26., 68., 92., 66., 45., 33., 10., 55., 50.,  9.,  2., 15.,\n       57., 60., 76., 96., 14., 29.,  7., 12., 78., 20., 81., 51., 88.,\n       35., 56.])",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3,  8,  9, 13, 24, 24, 29, 30, -1,  0, 15,  3, 10, 40, 44, 18,\n        7, 25, 30, -1, -1,  6,  4, 16,  1,  5, 43,  7, 48, 41, 15, -1, 20,\n       33, 15, 26, 37, 17,  9, 50, 47,  4, 38, 49, 23, -1, 46, 35, -1,  4,\n       39, 12, 52, -1, 11, 28,  3, 32, 23, -1, 46, 42, 41, 30, 36, 31, -1,\n       51, 27, 29,  2, 43, -1, 24, -1,  8, 45, 22, 39, 35, 42, -1, 19, 11,\n       34, 25, 14, 23, -1,  2, -1,  9, -1,  5, 30,  8, 53, 10, 21])",
                "sorter": "array([ 1,  3, 77, 86, 18, 35, 69, 40, 52,  7,  0, 91, 54, 88, 70, 75, 24,\n       63, 36, 41,  8, 47, 10, 53, 22, 21,  5, 99, 11, 90, 71, 20, 45, 30,\n       51, 60, 37, 61, 23, 57, 95, 82, 78, 62, 93, 34, 27, 87, 58, 64,  4,\n       67, 17, 97, 46, 16, 39, 44, 43, 33, 85, 80, 79, 92, 48, 59, 42, 84,\n       96, 38, 56, 12, 74, 26, 94, 65, 29, 76, 32, 72, 81, 73, 28, 25, 68,\n       55, 50, 19, 89, 66,  2,  9, 14, 83,  6, 49, 13, 98, 15, 31])",
                "idx": "array([ 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\n       29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49,\n       50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87,\n       89, 90, 91, 93, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([8, 0, 1, 1, 1, 3, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 0, 1, 1,\n       1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([0, 1, 1, 1, 3, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 0, 1, 1, 1,\n       1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape (77,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-26    0\n     2015-08-30    1\n     2015-08-31    1\nb    2015-08-28    1\nc    2015-08-25    3\n                  ..\nw    2015-09-01    1\nx    2015-08-24    1\ny    2015-08-25    1\nz    2015-08-25    1\n     2015-08-31    1\nName: julie, Length: 77, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c5610>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5220>",
                "self.obj": "0      60\n1      84\n2      21\n3      93\n4      85\n       ..\n995    56\n996    70\n997    30\n998     7\n999    86\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([60, 84, 21, 93, 85, 41, 36, 55, 76, 90, 33, 10, 24, 30, 12, 67, 13,\n        7, 20, 65, 69, 42,  1, 28,  3, 81, 22,  5, 15, 73, 44, 98, 59, 29,\n       63, 26, 49, 77, 92,  6, 37, 58, 19, 32, 31, 95, 99, 64, 51, 91, 97,\n       74, 61, 53, 75, 54, 23, 50, 70, 46, 56, 14, 16, 80,  4, 25, 62, 45,\n       78, 86, 47, 52, 11,  2, 96, 40, 72, 88, 82,  0, 43,  8, 17, 35, 18,\n       71, 39, 27, 34, 38, 57, 87, 48, 83, 66, 94, 79, 89,  9, 68])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  50,  91, 120, 164, 198, 242, 283, 331, 361, 397, 434, 465,\n       502, 546, 579, 615, 653, 690, 718, 760, 800, 835, 879, 919, 959])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([37, 36, 24, 36, 27, 37, 32, 39, 27, 30, 31, 25, 29, 36, 32, 29, 33,\n       30, 24, 35, 33, 30, 37, 34, 35, 33])",
                "res": "array([37, 36, 24, 36, 27, 37, 32, 39, 27, 30, 31, 25, 29, 36, 32, 29, 33,\n       30, 24, 35, 33, 30, 37, 34, 35, 33])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    37\nb    36\nc    24\nd    36\ne    27\nf    37\ng    32\nh    39\ni    27\nj    30\nk    31\nl    25\nm    29\nn    36\no    32\np    29\nq    33\nr    30\ns    24\nt    35\nu    33\nv    30\nw    37\nx    34\ny    35\nz    33\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262c55e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262c5580>",
                "self.obj": "0      60\n1      84\n2      21\n3      93\n4      85\n       ..\n995    56\n996    70\n997    30\n998     7\n999    86\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array([60, 84, 21, 93, 85, 41, 36, 55, 76, 90, 33, 10, 24, 30, 12, 67, 13,\n        7, 20, 65, 69, 42,  1, 28,  3, 81, 22,  5, 15, 73, 44, 98, 59, 29,\n       63, 26, 49, 77, 92,  6, 37, 58, 19, 32, 31, 95, 99, 64, 51, 91, 97,\n       74, 61, 53, 75, 54, 23, 50, 70, 46, 56, 14, 16, 80,  4, 25, 62, 45,\n       78, 86, 47, 52, 11,  2, 96, 40, 72, 88, 82,  0, 43,  8, 17, 35, 18,\n       71, 39, 27, 34, 38, 57, 87, 48, 83, 66, 94, 79, 89,  9, 68])",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (254,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (254,)",
                "ri": "array of shape (254,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    7\n     2015-08-24    3\n     2015-08-25    6\n     2015-08-26    4\n     2015-08-27    1\n                  ..\nz    2015-08-28    5\n     2015-08-29    5\n     2015-08-30    4\n     2015-08-31    4\n     2015-09-01    5\nName: julie, Length: 254, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e30c400>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e30c2b0>",
                "self.obj": "0      60.0\n1      84.0\n2      21.0\n3      93.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     7.0\n999    86.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59, 106, 147, 173, 213, 246, 287, 327, 369, 399, 434, 469, 498,\n       532, 573, 604, 637, 674, 708, 735, 775, 813, 848, 889, 924, 963])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([41, 33, 32, 18, 29, 25, 32, 27, 31, 22, 24, 23, 18, 20, 29, 28, 21,\n       28, 26, 17, 29, 30, 25, 28, 23, 32, 28])",
                "res": "array([33, 32, 18, 29, 25, 32, 27, 31, 22, 24, 23, 18, 20, 29, 28, 21, 28,\n       26, 17, 29, 30, 25, 28, 23, 32, 28])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    33\nb    32\nc    18\nd    29\ne    25\nf    32\ng    27\nh    31\ni    22\nj    24\nk    23\nl    18\nm    20\nn    29\no    28\np    21\nq    28\nr    26\ns    17\nt    29\nu    30\nv    25\nw    28\nx    23\ny    32\nz    28\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e30cca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e30c9d0>",
                "self.obj": "0      60.0\n1      84.0\n2      21.0\n3      93.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     7.0\n999    86.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (252,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (252,)",
                "ri": "array of shape (252,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    5\n     2015-08-24    3\n     2015-08-25    4\n     2015-08-26    3\n     2015-08-27    1\n                  ..\nz    2015-08-28    5\n     2015-08-29    3\n     2015-08-30    4\n     2015-08-31    3\n     2015-09-01    4\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e30c8e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e30c340>",
                "self.obj": "0      60.0\n1      84.0\n2      21.0\n3      93.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     7.0\n999    86.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59, 106, 147, 173, 213, 246, 287, 327, 369, 399, 434, 469, 498,\n       532, 573, 604, 637, 674, 708, 735, 775, 813, 848, 889, 924, 963])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([41, 33, 32, 18, 29, 25, 32, 27, 31, 22, 24, 23, 18, 20, 29, 28, 21,\n       28, 26, 17, 29, 30, 25, 28, 23, 32, 28])",
                "res": "array([33, 32, 18, 29, 25, 32, 27, 31, 22, 24, 23, 18, 20, 29, 28, 21, 28,\n       26, 17, 29, 30, 25, 28, 23, 32, 28])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    33\nb    32\nc    18\nd    29\ne    25\nf    32\ng    27\nh    31\ni    22\nj    24\nk    23\nl    18\nm    20\nn    29\no    28\np    21\nq    28\nr    26\ns    17\nt    29\nu    30\nv    25\nw    28\nx    23\ny    32\nz    28\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a45b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2efa00>",
                "self.obj": "0      60.0\n1      84.0\n2      21.0\n3      93.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     7.0\n999    86.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (100,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (252,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (253,)",
                "res": "array of shape (252,)",
                "ri": "array of shape (252,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    5\n     2015-08-24    3\n     2015-08-25    4\n     2015-08-26    3\n     2015-08-27    1\n                  ..\nz    2015-08-28    5\n     2015-08-29    3\n     2015-08-30    4\n     2015-08-31    3\n     2015-09-01    4\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ef760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2efd00>",
                "self.obj": "0       76\n1       77\n2       68\n3       98\n4       97\n        ..\n9995    71\n9996    45\n9997    82\n9998    62\n9999    65\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([76, 77, 68, 98, 97, 48, 45, 72, 73, 95, 39, 55, 52, 74, 90, 13, 12,\n        0, 33, 86, 87, 70, 82, 94, 84, 41, 26, 29, 21, 14, 44, 93, 80, 17,\n       53, 54, 32, 49, 61, 43, 16, 69, 10, 40,  3, 56, 89, 36, 42, 23, 58,\n       15,  9, 78, 66, 19,  7, 92, 65, 28, 79, 85,  8, 34, 25,  1, 27,  5,\n       64, 31, 30,  4, 38, 57, 91, 47, 83, 62, 60, 88, 59, 50, 75, 37, 35,\n       24,  6, 22,  2, 18, 11, 46, 81, 71, 99, 67, 51, 63, 96, 20])",
                "val": "array([76, 77, 68, ..., 82, 62, 65])",
                "codes": "array([ 0,  0,  0, ..., 98, 99, 99])",
                "sorter": "array([4629, 4810, 6281, ..., 4075, 5016, 7186])",
                "idx": "array([   0,  388,  761, 1127, 1532, 1900, 2271, 2660, 3002, 3351, 3710,\n       4113, 4518, 4893, 5274, 5654, 6053, 6428, 6813, 7205, 7596, 7988,\n       8360, 8766, 9170, 9567])",
                "inc": "array([1, 0, 0, ..., 1, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 98,  96,  99,  99, 100,  99,  99,  95,  96,  94,  99,  99,  98,\n        97, 100,  97,  97,  98,  96,  99,  99,  99,  98,  97,  97,  97])",
                "res": "array([ 98,  96,  99,  99, 100,  99,  99,  95,  96,  94,  99,  99,  98,\n        97, 100,  97,  97,  98,  96,  99,  99,  99,  98,  97,  97,  97])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     98\nb     96\nc     99\nd     99\ne    100\nf     99\ng     99\nh     95\ni     96\nj     94\nk     99\nl     99\nm     98\nn     97\no    100\np     97\nq     97\nr     98\ns     96\nt     99\nu     99\nv     99\nw     98\nx     97\ny     97\nz     97\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2efca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2efd00>",
                "self.obj": "0       76\n1       77\n2       68\n3       98\n4       97\n        ..\n9995    71\n9996    45\n9997    82\n9998    62\n9999    65\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([76, 77, 68, 98, 97, 48, 45, 72, 73, 95, 39, 55, 52, 74, 90, 13, 12,\n        0, 33, 86, 87, 70, 82, 94, 84, 41, 26, 29, 21, 14, 44, 93, 80, 17,\n       53, 54, 32, 49, 61, 43, 16, 69, 10, 40,  3, 56, 89, 36, 42, 23, 58,\n       15,  9, 78, 66, 19,  7, 92, 65, 28, 79, 85,  8, 34, 25,  1, 27,  5,\n       64, 31, 30,  4, 38, 57, 91, 47, 83, 62, 60, 88, 59, 50, 75, 37, 35,\n       24,  6, 22,  2, 18, 11, 46, 81, 71, 99, 67, 51, 63, 96, 20])",
                "val": "array([76, 77, 68, ..., 82, 62, 65])",
                "codes": "array([ 0,  3,  8, ..., 94, 98, 99])",
                "sorter": "array([4810, 3458, 1154, ..., 6985, 4075, 7186])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    31\n     2015-08-24    34\n     2015-08-25    25\n     2015-08-26    29\n     2015-08-27    35\n                   ..\nz    2015-08-28    34\n     2015-08-29    23\n     2015-08-30    30\n     2015-08-31    33\n     2015-09-01    47\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ef970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef430>",
                "self.obj": "0       76.0\n1       77.0\n2       68.0\n3       98.0\n4       97.0\n        ... \n9995    71.0\n9996    45.0\n9997    82.0\n9998    62.0\n9999    65.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([76., 77., 68., ..., 82., 62., 65.])",
                "codes": "array([-1, -1, -1, ..., 98, 98, 99])",
                "sorter": "array([ 103,  256,  273, ..., 7110, 7422, 7186])",
                "idx": "array([ 589,  952, 1298, 1645, 2029, 2387, 2732, 3096, 3420, 3749, 4087,\n       4464, 4842, 5199, 5552, 5913, 6287, 6633, 6992, 7364, 7742, 8113,\n       8463, 8844, 9223, 9592])",
                "inc": "array([0, 0, 0, ..., 0, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([99, 91, 94, 96, 93, 98, 93, 99, 93, 95, 92, 96, 96, 97, 94, 98, 95,\n       94, 98, 91, 97, 96, 94, 97, 94, 95, 96])",
                "res": "array([91, 94, 96, 93, 98, 93, 99, 93, 95, 92, 96, 96, 97, 94, 98, 95, 94,\n       98, 91, 97, 96, 94, 97, 94, 95, 96])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    91\nb    94\nc    96\nd    93\ne    98\nf    93\ng    99\nh    93\ni    95\nj    92\nk    96\nl    96\nm    97\nn    94\no    98\np    95\nq    94\nr    98\ns    91\nt    97\nu    96\nv    94\nw    97\nx    94\ny    95\nz    96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2efb20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2a44f0>",
                "self.obj": "0       76.0\n1       77.0\n2       68.0\n3       98.0\n4       97.0\n        ... \n9995    71.0\n9996    45.0\n9997    82.0\n9998    62.0\n9999    65.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([76., 77., 68., ..., 82., 62., 65.])",
                "codes": "array([-1, -1, -1, ..., 92, 94, 99])",
                "sorter": "array([ 103,  256,  273, ..., 6985, 1866, 7186])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    28\n     2015-08-24    29\n     2015-08-25    22\n     2015-08-26    24\n     2015-08-27    25\n                   ..\nz    2015-08-28    29\n     2015-08-29    20\n     2015-08-30    21\n     2015-08-31    22\n     2015-09-01    37\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4f70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef370>",
                "self.obj": "0       76.0\n1       77.0\n2       68.0\n3       98.0\n4       97.0\n        ... \n9995    71.0\n9996    45.0\n9997    82.0\n9998    62.0\n9999    65.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([76., 77., 68., ..., 82., 62., 65.])",
                "codes": "array([-1, -1, -1, ..., 98, 98, 99])",
                "sorter": "array([ 103,  256,  273, ..., 7110, 7422, 7186])",
                "idx": "array([ 589,  952, 1298, 1645, 2029, 2387, 2732, 3096, 3420, 3749, 4087,\n       4464, 4842, 5199, 5552, 5913, 6287, 6633, 6992, 7364, 7742, 8113,\n       8463, 8844, 9223, 9592])",
                "inc": "array([0, 0, 0, ..., 0, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([99, 91, 94, 96, 93, 98, 93, 99, 93, 95, 92, 96, 96, 97, 94, 98, 95,\n       94, 98, 91, 97, 96, 94, 97, 94, 95, 96])",
                "res": "array([91, 94, 96, 93, 98, 93, 99, 93, 95, 92, 96, 96, 97, 94, 98, 95, 94,\n       98, 91, 97, 96, 94, 97, 94, 95, 96])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    91\nb    94\nc    96\nd    93\ne    98\nf    93\ng    99\nh    93\ni    95\nj    92\nk    96\nl    96\nm    97\nn    94\no    98\np    95\nq    94\nr    98\ns    91\nt    97\nu    96\nv    94\nw    97\nx    94\ny    95\nz    96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2a4b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef370>",
                "self.obj": "0       76.0\n1       77.0\n2       68.0\n3       98.0\n4       97.0\n        ... \n9995    71.0\n9996    45.0\n9997    82.0\n9998    62.0\n9999    65.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([76., 77., 68., ..., 82., 62., 65.])",
                "codes": "array([-1, -1, -1, ..., 92, 94, 99])",
                "sorter": "array([ 103,  256,  273, ..., 6985, 1866, 7186])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    28\n     2015-08-24    29\n     2015-08-25    22\n     2015-08-26    24\n     2015-08-27    25\n                   ..\nz    2015-08-28    29\n     2015-08-29    20\n     2015-08-30    21\n     2015-08-31    22\n     2015-09-01    37\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2efb50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2eff10>",
                "self.obj": "0        65\n1        76\n2        99\n3        48\n4        73\n         ..\n99995    99\n99996    17\n99997    43\n99998    76\n99999    66\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([65, 76, 99, 48, 73,  1, 75,  7, 59,  9, 96, 68, 63, 42, 55, 11, 26,\n       21, 97, 78, 32, 13, 30, 70, 23, 83, 52, 71, 27, 34, 38, 10, 14, 36,\n       19, 69, 29,  6, 39, 50, 51, 20, 85, 90, 35, 12, 56, 93, 44, 24, 88,\n       37, 18, 22, 47, 41, 81, 16, 31, 60, 53, 92, 82, 57, 86, 58, 62, 98,\n       28,  8, 84, 33, 80, 43, 67,  4, 45, 89,  5, 94, 61, 25, 64,  3, 40,\n       49, 79, 54, 74,  0, 72, 66, 46, 95,  2, 17, 77, 87, 91, 15])",
                "val": "array([65, 76, 99, ..., 43, 76, 66])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 2018,  2638,  3169, ..., 95396, 95568, 97244])",
                "idx": "array([    0,  3720,  7560, 11409, 15257, 19181, 22955, 26836, 30849,\n       34733, 38529, 42448, 46212, 49999, 53903, 57844, 61766, 65723,\n       69476, 73354, 77221, 80980, 84801, 88628, 92418, 96148])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2efac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef1c0>",
                "self.obj": "0        65\n1        76\n2        99\n3        48\n4        73\n         ..\n99995    99\n99996    17\n99997    43\n99998    76\n99999    66\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([65, 76, 99, 48, 73,  1, 75,  7, 59,  9, 96, 68, 63, 42, 55, 11, 26,\n       21, 97, 78, 32, 13, 30, 70, 23, 83, 52, 71, 27, 34, 38, 10, 14, 36,\n       19, 69, 29,  6, 39, 50, 51, 20, 85, 90, 35, 12, 56, 93, 44, 24, 88,\n       37, 18, 22, 47, 41, 81, 16, 31, 60, 53, 92, 82, 57, 86, 58, 62, 98,\n       28,  8, 84, 33, 80, 43, 67,  4, 45, 89,  5, 94, 61, 25, 64,  3, 40,\n       49, 79, 54, 74,  0, 72, 66, 46, 95,  2, 17, 77, 87, 91, 15])",
                "val": "array([65, 76, 99, ..., 43, 76, 66])",
                "codes": "array([ 0,  0,  0, ..., 98, 99, 99])",
                "sorter": "array([60017, 69128, 93270, ..., 87200, 55614, 65605])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23     95\n     2015-08-24     95\n     2015-08-25     99\n     2015-08-26     98\n     2015-08-27     97\n                  ... \nz    2015-08-28     97\n     2015-08-29    100\n     2015-08-30     99\n     2015-08-31     98\n     2015-09-01    100\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2efac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef8b0>",
                "self.obj": "0        65.0\n1        76.0\n2        99.0\n3        48.0\n4        73.0\n         ... \n99995    99.0\n99996    17.0\n99997    43.0\n99998    76.0\n99999    66.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([65., 76., 99., ..., 43., 76., 66.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 95396, 95568, 97244])",
                "idx": "array([ 5883,  9407, 13020, 16639, 20260, 23967, 27541, 31201, 34953,\n       38614, 42182, 45869, 49420, 52996, 56692, 60383, 64096, 67813,\n       71353, 74996, 78650, 82175, 85743, 89312, 92884, 96389])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2efc40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2efbe0>",
                "self.obj": "0        65.0\n1        76.0\n2        99.0\n3        48.0\n4        73.0\n         ... \n99995    99.0\n99996    17.0\n99997    43.0\n99998    76.0\n99999    66.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([65., 76., 99., ..., 43., 76., 66.])",
                "codes": "array([-1, -1, -1, ..., 97, 98, 99])",
                "sorter": "array([  103,   256,   273, ..., 90039,  6086, 65605])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 0, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    90\n     2015-08-24    89\n     2015-08-25    95\n     2015-08-26    97\n     2015-08-27    91\n                   ..\nz    2015-08-28    97\n     2015-08-29    96\n     2015-08-30    93\n     2015-08-31    96\n     2015-09-01    97\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ef940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef070>",
                "self.obj": "0        65.0\n1        76.0\n2        99.0\n3        48.0\n4        73.0\n         ... \n99995    99.0\n99996    17.0\n99997    43.0\n99998    76.0\n99999    66.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (100,)",
                "val": "array([65., 76., 99., ..., 43., 76., 66.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 95396, 95568, 97244])",
                "idx": "array([ 5883,  9407, 13020, 16639, 20260, 23967, 27541, 31201, 34953,\n       38614, 42182, 45869, 49420, 52996, 56692, 60383, 64096, 67813,\n       71353, 74996, 78650, 82175, 85743, 89312, 92884, 96389])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce130>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2cefd0>",
                "self.obj": "0        65.0\n1        76.0\n2        99.0\n3        48.0\n4        73.0\n         ... \n99995    99.0\n99996    17.0\n99997    43.0\n99998    76.0\n99999    66.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (100,)",
                "val": "array([65., 76., 99., ..., 43., 76., 66.])",
                "codes": "array([-1, -1, -1, ..., 97, 98, 99])",
                "sorter": "array([  103,   256,   273, ..., 90039,  6086, 65605])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 0, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    90\n     2015-08-24    89\n     2015-08-25    95\n     2015-08-26    97\n     2015-08-27    91\n                   ..\nz    2015-08-28    97\n     2015-08-29    96\n     2015-08-30    93\n     2015-08-31    96\n     2015-09-01    97\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f62b0>",
                "self.obj": "0     363\n1     914\n2     516\n3     124\n4     870\n     ... \n95    530\n96    917\n97     18\n98    535\n99    512\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  3,  3,  3,  3,\n        4,  4,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  7,  7,  7,\n        7,  7,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11,\n       11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15, 15,\n       15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19,\n       20, 21, 21, 21, 21, 22, 22, 22, 23, 24, 24, 24, 25, 25, 25])",
                "_": "array of shape (96,)",
                "val": "array of shape (100,)",
                "codes": "array([ 4,  5, 22, 44, 94,  7, 16, 49, 90, 24, 52,  6, 13, 51, 62, 82, 88,\n       27, 37, 65, 68, 74,  9, 36, 58,  3, 10, 34, 60, 66, 86,  1,  2, 41,\n       83, 87, 34, 35, 55, 30, 73, 75, 84, 45, 48, 61, 70, 85, 20, 29, 40,\n       63, 66, 80, 25, 28, 47, 76, 79,  8, 67, 93, 95, 12, 39, 17, 18, 23,\n       53, 59, 69, 78, 26, 46, 57, 14, 21, 42, 64, 81, 11, 19, 54, 56, 72,\n        0, 31, 32, 38, 77, 47, 50, 92, 71, 15, 33, 81, 43, 89, 91])",
                "sorter": "array([ 4,  5, 22, 45, 98,  7, 16, 50, 93, 24, 53,  6, 13, 52, 63, 84, 91,\n       27, 37, 66, 69, 75,  9, 36, 59,  3, 10, 34, 61, 67, 89,  1,  2, 41,\n       85, 90, 43, 35, 56, 30, 74, 77, 87, 46, 49, 62, 71, 88, 20, 29, 40,\n       64, 86, 82, 25, 28, 48, 78, 81,  8, 68, 97, 99, 12, 39, 17, 18, 23,\n       54, 60, 70, 80, 26, 47, 58, 14, 21, 42, 65, 83, 11, 19, 55, 57, 73,\n        0, 31, 32, 38, 79, 76, 51, 96, 72, 15, 33, 94, 44, 92, 95])",
                "idx": "array([ 0,  5,  9, 11, 17, 22, 25, 31, 36, 39, 43, 48, 54, 59, 63, 65, 72,\n       75, 78, 80, 85, 86, 90, 93, 94, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([5, 4, 2, 6, 5, 3, 6, 5, 3, 4, 5, 6, 5, 4, 2, 7, 3, 3, 2, 5, 1, 4,\n       3, 1, 3, 3])",
                "res": "array([5, 4, 2, 6, 5, 3, 6, 5, 3, 4, 5, 6, 5, 4, 2, 7, 3, 3, 2, 5, 1, 4,\n       3, 1, 3, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    5\nb    4\nc    2\nd    6\ne    5\nf    3\ng    6\nh    5\ni    3\nj    4\nk    5\nl    6\nm    5\nn    4\no    2\np    7\nq    3\nr    3\ns    2\nt    5\nu    1\nv    4\nw    3\nx    1\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6370>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6e50>",
                "self.obj": "0     363\n1     914\n2     516\n3     124\n4     870\n     ... \n95    530\n96    917\n97     18\n98    535\n99    512\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 21, 21, 22, 22, 23, 24, 25, 26, 27, 27, 28,\n       29, 30, 31, 32, 32, 33, 33, 34, 35, 36, 36, 37, 37, 38, 39, 40, 40,\n       41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 55,\n       56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\n       73, 74, 74, 75, 76, 77, 77, 78, 79, 80, 80, 81, 82, 83, 84])",
                "_": "array of shape (96,)",
                "val": "array of shape (100,)",
                "codes": "array([22, 94,  4, 44,  5, 49, 16, 90,  7, 52, 24, 88, 51, 62,  6, 82, 13,\n       65, 74, 37, 68, 27,  9, 36, 58, 34, 60, 86, 10, 66,  3,  2, 41, 87,\n       83,  1, 35, 34, 55, 73, 84, 75, 30, 48, 70, 45, 85, 61, 40, 20, 80,\n       63, 29, 66, 47, 25, 79, 28, 76,  8, 93, 95, 67, 12, 39, 53, 59, 69,\n       18, 23, 78, 17, 57, 26, 46, 42, 21, 14, 64, 81, 54, 56, 72, 11, 19,\n        0, 31, 77, 38, 32, 47, 92, 50, 71, 15, 81, 33, 43, 89, 91])",
                "sorter": "array([22, 98,  4, 45,  5, 50, 16, 93,  7, 53, 24, 91, 52, 63,  6, 84, 13,\n       66, 75, 37, 69, 27,  9, 36, 59, 34, 61, 89, 10, 67,  3,  2, 41, 90,\n       85,  1, 35, 43, 56, 74, 87, 77, 30, 49, 71, 46, 88, 62, 40, 20, 82,\n       64, 29, 86, 48, 25, 81, 28, 78,  8, 97, 99, 68, 12, 39, 54, 60, 70,\n       18, 23, 80, 17, 58, 26, 47, 42, 21, 14, 65, 83, 55, 57, 73, 11, 19,\n        0, 31, 79, 38, 32, 76, 96, 51, 72, 15, 94, 33, 44, 92, 95])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39,\n       41, 42, 43, 45, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61,\n       62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n       80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,\n       2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,\n       2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1])",
                "ri": "array of shape (85,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    1\n     2015-08-26    1\n     2015-08-27    1\n     2015-09-01    1\n                  ..\ny    2015-08-25    2\n     2015-08-30    1\nz    2015-08-27    1\n     2015-08-30    1\n     2015-08-31    1\nName: julie, Length: 85, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbf70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb940>",
                "self.obj": "0     363.0\n1     914.0\n2     516.0\n3     124.0\n4     870.0\n      ...  \n95    530.0\n96    917.0\n97     18.0\n98    535.0\n99    512.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,\n        3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,\n        6,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11,\n       11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15,\n       15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19,\n       20, 21, 21, 21, 21, 22, 22, 22, 23, 24, 24, 24, 25, 25, 25])",
                "_": "array of shape (82,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 15, 29, 42, 54, 56, -1,  4,  5, 19, 80, -1, 13, 40, 75, 21, 43,\n       -1,  6, 10, 53, 73, -1, -1, 31, 62, -1, 30, 49,  3,  7, 28, 51, 54,\n       71, -1,  2, 35, 72, 28, 46, 24, 61, 63, 69, -1, 39, 52, 58, 70, -1,\n       17, 23, 34, 68, -1, 22, 38, 64, 67, -1, 55, 79, 81,  9, 33, 14, 20,\n       44, 50, 57, 66, -1, -1, 48, 11, 18, 36, -1, -1,  8, 16, 45, 47, 60,\n        0, 25, 26, 32, 65, 38, 41, 78, 59, 12, 27, 76, 37, 74, 77])",
                "sorter": "array([ 1, 18, 35, 52, 86, 69, 45,  4,  5, 22, 98,  7, 16, 50, 93, 24, 53,\n       84,  6, 13, 63, 91, 27, 66, 37, 75,  9, 36, 59,  3, 10, 34, 61, 67,\n       89, 85,  2, 41, 90, 43, 56, 30, 74, 77, 87, 46, 49, 62, 71, 88, 64,\n       20, 29, 40, 82, 28, 25, 48, 78, 81,  8, 68, 97, 99, 12, 39, 17, 23,\n       54, 60, 70, 80, 26, 47, 58, 14, 21, 42, 65, 83, 11, 19, 55, 57, 73,\n        0, 31, 32, 38, 79, 76, 51, 96, 72, 15, 33, 94, 44, 92, 95])",
                "idx": "array([ 6, 11, 15, 17, 22, 26, 29, 35, 39, 41, 45, 50, 55, 60, 64, 66, 72,\n       75, 78, 80, 85, 86, 90, 93, 94, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 4, 3, 2, 4, 2, 2, 6, 3, 2, 4, 4, 4, 4, 3, 2, 6, 1, 3, 0, 5, 1,\n       4, 3, 1, 3, 3])",
                "res": "array([4, 3, 2, 4, 2, 2, 6, 3, 2, 4, 4, 4, 4, 3, 2, 6, 1, 3, 0, 5, 1, 4,\n       3, 1, 3, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    4\nb    3\nc    2\nd    4\ne    2\nf    2\ng    6\nh    3\ni    2\nj    4\nk    4\nl    4\nm    4\nn    3\no    2\np    6\nq    1\nr    3\ns    0\nt    5\nu    1\nv    4\nw    3\nx    1\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce250>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce0a0>",
                "self.obj": "0     363.0\n1     914.0\n2     516.0\n3     124.0\n4     870.0\n      ...  \n95    530.0\n96    917.0\n97     18.0\n98    535.0\n99    512.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 20, 20,\n       21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 28, 29, 30, 30, 31, 31, 32,\n       33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n       48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 66, 67, 68, 69, 69, 70, 71, 72, 72, 73, 74, 75, 76])",
                "_": "array of shape (82,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 15, 29, 34, 42, 54, 56, 63, 19, 80,  4, -1,  5, 40, 13, 75,\n       -1, 43, 21, 73, 53,  6, -1, 10, -1, 62, 31, -1, -1, 30, 49, 28, 51,\n       71,  7, 54,  2, 35, 72, -1, 28, 46, 61, 69, 24, 39, 58, -1, 70, 52,\n       17, 68, -1, 23, 38, 22, 67, -1, 64, -1, 79, 81, 55,  9, 33, 44, 50,\n       57, 20, 66, 14, 48, -1, -1, 36, 18, 11, -1, -1, 45, 47, 60,  8, 16,\n        0, 25, 65, 32, 26, 38, 78, 41, 59, 12, 76, 27, 37, 74, 77])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 86, 69, 77, 22, 98,  4, 45,  5, 50, 16, 93,\n        7, 53, 24, 91, 63,  6, 84, 13, 66, 75, 37, 27,  9, 36, 59, 34, 61,\n       89, 10, 67,  2, 41, 90, 85, 43, 56, 74, 87, 30, 49, 71, 46, 88, 62,\n       20, 82, 64, 29, 48, 25, 81, 28, 78,  8, 97, 99, 68, 12, 39, 54, 60,\n       70, 23, 80, 17, 58, 26, 47, 42, 21, 14, 65, 83, 55, 57, 73, 11, 19,\n        0, 31, 79, 38, 32, 76, 96, 51, 72, 15, 94, 33, 44, 92, 95])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 41, 43, 45, 46, 48, 50, 51,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70,\n       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88,\n       89, 90, 92, 93, 94, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 2, 2,\n       1, 1, 1, 2, 1, 0, 2, 2, 1, 2, 1, 1, 2, 0, 1, 1, 1, 1, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 2, 2, 1,\n       1, 1, 2, 1, 0, 2, 2, 1, 2, 1, 1, 2, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1])",
                "ri": "array of shape (77,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    1\n     2015-08-26    1\n     2015-08-27    0\n     2015-09-01    1\n                  ..\ny    2015-08-25    2\n     2015-08-30    1\nz    2015-08-27    1\n     2015-08-30    1\n     2015-08-31    1\nName: julie, Length: 77, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cec70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb9d0>",
                "self.obj": "0     363.0\n1     914.0\n2     516.0\n3     124.0\n4     870.0\n      ...  \n95    530.0\n96    917.0\n97     18.0\n98    535.0\n99    512.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,\n        3,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,\n        6,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11,\n       11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15,\n       15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 19, 19,\n       20, 21, 21, 21, 21, 22, 22, 22, 23, 24, 24, 24, 25, 25, 25])",
                "_": "array of shape (82,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1, 15, 29, 42, 54, 56, -1,  4,  5, 19, 80, -1, 13, 40, 75, 21, 43,\n       -1,  6, 10, 53, 73, -1, -1, 31, 62, -1, 30, 49,  3,  7, 28, 51, 54,\n       71, -1,  2, 35, 72, 28, 46, 24, 61, 63, 69, -1, 39, 52, 58, 70, -1,\n       17, 23, 34, 68, -1, 22, 38, 64, 67, -1, 55, 79, 81,  9, 33, 14, 20,\n       44, 50, 57, 66, -1, -1, 48, 11, 18, 36, -1, -1,  8, 16, 45, 47, 60,\n        0, 25, 26, 32, 65, 38, 41, 78, 59, 12, 27, 76, 37, 74, 77])",
                "sorter": "array([ 1, 18, 35, 52, 86, 69, 45,  4,  5, 22, 98,  7, 16, 50, 93, 24, 53,\n       84,  6, 13, 63, 91, 27, 66, 37, 75,  9, 36, 59,  3, 10, 34, 61, 67,\n       89, 85,  2, 41, 90, 43, 56, 30, 74, 77, 87, 46, 49, 62, 71, 88, 64,\n       20, 29, 40, 82, 28, 25, 48, 78, 81,  8, 68, 97, 99, 12, 39, 17, 23,\n       54, 60, 70, 80, 26, 47, 58, 14, 21, 42, 65, 83, 11, 19, 55, 57, 73,\n        0, 31, 32, 38, 79, 76, 51, 96, 72, 15, 33, 94, 44, 92, 95])",
                "idx": "array([ 6, 11, 15, 17, 22, 26, 29, 35, 39, 41, 45, 50, 55, 60, 64, 66, 72,\n       75, 78, 80, 85, 86, 90, 93, 94, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([6, 4, 3, 2, 4, 2, 2, 6, 3, 2, 4, 4, 4, 4, 3, 2, 6, 1, 3, 0, 5, 1,\n       4, 3, 1, 3, 3])",
                "res": "array([4, 3, 2, 4, 2, 2, 6, 3, 2, 4, 4, 4, 4, 3, 2, 6, 1, 3, 0, 5, 1, 4,\n       3, 1, 3, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    4\nb    3\nc    2\nd    4\ne    2\nf    2\ng    6\nh    3\ni    2\nj    4\nk    4\nl    4\nm    4\nn    3\no    2\np    6\nq    1\nr    3\ns    0\nt    5\nu    1\nv    4\nw    3\nx    1\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cec70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e340f70>",
                "self.obj": "0     363.0\n1     914.0\n2     516.0\n3     124.0\n4     870.0\n      ...  \n95    530.0\n96    917.0\n97     18.0\n98    535.0\n99    512.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 20, 20,\n       21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 28, 29, 30, 30, 31, 31, 32,\n       33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n       48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 66, 67, 68, 69, 69, 70, 71, 72, 72, 73, 74, 75, 76])",
                "_": "array of shape (82,)",
                "val": "array of shape (100,)",
                "codes": "array([ 1,  3, 15, 29, 34, 42, 54, 56, 63, 19, 80,  4, -1,  5, 40, 13, 75,\n       -1, 43, 21, 73, 53,  6, -1, 10, -1, 62, 31, -1, -1, 30, 49, 28, 51,\n       71,  7, 54,  2, 35, 72, -1, 28, 46, 61, 69, 24, 39, 58, -1, 70, 52,\n       17, 68, -1, 23, 38, 22, 67, -1, 64, -1, 79, 81, 55,  9, 33, 44, 50,\n       57, 20, 66, 14, 48, -1, -1, 36, 18, 11, -1, -1, 45, 47, 60,  8, 16,\n        0, 25, 65, 32, 26, 38, 78, 41, 59, 12, 76, 27, 37, 74, 77])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 86, 69, 77, 22, 98,  4, 45,  5, 50, 16, 93,\n        7, 53, 24, 91, 63,  6, 84, 13, 66, 75, 37, 27,  9, 36, 59, 34, 61,\n       89, 10, 67,  2, 41, 90, 85, 43, 56, 74, 87, 30, 49, 71, 46, 88, 62,\n       20, 82, 64, 29, 48, 25, 81, 28, 78,  8, 97, 99, 68, 12, 39, 54, 60,\n       70, 23, 80, 17, 58, 26, 47, 42, 21, 14, 65, 83, 55, 57, 73, 11, 19,\n        0, 31, 79, 38, 32, 76, 96, 51, 72, 15, 94, 33, 44, 92, 95])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 41, 43, 45, 46, 48, 50, 51,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70,\n       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88,\n       89, 90, 92, 93, 94, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape (100,)",
                "out": "array([9, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 2, 2,\n       1, 1, 1, 2, 1, 0, 2, 2, 1, 2, 1, 1, 2, 0, 1, 1, 1, 1, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 2, 2, 1,\n       1, 1, 2, 1, 0, 2, 2, 1, 2, 1, 1, 2, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1])",
                "ri": "array of shape (77,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    1\n     2015-08-26    1\n     2015-08-27    0\n     2015-09-01    1\n                  ..\ny    2015-08-25    2\n     2015-08-30    1\nz    2015-08-27    1\n     2015-08-30    1\n     2015-08-31    1\nName: julie, Length: 77, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bba00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb9d0>",
                "self.obj": "0      340\n1      566\n2      886\n3      535\n4      244\n      ... \n995    542\n996    552\n997    886\n998    583\n999    580\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (622,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([  0,  34,  72, 104, 156, 197, 237, 275, 310, 356, 396, 419, 458,\n       502, 542, 578, 625, 650, 691, 731, 779, 810, 840, 882, 919, 966])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([34, 38, 32, 49, 40, 40, 37, 34, 45, 40, 23, 39, 44, 40, 36, 47, 25,\n       38, 39, 44, 31, 30, 42, 36, 47, 33])",
                "res": "array([34, 38, 32, 49, 40, 40, 37, 34, 45, 40, 23, 39, 44, 40, 36, 47, 25,\n       38, 39, 44, 31, 30, 42, 36, 47, 33])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    34\nb    38\nc    32\nd    49\ne    40\nf    40\ng    37\nh    34\ni    45\nj    40\nk    23\nl    39\nm    44\nn    40\no    36\np    47\nq    25\nr    38\ns    39\nt    44\nu    31\nv    30\nw    42\nx    36\ny    47\nz    33\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb7c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb670>",
                "self.obj": "0      340\n1      566\n2      886\n3      535\n4      244\n      ... \n995    542\n996    552\n997    886\n998    583\n999    580\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (622,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (256,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (256,)",
                "res": "array of shape (256,)",
                "ri": "array of shape (256,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    4\n     2015-08-25    9\n     2015-08-26    4\n     2015-08-28    1\n                  ..\nz    2015-08-28    1\n     2015-08-29    8\n     2015-08-30    5\n     2015-08-31    1\n     2015-09-01    4\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb880>",
                "self.obj": "0      340.0\n1      566.0\n2      886.0\n3      535.0\n4      244.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    583.0\n999    580.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (567,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  91, 126, 155, 207, 243, 282, 318, 351, 395, 434, 456, 493,\n       536, 575, 609, 652, 676, 713, 751, 798, 828, 854, 893, 926, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([49, 27, 32, 25, 42, 26, 34, 29, 26, 35, 32, 16, 31, 34, 30, 29, 36,\n       20, 29, 32, 40, 27, 23, 35, 26, 35, 25])",
                "res": "array([27, 32, 25, 42, 26, 34, 29, 26, 35, 32, 16, 31, 34, 30, 29, 36, 20,\n       29, 32, 40, 27, 23, 35, 26, 35, 25])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    27\nb    32\nc    25\nd    42\ne    26\nf    34\ng    29\nh    26\ni    35\nj    32\nk    16\nl    31\nm    34\nn    30\no    29\np    36\nq    20\nr    29\ns    32\nt    40\nu    27\nv    23\nw    35\nx    26\ny    35\nz    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1262f6f40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6ca0>",
                "self.obj": "0      340.0\n1      566.0\n2      886.0\n3      535.0\n4      244.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    583.0\n999    580.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (567,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-25    6\n     2015-08-26    2\n     2015-08-28    1\n                  ..\nz    2015-08-28    0\n     2015-08-29    7\n     2015-08-30    4\n     2015-08-31    1\n     2015-09-01    3\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2cefd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce6a0>",
                "self.obj": "0      340.0\n1      566.0\n2      886.0\n3      535.0\n4      244.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    583.0\n999    580.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (567,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array([ 59,  91, 126, 155, 207, 243, 282, 318, 351, 395, 434, 456, 493,\n       536, 575, 609, 652, 676, 713, 751, 798, 828, 854, 893, 926, 968])",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array([49, 27, 32, 25, 42, 26, 34, 29, 26, 35, 32, 16, 31, 34, 30, 29, 36,\n       20, 29, 32, 40, 27, 23, 35, 26, 35, 25])",
                "res": "array([27, 32, 25, 42, 26, 34, 29, 26, 35, 32, 16, 31, 34, 30, 29, 36, 20,\n       29, 32, 40, 27, 23, 35, 26, 35, 25])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    27\nb    32\nc    25\nd    42\ne    26\nf    34\ng    29\nh    26\ni    35\nj    32\nk    16\nl    31\nm    34\nn    30\no    29\np    36\nq    20\nr    29\ns    32\nt    40\nu    27\nv    23\nw    35\nx    26\ny    35\nz    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce6a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1262f6310>",
                "self.obj": "0      340.0\n1      566.0\n2      886.0\n3      535.0\n4      244.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    583.0\n999    580.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape (1000,)",
                "_": "array of shape (567,)",
                "val": "array of shape (1000,)",
                "codes": "array of shape (1000,)",
                "sorter": "array of shape (1000,)",
                "idx": "array of shape (253,)",
                "inc": "array of shape (1000,)",
                "mask": "array of shape (1000,)",
                "out": "array of shape (254,)",
                "res": "array of shape (253,)",
                "ri": "array of shape (253,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-25    6\n     2015-08-26    2\n     2015-08-28    1\n                  ..\nz    2015-08-28    0\n     2015-08-29    7\n     2015-08-30    4\n     2015-08-31    1\n     2015-09-01    3\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbe20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce0a0>",
                "self.obj": "0       709\n1       657\n2       477\n3       872\n4       782\n       ... \n9995    371\n9996    409\n9997    509\n9998    503\n9999      5\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([709, 657, 477, ..., 509, 503,   5])",
                "codes": "array([  0,   8,  17, ..., 994, 994, 997])",
                "sorter": "array([2284, 1890,  647, ..., 5987, 8068, 7505])",
                "idx": "array([   0,  346,  726, 1116, 1517, 1919, 2298, 2694, 3084, 3435, 3807,\n       4202, 4589, 4951, 5352, 5737, 6116, 6483, 6858, 7241, 7639, 8001,\n       8411, 8816, 9204, 9598])",
                "inc": "array([1, 1, 1, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([289, 314, 331, 330, 332, 308, 334, 316, 301, 302, 318, 320, 294,\n       324, 324, 320, 308, 309, 316, 332, 299, 330, 323, 336, 335, 329])",
                "res": "array([289, 314, 331, 330, 332, 308, 334, 316, 301, 302, 318, 320, 294,\n       324, 324, 320, 308, 309, 316, 332, 299, 330, 323, 336, 335, 329])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    289\nb    314\nc    331\nd    330\ne    332\nf    308\ng    334\nh    316\ni    301\nj    302\nk    318\nl    320\nm    294\nn    324\no    324\np    320\nq    308\nr    309\ns    316\nt    332\nu    299\nv    330\nw    323\nx    336\ny    335\nz    329\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbc10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb430>",
                "self.obj": "0       709\n1       657\n2       477\n3       872\n4       782\n       ... \n9995    371\n9996    409\n9997    509\n9998    503\n9999      5\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([709, 657, 477, ..., 509, 503,   5])",
                "codes": "array([ 52,  69,  81, ..., 898, 932, 962])",
                "sorter": "array([3666, 2612, 5816, ..., 6369, 7358, 9520])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    31\n     2015-08-24    39\n     2015-08-25    29\n     2015-08-26    36\n     2015-08-27    33\n                   ..\nz    2015-08-28    41\n     2015-08-29    37\n     2015-08-30    25\n     2015-08-31    49\n     2015-09-01    37\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbf70>",
                "self.obj": "0       709.0\n1       657.0\n2       477.0\n3       872.0\n4       782.0\n        ...  \n9995    371.0\n9996    409.0\n9997    509.0\n9998    503.0\n9999      5.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([709., 657., 477., ..., 509., 503.,   5.])",
                "codes": "array([ -1,  -1,  -1, ..., 989, 989, 994])",
                "sorter": "array([ 103,  256,  273, ..., 5987, 8068, 7505])",
                "idx": "array([ 589,  918, 1273, 1636, 2016, 2400, 2761, 3130, 3495, 3823, 4160,\n       4536, 4903, 5246, 5624, 5984, 6345, 6688, 7038, 7399, 7769, 8109,\n       8502, 8884, 9251, 9621])",
                "inc": "array([0, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([396, 238, 259, 264, 273, 285, 264, 286, 259, 241, 233, 273, 260,\n       238, 276, 270, 262, 258, 257, 259, 269, 248, 273, 267, 274, 265,\n       281])",
                "res": "array([238, 259, 264, 273, 285, 264, 286, 259, 241, 233, 273, 260, 238,\n       276, 270, 262, 258, 257, 259, 269, 248, 273, 267, 274, 265, 281])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    238\nb    259\nc    264\nd    273\ne    285\nf    264\ng    286\nh    259\ni    241\nj    233\nk    273\nl    260\nm    238\nn    276\no    270\np    262\nq    258\nr    257\ns    259\nt    269\nu    248\nv    273\nw    267\nx    274\ny    265\nz    281\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbf70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ce070>",
                "self.obj": "0       709.0\n1       657.0\n2       477.0\n3       872.0\n4       782.0\n        ...  \n9995    371.0\n9996    409.0\n9997    509.0\n9998    503.0\n9999      5.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([709., 657., 477., ..., 509., 503.,   5.])",
                "codes": "array([ -1,  -1,  -1, ..., 912, 914, 941])",
                "sorter": "array([ 103,  256,  273, ..., 7358, 2962, 9520])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    22\n     2015-08-24    27\n     2015-08-25    25\n     2015-08-26    30\n     2015-08-27    25\n                   ..\nz    2015-08-28    27\n     2015-08-29    31\n     2015-08-30    22\n     2015-08-31    41\n     2015-09-01    30\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb880>",
                "self.obj": "0       709.0\n1       657.0\n2       477.0\n3       872.0\n4       782.0\n        ...  \n9995    371.0\n9996    409.0\n9997    509.0\n9998    503.0\n9999      5.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([709., 657., 477., ..., 509., 503.,   5.])",
                "codes": "array([ -1,  -1,  -1, ..., 989, 989, 994])",
                "sorter": "array([ 103,  256,  273, ..., 5987, 8068, 7505])",
                "idx": "array([ 589,  918, 1273, 1636, 2016, 2400, 2761, 3130, 3495, 3823, 4160,\n       4536, 4903, 5246, 5624, 5984, 6345, 6688, 7038, 7399, 7769, 8109,\n       8502, 8884, 9251, 9621])",
                "inc": "array([0, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([396, 238, 259, 264, 273, 285, 264, 286, 259, 241, 233, 273, 260,\n       238, 276, 270, 262, 258, 257, 259, 269, 248, 273, 267, 274, 265,\n       281])",
                "res": "array([238, 259, 264, 273, 285, 264, 286, 259, 241, 233, 273, 260, 238,\n       276, 270, 262, 258, 257, 259, 269, 248, 273, 267, 274, 265, 281])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    238\nb    259\nc    264\nd    273\ne    285\nf    264\ng    286\nh    259\ni    241\nj    233\nk    273\nl    260\nm    238\nn    276\no    270\np    262\nq    258\nr    257\ns    259\nt    269\nu    248\nv    273\nw    267\nx    274\ny    265\nz    281\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2ce0a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef130>",
                "self.obj": "0       709.0\n1       657.0\n2       477.0\n3       872.0\n4       782.0\n        ...  \n9995    371.0\n9996    409.0\n9997    509.0\n9998    503.0\n9999      5.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([709., 657., 477., ..., 509., 503.,   5.])",
                "codes": "array([ -1,  -1,  -1, ..., 912, 914, 941])",
                "sorter": "array([ 103,  256,  273, ..., 7358, 2962, 9520])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    22\n     2015-08-24    27\n     2015-08-25    25\n     2015-08-26    30\n     2015-08-27    25\n                   ..\nz    2015-08-28    27\n     2015-08-29    31\n     2015-08-30    22\n     2015-08-31    41\n     2015-09-01    30\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbe20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbc10>",
                "self.obj": "0        543\n1        715\n2        352\n3        270\n4        337\n        ... \n99995    529\n99996    344\n99997    769\n99998    356\n99999    998\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([543, 715, 352, ..., 769, 356, 998])",
                "codes": "array([  0,   0,   0, ..., 998, 998, 999])",
                "sorter": "array([50728, 71823, 97893, ..., 33796, 87621, 48580])",
                "idx": "array([    0,  3813,  7719, 11616, 15414, 19253, 23157, 27112, 30797,\n       34702, 38517, 42362, 46150, 50035, 53915, 57797, 61699, 65477,\n       69204, 73044, 76902, 80807, 84578, 88271, 92286, 96163])",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([975, 984, 977, 976, 980, 985, 979, 978, 980, 982, 980, 982, 977,\n       987, 981, 974, 975, 975, 986, 978, 981, 982, 980, 980, 978, 982])",
                "res": "array([975, 984, 977, 976, 980, 985, 979, 978, 980, 982, 980, 982, 977,\n       987, 981, 974, 975, 975, 986, 978, 981, 982, 980, 980, 978, 982])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    975\nb    984\nc    977\nd    976\ne    980\nf    985\ng    979\nh    978\ni    980\nj    982\nk    980\nl    982\nm    977\nn    987\no    981\np    974\nq    975\nr    975\ns    986\nt    978\nu    981\nv    982\nw    980\nx    980\ny    978\nz    982\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbdf0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb9a0>",
                "self.obj": "0        543\n1        715\n2        352\n3        270\n4        337\n        ... \n99995    529\n99996    344\n99997    769\n99998    356\n99999    998\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([543, 715, 352, ..., 769, 356, 998])",
                "codes": "array([  2,   4,   7, ..., 990, 994, 995])",
                "sorter": "array([94294, 41967, 69478, ..., 33112, 30556, 86576])",
                "idx": "array of shape (260,)",
                "inc": "array([1, 1, 1, ..., 0, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape (260,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    318\n     2015-08-24    310\n     2015-08-25    308\n     2015-08-26    325\n     2015-08-27    303\n                  ... \nz    2015-08-28    303\n     2015-08-29    312\n     2015-08-30    308\n     2015-08-31    325\n     2015-09-01    324\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bbc10>",
                "self.obj": "0        543.0\n1        715.0\n2        352.0\n3        270.0\n4        337.0\n         ...  \n99995    529.0\n99996    344.0\n99997    769.0\n99998    356.0\n99999    998.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([543., 715., 352., ..., 769., 356., 998.])",
                "codes": "array([ -1,  -1,  -1, ..., 998, 998, 999])",
                "sorter": "array([  103,   256,   273, ..., 43615, 47063, 48580])",
                "idx": "array([ 5883,  9479, 13170, 16832, 20400, 24025, 27703, 31435, 34919,\n       38598, 42184, 45790, 49345, 53000, 56656, 60292, 63951, 67500,\n       71012, 74630, 78256, 81941, 85487, 88984, 92748, 96398])",
                "inc": "array([0, 0, 0, ..., 0, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([993, 945, 961, 951, 941, 951, 950, 950, 943, 956, 956, 959, 954,\n       950, 958, 957, 951, 954, 944, 963, 951, 953, 961, 956, 959, 946,\n       950])",
                "res": "array([945, 961, 951, 941, 951, 950, 950, 943, 956, 956, 959, 954, 950,\n       958, 957, 951, 954, 944, 963, 951, 953, 961, 956, 959, 946, 950])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    945\nb    961\nc    951\nd    941\ne    951\nf    950\ng    950\nh    943\ni    956\nj    956\nk    959\nl    954\nm    950\nn    958\no    957\np    951\nq    954\nr    944\ns    963\nt    951\nu    953\nv    961\nw    956\nx    959\ny    946\nz    950\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb9a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2bb7c0>",
                "self.obj": "0        543.0\n1        715.0\n2        352.0\n3        270.0\n4        337.0\n         ...  \n99995    529.0\n99996    344.0\n99997    769.0\n99998    356.0\n99999    998.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([543., 715., 352., ..., 769., 356., 998.])",
                "codes": "array([ -1,  -1,  -1, ..., 980, 985, 986])",
                "sorter": "array([  103,   256,   273, ..., 90521, 30556, 86576])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    268\n     2015-08-24    254\n     2015-08-25    251\n     2015-08-26    268\n     2015-08-27    245\n                  ... \nz    2015-08-28    251\n     2015-08-29    252\n     2015-08-30    243\n     2015-08-31    265\n     2015-09-01    262\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bbc10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef100>",
                "self.obj": "0        543.0\n1        715.0\n2        352.0\n3        270.0\n4        337.0\n         ...  \n99995    529.0\n99996    344.0\n99997    769.0\n99998    356.0\n99999    998.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape (1000,)",
                "val": "array([543., 715., 352., ..., 769., 356., 998.])",
                "codes": "array([ -1,  -1,  -1, ..., 998, 998, 999])",
                "sorter": "array([  103,   256,   273, ..., 43615, 47063, 48580])",
                "idx": "array([ 5883,  9479, 13170, 16832, 20400, 24025, 27703, 31435, 34919,\n       38598, 42184, 45790, 49345, 53000, 56656, 60292, 63951, 67500,\n       71012, 74630, 78256, 81941, 85487, 88984, 92748, 96398])",
                "inc": "array([0, 0, 0, ..., 0, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([993, 945, 961, 951, 941, 951, 950, 950, 943, 956, 956, 959, 954,\n       950, 958, 957, 951, 954, 944, 963, 951, 953, 961, 956, 959, 946,\n       950])",
                "res": "array([945, 961, 951, 941, 951, 950, 950, 943, 956, 956, 959, 954, 950,\n       958, 957, 951, 954, 944, 963, 951, 953, 961, 956, 959, 946, 950])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    945\nb    961\nc    951\nd    941\ne    951\nf    950\ng    950\nh    943\ni    956\nj    956\nk    959\nl    954\nm    950\nn    958\no    957\np    951\nq    954\nr    944\ns    963\nt    951\nu    953\nv    961\nw    956\nx    959\ny    946\nz    950\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e2bb880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11e2ef100>",
                "self.obj": "0        543.0\n1        715.0\n2        352.0\n3        270.0\n4        337.0\n         ...  \n99995    529.0\n99996    344.0\n99997    769.0\n99998    356.0\n99999    998.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape (1000,)",
                "val": "array([543., 715., 352., ..., 769., 356., 998.])",
                "codes": "array([ -1,  -1,  -1, ..., 980, 985, 986])",
                "sorter": "array([  103,   256,   273, ..., 90521, 30556, 86576])",
                "idx": "array of shape (260,)",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape (261,)",
                "res": "array of shape (260,)",
                "ri": "array of shape (260,)",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    268\n     2015-08-24    254\n     2015-08-25    251\n     2015-08-26    268\n     2015-08-27    245\n                  ... \nz    2015-08-28    251\n     2015-08-29    252\n     2015-08-30    243\n     2015-08-31    265\n     2015-09-01    262\nName: julie, Length: 260, dtype: int64"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ]
    ],
    "3.1.1": [
        "BUG: groupby-nunique modifies null values\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({\"GROUP\": 0, \"VALUE\": [1.0, np.nan]})\ndf.groupby(\"GROUP\")[\"VALUE\"].nunique()\nprint(df)\nProblem description\nOriginal dataframe is modified:\n\n   GROUP         VALUE\n0      0  1.000000e+00\n1      0 -9.223372e+18\nIssue seems to have been introduced in version 1.0.0, 0.25.3 works as expected.\n\nExpected Output\nOriginal dataframe should not be modified.\n"
    ]
}