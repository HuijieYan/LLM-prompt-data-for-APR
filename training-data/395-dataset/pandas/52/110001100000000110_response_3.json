{
    "pandas": [
        {
            "bugID": 52,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 581,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def nunique(self, dropna: bool = True) -> Series:\n\n    \"\"\"\n    Return number of unique elements in the group.\n    \n    Returns\n    -------\n    Series\n        Number of unique values within each group.\n    \"\"\"\n    val = self.obj._values\n    mask = isna(val)\n    try:\n        uniques, counts = algos.factorize(val, sort=False)\n    except TypeError:\n        uniques, counts = algos.factorize(val, sort=False)\n    \n    if not dropna and mask.any():\n        uniques, mask = uniques[~mask], mask.nonzero()[0]\n        uniques, counts, mask = _reconstruct_data(uniques, counts, mask, val)\n    \n    result = Series(counts, index=lambda: self.grouper.indices, name=self._selection_name)\n    return self._reindex_output(result, fill_value=0)"
        }
    ]
}