{
    "1.1.1": "def rename(self, index=None, **kwargs):\n    \n    kwargs[\"inplace\"] = validate_bool_kwarg(kwargs.get(\"inplace\", False), \"inplace\")\n\n    non_mapping = is_scalar(index) or (\n        is_list_like(index) and not is_dict_like(index)\n    )\n    if non_mapping:\n        return self._set_name(index, inplace=kwargs.get(\"inplace\"))\n    return super().rename(index=index, **kwargs)\n",
    "1.1.2": "Alter Series index labels or name.\n\nFunction / dict values must be unique (1-to-1). Labels not contained in\na dict / Series will be left as-is. Extra labels listed don't throw an\nerror.\n\nAlternatively, change ``Series.name`` with a scalar value.\n\nSee the :ref:`user guide <basics.rename>` for more.\n\nParameters\n----------\nindex : scalar, hashable sequence, dict-like or function, optional\n    dict-like or functions are transformations to apply to\n    the index.\n    Scalar or hashable sequence-like will alter the ``Series.name``\n    attribute.\ncopy : bool, default True\n    Whether to copy underlying data.\ninplace : bool, default False\n    Whether to return a new Series. If True then value of copy is\n    ignored.\nlevel : int or level name, default None\n    In case of a MultiIndex, only rename labels in the specified\n    level.\n\nReturns\n-------\nSeries\n    Series with index labels or name altered.\n\nSee Also\n--------\nSeries.rename_axis : Set the name of the axis.\n\nExamples\n--------\n>>> s = pd.Series([1, 2, 3])\n>>> s\n0    1\n1    2\n2    3\ndtype: int64\n>>> s.rename(\"my_name\")  # scalar, changes Series.name\n0    1\n1    2\n2    3\nName: my_name, dtype: int64\n>>> s.rename(lambda x: x ** 2)  # function, changes labels\n0    1\n1    2\n4    3\ndtype: int64\n>>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n0    1\n3    2\n5    3\ndtype: int64",
    "1.2.1": "class Series(base.IndexOpsMixin, generic.NDFrame)",
    "1.2.2": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, *, **) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, argument order is maintained for Python 3.6\n       and later.\n\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index\n    sequence are used, the index will override the keys found in the\n    dict.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\ncopy : bool, default False\n    Copy input data.",
    "1.2.3": [
        "_set_name(self, name, inplace=False)",
        "rename(self, index=None, **kwargs)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/series.py",
    "1.3.2": [
        "_set_name(self, name, inplace=False)",
        "rename(self, index=None, **kwargs)"
    ],
    "1.4.1": [
        "    def test_rename_with_custom_indexer(self):\n        # GH 27814\n        class MyIndexer:\n            pass\n\n        ix = MyIndexer()\n        s = Series([1, 2, 3]).rename(ix)\n        assert s.name is ix",
        "    def test_rename_with_custom_indexer_inplace(self):\n        # GH 27814\n        class MyIndexer:\n            pass\n\n        ix = MyIndexer()\n        s = Series([1, 2, 3])\n        s.rename(ix, inplace=True)\n        assert s.name is ix"
    ],
    "1.4.2": [
        "pandas/tests/series/test_alter_axes.py",
        "pandas/tests/series/test_alter_axes.py"
    ],
    "2.1.1": [
        [
            "E           TypeError: 'MyIndexer' object is not iterable"
        ],
        [
            "E           TypeError: 'MyIndexer' object is not iterable"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.series.test_alter_axes.TestSeriesAlterAxes object at 0x11a5bb7c0>\n\n    def test_rename_with_custom_indexer(self):\n        # GH 27814\n        class MyIndexer:\n            pass\n    \n        ix = MyIndexer()\n>       s = Series([1, 2, 3]).rename(ix)\n\npandas/tests/series/test_alter_axes.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:4173: in rename\n    return super().rename(index=index, **kwargs)\npandas/core/generic.py:1136: in rename\n    indexer = self.axes[axis].get_indexer_for(v)\npandas/core/indexes/base.py:4771: in get_indexer_for\n    return self.get_indexer(target, **kwargs)\npandas/core/indexes/range.py:384: in get_indexer\n    return super().get_indexer(target, method=method, tolerance=tolerance)\npandas/core/indexes/base.py:2912: in get_indexer\n    target = ensure_index(target)\npandas/core/indexes/base.py:5629: in ensure_index\n    return Index(index_like)\npandas/core/indexes/base.py:499: in __new__\n    subarr = com.asarray_tuplesafe(data, dtype=object)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = <pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer.<locals>.MyIndexer object at 0x11a5cc100>\ndtype = <class 'object'>\n\n    def asarray_tuplesafe(values, dtype=None):\n    \n        if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n>           values = list(values)",
            "\npandas/core/common.py:231: TypeError"
        ],
        [
            "self = <pandas.tests.series.test_alter_axes.TestSeriesAlterAxes object at 0x11a9c5a00>\n\n    def test_rename_with_custom_indexer_inplace(self):\n        # GH 27814\n        class MyIndexer:\n            pass\n    \n        ix = MyIndexer()\n        s = Series([1, 2, 3])\n>       s.rename(ix, inplace=True)\n\npandas/tests/series/test_alter_axes.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:4173: in rename\n    return super().rename(index=index, **kwargs)\npandas/core/generic.py:1136: in rename\n    indexer = self.axes[axis].get_indexer_for(v)\npandas/core/indexes/base.py:4771: in get_indexer_for\n    return self.get_indexer(target, **kwargs)\npandas/core/indexes/range.py:384: in get_indexer\n    return super().get_indexer(target, method=method, tolerance=tolerance)\npandas/core/indexes/base.py:2912: in get_indexer\n    target = ensure_index(target)\npandas/core/indexes/base.py:5629: in ensure_index\n    return Index(index_like)\npandas/core/indexes/base.py:499: in __new__\n    subarr = com.asarray_tuplesafe(data, dtype=object)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = <pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer_inplace.<locals>.MyIndexer object at 0x11a9c5c70>\ndtype = <class 'object'>\n\n    def asarray_tuplesafe(values, dtype=None):\n    \n        if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n>           values = list(values)",
            "\npandas/core/common.py:231: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "kwargs": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "index": {
                    "value": "<pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer.<locals>.MyIndexer object at 0x115fe68b0>",
                    "shape": null,
                    "omitted": false
                },
                "self": {
                    "value": "0    1\n1    2\n2    3\ndtype: int64",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "kwargs": {
                    "value": "{'inplace': False}",
                    "shape": "1",
                    "omitted": false
                },
                "non_mapping": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "kwargs": {
                    "value": "{'inplace': True}",
                    "shape": "1",
                    "omitted": false
                },
                "index": {
                    "value": "<pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer_inplace.<locals>.MyIndexer object at 0x11e9ba220>",
                    "shape": null,
                    "omitted": false
                },
                "self": {
                    "value": "0    1\n1    2\n2    3\ndtype: int64",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "non_mapping": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "kwargs": "dict",
                "index": "MyIndexer",
                "self": "Series"
            },
            {
                "kwargs": "dict",
                "non_mapping": "bool"
            }
        ],
        [
            {
                "kwargs": "dict",
                "index": "MyIndexer",
                "self": "Series"
            },
            {
                "non_mapping": "bool"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "kwargs": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "index": {
                    "value": "<pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer.<locals>.MyIndexer object at 0x1178fa310>",
                    "shape": null,
                    "omitted": false
                },
                "self": {
                    "value": "0    1\n1    2\n2    3\ndtype: int64",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "kwargs": {
                    "value": "{'inplace': False}",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "kwargs": {
                    "value": "{'inplace': True}",
                    "shape": "1",
                    "omitted": false
                },
                "index": {
                    "value": "<pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_with_custom_indexer_inplace.<locals>.MyIndexer object at 0x1179006d0>",
                    "shape": null,
                    "omitted": false
                },
                "self": {
                    "value": "0    1\n1    2\n2    3\ndtype: int64",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "kwargs": "dict",
                "index": "MyIndexer",
                "self": "Series"
            },
            {
                "kwargs": "dict"
            }
        ],
        [
            {
                "kwargs": "dict",
                "index": "MyIndexer",
                "self": "Series"
            },
            {}
        ]
    ],
    "3.1.1": [
        "BUG: Series.rename raises error on values accepted by Series constructor.\n"
    ],
    "3.1.2": [
        "Sample\nimport pandas as pd\n\nclass MyIndexer:\n    pass\n\ni1 = MyIndexer()\ns = pd.Series([1, 2, 3], name=i1) # allowed\ns.rename(i1) # raises error\nThe error stack trace is the following:\n\nTraceback (most recent call last):\n  File \"test.py\", line 8, in <module>\n    s.rename(i1) # raises error\n  File \"/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\", line 3736, in rename\n    return super(Series, self).rename(index=index, **kwargs)\n  File \"/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\", line 1091, in rename\n    level=level)\n  File \"/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\", line 171, in rename_axis\n    obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))\n  File \"/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\", line 2004, in _transform_index\n    items = [func(x) for x in index]\n  File \"/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\", line 2004, in <listcomp>\n    items = [func(x) for x in index]\nTypeError: 'MyIndexer' object is not callable\nDescription\nSeries.rename handle anything that isn't a scalar or list-like as a mapping.\n\nProposed change\nChange the following code (from Series.rename):\n\nnon_mapping = is_scalar(index) or (is_list_like(index) and not is_dict_like(index))\nif non_mapping:\n    return self._set_name(index, inplace=kwargs.get(\"inplace\"))\nreturn super().rename(index=index, **kwargs)\nto\n\nif callable(index) or is_dict_like(index):\n    return super().rename(index=index, **kwargs)\nelse:\n    return self._set_name(index, inplace=kwargs.get(\"inplace\"))\nso anything that isn't a dict or a callable will be treated the same way as a scalar or list-like.\n"
    ]
}