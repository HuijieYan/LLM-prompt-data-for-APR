{
    "pandas": [
        {
            "bugID": 77,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 263,
            "file_name": "pandas/core/ops/array_ops.py",
            "replace_code": "def na_logical_op(x: np.ndarray, y, op):\n    import pandas.core.ops as libops \n    from pandas.core.dtypes.common import (\n        is_bool_dtype, ensure_object, is_na, is_bool, is_integer,\n        is_scalar\n    )\n\n    try:\n        left_dtype = x.dtype\n        right_dtype = y.dtype if isinstance(y, np.ndarray) else type(y)\n        result = libops.vec_binop(x, y, op, left_dtype, right_dtype)\n    except (TypeError, ValueError, AttributeError, OverflowError, NotImplementedError):\n        typ = y.dtype if isinstance(y, np.ndarray) else type(y)\n        raise TypeError(\n            f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n            f\"and scalar of type [{typ}]\"\n        )\n\n    return result",
            "import_list": [
                "import numpy as np",
                "import operator",
                "import pytest",
                "import pandas.util.testing as tm",
                "import pandas.core.ops as libops",
                "from pandas.core.dtypes.common import (\n        is_bool_dtype, ensure_object, is_na, is_bool, is_integer,\n        is_scalar\n    )"
            ]
        }
    ]
}