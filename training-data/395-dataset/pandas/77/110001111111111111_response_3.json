{
    "pandas": [
        {
            "bugID": 77,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 263,
            "file_name": "pandas/core/ops/array_ops.py",
            "replace_code": "def na_logical_op(x: np.ndarray, y, op):\n    # Check if the types of x and y are compatible for the operation\n    if x.dtype.kind in ['i', 'b'] and (y.dtype.kind in ['i', 'b'] or isinstance(y, np.ndarray)):\n        result = op(x, y)\n    elif is_bool_dtype(x.dtype) and is_bool_dtype(y.dtype):\n        # Handle boolean dtype operations\n        result = libops.vec_binop(x, y, op)\n    elif lib.is_scalar(y):\n        # Handle scalar case\n        if not isna(y):\n            y = bool(y)\n        result = libops.scalar_binop(x, y, op)\n    else:\n        typ = type(y).__name__\n        raise TypeError(\n            f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n            f\"and scalar of type [{typ}]\"\n        )\n    return result",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}