{
    "pandas": [
        {
            "bugID": 77,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 263,
            "file_name": "pandas/core/ops/array_ops.py",
            "replace_code": "def na_logical_op(x: np.ndarray, y: np.ndarray, op):\n    import numpy as np\n    import operator\n    import pytest\n    import pandas.testing as tm\n    try:\n        # For exposition, write:\n        #  yarr = isinstance(y, np.ndarray)\n        #  yint = is_integer(y) or (yarr and y.dtype.kind == \"i\")\n        #  ybool = is_bool(y) or (yarr and y.dtype.kind == \"b\")\n        #  xint = x.dtype.kind == \"i\"\n        #  xbool = x.dtype.kind == \"b\"\n        # Then Cases where this goes through without raising include:\n        #  (xint or xbool) and (yint or bool)\n        result = op(x, y)\n    except TypeError:\n        if isinstance(y, np.ndarray):\n            # bool-bool dtype operations should be OK, should not get here\n            assert not (is_bool_dtype(x.dtype) and is_bool_dtype(y.dtype))\n            x = ensure_object(x)\n            y = ensure_object(y)\n            result = libops.vec_binop(x.ravel(), y.ravel(), op)\n        else:\n            # let null fall thru\n            assert lib.is_scalar(y)\n            if not isna(y):\n                y = bool(y)\n            try:\n                result = libops.scalar_binop(x, y, op)\n            except (\n                TypeError,\n                ValueError,\n                AttributeError,\n                OverflowError,\n                NotImplementedError,\n            ):\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )\n    \n    return result"
        }
    ]
}