{
    "pandas": [
        {
            "bugID": 77,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 263,
            "file_name": "pandas/core/ops/array_ops.py",
            "replace_code": "def na_logical_op(x: np.ndarray, y, op):\n    try:\n        result = op(x, y)\n    except TypeError:\n        x_is_bool = is_bool_dtype(x.dtype)\n        y_is_bool = is_bool_dtype(y.dtype)\n        if ((x_is_bool or x.dtype.kind == \"i\") and (y_is_bool or y.dtype.kind == 'i')):\n            result = op(x, y)\n        elif (x.dtype.kind == 'b' and y_is_bool):\n            y = ensure_object(y)\n            result = libops.vec_binop(x, y, roperator.or_)\n        else:\n            try:\n                if not isna(y):\n                    y = bool(y)\n                result = libops.scalar_binop(x, y, op)\n            except (\n                    TypeError,\n                    ValueError,\n                    AttributeError,\n                    OverflowError,\n                    NotImplementedError,\n            ):\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )\n\n    return result",
            "import_list": [
                "import numpy as np",
                "from pandas.api.types import is_bool, is_bool_dtype, ensure_object, isna",
                "from pandas.core import ops as libops",
                "from pandas.core.dtypes.common import is_integer",
                "from pandas.core.ops import roperator",
                "from pandas.core.dtypes.dtypes import (\n    bool_dtype,\n)"
            ]
        }
    ]
}