{
    "pandas": [
        {
            "bugID": 77,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 263,
            "file_name": "pandas/core/ops/array_ops.py",
            "replace_code": "def na_logical_op(x: np.ndarray, y, op):\n    if not isinstance(y, np.ndarray):\n        y = np.array([y])\n        \n    if x.dtype.kind in [\"i\", \"b\"] and y.dtype.kind in [\"i\", \"b\"]:\n        result = op(x, y)\n    elif np.issubdtype(x.dtype, np.bool_) and np.issubdtype(y.dtype, np.bool_):\n        result = op(x, y)\n    elif np.issubdtype(x.dtype, np.object) or np.issubdtype(y.dtype, np.object):\n        x = x.astype(np.object)\n        y = y.astype(np.object)\n        result = op(x, y)\n    else:\n        typ = type(y).__name__ if np.isscalar(y) else y.dtype.type.__name__\n        raise TypeError(\n            f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n            f\"and scalar of type [{typ}]\"\n        )\n\n    return result",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}