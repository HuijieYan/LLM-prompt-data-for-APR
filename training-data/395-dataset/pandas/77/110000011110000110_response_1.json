{
    "pandas": [
        {
            "bugID": 77,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 263,
            "file_name": "pandas/core/ops/array_ops.py",
            "replace_code": "def na_logical_op(x: np.ndarray, y, op):\n    try:\n        # For exposition, write:\n        yarr = isinstance(y, np.ndarray)\n        yint = np.issubdtype(type(y), np.integer) or (yarr and y.dtype.kind == \"i\")\n        ybool = np.issubdtype(type(y), np.bool_) or (yarr and y.dtype.kind == \"b\")\n        xint = x.dtype.kind == \"i\"\n        xbool = x.dtype.kind == \"b\"\n        if (xint or xbool) and (yint or ybool):\n            return op(x, y)\n    except TypeError:\n        if isinstance(y, np.ndarray):\n            # bool-bool dtype operations should be OK, should not get here\n            assert not (np.issubdtype(x.dtype, np.bool_) and np.issubdtype(y.dtype, np.bool_))\n            x = np.atleast_1d(x)\n            y = ensure_object(y)\n            result = np.vectorize(op, otypes=[object])(x, y)\n            return result\n        else:\n            # let null fall through\n            assert lib.is_scalar(y)\n            if not np.isnan(y):\n                y = bool(y)\n            try:\n                result = np.array(list(map(op, x, [y]*len(x))), dtype='O')\n                return result\n            except (\n                TypeError,\n                ValueError,\n                AttributeError,\n                OverflowError,\n                NotImplementedError,\n            ):\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}