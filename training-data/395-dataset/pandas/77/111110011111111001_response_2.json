{
    "pandas": [
        {
            "bugID": 77,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 263,
            "file_name": "pandas/core/ops/array_ops.py",
            "replace_code": "def na_logical_op(x: np.ndarray, y, op):\n    x_dtype = x.dtype\n    y_dtype = y.dtype if isinstance(y, np.ndarray) else type(y)\n    \n    if x_dtype.kind in ['i', 'b'] and (y_dtype.kind in ['i', 'b', 'f']):\n        result = op(x, y)\n    else:\n        if isinstance(y, np.ndarray):\n            assert not (x_dtype.kind == 'b' and y_dtype.kind == 'b')\n            x = np.asarray(x, dtype=object)\n            y = np.asarray(y, dtype=object)\n            result = libops.vec_binop(x, y, op)\n        else:\n            assert np.isscalar(y)\n            if not pd.isna(y):\n                y = bool(y)\n            try:\n                result = libops.scalar_binop(x, y, op)\n            except (TypeError, ValueError, AttributeError, OverflowError, NotImplementedError):\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x_dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )\n\n    return result",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}