{
    "pandas": [
        {
            "bugID": 77,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 263,
            "file_name": "pandas/core/ops/array_ops.py",
            "replace_code": "def na_logical_op(x: np.ndarray, y, op):\n    if x.dtype.kind in ['i', 'b'] and y.dtype.kind in ['i', 'b']:\n        # Convert arrays to a common data type\n        dtype = np.find_common_type([x.dtype, y.dtype], [])\n        x = x.astype(dtype)\n        y = y.astype(dtype)\n    elif x.dtype.kind in ['i', 'b'] and not y.dtype.kind in ['i', 'b']:\n        # Convert y to the data type of x\n        y = y.astype(x.dtype)\n    elif not x.dtype.kind in ['i', 'b'] and y.dtype.kind in ['i', 'b']:\n        # Convert x to the data type of y\n        x = x.astype(y.dtype)\n\n    try:\n        result = op(x, y)\n    except ValueError:\n        if isinstance(y, np.ndarray):\n            x = ensure_object(x)\n            y = ensure_object(y)\n            result = libops.vec_binop(x, y, op)\n        else:\n            assert lib.is_scalar(y)\n            if not isna(y):\n                y = bool(y)\n            try:\n                result = libops.scalar_binop(x, y, op)\n            except (\n                TypeError,\n                ValueError,\n                AttributeError,\n                OverflowError,\n                NotImplementedError,\n            ):\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )\n\n    return result",
            "import_list": []
        }
    ]
}