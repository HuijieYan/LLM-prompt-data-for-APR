{
    "1.1.1": "def na_logical_op(x: np.ndarray, y, op):\n    try:\n        # For exposition, write:\n        #  yarr = isinstance(y, np.ndarray)\n        #  yint = is_integer(y) or (yarr and y.dtype.kind == \"i\")\n        #  ybool = is_bool(y) or (yarr and y.dtype.kind == \"b\")\n        #  xint = x.dtype.kind == \"i\"\n        #  xbool = x.dtype.kind == \"b\"\n        # Then Cases where this goes through without raising include:\n        #  (xint or xbool) and (yint or bool)\n        result = op(x, y)\n    except TypeError:\n        if isinstance(y, np.ndarray):\n            # bool-bool dtype operations should be OK, should not get here\n            assert not (is_bool_dtype(x.dtype) and is_bool_dtype(y.dtype))\n            x = ensure_object(x)\n            y = ensure_object(y)\n            result = libops.vec_binop(x, y, op)\n        else:\n            # let null fall thru\n            assert lib.is_scalar(y)\n            if not isna(y):\n                y = bool(y)\n            try:\n                result = libops.scalar_binop(x, y, op)\n            except (\n                TypeError,\n                ValueError,\n                AttributeError,\n                OverflowError,\n                NotImplementedError,\n            ):\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )\n\n    return result\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/ops/array_ops.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_na_logical_op_2d():\n    left = np.arange(8).reshape(4, 2)\n    right = left.astype(object)\n    right[0, 0] = np.nan\n\n    # Check that we fall back to the vec_binop branch\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        operator.or_(left, right)\n\n    result = na_logical_op(left, right, operator.or_)\n    expected = right\n    tm.assert_numpy_array_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/arithmetic/test_array_ops.py"
    ],
    "2.1.1": [
        [
            "E           TypeError: unsupported operand type(s) for |: 'int' and 'float'",
            "E   ValueError: Buffer has wrong number of dimensions (expected 1, got 2)"
        ]
    ],
    "2.1.2": [
        [
            "x = array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)\ny = array([[nan, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)\nop = <built-in function or_>\n\n    def na_logical_op(x: np.ndarray, y, op):\n        try:\n            # For exposition, write:\n            #  yarr = isinstance(y, np.ndarray)\n            #  yint = is_integer(y) or (yarr and y.dtype.kind == \"i\")\n            #  ybool = is_bool(y) or (yarr and y.dtype.kind == \"b\")\n            #  xint = x.dtype.kind == \"i\"\n            #  xbool = x.dtype.kind == \"b\"\n            # Then Cases where this goes through without raising include:\n            #  (xint or xbool) and (yint or bool)\n>           result = op(x, y)",
            "\npandas/core/ops/array_ops.py:273: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_na_logical_op_2d():\n        left = np.arange(8).reshape(4, 2)\n        right = left.astype(object)\n        right[0, 0] = np.nan\n    \n        # Check that we fall back to the vec_binop branch\n        with pytest.raises(TypeError, match=\"unsupported operand type\"):\n            operator.or_(left, right)\n    \n>       result = na_logical_op(left, right, operator.or_)\n\npandas/tests/arithmetic/test_array_ops.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/array_ops.py:280: in na_logical_op\n    result = libops.vec_binop(x, y, op)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def vec_binop(object[:] left, object[:] right, object op):",
            "\npandas/_libs/ops.pyx:206: ValueError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "op": "<built-in function or_>",
                "x": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]])",
                "y": "array([[nan, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)",
                "x.dtype": "dtype('int64')",
                "y.dtype": "dtype('O')",
                "op.__name__": "'or_'",
                "x.shape": "(4, 2)"
            },
            {
                "result": "array([nan, 1, 2, 3, 4, 5, 6, 7], dtype=object)",
                "x": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)",
                "x.dtype": "dtype('O')"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "op": "builtin_function_or_method",
                "x": "ndarray",
                "y": "ndarray",
                "x.dtype": "dtype",
                "y.dtype": "dtype",
                "op.__name__": "str",
                "x.shape": "tuple"
            },
            {
                "result": "ndarray",
                "x": "ndarray",
                "x.dtype": "dtype"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}