{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, func):\n        if isinstance(func, datetime):\n            # used for detecting edge condition\n            nanosecond = getattr(func, \"nanosecond\", 0)\n            # reset timezone and nanosecond\n            # func may be a Timestamp, thus not use replace\n            func = datetime(\n                func.year,\n                func.month,\n                func.day,\n                func.hour,\n                func.minute,\n                func.second,\n                func.microsecond,\n            )\n            n = self.n\n    \n            # adjust func to reduce number of cases to handle\n            if n >= 0:\n                if func.time() in self.end or not self._is_on_offset(func):\n                    func = self._next_opening_time(func)\n            else:\n                if func.time() in self.start:\n                    # adjustment to move to previous business day\n                    func = func - timedelta(seconds=1)\n                if not self._is_on_offset(func):\n                    func = self._next_opening_time(func)\n                    func = self._get_closing_time(func)\n    \n            # get total business hours by sec in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(start, end)\n                for start, end in zip(self.start, self.end)\n            )\n    \n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n    \n            # adjust by business days first\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                # midnight business hour may not on BusinessDay\n                if not self.next_bday.is_on_offset(func):\n                    prev_open = self._prev_opening_time(func)\n                    remain = func - prev_open\n                    func = prev_open + skip_bd + remain\n                else:\n                    func = func + skip_bd\n    \n            # remaining business hours to adjust\n            bhour_remain = timedelta(minutes=r)\n    \n            if n >= 0:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = (\n                        self._get_closing_time(self._prev_opening_time(func)) - func\n                    )\n                    if bhour_remain < bhour:\n                        # finish adjusting if possible\n                        func += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        bhour_remain -= bhour\n                        func = self._next_opening_time(func + bhour)\n            else:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = self._next_opening_time(func) - func\n                    if (\n                        bhour_remain > bhour\n                        or bhour_remain == bhour\n                        and nanosecond != 0\n                    ):\n                        # finish adjusting if possible\n                        func += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        bhour_remain -= bhour\n                        func = self._get_closing_time(\n                            self._next_opening_time(\n                                func + bhour - timedelta(seconds=1)\n                            )\n                        )\n    \n            return func\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}