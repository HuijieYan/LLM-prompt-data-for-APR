{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        adjusted_other = other\n\n        # Handle positive and negative offsets\n        if n >= 0:\n            # If the time is not in the specified end time or the specified offset, adjust to the next opening time\n            if other.time() not in self.end or not self._is_on_offset(other):\n                adjusted_other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                adjusted_other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                adjusted_other = self._next_opening_time(other)\n                adjusted_other = self._get_closing_time(adjusted_other)\n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self._next_bday.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                adjusted_other = prev_open + skip_bd + remain\n            else:\n                adjusted_other = other + skip_bd\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_other)) - adjusted_other\n                if bhour_remain < bhour:\n                    adjusted_other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    adjusted_other = self._next_opening_time(adjusted_other + bhour)\n        else:\n            while bhour_remain != timedelta(0):\n                bhour = self._next_opening_time(adjusted_other) - adjusted_other\n                if bhour_remain > bhour:\n                    adjusted_other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    adjusted_other = self._get_closing_time(self._next_opening_time(adjusted_other + bhour - timedelta(seconds=1)))\n\n        return adjusted_other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "imports": []
        }
    ]
}