{
    "pandas": [
        {
            "bugID": 160,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 73,
            "file_name": "pandas/core/computation/expressions.py",
            "replace_code": "def _can_use_numexpr(op, op_str, a, b, dtype_check) -> bool:\n\n    \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n    if op_str is not None:\n    \n        # required min elements (otherwise we are adding overhead)\n        if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n            # check for dtype compatibility\n            dtypes = set()\n            array_like = [a, b]\n    \n            for o in array_like:\n                s = o if isinstance(o, pd.Series) else pd.DataFrame(o)\n                dtypes.update(set([s.dtypes]))\n    \n                if len(dtypes) != 1 or _ALLOWED_DTYPES[dtype_check] <= dtypes.pop():\n                    return False\n    \n    return True"
        }
    ]
}