{
    "pandas": [
        {
            "bugID": 160,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 73,
            "file_name": "pandas/core/computation/expressions.py",
            "replace_code": "def _can_use_numexpr(op, op_str, a, b, dtype_check):\n    \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n    if op_str is not None:\n        # required min elements (otherwise we are adding overhead)\n        if np.prod(a.shape) > _MIN_ELEMENTS:\n            # check for dtype compatibility\n            dtypes = set()\n            for o in [a, b]:\n                if isinstance(o, (pd.DataFrame, pd.Series)):\n                    dtype = o.dtypes if isinstance(o, pd.DataFrame) else o.dtype\n                    if isinstance(dtype, pd.DatetimeTZDtype):\n                        # This requires 'evaluate' dtype\n                        dtype = pd.np.dtype('datetime64[ns]')\n                    dtypes |= {dtype}\n            if not dtypes or all(_ALLOWED_DTYPES[dtype_check].dtype in dtypes for _ALLOWED_DTYPES[dtype_check] in _ALLOWED_DTYPES):\n                return True\n    return False",
            "imports": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}