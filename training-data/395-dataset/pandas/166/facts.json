{
    "1.1.1": "def _join_compat(\n    self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False\n):\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError(\"Other Series must have a name\")\n        other = DataFrame({other.name: other})\n\n    if isinstance(other, DataFrame):\n        return merge(\n            self,\n            other,\n            left_on=on,\n            how=how,\n            left_index=on is None,\n            right_index=True,\n            suffixes=(lsuffix, rsuffix),\n            sort=sort,\n        )\n    else:\n        if on is not None:\n            raise ValueError(\n                \"Joining multiple DataFrames only supported for joining on index\"\n            )\n\n        frames = [self] + list(other)\n\n        can_concat = all(df.index.is_unique for df in frames)\n\n        # join indexes only using concat\n        if can_concat:\n            if how == \"left\":\n                res = concat(frames, axis=1, join=\"outer\", verify_integrity=True)\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(frames, axis=1, join=how, verify_integrity=True)\n\n        joined = frames[0]\n\n        for frame in frames[1:]:\n            joined = merge(\n                joined, frame, how=how, left_index=True, right_index=True\n            )\n\n        return joined\n",
    "1.1.2": null,
    "1.2.1": "class DataFrame(NDFrame)",
    "1.2.2": "Two-dimensional size-mutable, potentially heterogeneous tabular data\nstructure with labeled axes (rows and columns). Arithmetic operations\nalign on both row and column labels. Can be thought of as a dict-like\ncontainer for Series objects. The primary pandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer\ncopy : boolean, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nDataFrame.from_items : From sequence of (key, value) pairs\n    read_csv, pandas.read_table, pandas.read_clipboard.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
    "1.2.3": [
        "reindex(self, *args, **kwargs)",
        "merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/frame.py",
    "1.3.2": [
        "reindex(self, *args, **kwargs)",
        "merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\"sort_kw\", [True, False, None])\ndef test_suppress_future_warning_with_sort_kw(sort_kw):\n    a = DataFrame({\"col1\": [1, 2]}, index=[\"c\", \"a\"])\n\n    b = DataFrame({\"col2\": [4, 5]}, index=[\"b\", \"a\"])\n\n    c = DataFrame({\"col3\": [7, 8]}, index=[\"a\", \"b\"])\n\n    expected = DataFrame(\n        {\n            \"col1\": {\"a\": 2.0, \"b\": float(\"nan\"), \"c\": 1.0},\n            \"col2\": {\"a\": 5.0, \"b\": 4.0, \"c\": float(\"nan\")},\n            \"col3\": {\"a\": 7.0, \"b\": 8.0, \"c\": float(\"nan\")},\n        }\n    )\n    if sort_kw is False:\n        expected = expected.reindex(index=[\"c\", \"a\", \"b\"])\n\n    if sort_kw is None:\n        # only warn if not explicitly specified\n        ctx = tm.assert_produces_warning(FutureWarning, check_stacklevel=False)\n    else:\n        ctx = tm.assert_produces_warning(None, check_stacklevel=False)\n\n    with ctx:\n        result = a.join([b, c], how=\"outer\", sort=sort_kw)\n    tm.assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\"sort_kw\", [True, False, None])\ndef test_suppress_future_warning_with_sort_kw(sort_kw):\n    a = DataFrame({\"col1\": [1, 2]}, index=[\"c\", \"a\"])\n\n    b = DataFrame({\"col2\": [4, 5]}, index=[\"b\", \"a\"])\n\n    c = DataFrame({\"col3\": [7, 8]}, index=[\"a\", \"b\"])\n\n    expected = DataFrame(\n        {\n            \"col1\": {\"a\": 2.0, \"b\": float(\"nan\"), \"c\": 1.0},\n            \"col2\": {\"a\": 5.0, \"b\": 4.0, \"c\": float(\"nan\")},\n            \"col3\": {\"a\": 7.0, \"b\": 8.0, \"c\": float(\"nan\")},\n        }\n    )\n    if sort_kw is False:\n        expected = expected.reindex(index=[\"c\", \"a\", \"b\"])\n\n    if sort_kw is None:\n        # only warn if not explicitly specified\n        ctx = tm.assert_produces_warning(FutureWarning, check_stacklevel=False)\n    else:\n        ctx = tm.assert_produces_warning(None, check_stacklevel=False)\n\n    with ctx:\n        result = a.join([b, c], how=\"outer\", sort=sort_kw)\n    tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/frame/test_join.py",
        "pandas/tests/frame/test_join.py"
    ],
    "2.1.1": [
        [
            "E               AssertionError: Caused unexpected warning(s): [('FutureWarning', FutureWarning(\"Sorting because non-concatenation axis is not aligned. A future version\\nof pandas will change to not sort by default.\\n\\nTo accept the future behavior, pass 'sort=False'.\\n\\nTo retain the current behavior and silence the warning, pass 'sort=True'.\\n\"), '/Volumes/JerrySSD/bgp_envs/repos/pandas_166/pandas/core/frame.py', 7216)]."
        ],
        [
            "E               AssertionError: Caused unexpected warning(s): [('FutureWarning', FutureWarning(\"Sorting because non-concatenation axis is not aligned. A future version\\nof pandas will change to not sort by default.\\n\\nTo accept the future behavior, pass 'sort=False'.\\n\\nTo retain the current behavior and silence the warning, pass 'sort=True'.\\n\"), '/Volumes/JerrySSD/bgp_envs/repos/pandas_166/pandas/core/frame.py', 7216)]."
        ]
    ],
    "2.1.2": [
        [
            "sort_kw = True\n\n    @pytest.mark.parametrize(\"sort_kw\", [True, False, None])\n    def test_suppress_future_warning_with_sort_kw(sort_kw):\n        a = DataFrame({\"col1\": [1, 2]}, index=[\"c\", \"a\"])\n    \n        b = DataFrame({\"col2\": [4, 5]}, index=[\"b\", \"a\"])\n    \n        c = DataFrame({\"col3\": [7, 8]}, index=[\"a\", \"b\"])\n    \n        expected = DataFrame(\n            {\n                \"col1\": {\"a\": 2.0, \"b\": float(\"nan\"), \"c\": 1.0},\n                \"col2\": {\"a\": 5.0, \"b\": 4.0, \"c\": float(\"nan\")},\n                \"col3\": {\"a\": 7.0, \"b\": 8.0, \"c\": float(\"nan\")},\n            }\n        )\n        if sort_kw is False:\n            expected = expected.reindex(index=[\"c\", \"a\", \"b\"])\n    \n        if sort_kw is None:\n            # only warn if not explicitly specified\n            ctx = tm.assert_produces_warning(FutureWarning, check_stacklevel=False)\n        else:\n            ctx = tm.assert_produces_warning(None, check_stacklevel=False)\n    \n        with ctx:\n>           result = a.join([b, c], how=\"outer\", sort=sort_kw)\n\npandas/tests/frame/test_join.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._GeneratorContextManager object at 0x122a7b760>, type = None\nvalue = None, traceback = None\n\n    def __exit__(self, type, value, traceback):\n        if type is None:\n            try:\n>               next(self.gen)",
            "\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:120: AssertionError"
        ],
        [
            "sort_kw = False\n\n    @pytest.mark.parametrize(\"sort_kw\", [True, False, None])\n    def test_suppress_future_warning_with_sort_kw(sort_kw):\n        a = DataFrame({\"col1\": [1, 2]}, index=[\"c\", \"a\"])\n    \n        b = DataFrame({\"col2\": [4, 5]}, index=[\"b\", \"a\"])\n    \n        c = DataFrame({\"col3\": [7, 8]}, index=[\"a\", \"b\"])\n    \n        expected = DataFrame(\n            {\n                \"col1\": {\"a\": 2.0, \"b\": float(\"nan\"), \"c\": 1.0},\n                \"col2\": {\"a\": 5.0, \"b\": 4.0, \"c\": float(\"nan\")},\n                \"col3\": {\"a\": 7.0, \"b\": 8.0, \"c\": float(\"nan\")},\n            }\n        )\n        if sort_kw is False:\n            expected = expected.reindex(index=[\"c\", \"a\", \"b\"])\n    \n        if sort_kw is None:\n            # only warn if not explicitly specified\n            ctx = tm.assert_produces_warning(FutureWarning, check_stacklevel=False)\n        else:\n            ctx = tm.assert_produces_warning(None, check_stacklevel=False)\n    \n        with ctx:\n>           result = a.join([b, c], how=\"outer\", sort=sort_kw)\n\npandas/tests/frame/test_join.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._GeneratorContextManager object at 0x122a8a2e0>, type = None\nvalue = None, traceback = None\n\n    def __exit__(self, type, value, traceback):\n        if type is None:\n            try:\n>               next(self.gen)",
            "\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:120: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "other": {
                    "value": "[   col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "2",
                    "omitted": false
                },
                "self": {
                    "value": "   col1\nc     1\na     2",
                    "shape": "(2, 1)",
                    "omitted": false
                },
                "how": {
                    "value": "'outer'",
                    "shape": "5",
                    "omitted": false
                },
                "lsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "rsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "sort": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['c', 'a'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "frames": {
                    "value": "[   col1\nc     1\na     2,    col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "3",
                    "omitted": false
                },
                "can_concat": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "[   col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "2",
                    "omitted": false
                },
                "self": {
                    "value": "   col1\nc     1\na     2",
                    "shape": "(2, 1)",
                    "omitted": false
                },
                "how": {
                    "value": "'outer'",
                    "shape": "5",
                    "omitted": false
                },
                "lsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "rsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['c', 'a'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "frames": {
                    "value": "[   col1\nc     1\na     2,    col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "3",
                    "omitted": false
                },
                "can_concat": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "[   col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "2",
                    "omitted": false
                },
                "self": {
                    "value": "   col1\nc     1\na     2",
                    "shape": "(2, 1)",
                    "omitted": false
                },
                "how": {
                    "value": "'outer'",
                    "shape": "5",
                    "omitted": false
                },
                "lsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "rsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['c', 'a'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "frames": {
                    "value": "[   col1\nc     1\na     2,    col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "3",
                    "omitted": false
                },
                "can_concat": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "other": "list",
                "self": "DataFrame",
                "how": "str",
                "lsuffix": "str",
                "rsuffix": "str",
                "sort": "bool",
                "self.index": "Index"
            },
            {
                "frames": "list",
                "can_concat": "bool"
            }
        ],
        [
            {
                "other": "list",
                "self": "DataFrame",
                "how": "str",
                "lsuffix": "str",
                "rsuffix": "str",
                "sort": "bool",
                "self.index": "Index"
            },
            {
                "frames": "list",
                "can_concat": "bool"
            }
        ],
        [
            {
                "other": "list",
                "self": "DataFrame",
                "how": "str",
                "lsuffix": "str",
                "rsuffix": "str",
                "self.index": "Index"
            },
            {
                "frames": "list",
                "can_concat": "bool"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "other": {
                    "value": "[   col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "2",
                    "omitted": false
                },
                "self": {
                    "value": "   col1\nc     1\na     2",
                    "shape": "(2, 1)",
                    "omitted": false
                },
                "how": {
                    "value": "'outer'",
                    "shape": "5",
                    "omitted": false
                },
                "lsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "rsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "sort": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['c', 'a'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "frames": {
                    "value": "[   col1\nc     1\na     2,    col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "3",
                    "omitted": false
                },
                "can_concat": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "[   col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "2",
                    "omitted": false
                },
                "self": {
                    "value": "   col1\nc     1\na     2",
                    "shape": "(2, 1)",
                    "omitted": false
                },
                "how": {
                    "value": "'outer'",
                    "shape": "5",
                    "omitted": false
                },
                "lsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "rsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "sort": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['c', 'a'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "frames": {
                    "value": "[   col1\nc     1\na     2,    col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "3",
                    "omitted": false
                },
                "can_concat": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "other": {
                    "value": "[   col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "2",
                    "omitted": false
                },
                "self": {
                    "value": "   col1\nc     1\na     2",
                    "shape": "(2, 1)",
                    "omitted": false
                },
                "how": {
                    "value": "'outer'",
                    "shape": "5",
                    "omitted": false
                },
                "lsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "rsuffix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "self.index": {
                    "value": "Index(['c', 'a'], dtype='object')",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "frames": {
                    "value": "[   col1\nc     1\na     2,    col2\nb     4\na     5,    col3\na     7\nb     8]",
                    "shape": "3",
                    "omitted": false
                },
                "can_concat": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "other": "list",
                "self": "DataFrame",
                "how": "str",
                "lsuffix": "str",
                "rsuffix": "str",
                "sort": "bool",
                "self.index": "Index"
            },
            {
                "frames": "list",
                "can_concat": "bool"
            }
        ],
        [
            {
                "other": "list",
                "self": "DataFrame",
                "how": "str",
                "lsuffix": "str",
                "rsuffix": "str",
                "sort": "bool",
                "self.index": "Index"
            },
            {
                "frames": "list",
                "can_concat": "bool"
            }
        ],
        [
            {
                "other": "list",
                "self": "DataFrame",
                "how": "str",
                "lsuffix": "str",
                "rsuffix": "str",
                "self.index": "Index"
            },
            {
                "frames": "list",
                "can_concat": "bool"
            }
        ]
    ],
    "3.1.1": [
        "Concatenation warning still appears with sort=False\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\na = pd.DataFrame(\n    {'col1': [1, 2, 3, 4, 5],\n     'col2': [6, 7, 8, 9, 10]},\n    index=['a', 'c', 'e', 'f', 'i'])\na.index.name = 'index_name'\nb = pd.DataFrame(\n    {'col4': [1, 2, 3, 4, 5],\n     'col3': [1, 2, 3, 4, 5]},\n    index=['a', 'b', 'c', 'd', 'e'])\nb.index.name = 'index_name'\nc = pd.DataFrame(\n    {'col5': [1, 2, 3, 4, 5]},\n    index=['f', 'g', 'h', 'i', 'j'])\nc.index.name = 'index_name'\ndfs = [a, b, c]\n\ndfs[0].join(dfs[1:], how='outer', sort=True)\ndfs[0].join(dfs[1:], how='outer', sort=False)\nProblem description\nRunning either or the last two lines still shows the warning. For example, the last step gives me\n\n/homes/nber/barronk-dua51929/local/anaconda3/envs/medicare_utils/lib/python3.6/site-packages/pandas/core/frame.py:6369: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\nof pandas will change to not sort by default.\n\nTo accept the future behavior, pass 'sort=False'.\n\nTo retain the current behavior and silence the warning, pass 'sort=True'.\n\n  verify_integrity=True)\ncol1\tcol2\tcol4\tcol3\tcol5\na\t1.0\t6.0\t1.0\t1.0\tNaN\nb\tNaN\tNaN\t2.0\t2.0\tNaN\nc\t2.0\t7.0\t3.0\t3.0\tNaN\nd\tNaN\tNaN\t4.0\t4.0\tNaN\ne\t3.0\t8.0\t5.0\t5.0\tNaN\nf\t4.0\t9.0\tNaN\tNaN\t1.0\ng\tNaN\tNaN\tNaN\tNaN\t2.0\nh\tNaN\tNaN\tNaN\tNaN\t3.0\ni\t5.0\t10.0\tNaN\tNaN\t4.0\nj\tNaN\tNaN\tNaN\tNaN\t5.0\nBy passing sort=False, the warning should be hidden. From here I believed that passing True or False for the sort argument should silence the warning.\n\nI'm using pandas 0.23.3.\n\nExpected Output\nSilenced warning.\n"
    ]
}