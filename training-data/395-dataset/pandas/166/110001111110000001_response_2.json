{
    "pandas": [
        {
            "bugID": 166,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 7178,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _join_compat(self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False):\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError(\"Other Series must have a name\")\n        other = DataFrame({other.name: other})\n\n    if isinstance(other, DataFrame):\n        return self.join(other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sortable_name=sort)\n    else:\n        if on is not None:\n            raise ValueError(\"Joining multiple DataFrames only supported for joining on index\")\n\n        frames = [self] + list(other)\n\n        can_concat = all(df.index.is_unique for df in frames)\n\n        # join indexes only using concat\n        if can_concat:\n            if how == \"left\":\n                res = concat(frames, axis=1, join=\"outer\", verify_integrity=True)\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(frames, axis=1, join=how, verify_integrity=True)\n\n        joined = frames[0]\n\n        for frame in frames[1:]:\n            joined = joined.join(frame, how=how, lsuffix=lsuffix, rsuffix=rsuffix)\n\n        return joined",
            "import_list": [
                "from pandas.core.reshape.concat import concat"
            ]
        }
    ]
}