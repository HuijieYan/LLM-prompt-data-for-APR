{
    "pandas": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1070,
            "file_name": "pandas/core/indexing.py",
            "replace_code": "def _getitem_axis(self, key, axis: int):\n    if isinstance(key, (list, np.ndarray)):\n        # Convert key to a list if it's an iterator\n        if is_iterator(key):\n            key = list(key)\n\n        # check for partial string matching in labels\n        labels = self.obj._get_axis(axis)\n        key = labels._get_partial_string_timestamp_match_key(key)\n\n        # handle different types of list-like indexers\n        if isinstance(labels, ABCMultiIndex):\n            # handle different types of list-like indexers for a MultiIndex\n            if isinstance(key, (ABCSeries, np.ndarray)) and key.ndim <= 1:\n                key = list(key)\n            elif isinstance(key, ABCDataFrame):\n                raise NotImplementedError(\"Indexing a MultiIndex with a DataFrame key is not implemented\")\n            elif hasattr(key, \"ndim\") and key.ndim > 1:\n                raise NotImplementedError(\"Indexing a MultiIndex with a multidimensional key is not implemented\")\n\n            if not isinstance(key, tuple) and len(key) and not isinstance(key[0], tuple):\n                key = tuple([key])\n\n        # handle iterable multi-selection\n        if not (isinstance(key, tuple) and isinstance(labels, ABCMultiIndex)):\n            if hasattr(key, \"ndim\") and key.ndim > 1:\n                raise ValueError(\"Cannot index with a multidimensional key\")\n            return self._getitem_iterable(key, axis=axis)\n\n        # handle nested tuple slicing\n        if is_nested_tuple(key, labels):\n            locs = labels.get_locs(key)\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = locs\n            return self.obj.iloc[tuple(indexer)]\n\n    elif isinstance(key, slice):\n        self._validate_key(key, axis)\n        return self._get_slice_axis(key, axis=axis)\n\n    elif com.is_bool_indexer(key):\n        return self._getbool_axis(key, axis=axis)\n\n    else:\n        # fall through to straight lookup for other types of keys\n        self._validate_key(key, axis)\n        return self._get_label(key, axis=axis)",
            "imports": []
        }
    ]
}