{
    "pandas": [
        {
            "bugID": 148,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 188,
            "file_name": "pandas/core/apply.py",
            "replace_code": "def apply_empty_result(self):\n    \"\"\"\n    we have an empty result; at least 1 axis is 0\n\n    we will try to apply the function to an empty\n    series in order to see if this is a reduction function\n    \"\"\"\n\n    # Check if the result_type is not \"reduce\" or None\n    if self.result_type not in [\"reduce\", None]:\n        return self.obj.copy()\n\n    # Get the data type of the DataFrame\n    dtype = self.obj._get_cacher(dtype=self.result_type).dtype\n\n    # Return an empty Series with the appropriate dtype\n    return self.obj._constructor_sliced(np.nan, index=self.agg_axis, dtype=dtype)",
            "import_list": []
        }
    ]
}