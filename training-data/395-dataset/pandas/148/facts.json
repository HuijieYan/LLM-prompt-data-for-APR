{
    "1.1.1": "def apply_empty_result(self):\n    \n\n    # we are not asked to reduce or infer reduction\n    # so just return a copy of the existing object\n    if self.result_type not in [\"reduce\", None]:\n        return self.obj.copy()\n\n    # we may need to infer\n    should_reduce = self.result_type == \"reduce\"\n\n    from pandas import Series\n\n    if not should_reduce:\n\n        EMPTY_SERIES = Series([])\n        try:\n            r = self.f(EMPTY_SERIES, *self.args, **self.kwds)\n        except Exception:\n            pass\n        else:\n            should_reduce = not isinstance(r, Series)\n\n    if should_reduce:\n        return self.obj._constructor_sliced(np.nan, index=self.agg_axis)\n    else:\n        return self.obj.copy()\n",
    "1.1.2": "we have an empty result; at least 1 axis is 0\n\nwe will try to apply the function to an empty\nseries in order to see if this is a reduction function",
    "1.2.1": "class FrameApply()",
    "1.2.2": null,
    "1.2.3": [
        "agg_axis(self)",
        "f(x)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/apply.py",
    "1.3.2": [
        "agg_axis(self)",
        "f(x)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n        assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n        assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n        assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n        assert_series_equal(result, expected)",
        "    def test_nunique_empty(self):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.nunique()\n        expected = Series(0, index=df.columns)\n        assert_series_equal(result, expected)\n\n        result = df.T.nunique()\n        expected = Series([], index=pd.Index([]))\n        assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/frame/test_apply.py",
        "pandas/tests/frame/test_apply.py",
        "pandas/tests/frame/test_apply.py",
        "pandas/tests/frame/test_apply.py",
        "pandas/tests/frame/test_apply.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: Series are different\nE   \nE   Series values are different (100.0 %)\nE   [left]:  [nan, nan, nan]\nE   [right]: [0.0, 0.0, 0.0]"
        ],
        [
            "E   AssertionError: Series are different\nE   \nE   Series values are different (100.0 %)\nE   [left]:  [nan, nan, nan]\nE   [right]: [1.0, 1.0, 1.0]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  float64\nE       [right]: bool"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  float64\nE       [right]: bool"
        ],
        [
            "E           AssertionError: Series Expected type <class 'pandas.core.series.Series'>, found <class 'pandas.core.frame.DataFrame'> instead"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x12281eac0>\nfunc = 'sum'\n\n    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n>       assert_series_equal(result, expected)\n\npandas/tests/frame/test_apply.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:176: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x12298f880>\nfunc = 'prod'\n\n    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n>       assert_series_equal(result, expected)\n\npandas/tests/frame/test_apply.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:176: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x122a6c550>\nfunc = 'any'\n\n    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n>       assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_apply.py:126: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x122a97d90>\nfunc = 'all'\n\n    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n>       assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_apply.py:126: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x122a9e580>\n\n    def test_nunique_empty(self):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.nunique()\n        expected = Series(0, index=df.columns)\n>       assert_series_equal(result, expected)\n\npandas/tests/frame/test_apply.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = Empty DataFrame\nColumns: [a, b, c]\nIndex: []\nright = a    0\nb    0\nc    0\ndtype: int64\ncls = <class 'pandas.core.series.Series'>\n\n    def _check_isinstance(left, right, cls):\n        \"\"\"\n        Helper method for our assert_* methods that ensures that\n        the two objects being compared have the right type before\n        proceeding with the comparison.\n    \n        Parameters\n        ----------\n        left : The first object being compared.\n        right : The second object being compared.\n        cls : The class type to check against.\n    \n        Raises\n        ------\n        AssertionError : Either `left` or `right` is not an instance of `cls`.\n        \"\"\"\n    \n        err_msg = \"{name} Expected type {exp_type}, found {act_type} instead\"\n        cls_name = cls.__name__\n    \n        if not isinstance(left, cls):\n>           raise AssertionError(\n                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))\n            )",
            "\npandas/util/testing.py:389: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.args": {
                    "value": "()",
                    "shape": "0",
                    "omitted": false
                },
                "self.kwds": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "EMPTY_SERIES": {
                    "value": "Series([], dtype: float64)",
                    "shape": "(0,)",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x1108632c0>",
                    "omitted": false
                },
                "r": {
                    "value": "0.0",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.args": {
                    "value": "()",
                    "shape": "0",
                    "omitted": false
                },
                "self.kwds": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "EMPTY_SERIES": {
                    "value": "Series([], dtype: float64)",
                    "shape": "(0,)",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x1108632c0>",
                    "omitted": false
                },
                "r": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.args": {
                    "value": "()",
                    "shape": "0",
                    "omitted": false
                },
                "self.kwds": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "EMPTY_SERIES": {
                    "value": "Series([], dtype: float64)",
                    "shape": "(0,)",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x1108632c0>",
                    "omitted": false
                },
                "r": {
                    "value": "False",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.args": {
                    "value": "()",
                    "shape": "0",
                    "omitted": false
                },
                "self.kwds": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "EMPTY_SERIES": {
                    "value": "Series([], dtype: float64)",
                    "shape": "(0,)",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x1108632c0>",
                    "omitted": false
                },
                "r": {
                    "value": "True",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.args": {
                    "value": "()",
                    "shape": "0",
                    "omitted": false
                },
                "self.kwds": {
                    "value": "{'dropna': True}",
                    "shape": "1",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "EMPTY_SERIES": {
                    "value": "Series([], dtype: float64)",
                    "shape": "(0,)",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x1108632c0>",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type",
                "r": "float64"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type",
                "r": "float64"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type",
                "r": "bool_"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type",
                "r": "bool_"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "r": {
                    "value": "0.0",
                    "shape": "()",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x106edf220>",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "r": {
                    "value": "1.0",
                    "shape": "()",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x106edf220>",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "r": {
                    "value": "False",
                    "shape": "()",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x106edf220>",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "r": {
                    "value": "True",
                    "shape": "()",
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x106edf220>",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                    "shape": "(0, 3)",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index(['a', 'b', 'c'], dtype='object')",
                    "shape": "(3,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "r": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x106edf220>",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self.obj": {
                    "value": "Empty DataFrame\nColumns: []\nIndex: [a, b, c]",
                    "shape": "(3, 0)",
                    "omitted": false
                },
                "self.agg_axis": {
                    "value": "Index([], dtype='object')",
                    "shape": "(0,)",
                    "omitted": false
                }
            },
            {
                "should_reduce": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "r": {
                    "value": "nan",
                    "shape": null,
                    "omitted": false
                },
                "Series": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x106edf220>",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "float64",
                "Series": "type"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "float64",
                "Series": "type"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "bool_",
                "Series": "type"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "bool_",
                "Series": "type"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "int",
                "Series": "type"
            }
        ],
        [
            {
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "float",
                "Series": "type"
            }
        ]
    ],
    "3.1.1": [
        "DataFrame.nunique and Series.nunique not consistent when Empty\n",
        "DataFrame.nunique is incorrect for DataFrame with no columns\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nExample A:\n\n>>> import pandas as pd\n>>> df = pd.DataFrame({\"a\": [1, 2], \"b\": [3, 4], \"c\": [5, 6]})\n>>> assert df.nunique().tolist() == [df[col].nunique() for col in df.columns]\n# Both equal [2, 2, 2]\nExample B:\n\n>>> df = pd.DataFrame(columns=['a', 'b', 'c'])\n>>> df.nunique()\n# Empty DataFrame\n# Columns: [a, b, c]\n# Index: []\n\n>>> [df[col].nunique() for col in df.columns]\n# [0, 0, 0]\nProblem description\nIn Example A, when a DataFrame isn't empty, getting nunique is consistent between the DataFrame and Series approaches; however, when a DataFrame is empty (Example B), DataFrame.nunique returns itself, while the Series approach returns 0.\n\nExpected Output\nI would expect df.nunique to return 0 for each column, consistent with how a Series behaves. An empty object, by definition, has 0 unique elements in my mind.\n",
        "(edit by @TomAugspurger)\n\nCurrent output:\n\nIn [33]: pd.DataFrame(index=[0, 1]).nunique()\nOut[33]:\nEmpty DataFrame\nColumns: []\nIndex: [0, 1]\nExpected Output is an empty series:\n\nOut[34]: Series([], dtype: float64)\nNot sure what the expected dtype of that Series should be... probably object.\n\noriginal post below:\n\nCode Sample, a copy-pastable example if possible\nWith Pandas 0.20.3\n\n# create a DataFrame with 3 rows\ndf = pd.DataFrame({'a': ['A','B','C']})\n\n# lookup unique values for each column, excluding 'a'\nunique = df.loc[:, (df.columns != 'a')].nunique()\n# this results in an empty Series, the index is also empty\nunique.index.tolist()\n>>> []\n# and\nunique[unique == 1].index.tolist()\n>>> []\nWith pandas 0.23.3\n\n# create a DataFrame with 3 rows\ndf = pd.DataFrame({'a': ['A','B','C']})\n\n# lookup unique values for each column, excluding 'a'\nunique = df.loc[:, (df.columns != 'a')].nunique()\n# this results in an empty Series, but the index is not empty\nunique.index.tolist()\n>>> [1,2,3]\nalso:\nunique[unique == 1].index.tolist()\n>>> [1,2,3]\nNote:\n\n# if we have don't have an empty df, the behavior of nunique() seems fine:\ndf = pd.DataFrame({'a': ['A','B','C'], 'b': [1,1,1]})\nunique = df.loc[:, (df.columns != 'a')].nunique()\n\nunique[unique == 1]\n>>> b    1\n>>> dtype: int64\n# and\nunique[unique == 1].index.tolist()\n>>> ['b']\nProblem description\nThe change of behavior is a bit disturbing, and seems like it is a bug:\nnunique() ends up creating a Series, and it should be a Series of the df columns, but that doesn't seem to be the case here, instead it is picking up the index of the df.\n\nThis is likely related to:\n\n#21932\n#21255\n\nI am posting this because in my use case I use the list to drop the columns, but i end up with column names that do not exist in the df\n"
    ]
}