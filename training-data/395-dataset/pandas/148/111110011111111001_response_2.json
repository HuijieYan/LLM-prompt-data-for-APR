{
    "pandas": [
        {
            "bugID": 148,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 188,
            "file_name": "pandas/core/apply.py",
            "replace_code": "def apply_empty_result(self):\n    \"\"\"\n    we have an empty result; at least 1 axis is 0\n    \n    we will try to apply the function to an empty\n    series in order to see if this is a reduction function\n    \"\"\"\n\n    from pandas import Series\n\n    # Check if it's a reduction function\n    if self.result_type == \"reduce\":\n        return self.obj._constructor_sliced(np.nan, index=self.agg_axis)\n    elif self.result_type is None:\n        return self.obj.copy()\n\n    # Handle the case of an empty DataFrame\n    if self.obj.empty:\n        empty_series = Series([])\n        try:\n            r = self.f(empty_series, *self.args, **self.kwds)\n        except Exception:\n            pass\n        else:\n            if isinstance(r, Series):\n                return self.obj.copy()\n            else:\n                return self.obj._constructor_sliced(np.nan, index=self.agg_axis)\n    else:\n        return self.obj.copy()",
            "import_list": [
                "from pandas import Series"
            ]
        }
    ]
}