{
    "1.1.1": "def to_period(self, freq=None):\n    \n    from pandas.core.arrays import PeriodArray\n\n    if self.tz is not None:\n        warnings.warn(\n            \"Converting to PeriodArray/Index representation \"\n            \"will drop timezone information.\",\n            UserWarning,\n        )\n\n    if freq is None:\n        freq = self.freqstr or self.inferred_freq\n\n        if freq is None:\n            raise ValueError(\n                \"You must pass a freq argument as current index has none.\"\n            )\n\n        freq = get_period_alias(freq)\n\n    return PeriodArray._from_datetime64(self._data, freq, tz=self.tz)\n",
    "1.1.2": "Cast to PeriodArray/Index at a particular frequency.\n\nConverts DatetimeArray/Index to PeriodArray/Index.\n\nParameters\n----------\nfreq : str or Offset, optional\n    One of pandas' :ref:`offset strings <timeseries.offset_aliases>`\n    or an Offset object. Will be inferred by default.\n\nReturns\n-------\nPeriodArray/Index\n\nRaises\n------\nValueError\n    When converting a DatetimeArray/Index with non-regular values,\n    so that a frequency cannot be inferred.\n\nSee Also\n--------\nPeriodIndex: Immutable ndarray holding ordinal values.\nDatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\nExamples\n--------\n>>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n...                                         \"2000-05-31 00:00:00\",\n...                                         \"2000-08-31 00:00:00\"]))\n>>> df.index.to_period(\"M\")\nPeriodIndex(['2000-03', '2000-05', '2000-08'],\n            dtype='period[M]', freq='M')\n\nInfer the daily frequency\n\n>>> idx = pd.date_range(\"2017-01-01\", periods=2)\n>>> idx.to_period()\nPeriodIndex(['2017-01-01', '2017-01-02'],\n            dtype='period[D]', freq='D')",
    "1.2.1": "class DatetimeArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps, dtl.DatelikeOps)",
    "1.2.2": "Pandas ExtensionArray for tz-naive or tz-aware datetime data.\n\n.. versionadded:: 0.24.0\n\n.. warning::\n\n   DatetimeArray is currently experimental, and its API may change\n   without warning. In particular, :attr:`DatetimeArray.dtype` is\n   expected to change to always be an instance of an ``ExtensionDtype``\n   subclass.\n\nParameters\n----------\nvalues : Series, Index, DatetimeArray, ndarray\n    The datetime data.\n\n    For DatetimeArray `values` (or a Series or Index boxing one),\n    `dtype` and `freq` will be extracted from `values`.\n\ndtype : numpy.dtype or DatetimeTZDtype\n    Note that the only NumPy dtype allowed is 'datetime64[ns]'.\nfreq : str or Offset, optional\n    The frequency.\ncopy : bool, default False\n    Whether to copy the underlying array of values.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone",
    "1.2.3": [
        "tz(self)",
        "tz(self, value)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/arrays/datetimes.py",
    "1.3.2": [
        "tz(self)",
        "tz(self, value)"
    ],
    "1.4.1": [
        "    def test_to_period_infer(self):\n        # https://github.com/pandas-dev/pandas/issues/33358\n        rng = date_range(\n            start=\"2019-12-22 06:40:00+00:00\",\n            end=\"2019-12-22 08:45:00+00:00\",\n            freq=\"5min\",\n        )\n\n        with tm.assert_produces_warning(None):\n            # Using simple filter because we are not checking for the warning here\n            warnings.simplefilter(\"ignore\", UserWarning)\n\n            pi1 = rng.to_period(\"5min\")\n\n        with tm.assert_produces_warning(None):\n            # Using simple filter because we are not checking for the warning here\n            warnings.simplefilter(\"ignore\", UserWarning)\n\n            pi2 = rng.to_period()\n\n        tm.assert_index_equal(pi1, pi2)"
    ],
    "1.4.2": [
        "pandas/tests/indexes/datetimes/test_to_period.py"
    ],
    "2.1.1": [
        [
            "E   AttributeError: 'NoneType' object has no attribute 'n'"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.indexes.datetimes.test_to_period.TestToPeriod object at 0x1166889d0>\n\n    def test_to_period_infer(self):\n        # https://github.com/pandas-dev/pandas/issues/33358\n        rng = date_range(\n            start=\"2019-12-22 06:40:00+00:00\",\n            end=\"2019-12-22 08:45:00+00:00\",\n            freq=\"5min\",\n        )\n    \n        with tm.assert_produces_warning(None):\n            # Using simple filter because we are not checking for the warning here\n            warnings.simplefilter(\"ignore\", UserWarning)\n    \n            pi1 = rng.to_period(\"5min\")\n    \n        with tm.assert_produces_warning(None):\n            # Using simple filter because we are not checking for the warning here\n            warnings.simplefilter(\"ignore\", UserWarning)\n    \n>           pi2 = rng.to_period()\n\npandas/tests/indexes/datetimes/test_to_period.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexes/extension.py:80: in method\n    result = attr(self._data, *args, **kwargs)\npandas/core/arrays/datetimes.py:1102: in to_period\n    return PeriodArray._from_datetime64(self._data, freq, tz=self.tz)\npandas/core/arrays/period.py:221: in _from_datetime64\n    data, freq = dt64arr_to_periodarr(data, freq, tz)\npandas/core/arrays/period.py:919: in dt64arr_to_periodarr\n    freq = Period._maybe_convert_freq(freq)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   if freq.n <= 0:",
            "\npandas/_libs/tslibs/period.pyx:1575: AttributeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.tz": "<UTC>",
                "self": "array of shape (26,)",
                "freq": "'5min'",
                "self.freqstr": "'5T'",
                "self.inferred_freq": "'5T'",
                "self._data": "array of shape (26,)"
            },
            {
                "PeriodArray._from_datetime64": "<bound method PeriodArray._from_datetime64 of <class 'pandas.core.arrays.period.PeriodArray'>>",
                "PeriodArray": "<class 'pandas.core.arrays.period.PeriodArray'>"
            }
        ],
        [
            {
                "self.tz": "<UTC>",
                "self": "array of shape (26,)",
                "self.freqstr": "'5T'",
                "self.inferred_freq": "'5T'",
                "self._data": "array of shape (26,)"
            },
            {
                "PeriodArray._from_datetime64": "<bound method PeriodArray._from_datetime64 of <class 'pandas.core.arrays.period.PeriodArray'>>",
                "PeriodArray": "<class 'pandas.core.arrays.period.PeriodArray'>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self.tz": "UTC",
                "self": "DatetimeArray",
                "freq": "str",
                "self.freqstr": "str",
                "self.inferred_freq": "str",
                "self._data": "ndarray"
            },
            {
                "PeriodArray._from_datetime64": "method",
                "PeriodArray": "type"
            }
        ],
        [
            {
                "self.tz": "UTC",
                "self": "DatetimeArray",
                "self.freqstr": "str",
                "self.inferred_freq": "str",
                "self._data": "ndarray"
            },
            {
                "PeriodArray._from_datetime64": "method",
                "PeriodArray": "type"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self.tz": "<UTC>",
                "self": "array of shape (26,)",
                "freq": "'5min'",
                "self.freqstr": "'5T'",
                "self.inferred_freq": "'5T'",
                "self._data": "array of shape (26,)"
            },
            {
                "PeriodArray._from_datetime64": "<bound method PeriodArray._from_datetime64 of <class 'pandas.core.arrays.period.PeriodArray'>>",
                "PeriodArray": "<class 'pandas.core.arrays.period.PeriodArray'>"
            }
        ],
        [
            {
                "self.tz": "<UTC>",
                "self": "array of shape (26,)",
                "self.freqstr": "'5T'",
                "self.inferred_freq": "'5T'",
                "self._data": "array of shape (26,)"
            },
            {
                "freq": "'5T'",
                "res": "'5T'",
                "base": "'T'",
                "stride": "5",
                "PeriodArray._from_datetime64": "<bound method PeriodArray._from_datetime64 of <class 'pandas.core.arrays.period.PeriodArray'>>",
                "PeriodArray": "<class 'pandas.core.arrays.period.PeriodArray'>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.tz": "UTC",
                "self": "DatetimeArray",
                "freq": "str",
                "self.freqstr": "str",
                "self.inferred_freq": "str",
                "self._data": "ndarray"
            },
            {
                "PeriodArray._from_datetime64": "method",
                "PeriodArray": "type"
            }
        ],
        [
            {
                "self.tz": "UTC",
                "self": "DatetimeArray",
                "self.freqstr": "str",
                "self.inferred_freq": "str",
                "self._data": "ndarray"
            },
            {
                "freq": "str",
                "res": "str",
                "base": "str",
                "stride": "int",
                "PeriodArray._from_datetime64": "method",
                "PeriodArray": "type"
            }
        ]
    ],
    "3.1.1": [
        "DatetimeIndex.to_period with freq\n"
    ],
    "3.1.2": [
        " I have checked that this issue has not already been reported.\n I have confirmed this bug exists on the latest version of pandas (1.0.3).\nCode Sample\n# Input date range:\npi5m = pd.date_range(start='2019-12-22 06:40:00+00:00', end='2019-12-22 08:45:00+00:00', freq='5min')\n\n# Converting to PeriodIndex\npi5m.to_period()\n\n  File \"/home/p/.local/lib/python3.7/site-packages/pandas/core/arrays/period.py\", line 938, in dt64arr_to_periodarr\n    freq = Period._maybe_convert_freq(freq)\n\n  File \"pandas/_libs/tslibs/period.pyx\", line 1580, in pandas._libs.tslibs.period._Period._maybe_convert_freq\n\nAttributeError: 'NoneType' object has no attribute 'n'\n\n# Working\npi5m.to_period('5min')\nProblem description\nIt is specified in documentation that if not provided, freq is inferred.\nHowever, with above-provided input, I get the error message indicated.\nIs this a bug?\n\nThanks for your feedback.\nBests,\n"
    ]
}