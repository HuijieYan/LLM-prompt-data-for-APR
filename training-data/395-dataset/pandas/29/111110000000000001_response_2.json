{
    "pandas": [
        {
            "bugID": 29,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 515,
            "file_name": "pandas/core/arrays/interval.py",
            "replace_code": "def __setitem__(self, key, value):\n    # Check if value is NA\n    if is_scalar(value) and isna(value):\n        value_left, value_right = value, value\n    else:\n        # Check if value is an interval type or an instance of Interval\n        if is_interval_dtype(value) or isinstance(value, pd.Interval):\n            self._check_closed_matches(value, name=\"value\")\n            value_left, value_right = value.left, value.right\n        else:\n            try:\n                # Try creating an IntervalArray from the value\n                array = IntervalArray(value)\n                value_left, value_right = array.left, array.right\n            except TypeError as err:\n                # Handle the error if value is not of the correct type\n                msg = f\"'value' should be an interval type, got {type(value)} instead.\"\n                raise TypeError(msg) from err\n\n    key = check_array_indexer(self, key)\n    # Update the left and right values atomically\n    self._left.values[key] = value_left\n    self._right.values[key] = value_right",
            "imports": []
        }
    ]
}