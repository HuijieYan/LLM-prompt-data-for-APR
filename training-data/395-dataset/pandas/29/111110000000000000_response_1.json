{
    "pandas": [
        {
            "bugID": 29,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 515,
            "file_name": "pandas/core/arrays/interval.py",
            "replace_code": "def __setitem__(self, key, value):\n        needs_float_conversion = False\n        if isinstance(value, (int, float)) and np.isnan(value):\n            if isinstance(self.dtype.subtype, np.integer):\n                needs_float_conversion = True\n            elif is_datetime64_any_dtype(self.dtype.subtype) or is_timedelta64_dtype(self.dtype.subtype):\n                value = np.datetime64(\"NaT\")\n            value_left, value_right = value, value\n    \n        elif isinstance(value, (pd.Interval, pd._libs.interval.Interval)):\n            self._check_closed_matches(value, name=\"value\")\n            value_left, value_right = value.left, value.right\n    \n        else:\n            try:\n                array = IntervalArray(value)\n                value_left, value_right = array.left, array.right\n            except TypeError as err:\n                msg = f\"'value' should be an interval type, got {type(value)} instead.\"\n                raise TypeError(msg) from err\n    \n        key = check_array_indexer(self, key)\n        left = self.left.copy(data=True)\n        if needs_float_conversion:\n            left = left.astype(\"float\")\n        left.values[key] = value_left\n        self._left = left\n    \n        right = self.right.copy(data=True)\n        if needs_float_conversion:\n            right = right.astype(\"float\")\n        right.values[key] = value_right\n        self._right = right",
            "imports": []
        }
    ]
}