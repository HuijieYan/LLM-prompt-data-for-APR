{
    "pandas": [
        {
            "bugID": 29,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 515,
            "file_name": "pandas/core/arrays/interval.py",
            "replace_code": "def __setitem__(self, key, value):\n    \"\"\"\n    Set the value of self[key] to value.\n    \"\"\"\n    # check if value is a scalar and nan\n    if np.isscalar(value) and np.isnan(value):\n        if is_integer_dtype(self.dtype):\n            raise ValueError(\"Cannot set NaN on a numpy array of integer type\")\n        if is_datetime64_any_dtype(self.dtype):\n            value = np.datetime64(\"NaT\")\n        if is_timedelta64_dtype(self.dtype):\n            value = np.timedelta64(\"NaT\")\n        value_left, value_right = value, value\n    # scalar interval\n    elif is_interval_dtype(value) or isinstance(value, Interval):\n        self._check_closed_matches(value, name=\"value\")\n        value_left, value_right = value.left, value.right\n    # list-like of intervals\n    else:\n        # convert to IntervalArray\n        array = IntervalArray(value)\n        value_left, value_right = array.left, array.right\n    key = check_array_indexer(self, key)\n    # update left and right atomically\n    left = self.left.copy(deep=True)\n    left.values[key] = value_left\n    self._left = left\n    right = self.right.copy(deep=True)\n    right.values[key] = value_right\n    self._right = right",
            "import_list": []
        }
    ]
}