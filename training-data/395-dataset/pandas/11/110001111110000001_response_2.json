{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    if levels is None and isinstance(keys[0], tuple):\n        keys = list(zip(*keys))\n\n    levels = [ensure_index(x) for x in levels] if levels else [ensure_index(keys)]\n    names = [None] if names is None else names\n\n    if not all(i.equals(indexes[0]) for i in indexes):\n        raise ValueError(\"Incompatible indexes\")\n\n    codes_list = []\n    for hlevel, index in zip(keys, indexes):\n        try:\n            i = level.get_indexer(hlevel)\n        except KeyError as err:\n            raise ValueError(f\"Key {hlevel} not found in level {level}\") from err\n        to_concat = np.repeat(i, len(index))\n        codes_list.append(to_concat)\n\n    new_levels = levels + [indexes[0]]\n    new_codes = codes_list + [np.tile(np.arange(len(indexes[0])), len(indexes))]\n    new_names = names + list(indexes[0].names)\n\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
            "import_list": [
                "from pandas.core.indexes.api import ensure_index",
                "from pandas.core.indexes.base import Index",
                "from pandas import MultiIndex",
                "import numpy as np"
            ]
        }
    ]
}