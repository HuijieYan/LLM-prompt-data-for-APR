{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(\n    indexes, keys, levels=None, names=None\n) -> MultiIndex:\n\n    sa_index = ensure_index(indexes[0])\n    \n    if isinstance(keys[0], tuple):\n        levels, codes = _factorize_from_iterables(keys, sort=False)\n    elif levels is None:\n        levels, codes = _factorize_from_iterables([keys], sort=False)\n        levels = [ensure_index(levels[0])]\n    else:\n        levels = [ensure_index(x) for x in levels]\n        codes = [level.get_indexer(key, method=\"pad\") for level, key in zip(levels, keys)]\n    \n    if not all_indexes_same(indexes):\n        codes = list(codes)\n        for level, index in zip(codes, indexes):\n            codes.extend([np.tile(col, len(index)) for col in level.codes])\n    \n        if len(names) == len(levels):\n            names = list(names)\n    \n        return MultiIndex(\n            levels=levels, codes=codes, names=names, verify_integrity=False\n        )\n    \n    # here concat_index should have been made with base=1\n    concat_index = _concat_indexes(\n        indexes, intersection=True, base=0, verify_integrity=False\n    )\n    for code, level in zip(codes, levels):\n        base_value = len(level)\n        for idx in range(1, len(indexes)):\n            b = base_value <= code\n            code[idx] += base_value\n            base_value += len(level)\n    \n    new_levels = list(levels)\n    new_codes = codes + concat_index.codes\n    new_names = list(names)\n    \n    if isinstance(sa_index, MultiIndex):\n        new_levels.extend(sa_index.levels)\n        new_codes.extend(sa_index.codes)\n    else:\n        new_levels.extend([sa_index])\n        new_codes.extend([np.tile(np.arange(len(sa_index)), len(indexes))])\n        new_names.extend([None] * len(sa_index))\n    \n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )"
        }
    ]
}