{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    \n    # ... omitted code ...\n\n    if not all_indexes_same(indexes):\n        codes_list = []\n    \n        # things are potentially different sizes, so compute the exact codes\n        # for each level and pass those to MultiIndex.from_arrays\n    \n        for hlevel, level in zip(zipped, levels):\n            to_concat = []\n            for key, index in zip(hlevel, indexes):\n                try:\n                    i = level.get_loc(key)\n                except KeyError as err:\n                    raise ValueError(f\"Key {key} not in level {level}\") from err\n    \n                to_concat.append(np.repeat(i, len(index)))\n            codes_list.append(np.concatenate(to_concat))\n    \n        concat_index = MultiIndex.from_arrays(indexes, names=names)\n    \n        # these go at the end\n        levels.extend(concat_index.levels)\n        codes_list.extend(concat_index.codes)\n    \n        return MultiIndex(\n            levels=levels, codes=codes_list, names=names, verify_integrity=False\n        )\n    \n    new_index = indexes[0]\n    n = len(new_index)\n    kpieces = len(indexes)\n    \n    # also copies\n    new_names = list(names)\n    new_levels = list(levels)\n    \n    # construct codes\n    new_codes = []\n    \n    # do something a bit more speedy\n    \n    for hlevel, level in zip(zipped, levels):\n        hlevel = ensure_index(hlevel)\n        mapped = level.get_indexer(hlevel)\n    \n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n    \n        new_codes.append(np.repeat(mapped, n))\n    \n    new_levels.extend(new_index.levels)\n    new_codes.extend(new_index.codes)\n    \n    if len(new_names) < len(new_levels):\n        new_names.extend(new_index.names)\n    \n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
            "imports": [
                "from pandas.core.indexes.base import Index",
                "from pandas.core.indexes.category import ensure_index",
                "from pandas.core.indexes.frozen import FrozenList",
                "import numpy as np",
                "from pandas.core.indexes.multi import MultiIndex",
                "from pandas.core.reshape.factorize import factorize_from_iterables, factorize_from_iterable",
                "from pandas.core.reshape.concat import _concat_indexes",
                "from pandas.core.reshape.concat import all_indexes_same, get_consensus_names",
                "from pandas.errors import AssertionError"
            ]
        }
    ]
}