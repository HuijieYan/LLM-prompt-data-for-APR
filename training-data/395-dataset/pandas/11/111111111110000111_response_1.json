{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    zipped = list(zip(*keys))\n    if levels is None:\n        _, levels = factorize_from_iterables(zipped)\n    else:\n        levels = [ensure_index(x) for x in levels]\n\n    codes_list = []\n    for hlevel, level in zip(zipped, levels):\n        to_concat = []\n        for key, index in zip(hlevel, indexes):\n            try:\n                i = level.get_loc(key)\n            except KeyError as err:\n                raise ValueError(f\"Key {key} not in level {level}\") from err\n            to_concat.append(np.repeat(i, len(index)))\n        codes_list.append(np.concatenate(to_concat))\n\n    if not names:\n        names = [None] * len(levels)\n    elif len(names) != len(levels):\n        names += [None] * (len(levels) - len(names))\n    \n    return MultiIndex(levels=levels, codes=codes_list, names=names, verify_integrity=False)",
            "imports": [
                "from pandas import MultiIndex, ensure_index, factorize_from_iterables",
                "import numpy as np"
            ]
        }
    ]
}