{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    if levels is None:\n        levels = [Index(keys)]\n    else:\n        levels = [ensure_index(x) for x in levels]\n\n    codes_list = []\n    mask = []\n    for key, index in zip(keys, indexes):\n        if key in mask:\n            continue\n        else:\n            mask.append(key)\n            try:\n                i = levels[0].get_loc(key)\n            except KeyError as err:\n                raise ValueError(f\"Key {key} not in level {levels[0]}\") from err\n            codes_list.append(np.repeat(i, len(index)))\n\n    concat_index = _concat_indexes(indexes)    \n    if isinstance(concat_index, MultiIndex):\n        levels.extend(concat_index.levels)\n        codes_list.extend(concat_index.codes)\n    else:\n        codes, categories = factorize_from_iterables([levels[0]])\n        levels.append(CategoricalIndex(levels=[categories]))\n        codes_list.append(codes)\n    \n    return MultiIndex(levels=levels, codes=codes_list, names=names, verify_integrity=False)",
            "import_list": [
                "from pandas import MultiIndex, Index, Series, DataFrame",
                "import pandas as pd",
                "import numpy as np",
                "from pandas.core.indexes.multi import _concat_indexes",
                "from pandas.core.arrays.categorical import factorize_from_iterables",
                "from pandas.core.indexes.category import CategoricalIndex",
                "from pandas.core.indexes.base import ensure_index"
            ]
        }
    ]
}