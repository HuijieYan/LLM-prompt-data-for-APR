{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    if isinstance(keys[0], tuple):\n        keys = list(zip(*keys))\n\n    if levels is None:\n        _, levels = factorize_from_iterables(keys)\n\n    new_index = indexes[0]\n\n    new_levels = []\n    codes_list = []\n\n    for key, level in zip(keys, levels):\n        level = ensure_index(level)\n        mapped = level.get_indexer(key)\n        \n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(f\"Values not found in passed level: {key[mask]!s}\")\n\n        codes_list.append(np.repeat(mapped, len(new_index)))\n\n        new_name = names or [None]\n        new_levels.append(level)\n\n    if isinstance(new_index, MultiIndex):\n        new_levels.extend(new_index.levels)\n        new_codes = [np.tile(lab, len(indexes)) for lab in new_index.codes]\n    else:\n        new_levels.append(new_index)\n        new_codes.append(np.tile(np.arange(len(new_index)), len(indexes)))\n\n    if len(new_name) < len(new_levels):\n        new_names.extend(new_index.names)\n\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
            "imports": []
        }
    ]
}