{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n\n    # Level validation handled by calling this function\n    if (levels is None and isinstance(keys[0], tuple)) or (\n        levels is not None and len(levels) > 1\n    ):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n\n        _check_factorize_level(levels, zipped)\n\n    else:\n        zipped = [keys]\n        if names is None:\n            names = [None]\n\n        levels = [ensure_index(levels) if levels is not None else ensure_index(keys)]\n\n    if not all(indexes[0].equals(index) for index in indexes):\n        raise ValueError(\"all of the passed indices do not align on their levels\")\n\n    if not all(len(idx.levels) == len(indexes[0].levels) for idx in indexes):\n        raise ValueError(\"Cannot concat indices that do not have the same number of levels\")\n\n    if not all(len(idx) == len(indexes[0]) for idx in indexes):\n        raise ValueError(\"all of the passed indices will require a copy to be concatenated\")\n\n    concat_index = _concat_indexes(indexes)\n    levels.append(concat_index.levels)\n    codes_list = []\n    # things are potentially different sizes, so compute the exact codes\n    # for each level and pass those to MultiIndex.from_arrays\n    for hlevel, level in zip(zipped, levels[:-1]):\n        to_concat = [level.get_indexer(hlevel)]\n        codes_list.append(np.concatenate(to_concat))\n\n    if isinstance(concat_index, MultiIndex):\n        levels.extend(concat_index.levels)\n        codes_list.extend(concat_index.codes)\n\n        if len(names) == len(levels):\n            names = list(names)\n        else:\n            index_levels = [index.levels for index in indexes]\n            names = names + get_consensus_names(index_levels)\n\n    else:\n        codes, categories = factorize_from_iterables(concat_index, levels=levels[:-1])\n        levels.append(categories)\n        codes_list.append(codes)\n\n    return MultiIndex(\n        levels=levels, codes=codes_list, names=names, verify_integrity=False\n    )",
            "import_list": [
                "from pandas.core.indexes.api import ensure_index",
                "from pandas.core.arrays.categorical import (factorize_from_iterable,\n                                            factorize_from_iterables)",
                "from pandas.core.indexes.category import _check_factorize_level",
                "from pandas.core.indexes.multi import MultiIndex",
                "from pandas.core.indexes.numeric import Index",
                "import numpy as np"
            ]
        }
    ]
}