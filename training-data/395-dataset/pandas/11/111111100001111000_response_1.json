{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    if levels is None:\n        if isinstance(keys[0], tuple):\n            keys = list(zip(*keys))\n        levels, _ = factorize_from_iterables(keys)\n    else:\n        levels = [ensure_index(x) for x in levels]\n\n    new_names = list(names) if len(names) == len(levels) else names + get_consensus_names(indexes)\n\n    code_list = []\n    for i, level in enumerate(levels):\n        level_codes = []\n        for key in keys[i]:\n            try:\n                loc = level.get_loc(key)\n            except KeyError as err:\n                raise ValueError(f\"Key {key} not in level {level}\") from err\n            level_codes.append(np.repeat(loc, len(indexes[i])))\n        code_list.append(np.concatenate(level_codes))\n\n    if all_indexes_same(indexes):\n        index = indexes[0]\n        new_levels = levels + [index]\n        code_list.append(np.tile(np.arange(len(index)), len(indexes)))\n        new_names.extend(index.names)\n    else:\n        concated_index = _concat_indexes(indexes)\n        if isinstance(concated_index, MultiIndex):\n            new_levels = levels + concated_index.levels\n            code_list.extend(concat_index.codes)\n        else:\n            codes, categories = factorize_from_iterable(concat_index)\n            new_levels = levels + [categories]\n            code_list.append(codes)\n\n    return MultiIndex(levels=new_levels, codes=code_list, names=new_names, verify_integrity=False)",
            "imports": []
        }
    ]
}