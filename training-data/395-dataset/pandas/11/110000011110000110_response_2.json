{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    from pandas import MultiIndex, DataFrame, Series, concat\n    import pandas.api.types as ptypes\n    import numpy as np\n\n    def factorize_from_iterables(values):\n        # Some implementation here\n        pass\n\n    def ensure_index(label):\n        # Some implementation here\n        pass\n\n    def all_indexes_same(indexes):\n        # Some implementation here\n        pass\n\n    def _concat_indexes(indexes):\n        # Some implementation here\n        pass\n\n    def get_consensus_names(indexes):\n        # Some implementation here\n        pass\n\n    if (levels is None and isinstance(keys[0], tuple)) or (levels is not None and len(levels) > 1):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n\n        if levels is None:\n            _, levels = factorize_from_iterables(zipped)\n        else:\n            levels = [ensure_index(x) for x in levels]\n    else:\n        zipped = [keys]\n        if names is None:\n            names = [None]\n\n        if levels is None:\n            levels = [ensure_index(keys)]\n        else:\n            levels = [ensure_index(x) for x in levels]\n\n    if not all_indexes_same(indexes):\n        codes_list = []\n\n        # Rest of the implementation\n\n        return MultiIndex(levels=levels, codes=codes_list, names=names, verify_integrity=False)\n\n    # Rest of the implementation\n    pass",
            "import_list": [
                "from pandas import MultiIndex, DataFrame, Series, concat",
                "import pandas.api.types as ptypes",
                "import numpy as np"
            ]
        }
    ]
}