{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    if levels is None:\n        levels, codes = factorize_from_iterables(keys)\n        levels = [ensure_index(x) for x in levels]\n    else:\n        levels = [ensure_index(x) for x in levels]\n        codes = [level.get_indexer(key) for level, key in zip(levels, keys)]\n    \n    if not all_indexes_same(indexes):\n        codes_list = []\n        \n        for level_code in codes:\n            to_concat = []\n            for code, index in zip(level_code, indexes):\n                try:\n                    i = code.get_loc(level_code)\n                except KeyError as err:\n                    raise ValueError(f\"Key {key} not in level {level}\") from err\n                to_concat.append(np.repeat(i, len(index)))\n            codes_list.append(np.concatenate(to_concat))\n        \n        concat_index = _concat_indexes(indexes)\n        \n        levels.extend(concat_index.levels)\n        codes_list.extend(concat_index.codes)\n        \n        if names is None or len(names) != len(levels):\n            if not len({idx.nlevels for idx in indexes}) == 1:\n                raise AssertionError(\"Cannot concat indices that do not have the same number of levels\")\n            names = names + get_consensus_names(indexes)\n\n        return MultiIndex(levels=levels, codes=codes_list, names=names, verify_integrity=False)\n\n    new_index = indexes[0]\n    n = len(new_index)\n    kpieces = len(indexes)\n    new_names = names if len(names) == len(levels) else names + get_consensus_names(indexes)\n    new_levels = levels\n    new_codes = []\n\n    for level_code in codes:\n        new_codes.append(np.repeat(level_code, n))\n\n    if isinstance(new_index, MultiIndex):\n        new_levels.extend(new_index.levels)\n        new_codes.extend([np.tile(lab, kpieces) for lab in new_index.codes])\n    else:\n        new_levels.append(new_index)\n        new_codes.append(np.tile(np.arange(n), kpieces))\n\n    return MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)",
            "import_list": []
        }
    ]
}