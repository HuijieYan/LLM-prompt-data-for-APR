{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    if levels is None and isinstance(keys[0], tuple):\n        levels, codes = zip(*keys)\n        levels = [ensure_index(level) for level in levels]\n    else:\n        levels = [ensure_index(x) for x in levels]\n        codes = keys\n\n    if not all_indexes_same(indexes):\n        codes_list = []\n        for hlevel, level, index in zip(codes, levels, indexes):\n            mapped = level.get_indexer(hlevel)\n            mask = mapped == -1\n            if mask.any():\n                raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n            codes_list.append(np.repeat(mapped, len(index)))\n\n        new_index = _concat_indexes(indexes)\n        if isinstance(new_index, MultiIndex):\n            levels.extend(new_index.levels)\n            codes_list.extend(new_index.codes)\n        else:\n            new_levels = [new_index]\n            new_codes = [np.tile(np.arange(len(new_index)), len(indexes))]\n            levels.extend(new_levels)\n            codes_list.extend(new_codes)\n\n    return MultiIndex(\n        levels=levels, codes=codes_list, names=names, verify_integrity=False\n    )",
            "imports": []
        }
    ]
}