{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    if levels is None and isinstance(keys[0], tuple):\n        keys = list(zip(*keys))\n    \n    # Ensure levels are properly constructed\n    levels = [ensure_index(x) for x in levels] if levels is not None else [ensure_index(keys)]\n\n    if not all_indexes_same(indexes):\n        new_levels = []\n        codes_list = []\n\n        for i, level in enumerate(levels):\n            codes = []\n            code_vals = level.get_indexer(keys[i])\n\n            for j, index in enumerate(indexes):\n                codes.extend(np.repeat(code_vals[j], len(index)))\n\n            codes_list.append(np.array(codes))\n            new_levels.append(level)\n        \n        # Additional checks for index consistency\n        if len(names) != len(levels):\n            names.extend([None] * (len(levels) - len(names)))\n\n        if len(names) != len(new_levels):\n            raise ValueError(\"Cannot concat indices that do not have the same number of levels\")\n\n        new_index = _concat_indexes(indexes) if isinstance(_concat_indexes(indexes), Categorical) else indexes[0]\n\n        new_names = list(names) + list(FrozenList([None] * (len(new_levels) - len(names))))\n        return MultiIndex(levels=new_levels, codes=codes_list, names=new_names, verify_integrity=False)\n\n    else:\n        zipped = [keys] if levels is None else list(zip(*keys))\n        names = [None] if names is None else names\n\n        new_index = indexes[0]\n        n = len(new_index)\n        kpieces = len(indexes)\n\n        new_names = list(names)\n        new_levels = list(levels)\n\n        new_codes = []\n\n        for hlevel, level in zip(zipped, levels):\n            hlevel = ensure_index(hlevel)\n            mapped = level.get_indexer(hlevel)\n\n            mask = mapped == -1\n            if mask.any():\n                raise ValueError(f\"Values not found in passed level: {hlevel[mask]!s}\")\n\n            new_codes.append(np.repeat(mapped, n))\n\n        if isinstance(new_index, MultiIndex):\n            new_levels.extend(new_index.levels)\n            new_codes.extend([np.tile(label, kpieces) for label in new_index.codes])\n        else:\n            new_levels.append(new_index)\n            new_codes.append(np.tile(np.arange(n), kpieces))\n\n        if len(new_names) < len(new_levels):\n            new_names.extend(new_index.names)\n\n        return MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)",
            "imports": [
                "import numpy as np",
                "from pandas.core.indexes.api import ensure_index",
                "from pandas.core.indexes.multi import MultiIndex",
                "from pandas.core.arrays import Categorical",
                "from pandas.core.indexes.frozen import FrozenList"
            ]
        }
    ]
}