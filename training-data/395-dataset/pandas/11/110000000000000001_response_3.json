{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    from pandas import MultiIndex\n\n    if levels is None or len(levels) != 1:\n        levels, _ = factorize_from_iterables(keys)\n    \n    codes = []\n    new_levels = []\n    new_names = []\n    \n    for key in keys:\n        level_codes = ensure_index(level.get_indexer(ensure_index(key)))\n        codes.append(np.repeat(level_codes, len(indexes[0])))\n        \n    try:\n        new_index = _concat_indexes(indexes)\n    except AssertionError as err:\n        raise AssertionError(\n                \"Cannot concat indices that do not have the same number of levels\"\n            ) from err\n        \n    if isinstance(new_index, MultiIndex):\n        new_levels.extend(new_index.levels)\n        codes.extend(new_index.codes)\n    else:\n        new_levels.append(new_index)\n        codes.append(np.tile(np.arange(len(new_index)), len(indexes)))\n\n    if names is not None:\n        new_names = names\n    else:\n        new_names = get_consensus_names(indexes)\n        \n    return MultiIndex(\n        levels=new_levels, codes=codes, names=new_names, verify_integrity=False\n    )",
            "import_list": [
                "from pandas import MultiIndex"
            ]
        }
    ]
}