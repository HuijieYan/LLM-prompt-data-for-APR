{
    "pandas": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 590,
            "file_name": "pandas/core/reshape/concat.py",
            "replace_code": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n    if levels is None:\n        if isinstance(keys[0], tuple):\n            # Single level index\n            levels, _ = factorize_from_iterables(zip(*keys))\n        else:\n            # Single level index with single key\n            levels = [ensure_index(keys)]\n    else:\n        levels = [ensure_index(x) for x in levels]\n\n    codes_list = []\n    for key in keys:\n        try:\n            codes_list.append(levels[0].get_indexer(key))\n        except TypeError:\n            raise ValueError(f\"Values not found in passed level: {key}\")\n\n    if not all_indexes_same(indexes):\n        concat_index = _concat_indexes(indexes)\n        if isinstance(concat_index, MultiIndex):\n            levels.extend(concat_index.levels)\n            codes_list.extend(concat_index.codes)\n        else:\n            codes, categories = factorize_from_iterable(concat_index)\n            levels.append(categories)\n            codes_list.append(codes)\n\n    if names is not None and len(names) != len(levels):\n        raise ValueError(f\"Length of names should match the length of levels\")\n\n    return MultiIndex(levels=levels, codes=codes_list, names=names, verify_integrity=False)",
            "import_list": []
        }
    ]
}