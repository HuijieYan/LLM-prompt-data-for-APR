{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if hasattr(dtype, \"construct_array_type\"):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)\n\n    if issubclass(dtype.type, np.str_):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif np.issubdtype(dtype, np.datetime64):\n        if hasattr(arr, \"view\") and issubclass(dtype, np.integer):\n            return arr.view(dtype)\n        if not dtype.units:\n            raise ValueError(f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\")\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(dtype, np.timedelta64):\n        if hasattr(arr, \"view\") and issubclass(dtype, np.integer):\n            return arr.view(dtype)\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n            if dtype.kind == \"m\":\n                mask = np.isnan(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif issubclass(arr.dtype.type, (np.object_, np.void)):\n        if np.issubdtype(dtype, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n        elif np.issubdtype(dtype, np.datetime64):\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif np.issubdtype(dtype, np.timedelta64):\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if hasattr(dtype, \"name\") and dtype.name in (\"datetime64\", \"timedelta64\"):\n        raise ValueError(f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\")\n\n    if copy or issubclass(arr.dtype.type, (np.object_, np.void)) or issubclass(dtype.type, (np.object_, np.void)):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "imports": []
        }
    ]
}