{
    "1.1.1": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)\n",
    "1.1.2": "Cast the elements of an array to a given dtype a nan-safe manner.\n\nParameters\n----------\narr : ndarray\ndtype : np.dtype\ncopy : bool, default True\n    If False, a view will be attempted but may fail, if\n    e.g. the item sizes don't align.\nskipna: bool, default False\n    Whether or not we should skip NaN when casting as a string-type.\n\nRaises\n------\nValueError\n    The dtype was a datetime64/timedelta64 dtype, but it had no unit.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/dtypes/cast.py",
    "1.3.2": [
        "astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\"val\", [np.datetime64(\"NaT\"), np.timedelta64(\"NaT\")])\n@pytest.mark.parametrize(\"typ\", [np.int64])\ndef test_astype_nansafe(val, typ):\n    arr = np.array([val])\n\n    msg = \"Cannot convert NaT values to integer\"\n    with pytest.raises(ValueError, match=msg):\n        astype_nansafe(arr, dtype=typ)",
        "@pytest.mark.parametrize(\"val\", [np.datetime64(\"NaT\"), np.timedelta64(\"NaT\")])\n@pytest.mark.parametrize(\"typ\", [np.int64])\ndef test_astype_nansafe(val, typ):\n    arr = np.array([val])\n\n    msg = \"Cannot convert NaT values to integer\"\n    with pytest.raises(ValueError, match=msg):\n        astype_nansafe(arr, dtype=typ)"
    ],
    "1.4.2": [
        "pandas/tests/dtypes/test_common.py",
        "pandas/tests/dtypes/test_common.py"
    ],
    "2.1.1": [
        [
            "E           Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E           Failed: DID NOT RAISE <class 'ValueError'>"
        ]
    ],
    "2.1.2": [
        [
            "val = numpy.datetime64('NaT'), typ = <class 'numpy.int64'>\n\n    @pytest.mark.parametrize(\"val\", [np.datetime64(\"NaT\"), np.timedelta64(\"NaT\")])\n    @pytest.mark.parametrize(\"typ\", [np.int64])\n    def test_astype_nansafe(val, typ):\n        arr = np.array([val])\n    \n        msg = \"Cannot convert NaT values to integer\"\n        with pytest.raises(ValueError, match=msg):\n>           astype_nansafe(arr, dtype=typ)",
            "\npandas/tests/dtypes/test_common.py:723: Failed"
        ],
        [
            "val = numpy.timedelta64('NaT'), typ = <class 'numpy.int64'>\n\n    @pytest.mark.parametrize(\"val\", [np.datetime64(\"NaT\"), np.timedelta64(\"NaT\")])\n    @pytest.mark.parametrize(\"typ\", [np.int64])\n    def test_astype_nansafe(val, typ):\n        arr = np.array([val])\n    \n        msg = \"Cannot convert NaT values to integer\"\n        with pytest.raises(ValueError, match=msg):\n>           astype_nansafe(arr, dtype=typ)",
            "\npandas/tests/dtypes/test_common.py:723: Failed"
        ]
    ],
    "2.1.3": [
        [
            {
                "dtype": {
                    "value": "<class 'numpy.int64'>",
                    "shape": "<attribute 'shape' of 'numpy.generic' objects>",
                    "omitted": false
                },
                "arr": {
                    "value": "array(['NaT'], dtype=datetime64)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "copy": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "skipna": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "arr.shape": {
                    "value": "(1,)",
                    "shape": "1",
                    "omitted": false
                },
                "arr.dtype": {
                    "value": "dtype('<M8')",
                    "shape": "()",
                    "omitted": false
                }
            },
            {
                "dtype": {
                    "value": "dtype('int64')",
                    "shape": "()",
                    "omitted": false
                },
                "dtype.type": {
                    "value": "<class 'numpy.int64'>",
                    "shape": "<attribute 'shape' of 'numpy.generic' objects>",
                    "omitted": false
                },
                "dtype.kind": {
                    "value": "'i'",
                    "shape": "1",
                    "omitted": false
                },
                "dtype.name": {
                    "value": "'int64'",
                    "shape": "5",
                    "omitted": false
                }
            }
        ],
        [
            {
                "dtype": {
                    "value": "<class 'numpy.int64'>",
                    "shape": "<attribute 'shape' of 'numpy.generic' objects>",
                    "omitted": false
                },
                "arr": {
                    "value": "array(['NaT'], dtype=timedelta64)",
                    "shape": "(1,)",
                    "omitted": false
                },
                "copy": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "skipna": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "arr.shape": {
                    "value": "(1,)",
                    "shape": "1",
                    "omitted": false
                },
                "arr.dtype": {
                    "value": "dtype('<m8')",
                    "shape": "()",
                    "omitted": false
                }
            },
            {
                "dtype": {
                    "value": "dtype('int64')",
                    "shape": "()",
                    "omitted": false
                },
                "dtype.type": {
                    "value": "<class 'numpy.int64'>",
                    "shape": "<attribute 'shape' of 'numpy.generic' objects>",
                    "omitted": false
                },
                "dtype.kind": {
                    "value": "'i'",
                    "shape": "1",
                    "omitted": false
                },
                "dtype.name": {
                    "value": "'int64'",
                    "shape": "5",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "dtype": "type",
                "arr": "ndarray",
                "copy": "bool",
                "skipna": "bool",
                "arr.shape": "tuple",
                "arr.dtype": "dtype"
            },
            {
                "dtype": "dtype",
                "dtype.type": "type",
                "dtype.kind": "str",
                "dtype.name": "str"
            }
        ],
        [
            {
                "dtype": "type",
                "arr": "ndarray",
                "copy": "bool",
                "skipna": "bool",
                "arr.shape": "tuple",
                "arr.dtype": "dtype"
            },
            {
                "dtype": "dtype",
                "dtype.type": "type",
                "dtype.kind": "str",
                "dtype.name": "str"
            }
        ]
    ],
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "BUG: Don't cast categorical nan to int\n",
        "Converting from categorical to int ignores NaNs\n"
    ],
    "3.1.2": [
        " closes Converting from categorical to int ignores NaNs #28406\n passes black pandas\n tests added / passed\n whatsnew entry\nThis raises an error when attempting to cast a Categorical or CategoricalIndex containing nans to an integer dtype. Also had to remove the casting within get_indexer_non_unique since this won't always be possible.\n",
        "Code Sample, a copy-pastable example if possible\nIn [6]: s = pd.Series([1, 0, None], dtype='category')                                                                                                                                                                                            \n\nIn [7]: s                                                                                                                                                                                                                                      \nOut[7]: \n0      1\n1      0\n2    NaN\ndtype: category\nCategories (2, int64): [0, 1]\n\nIn [8]: s.astype(int)                                                                                                                                                                                                                          \nOut[8]: \n0                      1\n1                      0\n2   -9223372036854775808  # <- this is unexpected\ndtype: int64\nProblem description\nWhen converting categorical series back into Int column, it converts NaN to incorect integer negative value.\n\nExpected Output\nI would expect that NaN in category converts to NaN in IntX(nullable integer) or float.\n\nWhen trying to use d.astype('Int8'), I get an error dtype not understood\n\nOutput of pd.show_versions()\nIn [147]: pd.show_versions()                                                                                                                                                                                                                   \n\nINSTALLED VERSIONS\n------------------\ncommit           : None\npython           : 3.7.4.final.0\npython-bits      : 64\nOS               : Linux\nOS-release       : 5.2.13-arch1-1-ARCH\nmachine          : x86_64\nprocessor        : \nbyteorder        : little\nLC_ALL           : None\nLANG             : en_US.UTF-8\nLOCALE           : en_US.UTF-8\n\npandas           : 0.25.1\nnumpy            : 1.17.2\npytz             : 2019.2\ndateutil         : 2.8.0\npip              : 19.2.3\nsetuptools       : 41.2.0\nCython           : None\npytest           : 5.1.2\nhypothesis       : None\nsphinx           : None\nblosc            : None\nfeather          : 0.4.0\nxlsxwriter       : None\nlxml.etree       : None\nhtml5lib         : None\npymysql          : None\npsycopg2         : None\njinja2           : None\nIPython          : 7.8.0\npandas_datareader: None\nbs4              : None\nbottleneck       : None\nfastparquet      : None\ngcsfs            : None\nlxml.etree       : None\nmatplotlib       : None\nnumexpr          : 2.7.0\nodfpy            : None\nopenpyxl         : None\npandas_gbq       : None\npyarrow          : 0.14.1\npytables         : None\ns3fs             : None\nscipy            : None\nsqlalchemy       : None\ntables           : 3.5.2\nxarray           : None\nxlrd             : None\nxlwt             : None\nxlsxwriter       : None\n"
    ]
}