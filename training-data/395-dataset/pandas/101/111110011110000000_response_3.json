{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    if dtype in (np.datetime64, np.timedelta64):\n        raise ValueError(f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\")\n\n    if np.issubclass_(dtype, str):\n        return np.asarray(arr, dtype=dtype)\n\n    try:\n        if np.is_datetime64_dtype(arr):\n            if issubclass(dtype, np.datetime64):\n                return np.asarray(arr, dtype=dtype)\n            else:\n                raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n            \n        if np.is_timedelta64_dtype(arr):\n            if issubclass(dtype, np.timedelta64):\n                return np.asarray(arr, dtype=dtype)\n\n            if issubclass(dtype, np.integer):\n                if np.isnat(arr):\n                    raise ValueError(\"Cannot convert NaT values to integer\")\n                else:\n                    return np.asarray(arr, dtype=dtype)\n                \n            elif issubclass(dtype, float):\n                return np.asarray(arr, dtype=dtype)\n    except (TypeError, ValueError):\n        pass\n\n    return np.asarray(arr, dtype=dtype)",
            "import_list": [
                "import numpy as np",
                "import pytest"
            ]
        }
    ]
}