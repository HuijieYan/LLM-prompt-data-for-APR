{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    if isinstance(dtype, type) and np.issubdtype(dtype, np.integer):\n        return arr.astype(dtype)\n\n    if isinstance(dtype, np.dtype):\n        if dtype.kind in [\"M\"]:\n            # Check if the dtype is datetime\n            if arr.dtype.kind in [\"M\"]:\n                if not np.issubdtype(dtype, np.integer):\n                    raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n                return arr.astype(dtype)\n\n        if dtype.kind in [\"m\"]:\n            # Check if the dtype is timedelta\n            if arr.dtype.kind in [\"m\"]:\n                if not np.issubdtype(dtype, np.integer):\n                    raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n                return arr.astype(dtype)\n\n    if np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    if isinstance(dtype, type) and np.issubdtype(dtype, np.integer):\n        if np.issubdtype(arr.dtype, np.integer):\n            return arr.astype(dtype)\n\n    # when none of the above conditions are satisfied\n    return arr.astype(dtype, copy=copy)",
            "imports": [
                "import numpy as np",
                "import pandas as pd",
                "import numpy as np",
                "from numpy import datetime64, timedelta64"
            ]
        }
    ]
}