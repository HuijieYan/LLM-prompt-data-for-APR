{
    "pandas": [
        {
            "bugID": 71,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 30,
            "file_name": "pandas/core/reshape/tile.py",
            "replace_code": "def cut(x, bins, right: bool = True, labels=None, retbins: bool = False,\n        precision: int = 3, include_lowest: bool = False, duplicates: str = \"raise\"):\n    _validate_set_default_right(right)\n    _validate_set_default_dtype(x)\n    _validate_set_default_precision(precision)\n\n    if not isinstance(bins, (numbers.Number, np.ndarray, ABCIndexClass)):\n        raise TypeError(\"invalid type: need int, sequence, or IntervalIndex\")\n        \n    if (type(bins) == float) and not (isinstance(bins, (int, np.integer)) and bins > 0):\n        raise ValueError(\"`bins` should be a positive integer.\")\n\n    if np.iterable(x):\n        x = np.asarray(x)\n        if not x.size:\n            raise ValueError(\"Cannot cut empty array\")\n\n        if np.isinf(np.nanmin(x)) or np.isinf(np.nanmax(x)):\n            raise ValueError(\"cannot specify integer `bins` when input data contains infinity\")\n\n    if np.iterable(bins) and isinstance(bins, IntervalIndex) and bins.is_overlapping:\n        raise ValueError(\"Overlapping IntervalIndex is not accepted.\")\n\n    if not np.iterable(bins) and isinstance(bins, (int, np.integer)):\n        bins = calculate_bins_for_integer_scalar(x, bins)\n\n    bins = convert_bin_to_numeric_type(bins, x.dtype)\n\n    if (np.diff(bins.astype(\"float64\")) < 0).any():\n        raise ValueError(\"bins must increase monotonically.\")\n\n    fac, bins = _bins_to_cuts(\n        x,\n        bins,\n        right=right,\n        labels=labels,\n        precision=precision,\n        include_lowest=include_lowest,\n        dtype=x.dtype,\n        duplicates=duplicates,\n    )\n    \n    return _postprocess_for_cut(fac, bins, retbins, x.dtype, x)",
            "imports": []
        }
    ]
}