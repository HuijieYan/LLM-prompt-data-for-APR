{
    "pandas": [
        {
            "bugID": 71,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 30,
            "file_name": "pandas/core/reshape/tile.py",
            "replace_code": "def cut(\n    x,\n    bins,\n    right: bool = True,\n    labels=None,\n    retbins: bool = False,\n    precision: int = 3,\n    include_lowest: bool = False,\n    duplicates: str = \"raise\",\n):\n    import numpy as np\n    import pandas as pd\n    import pandas._libs.lib as lib\n    import pandas._libs.missing as missing\n    import pandas._libs.ops as libops\n    \"\"\"\n    Bin values into discrete intervals.\n    \"\"\"\n    # NOTE: this binning code is changed a bit from histogram for var(x) == 0\n    \n    # for handling the cut for datetime and timedelta objects\n    original = x\n    x = _preprocess_for_cut(x)\n    \n    if not hasattr(x, \"iqr\"):\n        x = pd.Series(x)  # pragma: no cover\n    \n    x, dtype = _coerce_to_type(x)\n    \n    if np.isscalar(bins):\n        if right:\n            right = \"right\"\n        else:\n            right = \"left\"\n        bins = lib.generate_bins(\n            x, bins, right=right, include_lowest=include_lowest, dtype=dtype\n        )\n    \n    # validate and get the return bins\n    if bins is not None:\n        if len(bins) == 1:\n            if len(bins[0]) > 2:\n                raise ValueError(\n                    \"Bins with multiple intervals are not handled when retbins=True\"\n                )\n        if len(bins) != x.shape[0] + 1:\n            raise ValueError(\"The number of bins does not match the number of breaks\")\n    \n    codes, levels, labels = lib.get_codes_and_levels(\n        x, bins, retbins, right, labels, include_lowest, dtype, duplicates\n    )\n    \n    if retbins:\n        return _postprocess_for_cut(\n            codes, levels, retbins=True, dtype=dtype, original=original\n        ), np.asarray(labels)\n    \n    na_mask = missing.isna(x)\n    if na_mask.any():\n        codes = lib.array_with_na(np._ensure_object_array(np.take(labels, s), x), na_mask)\n        labels = lib.array_with_na(labels, na_mask)\n    \n    if dtype == 'category':\n        result = pd.Categorical.from_codes(codes, levels, names, ordered=True)\n    else:\n        result = pd.Series(codes, original.name, dtype='category')\n    \n    result.cat.categories = labels\n    return _postprocess_for_cut(result, labels, retbins=False, dtype=dtype, original=original)"
        }
    ]
}