{
    "pandas": [
        {
            "bugID": 71,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 30,
            "file_name": "pandas/core/reshape/tile.py",
            "replace_code": "def cut(x, bins, right=False, labels=None, retbins=False, precision=3, include_lowest=False, duplicates='raise'):\n\n    try:\n        sz = x.size\n    except AttributeError:\n        x = np.asarray(x)\n        sz = x.size\n    \n    mn, mx = np.nanmin(x), np.nanmax(x)\n    \n    if np.isinf(mn) or np.isinf(mx):\n        raise ValueError(\"Cannot specify integer `bins` when input data contains infinity\")\n    elif mn == mx:\n        mn -= 0.001 * abs(mn) if mn != 0 else 0.001\n        mx += 0.001 * abs(mx) if mx != 0 else 0.001\n        bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n    else:\n        bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n        adj = (mx - mn) * 0.001 \n        if not right:\n            bins[-1] += adj\n            bins[0] -= adj\n    \n    fac = pd.cut(x, bins, right=right, labels=labels, retbins=retbins, precision=precision, include_lowest=include_lowest,duplicates=duplicates)\n    \n    return fac"
        }
    ]
}