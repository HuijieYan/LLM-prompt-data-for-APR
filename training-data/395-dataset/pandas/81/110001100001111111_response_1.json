{
    "pandas": [
        {
            "bugID": 81,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 419,
            "file_name": "pandas/core/arrays/integer.py",
            "replace_code": "def astype(self, dtype, copy=True, errors='raise'):\n\n    \"\"\"\n    Cast to a NumPy array or IntegerArray with 'dtype'.\n    \n    Parameters\n    ----------\n    dtype : str, dtype, or object\n        The typecode or data-type to which the array is cast.\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. If False,\n        a copy will only be made if dtype does not match the current dtype.\n    errors : {'raise', 'ignore'}, default 'raise'\n        Control raising of exceptions on invalid data for provided dtype.\n    \n    Returns\n    -------\n    array : ndarray or IntegerArray\n        NumPy ndarray or IntegerArray with 'dtype' for its dtype.\n    \n    Raises\n    ------\n    TypeError\n        If incompatible type with an IntegerDtype, equivalent of same_kind\n        casting.\n        or\n        When `errors='raise'` (the default), a ValueError, TypeError,\n        DeprecationWarning, or OverflowError, required.\n    \"\"\"\n    # if we are astyping to an existing IntegerDtype we can fastpath\n    # handle fastpath for astyping to an existing IntegerDtype\n    if isinstance(dtype, IntegerDtype):\n        result = self._data.astype(dtype.numpy_dtype, copy=False)\n        return type(self)(result, mask=self._mask, copy=False)\n    \n    # handle conversion to BooleanArray with missing values\n    if isinstance(dtype, str) and dtype.lower() == 'boolean':\n        if pd.isna(self._mask).any():\n            raise ValueError(\"cannot convert to 'boolean'-dtype NumPy array with missing values. \"\n                             \"Specify an appropriate 'na_value' for this dtype.\")\n        return self.copy()\n    \n    # handle other dtype conversions\n    if pd.api.types.is_dtype_equal(dtype, self.dtype):\n        # no-op\n        result = self._data if copy else self._data.view()\n        return type(self)(result, mask=self._mask, copy=False)\n    else:\n        data = self.to_numpy(dtype=dtype)\n        return astype_nansafe(data, dtype, copy=False)"
        }
    ]
}