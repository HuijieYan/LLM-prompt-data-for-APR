{
    "pandas": [
        {
            "bugID": 81,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 419,
            "file_name": "pandas/core/arrays/integer.py",
            "replace_code": "def astype(self, dtype, copy=True, na_value=None):\n    \"\"\"\n    Cast to a NumPy array or IntegerArray with 'dtype'.\n\n    Parameters\n    ----------\n    dtype : str or dtype\n        Typecode or data-type to which the array is cast.\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. If False,\n        a copy is made only if the old dtype does not match the\n        new dtype.\n    na_value: scalar, optional\n        Scalar missing value indicator to use in the NumPy array. Defaults\n        to the native missing value indicator of this array (pd.NA), or np.nan if datatype is float.\n\n    Returns\n    -------\n    array : ndarray or IntegerArray\n        NumPy ndarray or IntegerArray with 'dtype' for its dtype.\n\n    Raises\n    ------\n    TypeError\n        if incompatible type with an IntegerDtype, equivalent of same_kind\n        casting\n    ValueError\n        if incompatible type for astype with missing values.\n\n    Notes\n    -----\n    The `na_value` parameter is now added for handling missing values in astyping.\n\n    \"\"\"\n\n    if dtype == \"boolean\":\n        if not is_object_dtype(dtype) and na_value is pd.NA:\n            raise ValueError(\n                f\"cannot convert to '{dtype}'-dtype NumPy array \"\n                \"with missing values. Specify an appropriate 'na_value' \"\n                \"for this dtype.\"\n            )\n        result = self._data.astype(dtype, copy=copy)\n        result.fillna(na_value, inplace=True)\n        dtype = BooleanDtype()\n\n        return type(self)(result, mask=self._mask, dtype=dtype)\n\n    if isinstance(dtype, _IntegerDtype):\n        result = self._data.astype(dtype.numpy_dtype, copy=False)\n        return type(self)(result, mask=self._mask, dtype=dtype)\n\n    if is_float_dtype(dtype):\n        # In astype, we consider dtype=float to also mean na_value=np.nan\n        na_value = na_value if na_value is not None else np.nan\n        data = self.to_numpy(dtype=dtype, na_value=na_value)\n        return astype_nansafe(data, dtype, copy=copy)\n    else:\n        data = self.to_numpy(dtype=dtype, na_value=na_value)\n        return astype_nansafe(data, dtype, copy=copy)",
            "import_list": []
        }
    ]
}