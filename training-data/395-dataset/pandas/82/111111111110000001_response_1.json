{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n\n    if _is_uniform_reindex(join_units):\n        empty_dtype = np.result_type(*[unit.block.dtype for unit in join_units])\n        upcasted_na = np.result_type(*[unit.block.fill_value for unit in join_units])\n        return empty_dtype, upcasted_na\n\n    dtypes = [None] * len(join_units)\n    for i, unit in enumerate(join_units):\n        if unit.block is not None:\n            dtypes[i] = unit.block.dtype\n\n    upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is not None:\n            upcast_cls = None\n            if is_categorical_dtype(dtype):\n                upcast_cls = \"category\"\n            elif is_datetime64tz_dtype(dtype):\n                upcast_cls = \"datetimetz\"\n            elif issubclass(dtype.type, np.bool_):\n                upcast_cls = \"bool\"\n            elif issubclass(dtype.type, np.object_):\n                upcast_cls = \"object\"\n            elif is_datetime64_dtype(dtype):\n                upcast_cls = \"datetime\"\n            elif is_timedelta64_dtype(dtype):\n                upcast_cls = \"timedelta\"\n            elif is_sparse(dtype):\n                upcast_cls = dtype.subtype.name\n            elif is_extension_array_dtype(dtype):\n                upcast_cls = \"object\"\n            elif is_float_dtype(dtype) or is_numeric_dtype(dtype):\n                upcast_cls = dtype.name\n            else:\n                upcast_cls = \"float\"\n\n            if unit.is_na():\n                upcast_classes[upcast_cls].append(np.dtype('O'))\n            else:\n                upcast_classes[upcast_cls].append(dtype)\n\n    if 'datetime' in upcast_classes:\n        return np.dtype('datetime64[ns]'), np.datetime64('NaT')\n    elif 'timedelta' in upcast_classes:\n        return np.dtype('timedelta64[ns]'), np.timedelta64('NaT', 'ns')\n    else:\n        dtype_cons = set(np.promote_types(*upcast_classes['float']))\n        return np.dtype(dtype_cons), dtype_cons.type(np.nan)\n\n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)",
            "imports": [
                "import numpy as np",
                "from collections import defaultdict",
                "from pandas.api.types import is_categorical_dtype, is_datetime64tz_dtype, issubclass, is_datetime64_dtype, is_timedelta64_dtype, is_sparse, is_extension_array_dtype, is_float_dtype, is_numeric_dtype, isna"
            ]
        }
    ]
}