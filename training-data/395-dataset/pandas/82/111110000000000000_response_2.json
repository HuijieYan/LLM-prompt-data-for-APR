{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n\n    Returned N/A value may be None which means there was no casting involved.\n\n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    upcast_classes = {'object': [], 'bool': [], 'category': [], 'datetimetz': [], 'datetime': [], 'timedelta': [], 'float': []}\n    null_upcast_classes = {'object': [], 'bool': [], 'category': [], 'datetimetz': [], 'datetime': [], 'timedelta': [], 'float': []}\n    has_none_blocks = False\n\n    for unit in join_units:\n        if unit.block is None:\n            has_none_blocks = True\n        else:\n            dtype = unit.dtype\n            if dtype is None:\n                continue\n            elif np.issubdtype(dtype, np.object_):\n                upcast_cls = \"object\"\n            elif np.issubdtype(dtype, np.bool_):\n                upcast_cls = \"bool\"\n            elif np.issubdtype(dtype, np.datetime64):\n                if dtype.kind in ['m', 'M']:\n                    upcast_cls = \"datetime\"\n                else:\n                    upcast_cls = \"datetimetz\"\n            elif np.issubdtype(dtype, np.timedelta64):\n                upcast_cls = \"timedelta\"\n            elif np.issubdtype(dtype, np.floating) or np.issubdtype(dtype, np.integer):\n                upcast_cls = \"float\"\n            elif is_categorical_dtype(dtype):\n                upcast_cls = \"category\"\n            else:\n                upcast_cls = \"object\"\n\n            if unit.is_na:\n                null_upcast_classes[upcast_cls].append(dtype)\n            else:\n                upcast_classes[upcast_cls].append(dtype)\n\n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n\n    if \"object\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            return np.dtype(np.object_), np.nan\n        else:\n            return np.dtype(np.bool_), None\n    elif \"category\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"datetimetz\" in upcast_classes:\n        # GH-25014. We use NaT instead of iNaT, since this eventually\n        # ends up in DatetimeArray.take, which does not allow iNaT.\n        dtype = upcast_classes[\"datetimetz\"]\n        return dtype[0], np.datetime64(\"NaT\", \"ns\")\n    elif \"datetime\" in upcast_classes:\n        return np.dtype(\"M8[ns]\"), np.datetime64(\"NaT\", \"ns\")\n    elif \"timedelta\" in upcast_classes:\n        return np.dtype(\"m8[ns]\"), np.timedelta64(\"NaT\", \"ns\")\n    else:\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            return np.dtype(np.object_), np.nan\n        else:\n            if np.issubdtype(g, np.floating):\n                return g, g.type(np.nan)\n            elif np.issubdtype(g, [np.integer, np.unsignedinteger]):\n                if has_none_blocks:\n                    return np.dtype(np.float64), np.nan\n                else:\n                    return g, np.nan\n\n    msg = \"invalid dtype determination in get_empty_dtype_and_na\"\n    raise AssertionError(msg)",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}