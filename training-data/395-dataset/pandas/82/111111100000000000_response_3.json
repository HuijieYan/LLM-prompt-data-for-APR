{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n\n    Returned N/A value may be None which means there was no casting involved.\n\n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n\n    # importing necessary libraries\n    import numpy as np\n    from collections import defaultdict\n    from pandas.api.types import is_categorical_dtype, is_datetime64tz_dtype, is_numeric_dtype, is_object_dtype\n    from pandas.core.dtypes.dtypes import CategoricalDtype, DatetimeTZDtype, DatetimeTZBlock, DatetimeBlock, \\\n        TimedeltaBlock, DatetimeTZArray, TimedeltaBlock, DatetimeBlock, SparseDtype, CategoricalDtype, \\\n        ExtensionDtype\n    from pandas.core.dtypes.dtypes import CategoricalDtype, DatetimeTZDtype, TimedeltaBlock, DatetimeBlock\n    \n    block = join_units[0].block  # Using block\n    if block is None:\n        return np.float64, np.nan  # returning np.float64 and np.nan when block is none\n    empty_dtype = join_units[0].block.dtype  # Getting dtype of join_units' block\n    upcasted_na = join_units[0].block.fill_value  # Getting upcasted na of join_unit's block\n    return empty_dtype, upcasted_na",
            "imports": [
                "import numpy as np",
                "from collections import defaultdict",
                "from pandas.api.types import is_categorical_dtype, is_datetime64tz_dtype, is_numeric_dtype, is_object_dtype",
                "from pandas.core.dtypes.dtypes import CategoricalDtype, DatetimeTZDtype, DatetimeTZBlock, DatetimeBlock, \\\n        TimedeltaBlock, DatetimeTZArray, TimedeltaBlock, DatetimeBlock, SparseDtype, CategoricalDtype, \\\n        ExtensionDtype",
                "from pandas.core.dtypes.dtypes import CategoricalDtype, DatetimeTZDtype, TimedeltaBlock, DatetimeBlock"
            ]
        }
    ]
}