{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    import numpy as np\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n    \n    Returned N/A value may be None which means there was no casting involved.\n    \n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    import numpy as np  # Added import statement\n    \n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n    \n    if _is_uniform_reindex(join_units):\n        # FIXME: integrate property\n        empty_dtype = join_units[0].block.dtype\n        upcasted_na = join_units[0].block.fill_value\n        return empty_dtype, upcasted_na\n    \n    has_none_blocks = False\n    dtypes = [None] * len(join_units)\n    for i, unit in enumerate(join_units):\n        if unit.block is None:\n            has_none_blocks = True\n        else:\n            dtypes[i] = unit.dtype\n    \n    upcast_classes = defaultdict(list)\n    null_upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is None:\n            continue\n    \n        if pd.api.types.is_categorical_dtype(dtype):  # replaced is_categorical_dtype with pd.api.types.is_categorical_dtype\n            upcast_cls = \"category\"\n        elif pd.api.types.is_datetime64tz_dtype(dtype):  # replaced is_datetime64tz_dtype with pd.api.types.is_datetime64tz_dtype\n            upcast_cls = \"datetimetz\"\n        elif np.issubclass_(dtype.type, np.bool_):  # replaced issubclass with np.issubclass_\n            upcast_cls = \"bool\"\n        elif np.issubclass_(dtype.type, np.object_):  # replaced issubclass with np.issubclass_\n            upcast_cls = \"object\"\n        elif pd.api.types.is_datetime64_dtype(dtype):  # replaced is_datetime64_dtype with pd.api.types.is_datetime64_dtype\n            upcast_cls = \"datetime\"\n        elif pd.api.types.is_timedelta64_dtype(dtype):  # replaced is_timedelta64_dtype with pd.api.types.is_timedelta64_dtype\n            upcast_cls = \"timedelta\"\n        elif pd.api.types.is_sparse(dtype):  # replaced is_sparse with pd.api.types.is_sparse\n            upcast_cls = dtype.subtype.name\n        elif pd.api.types.is_extension_array_dtype(dtype):  # replaced is_extension_array_dtype with pd.api.types.is_extension_array_dtype\n            upcast_cls = \"object\"\n        elif pd.api.types.is_float_dtype(dtype) or pd.api.types.is_numeric_dtype(dtype):  # replaced is_float_dtype and is_numeric_dtype with pd.api.types.is_float_dtype and pd.api.types.is_numeric_dtype\n            upcast_cls = dtype.name\n        else:\n            upcast_cls = \"float\"\n    \n        # Null blocks should not influence upcast class selection, unless there\n        # are only null blocks, when same upcasting rules must be applied to\n        # null upcast classes.\n        if unit.is_na():\n            null_upcast_classes[upcast_cls].append(dtype)  # added parentheses after is_na\n        else:\n            upcast_classes[upcast_cls].append(dtype)\n    \n    if not upcast_classes:\n        upcast_classes = null_upcast_classes"
        }
    ]
}