{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n\n    Returned N/A value may be None which means there was no casting involved.\n\n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n\n    def is_categorical_dtype(dtype):\n        # implementation for is_categorical_dtype\n        pass\n\n    def is_datetime64tz_dtype(dtype):\n        # implementation for is_datetime64tz_dtype\n        pass\n\n    def is_sparse(dtype):\n        # implementation for is_sparse\n        pass\n\n    def is_extension_array_dtype(dtype):\n        # implementation for is_extension_array_dtype\n        pass\n\n    def is_float_dtype(dtype):\n        # implementation for is_float_dtype\n        pass\n\n    def is_numeric_dtype(dtype):\n        # implementation for is_numeric_dtype\n        pass\n\n    def is_datetime64_dtype(dtype):\n        # implementation for is_datetime64_dtype\n        pass\n\n    def is_timedelta64_dtype(dtype):\n        # implementation for is_timedelta64_dtype\n        pass\n\n    has_none_blocks = any(unit.block is None for unit in join_units)\n    dtypes = [unit.dtype for unit in join_units]\n\n    upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if unit.block is not None:\n            if is_categorical_dtype(dtype):\n                upcast_classes[\"category\"].append(dtype)\n            elif is_datetime64tz_dtype(dtype):\n                upcast_classes[\"datetimetz\"].append(dtype)\n            elif issubclass(dtype.type, np.bool_):\n                upcast_classes[\"bool\"].append(dtype)\n            elif issubclass(dtype.type, np.object_):\n                upcast_classes[\"object\"].append(dtype)\n            elif is_datetime64_dtype(dtype):\n                upcast_classes[\"datetime\"].append(dtype)\n            elif is_timedelta64_dtype(dtype):\n                upcast_classes[\"timedelta\"].append(dtype)\n            elif is_sparse(dtype):\n                upcast_classes[dtype.subtype.name].append(dtype)\n            elif is_extension_array_dtype(dtype):\n                upcast_classes[\"object\"].append(dtype)\n            elif is_float_dtype(dtype) or is_numeric_dtype(dtype):\n                upcast_classes[dtype.name].append(dtype)\n            else:\n                upcast_classes[\"float\"].append(dtype)\n        else:\n            # Capture null blocks in a separate dictionary\n            upcast_classes[\"na\"].append(dtype)\n\n    if not upcast_classes:\n        raise TypeError(\"No valid dtypes found\")\n\n    result_dtype = None\n    result_na = None\n\n    if \"object\" in upcast_classes or \"category\" in upcast_classes:\n        result_dtype = np.dtype(np.object_)\n        result_na = np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            result_dtype = np.dtype(np.object_)\n            result_na = np.nan\n        else:\n            result_dtype = np.dtype(np.bool_)\n    elif \"datetimetz\" in upcast_classes:\n        result_dtype = upcast_classes[\"datetimetz\"][0]\n        result_na = np.datetime64('NaT')\n    elif \"datetime\" in upcast_classes:\n        result_dtype = np.dtype(\"M8[ns]\")\n        result_na = np.datetime64('NaT')\n    elif \"timedelta\" in upcast_classes:\n        result_dtype = np.dtype(\"m8[ns]\")\n        result_na = np.timedelta64(\"NaT\", \"ns\")\n    else:\n        try:\n            result_dtype = np.find_common_type([], list(upcast_classes.values())[0])\n            if result_dtype.kind in ['f', 'u', 'i', 'O']:\n                result_na = result_dtype.type(np.nan)\n        except TypeError:\n            result_dtype = np.dtype(np.object_)\n            result_na = np.nan\n\n    return result_dtype, result_na",
            "import_list": [
                "import numpy as np",
                "from collections import defaultdict"
            ]
        }
    ]
}