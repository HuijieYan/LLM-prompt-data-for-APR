{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    # ... (other code remains unchanged) ...\n\n\n    if \"object\" in upcast_classes:\n        return np.dtype(\"O\"), None\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            return np.dtype(\"O\"), None\n        else:\n            return np.dtype(\"bool\"), None\n    elif \"category\" in upcast_classes:\n        return np.dtype(\"O\"), None\n    elif \"datetimetz\" in upcast_classes:\n        dtype = upcast_classes[\"datetimetz\"]\n        return dtype[0], pd.NaT\n    elif \"datetime\" in upcast_classes:\n        return np.dtype(\"<M8[ns]\"), pd.NaT\n    elif \"timedelta\" in upcast_classes:\n        return np.dtype(\"<m8[ns]\"), pd.NaT\n    else:\n        try:\n            common_type = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            return np.dtype(np.object_), None\n        else:\n            if is_float_dtype(common_type):\n                return common_type, common_type.type(np.nan)\n            elif is_numeric_dtype(common_type):\n                if has_none_blocks:\n                    return np.float64, None\n                else:\n                    return common_type, None\n    \n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)"
        }
    ]
}