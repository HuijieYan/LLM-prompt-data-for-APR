{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n\n    if _is_uniform_reindex(join_units):\n        empty_dtype = join_units[0].block.dtype\n        upcasted_na = join_units[0].block.fill_value\n        return empty_dtype, upcasted_na\n\n    has_none_blocks = False\n    dtypes = [None] * len(join_units)\n    for i, unit in enumerate(join_units):\n        if unit.block is None:\n            has_none_blocks = True\n        else:\n            dtypes[i] = unit.dtype\n\n    upcast_classes = defaultdict(list)\n    null_upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is None:\n            continue\n\n        if CategoricalDtype.is_dtype(dtype):\n            upcast_cls = \"category\"\n        elif is_datetime64tz_dtype(dtype):\n            upcast_cls = \"datetimetz\"\n        elif is_datetime64_dtype(dtype):\n            upcast_cls = \"datetime\"\n        elif dtype.name == 'timedelta64':\n            upcast_cls = \"timedelta\"\n        elif dtype.kind in ('O', 'U', 'S') or is_categorical_dtype(dtype):\n            upcast_cls = \"object\"\n        elif np.issubdtype(dtype, np.bool_):\n            upcast_cls = \"bool\"\n        elif dtype.kind in ['i', 'u', 'f'] or np.issubdtype(dtype, np.number):\n            upcast_cls = dtype\n        else:\n            upcast_cls = \"object\"\n\n        if unit.is_na:\n            null_upcast_classes[upcast_cls].append(dtype)\n        else:\n            upcast_classes[upcast_cls].append(dtype)\n\n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n\n    if 'object' in upcast_classes:\n        return np.dtype('O'), np.nan\n    elif 'bool' in upcast_classes:\n        if has_none_blocks:\n            return np.dtype('O'), np.nan\n        else:\n            return np.dtype('bool'), None\n    elif 'category' in upcast_classes:\n        return np.dtype('O'), np.nan\n    elif 'datetimetz' in upcast_classes:\n        return np.dtype('M8[ns]'), np.datetime64('NaT')\n    elif 'datetime' in upcast_classes:\n        return np.dtype('M8[ns]'), np.datetime64('NaT')\n    elif 'timedelta' in upcast_classes:\n        return np.dtype('m8[ns]'), np.timedelta64('NaT', 'ns')\n    else:\n        upcasted_type = np.find_common_type(upcast_classes, [])\n        if np.issubdtype(upcasted_type, np.floating):\n            return upcasted_type, np.nan\n        elif np.issubdtype(upcasted_type, np.integer):\n            if has_none_blocks:\n                return np.dtype('float64'), np.nan\n            else:\n                return upcasted_type, None\n\n    raise AssertionError(\"invalid dtype determination in get_concat_dtype\")",
            "imports": [
                "import numpy as np",
                "from collections import defaultdict",
                "from pandas.api.types import is_datetime64tz_dtype, is_datetime64_dtype",
                "from pandas.core.dtypes.dtypes import CategoricalDtype"
            ]
        }
    ]
}