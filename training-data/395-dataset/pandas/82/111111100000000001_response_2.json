{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    empty_dtype = None\n    upcasted_na = None\n    has_none_blocks = False\n    dtypes = []\n\n    for unit in join_units:\n        if unit.block is not None:\n            dtypes.append(unit.dtype)\n        else:\n            has_none_blocks = True\n\n    upcast_classes = defaultdict(list)\n    null_upcast_classes = defaultdict(list)\n\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is not None:\n            if ptypes.is_categorical_dtype(dtype):\n                upcast_cls = \"category\"\n            elif ptypes.is_datetime64tz_dtype(dtype):\n                upcast_cls = \"datetimetz\"\n            elif np.issubdtype(dtype, np.bool_):\n                upcast_cls = \"bool\"\n            elif np.issubdtype(dtype, np.object_):\n                upcast_cls = \"object\"\n            elif ptypes.is_datetime64_dtype(dtype):\n                upcast_cls = \"datetime\"\n            elif ptypes.is_timedelta64_dtype(dtype):\n                upcast_cls = \"timedelta\"\n            elif ptypes.is_sparse(dtype):\n                upcast_cls = dtype.kind\n            elif ptypes.is_extension_array_dtype(dtype):\n                upcast_cls = \"object\"\n            elif ptypes.is_float_dtype(dtype) or ptypes.is_numeric_dtype(dtype):\n                upcast_cls = str(dtype)\n            else:\n                upcast_cls = \"float\"\n\n            if unit.is_na:\n                null_upcast_classes[upcast_cls].append(dtype)\n            else:\n                upcast_classes[upcast_cls].append(dtype)\n\n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n\n    if \"object\" in upcast_classes:\n        empty_dtype = np.dtype(np.object_)\n        upcasted_na = np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            empty_dtype = np.dtype(np.object_)\n            upcasted_na = np.nan\n        else:\n            empty_dtype = np.dtype(np.bool_)\n            upcasted_na = None\n    elif \"category\" in upcast_classes:\n        empty_dtype = np.dtype(np.object_)\n        upcasted_na = np.nan\n    elif \"datetimetz\" in upcast_classes:\n        dtype = upcast_classes[\"datetimetz\"]\n        empty_dtype = dtype[0]\n        upcasted_na = pd.NaT\n    elif \"datetime\" in upcast_classes:\n        empty_dtype = np.dtype(\"M8[ns]\")\n        upcasted_na = pd.Timestamp(pd.NaT)\n    elif \"timedelta\" in upcast_classes:\n        empty_dtype = np.dtype(\"m8[ns]\")\n        upcasted_na = np.timedelta64(\"NaT\", \"ns\")\n    else:\n        g = np.find_common_type(upcast_classes, [])\n        if np.issubdtype(g, np.floating):\n            empty_dtype = g\n            upcasted_na = g(np.nan)\n        elif np.issubdtype(g, np.number):\n            if has_none_blocks:\n                empty_dtype = np.float64\n                upcasted_na = np.nan\n            else:\n                empty_dtype = g\n                upcasted_na = None\n\n    if empty_dtype is None or upcasted_na is None:\n        raise AssertionError(\"Invalid dtype or N/A value determination in get_empty_dtype_and_na\")\n\n    return empty_dtype, upcasted_na",
            "imports": [
                "import numpy as np",
                "from collections import defaultdict",
                "import pandas.api.types as ptypes"
            ]
        }
    ]
}