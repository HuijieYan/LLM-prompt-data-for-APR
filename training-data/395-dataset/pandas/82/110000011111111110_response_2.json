{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    from collections import defaultdict\n    import numpy as np\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n    \n    Returned N/A value may be None which means there was no casting involved.\n    \n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    import numpy as np\n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n    \n    def _is_uniform_reindex(join_units):\n        # TODO: implementation of _is_uniform_reindex\n        return False\n    \n    # New function to determine if it is a categorical dtype\n    def is_categorical_dtype(dtype):\n        return dtype.name == \"category\"\n    \n    upcasted_na = None\n    if _is_uniform_reindex(join_units):\n        empty_dtype = join_units[0].block.dtype\n        upcasted_na = join_units[0].block.fill_value\n        return empty_dtype, upcasted_na\n    \n    has_none_blocks = False\n    dtypes = [None] * len(join_units)\n    for i, unit in enumerate(join_units):\n        if unit.block is None:\n            has_none_blocks = True\n        else:\n            dtypes[i] = unit.dtype\n    \n    upcast_classes = defaultdict(list)\n    null_upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is None:\n            continue\n    \n        if is_categorical_dtype(dtype):\n            upcast_cls = \"category\"\n        # Handle other data types\n        else:\n            if unit.is_na:\n                null_upcast_classes[upcast_cls].append(dtype)\n            else:\n                upcast_classes[upcast_cls].append(dtype)\n    \n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n    \n    if \"object\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"category\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"datetime\" in upcast_classes:\n        return np.dtype(\"M8[ns]\"), np.datetime64(\"NaT\")\n    else:\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            return np.dtype(np.object_), np.nan\n        else:\n            if is_numeric_dtype(g):\n                if has_none_blocks:\n                    return np.float64, np.nan\n                else:\n                    return g, None\n    \n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)"
        }
    ]
}