{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    import numpy as np\n    from collections import defaultdict\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n    \n    Returned N/A value may be None which means there was no casting involved.\n    \n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    dtypes = [unit.block.dtype if unit.block is not None else None for unit in join_units]\n    \n    upcasted_na = np.nan\n    empty_dtype = None\n    \n    if all(dt is None for dt in dtypes):\n        return np.float64, np.nan\n    \n    if all(dt == dtypes[0] for dt in dtypes):\n        empty_dtype = dtypes[0]\n        upcasted_na = join_units[0].block.fill_value\n    \n    upcast_classes = defaultdict(list)\n    \n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is not None:\n            if np.issubdtype(dtype, np.floating):\n                upcast_cls = \"float\"\n            elif np.issubdtype(dtype, np.bool_):\n                upcast_cls = \"bool\"\n            elif np.issubdtype(dtype, np.object_):\n                upcast_cls = \"object\"\n            else:\n                upcast_cls = \"other\"\n    \n            if unit.is_na:\n                upcast_cls = \"NA\"\n    \n            upcast_classes[upcast_cls].append(dtype)\n    \n    if \"object\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"bool\" in upcast_classes:\n        if any(dt is None for dt in dtypes):\n            return np.dtype(np.object_), np.nan\n        else:\n            return np.dtype(np.bool_), None\n    else:\n        return empty_dtype or np.dtype(\"float\"), upcasted_na\n    \n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)"
        }
    ]
}