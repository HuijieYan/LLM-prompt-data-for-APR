{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_category_order=True,\n    obj=\"Series\",\n):\n    # ... (omitted code)\n    \n    if check_dtype:\n        dtype_equal = pae.is_dtype_equal(left.dtype, right.dtype)\n        if not dtype_equal:\n            raise AssertionError(f\"Dtypes are not equal: {left.dtype} != {right.dtype}\")\n\n    if pae.is_interval_dtype(left.dtype) or pae.is_interval_dtype(right.dtype):\n        if not pae.is_dtype_equal(left.array.dtype, right.array.dtype):\n            raise AssertionError(\"Interval dtypes are not equal\")\n\n        assert_interval_array_equal(left.array, right.array)\n\n    if pae.is_categorical_dtype(left.dtype) or pae.is_categorical_dtype(right.dtype):\n        if not pae.is_dtype_equal(left._values.dtype, right._values.dtype):\n            raise AssertionError(\"Categorical dtypes are not equal\")\n\n        assert_categorical_equal(\n            left._values,\n            right._values,\n            obj=f\"{obj} category\",\n            check_category_order=check_category_order,\n        )",
            "imports": [
                "import pandas.api.extensions as pae"
            ]
        }
    ]
}