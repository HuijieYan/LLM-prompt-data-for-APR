{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(left, right, check_dtype=True, check_less_precise=False, \n                        check_exact=False, check_names=True, check_datetimelike_compat=False, \n                        check_categorical=True, check_category_order=True, obj=\"Series\"):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_names : bool, default True\n        Whether to check the Series names attribute.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_category_order : bool, default True\n        Whether to compare category order of internal Categoricals.\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    if check_dtype:\n        if left._is_numeric or right._is_numeric:\n            assert_numpy_array_equal(\n                left._values, right._values, check_dtype=check_dtype, obj=obj\n            )\n        elif left._is_datetimelike or right._is_datetimelike:\n            # perform datetimelike comparison\n            if not _testing.is_dtype_equal(left.dtype, right.dtype):\n                # handle dtype mismatch\n                error_msg = \"Datetimelike dtypes are different\"\n                raise AssertionError(error_msg)\n\n    if check_exact:\n        if not left._is_numeric:\n            raise AssertionError(\"check_exact may only be used with numeric Series\")\n        assert_numpy_array_equal(\n            left._values, right._values, check_dtype=check_dtype, obj=str(obj)\n        )",
            "imports": [
                "import pandas._testing as _testing",
                "import pandas.core.arrays.numpy_ as _np",
                "import pandas.core.arrays.interval as _interval"
            ]
        }
    ]
}