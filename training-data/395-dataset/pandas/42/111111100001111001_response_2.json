{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(\n        left,\n        right,\n        check_dtype=True,\n        check_index_type=\"equiv\",\n        check_series_type=True,\n        check_less_precise=False,\n        check_names=True,\n        check_exact=False,\n        check_datetimelike_compat=False,\n        check_categorical=True,\n        check_category_order=True,\n        obj=\"Series\",\n    ):\n    __tracebackhide__ = True\n\n    _check_isinstance(left, right, Series)\n\n    if check_series_type:\n        assert_class_equal(left, right, obj=obj)\n\n    if len(left) != len(right):\n        msg1 = f\"{len(left)}, {left.index}\"\n        msg2 = f\"{len(right)}, {right.index}\"\n        raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.index\",\n    )\n\n    if check_dtype:\n        dtype_left = left.dtype\n        dtype_right = right.dtype\n\n        if is_categorical_dtype(dtype_left) and is_categorical_dtype(dtype_right):\n            assert_categorical_equal(left, right, check_category_order=check_category_order)\n        elif is_interval_dtype(dtype_left) and is_interval_dtype(dtype_right):\n            assert_interval_array_equal(left, right)\n        else:\n            assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n\n            if check_exact and is_datetime_or_timedelta_dtype(dtype_left):\n                raise AssertionError(\"check_exact may only be used with numeric Series\")\n            elif check_exact:\n                assert_numpy_array_equal(\n                    left, right, check_dtype=check_dtype, obj=str(obj)\n                )\n            else:\n                assert_numpy_array_equal(\n                    left, right, check_dtype=check_dtype, strict_nan=True, obj=str(obj)\n                )",
            "imports": [
                "from pandas.api.types import is_categorical_dtype, is_interval_dtype",
                "from pandas.api.extensions import ExtensionArray",
                "from pandas.core.dtypes.dtypes import Conversion",
                "from pandas.core.dtypes.common import is_datetime_or_timedelta_dtype",
                "from pandas.core.indexes.interval import IntervalIndex",
                "from pandas import Index, Series",
                "from pandas._testing import _check_isinstance, raise_assert_detail, assert_index_equal, assert_class_equal, assert_attr_equal, assert_categorical_equal, assert_interval_array_equal, assert_extension_array_equal, assert_numpy_array_equal"
            ]
        }
    ]
}