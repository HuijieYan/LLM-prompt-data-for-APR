{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_category_order=True,\n    obj=\"Series\",\n):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    ...\n    ...\n    ...\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    if isinstance(left, ABCSeries) and isinstance(right, ABCSeries):\n        if check_series_type:\n            assert_class_equal(left, right, obj=obj)\n\n        # length comparison\n        if len(left) != len(right):\n            msg1 = f\"{len(left)}, {left.index}\"\n            msg2 = f\"{len(right)}, {right.index}\"\n            raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n\n        # index comparison\n        assert_index_equal(\n            left.index,\n            right.index,\n            exact=check_index_type,\n            check_names=check_names,\n            check_less_precise=check_less_precise,\n            check_exact=check_exact,\n            check_categorical=check_categorical,\n            obj=f\"{obj}.index\",\n        )\n\n        if check_dtype:\n            # We want to skip exact dtype checking when `check_categorical`\n            # is False. We'll still raise if only one is a `Categorical`,\n            # regardless of `check_categorical`\n            if (\n                is_categorical_dtype(left.dtype)\n                and is_categorical_dtype(right.dtype)\n                and not check_categorical\n            ):\n                pass\n            else:\n                assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n\n        if check_exact:\n            if is_numeric_dtype(left.dtype):\n                assert_numpy_array_equal(\n                    left._values, right._values, check_dtype=check_dtype, obj=str(obj)\n                )\n            else:\n                raise AssertionError(\"check_exact may only be used with numeric Series\")\n        \n        ...\n        ...\n        ... # (other comparisons and checks)\n\n    ...\n    ...\n    ... # (other comparison checks and metadata comparison)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left._values,\n                right._values,\n                obj=f\"{obj} category\",\n                check_category_order=check_category_order,\n            )",
            "imports": [
                "import pandas._testing as _testing",
                "from pandas.api.types import is_categorical_dtype, is_extension_array_dtype, is_interval_dtype, is_numeric_dtype, is_categorical_dtype, is_extension_array_dtype, needs_i8_conversion",
                "from pandas.core.dtypes.generic import ABCSeries"
            ]
        }
    ]
}