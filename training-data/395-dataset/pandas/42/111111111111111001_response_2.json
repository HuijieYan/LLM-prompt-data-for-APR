{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(left, right, check_dtype=True, check_index_type=\"equiv\", check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_category_order=True, obj=\"Series\"):\n    __tracebackhide__ = True\n\n    # instance validation\n    if check_series_type:\n        assert_class_equal(left, right, obj=obj)\n\n    # other parameter validations...\n\n    # ExtensionArray and IntervalArray type handling\n    if is_extension_array_dtype(left.dtype) or is_extension_array_dtype(right.dtype):\n        assert_extension_array_equal(left._values, right._values, check_dtype=check_dtype, check_less_precise=check_less_precise, check_exact=check_exact)\n    elif is_interval_dtype(left.dtype) or is_interval_dtype(right.dtype):\n        assert_interval_array_equal(left.array, right.array, exact=check_index_type, check_names=check_names, check_less_precise=check_less_precise, check_exact=check_exact, check_categorical=check_categorical)\n    else:\n        _testing.assert_almost_equal(left._values, right._values, check_less_precise=check_less_precise, check_dtype=check_dtype, obj=str(obj))\n\n    # other checks...\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=obj)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(left._values, right._values, obj=f\"{obj} category\", check_category_order=check_category_order)",
            "import_list": [
                "from pandas.core.arrays.interval import IntervalArray",
                "from pandas.core.arrays.extension import ExtensionArray",
                "from pandas.api.types import is_extension_array_dtype, is_interval_dtype"
            ]
        }
    ]
}