{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(\n    left: Series,\n    right: Series,\n    check_dtype: bool = True,\n    check_index_type: bool or str = \"equiv\",\n    check_series_type: bool = True,\n    check_less_precise: bool or int = False,\n    check_exact: bool = False,\n    check_names: bool = True,\n    check_datetimelike_compat: bool = False,\n    check_categorical: bool = True,\n    check_category_order: bool = True,\n) -> None:\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype, and inferred_type are identical.\n    check_series_type : bool, default True\n         Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_category_order : bool, default True\n        Whether to compare category order of internal Categoricals.\n\n        .. versionadded:: 1.0.2\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, Series)\n\n    if check_series_type:\n        assert_class_equal(left, right, obj=\"Series\")\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=\"Index\",\n    )\n\n    if check_dtype:\n        assert_attr_equal(\"dtype\", left, right, obj=\"Attributes of Series\")\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=\"Series\")\n\n    if check_categorical:\n        if (\n            is_categorical_dtype(left.dtype)\n            and is_categorical_dtype(right.dtype)\n            and not check_categorical\n        ):\n            pass\n        else:\n            assert_categorical_equal(\n                left._values,\n                right._values,\n                obj=\"Series category\",\n                check_category_order=check_category_order,\n            )",
            "imports": [
                "from pandas import Series, Index",
                "from pandas._libs.testing import (\n    _check_isinstance,\n    assert_extension_array_equal,\n    assert_numpy_array_equal,\n    assert_categorical_equal,\n    assert_attr_equal,\n    assert_index_equal,\n    assert_class_equal,\n)",
                "from pandas._typing import Dtype",
                "from pandas.api.types import (\n    is_categorical_dtype,\n    is_datetime64_dtype,\n    is_interval_dtype,\n    is_extension_array_dtype,\n    is_numeric_dtype,\n    is_object_dtype,\n    needs_i8_conversion,\n)",
                "from pandas.core.arrays import ExtensionArray",
                "from pandas.core.arrays.interval import IntervalArray, Interval",
                "from pandas.core.dtypes.base import ExtensionDtype",
                "from pandas.core.series import Series",
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}