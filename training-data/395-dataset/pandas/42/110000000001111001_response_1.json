{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_category_order=True,\n    obj=\"Series\",\n):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    ... (same as the original function)\n\n    \"\"\"\n\n    # instance validation\n    assert pdtypes.is_series(left) and pdtypes.is_series(right), \\\n        \"left and right must be Series or subclass. %s\" % type(left)\n\n    if check_series_type:\n        assert type(left) == type(right), \"Series types are different.\"\n\n    # length comparison\n    assert len(left) == len(right), \"Series length are different\"\n\n\n    # index comparison\n    pd.testing.assert_index_equal(\n        left.index,\n        right.index,\n        check_exact=check_index_type,\n        check_names=check_names,\n    )\n\n    if check_dtype:\n        if not pdtypes.is_dtype_equal(left.dtype, right.dtype):\n            raise AssertionError(\"Series dtypes are different.\")\n\n    if check_exact:\n        assert_numpy_array_equal(\n            left.values, right.values, check_dtype=check_dtype, obj=obj\n        )\n    else:\n        assert (left == right).all(), \"Series values differ.\"\n\n    # metadata comparison\n    if check_names:\n        assert left.name == right.name, \"Names are different.\"\n\n\n    if pdtypes.is_categorical_dtype(left) or pdtypes.is_categorical_dtype(right):\n        pd.testing.assert_categorical_equal(\n            left, right, check_order=check_category_order\n        )",
            "imports": [
                "import pandas.api.types as pdtypes",
                "from pandas.util.testing import assert_numpy_array_equal"
            ]
        }
    ]
}