{
    "pandas": [
        {
            "bugID": 42,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1048,
            "file_name": "pandas/_testing.py",
            "replace_code": "def assert_series_equal(\n    left, \n    right, \n    check_dtype=True, \n    check_index_type='equiv', \n    check_series_type=True, \n    check_less_precise=False, \n    check_names=True, \n    check_exact=False, \n    check_datetimelike_compat=False, \n    check_categorical=True, \n    check_category_order=True, \n    obj='Series'\n):\n    \"\"\"\n    Check that left and right Series are equal.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    assert isinstance(left, Series)\n    assert isinstance(right, Series)\n\n    if check_series_type:\n        assert type(left) == type(right)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = f\"{len(left)}, {left.index}\"\n        msg2 = f\"{len(right)}, {right.index}\"\n        raise AssertionError(f\"{obj}: Series length are different: {msg1}, {msg2}\")\n\n    # index comparison\n    assert left.index.equals(right.index, check_exact=check_index_type, check_names=check_names)\n\n    if check_dtype:\n        assert left.dtype == right.dtype\n\n    if check_exact:\n        if not isinstance(left.dtype, np.inexact) or not isinstance(right.dtype, np.inexact):\n            raise AssertionError(\"check_exact may only be used with numeric Series\")\n        assert np.array_equal(left.array, right.array)\n    elif check_datetimelike_compat and (isinstance(left.dtype, np.datetime64) or isinstance(right.dtype, np.datetime64)):\n        if not left._values.equals(right._values):\n            msg = f\"[datetimelike_compat=True] {left._values} is not equal to {right._values}.\"\n            raise AssertionError(msg)\n    elif isinstance(left.dtype, pd.IntervalDtype) or isinstance(right.dtype, pd.IntervalDtype):\n        assert left.array.equals(right.array)\n    elif isinstance(left.dtype, pd.CategoricalDtype) or isinstance(right.dtype, pd.CategoricalDtype):\n        assert left._values.equals(right._values, check_less_precise=check_less_precise)\n        if check_category_order:\n            assert left._values.equals(right._values, check_less_precise=check_less_precise) \n    elif isinstance(left.dtype, (pd.api.extensions.ExtensionDtype, pd.SparseDtype)) or isinstance(right.dtype, (pd.api.extensions.ExtensionDtype, pd.SparseDtype)):\n        assert left._values.equals(right._values, check_dtype=check_dtype, check_less_precise=check_less_precise)\n    elif isinstance(left.dtype, (np.datetime64, np.timedelta64)) or isinstance(right.dtype, (np.datetime64, np.timedelta64)):\n        assert left.array.equals(right.array)\n    else:\n        assert left._values.equals(right._values, check_dtype=check_dtype, check_less_precise=check_less_precise)\n\n    # metadata comparison\n    if check_names:\n        assert left.name == right.name\n\n    if check_categorical:\n        if isinstance(left.dtype, pd.CategoricalDtype) or isinstance(right.dtype, pd.CategoricalDtype):\n            assert left._values.equals(right._values)\n            if check_category_order:\n                assert left._values.equals(right._values)",
            "import_list": []
        }
    ]
}