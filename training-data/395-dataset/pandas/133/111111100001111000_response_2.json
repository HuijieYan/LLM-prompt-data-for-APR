{
    "pandas": [
        {
            "bugID": 133,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 7034,
            "file_name": "pandas/core/generic.py",
            "replace_code": "def interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs):\n\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    inplace = pd.core.common._validate_bool_kwarg(inplace, \"inplace\")\n    axis = cusunique_axis(axis)\n    ax = _maybe_transposed_self._get_axis_number(axis)\n    if _maybe_transposed_self.ndim == 2:\n        alt_ax = 1 - ax\n    else:\n        alt_ax = ax\n    \n    index = _maybe_transposed_self._get_axis(alt_ax)\n    if is_float_dtype(index):\n        if method == 'linear':\n            index = np.arange(len(index))\n        else:\n            if is_integer_dtype(index):\n                index = index.astype(float)\n            elif is_object_dtype(index):\n                raise ValueError(\"Cannot interpolate with all object-dtype columns in the DataFrame. Try setting at least one column to a numeric dtype.\")\n        if index_contains_null(index):\n            raise NotImplementedError(\"Interpolation with NaNs in the index has not been implemented. Try filling those NaNs before interpolating.\")\n    \n    new_data = _maybe_transposed_self._data.interpolate(method=method, axis=ax, index=index, values=_maybe_transposed_self,\n        limit=limit, limit_direction=limit_direction, limit_area=limit_area, inplace=False, downcast=downcast, **kwargs)\n    if inplace:\n        new_data = self._constructor(new_data).T._data\n        self._update_inplace(new_data)\n    else:\n        res = self._constructor(new_data)\n        if axis == 1:\n            res = res.T\n        return res"
        }
    ]
}