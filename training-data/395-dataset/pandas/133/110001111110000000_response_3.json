{
    "pandas": [
        {
            "bugID": 133,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 7034,
            "file_name": "pandas/core/generic.py",
            "replace_code": "def interpolate(self,method=\"linear\",axis=0,limit=None,inplace=False,limit_direction=\"forward\",limit_area=None,downcast=None,**kwargs):\n    \"\"\"\n    Interpolate values according to different methods\n    \"\"\"\n    inplace=validate_bool_kwarg(inplace,\"inplace\")\n\n    if axis==0:\n        ax=self._info_axis_name\n        _maybe_transposed_self=self\n    elif axis==1:\n        _maybe_transposed_self=self.T\n        ax=1\n    else:\n        _maybe_transposed_self=self\n        ax=self._get_axis_number(ax)\n\n    if _maybe_transposed_self.ndim==2:\n        alt_ax=1-ax\n    else:\n        alt_ax=ax\n\n    if isinstance(_maybe_transposed_self.index,MultiIndex) and method!=\"linear\":\n        raise ValueError(\"Only `method=linear` interpolation is supported on MultiIndexes\")\n\n    if _maybe_transposed_self._data.get_dtype_counts().get(\"object\")==len(_maybe_transposed_self.T):\n        raise TypeError(\"Cannot interpolate with all object-dtype columns in the DataFrame. Try setting at least one column to a numeric dtype\")\n\n    if method==\"linear\":\n        index=np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n    else:\n        index=_maybe_transposed_self._get_axis(alt_ax)\n        methods={\"index\",\"values\",\"nearest\",\"time\"}\n        is_numeric_or_datetime=(is_numeric_dtype(index)or is_datetime64_any_dtype(index)or is_timedelta64_dtype(index))\n        if method not in methods and not is_numeric_or_datetime:\n            raise ValueError(\"Index column must be numeric or datetime type when using {method} method other than linear. Try setting a numeric or datetime index column before interpolating.\")\n    \n    if isna(index).any():\n        raise NotImplementedError(\"Interpolation with NaNs in the index has not been implemented. Try filling those NaNs before interpolating.\")\n    data=_maybe_transposed_self._data\n    new_data=data.interpolate(method=method,axis=ax,index=index,values=_maybe_transposed_self,limit=limit,limit_direction=limit_direction,limit_area=limit_area,inplace=inplace,downcast=downcast,**kwargs)\n\n    if inplace:\n        if axis==1:\n            new_data=self._constructor(new_data).T._data\n        self._update_inplace(new_data)\n    else:\n        res=self._constructor(new_data).__finalize__(self)\n        if axis==1:\n            res=res.T\n        return res",
            "imports": []
        }
    ]
}