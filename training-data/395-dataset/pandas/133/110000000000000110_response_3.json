{
    "pandas": [
        {
            "bugID": 133,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 7034,
            "file_name": "pandas/core/generic.py",
            "replace_code": "def interpolate(\n    self,\n    method=\"linear\",\n    axis=0,\n    limit=None,\n    inplace=False,\n    limit_direction=\"forward\",\n    limit_area=None,\n    downcast=None,\n    **kwargs\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    axis = getattr(axis, \"lower\", lambda: axis)()\n\n    if axis == \"index\":\n        ax = 0\n        _maybe_transposed_self = self\n    elif axis == 1:\n        _maybe_transposed_self = self.T\n        ax = 1\n    else:\n        ax = 0\n        _maybe_transposed_self = self\n\n    if axis == \"index\":\n        ax = 0\n        _maybe_transposed_self = self\n    elif axis == 1:\n        ax = 1\n        _maybe_transposed_self = self.T\n\n    ax = _maybe_transposed_self._get_axis_number(ax)\n\n    if _maybe_transposed_self.ndim == 2:\n        alt_ax = 1 - ax\n    else:\n        alt_ax = ax\n\n    if isinstance(_maybe_transposed_self.index, MultiIndex) and method != \"linear\":\n        raise ValueError(\n            \"Only `method=linear` interpolation is supported on MultiIndexes.\"\n        )\n\n    if is_object_dtype(_maybe_transposed_self._data.get_dtypes()) and len(\n        _maybe_transposed_self.columns\n    ):\n        raise TypeError(\n            \"Cannot interpolate with all object-dtype columns \"\n            \"in the DataFrame. Try setting at least one \"\n            \"column to a numeric dtype.\"\n        )\n\n    # create/use the index\n    index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)) if method == \"linear\" else _maybe_transposed_self._get_axis(alt_ax))\n    methods = {\"index\", \"values\", \"nearest\", \"time\"}\n    is_numeric_or_datetime = is_numeric_dtype(index) or is_datetime64_any_dtype(index) or is_timedelta64_dtype(index)\n    if method not in methods and not is_numeric_or_datetime:\n        raise ValueError(\n            \"Index column must be numeric or datetime type when \"\n            \"using {method} method other than linear. \"\n            \"Try setting a numeric or datetime index column before \"\n            \"interpolating.\".format(method=method)\n        )\n\n    if np.isnan(index).any():\n        raise NotImplementedError(\n            \"Interpolation with NaNs in the index \"\n            \"has not been implemented. Try filling \"\n            \"those NaNs before interpolating.\"\n        )\n\n    data = _maybe_transposed_self._data\n    new_data = data.interpolate(\n        method=method,\n        axis=ax,\n        index=ensure_index(index),\n        values=_maybe_transposed_self,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        inplace=inplace,\n        downcast=downcast,\n        **kwargs\n    )\n\n    if inplace:\n        if axis == 1:\n            new_data = self._constructor(new_data).T._data\n        self._update_inplace(new_data)\n    else:\n        res = self._constructor(new_data).__finalize__(self)\n        if axis == 1:\n            res = res.T\n        return res",
            "imports": [
                "from pandas.api.types import is_numeric_dtype, is_datetime64_any_dtype, is_timedelta64_dtype",
                "from pandas.core.dtypes.common import is_object_dtype",
                "from pandas.core.generic import NDFrame, _shared_docs, validate_bool_kwarg",
                "from pandas.core.indexes.base import ensure_index",
                "from pandas.core.indexes.multi import MultiIndex",
                "from pandas.util._decorators import Appender",
                "import numpy as np"
            ]
        }
    ]
}