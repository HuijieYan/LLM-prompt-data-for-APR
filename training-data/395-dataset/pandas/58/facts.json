{
    "1.1.1": "@classmethod\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n    \n    dtype = CategoricalDtype._from_values_or_dtype(\n        categories=categories, ordered=ordered, dtype=dtype\n    )\n    if dtype.categories is None:\n        msg = (\n            \"The categories must be provided in 'categories' or \"\n            \"'dtype'. Both were None.\"\n        )\n        raise ValueError(msg)\n\n    codes = np.asarray(codes)  # #21767\n    if len(codes) and not is_integer_dtype(codes):\n        raise ValueError(\"codes need to be array-like integers\")\n\n    if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n        raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n    return cls(codes, dtype=dtype, fastpath=True)\n",
    "1.1.2": "Make a Categorical type from codes and categories or dtype.\n\nThis constructor is useful if you already have codes and\ncategories/dtype and so do not need the (computation intensive)\nfactorization step, which is usually done on the constructor.\n\nIf your data does not follow this convention, please use the normal\nconstructor.\n\nParameters\n----------\ncodes : array-like of int\n    An integer array, where each integer points to a category in\n    categories or dtype.categories, or else is -1 for NaN.\ncategories : index-like, optional\n    The categories for the categorical. Items need to be unique.\n    If the categories are not given here, then they must be provided\n    in `dtype`.\nordered : bool, optional\n    Whether or not this categorical is treated as an ordered\n    categorical. If not given here or in `dtype`, the resulting\n    categorical will be unordered.\ndtype : CategoricalDtype or \"category\", optional\n    If :class:`CategoricalDtype`, cannot be used together with\n    `categories` or `ordered`.\n\n    .. versionadded:: 0.24.0\n\n       When `dtype` is provided, neither `categories` nor `ordered`\n       should be provided.\n\nReturns\n-------\nCategorical\n\nExamples\n--------\n>>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n>>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n[a, b, a, b]\nCategories (2, object): [a < b]",
    "1.2.1": "class Categorical(ExtensionArray, PandasObject)",
    "1.2.2": "Represent a categorical variable in classic R / S-plus fashion.\n\n`Categoricals` can only take on only a limited, and usually fixed, number\nof possible values (`categories`). In contrast to statistical categorical\nvariables, a `Categorical` might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nAll values of the `Categorical` are either in `categories` or `np.nan`.\nAssigning values outside of `categories` will raise a `ValueError`. Order\nis defined by the order of the `categories`, not lexical order of the\nvalues.\n\nParameters\n----------\nvalues : list-like\n    The values of the categorical. If categories are given, values not in\n    categories will be replaced with NaN.\ncategories : Index-like (unique), optional\n    The unique categories for this categorical. If not given, the\n    categories are assumed to be the unique values of `values` (sorted, if\n    possible, otherwise in the order in which they appear).\nordered : bool, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    If True, the resulting categorical will be ordered.\n    An ordered categorical respects, when sorted, the order of its\n    `categories` attribute (which in turn is the `categories` argument, if\n    provided).\ndtype : CategoricalDtype\n    An instance of ``CategoricalDtype`` to use for this categorical.\n\n    .. versionadded:: 0.21.0\n\nAttributes\n----------\ncategories : Index\n    The categories of this categorical\ncodes : ndarray\n    The codes (integer positions, which point to the categories) of this\n    categorical, read only.\nordered : bool\n    Whether or not this Categorical is ordered.\ndtype : CategoricalDtype\n    The instance of ``CategoricalDtype`` storing the ``categories``\n    and ``ordered``.\n\n    .. versionadded:: 0.21.0\n\nMethods\n-------\nfrom_codes\n__array__\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\nCategoricalDtype : Type for categorical data.\nCategoricalIndex : An Index with an underlying ``Categorical``.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\nfor more.\n\nExamples\n--------\n>>> pd.Categorical([1, 2, 3, 1, 2, 3])\n[1, 2, 3, 1, 2, 3]\nCategories (3, int64): [1, 2, 3]\n\n>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n[a, b, c, a, b, c]\nCategories (3, object): [a, b, c]\n\nOrdered `Categoricals` can be sorted according to the custom order\nof the categories and can have a min and max value.\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n...                    categories=['c', 'b', 'a'])\n>>> c\n[a, b, c, a, b, c]\nCategories (3, object): [c < b < a]\n>>> c.min()\n'c'",
    "1.2.3": [
        "categories(self)",
        "categories(self, categories)",
        "ordered(self) -> Ordered",
        "dtype(self) -> CategoricalDtype",
        "min(self, skipna=True)",
        "max(self, skipna=True)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/arrays/categorical.py",
    "1.3.2": [
        "categories(self)",
        "categories(self, categories)",
        "ordered(self) -> Ordered",
        "dtype(self) -> CategoricalDtype",
        "min(self, skipna=True)",
        "max(self, skipna=True)",
        "codes(self)"
    ],
    "1.4.1": [
        "    def test_from_codes_with_nullable_int(self):\n        codes = pd.array([0, 1], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n\n        result = Categorical.from_codes(codes, categories=categories)\n        expected = Categorical.from_codes(codes.to_numpy(int), categories=categories)\n\n        tm.assert_categorical_equal(result, expected)",
        "    def test_from_codes_with_nullable_int_na_raises(self):\n        codes = pd.array([0, None], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n\n        msg = \"codes cannot contain NA values\"\n        with pytest.raises(ValueError, match=msg):\n            Categorical.from_codes(codes, categories=categories)"
    ],
    "1.4.2": [
        "pandas/tests/arrays/categorical/test_constructors.py",
        "pandas/tests/arrays/categorical/test_constructors.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: codes need to be array-like integers"
        ],
        [
            "E           ValueError: codes need to be array-like integers",
            "E           AssertionError: Pattern 'codes cannot contain NA values' does not match 'codes need to be array-like integers'"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x11cffc4c0>\n\n    def test_from_codes_with_nullable_int(self):\n        codes = pd.array([0, 1], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n    \n>       result = Categorical.from_codes(codes, categories=categories)\n\npandas/tests/arrays/categorical/test_constructors.py:567: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pandas.core.arrays.categorical.Categorical'>\ncodes = array([0, 1], dtype=object), categories = ['a', 'b'], ordered = None\ndtype = CategoricalDtype(categories=['a', 'b'], ordered=None)\n\n    @classmethod\n    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n    \n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n    \n        If your data does not follow this convention, please use the normal\n        constructor.\n    \n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n    \n            .. versionadded:: 0.24.0\n    \n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n    \n        Returns\n        -------\n        Categorical\n    \n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n    \n        codes = np.asarray(codes)  # #21767\n        if len(codes) and not is_integer_dtype(codes):\n>           raise ValueError(\"codes need to be array-like integers\")",
            "\npandas/core/arrays/categorical.py:649: ValueError"
        ],
        [
            "self = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x11d054a30>\n\n    def test_from_codes_with_nullable_int_na_raises(self):\n        codes = pd.array([0, None], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n    \n        msg = \"codes cannot contain NA values\"\n        with pytest.raises(ValueError, match=msg):\n>           Categorical.from_codes(codes, categories=categories)\n\npandas/tests/arrays/categorical/test_constructors.py:578: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pandas.core.arrays.categorical.Categorical'>\ncodes = array([0, <NA>], dtype=object), categories = ['a', 'b'], ordered = None\ndtype = CategoricalDtype(categories=['a', 'b'], ordered=None)\n\n    @classmethod\n    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n    \n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n    \n        If your data does not follow this convention, please use the normal\n        constructor.\n    \n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n    \n            .. versionadded:: 0.24.0\n    \n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n    \n        Returns\n        -------\n        Categorical\n    \n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n    \n        codes = np.asarray(codes)  # #21767\n        if len(codes) and not is_integer_dtype(codes):\n>           raise ValueError(\"codes need to be array-like integers\")",
            "\npandas/core/arrays/categorical.py:649: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x11d054a30>\n\n    def test_from_codes_with_nullable_int_na_raises(self):\n        codes = pd.array([0, None], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n    \n        msg = \"codes cannot contain NA values\"\n        with pytest.raises(ValueError, match=msg):\n>           Categorical.from_codes(codes, categories=categories)",
            "\npandas/tests/arrays/categorical/test_constructors.py:578: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "categories": "['a', 'b']",
                "codes": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                "codes.to_numpy": "<bound method BaseMaskedArray.to_numpy of <IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64>",
                "cls": "<class 'pandas.core.arrays.categorical.Categorical'>"
            },
            {
                "dtype": "CategoricalDtype(categories=['a', 'b'], ordered=None)",
                "dtype.categories": "Index(['a', 'b'], dtype='object')",
                "codes": "array([0, 1])"
            }
        ],
        [
            {
                "categories": "['a', 'b']",
                "codes": "array([0, 1])",
                "cls": "<class 'pandas.core.arrays.categorical.Categorical'>"
            },
            {
                "dtype": "CategoricalDtype(categories=['a', 'b'], ordered=None)",
                "dtype.categories": "Index(['a', 'b'], dtype='object')"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "categories": "list",
                "codes": "IntegerArray",
                "codes.to_numpy": "method",
                "cls": "type"
            },
            {
                "dtype": "CategoricalDtype",
                "dtype.categories": "Index",
                "codes": "ndarray"
            }
        ],
        [
            {
                "categories": "list",
                "codes": "ndarray",
                "cls": "type"
            },
            {
                "dtype": "CategoricalDtype",
                "dtype.categories": "Index"
            }
        ]
    ],
    "3.1.1": [
        "Categorical.from_codes fails for the (new nullable) Int64 dtype\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\n>>> import pandas as pd\n>>> codes = pd.Series([1, 0], dtype=\"Int64\")\n>>> pd.Categorical.from_codes(codes, categories=[\"foo\", \"bar\"])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../lib/python3.7/site-packages/pandas/core/arrays/categorical.py\", line 649, in from_codes\n    raise ValueError(\"codes need to be array-like integers\")\nValueError: codes need to be array-like integers\nProblem description\nCategories.from_codes works with Series with the Numpy \"int64\" dtype.\n\n>>> codes = pd.Series([1, 0])\n>>> pd.Categorical.from_codes(codes, categories=[\"foo\", \"bar\"])\n[bar, foo]\nCategories (2, object): [foo, bar]\nI would expect that it will work with the new Pandas \"Int64\" dtype.\n\nExpected Output\n"
    ]
}