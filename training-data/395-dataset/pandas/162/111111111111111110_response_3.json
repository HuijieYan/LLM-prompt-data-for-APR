{
    "pandas": [
        {
            "bugID": 162,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 585,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def _normalize(table, normalize, margins, margins_name=\"All\"):\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n    \n    if margins is False:\n    \n        # Actual Normalizations\n        normalizers = {\n            \"all\": lambda x: x / x.sum(axis=1).sum(),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x / x.sum(axis=1),\n        }\n    \n        normalizers[True] = normalizers[\"all\"]\n    \n        try:\n            f = normalizers[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n    \n        table = f(table)\n        table = table.fillna(0)\n    \n    elif margins is True:\n    \n        column_margin = table.sum(axis=0)\n        index_margin = table.sum(axis=1)\n        \n        # Normalize core\n        table = _normalize(table, normalize=normalize, margins=False)\n    \n        # Fix Margins\n        if normalize == \"columns\":\n            column_margin = column_margin / column_margin.sum()\n            table = pd.concat([table, column_margin.to_frame().T])\n            table = table.fillna(0)\n    \n        elif normalize == \"index\":\n            index_margin = index_margin / index_margin.sum()\n            table = table.append(index_margin.to_frame().T)\n            table = table.fillna(0)\n    \n        elif normalize == \"all\" or normalize is True:\n            column_margin = column_margin / column_margin.sum()\n            index_margin = index_margin / index_margin.sum()\n            index_margin[margins_name] = 1\n            table = pd.concat([table, column_margin.to_frame().T])\n            table = table.append(index_margin.to_frame().T)\n    \n            table = table.fillna(0)\n    \n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n    \n    else:\n        raise ValueError(\"Not a valid margins argument\")\n    \n    return table",
            "import_list": []
        }
    ]
}