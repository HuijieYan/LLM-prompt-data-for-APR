{
    "pandas": [
        {
            "bugID": 162,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 585,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def _normalize(table, normalize, margins, margins_name=\"All\"):\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    if isinstance(margins, bool):\n        if margins is False:\n            # Actual Normalizations\n            normalizers = {\n                \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n                \"columns\": lambda x: x / x.sum(),\n                \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n            }\n            normalizers[True] = normalizers[\"all\"]\n    \n            try:\n                f = normalizers[normalize]\n            except KeyError:\n                raise ValueError(\"Not a valid normalize argument\")\n    \n            table = f(table)\n            table = table.fillna(0)\n    \n        elif margins is True:\n            column_margin = table.sum(axis=0)\n            index_margin = table.sum(axis=1)\n    \n            if normalize == \"columns\":\n                column_margin = column_margin / column_margin.sum()\n                table.loc[\"Sub-Total\", :] = column_margin\n    \n            elif normalize == \"index\":\n                index_margin = index_margin / index_margin.sum()\n                table.loc[:, \"Sub-Total\"] = index_margin\n    \n            elif normalize == \"all\" or normalize is True:\n                column_margin = column_margin / column_margin.sum()\n                index_margin = index_margin / index_margin.sum()\n                index_margin[\"Sub-Total\"] = 1\n                table.loc[\"Sub-Total\", :] = column_margin\n                table.loc[:, \"Sub-Total\"] = index_margin\n    \n            else:\n                raise ValueError(\"Not a valid normalize argument\")\n    \n            table = table.fillna(0)\n    \n        else:\n            raise ValueError(\"Not a valid margins argument\")\n    \n        return table\n    else:\n        raise ValueError(\"margins argument must be a boolean\")",
            "import_list": []
        }
    ]
}