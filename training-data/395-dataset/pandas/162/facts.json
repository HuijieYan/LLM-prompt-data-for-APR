{
    "1.1.1": "def _normalize(table, normalize, margins, margins_name=\"All\"):\n\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    if margins is False:\n\n        # Actual Normalizations\n        normalizers = {\n            \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n        }\n\n        normalizers[True] = normalizers[\"all\"]\n\n        try:\n            f = normalizers[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table = f(table)\n        table = table.fillna(0)\n\n    elif margins is True:\n\n        column_margin = table.loc[:, margins_name].drop(margins_name)\n        index_margin = table.loc[margins_name, :].drop(margins_name)\n        table = table.drop(margins_name, axis=1).drop(margins_name)\n        # to keep index and columns names\n        table_index_names = table.index.names\n        table_columns_names = table.columns.names\n\n        # Normalize core\n        table = _normalize(table, normalize=normalize, margins=False)\n\n        # Fix Margins\n        if normalize == \"columns\":\n            column_margin = column_margin / column_margin.sum()\n            table = concat([table, column_margin], axis=1)\n            table = table.fillna(0)\n\n        elif normalize == \"index\":\n            index_margin = index_margin / index_margin.sum()\n            table = table.append(index_margin)\n            table = table.fillna(0)\n\n        elif normalize == \"all\" or normalize is True:\n            column_margin = column_margin / column_margin.sum()\n            index_margin = index_margin / index_margin.sum()\n            index_margin.loc[margins_name] = 1\n            table = concat([table, column_margin], axis=1)\n            table = table.append(index_margin)\n\n            table = table.fillna(0)\n\n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table.index.names = table_index_names\n        table.columns.names = table_columns_names\n\n    else:\n        raise ValueError(\"Not a valid margins argument\")\n\n    return table\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/reshape/pivot.py",
    "1.3.2": [
        "_normalize(table, normalize, margins, margins_name='All')"
    ],
    "1.4.1": [
        "    def test_margin_normalize(self):\n        # GH 27500\n        df = pd.DataFrame(\n            {\n                \"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"bar\"],\n                \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"one\", \"one\", \"two\", \"two\"],\n                \"C\": [\n                    \"small\",\n                    \"large\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                ],\n                \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9],\n            }\n        )\n        # normalize on index\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=0\n        )\n        expected = pd.DataFrame(\n            [[0.5, 0.5], [0.5, 0.5], [0.666667, 0.333333], [0, 1], [0.444444, 0.555556]]\n        )\n        expected.index = MultiIndex(\n            levels=[[\"Sub-Total\", \"bar\", \"foo\"], [\"\", \"one\", \"two\"]],\n            codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]],\n            names=[\"A\", \"B\"],\n        )\n        expected.columns = Index([\"large\", \"small\"], dtype=\"object\", name=\"C\")\n        tm.assert_frame_equal(result, expected)\n\n        # normalize on columns\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=1\n        )\n        expected = pd.DataFrame(\n            [\n                [0.25, 0.2, 0.222222],\n                [0.25, 0.2, 0.222222],\n                [0.5, 0.2, 0.333333],\n                [0, 0.4, 0.222222],\n            ]\n        )\n        expected.columns = Index(\n            [\"large\", \"small\", \"Sub-Total\"], dtype=\"object\", name=\"C\"\n        )\n        expected.index = MultiIndex(\n            levels=[[\"bar\", \"foo\"], [\"one\", \"two\"]],\n            codes=[[0, 0, 1, 1], [0, 1, 0, 1]],\n            names=[\"A\", \"B\"],\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # normalize on both index and column\n        result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=True\n        )\n        expected = pd.DataFrame(\n            [\n                [0.111111, 0.111111, 0.222222],\n                [0.111111, 0.111111, 0.222222],\n                [0.222222, 0.111111, 0.333333],\n                [0.000000, 0.222222, 0.222222],\n                [0.444444, 0.555555, 1],\n            ]\n        )\n        expected.columns = Index(\n            [\"large\", \"small\", \"Sub-Total\"], dtype=\"object\", name=\"C\"\n        )\n        expected.index = MultiIndex(\n            levels=[[\"Sub-Total\", \"bar\", \"foo\"], [\"\", \"one\", \"two\"]],\n            codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]],\n            names=[\"A\", \"B\"],\n        )\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/reshape/test_pivot.py"
    ],
    "2.1.1": [
        [
            "E               KeyError: \"['Sub-Total'] not found in axis\""
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.reshape.test_pivot.TestCrosstab object at 0x122273c70>\n\n    def test_margin_normalize(self):\n        # GH 27500\n        df = pd.DataFrame(\n            {\n                \"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"bar\"],\n                \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\", \"one\", \"one\", \"two\", \"two\"],\n                \"C\": [\n                    \"small\",\n                    \"large\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                    \"small\",\n                    \"small\",\n                    \"large\",\n                ],\n                \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9],\n            }\n        )\n        # normalize on index\n>       result = pd.crosstab(\n            [df.A, df.B], df.C, margins=True, margins_name=\"Sub-Total\", normalize=0\n        )\n\npandas/tests/reshape/test_pivot.py:2473: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/pivot.py:578: in crosstab\n    table = _normalize(\npandas/core/reshape/pivot.py:616: in _normalize\n    index_margin = table.loc[margins_name, :].drop(margins_name)\npandas/core/frame.py:4035: in drop\n    return super().drop(\npandas/core/generic.py:3880: in drop\n    obj = obj._drop_axis(labels, axis, level=level, errors=errors)\npandas/core/generic.py:3912: in _drop_axis\n    new_axis = axis.drop(labels, errors=errors)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Index([''], dtype='object', name='B')\nlabels = array(['Sub-Total'], dtype=object), errors = 'raise'\n\n    def drop(self, labels, errors=\"raise\"):\n        \"\"\"\n        Make new Index with passed list of labels deleted.\n    \n        Parameters\n        ----------\n        labels : array-like\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n    \n        Returns\n        -------\n        dropped : Index\n    \n        Raises\n        ------\n        KeyError\n            If not all of the labels are found in the selected axis\n        \"\"\"\n        arr_dtype = \"object\" if self.dtype == \"object\" else None\n        labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n        indexer = self.get_indexer(labels)\n        mask = indexer == -1\n        if mask.any():\n            if errors != \"ignore\":\n>               raise KeyError(\"{} not found in axis\".format(labels[mask]))",
            "\npandas/core/indexes/base.py:5316: KeyError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "normalize": "'index'",
                "margins": "False",
                "table": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                "table.fillna": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                "table.index": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                "table.columns": "Index(['large', 'small'], dtype='object', name='C')",
                "margins_name": "'All'",
                "table.iloc": "<pandas.core.indexing._iLocIndexer object at 0x115573270>",
                "table.append": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>"
            },
            {
                "normalizers": "{'all': <function _normalize.<locals>.<lambda> at 0x11560c700>, 'columns': <function _normalize.<locals>.<lambda> at 0x11560c5e0>, 'index': <function _normalize.<locals>.<lambda> at 0x11560c040>, True: <function _normalize.<locals>.<lambda> at 0x11560c700>}",
                "f": "<function _normalize.<locals>.<lambda> at 0x11560c040>",
                "table": "C           large     small\nA   B                      \nbar one  0.500000  0.500000\n    two  0.500000  0.500000\nfoo one  0.666667  0.333333\n    two  0.000000  1.000000",
                "table.fillna": "<bound method DataFrame.fillna of C           large     small\nA   B                      \nbar one  0.500000  0.500000\n    two  0.500000  0.500000\nfoo one  0.666667  0.333333\n    two  0.000000  1.000000>",
                "table.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1155eb220>",
                "table.append": "<bound method DataFrame.append of C           large     small\nA   B                      \nbar one  0.500000  0.500000\n    two  0.500000  0.500000\nfoo one  0.666667  0.333333\n    two  0.000000  1.000000>"
            }
        ],
        [
            {
                "normalize": "'columns'",
                "margins": "False",
                "table": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                "table.fillna": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                "table.index": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                "table.columns": "Index(['large', 'small'], dtype='object', name='C')",
                "margins_name": "'All'",
                "table.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1155c4d10>",
                "table.append": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>"
            },
            {
                "normalizers": "{'all': <function _normalize.<locals>.<lambda> at 0x1155b70d0>, 'columns': <function _normalize.<locals>.<lambda> at 0x1155b7160>, 'index': <function _normalize.<locals>.<lambda> at 0x1155b71f0>, True: <function _normalize.<locals>.<lambda> at 0x1155b70d0>}",
                "f": "<function _normalize.<locals>.<lambda> at 0x1155b7160>",
                "table": "C        large  small\nA   B                \nbar one   0.25    0.2\n    two   0.25    0.2\nfoo one   0.50    0.2\n    two   0.00    0.4",
                "table.fillna": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one   0.25    0.2\n    two   0.25    0.2\nfoo one   0.50    0.2\n    two   0.00    0.4>",
                "table.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1155c4860>",
                "table.append": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one   0.25    0.2\n    two   0.25    0.2\nfoo one   0.50    0.2\n    two   0.00    0.4>"
            }
        ],
        [
            {
                "normalize": "True",
                "margins": "False",
                "table": "C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2",
                "table.fillna": "<bound method DataFrame.fillna of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>",
                "table.index": "MultiIndex([('bar', 'one'),\n            ('bar', 'two'),\n            ('foo', 'one'),\n            ('foo', 'two')],\n           names=['A', 'B'])",
                "table.columns": "Index(['large', 'small'], dtype='object', name='C')",
                "margins_name": "'All'",
                "table.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1155be130>",
                "table.append": "<bound method DataFrame.append of C        large  small\nA   B                \nbar one      1      1\n    two      1      1\nfoo one      2      1\n    two      0      2>"
            },
            {
                "normalizers": "{'all': <function _normalize.<locals>.<lambda> at 0x1155c0790>, 'columns': <function _normalize.<locals>.<lambda> at 0x1155c0700>, 'index': <function _normalize.<locals>.<lambda> at 0x1155c04c0>, True: <function _normalize.<locals>.<lambda> at 0x1155c0790>}",
                "f": "<function _normalize.<locals>.<lambda> at 0x1155c0790>",
                "table": "C           large     small\nA   B                      \nbar one  0.111111  0.111111\n    two  0.111111  0.111111\nfoo one  0.222222  0.111111\n    two  0.000000  0.222222",
                "table.fillna": "<bound method DataFrame.fillna of C           large     small\nA   B                      \nbar one  0.111111  0.111111\n    two  0.111111  0.111111\nfoo one  0.222222  0.111111\n    two  0.000000  0.222222>",
                "table.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1155ab630>",
                "table.append": "<bound method DataFrame.append of C           large     small\nA   B                      \nbar one  0.111111  0.111111\n    two  0.111111  0.111111\nfoo one  0.222222  0.111111\n    two  0.000000  0.222222>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "normalize": "str",
                "margins": "bool",
                "table": "DataFrame",
                "table.fillna": "method",
                "table.index": "MultiIndex",
                "table.columns": "Index",
                "margins_name": "str",
                "table.iloc": "_iLocIndexer",
                "table.append": "method"
            },
            {
                "normalizers": "dict",
                "f": "function",
                "table": "DataFrame",
                "table.fillna": "method",
                "table.iloc": "_iLocIndexer",
                "table.append": "method"
            }
        ],
        [
            {
                "normalize": "str",
                "margins": "bool",
                "table": "DataFrame",
                "table.fillna": "method",
                "table.index": "MultiIndex",
                "table.columns": "Index",
                "margins_name": "str",
                "table.iloc": "_iLocIndexer",
                "table.append": "method"
            },
            {
                "normalizers": "dict",
                "f": "function",
                "table": "DataFrame",
                "table.fillna": "method",
                "table.iloc": "_iLocIndexer",
                "table.append": "method"
            }
        ],
        [
            {
                "normalize": "bool",
                "margins": "bool",
                "table": "DataFrame",
                "table.fillna": "method",
                "table.index": "MultiIndex",
                "table.columns": "Index",
                "margins_name": "str",
                "table.iloc": "_iLocIndexer",
                "table.append": "method"
            },
            {
                "normalizers": "dict",
                "f": "function",
                "table": "DataFrame",
                "table.fillna": "method",
                "table.iloc": "_iLocIndexer",
                "table.append": "method"
            }
        ]
    ],
    "3.1.1": [
        "crosstabs doesn't work with margin and normalize together\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nimport pandas as pd\ndf = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n          \"bar\", \"bar\", \"bar\", \"bar\"],\n                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n                          \"one\", \"one\", \"two\", \"two\"],\n                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n                          \"small\", \"large\", \"small\", \"small\",\n                          \"large\"],\n                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n\npd.crosstab([df.A,df.B],df.C,margins=True,margins_name='Sub-Total',normalize=0)\nProblem description\npandas.Crosstab:\nAs per the Documentation, For parameter normalize If margins is True, will also normalize margin values. However when I give normalize as True and margins as True with margin_names as a string then it throws following exception:\n\nKeyError: \"['Sub-Total'] not found in axis\"\n\nwhere Sub-Total is the margins_name String.\n\nExpected Output\nNormalize value of the Margin rows and columns\n"
    ]
}