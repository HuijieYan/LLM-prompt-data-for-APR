{
    "pandas": [
        {
            "bugID": 107,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 6658,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n\n    from pandas import Series, DataFrame, concat, Index\n    \"\"\"\n    This method combines two dataframes. \n    Parameters\n    ----------\n    self : DataFrame\n        The caller dataframe.\n    other : DataFrame, Series, dtype object, or list of these\n        The data that will be appended.\n    ignore_index : bool, default False\n        If True, the index labels will not be used.\n    verify_integrity : bool, default False\n        If True, a ValueError will be raised if an index with duplicate values is created.\n    sort : bool, default False\n        When the columns of `self` and `other` are not aligned, if set to True, they will be sorted.\n    \n    Returns\n    -------\n    DataFrame\n    Returns the DataFrame with the rows of `other` appended to the end of the caller.\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n    \"\"\"\n    parent_frame = self\n    to_append = other\n    \n    if isinstance(other, (Series, dict)):\n        # Checking the input type\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n    \n        index = None if other.name is None else Index([other.name], name=self.index.name)\n    \n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = other.reindex(combined_columns, copy=False)\n    \n        other = DataFrame(\n            other.values.T.flatten(),\n            index=index,\n            columns=combined_columns,\n        )\n    \n        if not self.columns.equals(combined_columns):\n            parent_frame = self.reindex(columns=combined_columns)\n    \n    if isinstance(other, list):\n        if other:\n            if not isinstance(other[0], DataFrame):\n                other = DataFrame(other)\n                if other.columns.get_indexer(parent_frame.columns).all() >= 0:\n                    other = other.reindex(columns=parent_frame.columns)\n    \n    if isinstance(other, (list, tuple)):\n        to_concat = [parent_frame] + other\n    else:\n        to_concat = [parent_frame, other]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )"
        }
    ]
}