{
    "pandas": [
        {
            "bugID": 107,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 6658,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n    if isinstance(other, (DataFrame, Series, dict)):\n        other = other if isinstance(other, DataFrame) else DataFrame(other)\n        if not ignore_index:\n            combined_index = self.index.append(other.index)\n            if combined_index.has_duplicates:\n                if verify_integrity:\n                    raise ValueError(\"Index has duplicate entries and 'verify_integrity' is True.\")\n                combined_index = combined_index.drop_duplicates()\n            if sort:\n                combined_index = combined_index.sort_values()\n            result = DataFrame(index=combined_index)\n            for col in self.columns.union(other.columns):\n                result._set_item(col, other._get_item_cache(col)._data)\n            return result\n        else:\n            result_data = {}\n            for col in self.columns.union(other.columns):\n                result_data[col] = self._get_item_cache(col)._data._concat(\n                    (\n                        self[col],\n                        other[col] if col in other.columns else np.nan\n                    ),\n                    not ignore_index\n                )\n            return DataFrame(data=result_data)\n    else:\n        raise TypeError(\n            \"Can only append a DataFrame/Series/dict-like object with DataFrame/Series/dict-like objects\"\n        )",
            "imports": []
        }
    ]
}