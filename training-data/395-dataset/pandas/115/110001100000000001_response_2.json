{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n        xvalues,\n        yvalues,\n        method=\"linear\",\n        limit=None,\n        limit_direction=\"forward\",\n        limit_area=None,\n        fill_value=None,\n        bounds_error=False,\n        order=None,\n        **kwargs,\n    ):\n        \"\"\"\n        Logic for the 1-d interpolation.  The result should be 1-d, inputs\n        xvalues and yvalues will each be 1-d arrays of the same length.\n    \n        Bounds_error is currently hardcoded to False since non-scipy ones don't\n        take it as an argument.\n        \"\"\"\n        # ... omitted code ...\n\n        # sort preserve_nans and covert to list\n        preserve_nans = sorted(preserve_nans)\n        preserve_nans = list(preserve_nans)\n\n        # ... omitted code ...\n\n        result = np.empty_like(np.asarray(xvalues), dtype=np.float64)\n        result.fill(np.nan)\n\n        if method in [\"linear\", \"time\", \"index\", \"values\"]:\n            if method in (\"values\", \"index\"):\n                inds = np.asarray(xvalues)\n                # hack for DatetimeIndex, #1646\n                if needs_i8_conversion(inds.dtype.type):\n                    inds = inds.view(np.int64)\n                if inds.dtype == np.object_:\n                    inds = lib.maybe_convert_objects(inds)\n            else:\n                inds = xvalues\n            invalid_inds = np.asarray(inds[invalid])\n            valid_inds = np.asarray(inds[valid])\n            invalid_values = np.interp(invalid_inds, valid_inds, yvalues[valid])\n            for i, index in enumerate(invalid):\n                if index:\n                    result[i] = invalid_values[i]\n            for index in preserve_nans:\n                result[index] = np.nan\n            return result",
            "import_list": []
        }
    ]
}