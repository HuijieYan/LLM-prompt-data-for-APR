{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs,\n):\n    \"\"\"\n    Logic for the 1-d interpolation.  The result should be 1-d, inputs\n    xvalues and yvalues will each be 1-d arrays of the same length.\n    Bounds_error is currently hardcoded to False since non-scipy ones don't\n    take it as an argument.\n    \"\"\"\n\n    # Validate input parameters\n    valid_limit_directions = [\"forward\", \"backward\", \"both\"]\n    if limit_direction.lower() not in valid_limit_directions:\n        raise ValueError(f\"Invalid limit_direction: expecting one of {valid_limit_directions}, got {limit_direction}\")\n\n    if limit_area is not None:\n        valid_limit_areas = [\"inside\", \"outside\"]\n        if limit_area.lower() not in valid_limit_areas:\n            raise ValueError(f\"Invalid limit_area: expecting one of {valid_limit_areas}, got {limit_area}\")\n\n    # Logic for preserving NaNs based on the direction and area\n    preserve_nans = set()\n    n = len(yvalues)\n    for i in range(n):\n        if pd.isna(yvalues[i]):\n            if (limit_direction == \"forward\" and (limit is None or i - limit < 0)) or (limit_direction == \"backward\" and (limit is None or i + limit >= n)):\n                preserve_nans.add(i)\n            elif limit_area == \"inside\":\n                preserve_nans.add(i)\n            elif limit_area == \"outside\":\n                if i - limit < 0 or i + limit >= n:\n                    preserve_nans.add(i)\n\n    xvalues = getattr(xvalues, \"values\", xvalues)\n    yvalues = getattr(yvalues, \"values\", yvalues)\n\n    # Perform interpolation\n    if method in [\"linear\", \"time\", \"index\", \"values\"]:\n        result = np.interp(xvalues, xvalues[~pd.isna(yvalues)], yvalues[~pd.isna(yvalues)])\n        result[preserve_nans] = np.nan\n        return result\n    else:\n        # Handle other interpolation methods\n        result = np.full(n, np.nan)\n        valid_indices = ~pd.isna(yvalues)\n        result[valid_indices] = _interpolate_scipy_wrapper(\n            xvalues[valid_indices],\n            yvalues[valid_indices],\n            xvalues[pd.isna(yvalues)],\n            method=method,\n            fill_value=fill_value,\n            bounds_error=bounds_error,\n            order=order,\n            **kwargs,\n        )\n        result[preserve_nans] = np.nan\n        return result",
            "imports": []
        }
    ]
}