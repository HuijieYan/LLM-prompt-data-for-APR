{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(xvalues, yvalues, method=\"linear\", limit=None, limit_direction=\"forward\", limit_area=None, fill_value=None, bounds_error=False, order=None, **kwargs):\n    invalid = np.isnan(yvalues)\n    valid = ~invalid\n\n    if not valid.any():\n        result = np.empty_like(xvalues, dtype=float)\n        result.fill(np.nan)\n        return result\n\n    if valid.all():\n        return yvalues\n\n    # Code for 'time' method remains the same\n\n    valid_limit_directions = [\"forward\", \"backward\", \"both\"]\n    limit_direction = limit_direction.lower()\n    if limit_direction not in valid_limit_directions:\n        raise ValueError(\"Invalid limit_direction: expecting one of {valid!r}, got {invalid!r}.\".format(valid=valid_limit_directions, invalid=limit_direction))\n    \n    if limit_area is not None:\n        valid_limit_areas = [\"inside\", \"outside\"]\n        limit_area = limit_area.lower()\n        if limit_area not in valid_limit_areas:\n            raise ValueError(\"Invalid limit_area: expecting one of {}, got {}.\".format(valid_limit_areas, limit_area))\n\n    limit = np._validate_max(1 if limit is None else int(limit))\n    indexer = np.arange(len(yvalues))\n\n    all_nans = indexer[invalid]\n    start_nans = indexer[:np.flatnonzero(valid)[0]]\n    end_nans = indexer[np.flatnonzero(valid)[-1] + 1:]\n    mid_nans = np.setdiff1d(all_nans, np.union1d(start_nans, end_nans))\n\n    if limit_direction == \"forward\":\n        preserve_nans = np.union1d(start_nans, indexer[np.minimum(indexer, limit)])\n    elif limit_direction == \"backward\":\n        preserve_nans = np.union1d(end_nans, indexer[np.maximum(indexer, len(yvalues) - 1 - limit)])\n    else:\n        preserve_nans = np.union1d(indexer[np.minimum(indexer, limit)], indexer[np.maximum(indexer, len(yvalues) - 1 - limit)])\n\n    if limit_area == \"inside\":\n        preserve_nans = np.union1d(preserve_nans, np.union1d(start_nans, end_nans))\n    elif limit_area == \"outside\":\n        preserve_nans = np.union1d(preserve_nans, mid_nans)\n\n    preserve_nans = np.sort(preserve_nans)\n\n    result = yvalues.copy()\n\n    # Remaining logic of the function remains unchanged\n\n    return result",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}