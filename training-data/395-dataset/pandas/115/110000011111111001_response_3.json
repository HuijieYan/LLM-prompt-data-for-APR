{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs,\n):\n    # (previous code)\n\n    if limit_area == \"inside\":\n        preserve_nans |= mid_nans\n    elif limit_area == \"outside\":\n        preserve_nans |= start_nans | end_nans\n\n    preserve_nans = sorted(preserve_nans)\n\n    xvalues = getattr(xvalues, \"values\", xvalues)\n    yvalues = getattr(yvalues, \"values\", yvalues)\n    result = yvalues.copy()\n\n    if method in [\"linear\", \"time\", \"index\", \"values\"]:\n        if method in (\"values\", \"index\"):\n            inds = np.asarray(xvalues)\n            if needs_i8_conversion(inds.dtype.type):\n                inds = inds.view(np.int64)\n            if inds.dtype == np.object_:\n                inds = lib.maybe_convert_objects(inds)\n        else:\n            inds = xvalues\n        result[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n        result[preserve_nans] = np.nan\n        return result\n\n    sp_methods = [\n        \"nearest\",\n        \"zero\",\n        \"slinear\",\n        \"quadratic\",\n        \"cubic\",\n        \"barycentric\",\n        \"krogh\",\n        \"spline\",\n        \"polynomial\",\n        \"from_derivatives\",\n        \"piecewise_polynomial\",\n        \"pchip\",\n        \"akima\",\n    ]\n\n    if method in sp_methods:\n        inds = np.asarray(xvalues)\n        if issubclass(inds.dtype.type, np.datetime64):\n            inds = inds.view(np.int64)\n        result[invalid] = _interpolate_scipy_wrapper(\n            inds[valid],\n            yvalues[valid],\n            inds[invalid],\n            method=method,\n            fill_value=fill_value,\n            bounds_error=bounds_error,\n            order=order,\n            **kwargs,\n        )\n        result[preserve_nans] = np.nan\n        return result",
            "imports": []
        }
    ]
}