{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(xvalues, yvalues, method=\"linear\"):\n    # Validate method\n    valid_methods = [\"linear\", \"time\", \"index\", \"values\", \"nearest\", \"zero\", \"slinear\", \"quadratic\", \"cubic\", \"barycentric\", \"krogh\", \"spline\", \"polynomial\", \"from_derivatives\", \"piecewise_polynomial\", \"pchip\", \"akima\"]\n    \n    if method not in valid_methods:\n        raise ValueError(f\"Invalid interpolation method: {method}. Valid methods are {valid_methods}\")\n    \n    if method == \"time\":\n        if not getattr(xvalues, \"is_all_dates\", None):\n            raise ValueError(\"time-weighted interpolation only works on Series or DataFrames with a DatetimeIndex\")\n    \n    # Perform interpolation based on method\n    if method in [\"values\", \"index\"]:\n        inds = np.asarray(xvalues)\n        result = np.interp(inds, xvalues, yvalues)\n    elif method in valid_methods:  # Using scipy interpolation methods\n        from scipy import interpolate\n        f = interpolate.interp1d(xvalues, yvalues, kind=method, fill_value=\"extrapolate\")\n        result = f(xvalues)\n    else:\n        # Default to linear interpolation\n        result = np.interp(xvalues, xvalues, yvalues)\n    \n    return result",
            "imports": [
                "from scipy import interpolate"
            ]
        }
    ]
}