{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs,\n):\n    \"\"\"\n    Logic for the 1-d interpolation.  The result should be 1-d, inputs\n    xvalues and yvalues will each be 1-d arrays of the same length.\n\n    Bounds_error is currently hardcoded to False since non-scipy ones don't\n    take it as an argument.\n    \"\"\"\n    \n    valid_limit_directions = [\"forward\", \"backward\", \"both\"]\n    limit_direction = limit_direction.lower()\n    if limit_direction not in valid_limit_directions:\n        msg = \"Invalid limit_direction: expecting one of {valid!r}, got {invalid!r}.\"\n        raise ValueError(\n            msg.format(valid=valid_limit_directions, invalid=limit_direction)\n        )\n\n    if limit_area is not None:\n        valid_limit_areas = [\"inside\", \"outside\"]\n        limit_area = limit_area.lower()\n        if limit_area not in valid_limit_areas:\n            raise ValueError(\n                \"Invalid limit_area: expecting one of {}, got \"\n                \"{}.\".format(valid_limit_areas, limit_area)\n            )\n\n    # default limit is unlimited GH #16282\n    limit = limit if limit is not None else None\n\n    if fill_value is None:\n        fill_value = np.nan\n\n    all_nans = set(np.flatnonzero(np.isnan(yvalues)))\n    start_nans = set(range(next((i for i, val in enumerate(yvalues) if not np.isnan(val)), 0)))\n    end_nans = set(range(next((i for i, val in enumerate(yvalues[::-1]) if not np.isnan(val)), 0), len(yvalues)))\n    mid_nans = all_nans - start_nans - end_nans\n\n    if limit_direction == \"forward\":\n        preserve_nans = start_nans | set(i for i in range(len(yvalues)) if i - min(start_nans) > limit)\n    elif limit_direction == \"backward\":\n        preserve_nans = end_nans | set(i for i in range(len(yvalues)) if min(end_nans) - i > limit)\n    else:\n        preserve_nans = set(i for i in range(len(yvalues)) if min(start_nans) - i > limit or i - max(start_nans) > limit)\n\n    if limit_area == \"inside\":\n        preserve_nans |= start_nans | end_nans\n    elif limit_area == \"outside\":\n        preserve_nans |= mid_nans\n\n    preserve_nans = sorted(preserve_nans)\n\n    result = yvalues.copy()\n\n    if method in [\"linear\", \"time\", \"index\", \"values\"]:\n        inds = np.asarray(xvalues)\n        result[np.isnan(yvalues)] = np.interp(inds[np.isnan(yvalues)], inds[~np.isnan(yvalues)], yvalues[~np.isnan(yvalues)])\n        result[preserve_nans] = np.nan\n        return result\n\n    if method in [\n        \"nearest\", \"zero\", \"slinear\", \"quadratic\", \"cubic\",\n        \"barycentric\", \"krogh\", \"spline\", \"polynomial\",\n        \"from_derivatives\", \"piecewise_polynomial\", \"pchip\", \"akima\"\n    ]:\n        inds = np.asarray(xvalues)\n        result[np.isnan(yvalues)] = np.interp(inds[~np.isnan(yvalues)], yvalues[~np.isnan(yvalues)], inds[np.isnan(yvalues)], method=method, fill_value=fill_value)\n        result[preserve_nans] = np.nan\n        return result",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}