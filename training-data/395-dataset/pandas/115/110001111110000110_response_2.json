{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs,\n):\n    valid_methods = [\n        \"linear\",\n        \"time\",\n        \"index\",\n        \"values\",\n        \"nearest\",\n        \"zero\",\n        \"slinear\",\n        \"quadratic\",\n        \"cubic\",\n        \"barycentric\",\n        \"krogh\",\n        \"spline\",\n        \"polynomial\",\n        \"from_derivatives\",\n        \"piecewise_polynomial\",\n        \"pchip\",\n        \"akima\",\n    ]\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid method: {method}. Expected one of: {valid_methods}\")\n\n    # ... rest of the function code ...\n\n    if method in (\"values\", \"index\"):\n        inds = np.asarray(xvalues)\n        if is_object_dtype(inds.dtype):\n            inds = lib.maybe_convert_objects(inds)\n    else:\n        inds = xvalues\n    result[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n    result[preserve_nans] = np.nan\n    return result",
            "imports": [
                "import numpy as np",
                "import pandas as pd",
                "import pytest",
                "from pandas._libs import algos",
                "from pandas.api.types import is_object_dtype",
                "from pandas.core import common as com",
                "from pandas.core import internals as lib",
                "from pandas.core.dtypes.common import is_datetime_or_timedelta_dtype, needs_i8_conversion",
                "from pandas.core.missing import find_valid_index",
                "from pandas.core.missing import _interp_limit",
                "from pandas.core.missing import _interpolate_scipy_wrapper"
            ]
        }
    ]
}