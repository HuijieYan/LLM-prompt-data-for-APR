{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs,\n):\n    import numpy as np\n    invalid = np.isnan(yvalues)\n    valid = ~invalid\n    result = np.empty_like(yvalues)\n    \n    if not valid.any():\n        result.fill(np.nan)\n        return result\n    elif valid.all():\n        return yvalues\n    \n    preserve_nans = []\n    \n    if limit_direction == \"forward\":\n        preserve_nans = list(np.where(invalid & (np.arange(len(yvalues)) > limit))[0])\n    elif limit_direction == \"backward\":\n        preserve_nans = list(np.where(invalid & (np.arange(len(yvalues)) < len(yvalues) - limit))[0])\n    else:\n        preserve_nans = list(np.where(invalid)[0])\n    \n    if limit_area == \"inside\":\n        preserve_nans.extend(list(np.where((np.isnan(yvalues)) & (np.arange(len(yvalues)) != 0) & (np.arange(len(yvalues)) != len(yvalues)-1))[0]))\n    elif limit_area == \"outside\":\n        preserve_nans.extend(list(np.where((np.isnan(yvalues)) & ((np.arange(len(yvalues)) == 0) | (np.arange(len(yvalues)) == len(yvalues)-1)))[0]))\n    \n    preserve_nans = sorted(set(preserve_nans))\n    \n    result[invalid] = np.interp(xvalues[invalid], xvalues[valid], yvalues[valid])\n    result[preserve_nans] = np.nan\n    \n    return result"
        }
    ]
}