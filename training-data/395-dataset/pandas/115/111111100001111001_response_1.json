{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(xvalues, yvalues, method=\"linear\", limit=None, limit_direction=\"forward\", limit_area=None, fill_value=None, bounds_error=False, order=None, **kwargs):\n    valid = ~np.isnan(yvalues)\n\n    if method == \"time\":\n        if not getattr(xvalues, \"is_all_dates\", None):\n            raise ValueError(\"time-weighted interpolation only works on Series or DataFrames with a DatetimeIndex\")\n        method = \"values\"\n\n    preserve_nans = np.isnan(yvalues)\n  \n    if method in [\"linear\", \"index\", \"values\"]:\n        result = np.interp(xvalues, xvalues[valid], yvalues[valid], left=np.nan, right=np.nan)\n        result[preserve_nans] = np.nan\n        return result\n    else:\n        f = interpolate.interp1d(xvalues[valid], yvalues[valid], kind=method, fill_value=fill_value, bounds_error=bounds_error)\n        result = f(xvalues)\n        result[preserve_nans] = np.nan\n        return result",
            "imports": [
                "import numpy as np",
                "from pandas.api.types import is_integer, is_list_like",
                "from scipy import interpolate"
            ]
        }
    ]
}