{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(xvalues, yvalues, method=\"linear\", limit=None, limit_direction=\"forward\", limit_area=None, fill_value=None, bounds_error=False, order=None, **kwargs):\n    valid_limit_directions = [\"forward\", \"backward\", \"both\"]\n    \n    invalid = isna(yvalues)\n    valid = ~invalid\n\n    if not valid.any():\n        result = np.empty_like(np.asarray(xvalues), dtype=np.float64)\n        result.fill(np.nan)\n        return result\n    if valid.all():\n        return yvalues\n    \n    if limit_direction.lower() not in valid_limit_directions:\n        raise ValueError(\"Invalid limit_direction: expecting one of {valid!r}, got {invalid!r}.\".format(valid=valid_limit_directions, invalid=limit_direction))\n    \n    if limit_area is not None and limit_area.lower() not in [\"inside\", \"outside\"]:\n        raise ValueError(\"Invalid limit_area: expecting one of ['inside', 'outside'], got \" + str(limit_area) + \".\")\n    \n    all_nans = set(np.flatnonzero(invalid))\n    start_nans = set(range(next(i for i, v in enumerate(valid) if v)))\n    end_nans = set(range(len(valid) - next(i for i, v in enumerate(valid[::-1]) if v)))\n    mid_nans = all_nans - start_nans - end_nans\n\n    limit = next(algos._validate_limit(nobs=None, limit=limit))\n    \n    if limit_direction == \"forward\":\n        preserve_nans = start_nans | set(_interp_limit(invalid, limit, 0))\n    elif limit_direction == \"backward\":\n        preserve_nans = end_nans | set(_interp_limit(invalid, 0, limit))\n    else:\n        preserve_nans = set(_interp_limit(invalid, limit, limit))\n    \n    if limit_area == \"inside\":\n        preserve_nans |= start_nans | end_nans\n    elif limit_area == \"outside\":\n        preserve_nans |= mid_nans\n \n    preserve_nans = sorted(list(preserve_nans))\n    \n    inds = np.asarray(xvalues)\n    if method in (\"values\", \"index\"):\n        if inds.dtype.type == np.object_:\n            inds = lib.maybe_convert_objects(inds)\n    else:\n        inds = xvalues\n\n    result = yvalues.copy()\n    \n    if method in [\"linear\", \"time\", \"index\", \"values\"]:\n        result[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n        result[preserve_nans] = np.nan\n        return result\n    \n    sp_methods = [\n        \"nearest\", \"zero\", \"slinear\", \"quadratic\", \"cubic\", \"barycentric\",\n        \"krogh\", \"spline\", \"polynomial\", \"from_derivatives\",\n        \"piecewise_polynomial\", \"pchip\", \"akima\"\n    ]\n    \n    if method in sp_methods:\n        result[invalid] = _interpolate_scipy_wrapper(inds[valid], yvalues[valid], inds[invalid], method=method, fill_value=fill_value, bounds_error=bounds_error, order=order, **kwargs)\n        result[preserve_nans] = np.nan\n        return result",
            "imports": [
                "import numpy as np",
                "from pandas import isna, Int64Index"
            ]
        }
    ]
}