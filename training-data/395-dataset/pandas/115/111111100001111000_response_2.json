{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs\n):\n    invalid = np.isnan(yvalues)\n    valid = ~invalid\n\n    if not valid.any():\n        result = np.empty_like(np.asarray(xvalues), dtype=np.float64)\n        result.fill(np.nan)\n        return result\n\n    if valid.all():\n        return yvalues\n\n    if method == \"time\":\n        if not getattr(xvalues, \"is_all_dates\", None):\n            raise ValueError(\n                \"time-weighted interpolation only works \"\n                \"on Series or DataFrames with a \"\n                \"DatetimeIndex\"\n            )\n        method = \"values\"\n\n    valid_limit_directions = [\"forward\", \"backward\", \"both\"]\n    limit_direction = limit_direction.lower()\n    if limit_direction not in valid_limit_directions:\n        msg = \"Invalid limit_direction: expecting one of {valid!r}, got {invalid!r}.\"\n        raise ValueError(\n            msg.format(valid=valid_limit_directions, invalid=limit_direction)\n        )\n\n    if limit_area is not None:\n        valid_limit_areas = [\"inside\", \"outside\"]\n        limit_area = limit_area.lower()\n        if limit_area not in valid_limit_areas:\n            raise ValueError(\n                \"Invalid limit_area: expecting one of {}, got \"\n                \"{}.\".format(valid_limit_areas, limit_area)\n            )\n\n    limit = _validate_limit(nobs=None, limit=limit)\n\n    all_nans = set(np.flatnonzero(invalid))\n    start_nans = set(range(find_valid_index(yvalues, \"first\")))\n    end_nans = set(range(1 + find_valid_index(yvalues, \"last\"), len(valid)))\n    mid_nans = all_nans - start_nans - end_nans\n\n    if limit_direction == \"forward\":\n        preserve_nans = start_nans | set(_interp_limit(invalid, limit, 0))\n    elif limit_direction == \"backward\":\n        preserve_nans = end_nans | set(_interp_limit(invalid, 0, limit))\n    else:\n        preserve_nans = set(_interp_limit(invalid, limit, limit))\n\n    if limit_area == \"inside\":\n        preserve_nans |= start_nans | end_nans\n    elif limit_area == \"outside\":\n        preserve_nans |= mid_nans\n\n    preserve_nans = sorted(preserve_nans)\n\n    xvalues = getattr(xvalues, \"values\", xvalues)\n    yvalues = getattr(yvalues, \"values\", yvalues)\n    result = yvalues.copy()\n\n    if method in [\"linear\", \"time\", \"index\", \"values\"]:\n        if method in (\"values\", \"index\"):\n            inds = np.asarray(xvalues)\n            if inds.dtype.kind in [\"O\", \"M\", \"m\"]:\n                inds = inds.astype('i8', copy=False)\n        else:\n            inds = xvalues\n        result[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n        result[preserve_nans] = np.nan\n        return result\n\n    sp_methods = [\n        \"nearest\",\n        \"zero\",\n        \"slinear\",\n        \"quadratic\",\n        \"cubic\",\n        \"barycentric\",\n        \"krogh\",\n        \"piecewise_polynomial\",\n        \"pchip\",\n        \"akima\",\n    ]\n\n    if method in sp_methods:\n        inds = np.asarray(xvalues)\n        if np.issubdtype(inds.dtype, np.datetime64):\n            inds = inds.astype('i8', copy=False)\n        result[invalid] = _interpolate_scipy_wrapper(\n            inds[valid],\n            yvalues[valid],\n            inds[invalid],\n            method=method,\n            fill_value=fill_value,\n            bounds_error=bounds_error,\n            order=order,\n        )\n        result[preserve_nans] = np.nan\n        return result",
            "import_list": [
                "import numpy as np",
                "from pandas.core.algorithms import _interpolate_scipy_wrapper, _validate_limit, find_valid_index, _interp_limit",
                "from pandas.core import algorithms as algos"
            ]
        }
    ]
}