{
    "pandas": [
        {
            "bugID": 115,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 167,
            "file_name": "pandas/core/missing.py",
            "replace_code": "def interpolate_1d(\n    xvalues,\n    yvalues,\n    method=\"linear\",\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    bounds_error=False,\n    order=None,\n    **kwargs,  \n):\n    invalid = np.isnan(yvalues)\n    valid = ~invalid\n\n    if not valid.any():\n        result = np.empty_like(yvalues, dtype=float)\n        result.fill(np.nan)\n        return result\n\n    if valid.all():\n        return yvalues\n\n    # Handle specific cases for the 'index' method\n    if method == \"index\":\n        sorted_index = np.argsort(xvalues)\n        sorted_xvalues = xvalues[sorted_index]\n        sorted_yvalues = yvalues[sorted_index]\n        inds = np.asarray(sorted_xvalues)\n        result = np.interp(inds, inds[valid], sorted_yvalues[valid])\n        return np.interp(xvalues, sorted_xvalues, result)\n\n    # Handle other interpolation methods\n    result = yvalues.copy()\n    inds = np.asarray(xvalues)\n    inds[invalid] = np.interp(inds[invalid], inds[valid], yvalues[valid])\n    \n    result[invalid] = inds[invalid]  # Set interpolated values\n    return result",
            "imports": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}