{
    "pandas": [
        {
            "bugID": 154,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2192,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def _get_cythonized_result(\n    self,\n    how,\n    grouper,\n    aggregate=False,\n    cython_dtype=None,\n    needs_values=False,\n    needs_mask=False,\n    needs_ngroups=False,\n    result_is_index=False,\n    pre_processing=None,\n    post_processing=None,\n    **kwargs\n):\n    import collections\n    from functools import partial\n    import numpy as np\n    from pandas.api.types import isna\n    from pandas.core import algorithms\n    from pandas.core.groupby import libgroupby\n    \"\"\"\n    Get result for Cythonized functions.\n    \n    Parameters\n    ----------\n    ...  # Same parameter list as before\n    \n    Returns\n    -------\n    `Series` or `DataFrame`  with filled values\n    \"\"\"\n    if result_is_index and aggregate:\n        raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n    if pre_processing and not callable(pre_processing):\n        raise ValueError(\"'pre_processing' must be a callable!\")\n    if pre_processing and not needs_values:\n        raise ValueError(\n            \"Cannot use 'pre_processing' without specifying 'needs_values'!\"\n        )\n    \n    labels, _, ngroups = grouper.group_info\n    output = collections.OrderedDict()\n    base_func = getattr(libgroupby, how)\n    \n    for name, obj in self._iterate_slices():\n        if aggregate:\n            result_sz = ngroups\n        else:\n            result_sz = len(obj.values)\n    \n        if not cython_dtype:\n            cython_dtype = obj.values.dtype\n    \n        result = np.zeros(result_sz, dtype=cython_dtype)\n        func = partial(base_func, result, labels)\n        inferences = None\n    \n        if needs_values:\n            vals = obj.values\n            if pre_processing:\n                vals, inferences = pre_processing(vals)\n            func = partial(func, vals)\n    \n        if needs_mask:\n            mask = isna(obj.values).view(np.uint8)\n            func = partial(func, mask)\n    \n        if needs_ngroups:\n            func = partial(func, ngroups)\n    \n        func(**kwargs)  # Call func to modify indexer values in place\n    \n        if result_is_index:\n            result = algorithms.take_nd(obj.values, result)\n    \n        if post_processing:\n            result = post_processing(result, inferences)\n    \n        output[name] = result\n    \n    if aggregate:\n        return self._wrap_aggregated_output(output)\n    else:\n        return self._wrap_transformed_output(output)"
        }
    ]
}