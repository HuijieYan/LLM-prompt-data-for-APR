{
    "pandas": [
        {
            "bugID": 72,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 808,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def setitem(self, indexer, value):\n        \"\"\"\n        Set the value inplace, returning a maybe different typed block.\n\n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n\n        Returns\n        ------\n        Block\n\n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = (self.values.ndim == 2)\n        if value is None and self.is_numeric():\n            value = np.nan\n\n        if self._can_hold_element(value):\n            if lib.is_scalar(value):\n                value = convert_scalar(self.values, value)\n        else:\n            dtype = None\n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n            elif lib.is_scalar(value) and not pd.isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            if dtype is not None:\n                dtype = find_common_type([self.values.dtype, dtype])\n                if not is_dtype_equal(self.dtype, dtype):\n                    b = self.astype(dtype)\n                    return b.setitem(indexer, value)\n\n        arr_value = getattr(value, \"to_numpy\", np.array)(copy=False)\n        if not self._can_hold_element(value):\n            dtype, _ = maybe_promote(arr_value.dtype)\n            self.values = self.values.astype(dtype)\n\n        if transpose:\n            self.values = self.values.T\n\n        check_setitem_lengths(indexer, value, self.values)\n\n        try:\n            self.values[indexer] = arr_value\n        except ValueError:\n            self.values = self.values.astype(arr_value.dtype)\n            self.values[indexer] = arr_value\n\n        if transpose:\n            self.values = self.values.T\n        return self.make_block(self.values)",
            "import_list": []
        }
    ]
}