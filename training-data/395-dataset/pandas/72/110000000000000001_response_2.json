{
    "pandas": [
        {
            "bugID": 72,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 808,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def setitem(self, indexer, value):\n    \"\"\"\n    Set the value inplace, returning a maybe different typed block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    transpose = self.ndim == 2\n\n    if value is None:\n        if self.is_numeric:\n            value = np.nan\n\n    values = self.values\n    if self._can_hold_element(value):\n        if np.isscalar(value):\n            value = np.array([value] * len(values))\n\n    else:\n        if hasattr(value, \"dtype\"):\n            dtype = value.dtype\n        elif np.isscalar(value) and not np.isnan(value):\n            dtype = type(value)\n        else:\n            dtype = np.common_type(values.dtype, dtype)\n\n        if not np.issubdtype(self.dtype, dtype):\n            b = self.astype(dtype)\n            return b.setitem(indexer, value)\n\n    arr_value = np.asarray(value)\n\n    if not self._can_hold_element(value):\n        dtype = np.promote_types(arr_value.dtype, values.dtype)\n        values = values.astype(dtype)\n\n    if transpose:\n        values = values.T\n\n    if len(arr_value.shape) and arr_value.shape[0] == values.shape[0] and arr_value.size == values.size:\n        values[indexer] = arr_value\n        values = values.astype(arr_value.dtype)\n\n    else:\n        values[indexer] = arr_value\n\n    if transpose:\n        values = values.T\n    block = self.make_block(values)\n    return block",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}