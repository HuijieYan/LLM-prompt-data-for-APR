{
    "pandas": [
        {
            "bugID": 72,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 808,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def setitem(self, indexer, value):\n\n    \"\"\"\n    Set the value inplace, returning a maybe different typed block.\n    \n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n    \n    Returns\n    -------\n    Block\n    \n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    transpose = self.ndim > 1\n    \n    if value is None:\n        if self.is_numeric:\n            value = np.nan\n    \n    if self._can_hold_element(value):\n        if lib.is_scalar(value):\n            value = convert_scalar(values, value)\n    else:\n        find_dtype = False\n    \n        if hasattr(value, \"dtype\"):\n            dtype = value.dtype\n            find_dtype = True\n        elif lib.is_scalar(value) and not isna(value):\n            dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            find_dtype = True\n    \n        if find_dtype:\n            dtype = find_common_type([self.values.dtype, dtype])\n            if not is_dtype_equal(self.dtype, dtype):\n                b = self.astype(dtype)\n                return b.setitem(indexer, value)\n    \n    if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n        arr_value = value\n    else:\n        arr_value = np.array(value)\n    \n    if not self._can_hold_element(value):\n        dtype, _ = maybe_promote(arr_value.dtype)\n        self.values = self.values.astype(dtype)\n    \n    if transpose:\n        self.values = self.values.T\n    \n    check_setitem_lengths(indexer, value, self.values)\n    \n    if is_empty_indexer(indexer, arr_value):\n        pass\n    elif is_scalar_indexer(indexer, arr_value):\n        self.values[indexer] = value\n    elif (\n        len(arr_value.shape)\n        and arr_value.shape[0] == self.values.shape[0]\n        and arr_value.size == self.values.size\n    ):\n        self.values[indexer] = value\n        try:\n            self.values = self.values.astype(arr_value.dtype)\n        except ValueError:\n            pass\n    else:\n        self.values[indexer] = value\n    \n    if transpose:\n        self.values = self.values.T\n    block = self.make_block(self.values)\n    return block"
        }
    ]
}