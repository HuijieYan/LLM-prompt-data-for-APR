{
    "pandas": [
        {
            "bugID": 32,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 246,
            "file_name": "pandas/io/sas/sas_xport.py",
            "replace_code": "def __init__(\n    self, filepath_or_buffer, index=None, encoding=\"ISO-8859-1\", chunksize=None\n):\n    self._encoding = encoding\n    self._lines_read = 0\n    self._index = index\n    self._chunksize = chunksize\n\n    filepath, encoding, compression, should_close = get_filepath_or_buffer(filepath_or_buffer, encoding=encoding)\n\n    if isinstance(filepath, (str, bytes)):\n        self.filepath_or_buffer = open(filepath, \"rb\")\n    else:\n        # Copy to BytesIO, and ensure no encoding\n        contents = filepath.read()\n        if isinstance(contents, str):\n            contents = contents.encode(self._encoding)\n        self.filepath_or_buffer = BytesIO(contents)\n\n    self._read_header()",
            "import_list": []
        }
    ]
}