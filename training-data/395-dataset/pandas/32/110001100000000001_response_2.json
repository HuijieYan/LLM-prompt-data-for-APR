{
    "pandas": [
        {
            "bugID": 32,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 246,
            "file_name": "pandas/io/sas/sas_xport.py",
            "replace_code": "def __init__(self, filepath_or_buffer, index=None, encoding=\"ISO-8859-1\", chunksize=None):\n        self._encoding = encoding\n        self._lines_read = 0\n        self._index = index\n        self._chunksize = chunksize\n\n        if isinstance(filepath_or_buffer, str):\n            (\n                filepath_or_buffer,\n                encoding,\n                compression,\n                should_close,\n            ) = get_filepath_or_buffer(filepath_or_buffer, encoding=encoding)\n\n            self.filepath_or_buffer = filepath_or_buffer\n            self._read_header()\n\n        elif hasattr(filepath_or_buffer, 'read'):\n            # Copy to BytesIO, and ensure no encoding\n            contents = filepath_or_buffer.read()\n            try:\n                contents = contents.encode(self._encoding)\n            except UnicodeEncodeError:\n                pass\n            self.filepath_or_buffer = BytesIO(contents)\n            self._read_header()\n\n        else:\n            raise ValueError(\"Invalid input for filepath_or_buffer\")",
            "import_list": [
                "from io import BytesIO",
                "from pandas.io.common import get_filepath_or_buffer"
            ]
        }
    ]
}