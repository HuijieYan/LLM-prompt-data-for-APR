{
    "pandas": [
        {
            "bugID": 108,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 533,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    dtype = np.object_\n    \n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n        dtype = np.object_\n\n    elif isinstance(val, (pd.Timestamp, Timestamp)):\n        val = pd.Timestamp(val)\n        if val is pd.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = pd.DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (pd.Timedelta, Timedelta)):\n        val = pd.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif isinstance(val, bool):\n        dtype = np.bool_\n\n    elif isinstance(val, int):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n\n    elif isinstance(val, float):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n\n    elif isinstance(val, complex):\n        dtype = np.complex_\n\n    elif pandas_dtype and isinstance(val, pd.Period):\n        dtype = pd.PeriodDtype(freq=val.freq)\n        val = val.ordinal\n\n    return dtype, val",
            "imports": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas._libs.tslibs import Timestamp",
                "from pandas._libs.tslibs import Timedelta"
            ]
        }
    ]
}