{
    "pandas": [
        {
            "bugID": 108,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 533,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    dtype = np.object_\n    val = val.left if hasattr(val, 'left') else val\n    if is_bool(val):\n        dtype = np.bool_\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n    elif is_complex(val):\n        dtype = np.complex_\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n        elif isinstance(val, (np_datetime, datetime)):\n            val = Timestamp(val)\n            if val is NaT or val.tz is None:\n                dtype = np.dtype(\"M8[ns]\")\n            else:\n                if pandas_dtype:\n                    dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n                else:\n                    return np.object_, val\n            val = val.value\n        elif isinstance(val, (np.timedelta64, timedelta)):\n            val = Timedelta(val).value\n            dtype = np.dtype(\"m8[ns]\")               \n\n    return dtype, val",
            "imports": [
                "import numpy as np",
                "from pandas._libs.tslibs import Timestamp",
                "from pandas._libs.tslibs import Timedelta",
                "from pandas._libs.tslibs import np_datetime",
                "from pandas._libs.tslibs import dtypes as lib",
                "from pandas._libs.tslibs import NaT",
                "from numpy import datetime",
                "from numpy import timedelta",
                "from pandas.api.extensions import ExtensionDtype as DatetimeTZDtype",
                "from pandas._libs.tslibs.period import PeriodDtype",
                "from pandas.api.types import is_bool, is_integer, is_float, is_complex"
            ]
        }
    ]
}