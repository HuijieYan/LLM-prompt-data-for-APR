{
    "pandas": [
        {
            "bugID": 108,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 533,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    import numpy as np\n    from pandas._libs import lib\n    from pandas._libs.tslibs import (Timestamp, Timedelta, np_datetime, np_timedelta)\n    from pandas._libs.tslibs import ValueError as tslibs_ValueError\n    from pandas._typing import Dtype\n    from pandas.core.arrays import Period, IntegerArray, TimedeltaArray, DatetimeArray\n    from pandas.core.arrays._arrow_utils import _has_arrow_extension_array, _has_extension_array\n    from pandas.core.arrays.datetimes import DatetimeTZDtype\n    from pandas.core.arrays.interval import Interval\n    from pandas.core.arrays.period import PeriodDtype\n    from pandas.core.dtypes.common import (\n    is_bool, is_integer, is_float, is_complex, is_list_like, is_object_dtype,\n)\n    \"\"\"\n    Interpret the dtype from a scalar.\n    \n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    dtype = np.object_\n    \n    if _has_extension_array(val):\n        return val.dtype\n    \n    if is_bool(val):\n        dtype = np.bool_\n    \n    elif isinstance(val, (int, np.int_)):\n        dtype = np.int64\n    \n    elif isinstance(val, (float, np.float_)):\n        dtype = np.float64\n    \n    elif isinstance(val, (complex, np.complex_)):\n        dtype = np.complex_\n    \n    elif isinstance(val, np_datetime):\n        dtype = np.dtype(\"M8[ns]\")\n    \n    elif isinstance(val, np_timedelta):\n        dtype = np.dtype(\"m8[ns]\")\n    \n    elif isinstance(val, str):\n        dtype = np.object_\n    \n    elif isinstance(val, (Timestamp, np.datetime64)):\n        if pandas_dtype:\n            dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n        else:\n            dtype = np.dtype(\"M8[ns]\")\n    \n    elif isinstance(val, (Timedelta, np.timedelta64)):\n        dtype = np.dtype(\"m8[ns]\")\n    \n    elif isinstance(val, Period):\n        if pandas_dtype:\n            dtype = PeriodDtype(freq=val.freq)\n    \n    elif isinstance(val, Interval):\n        if pandas_dtype:\n            dtype = val.dtype\n    \n    return dtype"
        }
    ]
}