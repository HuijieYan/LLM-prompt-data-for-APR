{
    "pandas": [
        {
            "bugID": 108,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 533,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n\n    dtype = None\n\n    if isinstance(val, (int, np.integer)):\n        dtype = np.int64 if not pandas_dtype else np.object_\n    elif isinstance(val, (float, np.floating)):\n        dtype = np.float64 if not pandas_dtype else np.object_\n    elif isinstance(val, str):\n        dtype = np.object_\n    elif isinstance(val, bool):\n        dtype = np.bool_\n    elif pd.__isinstancecheck__(val, 'Timestamp'):\n        if pandas_dtype:\n            dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            val = val.value\n        else:\n            dtype = np.datetime64\n    elif pd.__isinstancecheck__(val, 'Timedelta'):\n        if pandas_dtype:\n            dtype = DatetimeTZDtype(unit=\"ns\")\n            val = tslibs.Timedelta(val).value\n        else:\n            dtype = np.dtype(\"m8[ns]\")\n            val = tslibs.Timedelta(val).value\n    elif pd.__isinstancecheck__(val, 'Interval'):\n        dtype = np.object_\n    return dtype, val",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}