{
    "pandas": [
        {
            "bugID": 108,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 533,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n\n    dtype = np.object_\n\n    if isinstance(val, (tslibs_Timestamp, Timestamp)):\n        val = tslibs_Timestamp(val)\n        if val is tslibs_NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = libts.DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (tslibs_Timedelta, Timedelta)):\n        val = tslibs_Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = libts.PeriodDtype(freq=val.freq)\n            val = val.ordinal\n\n    return dtype, val",
            "imports": [
                "import numpy as np",
                "from pandas._libs.tslibs import Timestamp, Timedelta",
                "from pandas._libs.tslibs import NaT as tslibs_NaT",
                "from pandas._libs.tslibs import NaTType as tslibs_NaTType",
                "from pandas._libs.tslibs import (period as lib, Timedelta as tslibs_Timedelta,\n                                 Timestamp as tslibs_Timestamp)",
                "from pandas._libs.tslibs import tslib as libts"
            ]
        }
    ]
}