{
    "pandas": [
        {
            "bugID": 108,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 533,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    dtype = object\n\n    if isinstance(val, np.ndarray) and val.ndim != 0:\n        raise ValueError(\"invalid ndarray passed to infer_dtype_from_scalar\")\n    elif isinstance(val, str):\n        dtype = object\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = Timestamp(val)\n        if val is pd.NaT or val.tz is None:\n            dtype = \"datetime64[ns]\"\n        else:\n            if pandas_dtype:\n                dtype = f\"datetime64[ns, {val.tz}]\"\n            else:\n                return np.object_, val\n        val = val.value\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = Timedelta(val).value\n        dtype = \"timedelta64[ns]\"\n    elif isinstance(val, bool):\n        dtype = np.bool_\n    elif isinstance(val, int):\n        dtype = np.int64\n    elif isinstance(val, float):\n        dtype = np.float64\n    elif isinstance(val, complex):\n        dtype = np.complex_\n    elif pandas_dtype and isinstance(val, pd.Period):\n        dtype = f\"period[{val.freq}]\"\n        val = val.ordinal\n\n    return dtype, val",
            "import_list": [
                "import numpy as np",
                "from datetime import datetime, timedelta",
                "from pandas import Timestamp, Timedelta, Interval"
            ]
        }
    ]
}