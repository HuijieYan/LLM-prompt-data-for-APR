{
    "pandas": [
        {
            "bugID": 108,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 533,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    dtype = None\n    result_value = val\n\n    if isinstance(val, np.ndarray):\n        raise ValueError(\"invalid ndarray passed to infer_dtype_from_scalar\")\n\n    elif isinstance(val, str):\n        dtype = np.object_\n\n    elif isinstance(val, (Timestamp, Timedelta)):\n        if isinstance(val, Timestamp):\n            if val.tz is None:\n                dtype = np.dtype(\"M8[ns]\")\n            else:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n        \n    elif com.is_bool(val):\n        dtype = np.bool_\n\n    elif com.is_integer(val):\n        dtype = np.int64 if isinstance(val, np.integer) else type(val)\n\n    elif com.is_float(val):\n        dtype = np.float64 if isinstance(val, np.floating) else type(val)\n\n    elif com.is_complex(val):\n        dtype = np.complex_\n\n    elif pandas_dtype and com.is_period(val):\n        dtype = PeriodDtype(freq=val.freq)\n\n    if dtype is None:\n        dtype = np.object_\n\n    return dtype, result_value",
            "imports": [
                "import numpy as np",
                "from pandas import Timestamp, Timedelta, Interval",
                "from pandas.api.extensions import PeriodDtype, DatetimeTZDtype",
                "from pandas.core import common as com"
            ]
        }
    ]
}