{
    "pandas": [
        {
            "bugID": 85,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1234,
            "file_name": "pandas/core/indexes/multi.py",
            "replace_code": "def _get_grouper_for_level(self, mapper, level):\n    indexer = self.codes[level]\n    level_index = self.levels[level]\n\n    if mapper is not None:\n        level_values = self.levels[level].take(indexer)\n        grouper = level_values.map(mapper)\n        return grouper, None, None\n\n    codes, uniques = pd.factorize(indexer, sort=True)\n\n    if len(uniques) > 0 and uniques[0] == -1:\n        mask = indexer != -1\n        ok_codes, uniques = pd.factorize(indexer[mask], sort=True)\n\n        codes = np.empty(len(indexer), dtype=indexer.dtype)\n        codes[mask] = ok_codes\n        codes[~mask] = -1\n\n    if len(uniques) < len(level_index):\n        level_index = level_index.take(uniques)\n\n    if len(level_index):\n        return level_index.take(codes), codes, level_index\n    else:\n        return level_index.take(codes, fill_value=True), codes, level_index",
            "imports": []
        }
    ]
}