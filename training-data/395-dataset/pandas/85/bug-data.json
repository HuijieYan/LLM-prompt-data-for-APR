{
    "pandas:85": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_85/pandas/core/indexes/multi.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_grouper_for_level",
                    "function_code": "@Appender(_index_shared_docs[\"_get_grouper_for_level\"])\ndef _get_grouper_for_level(self, mapper, level):\n    indexer = self.codes[level]\n    level_index = self.levels[level]\n\n    if mapper is not None:\n        # Handle group mapping function and return\n        level_values = self.levels[level].take(indexer)\n        grouper = level_values.map(mapper)\n        return grouper, None, None\n\n    codes, uniques = algos.factorize(indexer, sort=True)\n\n    if len(uniques) > 0 and uniques[0] == -1:\n        # Handle NAs\n        mask = indexer != -1\n        ok_codes, uniques = algos.factorize(indexer[mask], sort=True)\n\n        codes = np.empty(len(indexer), dtype=indexer.dtype)\n        codes[mask] = ok_codes\n        codes[~mask] = -1\n\n    if len(uniques) < len(level_index):\n        # Remove unobserved levels from level_index\n        level_index = level_index.take(uniques)\n\n    if len(level_index):\n        grouper = level_index.take(codes)\n    else:\n        grouper = level_index.take(codes, fill_value=True)\n\n    return grouper, codes, level_index\n",
                    "decorators": [
                        "Appender(_index_shared_docs['_get_grouper_for_level'])"
                    ],
                    "docstring": null,
                    "start_line": 1234,
                    "end_line": 1265,
                    "variables": {
                        "indexer": [
                            1249,
                            1250,
                            1252,
                            1236,
                            1241,
                            1245
                        ],
                        "self.codes": [
                            1236
                        ],
                        "self": [
                            1241,
                            1236,
                            1237
                        ],
                        "level": [
                            1241,
                            1236,
                            1237
                        ],
                        "level_index": [
                            1256,
                            1258,
                            1260,
                            1261,
                            1263,
                            1265,
                            1237
                        ],
                        "self.levels": [
                            1241,
                            1237
                        ],
                        "mapper": [
                            1242,
                            1239
                        ],
                        "level_values": [
                            1241,
                            1242
                        ],
                        "take": [
                            1241
                        ],
                        "grouper": [
                            1261,
                            1263,
                            1265,
                            1242,
                            1243
                        ],
                        "level_values.map": [
                            1242
                        ],
                        "codes": [
                            1252,
                            1253,
                            1254,
                            1261,
                            1263,
                            1265,
                            1245
                        ],
                        "uniques": [
                            1250,
                            1256,
                            1258,
                            1245,
                            1247
                        ],
                        "algos.factorize": [
                            1250,
                            1245
                        ],
                        "algos": [
                            1250,
                            1245
                        ],
                        "len": [
                            1256,
                            1252,
                            1260,
                            1247
                        ],
                        "mask": [
                            1249,
                            1250,
                            1253,
                            1254
                        ],
                        "ok_codes": [
                            1250,
                            1253
                        ],
                        "np.empty": [
                            1252
                        ],
                        "np": [
                            1252
                        ],
                        "indexer.dtype": [
                            1252
                        ],
                        "level_index.take": [
                            1258,
                            1261,
                            1263
                        ],
                        "Appender": [
                            1234
                        ],
                        "_index_shared_docs": [
                            1234
                        ]
                    },
                    "filtered_variables": {
                        "indexer": [
                            1249,
                            1250,
                            1252,
                            1236,
                            1241,
                            1245
                        ],
                        "self.codes": [
                            1236
                        ],
                        "self": [
                            1241,
                            1236,
                            1237
                        ],
                        "level": [
                            1241,
                            1236,
                            1237
                        ],
                        "level_index": [
                            1256,
                            1258,
                            1260,
                            1261,
                            1263,
                            1265,
                            1237
                        ],
                        "self.levels": [
                            1241,
                            1237
                        ],
                        "mapper": [
                            1242,
                            1239
                        ],
                        "level_values": [
                            1241,
                            1242
                        ],
                        "take": [
                            1241
                        ],
                        "grouper": [
                            1261,
                            1263,
                            1265,
                            1242,
                            1243
                        ],
                        "level_values.map": [
                            1242
                        ],
                        "codes": [
                            1252,
                            1253,
                            1254,
                            1261,
                            1263,
                            1265,
                            1245
                        ],
                        "uniques": [
                            1250,
                            1256,
                            1258,
                            1245,
                            1247
                        ],
                        "algos.factorize": [
                            1250,
                            1245
                        ],
                        "algos": [
                            1250,
                            1245
                        ],
                        "mask": [
                            1249,
                            1250,
                            1253,
                            1254
                        ],
                        "ok_codes": [
                            1250,
                            1253
                        ],
                        "np.empty": [
                            1252
                        ],
                        "np": [
                            1252
                        ],
                        "indexer.dtype": [
                            1252
                        ],
                        "level_index.take": [
                            1258,
                            1261,
                            1263
                        ],
                        "Appender": [
                            1234
                        ],
                        "_index_shared_docs": [
                            1234
                        ]
                    },
                    "diff_line_number": 1258,
                    "class_data": {
                        "signature": "class MultiIndex(Index)",
                        "docstring": "A multi-level, or hierarchical, index object for pandas objects.\n\nParameters\n----------\nlevels : sequence of arrays\n    The unique labels for each level.\ncodes : sequence of arrays\n    Integers for each level designating which label at each location.\n\n    .. versionadded:: 0.24.0\nsortorder : optional int\n    Level of sortedness (must be lexicographically sorted by that\n    level).\nnames : optional sequence of objects\n    Names for each of the index levels. (name is accepted for compat).\ncopy : bool, default False\n    Copy the meta-data.\nverify_integrity : bool, default True\n    Check that the levels/codes are consistent and valid.\n\nAttributes\n----------\nnames\nlevels\ncodes\nnlevels\nlevshape\n\nMethods\n-------\nfrom_arrays\nfrom_tuples\nfrom_product\nfrom_frame\nset_levels\nset_codes\nto_frame\nto_flat_index\nis_lexsorted\nsortlevel\ndroplevel\nswaplevel\nreorder_levels\nremove_unused_levels\nget_locs\n\nSee Also\n--------\nMultiIndex.from_arrays  : Convert list of arrays to MultiIndex.\nMultiIndex.from_product : Create a MultiIndex from the cartesian product\n                          of iterables.\nMultiIndex.from_tuples  : Convert list of tuples to a MultiIndex.\nMultiIndex.from_frame   : Make a MultiIndex from a DataFrame.\nIndex : The base pandas Index type.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html>`_\nfor more.\n\nExamples\n--------\nA new ``MultiIndex`` is typically constructed using one of the helper\nmethods :meth:`MultiIndex.from_arrays`, :meth:`MultiIndex.from_product`\nand :meth:`MultiIndex.from_tuples`. For example (using ``.from_arrays``):\n\n>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\nMultiIndex([(1,  'red'),\n            (1, 'blue'),\n            (2,  'red'),\n            (2, 'blue')],\n           names=['number', 'color'])\n\nSee further examples for how to construct a MultiIndex in the doc strings\nof the mentioned helper methods.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __new__(cls, levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity: bool=True, _set_identity: bool=True):\n    if name is not None:\n        names = name\n    if levels is None or codes is None:\n        raise TypeError('Must pass both levels and codes')\n    if len(levels) != len(codes):\n        raise ValueError('Length of levels and codes must be the same.')\n    if len(levels) == 0:\n        raise ValueError('Must pass non-zero number of levels/codes')\n    result = object.__new__(MultiIndex)\n    result._set_levels(levels, copy=copy, validate=False)\n    result._set_codes(codes, copy=copy, validate=False)\n    result._names = [None] * len(levels)\n    if names is not None:\n        result._set_names(names)\n    if sortorder is not None:\n        result.sortorder = int(sortorder)\n    else:\n        result.sortorder = sortorder\n    if verify_integrity:\n        new_codes = result._verify_integrity()\n        result._codes = new_codes\n    if _set_identity:\n        result._reset_identity()\n    return result",
                            "def _validate_codes(self, level: List, code: List):\n    \"\"\"\n    Reassign code values as -1 if their corresponding levels are NaN.\n\n    Parameters\n    ----------\n    code : list\n        Code to reassign.\n    level : list\n        Level to check for missing values (NaN, NaT, None).\n\n    Returns\n    -------\n    new code where code value = -1 if it corresponds\n    to a level with missing values (NaN, NaT, None).\n    \"\"\"\n    null_mask = isna(level)\n    if np.any(null_mask):\n        code = np.where(null_mask[code], -1, code)\n    return code",
                            "def _verify_integrity(self, codes: Optional[List]=None, levels: Optional[List]=None):\n    \"\"\"\n    Parameters\n    ----------\n    codes : optional list\n        Codes to check for validity. Defaults to current codes.\n    levels : optional list\n        Levels to check for validity. Defaults to current levels.\n\n    Raises\n    ------\n    ValueError\n        If length of levels and codes don't match, if the codes for any\n        level would exceed level bounds, or there are any duplicate levels.\n\n    Returns\n    -------\n    new codes where code value = -1 if it corresponds to a\n    NaN level.\n    \"\"\"\n    codes = codes or self.codes\n    levels = levels or self.levels\n    if len(levels) != len(codes):\n        raise ValueError('Length of levels and codes must match. NOTE: this index is in an inconsistent state.')\n    codes_length = len(codes[0])\n    for i, (level, level_codes) in enumerate(zip(levels, codes)):\n        if len(level_codes) != codes_length:\n            raise ValueError(f'Unequal code lengths: {[len(code_) for code_ in codes]}')\n        if len(level_codes) and level_codes.max() >= len(level):\n            raise ValueError(f'On level {i}, code max ({level_codes.max()}) >= length of level ({len(level)}). NOTE: this index is in an inconsistent state')\n        if len(level_codes) and level_codes.min() < -1:\n            raise ValueError(f'On level {i}, code value ({level_codes.min()}) < -1')\n        if not level.is_unique:\n            raise ValueError(f'Level values must be unique: {list(level)} on level {i}')\n    if self.sortorder is not None:\n        if self.sortorder > self._lexsort_depth():\n            raise ValueError(f'Value for sortorder must be inferior or equal to actual lexsort_depth: sortorder {self.sortorder} with lexsort_depth {self._lexsort_depth()}')\n    codes = [self._validate_codes(level, code) for level, code in zip(levels, codes)]\n    new_codes = FrozenList(codes)\n    return new_codes",
                            "@classmethod\ndef from_arrays(cls, arrays, sortorder=None, names=lib.no_default):\n    \"\"\"\n    Convert arrays to MultiIndex.\n\n    Parameters\n    ----------\n    arrays : list / sequence of array-likes\n        Each array-like gives one level's value for each data point.\n        len(arrays) is the number of levels.\n    sortorder : int or None\n        Level of sortedness (must be lexicographically sorted by that\n        level).\n    names : list / sequence of str, optional\n        Names for the levels in the index.\n\n    Returns\n    -------\n    MultiIndex\n\n    See Also\n    --------\n    MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n    MultiIndex.from_product : Make a MultiIndex from cartesian product\n                              of iterables.\n    MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n    Examples\n    --------\n    >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n    >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n    MultiIndex([(1,  'red'),\n                (1, 'blue'),\n                (2,  'red'),\n                (2, 'blue')],\n               names=['number', 'color'])\n    \"\"\"\n    error_msg = 'Input must be a list / sequence of array-likes.'\n    if not is_list_like(arrays):\n        raise TypeError(error_msg)\n    elif is_iterator(arrays):\n        arrays = list(arrays)\n    for array in arrays:\n        if not is_list_like(array):\n            raise TypeError(error_msg)\n    for i in range(1, len(arrays)):\n        if len(arrays[i]) != len(arrays[i - 1]):\n            raise ValueError('all arrays must be same length')\n    codes, levels = factorize_from_iterables(arrays)\n    if names is lib.no_default:\n        names = [getattr(arr, 'name', None) for arr in arrays]\n    return MultiIndex(levels=levels, codes=codes, sortorder=sortorder, names=names, verify_integrity=False)",
                            "@classmethod\ndef from_tuples(cls, tuples, sortorder=None, names=None):\n    \"\"\"\n    Convert list of tuples to MultiIndex.\n\n    Parameters\n    ----------\n    tuples : list / sequence of tuple-likes\n        Each tuple is the index of one row/column.\n    sortorder : int or None\n        Level of sortedness (must be lexicographically sorted by that\n        level).\n    names : list / sequence of str, optional\n        Names for the levels in the index.\n\n    Returns\n    -------\n    MultiIndex\n\n    See Also\n    --------\n    MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n    MultiIndex.from_product : Make a MultiIndex from cartesian product\n                              of iterables.\n    MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n    Examples\n    --------\n    >>> tuples = [(1, 'red'), (1, 'blue'),\n    ...           (2, 'red'), (2, 'blue')]\n    >>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\n    MultiIndex([(1,  'red'),\n                (1, 'blue'),\n                (2,  'red'),\n                (2, 'blue')],\n               names=['number', 'color'])\n    \"\"\"\n    if not is_list_like(tuples):\n        raise TypeError('Input must be a list / sequence of tuple-likes.')\n    elif is_iterator(tuples):\n        tuples = list(tuples)\n    if len(tuples) == 0:\n        if names is None:\n            raise TypeError('Cannot infer number of levels from empty list')\n        arrays = [[]] * len(names)\n    elif isinstance(tuples, (np.ndarray, Index)):\n        if isinstance(tuples, Index):\n            tuples = tuples._values\n        arrays = list(lib.tuples_to_object_array(tuples).T)\n    elif isinstance(tuples, list):\n        arrays = list(lib.to_object_array_tuples(tuples).T)\n    else:\n        arrays = zip(*tuples)\n    return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)",
                            "@classmethod\ndef from_product(cls, iterables, sortorder=None, names=lib.no_default):\n    \"\"\"\n    Make a MultiIndex from the cartesian product of multiple iterables.\n\n    Parameters\n    ----------\n    iterables : list / sequence of iterables\n        Each iterable has unique labels for each level of the index.\n    sortorder : int or None\n        Level of sortedness (must be lexicographically sorted by that\n        level).\n    names : list / sequence of str, optional\n        Names for the levels in the index.\n\n        .. versionchanged:: 1.0.0\n\n           If not explicitly provided, names will be inferred from the\n           elements of iterables if an element has a name attribute\n\n    Returns\n    -------\n    MultiIndex\n\n    See Also\n    --------\n    MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n    MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n    MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n    Examples\n    --------\n    >>> numbers = [0, 1, 2]\n    >>> colors = ['green', 'purple']\n    >>> pd.MultiIndex.from_product([numbers, colors],\n    ...                            names=['number', 'color'])\n    MultiIndex([(0,  'green'),\n                (0, 'purple'),\n                (1,  'green'),\n                (1, 'purple'),\n                (2,  'green'),\n                (2, 'purple')],\n               names=['number', 'color'])\n    \"\"\"\n    from pandas.core.reshape.util import cartesian_product\n    if not is_list_like(iterables):\n        raise TypeError('Input must be a list / sequence of iterables.')\n    elif is_iterator(iterables):\n        iterables = list(iterables)\n    codes, levels = factorize_from_iterables(iterables)\n    if names is lib.no_default:\n        names = [getattr(it, 'name', None) for it in iterables]\n    codes = cartesian_product(codes)\n    return MultiIndex(levels, codes, sortorder=sortorder, names=names)",
                            "@classmethod\ndef from_frame(cls, df, sortorder=None, names=None):\n    \"\"\"\n    Make a MultiIndex from a DataFrame.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    df : DataFrame\n        DataFrame to be converted to MultiIndex.\n    sortorder : int, optional\n        Level of sortedness (must be lexicographically sorted by that\n        level).\n    names : list-like, optional\n        If no names are provided, use the column names, or tuple of column\n        names if the columns is a MultiIndex. If a sequence, overwrite\n        names with the given sequence.\n\n    Returns\n    -------\n    MultiIndex\n        The MultiIndex representation of the given DataFrame.\n\n    See Also\n    --------\n    MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n    MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n    MultiIndex.from_product : Make a MultiIndex from cartesian product\n                              of iterables.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([['HI', 'Temp'], ['HI', 'Precip'],\n    ...                    ['NJ', 'Temp'], ['NJ', 'Precip']],\n    ...                   columns=['a', 'b'])\n    >>> df\n          a       b\n    0    HI    Temp\n    1    HI  Precip\n    2    NJ    Temp\n    3    NJ  Precip\n\n    >>> pd.MultiIndex.from_frame(df)\n    MultiIndex([('HI',   'Temp'),\n                ('HI', 'Precip'),\n                ('NJ',   'Temp'),\n                ('NJ', 'Precip')],\n               names=['a', 'b'])\n\n    Using explicit names, instead of the column names\n\n    >>> pd.MultiIndex.from_frame(df, names=['state', 'observation'])\n    MultiIndex([('HI',   'Temp'),\n                ('HI', 'Precip'),\n                ('NJ',   'Temp'),\n                ('NJ', 'Precip')],\n               names=['state', 'observation'])\n    \"\"\"\n    if not isinstance(df, ABCDataFrame):\n        raise TypeError('Input must be a DataFrame')\n    column_names, columns = zip(*df.items())\n    names = column_names if names is None else names\n    return cls.from_arrays(columns, sortorder=sortorder, names=names)",
                            "@property\ndef levels(self):\n    result = [x._shallow_copy(name=name) for x, name in zip(self._levels, self._names)]\n    for level in result:\n        level._no_setting_name = True\n    return FrozenList(result)",
                            "@property\ndef _values(self):\n    return self.values",
                            "@property\ndef shape(self):\n    \"\"\"\n    Return a tuple of the shape of the underlying data.\n    \"\"\"\n    return (len(self),)",
                            "@property\ndef array(self):\n    \"\"\"\n    Raises a ValueError for `MultiIndex` because there's no single\n    array backing a MultiIndex.\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    raise ValueError(\"MultiIndex has no single backing array. Use 'MultiIndex.to_numpy()' to get a NumPy array of tuples.\")",
                            "def _set_levels(self, levels, level=None, copy=False, validate=True, verify_integrity=False):\n    if validate:\n        if len(levels) == 0:\n            raise ValueError('Must set non-zero number of levels.')\n        if level is None and len(levels) != self.nlevels:\n            raise ValueError('Length of levels must match number of levels.')\n        if level is not None and len(levels) != len(level):\n            raise ValueError('Length of levels must match length of level.')\n    if level is None:\n        new_levels = FrozenList((ensure_index(lev, copy=copy)._shallow_copy() for lev in levels))\n    else:\n        level_numbers = [self._get_level_number(lev) for lev in level]\n        new_levels = list(self._levels)\n        for lev_num, lev in zip(level_numbers, levels):\n            new_levels[lev_num] = ensure_index(lev, copy=copy)._shallow_copy()\n        new_levels = FrozenList(new_levels)\n    if verify_integrity:\n        new_codes = self._verify_integrity(levels=new_levels)\n        self._codes = new_codes\n    names = self.names\n    self._levels = new_levels\n    if any(names):\n        self._set_names(names)\n    self._tuples = None\n    self._reset_cache()",
                            "def set_levels(self, levels, level=None, inplace=False, verify_integrity=True):\n    \"\"\"\n    Set new levels on MultiIndex. Defaults to returning new index.\n\n    Parameters\n    ----------\n    levels : sequence or list of sequence\n        New level(s) to apply.\n    level : int, level name, or sequence of int/level names (default None)\n        Level(s) to set (None for all levels).\n    inplace : bool\n        If True, mutates in place.\n    verify_integrity : bool, default True\n        If True, checks that levels and codes are compatible.\n\n    Returns\n    -------\n    new index (of same type and class...etc)\n\n    Examples\n    --------\n    >>> idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                        (2, 'one'), (2, 'two'),\n                                        (3, 'one'), (3, 'two')],\n                                        names=['foo', 'bar'])\n    >>> idx.set_levels([['a', 'b', 'c'], [1, 2]])\n    MultiIndex([('a', 1),\n                ('a', 2),\n                ('b', 1),\n                ('b', 2),\n                ('c', 1),\n                ('c', 2)],\n               names=['foo', 'bar'])\n    >>> idx.set_levels(['a', 'b', 'c'], level=0)\n    MultiIndex([('a', 'one'),\n                ('a', 'two'),\n                ('b', 'one'),\n                ('b', 'two'),\n                ('c', 'one'),\n                ('c', 'two')],\n               names=['foo', 'bar'])\n    >>> idx.set_levels(['a', 'b'], level='bar')\n    MultiIndex([(1, 'a'),\n                (1, 'b'),\n                (2, 'a'),\n                (2, 'b'),\n                (3, 'a'),\n                (3, 'b')],\n               names=['foo', 'bar'])\n\n    If any of the levels passed to ``set_levels()`` exceeds the\n    existing length, all of the values from that argument will\n    be stored in the MultiIndex levels, though the values will\n    be truncated in the MultiIndex output.\n\n    >>> idx.set_levels([['a', 'b', 'c'], [1, 2, 3, 4]], level=[0, 1])\n    MultiIndex([('a', 1),\n                ('a', 2),\n                ('b', 1),\n                ('b', 2)],\n               names=['foo', 'bar'])\n    >>> idx.set_levels([['a', 'b', 'c'], [1, 2, 3, 4]], level=[0, 1]).levels\n    FrozenList([['a', 'b', 'c'], [1, 2, 3, 4]])\n    \"\"\"\n    if is_list_like(levels) and (not isinstance(levels, Index)):\n        levels = list(levels)\n    if level is not None and (not is_list_like(level)):\n        if not is_list_like(levels):\n            raise TypeError('Levels must be list-like')\n        if is_list_like(levels[0]):\n            raise TypeError('Levels must be list-like')\n        level = [level]\n        levels = [levels]\n    elif level is None or is_list_like(level):\n        if not is_list_like(levels) or not is_list_like(levels[0]):\n            raise TypeError('Levels must be list of lists-like')\n    if inplace:\n        idx = self\n    else:\n        idx = self._shallow_copy()\n    idx._reset_identity()\n    idx._set_levels(levels, level=level, validate=True, verify_integrity=verify_integrity)\n    if not inplace:\n        return idx",
                            "@property\ndef codes(self):\n    return self._codes",
                            "def _set_codes(self, codes, level=None, copy=False, validate=True, verify_integrity=False):\n    if validate:\n        if level is None and len(codes) != self.nlevels:\n            raise ValueError('Length of codes must match number of levels')\n        if level is not None and len(codes) != len(level):\n            raise ValueError('Length of codes must match length of levels.')\n    if level is None:\n        new_codes = FrozenList((_coerce_indexer_frozen(level_codes, lev, copy=copy).view() for lev, level_codes in zip(self._levels, codes)))\n    else:\n        level_numbers = [self._get_level_number(lev) for lev in level]\n        new_codes = list(self._codes)\n        for lev_num, level_codes in zip(level_numbers, codes):\n            lev = self.levels[lev_num]\n            new_codes[lev_num] = _coerce_indexer_frozen(level_codes, lev, copy=copy)\n        new_codes = FrozenList(new_codes)\n    if verify_integrity:\n        new_codes = self._verify_integrity(codes=new_codes)\n    self._codes = new_codes\n    self._tuples = None\n    self._reset_cache()",
                            "def set_codes(self, codes, level=None, inplace=False, verify_integrity=True):\n    \"\"\"\n    Set new codes on MultiIndex. Defaults to returning\n    new index.\n\n    .. versionadded:: 0.24.0\n\n       New name for deprecated method `set_labels`.\n\n    Parameters\n    ----------\n    codes : sequence or list of sequence\n        New codes to apply.\n    level : int, level name, or sequence of int/level names (default None)\n        Level(s) to set (None for all levels).\n    inplace : bool\n        If True, mutates in place.\n    verify_integrity : bool (default True)\n        If True, checks that levels and codes are compatible.\n\n    Returns\n    -------\n    new index (of same type and class...etc)\n\n    Examples\n    --------\n    >>> idx = pd.MultiIndex.from_tuples([(1, 'one'),\n                                         (1, 'two'),\n                                         (2, 'one'),\n                                         (2, 'two')],\n                                        names=['foo', 'bar'])\n    >>> idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\n    MultiIndex([(2, 'one'),\n                (1, 'one'),\n                (2, 'two'),\n                (1, 'two')],\n               names=['foo', 'bar'])\n    >>> idx.set_codes([1, 0, 1, 0], level=0)\n    MultiIndex([(2, 'one'),\n                (1, 'two'),\n                (2, 'one'),\n                (1, 'two')],\n               names=['foo', 'bar'])\n    >>> idx.set_codes([0, 0, 1, 1], level='bar')\n    MultiIndex([(1, 'one'),\n                (1, 'one'),\n                (2, 'two'),\n                (2, 'two')],\n               names=['foo', 'bar'])\n    >>> idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]], level=[0, 1])\n    MultiIndex([(2, 'one'),\n                (1, 'one'),\n                (2, 'two'),\n                (1, 'two')],\n               names=['foo', 'bar'])\n    \"\"\"\n    if level is not None and (not is_list_like(level)):\n        if not is_list_like(codes):\n            raise TypeError('Codes must be list-like')\n        if is_list_like(codes[0]):\n            raise TypeError('Codes must be list-like')\n        level = [level]\n        codes = [codes]\n    elif level is None or is_list_like(level):\n        if not is_list_like(codes) or not is_list_like(codes[0]):\n            raise TypeError('Codes must be list of lists-like')\n    if inplace:\n        idx = self\n    else:\n        idx = self._shallow_copy()\n    idx._reset_identity()\n    idx._set_codes(codes, level=level, verify_integrity=verify_integrity)\n    if not inplace:\n        return idx",
                            "def copy(self, names=None, dtype=None, levels=None, codes=None, deep=False, _set_identity=False, **kwargs):\n    \"\"\"\n    Make a copy of this object. Names, dtype, levels and codes can be\n    passed and will be set on new copy.\n\n    Parameters\n    ----------\n    names : sequence, optional\n    dtype : numpy dtype or pandas type, optional\n    levels : sequence, optional\n    codes : sequence, optional\n\n    Returns\n    -------\n    copy : MultiIndex\n\n    Notes\n    -----\n    In most cases, there should be no functional difference from using\n    ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n    This could be potentially expensive on large MultiIndex objects.\n    \"\"\"\n    name = kwargs.get('name')\n    names = self._validate_names(name=name, names=names, deep=deep)\n    if 'labels' in kwargs:\n        raise TypeError(\"'labels' argument has been removed; use 'codes' instead\")\n    if deep:\n        from copy import deepcopy\n        if levels is None:\n            levels = deepcopy(self.levels)\n        if codes is None:\n            codes = deepcopy(self.codes)\n    else:\n        if levels is None:\n            levels = self.levels\n        if codes is None:\n            codes = self.codes\n    return MultiIndex(levels=levels, codes=codes, names=names, sortorder=self.sortorder, verify_integrity=False, _set_identity=_set_identity)",
                            "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\" the array interface, return my values \"\"\"\n    return self.values",
                            "def view(self, cls=None):\n    \"\"\" this is defined as a copy with the same identity \"\"\"\n    result = self.copy()\n    result._id = self._id\n    return result",
                            "def _shallow_copy_with_infer(self, values, **kwargs):\n    if len(values) == 0:\n        return MultiIndex(levels=[[] for _ in range(self.nlevels)], codes=[[] for _ in range(self.nlevels)], **kwargs)\n    return self._shallow_copy(values, **kwargs)",
                            "@Appender(_index_shared_docs['contains'] % _index_doc_kwargs)\ndef __contains__(self, key: Any) -> bool:\n    hash(key)\n    try:\n        self.get_loc(key)\n        return True\n    except (LookupError, TypeError, ValueError):\n        return False",
                            "@Appender(_index_shared_docs['_shallow_copy'])\ndef _shallow_copy(self, values=None, **kwargs):\n    if values is not None:\n        names = kwargs.pop('names', kwargs.pop('name', self.names))\n        kwargs.pop('freq', None)\n        return MultiIndex.from_tuples(values, names=names, **kwargs)\n    return self.copy(**kwargs)",
                            "@cache_readonly\ndef dtype(self) -> np.dtype:\n    return np.dtype('O')",
                            "def _is_memory_usage_qualified(self) -> bool:\n    \"\"\" return a boolean if we need a qualified .info display \"\"\"\n\n    def f(l):\n        return 'mixed' in l or 'string' in l or 'unicode' in l\n    return any((f(l) for l in self._inferred_type_levels))",
                            "@Appender(Index.memory_usage.__doc__)\ndef memory_usage(self, deep: bool=False) -> int:\n    return self._nbytes(deep)",
                            "@cache_readonly\ndef nbytes(self) -> int:\n    \"\"\" return the number of bytes in the underlying data \"\"\"\n    return self._nbytes(False)",
                            "def _nbytes(self, deep: bool=False) -> int:\n    \"\"\"\n    return the number of bytes in the underlying data\n    deeply introspect the level data if deep=True\n\n    include the engine hashtable\n\n    *this is in internal routine*\n\n    \"\"\"\n    objsize = 24\n    level_nbytes = sum((i.memory_usage(deep=deep) for i in self.levels))\n    label_nbytes = sum((i.nbytes for i in self.codes))\n    names_nbytes = sum((getsizeof(i, objsize) for i in self.names))\n    result = level_nbytes + label_nbytes + names_nbytes\n    result += self._engine.sizeof(deep=deep)\n    return result",
                            "def _formatter_func(self, tup):\n    \"\"\"\n    Formats each item in tup according to its level's formatter function.\n    \"\"\"\n    formatter_funcs = [level._formatter_func for level in self.levels]\n    return tuple((func(val) for func, val in zip(formatter_funcs, tup)))",
                            "def _format_data(self, name=None):\n    \"\"\"\n    Return the formatted data as a unicode string\n    \"\"\"\n    return format_object_summary(self, self._formatter_func, name=name, line_break_each_value=True)",
                            "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value).\n    \"\"\"\n    return format_object_attrs(self, include_dtype=False)",
                            "def _format_native_types(self, na_rep='nan', **kwargs):\n    new_levels = []\n    new_codes = []\n    for level, level_codes in zip(self.levels, self.codes):\n        level = level._format_native_types(na_rep=na_rep, **kwargs)\n        mask = level_codes == -1\n        if mask.any():\n            nan_index = len(level)\n            level = np.append(level, na_rep)\n            assert not level_codes.flags.writeable\n            level_codes = level_codes.copy()\n            level_codes[mask] = nan_index\n        new_levels.append(level)\n        new_codes.append(level_codes)\n    if len(new_levels) == 1:\n        return Index(new_levels[0].take(new_codes[0]))._format_native_types()\n    else:\n        mi = MultiIndex(levels=new_levels, codes=new_codes, names=self.names, sortorder=self.sortorder, verify_integrity=False)\n        return mi.values",
                            "def format(self, space=2, sparsify=None, adjoin=True, names=False, na_rep=None, formatter=None):\n    if len(self) == 0:\n        return []\n    stringified_levels = []\n    for lev, level_codes in zip(self.levels, self.codes):\n        na = na_rep if na_rep is not None else _get_na_rep(lev.dtype.type)\n        if len(lev) > 0:\n            formatted = lev.take(level_codes).format(formatter=formatter)\n            mask = level_codes == -1\n            if mask.any():\n                formatted = np.array(formatted, dtype=object)\n                formatted[mask] = na\n                formatted = formatted.tolist()\n        else:\n            formatted = [pprint_thing(na if isna(x) else x, escape_chars=('\\t', '\\r', '\\n')) for x in algos.take_1d(lev._values, level_codes)]\n        stringified_levels.append(formatted)\n    result_levels = []\n    for lev, name in zip(stringified_levels, self.names):\n        level = []\n        if names:\n            level.append(pprint_thing(name, escape_chars=('\\t', '\\r', '\\n')) if name is not None else '')\n        level.extend(np.array(lev, dtype=object))\n        result_levels.append(level)\n    if sparsify is None:\n        sparsify = get_option('display.multi_sparse')\n    if sparsify:\n        sentinel = ''\n        if sparsify not in [True, 1]:\n            sentinel = sparsify\n        result_levels = _sparsify(result_levels, start=int(names), sentinel=sentinel)\n    if adjoin:\n        from pandas.io.formats.format import _get_adjustment\n        adj = _get_adjustment()\n        return adj.adjoin(space, *result_levels).split('\\n')\n    else:\n        return result_levels",
                            "def __len__(self) -> int:\n    return len(self.codes[0])",
                            "def _get_names(self):\n    return FrozenList(self._names)",
                            "def _set_names(self, names, level=None, validate=True):\n    \"\"\"\n    Set new names on index. Each name has to be a hashable type.\n\n    Parameters\n    ----------\n    values : str or sequence\n        name(s) to set\n    level : int, level name, or sequence of int/level names (default None)\n        If the index is a MultiIndex (hierarchical), level(s) to set (None\n        for all levels).  Otherwise level must be None\n    validate : boolean, default True\n        validate that the names match level lengths\n\n    Raises\n    ------\n    TypeError if each name is not hashable.\n\n    Notes\n    -----\n    sets names on levels. WARNING: mutates!\n\n    Note that you generally want to set this *after* changing levels, so\n    that it only acts on copies\n    \"\"\"\n    if names is not None and (not is_list_like(names)):\n        raise ValueError('Names should be list-like for a MultiIndex')\n    names = list(names)\n    if validate:\n        if level is not None and len(names) != len(level):\n            raise ValueError('Length of names must match length of level.')\n        if level is None and len(names) != self.nlevels:\n            raise ValueError('Length of names must match number of levels in MultiIndex.')\n    if level is None:\n        level = range(self.nlevels)\n    else:\n        level = [self._get_level_number(lev) for lev in level]\n    for lev, name in zip(level, names):\n        if name is not None:\n            if not is_hashable(name):\n                raise TypeError(f'{type(self).__name__}.name must be a hashable type')\n        self._names[lev] = name",
                            "@Appender(_index_shared_docs['_get_grouper_for_level'])\ndef _get_grouper_for_level(self, mapper, level):\n    indexer = self.codes[level]\n    level_index = self.levels[level]\n    if mapper is not None:\n        level_values = self.levels[level].take(indexer)\n        grouper = level_values.map(mapper)\n        return (grouper, None, None)\n    codes, uniques = algos.factorize(indexer, sort=True)\n    if len(uniques) > 0 and uniques[0] == -1:\n        mask = indexer != -1\n        ok_codes, uniques = algos.factorize(indexer[mask], sort=True)\n        codes = np.empty(len(indexer), dtype=indexer.dtype)\n        codes[mask] = ok_codes\n        codes[~mask] = -1\n    if len(uniques) < len(level_index):\n        level_index = level_index.take(uniques)\n    if len(level_index):\n        grouper = level_index.take(codes)\n    else:\n        grouper = level_index.take(codes, fill_value=True)\n    return (grouper, codes, level_index)",
                            "@property\ndef _constructor(self):\n    return MultiIndex.from_tuples",
                            "@cache_readonly\ndef inferred_type(self) -> str:\n    return 'mixed'",
                            "def _get_level_number(self, level) -> int:\n    count = self.names.count(level)\n    if count > 1 and (not is_integer(level)):\n        raise ValueError(f'The name {level} occurs multiple times, use a level number')\n    try:\n        level = self.names.index(level)\n    except ValueError:\n        if not is_integer(level):\n            raise KeyError(f'Level {level} not found')\n        elif level < 0:\n            level += self.nlevels\n            if level < 0:\n                orig_level = level - self.nlevels\n                raise IndexError(f'Too many levels: Index has only {self.nlevels} levels, {orig_level} is not a valid level number')\n        elif level >= self.nlevels:\n            raise IndexError(f'Too many levels: Index has only {self.nlevels} levels, not {level + 1}')\n    return level",
                            "@cache_readonly\ndef _engine(self):\n    sizes = np.ceil(np.log2([len(l) + 1 for l in self.levels]))\n    lev_bits = np.cumsum(sizes[::-1])[::-1]\n    offsets = np.concatenate([lev_bits[1:], [0]]).astype('uint64')\n    if lev_bits[0] > 64:\n        return MultiIndexPyIntEngine(self.levels, self.codes, offsets)\n    return MultiIndexUIntEngine(self.levels, self.codes, offsets)",
                            "@property\ndef values(self):\n    if self._tuples is not None:\n        return self._tuples\n    values = []\n    for i in range(self.nlevels):\n        vals = self._get_level_values(i)\n        if is_categorical_dtype(vals):\n            vals = vals._internal_get_values()\n        if isinstance(vals.dtype, ExtensionDtype) or hasattr(vals, '_box_values'):\n            vals = vals.astype(object)\n        vals = np.array(vals, copy=False)\n        values.append(vals)\n    self._tuples = lib.fast_zip(values)\n    return self._tuples",
                            "@cache_readonly\ndef is_monotonic_increasing(self) -> bool:\n    \"\"\"\n    return if the index is monotonic increasing (only equal or\n    increasing) values.\n    \"\"\"\n    if all((x.is_monotonic for x in self.levels)):\n        return libalgos.is_lexsorted([x.astype('int64', copy=False) for x in self.codes])\n    values = [self._get_level_values(i).values for i in reversed(range(len(self.levels)))]\n    try:\n        sort_order = np.lexsort(values)\n        return Index(sort_order).is_monotonic\n    except TypeError:\n        return Index(self.values).is_monotonic",
                            "@cache_readonly\ndef is_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    return if the index is monotonic decreasing (only equal or\n    decreasing) values.\n    \"\"\"\n    return self[::-1].is_monotonic_increasing",
                            "@cache_readonly\ndef _have_mixed_levels(self):\n    \"\"\" return a boolean list indicated if we have mixed levels \"\"\"\n    return ['mixed' in l for l in self._inferred_type_levels]",
                            "@cache_readonly\ndef _inferred_type_levels(self):\n    \"\"\" return a list of the inferred types, one for each level \"\"\"\n    return [i.inferred_type for i in self.levels]",
                            "@cache_readonly\ndef _hashed_values(self):\n    \"\"\" return a uint64 ndarray of my hashed values \"\"\"\n    return hash_tuples(self)",
                            "def _hashed_indexing_key(self, key):\n    \"\"\"\n    validate and return the hash for the provided key\n\n    *this is internal for use for the cython routines*\n\n    Parameters\n    ----------\n    key : string or tuple\n\n    Returns\n    -------\n    np.uint64\n\n    Notes\n    -----\n    we need to stringify if we have mixed levels\n    \"\"\"\n    if not isinstance(key, tuple):\n        return hash_tuples(key)\n    if not len(key) == self.nlevels:\n        raise KeyError\n\n    def f(k, stringify):\n        if stringify and (not isinstance(k, str)):\n            k = str(k)\n        return k\n    key = tuple((f(k, stringify) for k, stringify in zip(key, self._have_mixed_levels)))\n    return hash_tuple(key)",
                            "@Appender(Index.duplicated.__doc__)\ndef duplicated(self, keep='first'):\n    shape = map(len, self.levels)\n    ids = get_group_index(self.codes, shape, sort=False, xnull=False)\n    return duplicated_int64(ids, keep)",
                            "def fillna(self, value=None, downcast=None):\n    \"\"\"\n    fillna is not implemented for MultiIndex\n    \"\"\"\n    raise NotImplementedError('isna is not defined for MultiIndex')",
                            "@Appender(_index_shared_docs['dropna'])\ndef dropna(self, how='any'):\n    nans = [level_codes == -1 for level_codes in self.codes]\n    if how == 'any':\n        indexer = np.any(nans, axis=0)\n    elif how == 'all':\n        indexer = np.all(nans, axis=0)\n    else:\n        raise ValueError(f'invalid how option: {how}')\n    new_codes = [level_codes[~indexer] for level_codes in self.codes]\n    return self.copy(codes=new_codes, deep=True)",
                            "def get_value(self, series, key):\n    s = com.values_from_object(series)\n    k = com.values_from_object(key)\n\n    def _try_mi(k):\n        loc = self.get_loc(k)\n        new_values = series._values[loc]\n        new_index = self[loc]\n        new_index = maybe_droplevels(new_index, k)\n        return series._constructor(new_values, index=new_index, name=series.name).__finalize__(self)\n    try:\n        return self._engine.get_value(s, k)\n    except KeyError as e1:\n        try:\n            return _try_mi(key)\n        except KeyError:\n            pass\n        try:\n            return libindex.get_value_at(s, k)\n        except IndexError:\n            raise\n        except TypeError:\n            if is_iterator(key):\n                raise InvalidIndexError(key)\n            else:\n                raise e1\n        except Exception:\n            raise e1\n    except TypeError:\n        if isinstance(key, (datetime.datetime, np.datetime64, str)):\n            try:\n                return _try_mi(key)\n            except KeyError:\n                raise\n            except (IndexError, ValueError, TypeError):\n                pass\n            try:\n                return _try_mi(Timestamp(key))\n            except (KeyError, TypeError, IndexError, ValueError, tslibs.OutOfBoundsDatetime):\n                pass\n        raise InvalidIndexError(key)",
                            "def _get_level_values(self, level, unique=False):\n    \"\"\"\n    Return vector of label values for requested level,\n    equal to the length of the index\n\n    **this is an internal method**\n\n    Parameters\n    ----------\n    level : int level\n    unique : bool, default False\n        if True, drop duplicated values\n\n    Returns\n    -------\n    values : ndarray\n    \"\"\"\n    lev = self.levels[level]\n    level_codes = self.codes[level]\n    name = self._names[level]\n    if unique:\n        level_codes = algos.unique(level_codes)\n    filled = algos.take_1d(lev._values, level_codes, fill_value=lev._na_value)\n    return lev._shallow_copy(filled, name=name)",
                            "def get_level_values(self, level):\n    \"\"\"\n    Return vector of label values for requested level,\n    equal to the length of the index.\n\n    Parameters\n    ----------\n    level : int or str\n        ``level`` is either the integer position of the level in the\n        MultiIndex, or the name of the level.\n\n    Returns\n    -------\n    values : Index\n        Values is a level of this MultiIndex converted to\n        a single :class:`Index` (or subclass thereof).\n\n    Examples\n    --------\n\n    Create a MultiIndex:\n\n    >>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\n    >>> mi.names = ['level_1', 'level_2']\n\n    Get level values by supplying level as either integer or name:\n\n    >>> mi.get_level_values(0)\n    Index(['a', 'b', 'c'], dtype='object', name='level_1')\n    >>> mi.get_level_values('level_2')\n    Index(['d', 'e', 'f'], dtype='object', name='level_2')\n    \"\"\"\n    level = self._get_level_number(level)\n    values = self._get_level_values(level)\n    return values",
                            "@Appender(_index_shared_docs['index_unique'] % _index_doc_kwargs)\ndef unique(self, level=None):\n    if level is None:\n        return super().unique()\n    else:\n        level = self._get_level_number(level)\n        return self._get_level_values(level=level, unique=True)",
                            "def _to_safe_for_reshape(self):\n    \"\"\" convert to object if we are a categorical \"\"\"\n    return self.set_levels([i._to_safe_for_reshape() for i in self.levels])",
                            "def to_frame(self, index=True, name=None):\n    \"\"\"\n    Create a DataFrame with the levels of the MultiIndex as columns.\n\n    Column ordering is determined by the DataFrame constructor with data as\n    a dict.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    index : bool, default True\n        Set the index of the returned DataFrame as the original MultiIndex.\n\n    name : list / sequence of strings, optional\n        The passed names should substitute index level names.\n\n    Returns\n    -------\n    DataFrame : a DataFrame containing the original MultiIndex data.\n\n    See Also\n    --------\n    DataFrame\n    \"\"\"\n    from pandas import DataFrame\n    if name is not None:\n        if not is_list_like(name):\n            raise TypeError(\"'name' must be a list / sequence of column names.\")\n        if len(name) != len(self.levels):\n            raise ValueError(\"'name' should have same length as number of levels on index.\")\n        idx_names = name\n    else:\n        idx_names = self.names\n    result = DataFrame({level if lvlname is None else lvlname: self._get_level_values(level) for lvlname, level in zip(idx_names, range(len(self.levels)))}, copy=False)\n    if index:\n        result.index = self\n    return result",
                            "def to_flat_index(self):\n    \"\"\"\n    Convert a MultiIndex to an Index of Tuples containing the level values.\n\n    .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    pd.Index\n        Index with the MultiIndex data represented in Tuples.\n\n    Notes\n    -----\n    This method will simply return the caller if called by anything other\n    than a MultiIndex.\n\n    Examples\n    --------\n    >>> index = pd.MultiIndex.from_product(\n    ...     [['foo', 'bar'], ['baz', 'qux']],\n    ...     names=['a', 'b'])\n    >>> index.to_flat_index()\n    Index([('foo', 'baz'), ('foo', 'qux'),\n           ('bar', 'baz'), ('bar', 'qux')],\n          dtype='object')\n    \"\"\"\n    return Index(self.values, tupleize_cols=False)",
                            "@property\ndef is_all_dates(self) -> bool:\n    return False",
                            "def is_lexsorted(self) -> bool:\n    \"\"\"\n    Return True if the codes are lexicographically sorted.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self.lexsort_depth == self.nlevels",
                            "@cache_readonly\ndef lexsort_depth(self):\n    if self.sortorder is not None:\n        return self.sortorder\n    return self._lexsort_depth()",
                            "def _lexsort_depth(self) -> int:\n    \"\"\"\n    Compute and return the lexsort_depth, the number of levels of the\n    MultiIndex that are sorted lexically\n\n    Returns\n    ------\n    int\n    \"\"\"\n    int64_codes = [ensure_int64(level_codes) for level_codes in self.codes]\n    for k in range(self.nlevels, 0, -1):\n        if libalgos.is_lexsorted(int64_codes[:k]):\n            return k\n    return 0",
                            "def _sort_levels_monotonic(self):\n    \"\"\"\n    This is an *internal* function.\n\n    Create a new MultiIndex from the current to monotonically sorted\n    items IN the levels. This does not actually make the entire MultiIndex\n    monotonic, JUST the levels.\n\n    The resulting MultiIndex will have the same outward\n    appearance, meaning the same .values and ordering. It will also\n    be .equals() to the original.\n\n    Returns\n    -------\n    MultiIndex\n\n    Examples\n    --------\n\n    >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n    ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n    >>> mi\n    MultiIndex([('a', 'bb'),\n                ('a', 'aa'),\n                ('b', 'bb'),\n                ('b', 'aa')],\n               )\n\n    >>> mi.sort_values()\n    MultiIndex([('a', 'aa'),\n                ('a', 'bb'),\n                ('b', 'aa'),\n                ('b', 'bb')],\n               )\n    \"\"\"\n    if self.is_lexsorted() and self.is_monotonic:\n        return self\n    new_levels = []\n    new_codes = []\n    for lev, level_codes in zip(self.levels, self.codes):\n        if not lev.is_monotonic:\n            try:\n                indexer = lev.argsort()\n            except TypeError:\n                pass\n            else:\n                lev = lev.take(indexer)\n                indexer = ensure_int64(indexer)\n                ri = lib.get_reverse_indexer(indexer, len(indexer))\n                level_codes = algos.take_1d(ri, level_codes)\n        new_levels.append(lev)\n        new_codes.append(level_codes)\n    return MultiIndex(new_levels, new_codes, names=self.names, sortorder=self.sortorder, verify_integrity=False)",
                            "def remove_unused_levels(self):\n    \"\"\"\n    Create a new MultiIndex from the current that removes\n    unused levels, meaning that they are not expressed in the labels.\n\n    The resulting MultiIndex will have the same outward\n    appearance, meaning the same .values and ordering. It will also\n    be .equals() to the original.\n\n    Returns\n    -------\n    MultiIndex\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_product([range(2), list('ab')])\n    >>> mi\n    MultiIndex([(0, 'a'),\n                (0, 'b'),\n                (1, 'a'),\n                (1, 'b')],\n               )\n\n    >>> mi[2:]\n    MultiIndex([(1, 'a'),\n                (1, 'b')],\n               )\n\n    The 0 from the first level is not represented\n    and can be removed\n\n    >>> mi2 = mi[2:].remove_unused_levels()\n    >>> mi2.levels\n    FrozenList([[1], ['a', 'b']])\n    \"\"\"\n    new_levels = []\n    new_codes = []\n    changed = False\n    for lev, level_codes in zip(self.levels, self.codes):\n        uniques = np.where(np.bincount(level_codes + 1) > 0)[0] - 1\n        has_na = int(len(uniques) and uniques[0] == -1)\n        if len(uniques) != len(lev) + has_na:\n            changed = True\n            uniques = algos.unique(level_codes)\n            if has_na:\n                na_idx = np.where(uniques == -1)[0]\n                uniques[[0, na_idx[0]]] = uniques[[na_idx[0], 0]]\n            code_mapping = np.zeros(len(lev) + has_na)\n            code_mapping[uniques] = np.arange(len(uniques)) - has_na\n            level_codes = code_mapping[level_codes]\n            lev = lev.take(uniques[has_na:])\n        new_levels.append(lev)\n        new_codes.append(level_codes)\n    result = self.view()\n    if changed:\n        result._reset_identity()\n        result._set_levels(new_levels, validate=False)\n        result._set_codes(new_codes, validate=False)\n    return result",
                            "@property\ndef nlevels(self) -> int:\n    \"\"\"\n    Integer number of levels in this MultiIndex.\n    \"\"\"\n    return len(self._levels)",
                            "@property\ndef levshape(self):\n    \"\"\"\n    A tuple with the length of each level.\n    \"\"\"\n    return tuple((len(x) for x in self.levels))",
                            "def __reduce__(self):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    d = dict(levels=list(self.levels), codes=list(self.codes), sortorder=self.sortorder, names=list(self.names))\n    return (ibase._new_Index, (type(self), d), None)",
                            "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    if isinstance(state, dict):\n        levels = state.get('levels')\n        codes = state.get('codes')\n        sortorder = state.get('sortorder')\n        names = state.get('names')\n    elif isinstance(state, tuple):\n        nd_state, own_state = state\n        levels, codes, sortorder, names = own_state\n    self._set_levels([Index(x) for x in levels], validate=False)\n    self._set_codes(codes)\n    new_codes = self._verify_integrity()\n    self._set_codes(new_codes)\n    self._set_names(names)\n    self.sortorder = sortorder\n    self._reset_identity()",
                            "def __getitem__(self, key):\n    if is_scalar(key):\n        key = com.cast_scalar_indexer(key)\n        retval = []\n        for lev, level_codes in zip(self.levels, self.codes):\n            if level_codes[key] == -1:\n                retval.append(np.nan)\n            else:\n                retval.append(lev[level_codes[key]])\n        return tuple(retval)\n    else:\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n            sortorder = self.sortorder\n        else:\n            sortorder = None\n            if isinstance(key, Index):\n                key = np.asarray(key)\n        new_codes = [level_codes[key] for level_codes in self.codes]\n        return MultiIndex(levels=self.levels, codes=new_codes, names=self.names, sortorder=sortorder, verify_integrity=False)",
                            "@Appender(_index_shared_docs['take'] % _index_doc_kwargs)\ndef take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n    nv.validate_take(tuple(), kwargs)\n    indices = ensure_platform_int(indices)\n    taken = self._assert_take_fillable(self.codes, indices, allow_fill=allow_fill, fill_value=fill_value, na_value=-1)\n    return MultiIndex(levels=self.levels, codes=taken, names=self.names, verify_integrity=False)",
                            "def _assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=None):\n    \"\"\" Internal method to handle NA filling of take \"\"\"\n    if allow_fill and fill_value is not None:\n        if (indices < -1).any():\n            msg = 'When allow_fill=True and fill_value is not None, all indices must be >= -1'\n            raise ValueError(msg)\n        taken = [lab.take(indices) for lab in self.codes]\n        mask = indices == -1\n        if mask.any():\n            masked = []\n            for new_label in taken:\n                label_values = new_label\n                label_values[mask] = na_value\n                masked.append(np.asarray(label_values))\n            taken = masked\n    else:\n        taken = [lab.take(indices) for lab in self.codes]\n    return taken",
                            "def append(self, other):\n    \"\"\"\n    Append a collection of Index options together\n\n    Parameters\n    ----------\n    other : Index or list/tuple of indices\n\n    Returns\n    -------\n    appended : Index\n    \"\"\"\n    if not isinstance(other, (list, tuple)):\n        other = [other]\n    if all((isinstance(o, MultiIndex) and o.nlevels >= self.nlevels for o in other)):\n        arrays = []\n        for i in range(self.nlevels):\n            label = self._get_level_values(i)\n            appended = [o._get_level_values(i) for o in other]\n            arrays.append(label.append(appended))\n        return MultiIndex.from_arrays(arrays, names=self.names)\n    to_concat = (self.values,) + tuple((k._values for k in other))\n    new_tuples = np.concatenate(to_concat)\n    try:\n        return MultiIndex.from_tuples(new_tuples, names=self.names)\n    except (TypeError, IndexError):\n        return Index(new_tuples)",
                            "def argsort(self, *args, **kwargs) -> np.ndarray:\n    return self.values.argsort(*args, **kwargs)",
                            "@Appender(_index_shared_docs['repeat'] % _index_doc_kwargs)\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    repeats = ensure_platform_int(repeats)\n    return MultiIndex(levels=self.levels, codes=[level_codes.view(np.ndarray).astype(np.intp).repeat(repeats) for level_codes in self.codes], names=self.names, sortorder=self.sortorder, verify_integrity=False)",
                            "def where(self, cond, other=None):\n    raise NotImplementedError('.where is not supported for MultiIndex operations')",
                            "def drop(self, codes, level=None, errors='raise'):\n    \"\"\"\n    Make new MultiIndex with passed list of codes deleted\n\n    Parameters\n    ----------\n    codes : array-like\n        Must be a list of tuples\n    level : int or level name, default None\n    errors : str, default 'raise'\n\n    Returns\n    -------\n    dropped : MultiIndex\n    \"\"\"\n    if level is not None:\n        return self._drop_from_level(codes, level, errors)\n    if not isinstance(codes, (np.ndarray, Index)):\n        try:\n            codes = com.index_labels_to_array(codes)\n        except ValueError:\n            pass\n    inds = []\n    for level_codes in codes:\n        try:\n            loc = self.get_loc(level_codes)\n            if isinstance(loc, int):\n                inds.append(loc)\n            elif isinstance(loc, slice):\n                inds.extend(range(loc.start, loc.stop))\n            elif com.is_bool_indexer(loc):\n                if self.lexsort_depth == 0:\n                    warnings.warn('dropping on a non-lexsorted multi-index without a level parameter may impact performance.', PerformanceWarning, stacklevel=3)\n                loc = loc.nonzero()[0]\n                inds.extend(loc)\n            else:\n                msg = f'unsupported indexer of type {type(loc)}'\n                raise AssertionError(msg)\n        except KeyError:\n            if errors != 'ignore':\n                raise\n    return self.delete(inds)",
                            "def _drop_from_level(self, codes, level, errors='raise'):\n    codes = com.index_labels_to_array(codes)\n    i = self._get_level_number(level)\n    index = self.levels[i]\n    values = index.get_indexer(codes)\n    mask = ~algos.isin(self.codes[i], values)\n    if mask.all() and errors != 'ignore':\n        raise KeyError(f'labels {codes} not found in level')\n    return self[mask]",
                            "def swaplevel(self, i=-2, j=-1):\n    \"\"\"\n    Swap level i with level j.\n\n    Calling this method does not change the ordering of the values.\n\n    Parameters\n    ----------\n    i : int, str, default -2\n        First level of index to be swapped. Can pass level name as string.\n        Type of parameters can be mixed.\n    j : int, str, default -1\n        Second level of index to be swapped. Can pass level name as string.\n        Type of parameters can be mixed.\n\n    Returns\n    -------\n    MultiIndex\n        A new MultiIndex.\n\n    See Also\n    --------\n    Series.swaplevel : Swap levels i and j in a MultiIndex.\n    Dataframe.swaplevel : Swap levels i and j in a MultiIndex on a\n        particular axis.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n    ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n    >>> mi\n    MultiIndex([('a', 'bb'),\n                ('a', 'aa'),\n                ('b', 'bb'),\n                ('b', 'aa')],\n               )\n    >>> mi.swaplevel(0, 1)\n    MultiIndex([('bb', 'a'),\n                ('aa', 'a'),\n                ('bb', 'b'),\n                ('aa', 'b')],\n               )\n    \"\"\"\n    new_levels = list(self.levels)\n    new_codes = list(self.codes)\n    new_names = list(self.names)\n    i = self._get_level_number(i)\n    j = self._get_level_number(j)\n    new_levels[i], new_levels[j] = (new_levels[j], new_levels[i])\n    new_codes[i], new_codes[j] = (new_codes[j], new_codes[i])\n    new_names[i], new_names[j] = (new_names[j], new_names[i])\n    return MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)",
                            "def reorder_levels(self, order):\n    \"\"\"\n    Rearrange levels using input order. May not drop or duplicate levels.\n\n    Parameters\n    ----------\n\n    Returns\n    -------\n    MultiIndex\n    \"\"\"\n    order = [self._get_level_number(i) for i in order]\n    if len(order) != self.nlevels:\n        raise AssertionError(f'Length of order must be same as number of levels ({self.nlevels}), got {len(order)}')\n    new_levels = [self.levels[i] for i in order]\n    new_codes = [self.codes[i] for i in order]\n    new_names = [self.names[i] for i in order]\n    return MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)",
                            "def _get_codes_for_sorting(self):\n    \"\"\"\n    we categorizing our codes by using the\n    available categories (all, not just observed)\n    excluding any missing ones (-1); this is in preparation\n    for sorting, where we need to disambiguate that -1 is not\n    a valid valid\n    \"\"\"\n\n    def cats(level_codes):\n        return np.arange(np.array(level_codes).max() + 1 if len(level_codes) else 0, dtype=level_codes.dtype)\n    return [Categorical.from_codes(level_codes, cats(level_codes), ordered=True) for level_codes in self.codes]",
                            "def sortlevel(self, level=0, ascending=True, sort_remaining=True):\n    \"\"\"\n    Sort MultiIndex at the requested level. The result will respect the\n    original ordering of the associated factor at that level.\n\n    Parameters\n    ----------\n    level : list-like, int or str, default 0\n        If a string is given, must be a name of the level.\n        If list-like must be names or ints of levels.\n    ascending : bool, default True\n        False to sort in descending order.\n        Can also be a list to specify a directed ordering.\n    sort_remaining : sort by the remaining levels after level\n\n    Returns\n    -------\n    sorted_index : pd.MultiIndex\n        Resulting index.\n    indexer : np.ndarray\n        Indices of output values in original index.\n    \"\"\"\n    if isinstance(level, (str, int)):\n        level = [level]\n    level = [self._get_level_number(lev) for lev in level]\n    sortorder = None\n    if isinstance(ascending, list):\n        if not len(level) == len(ascending):\n            raise ValueError('level must have same length as ascending')\n        indexer = lexsort_indexer([self.codes[lev] for lev in level], orders=ascending)\n    else:\n        codes = list(self.codes)\n        shape = list(self.levshape)\n        primary = tuple((codes[lev] for lev in level))\n        primshp = tuple((shape[lev] for lev in level))\n        for lev in sorted(level, reverse=True):\n            codes.pop(lev)\n            shape.pop(lev)\n        if sort_remaining:\n            primary += primary + tuple(codes)\n            primshp += primshp + tuple(shape)\n        else:\n            sortorder = level[0]\n        indexer = indexer_from_factorized(primary, primshp, compress=False)\n        if not ascending:\n            indexer = indexer[::-1]\n    indexer = ensure_platform_int(indexer)\n    new_codes = [level_codes.take(indexer) for level_codes in self.codes]\n    new_index = MultiIndex(codes=new_codes, levels=self.levels, names=self.names, sortorder=sortorder, verify_integrity=False)\n    return (new_index, indexer)",
                            "def _convert_listlike_indexer(self, keyarr, kind=None):\n    \"\"\"\n    Parameters\n    ----------\n    keyarr : list-like\n        Indexer to convert.\n\n    Returns\n    -------\n    tuple (indexer, keyarr)\n        indexer is an ndarray or None if cannot convert\n        keyarr are tuple-safe keys\n    \"\"\"\n    indexer, keyarr = super()._convert_listlike_indexer(keyarr, kind=kind)\n    if indexer is None and len(keyarr) and (not isinstance(keyarr[0], tuple)):\n        level = 0\n        _, indexer = self.reindex(keyarr, level=level)\n        if indexer is None:\n            indexer = np.arange(len(self))\n        check = self.levels[0].get_indexer(keyarr)\n        mask = check == -1\n        if mask.any():\n            raise KeyError(f'{keyarr[mask]} not in index')\n    return (indexer, keyarr)",
                            "@Appender(_index_shared_docs['get_indexer'] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    method = missing.clean_reindex_fill_method(method)\n    target = ensure_index(target)\n    if is_list_like(target) and (not len(target)):\n        return ensure_platform_int(np.array([]))\n    if not isinstance(target, MultiIndex):\n        try:\n            target = MultiIndex.from_tuples(target)\n        except (TypeError, ValueError):\n            if method is None:\n                return Index(self.values).get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n    if not self.is_unique:\n        raise ValueError('Reindexing only valid with uniquely valued Index objects')\n    if method == 'pad' or method == 'backfill':\n        if tolerance is not None:\n            raise NotImplementedError('tolerance not implemented yet for MultiIndex')\n        indexer = self._engine.get_indexer(target, method, limit)\n    elif method == 'nearest':\n        raise NotImplementedError(\"method='nearest' not implemented yet for MultiIndex; see GitHub issue 9365\")\n    else:\n        indexer = self._engine.get_indexer(target)\n    return ensure_platform_int(indexer)",
                            "@Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    return super().get_indexer_non_unique(target)",
                            "def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n    \"\"\"\n    Create index with target's values (move/add/delete values as necessary)\n\n    Returns\n    -------\n    new_index : pd.MultiIndex\n        Resulting index\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n\n    \"\"\"\n    preserve_names = not hasattr(target, 'names')\n    if level is not None:\n        if method is not None:\n            raise TypeError('Fill method not supported if level passed')\n        target = ibase._ensure_has_len(target)\n        if len(target) == 0 and (not isinstance(target, Index)):\n            idx = self.levels[level]\n            attrs = idx._get_attributes_dict()\n            attrs.pop('freq', None)\n            target = type(idx)._simple_new(np.empty(0, dtype=idx.dtype), **attrs)\n        else:\n            target = ensure_index(target)\n        target, indexer, _ = self._join_level(target, level, how='right', return_indexers=True, keep_order=False)\n    else:\n        target = ensure_index(target)\n        if self.equals(target):\n            indexer = None\n        elif self.is_unique:\n            indexer = self.get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n        else:\n            raise ValueError('cannot handle a non-unique multi-index!')\n    if not isinstance(target, MultiIndex):\n        if indexer is None:\n            target = self\n        elif (indexer >= 0).all():\n            target = self.take(indexer)\n        else:\n            target = MultiIndex.from_tuples(target)\n    if preserve_names and target.nlevels == self.nlevels and (target.names != self.names):\n        target = target.copy(deep=False)\n        target.names = self.names\n    return (target, indexer)",
                            "def get_slice_bound(self, label: Union[Hashable, Sequence[Hashable]], side: str, kind: str) -> int:\n    \"\"\"\n    For an ordered MultiIndex, compute slice bound\n    that corresponds to given label.\n\n    Returns leftmost (one-past-the-rightmost if `side=='right') position\n    of given label.\n\n    Parameters\n    ----------\n    label : object or tuple of objects\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'}\n\n    Returns\n    -------\n    int\n        Index of label.\n\n    Notes\n    -----\n    This method only works if level 0 index of the MultiIndex is lexsorted.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abbc'), list('gefd')])\n\n    Get the locations from the leftmost 'b' in the first level\n    until the end of the multiindex:\n\n    >>> mi.get_slice_bound('b', side=\"left\", kind=\"loc\")\n    1\n\n    Like above, but if you get the locations from the rightmost\n    'b' in the first level and 'f' in the second level:\n\n    >>> mi.get_slice_bound(('b','f'), side=\"right\", kind=\"loc\")\n    3\n\n    See Also\n    --------\n    MultiIndex.get_loc : Get location for a label or a tuple of labels.\n    MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                          sequence of such.\n    \"\"\"\n    if not isinstance(label, tuple):\n        label = (label,)\n    return self._partial_tup_index(label, side=side)",
                            "def slice_locs(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    For an ordered MultiIndex, compute the slice locations for input\n    labels.\n\n    The input labels can be tuples representing partial levels, e.g. for a\n    MultiIndex with 3 levels, you can pass a single value (corresponding to\n    the first level), or a 1-, 2-, or 3-tuple.\n\n    Parameters\n    ----------\n    start : label or tuple, default None\n        If None, defaults to the beginning\n    end : label or tuple\n        If None, defaults to the end\n    step : int or None\n        Slice step\n    kind : string, optional, defaults None\n\n    Returns\n    -------\n    (start, end) : (int, int)\n\n    Notes\n    -----\n    This method only works if the MultiIndex is properly lexsorted. So,\n    if only the first 2 levels of a 3-level MultiIndex are lexsorted,\n    you can only pass two levels to ``.slice_locs``.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abbd'), list('deff')],\n    ...                                names=['A', 'B'])\n\n    Get the slice locations from the beginning of 'b' in the first level\n    until the end of the multiindex:\n\n    >>> mi.slice_locs(start='b')\n    (1, 4)\n\n    Like above, but stop at the end of 'b' in the first level and 'f' in\n    the second level:\n\n    >>> mi.slice_locs(start='b', end=('b', 'f'))\n    (1, 3)\n\n    See Also\n    --------\n    MultiIndex.get_loc : Get location for a label or a tuple of labels.\n    MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                          sequence of such.\n    \"\"\"\n    return super().slice_locs(start, end, step, kind=kind)",
                            "def _partial_tup_index(self, tup, side='left'):\n    if len(tup) > self.lexsort_depth:\n        raise UnsortedIndexError(f'Key length ({len(tup)}) was greater than MultiIndex lexsort depth ({self.lexsort_depth})')\n    n = len(tup)\n    start, end = (0, len(self))\n    zipped = zip(tup, self.levels, self.codes)\n    for k, (lab, lev, labs) in enumerate(zipped):\n        section = labs[start:end]\n        if lab not in lev and (not isna(lab)):\n            if not lev.is_type_compatible(lib.infer_dtype([lab], skipna=False)):\n                raise TypeError(f'Level type mismatch: {lab}')\n            loc = lev.searchsorted(lab, side=side)\n            if side == 'right' and loc >= 0:\n                loc -= 1\n            return start + section.searchsorted(loc, side=side)\n        idx = self._get_loc_single_level_index(lev, lab)\n        if k < n - 1:\n            end = start + section.searchsorted(idx, side='right')\n            start = start + section.searchsorted(idx, side='left')\n        else:\n            return start + section.searchsorted(idx, side=side)",
                            "def _get_loc_single_level_index(self, level_index: Index, key: Hashable) -> int:\n    \"\"\"\n    If key is NA value, location of index unify as -1.\n\n    Parameters\n    ----------\n    level_index: Index\n    key : label\n\n    Returns\n    -------\n    loc : int\n        If key is NA value, loc is -1\n        Else, location of key in index.\n\n    See Also\n    --------\n    Index.get_loc : The get_loc method for (single-level) index.\n    \"\"\"\n    if is_scalar(key) and isna(key):\n        return -1\n    else:\n        return level_index.get_loc(key)",
                            "def get_loc(self, key, method=None):\n    \"\"\"\n    Get location for a label or a tuple of labels as an integer, slice or\n    boolean mask.\n\n    Parameters\n    ----------\n    key : label or tuple of labels (one for each level)\n    method : None\n\n    Returns\n    -------\n    loc : int, slice object or boolean mask\n        If the key is past the lexsort depth, the return may be a\n        boolean mask array, otherwise it is always a slice or int.\n\n    See Also\n    --------\n    Index.get_loc : The get_loc method for (single-level) index.\n    MultiIndex.slice_locs : Get slice location given start label(s) and\n                            end label(s).\n    MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                          sequence of such.\n\n    Notes\n    -----\n    The key cannot be a slice, list of same-level labels, a boolean mask,\n    or a sequence of such. If you want to use those, use\n    :meth:`MultiIndex.get_locs` instead.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n    >>> mi.get_loc('b')\n    slice(1, 3, None)\n\n    >>> mi.get_loc(('b', 'e'))\n    1\n    \"\"\"\n    if method is not None:\n        raise NotImplementedError('only the default get_loc method is currently supported for MultiIndex')\n\n    def _maybe_to_slice(loc):\n        \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n        if not isinstance(loc, np.ndarray) or loc.dtype != 'int64':\n            return loc\n        loc = lib.maybe_indices_to_slice(loc, len(self))\n        if isinstance(loc, slice):\n            return loc\n        mask = np.empty(len(self), dtype='bool')\n        mask.fill(False)\n        mask[loc] = True\n        return mask\n    if not isinstance(key, tuple):\n        loc = self._get_level_indexer(key, level=0)\n        return _maybe_to_slice(loc)\n    keylen = len(key)\n    if self.nlevels < keylen:\n        raise KeyError(f'Key length ({keylen}) exceeds index depth ({self.nlevels})')\n    if keylen == self.nlevels and self.is_unique:\n        return self._engine.get_loc(key)\n    i = self.lexsort_depth\n    lead_key, follow_key = (key[:i], key[i:])\n    start, stop = self.slice_locs(lead_key, lead_key) if lead_key else (0, len(self))\n    if start == stop:\n        raise KeyError(key)\n    if not follow_key:\n        return slice(start, stop)\n    warnings.warn('indexing past lexsort depth may impact performance.', PerformanceWarning, stacklevel=10)\n    loc = np.arange(start, stop, dtype='int64')\n    for i, k in enumerate(follow_key, len(lead_key)):\n        mask = self.codes[i][loc] == self._get_loc_single_level_index(self.levels[i], k)\n        if not mask.all():\n            loc = loc[mask]\n        if not len(loc):\n            raise KeyError(key)\n    return _maybe_to_slice(loc) if len(loc) != stop - start else slice(start, stop)",
                            "def get_loc_level(self, key, level=0, drop_level: bool=True):\n    \"\"\"\n    Get both the location for the requested label(s) and the\n    resulting sliced index.\n\n    Parameters\n    ----------\n    key : label or sequence of labels\n    level : int/level name or list thereof, optional\n    drop_level : bool, default True\n        If ``False``, the resulting index will not drop any level.\n\n    Returns\n    -------\n    loc : A 2-tuple where the elements are:\n          Element 0: int, slice object or boolean array\n          Element 1: The resulting sliced multiindex/index. If the key\n          contains all levels, this will be ``None``.\n\n    See Also\n    --------\n    MultiIndex.get_loc  : Get location for a label or a tuple of labels.\n    MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                          sequence of such.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')],\n    ...                                names=['A', 'B'])\n\n    >>> mi.get_loc_level('b')\n    (slice(1, 3, None), Index(['e', 'f'], dtype='object', name='B'))\n\n    >>> mi.get_loc_level('e', level='B')\n    (array([False,  True, False], dtype=bool),\n    Index(['b'], dtype='object', name='A'))\n\n    >>> mi.get_loc_level(['b', 'e'])\n    (1, None)\n    \"\"\"\n\n    def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n        if not drop_level:\n            return self[indexer]\n        orig_index = new_index = self[indexer]\n        levels = [self._get_level_number(i) for i in levels]\n        for i in sorted(levels, reverse=True):\n            try:\n                new_index = new_index.droplevel(i)\n            except ValueError:\n                return orig_index\n        return new_index\n    if isinstance(level, (tuple, list)):\n        if len(key) != len(level):\n            raise AssertionError('Key for location must have same length as number of levels')\n        result = None\n        for lev, k in zip(level, key):\n            loc, new_index = self.get_loc_level(k, level=lev)\n            if isinstance(loc, slice):\n                mask = np.zeros(len(self), dtype=bool)\n                mask[loc] = True\n                loc = mask\n            result = loc if result is None else result & loc\n        return (result, maybe_mi_droplevels(result, level, drop_level))\n    level = self._get_level_number(level)\n    if isinstance(key, list):\n        key = tuple(key)\n    if isinstance(key, tuple) and level == 0:\n        try:\n            if key in self.levels[0]:\n                indexer = self._get_level_indexer(key, level=level)\n                new_index = maybe_mi_droplevels(indexer, [0], drop_level)\n                return (indexer, new_index)\n        except TypeError:\n            pass\n        if not any((isinstance(k, slice) for k in key)):\n\n            def partial_selection(key, indexer=None):\n                if indexer is None:\n                    indexer = self.get_loc(key)\n                ilevels = [i for i in range(len(key)) if key[i] != slice(None, None)]\n                return (indexer, maybe_mi_droplevels(indexer, ilevels, drop_level))\n            if len(key) == self.nlevels and self.is_unique:\n                try:\n                    return (self._engine.get_loc(key), None)\n                except KeyError as e:\n                    raise KeyError(key) from e\n            else:\n                return partial_selection(key)\n        else:\n            indexer = None\n            for i, k in enumerate(key):\n                if not isinstance(k, slice):\n                    k = self._get_level_indexer(k, level=i)\n                    if isinstance(k, slice):\n                        if k.start == 0 and k.stop == len(self):\n                            k = slice(None, None)\n                    else:\n                        k_index = k\n                if isinstance(k, slice):\n                    if k == slice(None, None):\n                        continue\n                    else:\n                        raise TypeError(key)\n                if indexer is None:\n                    indexer = k_index\n                else:\n                    indexer &= k_index\n            if indexer is None:\n                indexer = slice(None, None)\n            ilevels = [i for i in range(len(key)) if key[i] != slice(None, None)]\n            return (indexer, maybe_mi_droplevels(indexer, ilevels, drop_level))\n    else:\n        indexer = self._get_level_indexer(key, level=level)\n        return (indexer, maybe_mi_droplevels(indexer, [level], drop_level))",
                            "def _get_level_indexer(self, key, level=0, indexer=None):\n    level_index = self.levels[level]\n    level_codes = self.codes[level]\n\n    def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n        r = np.arange(start, stop, step)\n        if indexer is not None and len(indexer) != len(codes):\n            from pandas import Series\n            mapper = Series(indexer)\n            indexer = codes.take(ensure_platform_int(indexer))\n            result = Series(Index(indexer).isin(r).nonzero()[0])\n            m = result.map(mapper)._ndarray_values\n        else:\n            m = np.zeros(len(codes), dtype=bool)\n            m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n        return m\n    if isinstance(key, slice):\n        try:\n            if key.start is not None:\n                start = level_index.get_loc(key.start)\n            else:\n                start = 0\n            if key.stop is not None:\n                stop = level_index.get_loc(key.stop)\n            else:\n                stop = len(level_index) - 1\n            step = key.step\n        except KeyError:\n            start = stop = level_index.slice_indexer(key.start, key.stop, key.step, kind='loc')\n            step = start.step\n        if isinstance(start, slice) or isinstance(stop, slice):\n            start = getattr(start, 'start', start)\n            stop = getattr(stop, 'stop', stop)\n            return convert_indexer(start, stop, step)\n        elif level > 0 or self.lexsort_depth == 0 or step is not None:\n            return convert_indexer(start, stop + 1, step)\n        else:\n            i = level_codes.searchsorted(start, side='left')\n            j = level_codes.searchsorted(stop, side='right')\n            return slice(i, j, step)\n    else:\n        code = self._get_loc_single_level_index(level_index, key)\n        if level > 0 or self.lexsort_depth == 0:\n            locs = np.array(level_codes == code, dtype=bool, copy=False)\n            if not locs.any():\n                raise KeyError(key)\n            return locs\n        i = level_codes.searchsorted(code, side='left')\n        j = level_codes.searchsorted(code, side='right')\n        if i == j:\n            raise KeyError(key)\n        return slice(i, j)",
                            "def get_locs(self, seq):\n    \"\"\"\n    Get location for a sequence of labels.\n\n    Parameters\n    ----------\n    seq : label, slice, list, mask or a sequence of such\n       You should use one of the above for each level.\n       If a level should not be used, set it to ``slice(None)``.\n\n    Returns\n    -------\n    numpy.ndarray\n        NumPy array of integers suitable for passing to iloc.\n\n    See Also\n    --------\n    MultiIndex.get_loc : Get location for a label or a tuple of labels.\n    MultiIndex.slice_locs : Get slice location given start label(s) and\n                            end label(s).\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n    >>> mi.get_locs('b')  # doctest: +SKIP\n    array([1, 2], dtype=int64)\n\n    >>> mi.get_locs([slice(None), ['e', 'f']])  # doctest: +SKIP\n    array([1, 2], dtype=int64)\n\n    >>> mi.get_locs([[True, False, True], slice('e', 'f')])  # doctest: +SKIP\n    array([2], dtype=int64)\n    \"\"\"\n    from pandas.core.indexes.numeric import Int64Index\n    true_slices = [i for i, s in enumerate(com.is_true_slices(seq)) if s]\n    if true_slices and true_slices[-1] >= self.lexsort_depth:\n        raise UnsortedIndexError(f'MultiIndex slicing requires the index to be lexsorted: slicing on levels {true_slices}, lexsort depth {self.lexsort_depth}')\n    n = len(self)\n    indexer = None\n\n    def _convert_to_indexer(r):\n        if isinstance(r, slice):\n            m = np.zeros(n, dtype=bool)\n            m[r] = True\n            r = m.nonzero()[0]\n        elif com.is_bool_indexer(r):\n            if len(r) != n:\n                raise ValueError('cannot index with a boolean indexer that is not the same length as the index')\n            r = r.nonzero()[0]\n        return Int64Index(r)\n\n    def _update_indexer(idxr, indexer=indexer):\n        if indexer is None:\n            indexer = Index(np.arange(n))\n        if idxr is None:\n            return indexer\n        return indexer & idxr\n    for i, k in enumerate(seq):\n        if com.is_bool_indexer(k):\n            k = np.asarray(k)\n            indexer = _update_indexer(_convert_to_indexer(k), indexer=indexer)\n        elif is_list_like(k):\n            indexers = None\n            for x in k:\n                try:\n                    idxrs = _convert_to_indexer(self._get_level_indexer(x, level=i, indexer=indexer))\n                    indexers = idxrs if indexers is None else indexers | idxrs\n                except KeyError:\n                    continue\n            if indexers is not None:\n                indexer = _update_indexer(indexers, indexer=indexer)\n            else:\n                return Int64Index([])._ndarray_values\n        elif com.is_null_slice(k):\n            indexer = _update_indexer(None, indexer=indexer)\n        elif isinstance(k, slice):\n            indexer = _update_indexer(_convert_to_indexer(self._get_level_indexer(k, level=i, indexer=indexer)), indexer=indexer)\n        else:\n            indexer = _update_indexer(_convert_to_indexer(self.get_loc_level(k, level=i, drop_level=False)[0]), indexer=indexer)\n    if indexer is None:\n        return Int64Index([])._ndarray_values\n    return indexer._ndarray_values",
                            "def truncate(self, before=None, after=None):\n    \"\"\"\n    Slice index between two labels / tuples, return new MultiIndex\n\n    Parameters\n    ----------\n    before : label or tuple, can be partial. Default None\n        None defaults to start\n    after : label or tuple, can be partial. Default None\n        None defaults to end\n\n    Returns\n    -------\n    truncated : MultiIndex\n    \"\"\"\n    if after and before and (after < before):\n        raise ValueError('after < before')\n    i, j = self.levels[0].slice_locs(before, after)\n    left, right = self.slice_locs(before, after)\n    new_levels = list(self.levels)\n    new_levels[0] = new_levels[0][i:j]\n    new_codes = [level_codes[left:right] for level_codes in self.codes]\n    new_codes[0] = new_codes[0] - i\n    return MultiIndex(levels=new_levels, codes=new_codes, verify_integrity=False)",
                            "def equals(self, other) -> bool:\n    \"\"\"\n    Determines if two MultiIndex objects have the same labeling information\n    (the levels themselves do not necessarily have to be the same)\n\n    See Also\n    --------\n    equal_levels\n    \"\"\"\n    if self.is_(other):\n        return True\n    if not isinstance(other, Index):\n        return False\n    if not isinstance(other, MultiIndex):\n        if not is_object_dtype(other.dtype):\n            if self.nlevels != other.nlevels:\n                return False\n        other_vals = com.values_from_object(ensure_index(other))\n        return array_equivalent(self._ndarray_values, other_vals)\n    if self.nlevels != other.nlevels:\n        return False\n    if len(self) != len(other):\n        return False\n    for i in range(self.nlevels):\n        self_codes = self.codes[i]\n        self_codes = self_codes[self_codes != -1]\n        self_values = algos.take_nd(np.asarray(self.levels[i]._values), self_codes, allow_fill=False)\n        other_codes = other.codes[i]\n        other_codes = other_codes[other_codes != -1]\n        other_values = algos.take_nd(np.asarray(other.levels[i]._values), other_codes, allow_fill=False)\n        if len(self_values) == 0 and len(other_values) == 0:\n            continue\n        if not array_equivalent(self_values, other_values):\n            return False\n    return True",
                            "def equal_levels(self, other) -> bool:\n    \"\"\"\n    Return True if the levels of both MultiIndex objects are the same\n\n    \"\"\"\n    if self.nlevels != other.nlevels:\n        return False\n    for i in range(self.nlevels):\n        if not self.levels[i].equals(other.levels[i]):\n            return False\n    return True",
                            "def union(self, other, sort=None):\n    \"\"\"\n    Form the union of two MultiIndex objects\n\n    Parameters\n    ----------\n    other : MultiIndex or array / Index of tuples\n    sort : False or None, default None\n        Whether to sort the resulting Index.\n\n        * None : Sort the result, except when\n\n          1. `self` and `other` are equal.\n          2. `self` has length 0.\n          3. Some values in `self` or `other` cannot be compared.\n             A RuntimeWarning is issued in this case.\n\n        * False : do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    Index\n\n    >>> index.union(index2)\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_names = self._convert_can_do_setop(other)\n    if len(other) == 0 or self.equals(other):\n        return self\n    uniq_tuples = lib.fast_unique_multiple([self._ndarray_values, other._ndarray_values], sort=sort)\n    return MultiIndex.from_arrays(zip(*uniq_tuples), sortorder=0, names=result_names)",
                            "def intersection(self, other, sort=False):\n    \"\"\"\n    Form the intersection of two MultiIndex objects.\n\n    Parameters\n    ----------\n    other : MultiIndex or array / Index of tuples\n    sort : False or None, default False\n        Sort the resulting MultiIndex if possible\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default from ``True`` to ``False``, to match\n           behaviour from before 0.24.0\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_names = self._convert_can_do_setop(other)\n    if self.equals(other):\n        return self\n    self_tuples = self._ndarray_values\n    other_tuples = other._ndarray_values\n    uniq_tuples = set(self_tuples) & set(other_tuples)\n    if sort is None:\n        uniq_tuples = sorted(uniq_tuples)\n    if len(uniq_tuples) == 0:\n        return MultiIndex(levels=self.levels, codes=[[]] * self.nlevels, names=result_names, verify_integrity=False)\n    else:\n        return MultiIndex.from_arrays(zip(*uniq_tuples), sortorder=0, names=result_names)",
                            "def difference(self, other, sort=None):\n    \"\"\"\n    Compute set difference of two MultiIndex objects\n\n    Parameters\n    ----------\n    other : MultiIndex\n    sort : False or None, default None\n        Sort the resulting MultiIndex if possible\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    diff : MultiIndex\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_names = self._convert_can_do_setop(other)\n    if len(other) == 0:\n        return self\n    if self.equals(other):\n        return MultiIndex(levels=self.levels, codes=[[]] * self.nlevels, names=result_names, verify_integrity=False)\n    this = self._get_unique_index()\n    indexer = this.get_indexer(other)\n    indexer = indexer.take((indexer != -1).nonzero()[0])\n    label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n    difference = this.values.take(label_diff)\n    if sort is None:\n        difference = sorted(difference)\n    if len(difference) == 0:\n        return MultiIndex(levels=[[]] * self.nlevels, codes=[[]] * self.nlevels, names=result_names, verify_integrity=False)\n    else:\n        return MultiIndex.from_tuples(difference, sortorder=0, names=result_names)",
                            "@Appender(_index_shared_docs['astype'])\ndef astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if is_categorical_dtype(dtype):\n        msg = '> 1 ndim Categorical are not supported at this time'\n        raise NotImplementedError(msg)\n    elif not is_object_dtype(dtype):\n        raise TypeError(f'Setting {type(self)} dtype to anything other than object is not supported')\n    elif copy is True:\n        return self._shallow_copy()\n    return self",
                            "def _convert_can_do_setop(self, other):\n    result_names = self.names\n    if not hasattr(other, 'names'):\n        if len(other) == 0:\n            other = MultiIndex(levels=[[]] * self.nlevels, codes=[[]] * self.nlevels, verify_integrity=False)\n        else:\n            msg = 'other must be a MultiIndex or a list of tuples'\n            try:\n                other = MultiIndex.from_tuples(other)\n            except TypeError:\n                raise TypeError(msg)\n    else:\n        result_names = self.names if self.names == other.names else None\n    return (other, result_names)",
                            "def insert(self, loc: int, item):\n    \"\"\"\n    Make new MultiIndex inserting new item at location\n\n    Parameters\n    ----------\n    loc : int\n    item : tuple\n        Must be same length as number of levels in the MultiIndex\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    if not isinstance(item, tuple):\n        item = (item,) + ('',) * (self.nlevels - 1)\n    elif len(item) != self.nlevels:\n        raise ValueError('Item must have length equal to number of levels.')\n    new_levels = []\n    new_codes = []\n    for k, level, level_codes in zip(item, self.levels, self.codes):\n        if k not in level:\n            lev_loc = len(level)\n            level = level.insert(lev_loc, k)\n        else:\n            lev_loc = level.get_loc(k)\n        new_levels.append(level)\n        new_codes.append(np.insert(ensure_int64(level_codes), loc, lev_loc))\n    return MultiIndex(levels=new_levels, codes=new_codes, names=self.names, verify_integrity=False)",
                            "def delete(self, loc):\n    \"\"\"\n    Make new index with passed location deleted\n\n    Returns\n    -------\n    new_index : MultiIndex\n    \"\"\"\n    new_codes = [np.delete(level_codes, loc) for level_codes in self.codes]\n    return MultiIndex(levels=self.levels, codes=new_codes, names=self.names, verify_integrity=False)",
                            "def _wrap_joined_index(self, joined, other):\n    names = self.names if self.names == other.names else None\n    return MultiIndex.from_tuples(joined, names=names)",
                            "@Appender(Index.isin.__doc__)\ndef isin(self, values, level=None):\n    if level is None:\n        values = MultiIndex.from_tuples(values, names=self.names).values\n        return algos.isin(self.values, values)\n    else:\n        num = self._get_level_number(level)\n        levs = self.get_level_values(num)\n        if levs.size == 0:\n            return np.zeros(len(levs), dtype=np.bool_)\n        return levs.isin(values)",
                            "def f(l):\n    return 'mixed' in l or 'string' in l or 'unicode' in l",
                            "def f(k, stringify):\n    if stringify and (not isinstance(k, str)):\n        k = str(k)\n    return k",
                            "def _try_mi(k):\n    loc = self.get_loc(k)\n    new_values = series._values[loc]\n    new_index = self[loc]\n    new_index = maybe_droplevels(new_index, k)\n    return series._constructor(new_values, index=new_index, name=series.name).__finalize__(self)",
                            "def cats(level_codes):\n    return np.arange(np.array(level_codes).max() + 1 if len(level_codes) else 0, dtype=level_codes.dtype)",
                            "def _maybe_to_slice(loc):\n    \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n    if not isinstance(loc, np.ndarray) or loc.dtype != 'int64':\n        return loc\n    loc = lib.maybe_indices_to_slice(loc, len(self))\n    if isinstance(loc, slice):\n        return loc\n    mask = np.empty(len(self), dtype='bool')\n    mask.fill(False)\n    mask[loc] = True\n    return mask",
                            "def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n    if not drop_level:\n        return self[indexer]\n    orig_index = new_index = self[indexer]\n    levels = [self._get_level_number(i) for i in levels]\n    for i in sorted(levels, reverse=True):\n        try:\n            new_index = new_index.droplevel(i)\n        except ValueError:\n            return orig_index\n    return new_index",
                            "def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n    r = np.arange(start, stop, step)\n    if indexer is not None and len(indexer) != len(codes):\n        from pandas import Series\n        mapper = Series(indexer)\n        indexer = codes.take(ensure_platform_int(indexer))\n        result = Series(Index(indexer).isin(r).nonzero()[0])\n        m = result.map(mapper)._ndarray_values\n    else:\n        m = np.zeros(len(codes), dtype=bool)\n        m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n    return m",
                            "def _convert_to_indexer(r):\n    if isinstance(r, slice):\n        m = np.zeros(n, dtype=bool)\n        m[r] = True\n        r = m.nonzero()[0]\n    elif com.is_bool_indexer(r):\n        if len(r) != n:\n            raise ValueError('cannot index with a boolean indexer that is not the same length as the index')\n        r = r.nonzero()[0]\n    return Int64Index(r)",
                            "def _update_indexer(idxr, indexer=indexer):\n    if indexer is None:\n        indexer = Index(np.arange(n))\n    if idxr is None:\n        return indexer\n    return indexer & idxr",
                            "def partial_selection(key, indexer=None):\n    if indexer is None:\n        indexer = self.get_loc(key)\n    ilevels = [i for i in range(len(key)) if key[i] != slice(None, None)]\n    return (indexer, maybe_mi_droplevels(indexer, ilevels, drop_level))"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_deprecations",
                            "_typ",
                            "_names",
                            "_levels",
                            "_codes",
                            "_comparables",
                            "rename",
                            "names",
                            "_tuples"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__new__(cls, levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity: bool=True, _set_identity: bool=True)",
                            "_validate_codes(self, level: List, code: List)",
                            "_verify_integrity(self, codes: Optional[List]=None, levels: Optional[List]=None)",
                            "from_arrays(cls, arrays, sortorder=None, names=lib.no_default)",
                            "from_tuples(cls, tuples, sortorder=None, names=None)",
                            "from_product(cls, iterables, sortorder=None, names=lib.no_default)",
                            "from_frame(cls, df, sortorder=None, names=None)",
                            "levels(self)",
                            "_values(self)",
                            "shape(self)",
                            "array(self)",
                            "_set_levels(self, levels, level=None, copy=False, validate=True, verify_integrity=False)",
                            "set_levels(self, levels, level=None, inplace=False, verify_integrity=True)",
                            "codes(self)",
                            "_set_codes(self, codes, level=None, copy=False, validate=True, verify_integrity=False)",
                            "set_codes(self, codes, level=None, inplace=False, verify_integrity=True)",
                            "copy(self, names=None, dtype=None, levels=None, codes=None, deep=False, _set_identity=False, **kwargs)",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "view(self, cls=None)",
                            "_shallow_copy_with_infer(self, values, **kwargs)",
                            "__contains__(self, key: Any) -> bool",
                            "_shallow_copy(self, values=None, **kwargs)",
                            "dtype(self) -> np.dtype",
                            "_is_memory_usage_qualified(self) -> bool",
                            "memory_usage(self, deep: bool=False) -> int",
                            "nbytes(self) -> int",
                            "_nbytes(self, deep: bool=False) -> int",
                            "_formatter_func(self, tup)",
                            "_format_data(self, name=None)",
                            "_format_attrs(self)",
                            "_format_native_types(self, na_rep='nan', **kwargs)",
                            "format(self, space=2, sparsify=None, adjoin=True, names=False, na_rep=None, formatter=None)",
                            "__len__(self) -> int",
                            "_get_names(self)",
                            "_set_names(self, names, level=None, validate=True)",
                            "_get_grouper_for_level(self, mapper, level)",
                            "_constructor(self)",
                            "inferred_type(self) -> str",
                            "_get_level_number(self, level) -> int",
                            "_engine(self)",
                            "values(self)",
                            "is_monotonic_increasing(self) -> bool",
                            "is_monotonic_decreasing(self) -> bool",
                            "_have_mixed_levels(self)",
                            "_inferred_type_levels(self)",
                            "_hashed_values(self)",
                            "_hashed_indexing_key(self, key)",
                            "duplicated(self, keep='first')",
                            "fillna(self, value=None, downcast=None)",
                            "dropna(self, how='any')",
                            "get_value(self, series, key)",
                            "_get_level_values(self, level, unique=False)",
                            "get_level_values(self, level)",
                            "unique(self, level=None)",
                            "_to_safe_for_reshape(self)",
                            "to_frame(self, index=True, name=None)",
                            "to_flat_index(self)",
                            "is_all_dates(self) -> bool",
                            "is_lexsorted(self) -> bool",
                            "lexsort_depth(self)",
                            "_lexsort_depth(self) -> int",
                            "_sort_levels_monotonic(self)",
                            "remove_unused_levels(self)",
                            "nlevels(self) -> int",
                            "levshape(self)",
                            "__reduce__(self)",
                            "__setstate__(self, state)",
                            "__getitem__(self, key)",
                            "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                            "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=None)",
                            "append(self, other)",
                            "argsort(self, *args, **kwargs) -> np.ndarray",
                            "repeat(self, repeats, axis=None)",
                            "where(self, cond, other=None)",
                            "drop(self, codes, level=None, errors='raise')",
                            "_drop_from_level(self, codes, level, errors='raise')",
                            "swaplevel(self, i=-2, j=-1)",
                            "reorder_levels(self, order)",
                            "_get_codes_for_sorting(self)",
                            "sortlevel(self, level=0, ascending=True, sort_remaining=True)",
                            "_convert_listlike_indexer(self, keyarr, kind=None)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                            "get_indexer_non_unique(self, target)",
                            "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                            "get_slice_bound(self, label: Union[Hashable, Sequence[Hashable]], side: str, kind: str) -> int",
                            "slice_locs(self, start=None, end=None, step=None, kind=None)",
                            "_partial_tup_index(self, tup, side='left')",
                            "_get_loc_single_level_index(self, level_index: Index, key: Hashable) -> int",
                            "get_loc(self, key, method=None)",
                            "get_loc_level(self, key, level=0, drop_level: bool=True)",
                            "_get_level_indexer(self, key, level=0, indexer=None)",
                            "get_locs(self, seq)",
                            "truncate(self, before=None, after=None)",
                            "equals(self, other) -> bool",
                            "equal_levels(self, other) -> bool",
                            "union(self, other, sort=None)",
                            "intersection(self, other, sort=False)",
                            "difference(self, other, sort=None)",
                            "astype(self, dtype, copy=True)",
                            "_convert_can_do_setop(self, other)",
                            "insert(self, loc: int, item)",
                            "delete(self, loc)",
                            "_wrap_joined_index(self, joined, other)",
                            "isin(self, values, level=None)",
                            "f(l)",
                            "f(k, stringify)",
                            "_try_mi(k)",
                            "cats(level_codes)",
                            "_maybe_to_slice(loc)",
                            "maybe_mi_droplevels(indexer, levels, drop_level: bool)",
                            "convert_indexer(start, stop, step, indexer=indexer, codes=level_codes)",
                            "_convert_to_indexer(r)",
                            "_update_indexer(idxr, indexer=indexer)",
                            "partial_selection(key, indexer=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.codes": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(0, 1),\n            (1, 2),\n            (2, 1),\n            (3, 2),\n            (4, 1),\n            (5, 2),\n            (6, 1),\n            (7, 2),\n            (8, 1),\n            (9, 2)],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "level_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.levels": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "mapper": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grouper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_values.map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uniques": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos.factorize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ok_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_index.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "indexer": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "self.codes": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(0, 1),\n            (1, 2),\n            (2, 1),\n            (3, 2),\n            (4, 1),\n            (5, 2),\n            (6, 1),\n            (7, 2),\n            (8, 1),\n            (9, 2)],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "level_index": {
                                    "variable_value": "Int64Index([1, 2], dtype='int64', name='B')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(2,)"
                                },
                                "self.levels": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "mapper": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grouper": {
                                    "variable_value": "Int64Index([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], dtype='int64', name='B')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(10,)"
                                },
                                "level_values.map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "uniques": {
                                    "variable_value": "array([0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "algos.factorize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ok_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer.dtype": {
                                    "variable_value": "dtype('int8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "level_index.take": {
                                    "variable_value": "<bound method Index.take of Int64Index([1, 2], dtype='int64', name='B')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.codes": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(0, 1),\n            (1, 2),\n            (2, 1),\n            (3, 2),\n            (4, 1),\n            (5, 2),\n            (6, 1),\n            (7, 2),\n            (8, 1),\n            (9, 2)],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "level_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.levels": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "mapper": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grouper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_values.map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uniques": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos.factorize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ok_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_index.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "indexer": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "self.codes": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(0, 1),\n            (1, 2),\n            (2, 1),\n            (3, 2),\n            (4, 1),\n            (5, 2),\n            (6, 1),\n            (7, 2),\n            (8, 1),\n            (9, 2)],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "level_index": {
                                    "variable_value": "CategoricalIndex([1, 2], categories=[1, 2, 3], ordered=False, name='B', dtype='category')",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "(2,)"
                                },
                                "self.levels": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "mapper": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grouper": {
                                    "variable_value": "CategoricalIndex([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], categories=[1, 2, 3], ordered=False, name='B', dtype='category')",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level_values.map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "uniques": {
                                    "variable_value": "array([0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "algos.factorize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ok_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer.dtype": {
                                    "variable_value": "dtype('int8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "level_index.take": {
                                    "variable_value": "<bound method ExtensionIndex.take of CategoricalIndex([1, 2], categories=[1, 2, 3], ordered=False, name='B', dtype='category')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.codes": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(0, 1),\n            (1, 2),\n            (2, 1),\n            (3, 2),\n            (4, 1),\n            (5, 2),\n            (6, 1),\n            (7, 2),\n            (8, 1),\n            (9, 2)],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "level_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.levels": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "mapper": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grouper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_values.map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uniques": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos.factorize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ok_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_index.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_index.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "indexer": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "self.codes": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(0, 1),\n            (1, 2),\n            (2, 1),\n            (3, 2),\n            (4, 1),\n            (5, 2),\n            (6, 1),\n            (7, 2),\n            (8, 1),\n            (9, 2)],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "level_index": {
                                    "variable_value": "Int64Index([1, 2], dtype='int64', name='B')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(2,)"
                                },
                                "self.levels": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "mapper": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grouper": {
                                    "variable_value": "Int64Index([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], dtype='int64', name='B')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(10,)"
                                },
                                "level_values.map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "uniques": {
                                    "variable_value": "array([0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "algos.factorize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ok_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer.dtype": {
                                    "variable_value": "dtype('int8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "level_index.take": {
                                    "variable_value": "<bound method Index.take of Int64Index([1, 2], dtype='int64', name='B')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "level_index.copy": {
                                    "variable_value": "<bound method Index.copy of Int64Index([1, 2], dtype='int64', name='B')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.codes": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(0, 1),\n            (1, 2),\n            (2, 1),\n            (3, 2),\n            (4, 1),\n            (5, 2),\n            (6, 1),\n            (7, 2),\n            (8, 1),\n            (9, 2)],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "level_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.levels": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "mapper": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grouper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_values.map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "uniques": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos.factorize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ok_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_index.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level_index.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "indexer": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "self.codes": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(0, 1),\n            (1, 2),\n            (2, 1),\n            (3, 2),\n            (4, 1),\n            (5, 2),\n            (6, 1),\n            (7, 2),\n            (8, 1),\n            (9, 2)],\n           names=['A', 'B'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "level_index": {
                                    "variable_value": "CategoricalIndex([1, 2], categories=[1, 2, 3], ordered=False, name='B', dtype='category')",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "(2,)"
                                },
                                "self.levels": {
                                    "variable_value": "FrozenList([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "mapper": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grouper": {
                                    "variable_value": "CategoricalIndex([1, 2, 1, 2, 1, 2, 1, 2, 1, 2], categories=[1, 2, 3], ordered=False, name='B', dtype='category')",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "(10,)"
                                },
                                "level_values.map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "uniques": {
                                    "variable_value": "array([0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "algos.factorize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "algos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ok_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.empty": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer.dtype": {
                                    "variable_value": "dtype('int8')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "level_index.take": {
                                    "variable_value": "<bound method ExtensionIndex.take of CategoricalIndex([1, 2], categories=[1, 2, 3], ordered=False, name='B', dtype='category')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "level_index.copy": {
                                    "variable_value": "<bound method Index.copy of CategoricalIndex([1, 2], categories=[1, 2, 3], ordered=False, name='B', dtype='category')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _sparsify(label_list, start: int = 0, sentinel=\"\"):\n    pivoted = list(zip(*label_list))\n    k = len(label_list)\n\n    result = pivoted[: start + 1]\n    prev = pivoted[start]\n\n    for cur in pivoted[start + 1 :]:\n        sparse_cur = []\n\n        for i, (p, t) in enumerate(zip(prev, cur)):\n            if i == k - 1:\n                sparse_cur.append(t)\n                result.append(sparse_cur)\n                break\n\n            if p == t:\n                sparse_cur.append(sentinel)\n            else:\n                sparse_cur.extend(cur[i:])\n                result.append(sparse_cur)\n                break\n\n        prev = cur\n\n    return list(zip(*result))",
                "def _get_na_rep(dtype) -> str:\n    return {np.datetime64: \"NaT\", np.timedelta64: \"NaT\"}.get(dtype, \"NaN\")",
                "def maybe_droplevels(index, key):\n    \"\"\"\n    Attempt to drop level or levels from the given index.\n\n    Parameters\n    ----------\n    index: Index\n    key : scalar or tuple\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    # drop levels\n    original_index = index\n    if isinstance(key, tuple):\n        for _ in key:\n            try:\n                index = index.droplevel(0)\n            except ValueError:\n                # we have dropped too much, so back out\n                return original_index\n    else:\n        try:\n            index = index.droplevel(0)\n        except ValueError:\n            pass\n\n    return index",
                "def _coerce_indexer_frozen(array_like, categories, copy: bool = False) -> np.ndarray:\n    \"\"\"\n    Coerce the array_like indexer to the smallest integer dtype that can encode all\n    of the given categories.\n\n    Parameters\n    ----------\n    array_like : array-like\n    categories : array-like\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n        Non-writeable.\n    \"\"\"\n    array_like = coerce_indexer_dtype(array_like, categories)\n    if copy:\n        array_like = array_like.copy()\n    array_like.flags.writeable = False\n    return array_like",
                "def _codes_to_ints(self, codes):\n    \"\"\"\n    Transform combination(s) of uint64 in one uint64 (each), in a strictly\n    monotonic way (i.e. respecting the lexicographic order of integer\n    combinations): see BaseMultiIndexCodesEngine documentation.\n\n    Parameters\n    ----------\n    codes : 1- or 2-dimensional array of dtype uint64\n        Combinations of integers (one per row)\n\n    Returns\n    -------\n    scalar or 1-dimensional array, of dtype uint64\n        Integer(s) representing one combination (each).\n    \"\"\"\n    # Shift the representation of each level by the pre-calculated number\n    # of bits:\n    codes <<= self.offsets\n\n    # Now sum and OR are in fact interchangeable. This is a simple\n    # composition of the (disjunct) significant bits of each level (i.e.\n    # each column in \"codes\") in a single positive integer:\n    if codes.ndim == 1:\n        # Single key\n        return np.bitwise_or.reduce(codes)\n\n    # Multiple keys\n    return np.bitwise_or.reduce(codes, axis=1)",
                "def _codes_to_ints(self, codes):\n    \"\"\"\n    Transform combination(s) of uint64 in one Python integer (each), in a\n    strictly monotonic way (i.e. respecting the lexicographic order of\n    integer combinations): see BaseMultiIndexCodesEngine documentation.\n\n    Parameters\n    ----------\n    codes : 1- or 2-dimensional array of dtype uint64\n        Combinations of integers (one per row)\n\n    Returns\n    -------\n    int, or 1-dimensional array of dtype object\n        Integer(s) representing one combination (each).\n    \"\"\"\n\n    # Shift the representation of each level by the pre-calculated number\n    # of bits. Since this can overflow uint64, first make sure we are\n    # working with Python integers:\n    codes = codes.astype(\"object\") << self.offsets\n\n    # Now sum and OR are in fact interchangeable. This is a simple\n    # composition of the (disjunct) significant bits of each level (i.e.\n    # each column in \"codes\") in a single positive integer (per row):\n    if codes.ndim == 1:\n        # Single key\n        return np.bitwise_or.reduce(codes)\n\n    # Multiple keys\n    return np.bitwise_or.reduce(codes, axis=1)",
                "def __new__(\n    cls,\n    levels=None,\n    codes=None,\n    sortorder=None,\n    names=None,\n    dtype=None,\n    copy=False,\n    name=None,\n    verify_integrity: bool = True,\n    _set_identity: bool = True,\n):\n\n    # compat with Index\n    if name is not None:\n        names = name\n    if levels is None or codes is None:\n        raise TypeError(\"Must pass both levels and codes\")\n    if len(levels) != len(codes):\n        raise ValueError(\"Length of levels and codes must be the same.\")\n    if len(levels) == 0:\n        raise ValueError(\"Must pass non-zero number of levels/codes\")\n\n    result = object.__new__(MultiIndex)\n\n    # we've already validated levels and codes, so shortcut here\n    result._set_levels(levels, copy=copy, validate=False)\n    result._set_codes(codes, copy=copy, validate=False)\n\n    result._names = [None] * len(levels)\n    if names is not None:\n        # handles name validation\n        result._set_names(names)\n\n    if sortorder is not None:\n        result.sortorder = int(sortorder)\n    else:\n        result.sortorder = sortorder\n\n    if verify_integrity:\n        new_codes = result._verify_integrity()\n        result._codes = new_codes\n\n    if _set_identity:\n        result._reset_identity()\n\n    return result",
                "def _validate_codes(self, level: List, code: List):\n    \"\"\"\n    Reassign code values as -1 if their corresponding levels are NaN.\n\n    Parameters\n    ----------\n    code : list\n        Code to reassign.\n    level : list\n        Level to check for missing values (NaN, NaT, None).\n\n    Returns\n    -------\n    new code where code value = -1 if it corresponds\n    to a level with missing values (NaN, NaT, None).\n    \"\"\"\n    null_mask = isna(level)\n    if np.any(null_mask):\n        code = np.where(null_mask[code], -1, code)\n    return code",
                "def _verify_integrity(\n    self, codes: Optional[List] = None, levels: Optional[List] = None\n):\n    \"\"\"\n    Parameters\n    ----------\n    codes : optional list\n        Codes to check for validity. Defaults to current codes.\n    levels : optional list\n        Levels to check for validity. Defaults to current levels.\n\n    Raises\n    ------\n    ValueError\n        If length of levels and codes don't match, if the codes for any\n        level would exceed level bounds, or there are any duplicate levels.\n\n    Returns\n    -------\n    new codes where code value = -1 if it corresponds to a\n    NaN level.\n    \"\"\"\n    # NOTE: Currently does not check, among other things, that cached\n    # nlevels matches nor that sortorder matches actually sortorder.\n    codes = codes or self.codes\n    levels = levels or self.levels\n\n    if len(levels) != len(codes):\n        raise ValueError(\n            \"Length of levels and codes must match. NOTE: \"\n            \"this index is in an inconsistent state.\"\n        )\n    codes_length = len(codes[0])\n    for i, (level, level_codes) in enumerate(zip(levels, codes)):\n        if len(level_codes) != codes_length:\n            raise ValueError(\n                f\"Unequal code lengths: {[len(code_) for code_ in codes]}\"\n            )\n        if len(level_codes) and level_codes.max() >= len(level):\n            raise ValueError(\n                f\"On level {i}, code max ({level_codes.max()}) >= length of \"\n                f\"level ({len(level)}). NOTE: this index is in an \"\n                \"inconsistent state\"\n            )\n        if len(level_codes) and level_codes.min() < -1:\n            raise ValueError(f\"On level {i}, code value ({level_codes.min()}) < -1\")\n        if not level.is_unique:\n            raise ValueError(\n                f\"Level values must be unique: {list(level)} on level {i}\"\n            )\n    if self.sortorder is not None:\n        if self.sortorder > self._lexsort_depth():\n            raise ValueError(\n                \"Value for sortorder must be inferior or equal to actual \"\n                f\"lexsort_depth: sortorder {self.sortorder} \"\n                f\"with lexsort_depth {self._lexsort_depth()}\"\n            )\n\n    codes = [\n        self._validate_codes(level, code) for level, code in zip(levels, codes)\n    ]\n    new_codes = FrozenList(codes)\n    return new_codes",
                "@classmethod\ndef from_arrays(cls, arrays, sortorder=None, names=lib.no_default):\n    \"\"\"\n    Convert arrays to MultiIndex.\n\n    Parameters\n    ----------\n    arrays : list / sequence of array-likes\n        Each array-like gives one level's value for each data point.\n        len(arrays) is the number of levels.\n    sortorder : int or None\n        Level of sortedness (must be lexicographically sorted by that\n        level).\n    names : list / sequence of str, optional\n        Names for the levels in the index.\n\n    Returns\n    -------\n    MultiIndex\n\n    See Also\n    --------\n    MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n    MultiIndex.from_product : Make a MultiIndex from cartesian product\n                              of iterables.\n    MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n    Examples\n    --------\n    >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n    >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n    MultiIndex([(1,  'red'),\n                (1, 'blue'),\n                (2,  'red'),\n                (2, 'blue')],\n               names=['number', 'color'])\n    \"\"\"\n    error_msg = \"Input must be a list / sequence of array-likes.\"\n    if not is_list_like(arrays):\n        raise TypeError(error_msg)\n    elif is_iterator(arrays):\n        arrays = list(arrays)\n\n    # Check if elements of array are list-like\n    for array in arrays:\n        if not is_list_like(array):\n            raise TypeError(error_msg)\n\n    # Check if lengths of all arrays are equal or not,\n    # raise ValueError, if not\n    for i in range(1, len(arrays)):\n        if len(arrays[i]) != len(arrays[i - 1]):\n            raise ValueError(\"all arrays must be same length\")\n\n    codes, levels = factorize_from_iterables(arrays)\n    if names is lib.no_default:\n        names = [getattr(arr, \"name\", None) for arr in arrays]\n\n    return MultiIndex(\n        levels=levels,\n        codes=codes,\n        sortorder=sortorder,\n        names=names,\n        verify_integrity=False,\n    )",
                "@classmethod\ndef from_tuples(cls, tuples, sortorder=None, names=None):\n    \"\"\"\n    Convert list of tuples to MultiIndex.\n\n    Parameters\n    ----------\n    tuples : list / sequence of tuple-likes\n        Each tuple is the index of one row/column.\n    sortorder : int or None\n        Level of sortedness (must be lexicographically sorted by that\n        level).\n    names : list / sequence of str, optional\n        Names for the levels in the index.\n\n    Returns\n    -------\n    MultiIndex\n\n    See Also\n    --------\n    MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n    MultiIndex.from_product : Make a MultiIndex from cartesian product\n                              of iterables.\n    MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n    Examples\n    --------\n    >>> tuples = [(1, 'red'), (1, 'blue'),\n    ...           (2, 'red'), (2, 'blue')]\n    >>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\n    MultiIndex([(1,  'red'),\n                (1, 'blue'),\n                (2,  'red'),\n                (2, 'blue')],\n               names=['number', 'color'])\n    \"\"\"\n    if not is_list_like(tuples):\n        raise TypeError(\"Input must be a list / sequence of tuple-likes.\")\n    elif is_iterator(tuples):\n        tuples = list(tuples)\n\n    if len(tuples) == 0:\n        if names is None:\n            raise TypeError(\"Cannot infer number of levels from empty list\")\n        arrays = [[]] * len(names)\n    elif isinstance(tuples, (np.ndarray, Index)):\n        if isinstance(tuples, Index):\n            tuples = tuples._values\n\n        arrays = list(lib.tuples_to_object_array(tuples).T)\n    elif isinstance(tuples, list):\n        arrays = list(lib.to_object_array_tuples(tuples).T)\n    else:\n        arrays = zip(*tuples)\n\n    return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)",
                "@classmethod\ndef from_product(cls, iterables, sortorder=None, names=lib.no_default):\n    \"\"\"\n    Make a MultiIndex from the cartesian product of multiple iterables.\n\n    Parameters\n    ----------\n    iterables : list / sequence of iterables\n        Each iterable has unique labels for each level of the index.\n    sortorder : int or None\n        Level of sortedness (must be lexicographically sorted by that\n        level).\n    names : list / sequence of str, optional\n        Names for the levels in the index.\n\n        .. versionchanged:: 1.0.0\n\n           If not explicitly provided, names will be inferred from the\n           elements of iterables if an element has a name attribute\n\n    Returns\n    -------\n    MultiIndex\n\n    See Also\n    --------\n    MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n    MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n    MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n    Examples\n    --------\n    >>> numbers = [0, 1, 2]\n    >>> colors = ['green', 'purple']\n    >>> pd.MultiIndex.from_product([numbers, colors],\n    ...                            names=['number', 'color'])\n    MultiIndex([(0,  'green'),\n                (0, 'purple'),\n                (1,  'green'),\n                (1, 'purple'),\n                (2,  'green'),\n                (2, 'purple')],\n               names=['number', 'color'])\n    \"\"\"\n    from pandas.core.reshape.util import cartesian_product\n\n    if not is_list_like(iterables):\n        raise TypeError(\"Input must be a list / sequence of iterables.\")\n    elif is_iterator(iterables):\n        iterables = list(iterables)\n\n    codes, levels = factorize_from_iterables(iterables)\n    if names is lib.no_default:\n        names = [getattr(it, \"name\", None) for it in iterables]\n\n    codes = cartesian_product(codes)\n    return MultiIndex(levels, codes, sortorder=sortorder, names=names)",
                "@classmethod\ndef from_frame(cls, df, sortorder=None, names=None):\n    \"\"\"\n    Make a MultiIndex from a DataFrame.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    df : DataFrame\n        DataFrame to be converted to MultiIndex.\n    sortorder : int, optional\n        Level of sortedness (must be lexicographically sorted by that\n        level).\n    names : list-like, optional\n        If no names are provided, use the column names, or tuple of column\n        names if the columns is a MultiIndex. If a sequence, overwrite\n        names with the given sequence.\n\n    Returns\n    -------\n    MultiIndex\n        The MultiIndex representation of the given DataFrame.\n\n    See Also\n    --------\n    MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n    MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n    MultiIndex.from_product : Make a MultiIndex from cartesian product\n                              of iterables.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([['HI', 'Temp'], ['HI', 'Precip'],\n    ...                    ['NJ', 'Temp'], ['NJ', 'Precip']],\n    ...                   columns=['a', 'b'])\n    >>> df\n          a       b\n    0    HI    Temp\n    1    HI  Precip\n    2    NJ    Temp\n    3    NJ  Precip\n\n    >>> pd.MultiIndex.from_frame(df)\n    MultiIndex([('HI',   'Temp'),\n                ('HI', 'Precip'),\n                ('NJ',   'Temp'),\n                ('NJ', 'Precip')],\n               names=['a', 'b'])\n\n    Using explicit names, instead of the column names\n\n    >>> pd.MultiIndex.from_frame(df, names=['state', 'observation'])\n    MultiIndex([('HI',   'Temp'),\n                ('HI', 'Precip'),\n                ('NJ',   'Temp'),\n                ('NJ', 'Precip')],\n               names=['state', 'observation'])\n    \"\"\"\n    if not isinstance(df, ABCDataFrame):\n        raise TypeError(\"Input must be a DataFrame\")\n\n    column_names, columns = zip(*df.items())\n    names = column_names if names is None else names\n    return cls.from_arrays(columns, sortorder=sortorder, names=names)",
                "@property\ndef levels(self):\n    result = [\n        x._shallow_copy(name=name) for x, name in zip(self._levels, self._names)\n    ]\n    for level in result:\n        # disallow midx.levels[0].name = \"foo\"\n        level._no_setting_name = True\n    return FrozenList(result)",
                "@property\ndef _values(self):\n    # We override here, since our parent uses _data, which we don't use.\n    return self.values",
                "@property\ndef shape(self):\n    \"\"\"\n    Return a tuple of the shape of the underlying data.\n    \"\"\"\n    # overriding the base Index.shape definition to avoid materializing\n    # the values (GH-27384, GH-27775)\n    return (len(self),)",
                "@property\ndef array(self):\n    \"\"\"\n    Raises a ValueError for `MultiIndex` because there's no single\n    array backing a MultiIndex.\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    raise ValueError(\n        \"MultiIndex has no single backing array. Use \"\n        \"'MultiIndex.to_numpy()' to get a NumPy array of tuples.\"\n    )",
                "def _set_levels(\n    self, levels, level=None, copy=False, validate=True, verify_integrity=False\n):\n    # This is NOT part of the levels property because it should be\n    # externally not allowed to set levels. User beware if you change\n    # _levels directly\n    if validate:\n        if len(levels) == 0:\n            raise ValueError(\"Must set non-zero number of levels.\")\n        if level is None and len(levels) != self.nlevels:\n            raise ValueError(\"Length of levels must match number of levels.\")\n        if level is not None and len(levels) != len(level):\n            raise ValueError(\"Length of levels must match length of level.\")\n\n    if level is None:\n        new_levels = FrozenList(\n            ensure_index(lev, copy=copy)._shallow_copy() for lev in levels\n        )\n    else:\n        level_numbers = [self._get_level_number(lev) for lev in level]\n        new_levels = list(self._levels)\n        for lev_num, lev in zip(level_numbers, levels):\n            new_levels[lev_num] = ensure_index(lev, copy=copy)._shallow_copy()\n        new_levels = FrozenList(new_levels)\n\n    if verify_integrity:\n        new_codes = self._verify_integrity(levels=new_levels)\n        self._codes = new_codes\n\n    names = self.names\n    self._levels = new_levels\n    if any(names):\n        self._set_names(names)\n\n    self._tuples = None\n    self._reset_cache()",
                "def set_levels(self, levels, level=None, inplace=False, verify_integrity=True):\n    \"\"\"\n    Set new levels on MultiIndex. Defaults to returning new index.\n\n    Parameters\n    ----------\n    levels : sequence or list of sequence\n        New level(s) to apply.\n    level : int, level name, or sequence of int/level names (default None)\n        Level(s) to set (None for all levels).\n    inplace : bool\n        If True, mutates in place.\n    verify_integrity : bool, default True\n        If True, checks that levels and codes are compatible.\n\n    Returns\n    -------\n    new index (of same type and class...etc)\n\n    Examples\n    --------\n    >>> idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                        (2, 'one'), (2, 'two'),\n                                        (3, 'one'), (3, 'two')],\n                                        names=['foo', 'bar'])\n    >>> idx.set_levels([['a', 'b', 'c'], [1, 2]])\n    MultiIndex([('a', 1),\n                ('a', 2),\n                ('b', 1),\n                ('b', 2),\n                ('c', 1),\n                ('c', 2)],\n               names=['foo', 'bar'])\n    >>> idx.set_levels(['a', 'b', 'c'], level=0)\n    MultiIndex([('a', 'one'),\n                ('a', 'two'),\n                ('b', 'one'),\n                ('b', 'two'),\n                ('c', 'one'),\n                ('c', 'two')],\n               names=['foo', 'bar'])\n    >>> idx.set_levels(['a', 'b'], level='bar')\n    MultiIndex([(1, 'a'),\n                (1, 'b'),\n                (2, 'a'),\n                (2, 'b'),\n                (3, 'a'),\n                (3, 'b')],\n               names=['foo', 'bar'])\n\n    If any of the levels passed to ``set_levels()`` exceeds the\n    existing length, all of the values from that argument will\n    be stored in the MultiIndex levels, though the values will\n    be truncated in the MultiIndex output.\n\n    >>> idx.set_levels([['a', 'b', 'c'], [1, 2, 3, 4]], level=[0, 1])\n    MultiIndex([('a', 1),\n                ('a', 2),\n                ('b', 1),\n                ('b', 2)],\n               names=['foo', 'bar'])\n    >>> idx.set_levels([['a', 'b', 'c'], [1, 2, 3, 4]], level=[0, 1]).levels\n    FrozenList([['a', 'b', 'c'], [1, 2, 3, 4]])\n    \"\"\"\n    if is_list_like(levels) and not isinstance(levels, Index):\n        levels = list(levels)\n\n    if level is not None and not is_list_like(level):\n        if not is_list_like(levels):\n            raise TypeError(\"Levels must be list-like\")\n        if is_list_like(levels[0]):\n            raise TypeError(\"Levels must be list-like\")\n        level = [level]\n        levels = [levels]\n    elif level is None or is_list_like(level):\n        if not is_list_like(levels) or not is_list_like(levels[0]):\n            raise TypeError(\"Levels must be list of lists-like\")\n\n    if inplace:\n        idx = self\n    else:\n        idx = self._shallow_copy()\n    idx._reset_identity()\n    idx._set_levels(\n        levels, level=level, validate=True, verify_integrity=verify_integrity\n    )\n    if not inplace:\n        return idx",
                "@property\ndef codes(self):\n    return self._codes",
                "def _set_codes(\n    self, codes, level=None, copy=False, validate=True, verify_integrity=False\n):\n    if validate:\n        if level is None and len(codes) != self.nlevels:\n            raise ValueError(\"Length of codes must match number of levels\")\n        if level is not None and len(codes) != len(level):\n            raise ValueError(\"Length of codes must match length of levels.\")\n\n    if level is None:\n        new_codes = FrozenList(\n            _coerce_indexer_frozen(level_codes, lev, copy=copy).view()\n            for lev, level_codes in zip(self._levels, codes)\n        )\n    else:\n        level_numbers = [self._get_level_number(lev) for lev in level]\n        new_codes = list(self._codes)\n        for lev_num, level_codes in zip(level_numbers, codes):\n            lev = self.levels[lev_num]\n            new_codes[lev_num] = _coerce_indexer_frozen(level_codes, lev, copy=copy)\n        new_codes = FrozenList(new_codes)\n\n    if verify_integrity:\n        new_codes = self._verify_integrity(codes=new_codes)\n\n    self._codes = new_codes\n\n    self._tuples = None\n    self._reset_cache()",
                "def set_codes(self, codes, level=None, inplace=False, verify_integrity=True):\n    \"\"\"\n    Set new codes on MultiIndex. Defaults to returning\n    new index.\n\n    .. versionadded:: 0.24.0\n\n       New name for deprecated method `set_labels`.\n\n    Parameters\n    ----------\n    codes : sequence or list of sequence\n        New codes to apply.\n    level : int, level name, or sequence of int/level names (default None)\n        Level(s) to set (None for all levels).\n    inplace : bool\n        If True, mutates in place.\n    verify_integrity : bool (default True)\n        If True, checks that levels and codes are compatible.\n\n    Returns\n    -------\n    new index (of same type and class...etc)\n\n    Examples\n    --------\n    >>> idx = pd.MultiIndex.from_tuples([(1, 'one'),\n                                         (1, 'two'),\n                                         (2, 'one'),\n                                         (2, 'two')],\n                                        names=['foo', 'bar'])\n    >>> idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\n    MultiIndex([(2, 'one'),\n                (1, 'one'),\n                (2, 'two'),\n                (1, 'two')],\n               names=['foo', 'bar'])\n    >>> idx.set_codes([1, 0, 1, 0], level=0)\n    MultiIndex([(2, 'one'),\n                (1, 'two'),\n                (2, 'one'),\n                (1, 'two')],\n               names=['foo', 'bar'])\n    >>> idx.set_codes([0, 0, 1, 1], level='bar')\n    MultiIndex([(1, 'one'),\n                (1, 'one'),\n                (2, 'two'),\n                (2, 'two')],\n               names=['foo', 'bar'])\n    >>> idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]], level=[0, 1])\n    MultiIndex([(2, 'one'),\n                (1, 'one'),\n                (2, 'two'),\n                (1, 'two')],\n               names=['foo', 'bar'])\n    \"\"\"\n    if level is not None and not is_list_like(level):\n        if not is_list_like(codes):\n            raise TypeError(\"Codes must be list-like\")\n        if is_list_like(codes[0]):\n            raise TypeError(\"Codes must be list-like\")\n        level = [level]\n        codes = [codes]\n    elif level is None or is_list_like(level):\n        if not is_list_like(codes) or not is_list_like(codes[0]):\n            raise TypeError(\"Codes must be list of lists-like\")\n\n    if inplace:\n        idx = self\n    else:\n        idx = self._shallow_copy()\n    idx._reset_identity()\n    idx._set_codes(codes, level=level, verify_integrity=verify_integrity)\n    if not inplace:\n        return idx",
                "def copy(\n    self,\n    names=None,\n    dtype=None,\n    levels=None,\n    codes=None,\n    deep=False,\n    _set_identity=False,\n    **kwargs,\n):\n    \"\"\"\n    Make a copy of this object. Names, dtype, levels and codes can be\n    passed and will be set on new copy.\n\n    Parameters\n    ----------\n    names : sequence, optional\n    dtype : numpy dtype or pandas type, optional\n    levels : sequence, optional\n    codes : sequence, optional\n\n    Returns\n    -------\n    copy : MultiIndex\n\n    Notes\n    -----\n    In most cases, there should be no functional difference from using\n    ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n    This could be potentially expensive on large MultiIndex objects.\n    \"\"\"\n    name = kwargs.get(\"name\")\n    names = self._validate_names(name=name, names=names, deep=deep)\n    if \"labels\" in kwargs:\n        raise TypeError(\"'labels' argument has been removed; use 'codes' instead\")\n    if deep:\n        from copy import deepcopy\n\n        if levels is None:\n            levels = deepcopy(self.levels)\n        if codes is None:\n            codes = deepcopy(self.codes)\n    else:\n        if levels is None:\n            levels = self.levels\n        if codes is None:\n            codes = self.codes\n    return MultiIndex(\n        levels=levels,\n        codes=codes,\n        names=names,\n        sortorder=self.sortorder,\n        verify_integrity=False,\n        _set_identity=_set_identity,\n    )",
                "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\" the array interface, return my values \"\"\"\n    return self.values",
                "def view(self, cls=None):\n    \"\"\" this is defined as a copy with the same identity \"\"\"\n    result = self.copy()\n    result._id = self._id\n    return result",
                "def _shallow_copy_with_infer(self, values, **kwargs):\n    # On equal MultiIndexes the difference is empty.\n    # Therefore, an empty MultiIndex is returned GH13490\n    if len(values) == 0:\n        return MultiIndex(\n            levels=[[] for _ in range(self.nlevels)],\n            codes=[[] for _ in range(self.nlevels)],\n            **kwargs,\n        )\n    return self._shallow_copy(values, **kwargs)",
                "@Appender(_index_shared_docs[\"contains\"] % _index_doc_kwargs)\ndef __contains__(self, key: Any) -> bool:\n    hash(key)\n    try:\n        self.get_loc(key)\n        return True\n    except (LookupError, TypeError, ValueError):\n        return False",
                "@Appender(_index_shared_docs[\"_shallow_copy\"])\ndef _shallow_copy(self, values=None, **kwargs):\n    if values is not None:\n        names = kwargs.pop(\"names\", kwargs.pop(\"name\", self.names))\n        # discards freq\n        kwargs.pop(\"freq\", None)\n        return MultiIndex.from_tuples(values, names=names, **kwargs)\n    return self.copy(**kwargs)",
                "@cache_readonly\ndef dtype(self) -> np.dtype:\n    return np.dtype(\"O\")",
                "def _is_memory_usage_qualified(self) -> bool:\n    \"\"\" return a boolean if we need a qualified .info display \"\"\"\n\n    def f(l):\n        return \"mixed\" in l or \"string\" in l or \"unicode\" in l\n\n    return any(f(l) for l in self._inferred_type_levels)",
                "@Appender(Index.memory_usage.__doc__)\ndef memory_usage(self, deep: bool = False) -> int:\n    # we are overwriting our base class to avoid\n    # computing .values here which could materialize\n    # a tuple representation unnecessarily\n    return self._nbytes(deep)",
                "@cache_readonly\ndef nbytes(self) -> int:\n    \"\"\" return the number of bytes in the underlying data \"\"\"\n    return self._nbytes(False)",
                "def _nbytes(self, deep: bool = False) -> int:\n    \"\"\"\n    return the number of bytes in the underlying data\n    deeply introspect the level data if deep=True\n\n    include the engine hashtable\n\n    *this is in internal routine*\n\n    \"\"\"\n\n    # for implementations with no useful getsizeof (PyPy)\n    objsize = 24\n\n    level_nbytes = sum(i.memory_usage(deep=deep) for i in self.levels)\n    label_nbytes = sum(i.nbytes for i in self.codes)\n    names_nbytes = sum(getsizeof(i, objsize) for i in self.names)\n    result = level_nbytes + label_nbytes + names_nbytes\n\n    # include our engine hashtable\n    result += self._engine.sizeof(deep=deep)\n    return result",
                "def _formatter_func(self, tup):\n    \"\"\"\n    Formats each item in tup according to its level's formatter function.\n    \"\"\"\n    formatter_funcs = [level._formatter_func for level in self.levels]\n    return tuple(func(val) for func, val in zip(formatter_funcs, tup))",
                "def _format_data(self, name=None):\n    \"\"\"\n    Return the formatted data as a unicode string\n    \"\"\"\n    return format_object_summary(\n        self, self._formatter_func, name=name, line_break_each_value=True\n    )",
                "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value).\n    \"\"\"\n    return format_object_attrs(self, include_dtype=False)",
                "def _format_native_types(self, na_rep=\"nan\", **kwargs):\n    new_levels = []\n    new_codes = []\n\n    # go through the levels and format them\n    for level, level_codes in zip(self.levels, self.codes):\n        level = level._format_native_types(na_rep=na_rep, **kwargs)\n        # add nan values, if there are any\n        mask = level_codes == -1\n        if mask.any():\n            nan_index = len(level)\n            level = np.append(level, na_rep)\n            assert not level_codes.flags.writeable  # i.e. copy is needed\n            level_codes = level_codes.copy()  # make writeable\n            level_codes[mask] = nan_index\n        new_levels.append(level)\n        new_codes.append(level_codes)\n\n    if len(new_levels) == 1:\n        # a single-level multi-index\n        return Index(new_levels[0].take(new_codes[0]))._format_native_types()\n    else:\n        # reconstruct the multi-index\n        mi = MultiIndex(\n            levels=new_levels,\n            codes=new_codes,\n            names=self.names,\n            sortorder=self.sortorder,\n            verify_integrity=False,\n        )\n        return mi.values",
                "def format(\n    self,\n    space=2,\n    sparsify=None,\n    adjoin=True,\n    names=False,\n    na_rep=None,\n    formatter=None,\n):\n    if len(self) == 0:\n        return []\n\n    stringified_levels = []\n    for lev, level_codes in zip(self.levels, self.codes):\n        na = na_rep if na_rep is not None else _get_na_rep(lev.dtype.type)\n\n        if len(lev) > 0:\n\n            formatted = lev.take(level_codes).format(formatter=formatter)\n\n            # we have some NA\n            mask = level_codes == -1\n            if mask.any():\n                formatted = np.array(formatted, dtype=object)\n                formatted[mask] = na\n                formatted = formatted.tolist()\n\n        else:\n            # weird all NA case\n            formatted = [\n                pprint_thing(na if isna(x) else x, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                for x in algos.take_1d(lev._values, level_codes)\n            ]\n        stringified_levels.append(formatted)\n\n    result_levels = []\n    for lev, name in zip(stringified_levels, self.names):\n        level = []\n\n        if names:\n            level.append(\n                pprint_thing(name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                if name is not None\n                else \"\"\n            )\n\n        level.extend(np.array(lev, dtype=object))\n        result_levels.append(level)\n\n    if sparsify is None:\n        sparsify = get_option(\"display.multi_sparse\")\n\n    if sparsify:\n        sentinel = \"\"\n        # GH3547\n        # use value of sparsify as sentinel,  unless it's an obvious\n        # \"Truthy\" value\n        if sparsify not in [True, 1]:\n            sentinel = sparsify\n        # little bit of a kludge job for #1217\n        result_levels = _sparsify(\n            result_levels, start=int(names), sentinel=sentinel\n        )\n\n    if adjoin:\n        from pandas.io.formats.format import _get_adjustment\n\n        adj = _get_adjustment()\n        return adj.adjoin(space, *result_levels).split(\"\\n\")\n    else:\n        return result_levels",
                "def __len__(self) -> int:\n    return len(self.codes[0])",
                "def _get_names(self):\n    return FrozenList(self._names)",
                "def _set_names(self, names, level=None, validate=True):\n    \"\"\"\n    Set new names on index. Each name has to be a hashable type.\n\n    Parameters\n    ----------\n    values : str or sequence\n        name(s) to set\n    level : int, level name, or sequence of int/level names (default None)\n        If the index is a MultiIndex (hierarchical), level(s) to set (None\n        for all levels).  Otherwise level must be None\n    validate : boolean, default True\n        validate that the names match level lengths\n\n    Raises\n    ------\n    TypeError if each name is not hashable.\n\n    Notes\n    -----\n    sets names on levels. WARNING: mutates!\n\n    Note that you generally want to set this *after* changing levels, so\n    that it only acts on copies\n    \"\"\"\n    # GH 15110\n    # Don't allow a single string for names in a MultiIndex\n    if names is not None and not is_list_like(names):\n        raise ValueError(\"Names should be list-like for a MultiIndex\")\n    names = list(names)\n\n    if validate:\n        if level is not None and len(names) != len(level):\n            raise ValueError(\"Length of names must match length of level.\")\n        if level is None and len(names) != self.nlevels:\n            raise ValueError(\n                \"Length of names must match number of levels in MultiIndex.\"\n            )\n\n    if level is None:\n        level = range(self.nlevels)\n    else:\n        level = [self._get_level_number(lev) for lev in level]\n\n    # set the name\n    for lev, name in zip(level, names):\n        if name is not None:\n            # GH 20527\n            # All items in 'names' need to be hashable:\n            if not is_hashable(name):\n                raise TypeError(\n                    f\"{type(self).__name__}.name must be a hashable type\"\n                )\n        self._names[lev] = name",
                "@Appender(_index_shared_docs[\"_get_grouper_for_level\"])\ndef _get_grouper_for_level(self, mapper, level):\n    indexer = self.codes[level]\n    level_index = self.levels[level]\n\n    if mapper is not None:\n        # Handle group mapping function and return\n        level_values = self.levels[level].take(indexer)\n        grouper = level_values.map(mapper)\n        return grouper, None, None\n\n    codes, uniques = algos.factorize(indexer, sort=True)\n\n    if len(uniques) > 0 and uniques[0] == -1:\n        # Handle NAs\n        mask = indexer != -1\n        ok_codes, uniques = algos.factorize(indexer[mask], sort=True)\n\n        codes = np.empty(len(indexer), dtype=indexer.dtype)\n        codes[mask] = ok_codes\n        codes[~mask] = -1\n\n    if len(uniques) < len(level_index):\n        # Remove unobserved levels from level_index\n        level_index = level_index.take(uniques)\n\n    if len(level_index):\n        grouper = level_index.take(codes)\n    else:\n        grouper = level_index.take(codes, fill_value=True)\n\n    return grouper, codes, level_index",
                "@property\ndef _constructor(self):\n    return MultiIndex.from_tuples",
                "@cache_readonly\ndef inferred_type(self) -> str:\n    return \"mixed\"",
                "def _get_level_number(self, level) -> int:\n    count = self.names.count(level)\n    if (count > 1) and not is_integer(level):\n        raise ValueError(\n            f\"The name {level} occurs multiple times, use a level number\"\n        )\n    try:\n        level = self.names.index(level)\n    except ValueError:\n        if not is_integer(level):\n            raise KeyError(f\"Level {level} not found\")\n        elif level < 0:\n            level += self.nlevels\n            if level < 0:\n                orig_level = level - self.nlevels\n                raise IndexError(\n                    f\"Too many levels: Index has only {self.nlevels} levels, \"\n                    f\"{orig_level} is not a valid level number\"\n                )\n        # Note: levels are zero-based\n        elif level >= self.nlevels:\n            raise IndexError(\n                f\"Too many levels: Index has only {self.nlevels} levels, \"\n                f\"not {level + 1}\"\n            )\n    return level",
                "@cache_readonly\ndef _engine(self):\n    # Calculate the number of bits needed to represent labels in each\n    # level, as log2 of their sizes (including -1 for NaN):\n    sizes = np.ceil(np.log2([len(l) + 1 for l in self.levels]))\n\n    # Sum bit counts, starting from the _right_....\n    lev_bits = np.cumsum(sizes[::-1])[::-1]\n\n    # ... in order to obtain offsets such that sorting the combination of\n    # shifted codes (one for each level, resulting in a unique integer) is\n    # equivalent to sorting lexicographically the codes themselves. Notice\n    # that each level needs to be shifted by the number of bits needed to\n    # represent the _previous_ ones:\n    offsets = np.concatenate([lev_bits[1:], [0]]).astype(\"uint64\")\n\n    # Check the total number of bits needed for our representation:\n    if lev_bits[0] > 64:\n        # The levels would overflow a 64 bit uint - use Python integers:\n        return MultiIndexPyIntEngine(self.levels, self.codes, offsets)\n    return MultiIndexUIntEngine(self.levels, self.codes, offsets)",
                "@property\ndef values(self):\n    if self._tuples is not None:\n        return self._tuples\n\n    values = []\n\n    for i in range(self.nlevels):\n        vals = self._get_level_values(i)\n        if is_categorical_dtype(vals):\n            vals = vals._internal_get_values()\n        if isinstance(vals.dtype, ExtensionDtype) or hasattr(vals, \"_box_values\"):\n            vals = vals.astype(object)\n        vals = np.array(vals, copy=False)\n        values.append(vals)\n\n    self._tuples = lib.fast_zip(values)\n    return self._tuples",
                "@cache_readonly\ndef is_monotonic_increasing(self) -> bool:\n    \"\"\"\n    return if the index is monotonic increasing (only equal or\n    increasing) values.\n    \"\"\"\n\n    if all(x.is_monotonic for x in self.levels):\n        # If each level is sorted, we can operate on the codes directly. GH27495\n        return libalgos.is_lexsorted(\n            [x.astype(\"int64\", copy=False) for x in self.codes]\n        )\n\n    # reversed() because lexsort() wants the most significant key last.\n    values = [\n        self._get_level_values(i).values for i in reversed(range(len(self.levels)))\n    ]\n    try:\n        sort_order = np.lexsort(values)\n        return Index(sort_order).is_monotonic\n    except TypeError:\n\n        # we have mixed types and np.lexsort is not happy\n        return Index(self.values).is_monotonic",
                "@cache_readonly\ndef is_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    return if the index is monotonic decreasing (only equal or\n    decreasing) values.\n    \"\"\"\n    # monotonic decreasing if and only if reverse is monotonic increasing\n    return self[::-1].is_monotonic_increasing",
                "@cache_readonly\ndef _have_mixed_levels(self):\n    \"\"\" return a boolean list indicated if we have mixed levels \"\"\"\n    return [\"mixed\" in l for l in self._inferred_type_levels]",
                "@cache_readonly\ndef _inferred_type_levels(self):\n    \"\"\" return a list of the inferred types, one for each level \"\"\"\n    return [i.inferred_type for i in self.levels]",
                "@cache_readonly\ndef _hashed_values(self):\n    \"\"\" return a uint64 ndarray of my hashed values \"\"\"\n    return hash_tuples(self)",
                "def _hashed_indexing_key(self, key):\n    \"\"\"\n    validate and return the hash for the provided key\n\n    *this is internal for use for the cython routines*\n\n    Parameters\n    ----------\n    key : string or tuple\n\n    Returns\n    -------\n    np.uint64\n\n    Notes\n    -----\n    we need to stringify if we have mixed levels\n    \"\"\"\n\n    if not isinstance(key, tuple):\n        return hash_tuples(key)\n\n    if not len(key) == self.nlevels:\n        raise KeyError\n\n    def f(k, stringify):\n        if stringify and not isinstance(k, str):\n            k = str(k)\n        return k\n\n    key = tuple(\n        f(k, stringify) for k, stringify in zip(key, self._have_mixed_levels)\n    )\n    return hash_tuple(key)",
                "@Appender(Index.duplicated.__doc__)\ndef duplicated(self, keep=\"first\"):\n    shape = map(len, self.levels)\n    ids = get_group_index(self.codes, shape, sort=False, xnull=False)\n\n    return duplicated_int64(ids, keep)",
                "def fillna(self, value=None, downcast=None):\n    \"\"\"\n    fillna is not implemented for MultiIndex\n    \"\"\"\n    raise NotImplementedError(\"isna is not defined for MultiIndex\")",
                "@Appender(_index_shared_docs[\"dropna\"])\ndef dropna(self, how=\"any\"):\n    nans = [level_codes == -1 for level_codes in self.codes]\n    if how == \"any\":\n        indexer = np.any(nans, axis=0)\n    elif how == \"all\":\n        indexer = np.all(nans, axis=0)\n    else:\n        raise ValueError(f\"invalid how option: {how}\")\n\n    new_codes = [level_codes[~indexer] for level_codes in self.codes]\n    return self.copy(codes=new_codes, deep=True)",
                "def get_value(self, series, key):\n    # Label-based\n    s = com.values_from_object(series)\n    k = com.values_from_object(key)\n\n    def _try_mi(k):\n        # TODO: what if a level contains tuples??\n        loc = self.get_loc(k)\n        new_values = series._values[loc]\n        new_index = self[loc]\n        new_index = maybe_droplevels(new_index, k)\n        return series._constructor(\n            new_values, index=new_index, name=series.name\n        ).__finalize__(self)\n\n    try:\n        return self._engine.get_value(s, k)\n    except KeyError as e1:\n        try:\n            return _try_mi(key)\n        except KeyError:\n            pass\n\n        try:\n            return libindex.get_value_at(s, k)\n        except IndexError:\n            raise\n        except TypeError:\n            # generator/iterator-like\n            if is_iterator(key):\n                raise InvalidIndexError(key)\n            else:\n                raise e1\n        except Exception:  # pragma: no cover\n            raise e1\n    except TypeError:\n\n        # a Timestamp will raise a TypeError in a multi-index\n        # rather than a KeyError, try it here\n        # note that a string that 'looks' like a Timestamp will raise\n        # a KeyError! (GH5725)\n        if isinstance(key, (datetime.datetime, np.datetime64, str)):\n            try:\n                return _try_mi(key)\n            except KeyError:\n                raise\n            except (IndexError, ValueError, TypeError):\n                pass\n\n            try:\n                return _try_mi(Timestamp(key))\n            except (\n                KeyError,\n                TypeError,\n                IndexError,\n                ValueError,\n                tslibs.OutOfBoundsDatetime,\n            ):\n                pass\n\n        raise InvalidIndexError(key)",
                "def _get_level_values(self, level, unique=False):\n    \"\"\"\n    Return vector of label values for requested level,\n    equal to the length of the index\n\n    **this is an internal method**\n\n    Parameters\n    ----------\n    level : int level\n    unique : bool, default False\n        if True, drop duplicated values\n\n    Returns\n    -------\n    values : ndarray\n    \"\"\"\n\n    lev = self.levels[level]\n    level_codes = self.codes[level]\n    name = self._names[level]\n    if unique:\n        level_codes = algos.unique(level_codes)\n    filled = algos.take_1d(lev._values, level_codes, fill_value=lev._na_value)\n    return lev._shallow_copy(filled, name=name)",
                "def get_level_values(self, level):\n    \"\"\"\n    Return vector of label values for requested level,\n    equal to the length of the index.\n\n    Parameters\n    ----------\n    level : int or str\n        ``level`` is either the integer position of the level in the\n        MultiIndex, or the name of the level.\n\n    Returns\n    -------\n    values : Index\n        Values is a level of this MultiIndex converted to\n        a single :class:`Index` (or subclass thereof).\n\n    Examples\n    --------\n\n    Create a MultiIndex:\n\n    >>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\n    >>> mi.names = ['level_1', 'level_2']\n\n    Get level values by supplying level as either integer or name:\n\n    >>> mi.get_level_values(0)\n    Index(['a', 'b', 'c'], dtype='object', name='level_1')\n    >>> mi.get_level_values('level_2')\n    Index(['d', 'e', 'f'], dtype='object', name='level_2')\n    \"\"\"\n    level = self._get_level_number(level)\n    values = self._get_level_values(level)\n    return values",
                "@Appender(_index_shared_docs[\"index_unique\"] % _index_doc_kwargs)\ndef unique(self, level=None):\n\n    if level is None:\n        return super().unique()\n    else:\n        level = self._get_level_number(level)\n        return self._get_level_values(level=level, unique=True)",
                "def _to_safe_for_reshape(self):\n    \"\"\" convert to object if we are a categorical \"\"\"\n    return self.set_levels([i._to_safe_for_reshape() for i in self.levels])",
                "def to_frame(self, index=True, name=None):\n    \"\"\"\n    Create a DataFrame with the levels of the MultiIndex as columns.\n\n    Column ordering is determined by the DataFrame constructor with data as\n    a dict.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    index : bool, default True\n        Set the index of the returned DataFrame as the original MultiIndex.\n\n    name : list / sequence of strings, optional\n        The passed names should substitute index level names.\n\n    Returns\n    -------\n    DataFrame : a DataFrame containing the original MultiIndex data.\n\n    See Also\n    --------\n    DataFrame\n    \"\"\"\n\n    from pandas import DataFrame\n\n    if name is not None:\n        if not is_list_like(name):\n            raise TypeError(\"'name' must be a list / sequence of column names.\")\n\n        if len(name) != len(self.levels):\n            raise ValueError(\n                \"'name' should have same length as number of levels on index.\"\n            )\n        idx_names = name\n    else:\n        idx_names = self.names\n\n    # Guarantee resulting column order - PY36+ dict maintains insertion order\n    result = DataFrame(\n        {\n            (level if lvlname is None else lvlname): self._get_level_values(level)\n            for lvlname, level in zip(idx_names, range(len(self.levels)))\n        },\n        copy=False,\n    )\n\n    if index:\n        result.index = self\n    return result",
                "def to_flat_index(self):\n    \"\"\"\n    Convert a MultiIndex to an Index of Tuples containing the level values.\n\n    .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    pd.Index\n        Index with the MultiIndex data represented in Tuples.\n\n    Notes\n    -----\n    This method will simply return the caller if called by anything other\n    than a MultiIndex.\n\n    Examples\n    --------\n    >>> index = pd.MultiIndex.from_product(\n    ...     [['foo', 'bar'], ['baz', 'qux']],\n    ...     names=['a', 'b'])\n    >>> index.to_flat_index()\n    Index([('foo', 'baz'), ('foo', 'qux'),\n           ('bar', 'baz'), ('bar', 'qux')],\n          dtype='object')\n    \"\"\"\n    return Index(self.values, tupleize_cols=False)",
                "@property\ndef is_all_dates(self) -> bool:\n    return False",
                "def is_lexsorted(self) -> bool:\n    \"\"\"\n    Return True if the codes are lexicographically sorted.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self.lexsort_depth == self.nlevels",
                "@cache_readonly\ndef lexsort_depth(self):\n    if self.sortorder is not None:\n        return self.sortorder\n\n    return self._lexsort_depth()",
                "def _lexsort_depth(self) -> int:\n    \"\"\"\n    Compute and return the lexsort_depth, the number of levels of the\n    MultiIndex that are sorted lexically\n\n    Returns\n    ------\n    int\n    \"\"\"\n    int64_codes = [ensure_int64(level_codes) for level_codes in self.codes]\n    for k in range(self.nlevels, 0, -1):\n        if libalgos.is_lexsorted(int64_codes[:k]):\n            return k\n    return 0",
                "def _sort_levels_monotonic(self):\n    \"\"\"\n    This is an *internal* function.\n\n    Create a new MultiIndex from the current to monotonically sorted\n    items IN the levels. This does not actually make the entire MultiIndex\n    monotonic, JUST the levels.\n\n    The resulting MultiIndex will have the same outward\n    appearance, meaning the same .values and ordering. It will also\n    be .equals() to the original.\n\n    Returns\n    -------\n    MultiIndex\n\n    Examples\n    --------\n\n    >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n    ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n    >>> mi\n    MultiIndex([('a', 'bb'),\n                ('a', 'aa'),\n                ('b', 'bb'),\n                ('b', 'aa')],\n               )\n\n    >>> mi.sort_values()\n    MultiIndex([('a', 'aa'),\n                ('a', 'bb'),\n                ('b', 'aa'),\n                ('b', 'bb')],\n               )\n    \"\"\"\n\n    if self.is_lexsorted() and self.is_monotonic:\n        return self\n\n    new_levels = []\n    new_codes = []\n\n    for lev, level_codes in zip(self.levels, self.codes):\n\n        if not lev.is_monotonic:\n            try:\n                # indexer to reorder the levels\n                indexer = lev.argsort()\n            except TypeError:\n                pass\n            else:\n                lev = lev.take(indexer)\n\n                # indexer to reorder the level codes\n                indexer = ensure_int64(indexer)\n                ri = lib.get_reverse_indexer(indexer, len(indexer))\n                level_codes = algos.take_1d(ri, level_codes)\n\n        new_levels.append(lev)\n        new_codes.append(level_codes)\n\n    return MultiIndex(\n        new_levels,\n        new_codes,\n        names=self.names,\n        sortorder=self.sortorder,\n        verify_integrity=False,\n    )",
                "def remove_unused_levels(self):\n    \"\"\"\n    Create a new MultiIndex from the current that removes\n    unused levels, meaning that they are not expressed in the labels.\n\n    The resulting MultiIndex will have the same outward\n    appearance, meaning the same .values and ordering. It will also\n    be .equals() to the original.\n\n    Returns\n    -------\n    MultiIndex\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_product([range(2), list('ab')])\n    >>> mi\n    MultiIndex([(0, 'a'),\n                (0, 'b'),\n                (1, 'a'),\n                (1, 'b')],\n               )\n\n    >>> mi[2:]\n    MultiIndex([(1, 'a'),\n                (1, 'b')],\n               )\n\n    The 0 from the first level is not represented\n    and can be removed\n\n    >>> mi2 = mi[2:].remove_unused_levels()\n    >>> mi2.levels\n    FrozenList([[1], ['a', 'b']])\n    \"\"\"\n\n    new_levels = []\n    new_codes = []\n\n    changed = False\n    for lev, level_codes in zip(self.levels, self.codes):\n\n        # Since few levels are typically unused, bincount() is more\n        # efficient than unique() - however it only accepts positive values\n        # (and drops order):\n        uniques = np.where(np.bincount(level_codes + 1) > 0)[0] - 1\n        has_na = int(len(uniques) and (uniques[0] == -1))\n\n        if len(uniques) != len(lev) + has_na:\n            # We have unused levels\n            changed = True\n\n            # Recalculate uniques, now preserving order.\n            # Can easily be cythonized by exploiting the already existing\n            # \"uniques\" and stop parsing \"level_codes\" when all items\n            # are found:\n            uniques = algos.unique(level_codes)\n            if has_na:\n                na_idx = np.where(uniques == -1)[0]\n                # Just ensure that -1 is in first position:\n                uniques[[0, na_idx[0]]] = uniques[[na_idx[0], 0]]\n\n            # codes get mapped from uniques to 0:len(uniques)\n            # -1 (if present) is mapped to last position\n            code_mapping = np.zeros(len(lev) + has_na)\n            # ... and reassigned value -1:\n            code_mapping[uniques] = np.arange(len(uniques)) - has_na\n\n            level_codes = code_mapping[level_codes]\n\n            # new levels are simple\n            lev = lev.take(uniques[has_na:])\n\n        new_levels.append(lev)\n        new_codes.append(level_codes)\n\n    result = self.view()\n\n    if changed:\n        result._reset_identity()\n        result._set_levels(new_levels, validate=False)\n        result._set_codes(new_codes, validate=False)\n\n    return result",
                "@property\ndef nlevels(self) -> int:\n    \"\"\"\n    Integer number of levels in this MultiIndex.\n    \"\"\"\n    return len(self._levels)",
                "@property\ndef levshape(self):\n    \"\"\"\n    A tuple with the length of each level.\n    \"\"\"\n    return tuple(len(x) for x in self.levels)",
                "def __reduce__(self):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    d = dict(\n        levels=list(self.levels),\n        codes=list(self.codes),\n        sortorder=self.sortorder,\n        names=list(self.names),\n    )\n    return ibase._new_Index, (type(self), d), None",
                "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n\n    if isinstance(state, dict):\n        levels = state.get(\"levels\")\n        codes = state.get(\"codes\")\n        sortorder = state.get(\"sortorder\")\n        names = state.get(\"names\")\n\n    elif isinstance(state, tuple):\n\n        nd_state, own_state = state\n        levels, codes, sortorder, names = own_state\n\n    self._set_levels([Index(x) for x in levels], validate=False)\n    self._set_codes(codes)\n    new_codes = self._verify_integrity()\n    self._set_codes(new_codes)\n    self._set_names(names)\n    self.sortorder = sortorder\n    self._reset_identity()",
                "def __getitem__(self, key):\n    if is_scalar(key):\n        key = com.cast_scalar_indexer(key)\n\n        retval = []\n        for lev, level_codes in zip(self.levels, self.codes):\n            if level_codes[key] == -1:\n                retval.append(np.nan)\n            else:\n                retval.append(lev[level_codes[key]])\n\n        return tuple(retval)\n    else:\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n            sortorder = self.sortorder\n        else:\n            # cannot be sure whether the result will be sorted\n            sortorder = None\n\n            if isinstance(key, Index):\n                key = np.asarray(key)\n\n        new_codes = [level_codes[key] for level_codes in self.codes]\n\n        return MultiIndex(\n            levels=self.levels,\n            codes=new_codes,\n            names=self.names,\n            sortorder=sortorder,\n            verify_integrity=False,\n        )",
                "@Appender(_index_shared_docs[\"take\"] % _index_doc_kwargs)\ndef take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n    nv.validate_take(tuple(), kwargs)\n    indices = ensure_platform_int(indices)\n    taken = self._assert_take_fillable(\n        self.codes,\n        indices,\n        allow_fill=allow_fill,\n        fill_value=fill_value,\n        na_value=-1,\n    )\n    return MultiIndex(\n        levels=self.levels, codes=taken, names=self.names, verify_integrity=False\n    )",
                "def _assert_take_fillable(\n    self, values, indices, allow_fill=True, fill_value=None, na_value=None\n):\n    \"\"\" Internal method to handle NA filling of take \"\"\"\n    # only fill if we are passing a non-None fill_value\n    if allow_fill and fill_value is not None:\n        if (indices < -1).any():\n            msg = (\n                \"When allow_fill=True and fill_value is not None, \"\n                \"all indices must be >= -1\"\n            )\n            raise ValueError(msg)\n        taken = [lab.take(indices) for lab in self.codes]\n        mask = indices == -1\n        if mask.any():\n            masked = []\n            for new_label in taken:\n                label_values = new_label\n                label_values[mask] = na_value\n                masked.append(np.asarray(label_values))\n            taken = masked\n    else:\n        taken = [lab.take(indices) for lab in self.codes]\n    return taken",
                "def append(self, other):\n    \"\"\"\n    Append a collection of Index options together\n\n    Parameters\n    ----------\n    other : Index or list/tuple of indices\n\n    Returns\n    -------\n    appended : Index\n    \"\"\"\n    if not isinstance(other, (list, tuple)):\n        other = [other]\n\n    if all(\n        (isinstance(o, MultiIndex) and o.nlevels >= self.nlevels) for o in other\n    ):\n        arrays = []\n        for i in range(self.nlevels):\n            label = self._get_level_values(i)\n            appended = [o._get_level_values(i) for o in other]\n            arrays.append(label.append(appended))\n        return MultiIndex.from_arrays(arrays, names=self.names)\n\n    to_concat = (self.values,) + tuple(k._values for k in other)\n    new_tuples = np.concatenate(to_concat)\n\n    # if all(isinstance(x, MultiIndex) for x in other):\n    try:\n        return MultiIndex.from_tuples(new_tuples, names=self.names)\n    except (TypeError, IndexError):\n        return Index(new_tuples)",
                "def argsort(self, *args, **kwargs) -> np.ndarray:\n    return self.values.argsort(*args, **kwargs)",
                "@Appender(_index_shared_docs[\"repeat\"] % _index_doc_kwargs)\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    repeats = ensure_platform_int(repeats)\n    return MultiIndex(\n        levels=self.levels,\n        codes=[\n            level_codes.view(np.ndarray).astype(np.intp).repeat(repeats)\n            for level_codes in self.codes\n        ],\n        names=self.names,\n        sortorder=self.sortorder,\n        verify_integrity=False,\n    )",
                "def where(self, cond, other=None):\n    raise NotImplementedError(\".where is not supported for MultiIndex operations\")",
                "def drop(self, codes, level=None, errors=\"raise\"):\n    \"\"\"\n    Make new MultiIndex with passed list of codes deleted\n\n    Parameters\n    ----------\n    codes : array-like\n        Must be a list of tuples\n    level : int or level name, default None\n    errors : str, default 'raise'\n\n    Returns\n    -------\n    dropped : MultiIndex\n    \"\"\"\n    if level is not None:\n        return self._drop_from_level(codes, level, errors)\n\n    if not isinstance(codes, (np.ndarray, Index)):\n        try:\n            codes = com.index_labels_to_array(codes)\n        except ValueError:\n            pass\n\n    inds = []\n    for level_codes in codes:\n        try:\n            loc = self.get_loc(level_codes)\n            # get_loc returns either an integer, a slice, or a boolean\n            # mask\n            if isinstance(loc, int):\n                inds.append(loc)\n            elif isinstance(loc, slice):\n                inds.extend(range(loc.start, loc.stop))\n            elif com.is_bool_indexer(loc):\n                if self.lexsort_depth == 0:\n                    warnings.warn(\n                        \"dropping on a non-lexsorted multi-index \"\n                        \"without a level parameter may impact performance.\",\n                        PerformanceWarning,\n                        stacklevel=3,\n                    )\n                loc = loc.nonzero()[0]\n                inds.extend(loc)\n            else:\n                msg = f\"unsupported indexer of type {type(loc)}\"\n                raise AssertionError(msg)\n        except KeyError:\n            if errors != \"ignore\":\n                raise\n\n    return self.delete(inds)",
                "def _drop_from_level(self, codes, level, errors=\"raise\"):\n    codes = com.index_labels_to_array(codes)\n    i = self._get_level_number(level)\n    index = self.levels[i]\n    values = index.get_indexer(codes)\n\n    mask = ~algos.isin(self.codes[i], values)\n    if mask.all() and errors != \"ignore\":\n        raise KeyError(f\"labels {codes} not found in level\")\n\n    return self[mask]",
                "def swaplevel(self, i=-2, j=-1):\n    \"\"\"\n    Swap level i with level j.\n\n    Calling this method does not change the ordering of the values.\n\n    Parameters\n    ----------\n    i : int, str, default -2\n        First level of index to be swapped. Can pass level name as string.\n        Type of parameters can be mixed.\n    j : int, str, default -1\n        Second level of index to be swapped. Can pass level name as string.\n        Type of parameters can be mixed.\n\n    Returns\n    -------\n    MultiIndex\n        A new MultiIndex.\n\n    See Also\n    --------\n    Series.swaplevel : Swap levels i and j in a MultiIndex.\n    Dataframe.swaplevel : Swap levels i and j in a MultiIndex on a\n        particular axis.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n    ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n    >>> mi\n    MultiIndex([('a', 'bb'),\n                ('a', 'aa'),\n                ('b', 'bb'),\n                ('b', 'aa')],\n               )\n    >>> mi.swaplevel(0, 1)\n    MultiIndex([('bb', 'a'),\n                ('aa', 'a'),\n                ('bb', 'b'),\n                ('aa', 'b')],\n               )\n    \"\"\"\n    new_levels = list(self.levels)\n    new_codes = list(self.codes)\n    new_names = list(self.names)\n\n    i = self._get_level_number(i)\n    j = self._get_level_number(j)\n\n    new_levels[i], new_levels[j] = new_levels[j], new_levels[i]\n    new_codes[i], new_codes[j] = new_codes[j], new_codes[i]\n    new_names[i], new_names[j] = new_names[j], new_names[i]\n\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
                "def reorder_levels(self, order):\n    \"\"\"\n    Rearrange levels using input order. May not drop or duplicate levels.\n\n    Parameters\n    ----------\n\n    Returns\n    -------\n    MultiIndex\n    \"\"\"\n    order = [self._get_level_number(i) for i in order]\n    if len(order) != self.nlevels:\n        raise AssertionError(\n            f\"Length of order must be same as number of levels ({self.nlevels}), \"\n            f\"got {len(order)}\"\n        )\n    new_levels = [self.levels[i] for i in order]\n    new_codes = [self.codes[i] for i in order]\n    new_names = [self.names[i] for i in order]\n\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
                "def _get_codes_for_sorting(self):\n    \"\"\"\n    we categorizing our codes by using the\n    available categories (all, not just observed)\n    excluding any missing ones (-1); this is in preparation\n    for sorting, where we need to disambiguate that -1 is not\n    a valid valid\n    \"\"\"\n\n    def cats(level_codes):\n        return np.arange(\n            np.array(level_codes).max() + 1 if len(level_codes) else 0,\n            dtype=level_codes.dtype,\n        )\n\n    return [\n        Categorical.from_codes(level_codes, cats(level_codes), ordered=True)\n        for level_codes in self.codes\n    ]",
                "def sortlevel(self, level=0, ascending=True, sort_remaining=True):\n    \"\"\"\n    Sort MultiIndex at the requested level. The result will respect the\n    original ordering of the associated factor at that level.\n\n    Parameters\n    ----------\n    level : list-like, int or str, default 0\n        If a string is given, must be a name of the level.\n        If list-like must be names or ints of levels.\n    ascending : bool, default True\n        False to sort in descending order.\n        Can also be a list to specify a directed ordering.\n    sort_remaining : sort by the remaining levels after level\n\n    Returns\n    -------\n    sorted_index : pd.MultiIndex\n        Resulting index.\n    indexer : np.ndarray\n        Indices of output values in original index.\n    \"\"\"\n    if isinstance(level, (str, int)):\n        level = [level]\n    level = [self._get_level_number(lev) for lev in level]\n    sortorder = None\n\n    # we have a directed ordering via ascending\n    if isinstance(ascending, list):\n        if not len(level) == len(ascending):\n            raise ValueError(\"level must have same length as ascending\")\n\n        indexer = lexsort_indexer(\n            [self.codes[lev] for lev in level], orders=ascending\n        )\n\n    # level ordering\n    else:\n\n        codes = list(self.codes)\n        shape = list(self.levshape)\n\n        # partition codes and shape\n        primary = tuple(codes[lev] for lev in level)\n        primshp = tuple(shape[lev] for lev in level)\n\n        # Reverse sorted to retain the order of\n        # smaller indices that needs to be removed\n        for lev in sorted(level, reverse=True):\n            codes.pop(lev)\n            shape.pop(lev)\n\n        if sort_remaining:\n            primary += primary + tuple(codes)\n            primshp += primshp + tuple(shape)\n        else:\n            sortorder = level[0]\n\n        indexer = indexer_from_factorized(primary, primshp, compress=False)\n\n        if not ascending:\n            indexer = indexer[::-1]\n\n    indexer = ensure_platform_int(indexer)\n    new_codes = [level_codes.take(indexer) for level_codes in self.codes]\n\n    new_index = MultiIndex(\n        codes=new_codes,\n        levels=self.levels,\n        names=self.names,\n        sortorder=sortorder,\n        verify_integrity=False,\n    )\n\n    return new_index, indexer",
                "def _convert_listlike_indexer(self, keyarr, kind=None):\n    \"\"\"\n    Parameters\n    ----------\n    keyarr : list-like\n        Indexer to convert.\n\n    Returns\n    -------\n    tuple (indexer, keyarr)\n        indexer is an ndarray or None if cannot convert\n        keyarr are tuple-safe keys\n    \"\"\"\n    indexer, keyarr = super()._convert_listlike_indexer(keyarr, kind=kind)\n\n    # are we indexing a specific level\n    if indexer is None and len(keyarr) and not isinstance(keyarr[0], tuple):\n        level = 0\n        _, indexer = self.reindex(keyarr, level=level)\n\n        # take all\n        if indexer is None:\n            indexer = np.arange(len(self))\n\n        check = self.levels[0].get_indexer(keyarr)\n        mask = check == -1\n        if mask.any():\n            raise KeyError(f\"{keyarr[mask]} not in index\")\n\n    return indexer, keyarr",
                "@Appender(_index_shared_docs[\"get_indexer\"] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    method = missing.clean_reindex_fill_method(method)\n    target = ensure_index(target)\n\n    # empty indexer\n    if is_list_like(target) and not len(target):\n        return ensure_platform_int(np.array([]))\n\n    if not isinstance(target, MultiIndex):\n        try:\n            target = MultiIndex.from_tuples(target)\n        except (TypeError, ValueError):\n\n            # let's instead try with a straight Index\n            if method is None:\n                return Index(self.values).get_indexer(\n                    target, method=method, limit=limit, tolerance=tolerance\n                )\n\n    if not self.is_unique:\n        raise ValueError(\"Reindexing only valid with uniquely valued Index objects\")\n\n    if method == \"pad\" or method == \"backfill\":\n        if tolerance is not None:\n            raise NotImplementedError(\n                \"tolerance not implemented yet for MultiIndex\"\n            )\n        indexer = self._engine.get_indexer(target, method, limit)\n    elif method == \"nearest\":\n        raise NotImplementedError(\n            \"method='nearest' not implemented yet \"\n            \"for MultiIndex; see GitHub issue 9365\"\n        )\n    else:\n        indexer = self._engine.get_indexer(target)\n\n    return ensure_platform_int(indexer)",
                "@Appender(_index_shared_docs[\"get_indexer_non_unique\"] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    return super().get_indexer_non_unique(target)",
                "def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n    \"\"\"\n    Create index with target's values (move/add/delete values as necessary)\n\n    Returns\n    -------\n    new_index : pd.MultiIndex\n        Resulting index\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n\n    \"\"\"\n    # GH6552: preserve names when reindexing to non-named target\n    # (i.e. neither Index nor Series).\n    preserve_names = not hasattr(target, \"names\")\n\n    if level is not None:\n        if method is not None:\n            raise TypeError(\"Fill method not supported if level passed\")\n\n        # GH7774: preserve dtype/tz if target is empty and not an Index.\n        # target may be an iterator\n        target = ibase._ensure_has_len(target)\n        if len(target) == 0 and not isinstance(target, Index):\n            idx = self.levels[level]\n            attrs = idx._get_attributes_dict()\n            attrs.pop(\"freq\", None)  # don't preserve freq\n            target = type(idx)._simple_new(np.empty(0, dtype=idx.dtype), **attrs)\n        else:\n            target = ensure_index(target)\n        target, indexer, _ = self._join_level(\n            target, level, how=\"right\", return_indexers=True, keep_order=False\n        )\n    else:\n        target = ensure_index(target)\n        if self.equals(target):\n            indexer = None\n        else:\n            if self.is_unique:\n                indexer = self.get_indexer(\n                    target, method=method, limit=limit, tolerance=tolerance\n                )\n            else:\n                raise ValueError(\"cannot handle a non-unique multi-index!\")\n\n    if not isinstance(target, MultiIndex):\n        if indexer is None:\n            target = self\n        elif (indexer >= 0).all():\n            target = self.take(indexer)\n        else:\n            # hopefully?\n            target = MultiIndex.from_tuples(target)\n\n    if (\n        preserve_names\n        and target.nlevels == self.nlevels\n        and target.names != self.names\n    ):\n        target = target.copy(deep=False)\n        target.names = self.names\n\n    return target, indexer",
                "def get_slice_bound(\n    self, label: Union[Hashable, Sequence[Hashable]], side: str, kind: str\n) -> int:\n    \"\"\"\n    For an ordered MultiIndex, compute slice bound\n    that corresponds to given label.\n\n    Returns leftmost (one-past-the-rightmost if `side=='right') position\n    of given label.\n\n    Parameters\n    ----------\n    label : object or tuple of objects\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'}\n\n    Returns\n    -------\n    int\n        Index of label.\n\n    Notes\n    -----\n    This method only works if level 0 index of the MultiIndex is lexsorted.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abbc'), list('gefd')])\n\n    Get the locations from the leftmost 'b' in the first level\n    until the end of the multiindex:\n\n    >>> mi.get_slice_bound('b', side=\"left\", kind=\"loc\")\n    1\n\n    Like above, but if you get the locations from the rightmost\n    'b' in the first level and 'f' in the second level:\n\n    >>> mi.get_slice_bound(('b','f'), side=\"right\", kind=\"loc\")\n    3\n\n    See Also\n    --------\n    MultiIndex.get_loc : Get location for a label or a tuple of labels.\n    MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                          sequence of such.\n    \"\"\"\n\n    if not isinstance(label, tuple):\n        label = (label,)\n    return self._partial_tup_index(label, side=side)",
                "def slice_locs(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    For an ordered MultiIndex, compute the slice locations for input\n    labels.\n\n    The input labels can be tuples representing partial levels, e.g. for a\n    MultiIndex with 3 levels, you can pass a single value (corresponding to\n    the first level), or a 1-, 2-, or 3-tuple.\n\n    Parameters\n    ----------\n    start : label or tuple, default None\n        If None, defaults to the beginning\n    end : label or tuple\n        If None, defaults to the end\n    step : int or None\n        Slice step\n    kind : string, optional, defaults None\n\n    Returns\n    -------\n    (start, end) : (int, int)\n\n    Notes\n    -----\n    This method only works if the MultiIndex is properly lexsorted. So,\n    if only the first 2 levels of a 3-level MultiIndex are lexsorted,\n    you can only pass two levels to ``.slice_locs``.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abbd'), list('deff')],\n    ...                                names=['A', 'B'])\n\n    Get the slice locations from the beginning of 'b' in the first level\n    until the end of the multiindex:\n\n    >>> mi.slice_locs(start='b')\n    (1, 4)\n\n    Like above, but stop at the end of 'b' in the first level and 'f' in\n    the second level:\n\n    >>> mi.slice_locs(start='b', end=('b', 'f'))\n    (1, 3)\n\n    See Also\n    --------\n    MultiIndex.get_loc : Get location for a label or a tuple of labels.\n    MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                          sequence of such.\n    \"\"\"\n    # This function adds nothing to its parent implementation (the magic\n    # happens in get_slice_bound method), but it adds meaningful doc.\n    return super().slice_locs(start, end, step, kind=kind)",
                "def _partial_tup_index(self, tup, side=\"left\"):\n    if len(tup) > self.lexsort_depth:\n        raise UnsortedIndexError(\n            f\"Key length ({len(tup)}) was greater than MultiIndex lexsort depth \"\n            f\"({self.lexsort_depth})\"\n        )\n\n    n = len(tup)\n    start, end = 0, len(self)\n    zipped = zip(tup, self.levels, self.codes)\n    for k, (lab, lev, labs) in enumerate(zipped):\n        section = labs[start:end]\n\n        if lab not in lev and not isna(lab):\n            if not lev.is_type_compatible(lib.infer_dtype([lab], skipna=False)):\n                raise TypeError(f\"Level type mismatch: {lab}\")\n\n            # short circuit\n            loc = lev.searchsorted(lab, side=side)\n            if side == \"right\" and loc >= 0:\n                loc -= 1\n            return start + section.searchsorted(loc, side=side)\n\n        idx = self._get_loc_single_level_index(lev, lab)\n        if k < n - 1:\n            end = start + section.searchsorted(idx, side=\"right\")\n            start = start + section.searchsorted(idx, side=\"left\")\n        else:\n            return start + section.searchsorted(idx, side=side)",
                "def _get_loc_single_level_index(self, level_index: Index, key: Hashable) -> int:\n    \"\"\"\n    If key is NA value, location of index unify as -1.\n\n    Parameters\n    ----------\n    level_index: Index\n    key : label\n\n    Returns\n    -------\n    loc : int\n        If key is NA value, loc is -1\n        Else, location of key in index.\n\n    See Also\n    --------\n    Index.get_loc : The get_loc method for (single-level) index.\n    \"\"\"\n\n    if is_scalar(key) and isna(key):\n        return -1\n    else:\n        return level_index.get_loc(key)",
                "def get_loc(self, key, method=None):\n    \"\"\"\n    Get location for a label or a tuple of labels as an integer, slice or\n    boolean mask.\n\n    Parameters\n    ----------\n    key : label or tuple of labels (one for each level)\n    method : None\n\n    Returns\n    -------\n    loc : int, slice object or boolean mask\n        If the key is past the lexsort depth, the return may be a\n        boolean mask array, otherwise it is always a slice or int.\n\n    See Also\n    --------\n    Index.get_loc : The get_loc method for (single-level) index.\n    MultiIndex.slice_locs : Get slice location given start label(s) and\n                            end label(s).\n    MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                          sequence of such.\n\n    Notes\n    -----\n    The key cannot be a slice, list of same-level labels, a boolean mask,\n    or a sequence of such. If you want to use those, use\n    :meth:`MultiIndex.get_locs` instead.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n    >>> mi.get_loc('b')\n    slice(1, 3, None)\n\n    >>> mi.get_loc(('b', 'e'))\n    1\n    \"\"\"\n    if method is not None:\n        raise NotImplementedError(\n            \"only the default get_loc method is \"\n            \"currently supported for MultiIndex\"\n        )\n\n    def _maybe_to_slice(loc):\n        \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n        if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n            return loc\n\n        loc = lib.maybe_indices_to_slice(loc, len(self))\n        if isinstance(loc, slice):\n            return loc\n\n        mask = np.empty(len(self), dtype=\"bool\")\n        mask.fill(False)\n        mask[loc] = True\n        return mask\n\n    if not isinstance(key, tuple):\n        loc = self._get_level_indexer(key, level=0)\n        return _maybe_to_slice(loc)\n\n    keylen = len(key)\n    if self.nlevels < keylen:\n        raise KeyError(\n            f\"Key length ({keylen}) exceeds index depth ({self.nlevels})\"\n        )\n\n    if keylen == self.nlevels and self.is_unique:\n        return self._engine.get_loc(key)\n\n    # -- partial selection or non-unique index\n    # break the key into 2 parts based on the lexsort_depth of the index;\n    # the first part returns a continuous slice of the index; the 2nd part\n    # needs linear search within the slice\n    i = self.lexsort_depth\n    lead_key, follow_key = key[:i], key[i:]\n    start, stop = (\n        self.slice_locs(lead_key, lead_key) if lead_key else (0, len(self))\n    )\n\n    if start == stop:\n        raise KeyError(key)\n\n    if not follow_key:\n        return slice(start, stop)\n\n    warnings.warn(\n        \"indexing past lexsort depth may impact performance.\",\n        PerformanceWarning,\n        stacklevel=10,\n    )\n\n    loc = np.arange(start, stop, dtype=\"int64\")\n\n    for i, k in enumerate(follow_key, len(lead_key)):\n        mask = self.codes[i][loc] == self._get_loc_single_level_index(\n            self.levels[i], k\n        )\n        if not mask.all():\n            loc = loc[mask]\n        if not len(loc):\n            raise KeyError(key)\n\n    return _maybe_to_slice(loc) if len(loc) != stop - start else slice(start, stop)",
                "def get_loc_level(self, key, level=0, drop_level: bool = True):\n    \"\"\"\n    Get both the location for the requested label(s) and the\n    resulting sliced index.\n\n    Parameters\n    ----------\n    key : label or sequence of labels\n    level : int/level name or list thereof, optional\n    drop_level : bool, default True\n        If ``False``, the resulting index will not drop any level.\n\n    Returns\n    -------\n    loc : A 2-tuple where the elements are:\n          Element 0: int, slice object or boolean array\n          Element 1: The resulting sliced multiindex/index. If the key\n          contains all levels, this will be ``None``.\n\n    See Also\n    --------\n    MultiIndex.get_loc  : Get location for a label or a tuple of labels.\n    MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                          sequence of such.\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')],\n    ...                                names=['A', 'B'])\n\n    >>> mi.get_loc_level('b')\n    (slice(1, 3, None), Index(['e', 'f'], dtype='object', name='B'))\n\n    >>> mi.get_loc_level('e', level='B')\n    (array([False,  True, False], dtype=bool),\n    Index(['b'], dtype='object', name='A'))\n\n    >>> mi.get_loc_level(['b', 'e'])\n    (1, None)\n    \"\"\"\n\n    # different name to distinguish from maybe_droplevels\n    def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n        if not drop_level:\n            return self[indexer]\n        # kludgearound\n        orig_index = new_index = self[indexer]\n        levels = [self._get_level_number(i) for i in levels]\n        for i in sorted(levels, reverse=True):\n            try:\n                new_index = new_index.droplevel(i)\n            except ValueError:\n\n                # no dropping here\n                return orig_index\n        return new_index\n\n    if isinstance(level, (tuple, list)):\n        if len(key) != len(level):\n            raise AssertionError(\n                \"Key for location must have same length as number of levels\"\n            )\n        result = None\n        for lev, k in zip(level, key):\n            loc, new_index = self.get_loc_level(k, level=lev)\n            if isinstance(loc, slice):\n                mask = np.zeros(len(self), dtype=bool)\n                mask[loc] = True\n                loc = mask\n\n            result = loc if result is None else result & loc\n\n        return result, maybe_mi_droplevels(result, level, drop_level)\n\n    level = self._get_level_number(level)\n\n    # kludge for #1796\n    if isinstance(key, list):\n        key = tuple(key)\n\n    if isinstance(key, tuple) and level == 0:\n\n        try:\n            if key in self.levels[0]:\n                indexer = self._get_level_indexer(key, level=level)\n                new_index = maybe_mi_droplevels(indexer, [0], drop_level)\n                return indexer, new_index\n        except TypeError:\n            pass\n\n        if not any(isinstance(k, slice) for k in key):\n\n            # partial selection\n            # optionally get indexer to avoid re-calculation\n            def partial_selection(key, indexer=None):\n                if indexer is None:\n                    indexer = self.get_loc(key)\n                ilevels = [\n                    i for i in range(len(key)) if key[i] != slice(None, None)\n                ]\n                return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)\n\n            if len(key) == self.nlevels and self.is_unique:\n                # Complete key in unique index -> standard get_loc\n                try:\n                    return (self._engine.get_loc(key), None)\n                except KeyError as e:\n                    raise KeyError(key) from e\n            else:\n                return partial_selection(key)\n        else:\n            indexer = None\n            for i, k in enumerate(key):\n                if not isinstance(k, slice):\n                    k = self._get_level_indexer(k, level=i)\n                    if isinstance(k, slice):\n                        # everything\n                        if k.start == 0 and k.stop == len(self):\n                            k = slice(None, None)\n                    else:\n                        k_index = k\n\n                if isinstance(k, slice):\n                    if k == slice(None, None):\n                        continue\n                    else:\n                        raise TypeError(key)\n\n                if indexer is None:\n                    indexer = k_index\n                else:  # pragma: no cover\n                    indexer &= k_index\n            if indexer is None:\n                indexer = slice(None, None)\n            ilevels = [i for i in range(len(key)) if key[i] != slice(None, None)]\n            return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)\n    else:\n        indexer = self._get_level_indexer(key, level=level)\n        return indexer, maybe_mi_droplevels(indexer, [level], drop_level)",
                "def _get_level_indexer(self, key, level=0, indexer=None):\n    # return an indexer, boolean array or a slice showing where the key is\n    # in the totality of values\n    # if the indexer is provided, then use this\n\n    level_index = self.levels[level]\n    level_codes = self.codes[level]\n\n    def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n        # given the inputs and the codes/indexer, compute an indexer set\n        # if we have a provided indexer, then this need not consider\n        # the entire labels set\n\n        r = np.arange(start, stop, step)\n        if indexer is not None and len(indexer) != len(codes):\n\n            # we have an indexer which maps the locations in the labels\n            # that we have already selected (and is not an indexer for the\n            # entire set) otherwise this is wasteful so we only need to\n            # examine locations that are in this set the only magic here is\n            # that the result are the mappings to the set that we have\n            # selected\n            from pandas import Series\n\n            mapper = Series(indexer)\n            indexer = codes.take(ensure_platform_int(indexer))\n            result = Series(Index(indexer).isin(r).nonzero()[0])\n            m = result.map(mapper)._ndarray_values\n\n        else:\n            m = np.zeros(len(codes), dtype=bool)\n            m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n        return m\n\n    if isinstance(key, slice):\n        # handle a slice, returning a slice if we can\n        # otherwise a boolean indexer\n\n        try:\n            if key.start is not None:\n                start = level_index.get_loc(key.start)\n            else:\n                start = 0\n            if key.stop is not None:\n                stop = level_index.get_loc(key.stop)\n            else:\n                stop = len(level_index) - 1\n            step = key.step\n        except KeyError:\n\n            # we have a partial slice (like looking up a partial date\n            # string)\n            start = stop = level_index.slice_indexer(\n                key.start, key.stop, key.step, kind=\"loc\"\n            )\n            step = start.step\n\n        if isinstance(start, slice) or isinstance(stop, slice):\n            # we have a slice for start and/or stop\n            # a partial date slicer on a DatetimeIndex generates a slice\n            # note that the stop ALREADY includes the stopped point (if\n            # it was a string sliced)\n            start = getattr(start, \"start\", start)\n            stop = getattr(stop, \"stop\", stop)\n            return convert_indexer(start, stop, step)\n\n        elif level > 0 or self.lexsort_depth == 0 or step is not None:\n            # need to have like semantics here to right\n            # searching as when we are using a slice\n            # so include the stop+1 (so we include stop)\n            return convert_indexer(start, stop + 1, step)\n        else:\n            # sorted, so can return slice object -> view\n            i = level_codes.searchsorted(start, side=\"left\")\n            j = level_codes.searchsorted(stop, side=\"right\")\n            return slice(i, j, step)\n\n    else:\n\n        code = self._get_loc_single_level_index(level_index, key)\n\n        if level > 0 or self.lexsort_depth == 0:\n            # Desired level is not sorted\n            locs = np.array(level_codes == code, dtype=bool, copy=False)\n            if not locs.any():\n                # The label is present in self.levels[level] but unused:\n                raise KeyError(key)\n            return locs\n\n        i = level_codes.searchsorted(code, side=\"left\")\n        j = level_codes.searchsorted(code, side=\"right\")\n        if i == j:\n            # The label is present in self.levels[level] but unused:\n            raise KeyError(key)\n        return slice(i, j)",
                "def get_locs(self, seq):\n    \"\"\"\n    Get location for a sequence of labels.\n\n    Parameters\n    ----------\n    seq : label, slice, list, mask or a sequence of such\n       You should use one of the above for each level.\n       If a level should not be used, set it to ``slice(None)``.\n\n    Returns\n    -------\n    numpy.ndarray\n        NumPy array of integers suitable for passing to iloc.\n\n    See Also\n    --------\n    MultiIndex.get_loc : Get location for a label or a tuple of labels.\n    MultiIndex.slice_locs : Get slice location given start label(s) and\n                            end label(s).\n\n    Examples\n    --------\n    >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n    >>> mi.get_locs('b')  # doctest: +SKIP\n    array([1, 2], dtype=int64)\n\n    >>> mi.get_locs([slice(None), ['e', 'f']])  # doctest: +SKIP\n    array([1, 2], dtype=int64)\n\n    >>> mi.get_locs([[True, False, True], slice('e', 'f')])  # doctest: +SKIP\n    array([2], dtype=int64)\n    \"\"\"\n    from pandas.core.indexes.numeric import Int64Index\n\n    # must be lexsorted to at least as many levels\n    true_slices = [i for (i, s) in enumerate(com.is_true_slices(seq)) if s]\n    if true_slices and true_slices[-1] >= self.lexsort_depth:\n        raise UnsortedIndexError(\n            \"MultiIndex slicing requires the index to be lexsorted: slicing \"\n            f\"on levels {true_slices}, lexsort depth {self.lexsort_depth}\"\n        )\n    # indexer\n    # this is the list of all values that we want to select\n    n = len(self)\n    indexer = None\n\n    def _convert_to_indexer(r):\n        # return an indexer\n        if isinstance(r, slice):\n            m = np.zeros(n, dtype=bool)\n            m[r] = True\n            r = m.nonzero()[0]\n        elif com.is_bool_indexer(r):\n            if len(r) != n:\n                raise ValueError(\n                    \"cannot index with a boolean indexer \"\n                    \"that is not the same length as the \"\n                    \"index\"\n                )\n            r = r.nonzero()[0]\n        return Int64Index(r)\n\n    def _update_indexer(idxr, indexer=indexer):\n        if indexer is None:\n            indexer = Index(np.arange(n))\n        if idxr is None:\n            return indexer\n        return indexer & idxr\n\n    for i, k in enumerate(seq):\n\n        if com.is_bool_indexer(k):\n            # a boolean indexer, must be the same length!\n            k = np.asarray(k)\n            indexer = _update_indexer(_convert_to_indexer(k), indexer=indexer)\n\n        elif is_list_like(k):\n            # a collection of labels to include from this level (these\n            # are or'd)\n            indexers = None\n            for x in k:\n                try:\n                    idxrs = _convert_to_indexer(\n                        self._get_level_indexer(x, level=i, indexer=indexer)\n                    )\n                    indexers = idxrs if indexers is None else indexers | idxrs\n                except KeyError:\n\n                    # ignore not founds\n                    continue\n\n            if indexers is not None:\n                indexer = _update_indexer(indexers, indexer=indexer)\n            else:\n                # no matches we are done\n                return Int64Index([])._ndarray_values\n\n        elif com.is_null_slice(k):\n            # empty slice\n            indexer = _update_indexer(None, indexer=indexer)\n\n        elif isinstance(k, slice):\n\n            # a slice, include BOTH of the labels\n            indexer = _update_indexer(\n                _convert_to_indexer(\n                    self._get_level_indexer(k, level=i, indexer=indexer)\n                ),\n                indexer=indexer,\n            )\n        else:\n            # a single label\n            indexer = _update_indexer(\n                _convert_to_indexer(\n                    self.get_loc_level(k, level=i, drop_level=False)[0]\n                ),\n                indexer=indexer,\n            )\n\n    # empty indexer\n    if indexer is None:\n        return Int64Index([])._ndarray_values\n    return indexer._ndarray_values",
                "def truncate(self, before=None, after=None):\n    \"\"\"\n    Slice index between two labels / tuples, return new MultiIndex\n\n    Parameters\n    ----------\n    before : label or tuple, can be partial. Default None\n        None defaults to start\n    after : label or tuple, can be partial. Default None\n        None defaults to end\n\n    Returns\n    -------\n    truncated : MultiIndex\n    \"\"\"\n    if after and before and after < before:\n        raise ValueError(\"after < before\")\n\n    i, j = self.levels[0].slice_locs(before, after)\n    left, right = self.slice_locs(before, after)\n\n    new_levels = list(self.levels)\n    new_levels[0] = new_levels[0][i:j]\n\n    new_codes = [level_codes[left:right] for level_codes in self.codes]\n    new_codes[0] = new_codes[0] - i\n\n    return MultiIndex(levels=new_levels, codes=new_codes, verify_integrity=False)",
                "def equals(self, other) -> bool:\n    \"\"\"\n    Determines if two MultiIndex objects have the same labeling information\n    (the levels themselves do not necessarily have to be the same)\n\n    See Also\n    --------\n    equal_levels\n    \"\"\"\n    if self.is_(other):\n        return True\n\n    if not isinstance(other, Index):\n        return False\n\n    if not isinstance(other, MultiIndex):\n        # d-level MultiIndex can equal d-tuple Index\n        if not is_object_dtype(other.dtype):\n            if self.nlevels != other.nlevels:\n                return False\n\n        other_vals = com.values_from_object(ensure_index(other))\n        return array_equivalent(self._ndarray_values, other_vals)\n\n    if self.nlevels != other.nlevels:\n        return False\n\n    if len(self) != len(other):\n        return False\n\n    for i in range(self.nlevels):\n        self_codes = self.codes[i]\n        self_codes = self_codes[self_codes != -1]\n        self_values = algos.take_nd(\n            np.asarray(self.levels[i]._values), self_codes, allow_fill=False\n        )\n\n        other_codes = other.codes[i]\n        other_codes = other_codes[other_codes != -1]\n        other_values = algos.take_nd(\n            np.asarray(other.levels[i]._values), other_codes, allow_fill=False\n        )\n\n        # since we use NaT both datetime64 and timedelta64\n        # we can have a situation where a level is typed say\n        # timedelta64 in self (IOW it has other values than NaT)\n        # but types datetime64 in other (where its all NaT)\n        # but these are equivalent\n        if len(self_values) == 0 and len(other_values) == 0:\n            continue\n\n        if not array_equivalent(self_values, other_values):\n            return False\n\n    return True",
                "def equal_levels(self, other) -> bool:\n    \"\"\"\n    Return True if the levels of both MultiIndex objects are the same\n\n    \"\"\"\n    if self.nlevels != other.nlevels:\n        return False\n\n    for i in range(self.nlevels):\n        if not self.levels[i].equals(other.levels[i]):\n            return False\n    return True",
                "def union(self, other, sort=None):\n    \"\"\"\n    Form the union of two MultiIndex objects\n\n    Parameters\n    ----------\n    other : MultiIndex or array / Index of tuples\n    sort : False or None, default None\n        Whether to sort the resulting Index.\n\n        * None : Sort the result, except when\n\n          1. `self` and `other` are equal.\n          2. `self` has length 0.\n          3. Some values in `self` or `other` cannot be compared.\n             A RuntimeWarning is issued in this case.\n\n        * False : do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    Index\n\n    >>> index.union(index2)\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_names = self._convert_can_do_setop(other)\n\n    if len(other) == 0 or self.equals(other):\n        return self\n\n    # TODO: Index.union returns other when `len(self)` is 0.\n\n    uniq_tuples = lib.fast_unique_multiple(\n        [self._ndarray_values, other._ndarray_values], sort=sort\n    )\n\n    return MultiIndex.from_arrays(\n        zip(*uniq_tuples), sortorder=0, names=result_names\n    )",
                "def intersection(self, other, sort=False):\n    \"\"\"\n    Form the intersection of two MultiIndex objects.\n\n    Parameters\n    ----------\n    other : MultiIndex or array / Index of tuples\n    sort : False or None, default False\n        Sort the resulting MultiIndex if possible\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default from ``True`` to ``False``, to match\n           behaviour from before 0.24.0\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_names = self._convert_can_do_setop(other)\n\n    if self.equals(other):\n        return self\n\n    self_tuples = self._ndarray_values\n    other_tuples = other._ndarray_values\n    uniq_tuples = set(self_tuples) & set(other_tuples)\n\n    if sort is None:\n        uniq_tuples = sorted(uniq_tuples)\n\n    if len(uniq_tuples) == 0:\n        return MultiIndex(\n            levels=self.levels,\n            codes=[[]] * self.nlevels,\n            names=result_names,\n            verify_integrity=False,\n        )\n    else:\n        return MultiIndex.from_arrays(\n            zip(*uniq_tuples), sortorder=0, names=result_names\n        )",
                "def difference(self, other, sort=None):\n    \"\"\"\n    Compute set difference of two MultiIndex objects\n\n    Parameters\n    ----------\n    other : MultiIndex\n    sort : False or None, default None\n        Sort the resulting MultiIndex if possible\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    diff : MultiIndex\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_names = self._convert_can_do_setop(other)\n\n    if len(other) == 0:\n        return self\n\n    if self.equals(other):\n        return MultiIndex(\n            levels=self.levels,\n            codes=[[]] * self.nlevels,\n            names=result_names,\n            verify_integrity=False,\n        )\n\n    this = self._get_unique_index()\n\n    indexer = this.get_indexer(other)\n    indexer = indexer.take((indexer != -1).nonzero()[0])\n\n    label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n    difference = this.values.take(label_diff)\n    if sort is None:\n        difference = sorted(difference)\n\n    if len(difference) == 0:\n        return MultiIndex(\n            levels=[[]] * self.nlevels,\n            codes=[[]] * self.nlevels,\n            names=result_names,\n            verify_integrity=False,\n        )\n    else:\n        return MultiIndex.from_tuples(difference, sortorder=0, names=result_names)",
                "@Appender(_index_shared_docs[\"astype\"])\ndef astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if is_categorical_dtype(dtype):\n        msg = \"> 1 ndim Categorical are not supported at this time\"\n        raise NotImplementedError(msg)\n    elif not is_object_dtype(dtype):\n        raise TypeError(\n            f\"Setting {type(self)} dtype to anything other \"\n            \"than object is not supported\"\n        )\n    elif copy is True:\n        return self._shallow_copy()\n    return self",
                "def _convert_can_do_setop(self, other):\n    result_names = self.names\n\n    if not hasattr(other, \"names\"):\n        if len(other) == 0:\n            other = MultiIndex(\n                levels=[[]] * self.nlevels,\n                codes=[[]] * self.nlevels,\n                verify_integrity=False,\n            )\n        else:\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            try:\n                other = MultiIndex.from_tuples(other)\n            except TypeError:\n                raise TypeError(msg)\n    else:\n        result_names = self.names if self.names == other.names else None\n    return other, result_names",
                "def insert(self, loc: int, item):\n    \"\"\"\n    Make new MultiIndex inserting new item at location\n\n    Parameters\n    ----------\n    loc : int\n    item : tuple\n        Must be same length as number of levels in the MultiIndex\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    # Pad the key with empty strings if lower levels of the key\n    # aren't specified:\n    if not isinstance(item, tuple):\n        item = (item,) + (\"\",) * (self.nlevels - 1)\n    elif len(item) != self.nlevels:\n        raise ValueError(\"Item must have length equal to number of levels.\")\n\n    new_levels = []\n    new_codes = []\n    for k, level, level_codes in zip(item, self.levels, self.codes):\n        if k not in level:\n            # have to insert into level\n            # must insert at end otherwise you have to recompute all the\n            # other codes\n            lev_loc = len(level)\n            level = level.insert(lev_loc, k)\n        else:\n            lev_loc = level.get_loc(k)\n\n        new_levels.append(level)\n        new_codes.append(np.insert(ensure_int64(level_codes), loc, lev_loc))\n\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=self.names, verify_integrity=False\n    )",
                "def delete(self, loc):\n    \"\"\"\n    Make new index with passed location deleted\n\n    Returns\n    -------\n    new_index : MultiIndex\n    \"\"\"\n    new_codes = [np.delete(level_codes, loc) for level_codes in self.codes]\n    return MultiIndex(\n        levels=self.levels,\n        codes=new_codes,\n        names=self.names,\n        verify_integrity=False,\n    )",
                "def _wrap_joined_index(self, joined, other):\n    names = self.names if self.names == other.names else None\n    return MultiIndex.from_tuples(joined, names=names)",
                "@Appender(Index.isin.__doc__)\ndef isin(self, values, level=None):\n    if level is None:\n        values = MultiIndex.from_tuples(values, names=self.names).values\n        return algos.isin(self.values, values)\n    else:\n        num = self._get_level_number(level)\n        levs = self.get_level_values(num)\n\n        if levs.size == 0:\n            return np.zeros(len(levs), dtype=np.bool_)\n        return levs.isin(values)",
                "def f(l):\n    return \"mixed\" in l or \"string\" in l or \"unicode\" in l",
                "def f(k, stringify):\n    if stringify and not isinstance(k, str):\n        k = str(k)\n    return k",
                "def _try_mi(k):\n    # TODO: what if a level contains tuples??\n    loc = self.get_loc(k)\n    new_values = series._values[loc]\n    new_index = self[loc]\n    new_index = maybe_droplevels(new_index, k)\n    return series._constructor(\n        new_values, index=new_index, name=series.name\n    ).__finalize__(self)",
                "def cats(level_codes):\n    return np.arange(\n        np.array(level_codes).max() + 1 if len(level_codes) else 0,\n        dtype=level_codes.dtype,\n    )",
                "def _maybe_to_slice(loc):\n    \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n    if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n        return loc\n\n    loc = lib.maybe_indices_to_slice(loc, len(self))\n    if isinstance(loc, slice):\n        return loc\n\n    mask = np.empty(len(self), dtype=\"bool\")\n    mask.fill(False)\n    mask[loc] = True\n    return mask",
                "def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n    if not drop_level:\n        return self[indexer]\n    # kludgearound\n    orig_index = new_index = self[indexer]\n    levels = [self._get_level_number(i) for i in levels]\n    for i in sorted(levels, reverse=True):\n        try:\n            new_index = new_index.droplevel(i)\n        except ValueError:\n\n            # no dropping here\n            return orig_index\n    return new_index",
                "def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n    # given the inputs and the codes/indexer, compute an indexer set\n    # if we have a provided indexer, then this need not consider\n    # the entire labels set\n\n    r = np.arange(start, stop, step)\n    if indexer is not None and len(indexer) != len(codes):\n\n        # we have an indexer which maps the locations in the labels\n        # that we have already selected (and is not an indexer for the\n        # entire set) otherwise this is wasteful so we only need to\n        # examine locations that are in this set the only magic here is\n        # that the result are the mappings to the set that we have\n        # selected\n        from pandas import Series\n\n        mapper = Series(indexer)\n        indexer = codes.take(ensure_platform_int(indexer))\n        result = Series(Index(indexer).isin(r).nonzero()[0])\n        m = result.map(mapper)._ndarray_values\n\n    else:\n        m = np.zeros(len(codes), dtype=bool)\n        m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n    return m",
                "def _convert_to_indexer(r):\n    # return an indexer\n    if isinstance(r, slice):\n        m = np.zeros(n, dtype=bool)\n        m[r] = True\n        r = m.nonzero()[0]\n    elif com.is_bool_indexer(r):\n        if len(r) != n:\n            raise ValueError(\n                \"cannot index with a boolean indexer \"\n                \"that is not the same length as the \"\n                \"index\"\n            )\n        r = r.nonzero()[0]\n    return Int64Index(r)",
                "def _update_indexer(idxr, indexer=indexer):\n    if indexer is None:\n        indexer = Index(np.arange(n))\n    if idxr is None:\n        return indexer\n    return indexer & idxr",
                "def partial_selection(key, indexer=None):\n    if indexer is None:\n        indexer = self.get_loc(key)\n    ilevels = [\n        i for i in range(len(key)) if key[i] != slice(None, None)\n    ]\n    return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)"
            ],
            "inscope_function_signatures": [
                "_sparsify(label_list, start: int=0, sentinel='')",
                "_get_na_rep(dtype) -> str",
                "maybe_droplevels(index, key)",
                "_coerce_indexer_frozen(array_like, categories, copy: bool=False) -> np.ndarray",
                "_codes_to_ints(self, codes)",
                "_codes_to_ints(self, codes)",
                "__new__(cls, levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity: bool=True, _set_identity: bool=True)",
                "_validate_codes(self, level: List, code: List)",
                "_verify_integrity(self, codes: Optional[List]=None, levels: Optional[List]=None)",
                "from_arrays(cls, arrays, sortorder=None, names=lib.no_default)",
                "from_tuples(cls, tuples, sortorder=None, names=None)",
                "from_product(cls, iterables, sortorder=None, names=lib.no_default)",
                "from_frame(cls, df, sortorder=None, names=None)",
                "levels(self)",
                "_values(self)",
                "shape(self)",
                "array(self)",
                "_set_levels(self, levels, level=None, copy=False, validate=True, verify_integrity=False)",
                "set_levels(self, levels, level=None, inplace=False, verify_integrity=True)",
                "codes(self)",
                "_set_codes(self, codes, level=None, copy=False, validate=True, verify_integrity=False)",
                "set_codes(self, codes, level=None, inplace=False, verify_integrity=True)",
                "copy(self, names=None, dtype=None, levels=None, codes=None, deep=False, _set_identity=False, **kwargs)",
                "__array__(self, dtype=None) -> np.ndarray",
                "view(self, cls=None)",
                "_shallow_copy_with_infer(self, values, **kwargs)",
                "__contains__(self, key: Any) -> bool",
                "_shallow_copy(self, values=None, **kwargs)",
                "dtype(self) -> np.dtype",
                "_is_memory_usage_qualified(self) -> bool",
                "memory_usage(self, deep: bool=False) -> int",
                "nbytes(self) -> int",
                "_nbytes(self, deep: bool=False) -> int",
                "_formatter_func(self, tup)",
                "_format_data(self, name=None)",
                "_format_attrs(self)",
                "_format_native_types(self, na_rep='nan', **kwargs)",
                "format(self, space=2, sparsify=None, adjoin=True, names=False, na_rep=None, formatter=None)",
                "__len__(self) -> int",
                "_get_names(self)",
                "_set_names(self, names, level=None, validate=True)",
                "_get_grouper_for_level(self, mapper, level)",
                "_constructor(self)",
                "inferred_type(self) -> str",
                "_get_level_number(self, level) -> int",
                "_engine(self)",
                "values(self)",
                "is_monotonic_increasing(self) -> bool",
                "is_monotonic_decreasing(self) -> bool",
                "_have_mixed_levels(self)",
                "_inferred_type_levels(self)",
                "_hashed_values(self)",
                "_hashed_indexing_key(self, key)",
                "duplicated(self, keep='first')",
                "fillna(self, value=None, downcast=None)",
                "dropna(self, how='any')",
                "get_value(self, series, key)",
                "_get_level_values(self, level, unique=False)",
                "get_level_values(self, level)",
                "unique(self, level=None)",
                "_to_safe_for_reshape(self)",
                "to_frame(self, index=True, name=None)",
                "to_flat_index(self)",
                "is_all_dates(self) -> bool",
                "is_lexsorted(self) -> bool",
                "lexsort_depth(self)",
                "_lexsort_depth(self) -> int",
                "_sort_levels_monotonic(self)",
                "remove_unused_levels(self)",
                "nlevels(self) -> int",
                "levshape(self)",
                "__reduce__(self)",
                "__setstate__(self, state)",
                "__getitem__(self, key)",
                "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=None)",
                "append(self, other)",
                "argsort(self, *args, **kwargs) -> np.ndarray",
                "repeat(self, repeats, axis=None)",
                "where(self, cond, other=None)",
                "drop(self, codes, level=None, errors='raise')",
                "_drop_from_level(self, codes, level, errors='raise')",
                "swaplevel(self, i=-2, j=-1)",
                "reorder_levels(self, order)",
                "_get_codes_for_sorting(self)",
                "sortlevel(self, level=0, ascending=True, sort_remaining=True)",
                "_convert_listlike_indexer(self, keyarr, kind=None)",
                "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                "get_indexer_non_unique(self, target)",
                "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                "get_slice_bound(self, label: Union[Hashable, Sequence[Hashable]], side: str, kind: str) -> int",
                "slice_locs(self, start=None, end=None, step=None, kind=None)",
                "_partial_tup_index(self, tup, side='left')",
                "_get_loc_single_level_index(self, level_index: Index, key: Hashable) -> int",
                "get_loc(self, key, method=None)",
                "get_loc_level(self, key, level=0, drop_level: bool=True)",
                "_get_level_indexer(self, key, level=0, indexer=None)",
                "get_locs(self, seq)",
                "truncate(self, before=None, after=None)",
                "equals(self, other) -> bool",
                "equal_levels(self, other) -> bool",
                "union(self, other, sort=None)",
                "intersection(self, other, sort=False)",
                "difference(self, other, sort=None)",
                "astype(self, dtype, copy=True)",
                "_convert_can_do_setop(self, other)",
                "insert(self, loc: int, item)",
                "delete(self, loc)",
                "_wrap_joined_index(self, joined, other)",
                "isin(self, values, level=None)",
                "f(l)",
                "f(k, stringify)",
                "_try_mi(k)",
                "cats(level_codes)",
                "_maybe_to_slice(loc)",
                "maybe_mi_droplevels(indexer, levels, drop_level: bool)",
                "convert_indexer(start, stop, step, indexer=indexer, codes=level_codes)",
                "_convert_to_indexer(r)",
                "_update_indexer(idxr, indexer=indexer)",
                "partial_selection(key, indexer=None)"
            ],
            "variables_in_file": {
                "_index_doc_kwargs": [
                    2019,
                    2312,
                    1579,
                    975,
                    2351,
                    1942,
                    59,
                    60
                ],
                "dict": [
                    1890,
                    2021,
                    1879,
                    59,
                    61
                ],
                "ibase._index_doc_kwargs": [
                    59
                ],
                "ibase": [
                    2377,
                    59,
                    1885
                ],
                "_index_doc_kwargs.update": [
                    60
                ],
                "libindex.BaseMultiIndexCodesEngine": [
                    104,
                    65
                ],
                "libindex": [
                    65,
                    1479,
                    104,
                    71,
                    111
                ],
                "libindex.UInt64Engine": [
                    65,
                    71
                ],
                "_base": [
                    111,
                    71
                ],
                "codes": [
                    256,
                    258,
                    133,
                    2053,
                    2055,
                    2057,
                    138,
                    267,
                    140,
                    2062,
                    143,
                    796,
                    2844,
                    798,
                    548,
                    804,
                    2855,
                    552,
                    553,
                    809,
                    427,
                    938,
                    939,
                    2091,
                    943,
                    944,
                    433,
                    2094,
                    947,
                    2098,
                    2860,
                    2861,
                    2244,
                    2248,
                    333,
                    2254,
                    336,
                    2258,
                    341,
                    342,
                    345,
                    91,
                    1245,
                    96,
                    98,
                    1252,
                    101,
                    1253,
                    1254,
                    1892,
                    1899,
                    1261,
                    1902,
                    367,
                    368,
                    879,
                    370,
                    881,
                    884,
                    1263,
                    886,
                    1265,
                    894
                ],
                "self.offsets": [
                    91,
                    133
                ],
                "self": [
                    2053,
                    2064,
                    2072,
                    2088,
                    2092,
                    2093,
                    2096,
                    2100,
                    91,
                    2145,
                    2146,
                    2147,
                    2149,
                    2150,
                    2171,
                    2172,
                    2174,
                    2177,
                    2178,
                    2179,
                    133,
                    2202,
                    2229,
                    2238,
                    2244,
                    2245,
                    2269,
                    2273,
                    2274,
                    2299,
                    2303,
                    2305,
                    2328,
                    2332,
                    2340,
                    2347,
                    2379,
                    333,
                    334,
                    2385,
                    2390,
                    2393,
                    2394,
                    2402,
                    2404,
                    359,
                    360,
                    2411,
                    2412,
                    363,
                    364,
                    2415,
                    368,
                    2469,
                    2528,
                    2531,
                    2535,
                    2536,
                    2550,
                    2633,
                    2637,
                    2643,
                    2647,
                    2649,
                    2652,
                    2653,
                    2659,
                    2662,
                    626,
                    2680,
                    2681,
                    636,
                    645,
                    671,
                    681,
                    682,
                    2734,
                    688,
                    689,
                    2736,
                    691,
                    692,
                    2737,
                    694,
                    696,
                    697,
                    2754,
                    2756,
                    2764,
                    2773,
                    2774,
                    2786,
                    2792,
                    2795,
                    2804,
                    2807,
                    778,
                    2827,
                    780,
                    2835,
                    2836,
                    790,
                    796,
                    804,
                    807,
                    808,
                    810,
                    815,
                    817,
                    819,
                    820,
                    2897,
                    2910,
                    2912,
                    890,
                    892,
                    2965,
                    2968,
                    2972,
                    930,
                    937,
                    939,
                    942,
                    944,
                    949,
                    956,
                    960,
                    961,
                    3012,
                    969,
                    970,
                    973,
                    979,
                    987,
                    3035,
                    991,
                    3043,
                    1003,
                    1010,
                    1015,
                    3071,
                    3072,
                    3074,
                    3077,
                    1031,
                    1032,
                    1033,
                    1037,
                    3091,
                    1046,
                    3100,
                    1054,
                    3104,
                    3106,
                    1061,
                    3109,
                    3112,
                    3113,
                    1068,
                    3116,
                    1089,
                    1090,
                    3143,
                    3146,
                    3147,
                    1104,
                    1108,
                    1131,
                    3183,
                    3184,
                    3185,
                    3187,
                    3188,
                    3193,
                    1170,
                    1173,
                    3221,
                    3222,
                    3223,
                    3225,
                    3226,
                    3228,
                    3237,
                    3238,
                    1209,
                    1215,
                    1217,
                    3268,
                    3269,
                    3270,
                    3273,
                    1226,
                    3275,
                    1228,
                    3277,
                    3278,
                    3283,
                    1236,
                    1237,
                    1241,
                    3295,
                    3296,
                    3311,
                    3315,
                    3316,
                    3319,
                    1276,
                    3324,
                    3325,
                    1282,
                    1287,
                    3335,
                    1289,
                    1291,
                    1295,
                    1297,
                    3355,
                    1308,
                    3356,
                    3361,
                    1323,
                    1324,
                    3375,
                    1328,
                    1329,
                    1333,
                    1334,
                    3386,
                    3388,
                    1342,
                    1343,
                    3390,
                    3395,
                    1352,
                    3401,
                    3402,
                    1355,
                    3404,
                    3405,
                    1360,
                    1368,
                    1377,
                    1382,
                    1387,
                    1392,
                    1416,
                    1425,
                    1431,
                    1432,
                    1444,
                    1452,
                    1453,
                    1462,
                    1464,
                    1468,
                    1471,
                    1535,
                    1536,
                    1537,
                    1575,
                    1576,
                    1585,
                    1586,
                    1590,
                    1624,
                    1630,
                    1635,
                    1636,
                    1642,
                    1671,
                    1685,
                    1689,
                    1690,
                    1692,
                    1703,
                    1704,
                    1745,
                    1746,
                    1751,
                    1773,
                    1774,
                    1818,
                    1854,
                    1868,
                    1875,
                    1880,
                    1881,
                    1882,
                    1883,
                    1885,
                    1901,
                    1902,
                    1903,
                    1904,
                    1905,
                    1906,
                    1907,
                    1914,
                    1924,
                    1932,
                    1935,
                    1937,
                    1946,
                    1947,
                    1954,
                    1969,
                    1979,
                    1998,
                    2001,
                    2002,
                    2005,
                    2007,
                    2012,
                    2017,
                    2024,
                    2027,
                    2029,
                    2030
                ],
                "codes.ndim": [
                    96,
                    138
                ],
                "np.bitwise_or.reduce": [
                    98,
                    140,
                    101,
                    143
                ],
                "np.bitwise_or": [
                    98,
                    140,
                    101,
                    143
                ],
                "np": [
                    1923,
                    2055,
                    1930,
                    140,
                    143,
                    2319,
                    2195,
                    2196,
                    3480,
                    2843,
                    1308,
                    1311,
                    1823,
                    2978,
                    1318,
                    1446,
                    1448,
                    1836,
                    2860,
                    2861,
                    3116,
                    3372,
                    305,
                    306,
                    1074,
                    1842,
                    1844,
                    2993,
                    3122,
                    1976,
                    954,
                    1339,
                    3002,
                    3386,
                    2756,
                    2630,
                    2637,
                    2382,
                    3408,
                    1363,
                    1496,
                    2008,
                    3288,
                    1118,
                    2016,
                    98,
                    995,
                    994,
                    101,
                    485,
                    1252,
                    2914,
                    2026,
                    1141,
                    2677,
                    3446,
                    1916,
                    2303
                ],
                "libindex.ObjectEngine": [
                    104,
                    111
                ],
                "codes.astype": [
                    133
                ],
                "Index": [
                    1671,
                    2055,
                    1929,
                    146,
                    1429,
                    3094,
                    2328,
                    2856,
                    2861,
                    2993,
                    1083,
                    3398,
                    2378,
                    1364,
                    1368,
                    2014,
                    227,
                    485,
                    486,
                    235,
                    1005,
                    1901,
                    763,
                    2557
                ],
                "_deprecations": [
                    227
                ],
                "Index._deprecations": [
                    227
                ],
                "frozenset": [
                    227
                ],
                "_typ": [
                    230
                ],
                "_names": [
                    231
                ],
                "FrozenList": [
                    802,
                    677,
                    231,
                    232,
                    233,
                    812,
                    685,
                    370,
                    1173,
                    631
                ],
                "_levels": [
                    232
                ],
                "_codes": [
                    233
                ],
                "_comparables": [
                    234
                ],
                "rename": [
                    235
                ],
                "Index.set_names": [
                    235
                ],
                "bool": [
                    2690,
                    1923,
                    1674,
                    3082,
                    1677,
                    3480,
                    2978,
                    2732,
                    2860,
                    1346,
                    3138,
                    2756,
                    976,
                    1371,
                    2914,
                    997,
                    1006,
                    249,
                    250,
                    1017
                ],
                "name": [
                    1537,
                    1541,
                    1054,
                    929,
                    930,
                    1220,
                    1221,
                    1224,
                    1228,
                    1620,
                    1621,
                    1624,
                    1628,
                    1131,
                    1136,
                    1137,
                    626,
                    254,
                    255
                ],
                "names": [
                    1156,
                    270,
                    272,
                    930,
                    549,
                    550,
                    553,
                    428,
                    429,
                    1202,
                    435,
                    691,
                    693,
                    694,
                    948,
                    1204,
                    1207,
                    1209,
                    3395,
                    1220,
                    3396,
                    1230,
                    987,
                    990,
                    482,
                    484,
                    1894,
                    618,
                    619,
                    1899,
                    1134,
                    495,
                    1905,
                    255
                ],
                "levels": [
                    256,
                    769,
                    258,
                    260,
                    772,
                    774,
                    266,
                    269,
                    783,
                    669,
                    671,
                    673,
                    548,
                    678,
                    936,
                    553,
                    937,
                    427,
                    683,
                    941,
                    942,
                    432,
                    2737,
                    946,
                    2738,
                    334,
                    336,
                    342,
                    1891,
                    1899,
                    1901,
                    368,
                    763,
                    764,
                    767
                ],
                "TypeError": [
                    768,
                    257,
                    770,
                    2816,
                    3332,
                    3333,
                    775,
                    2324,
                    412,
                    544,
                    419,
                    932,
                    2373,
                    1225,
                    1482,
                    1490,
                    981,
                    1365,
                    1622,
                    2777,
                    477,
                    1501,
                    1757,
                    2013,
                    483,
                    1508,
                    615,
                    2542,
                    3310,
                    880,
                    882,
                    887
                ],
                "len": [
                    3109,
                    1073,
                    1081,
                    3130,
                    2633,
                    2637,
                    1104,
                    2646,
                    1111,
                    1624,
                    1636,
                    2662,
                    3187,
                    2679,
                    2172,
                    2685,
                    2175,
                    2688,
                    645,
                    1170,
                    2196,
                    669,
                    671,
                    673,
                    3235,
                    1207,
                    1209,
                    2234,
                    2748,
                    2756,
                    3272,
                    3293,
                    1247,
                    1252,
                    1764,
                    2788,
                    1256,
                    2792,
                    1260,
                    2807,
                    2297,
                    3322,
                    2303,
                    258,
                    260,
                    2824,
                    269,
                    2318,
                    796,
                    1308,
                    798,
                    2844,
                    1824,
                    3356,
                    1826,
                    3366,
                    2860,
                    1842,
                    1844,
                    2877,
                    2378,
                    1868,
                    336,
                    1360,
                    3408,
                    1875,
                    341,
                    343,
                    345,
                    347,
                    3419,
                    350,
                    353,
                    1416,
                    1431,
                    2972,
                    2982,
                    423,
                    424,
                    967,
                    2528,
                    481,
                    2530,
                    484,
                    2534,
                    2535
                ],
                "ValueError": [
                    259,
                    1283,
                    261,
                    2058,
                    3468,
                    657,
                    3474,
                    2324,
                    797,
                    670,
                    799,
                    672,
                    2333,
                    674,
                    3357,
                    2983,
                    425,
                    1450,
                    1968,
                    1203,
                    2741,
                    1208,
                    1210,
                    2235,
                    337,
                    981,
                    344,
                    1625,
                    348,
                    1501,
                    2398,
                    354,
                    356,
                    1510,
                    361,
                    3069,
                    1278
                ],
                "result": [
                    263,
                    266,
                    267,
                    1034,
                    269,
                    1037,
                    1038,
                    272,
                    275,
                    277,
                    280,
                    281,
                    284,
                    286,
                    2856,
                    2857,
                    1854,
                    960,
                    961,
                    962,
                    1857,
                    1858,
                    1859,
                    1861,
                    2752,
                    2760,
                    2762,
                    3421,
                    1633,
                    3430,
                    1642,
                    1643,
                    3437,
                    625,
                    3442,
                    628,
                    631
                ],
                "object.__new__": [
                    263
                ],
                "object": [
                    1338,
                    1141,
                    1118,
                    263
                ],
                "MultiIndex": [
                    3331,
                    2181,
                    263,
                    3080,
                    1934,
                    2321,
                    2323,
                    3097,
                    1953,
                    3236,
                    553,
                    3243,
                    3374,
                    431,
                    945,
                    3387,
                    1086,
                    3396,
                    968,
                    3401,
                    3276,
                    1998,
                    3412,
                    2005,
                    3413,
                    3414,
                    2012,
                    990,
                    2271,
                    2400,
                    3294,
                    3301,
                    2023,
                    2407,
                    1770,
                    2156,
                    495,
                    1269,
                    3323,
                    3196
                ],
                "result._set_levels": [
                    266,
                    1858
                ],
                "copy": [
                    803,
                    678,
                    3497,
                    266,
                    267,
                    684,
                    811,
                    3314
                ],
                "result._set_codes": [
                    1859,
                    267
                ],
                "result._names": [
                    269
                ],
                "result._set_names": [
                    272
                ],
                "sortorder": [
                    2275,
                    1924,
                    1893,
                    1927,
                    553,
                    619,
                    1899,
                    495,
                    434,
                    274,
                    275,
                    277,
                    1906,
                    1938,
                    2230,
                    2261
                ],
                "result.sortorder": [
                    275,
                    277
                ],
                "int": [
                    1824,
                    1156,
                    1864,
                    3417,
                    3338,
                    1006,
                    1169,
                    275,
                    2067,
                    1013,
                    2227,
                    2421,
                    1017,
                    1275,
                    2557,
                    1694
                ],
                "verify_integrity": [
                    814,
                    687,
                    783,
                    279,
                    894
                ],
                "new_codes": [
                    2178,
                    3077,
                    2182,
                    3078,
                    3080,
                    1932,
                    1936,
                    1815,
                    280,
                    281,
                    3360,
                    802,
                    808,
                    1065,
                    811,
                    812,
                    1452,
                    1453,
                    815,
                    688,
                    689,
                    817,
                    3372,
                    3375,
                    1079,
                    3386,
                    1083,
                    1852,
                    3389,
                    1088,
                    1859,
                    1749,
                    2269,
                    2272,
                    2146,
                    1768,
                    2153,
                    1772,
                    2157,
                    1903,
                    1904,
                    370,
                    371
                ],
                "result._verify_integrity": [
                    280
                ],
                "result._codes": [
                    281
                ],
                "_set_identity": [
                    283,
                    951
                ],
                "result._reset_identity": [
                    1857,
                    284
                ],
                "List": [
                    288,
                    310
                ],
                "null_mask": [
                    304,
                    305,
                    306
                ],
                "isna": [
                    304,
                    2577,
                    2540,
                    1125
                ],
                "level": [
                    1536,
                    1537,
                    2052,
                    2053,
                    1046,
                    1575,
                    1576,
                    1068,
                    1069,
                    1582,
                    2092,
                    1073,
                    1074,
                    1585,
                    1586,
                    1078,
                    1635,
                    1636,
                    1132,
                    1135,
                    628,
                    1141,
                    630,
                    1142,
                    671,
                    673,
                    676,
                    681,
                    2227,
                    2228,
                    2229,
                    1207,
                    1209,
                    2234,
                    2747,
                    2748,
                    1214,
                    1215,
                    2238,
                    1217,
                    2753,
                    1220,
                    2248,
                    2249,
                    2762,
                    2764,
                    2253,
                    2770,
                    1236,
                    1237,
                    2261,
                    2774,
                    1241,
                    2298,
                    2299,
                    1276,
                    1277,
                    766,
                    1279,
                    1282,
                    771,
                    1284,
                    773,
                    1285,
                    1286,
                    1287,
                    1288,
                    1289,
                    2827,
                    2828,
                    783,
                    1295,
                    1298,
                    2835,
                    1300,
                    2836,
                    796,
                    798,
                    801,
                    3361,
                    3362,
                    3366,
                    807,
                    3367,
                    3369,
                    3371,
                    304,
                    2371,
                    3400,
                    2379,
                    3404,
                    2897,
                    2386,
                    342,
                    347,
                    350,
                    2912,
                    355,
                    357,
                    878,
                    368,
                    883,
                    885,
                    894,
                    1535
                ],
                "np.any": [
                    305,
                    1446
                ],
                "code": [
                    2914,
                    2920,
                    2921,
                    368,
                    306,
                    307,
                    2910
                ],
                "np.where": [
                    306,
                    1836,
                    1823
                ],
                "Optional": [
                    310
                ],
                "self.codes": [
                    1536,
                    2178,
                    3077,
                    1032,
                    1932,
                    1170,
                    2836,
                    1432,
                    1818,
                    1947,
                    2202,
                    3361,
                    1444,
                    1703,
                    3113,
                    939,
                    1068,
                    1323,
                    1324,
                    1452,
                    944,
                    1969,
                    2096,
                    3386,
                    1979,
                    2238,
                    2244,
                    1355,
                    333,
                    1108,
                    1236,
                    1751,
                    1881,
                    2269,
                    2146,
                    2536,
                    2027,
                    2680,
                    1914
                ],
                "self.levels": [
                    2177,
                    2305,
                    3074,
                    1031,
                    1935,
                    2835,
                    1046,
                    1431,
                    1818,
                    1308,
                    3361,
                    1954,
                    3237,
                    937,
                    810,
                    1323,
                    1068,
                    1324,
                    942,
                    2093,
                    3116,
                    1590,
                    3388,
                    1352,
                    2379,
                    3147,
                    3277,
                    334,
                    1360,
                    1875,
                    1108,
                    1237,
                    2773,
                    1751,
                    1624,
                    1241,
                    1880,
                    3071,
                    2145,
                    2273,
                    1636,
                    2024,
                    2536,
                    1387,
                    2681,
                    1914,
                    1535
                ],
                "codes_length": [
                    341,
                    343
                ],
                "i": [
                    2177,
                    2178,
                    2179,
                    3075,
                    3078,
                    1031,
                    1032,
                    1033,
                    2824,
                    2964,
                    423,
                    424,
                    3112,
                    3113,
                    2092,
                    2093,
                    3116,
                    3119,
                    2096,
                    2737,
                    2738,
                    3122,
                    2740,
                    1333,
                    1334,
                    1590,
                    2998,
                    3012,
                    3146,
                    3147,
                    3043,
                    1360,
                    2001,
                    2002,
                    2003,
                    342,
                    2904,
                    2906,
                    3035,
                    3427,
                    349,
                    3428,
                    354,
                    2659,
                    2660,
                    357,
                    2149,
                    2788,
                    2152,
                    2153,
                    2154,
                    1387,
                    2920,
                    2922,
                    2925,
                    3436,
                    2802,
                    2804,
                    2679,
                    2680,
                    2681,
                    2171,
                    3071
                ],
                "level_codes": [
                    1536,
                    1539,
                    1540,
                    3077,
                    1932,
                    2062,
                    2064,
                    2196,
                    2197,
                    2836,
                    2838,
                    2201,
                    1818,
                    2202,
                    1823,
                    3361,
                    803,
                    804,
                    1444,
                    1703,
                    809,
                    1834,
                    811,
                    1068,
                    1452,
                    3372,
                    1071,
                    1075,
                    1076,
                    1077,
                    1846,
                    1079,
                    3386,
                    1852,
                    1108,
                    342,
                    343,
                    1751,
                    1113,
                    2904,
                    347,
                    1116,
                    349,
                    2269,
                    2905,
                    353,
                    354,
                    2914,
                    1765,
                    1126,
                    1768,
                    2920,
                    2026,
                    2027,
                    2921,
                    1914,
                    1915,
                    1918
                ],
                "enumerate": [
                    3427,
                    2537,
                    2802,
                    2964,
                    342,
                    2679,
                    2998
                ],
                "zip": [
                    1425,
                    1047,
                    1818,
                    3361,
                    804,
                    809,
                    683,
                    1068,
                    3244,
                    2753,
                    1220,
                    1108,
                    342,
                    1751,
                    3418,
                    3427,
                    1636,
                    2536,
                    617,
                    1131,
                    493,
                    368,
                    626,
                    3442,
                    1914,
                    3197
                ],
                "code_": [
                    345
                ],
                "level_codes.max": [
                    347,
                    349
                ],
                "level_codes.min": [
                    353,
                    354
                ],
                "level.is_unique": [
                    355
                ],
                "list": [
                    3074,
                    414,
                    546,
                    808,
                    682,
                    1204,
                    2233,
                    2747,
                    2244,
                    2245,
                    1994,
                    2767,
                    1880,
                    1881,
                    3418,
                    1883,
                    479,
                    2145,
                    2146,
                    2147,
                    357,
                    489,
                    490,
                    491,
                    3442,
                    764
                ],
                "self.sortorder": [
                    1090,
                    1924,
                    359,
                    360,
                    363,
                    1774,
                    2030,
                    1906,
                    949,
                    1689,
                    1690,
                    1882
                ],
                "self._lexsort_depth": [
                    360,
                    1692,
                    364
                ],
                "self._validate_codes": [
                    368
                ],
                "lib.no_default": [
                    498,
                    428,
                    549,
                    374
                ],
                "lib": [
                    1764,
                    549,
                    489,
                    2633,
                    491,
                    428,
                    2541,
                    498,
                    374,
                    3192,
                    1342
                ],
                "error_msg": [
                    410,
                    419,
                    412
                ],
                "is_list_like": [
                    769,
                    773,
                    774,
                    2318,
                    411,
                    543,
                    418,
                    1202,
                    3005,
                    1621,
                    476,
                    878,
                    879,
                    881,
                    885,
                    886,
                    763,
                    766,
                    767
                ],
                "arrays": [
                    417,
                    484,
                    423,
                    424,
                    489,
                    427,
                    491,
                    429,
                    493,
                    495,
                    2000,
                    2004,
                    2005,
                    411,
                    413,
                    414
                ],
                "is_iterator": [
                    545,
                    1484,
                    413,
                    478
                ],
                "array": [
                    417,
                    418
                ],
                "range": [
                    1636,
                    2788,
                    423,
                    1704,
                    969,
                    970,
                    2824,
                    3112,
                    3146,
                    1360,
                    2001,
                    1333,
                    2070,
                    1215
                ],
                "factorize_from_iterables": [
                    427,
                    548
                ],
                "getattr": [
                    2894,
                    2893,
                    429,
                    550
                ],
                "arr": [
                    429
                ],
                "classmethod": [
                    497,
                    555,
                    373,
                    439
                ],
                "tuples": [
                    481,
                    485,
                    486,
                    487,
                    489,
                    490,
                    491,
                    493,
                    476,
                    478,
                    479
                ],
                "isinstance": [
                    1413,
                    2055,
                    3464,
                    1929,
                    1420,
                    2321,
                    2067,
                    2069,
                    3094,
                    3097,
                    3354,
                    2977,
                    2467,
                    2865,
                    2227,
                    2233,
                    1337,
                    2747,
                    2755,
                    2630,
                    2888,
                    1994,
                    2378,
                    2634,
                    1998,
                    2767,
                    2642,
                    2770,
                    3030,
                    1496,
                    2780,
                    2400,
                    1890,
                    485,
                    614,
                    486,
                    1896,
                    490,
                    2803,
                    2805,
                    2297,
                    763,
                    2812
                ],
                "np.ndarray": [
                    2016,
                    485,
                    2630,
                    2055,
                    2026,
                    3480,
                    954
                ],
                "tuples._values": [
                    487
                ],
                "T": [
                    489,
                    491
                ],
                "lib.tuples_to_object_array": [
                    489
                ],
                "lib.to_object_array_tuples": [
                    491
                ],
                "MultiIndex.from_arrays": [
                    3243,
                    3196,
                    2005,
                    495
                ],
                "iterables": [
                    545,
                    546,
                    548,
                    550,
                    543
                ],
                "it": [
                    550
                ],
                "cartesian_product": [
                    552
                ],
                "df": [
                    617,
                    614
                ],
                "ABCDataFrame": [
                    614
                ],
                "column_names": [
                    617,
                    618
                ],
                "columns": [
                    617,
                    619
                ],
                "df.items": [
                    617
                ],
                "cls.from_arrays": [
                    619
                ],
                "cls": [
                    619
                ],
                "x._shallow_copy": [
                    626
                ],
                "x": [
                    3009,
                    3012,
                    1125,
                    1126,
                    1352,
                    1355,
                    1901,
                    626,
                    1875
                ],
                "self._levels": [
                    804,
                    682,
                    1868,
                    626,
                    692
                ],
                "self._names": [
                    1537,
                    626,
                    1228,
                    1173
                ],
                "level._no_setting_name": [
                    630
                ],
                "property": [
                    647,
                    1863,
                    1673,
                    1230,
                    623,
                    1326,
                    1870,
                    1267,
                    788,
                    633,
                    638
                ],
                "self.values": [
                    636,
                    2017,
                    2328,
                    1671,
                    3402,
                    2007,
                    1368,
                    956
                ],
                "validate": [
                    795,
                    668,
                    1206
                ],
                "self.nlevels": [
                    1287,
                    1416,
                    1289,
                    1291,
                    1295,
                    1297,
                    1685,
                    3355,
                    796,
                    3100,
                    3356,
                    671,
                    3106,
                    3238,
                    1704,
                    3112,
                    1333,
                    1209,
                    1215,
                    3143,
                    969,
                    970,
                    3146,
                    1998,
                    3278,
                    2001,
                    3324,
                    2647,
                    2649,
                    2652,
                    3295,
                    3296,
                    2792,
                    2411,
                    2172,
                    3325,
                    2174
                ],
                "new_levels": [
                    2177,
                    3074,
                    3075,
                    2182,
                    3080,
                    1814,
                    3359,
                    677,
                    1064,
                    682,
                    3371,
                    684,
                    685,
                    3375,
                    688,
                    692,
                    1078,
                    1081,
                    1851,
                    1083,
                    1087,
                    1858,
                    1748,
                    2145,
                    1767,
                    2152,
                    1771,
                    2157
                ],
                "_shallow_copy": [
                    684,
                    678
                ],
                "ensure_index": [
                    678,
                    2315,
                    684,
                    2384,
                    2389,
                    3103
                ],
                "lev": [
                    1540,
                    1541,
                    1818,
                    1826,
                    803,
                    804,
                    678,
                    807,
                    681,
                    810,
                    683,
                    684,
                    811,
                    1842,
                    2229,
                    1849,
                    1851,
                    2238,
                    1217,
                    2753,
                    2754,
                    1220,
                    2248,
                    2249,
                    1228,
                    2253,
                    2254,
                    2255,
                    1108,
                    1109,
                    1111,
                    1751,
                    1113,
                    1753,
                    1756,
                    1760,
                    1126,
                    1767,
                    2537,
                    1131,
                    2540,
                    2541,
                    2545,
                    1141,
                    2550,
                    1914,
                    1918,
                    1535
                ],
                "level_numbers": [
                    681,
                    683,
                    809,
                    807
                ],
                "self._get_level_number": [
                    1217,
                    2149,
                    2150,
                    1575,
                    807,
                    681,
                    2092,
                    2764,
                    3404,
                    1585,
                    2737,
                    2229,
                    2171
                ],
                "lev_num": [
                    809,
                    810,
                    683,
                    684,
                    811
                ],
                "self._verify_integrity": [
                    688,
                    1903,
                    815
                ],
                "self._codes": [
                    808,
                    689,
                    790,
                    817
                ],
                "self.names": [
                    1282,
                    2179,
                    3335,
                    1033,
                    1937,
                    1954,
                    3375,
                    691,
                    3390,
                    1089,
                    3395,
                    3401,
                    2005,
                    1883,
                    2012,
                    987,
                    1630,
                    2274,
                    2147,
                    1131,
                    2412,
                    1773,
                    2029,
                    2415,
                    3319,
                    1276
                ],
                "any": [
                    1963,
                    1003,
                    2780,
                    693
                ],
                "self._set_names": [
                    1905,
                    694
                ],
                "self._tuples": [
                    1328,
                    1329,
                    819,
                    696,
                    1342,
                    1343
                ],
                "self._reset_cache": [
                    697,
                    820
                ],
                "inplace": [
                    777,
                    895,
                    785,
                    889
                ],
                "idx": [
                    896,
                    778,
                    2379,
                    780,
                    781,
                    782,
                    2380,
                    2382,
                    786,
                    2550,
                    2552,
                    2553,
                    890,
                    2555,
                    892,
                    893,
                    894
                ],
                "self._shallow_copy": [
                    892,
                    3315,
                    780,
                    973
                ],
                "idx._reset_identity": [
                    893,
                    781
                ],
                "idx._set_levels": [
                    782
                ],
                "view": [
                    803
                ],
                "_coerce_indexer_frozen": [
                    811,
                    803
                ],
                "idx._set_codes": [
                    894
                ],
                "kwargs.get": [
                    929
                ],
                "kwargs": [
                    929,
                    2017,
                    931,
                    971,
                    973,
                    1069,
                    1944,
                    987,
                    989,
                    990,
                    991
                ],
                "self._validate_names": [
                    930
                ],
                "deep": [
                    930,
                    933,
                    1031,
                    1037,
                    1010
                ],
                "deepcopy": [
                    937,
                    939
                ],
                "self.copy": [
                    960,
                    1453,
                    991
                ],
                "result._id": [
                    961
                ],
                "self._id": [
                    961
                ],
                "values": [
                    1342,
                    967,
                    1576,
                    1577,
                    3401,
                    3402,
                    973,
                    2094,
                    1359,
                    1360,
                    2096,
                    3409,
                    1331,
                    1363,
                    986,
                    1340,
                    990
                ],
                "_": [
                    969,
                    970,
                    3465,
                    2385,
                    2299
                ],
                "Any": [
                    976
                ],
                "hash": [
                    977
                ],
                "key": [
                    2816,
                    1922,
                    1923,
                    1413,
                    1414,
                    1416,
                    1929,
                    1930,
                    2824,
                    1932,
                    2827,
                    3464,
                    3465,
                    1424,
                    1425,
                    2577,
                    1427,
                    2580,
                    2865,
                    1458,
                    2870,
                    2871,
                    2874,
                    2875,
                    2748,
                    2878,
                    2753,
                    1474,
                    2884,
                    2686,
                    1484,
                    1485,
                    2767,
                    2768,
                    977,
                    2642,
                    979,
                    2643,
                    2770,
                    2646,
                    2773,
                    1496,
                    2774,
                    1498,
                    2780,
                    2653,
                    2910,
                    1505,
                    2786,
                    2660,
                    2788,
                    2917,
                    2792,
                    2666,
                    1515,
                    2795,
                    2797,
                    2924,
                    2799,
                    2802,
                    1910,
                    1911,
                    1915,
                    1918
                ],
                "self.get_loc": [
                    2064,
                    2786,
                    979,
                    1462
                ],
                "LookupError": [
                    981
                ],
                "Appender": [
                    1442,
                    2019,
                    3398,
                    3303,
                    2312,
                    1579,
                    1005,
                    975,
                    2351,
                    1234,
                    1429,
                    1942,
                    984
                ],
                "_index_shared_docs": [
                    1442,
                    2019,
                    3303,
                    2312,
                    1579,
                    975,
                    2351,
                    1234,
                    1942,
                    984
                ],
                "kwargs.pop": [
                    987,
                    989
                ],
                "MultiIndex.from_tuples": [
                    3331,
                    3396,
                    3301,
                    2407,
                    3401,
                    2323,
                    1269,
                    2012,
                    990
                ],
                "np.dtype": [
                    994,
                    995
                ],
                "cache_readonly": [
                    993,
                    1345,
                    1379,
                    1384,
                    1687,
                    1389,
                    1012,
                    1271,
                    1304,
                    1370
                ],
                "l": [
                    1001,
                    1003,
                    1308,
                    1382
                ],
                "f": [
                    1425,
                    1003
                ],
                "self._inferred_type_levels": [
                    1003,
                    1382
                ],
                "self._nbytes": [
                    1010,
                    1015
                ],
                "Index.memory_usage.__doc__": [
                    1005
                ],
                "Index.memory_usage": [
                    1005
                ],
                "objsize": [
                    1033,
                    1029
                ],
                "level_nbytes": [
                    1034,
                    1031
                ],
                "sum": [
                    1032,
                    1033,
                    1031
                ],
                "i.memory_usage": [
                    1031
                ],
                "label_nbytes": [
                    1032,
                    1034
                ],
                "i.nbytes": [
                    1032
                ],
                "names_nbytes": [
                    1033,
                    1034
                ],
                "getsizeof": [
                    1033
                ],
                "self._engine.sizeof": [
                    1037
                ],
                "self._engine": [
                    2340,
                    2347,
                    2795,
                    1037,
                    2653,
                    1471
                ],
                "formatter_funcs": [
                    1046,
                    1047
                ],
                "level._formatter_func": [
                    1046
                ],
                "tuple": [
                    1920,
                    1413,
                    3464,
                    1424,
                    1047,
                    1944,
                    3354,
                    2467,
                    2747,
                    2248,
                    2249,
                    1994,
                    2768,
                    2258,
                    1875,
                    2259,
                    2642,
                    2770,
                    2007,
                    2021,
                    1896,
                    2297
                ],
                "func": [
                    1047
                ],
                "val": [
                    1047
                ],
                "tup": [
                    2528,
                    2530,
                    2534,
                    2536,
                    1047
                ],
                "format_object_summary": [
                    1053
                ],
                "self._formatter_func": [
                    1054
                ],
                "format_object_attrs": [
                    1061
                ],
                "level._format_native_types": [
                    1069
                ],
                "na_rep": [
                    1074,
                    1109,
                    1069
                ],
                "mask": [
                    2306,
                    2307,
                    2308,
                    1071,
                    1072,
                    2096,
                    1970,
                    1971,
                    2097,
                    1077,
                    2100,
                    1975,
                    2756,
                    2757,
                    2758,
                    2637,
                    2638,
                    2639,
                    2640,
                    1116,
                    1117,
                    1119,
                    1249,
                    1250,
                    1253,
                    1254,
                    2680,
                    2683,
                    2684
                ],
                "mask.any": [
                    1072,
                    2307,
                    1971,
                    1117
                ],
                "nan_index": [
                    1073,
                    1077
                ],
                "np.append": [
                    1074
                ],
                "level_codes.flags.writeable": [
                    1075
                ],
                "level_codes.flags": [
                    1075
                ],
                "level_codes.copy": [
                    1076
                ],
                "new_levels.append": [
                    3371,
                    1851,
                    1078,
                    1767
                ],
                "new_codes.append": [
                    1768,
                    1852,
                    3372,
                    1079
                ],
                "_format_native_types": [
                    1083
                ],
                "take": [
                    1241,
                    1083
                ],
                "mi": [
                    1093,
                    1086
                ],
                "mi.values": [
                    1093
                ],
                "stringified_levels": [
                    1128,
                    1131,
                    1107
                ],
                "na": [
                    1125,
                    1109,
                    1119
                ],
                "_get_na_rep": [
                    1109
                ],
                "lev.dtype.type": [
                    1109
                ],
                "lev.dtype": [
                    1109
                ],
                "formatted": [
                    1120,
                    1124,
                    1128,
                    1113,
                    1118,
                    1119
                ],
                "format": [
                    1113
                ],
                "lev.take": [
                    1760,
                    1113,
                    1849
                ],
                "formatter": [
                    1113
                ],
                "np.array": [
                    2914,
                    2319,
                    2196,
                    1141,
                    1339,
                    1118
                ],
                "formatted.tolist": [
                    1120
                ],
                "pprint_thing": [
                    1136,
                    1125
                ],
                "algos.take_1d": [
                    1540,
                    1765,
                    1126
                ],
                "algos": [
                    1250,
                    1539,
                    1540,
                    1765,
                    1126,
                    1834,
                    3115,
                    3402,
                    2096,
                    3121,
                    1245
                ],
                "lev._values": [
                    1540,
                    1126
                ],
                "stringified_levels.append": [
                    1128
                ],
                "result_levels": [
                    1155,
                    1156,
                    1130,
                    1163,
                    1165,
                    1142
                ],
                "level.append": [
                    1135
                ],
                "level.extend": [
                    1141
                ],
                "result_levels.append": [
                    1142
                ],
                "sparsify": [
                    1152,
                    1153,
                    1144,
                    1145,
                    1147
                ],
                "get_option": [
                    1145
                ],
                "sentinel": [
                    1153,
                    3434,
                    1148,
                    1156
                ],
                "_sparsify": [
                    1155
                ],
                "adjoin": [
                    1159
                ],
                "adj": [
                    1162,
                    1163
                ],
                "_get_adjustment": [
                    1162
                ],
                "split": [
                    1163
                ],
                "adj.adjoin": [
                    1163
                ],
                "space": [
                    1163
                ],
                "is_hashable": [
                    1224
                ],
                "__name__": [
                    1226
                ],
                "type": [
                    2082,
                    1226,
                    2382,
                    3311,
                    1885
                ],
                "_set_names": [
                    1231
                ],
                "_get_names": [
                    1231
                ],
                "indexer": [
                    2734,
                    2736,
                    2237,
                    1236,
                    3285,
                    3286,
                    2775,
                    2776,
                    3288,
                    2774,
                    2263,
                    1241,
                    2266,
                    2268,
                    2269,
                    1756,
                    1245,
                    1760,
                    1249,
                    1250,
                    1763,
                    1252,
                    1764,
                    2279,
                    2785,
                    2786,
                    2790,
                    2801,
                    2294,
                    2297,
                    2299,
                    2302,
                    2303,
                    2818,
                    2819,
                    2821,
                    2310,
                    2822,
                    2823,
                    2825,
                    2827,
                    2828,
                    2838,
                    2844,
                    2340,
                    2854,
                    2855,
                    2856,
                    2347,
                    2349,
                    2385,
                    2391,
                    2394,
                    2401,
                    2403,
                    2404,
                    2417,
                    2973,
                    1446,
                    1448,
                    1452,
                    2991,
                    2992,
                    2993,
                    2995,
                    2996,
                    3003,
                    3012,
                    3021,
                    3028,
                    3033,
                    3035,
                    3037,
                    3041,
                    3045,
                    3049,
                    3051
                ],
                "level_index": [
                    2883,
                    1256,
                    1258,
                    1260,
                    1261,
                    1263,
                    1265,
                    2835,
                    2580,
                    1237,
                    2871,
                    2875,
                    2877,
                    2910
                ],
                "mapper": [
                    2857,
                    1242,
                    2854,
                    1239
                ],
                "level_values": [
                    1241,
                    1242
                ],
                "grouper": [
                    1261,
                    1263,
                    1265,
                    1242,
                    1243
                ],
                "level_values.map": [
                    1242
                ],
                "uniques": [
                    1824,
                    1250,
                    1826,
                    1256,
                    1258,
                    1834,
                    1836,
                    1838,
                    1823,
                    1844,
                    1849,
                    1245,
                    1247
                ],
                "algos.factorize": [
                    1250,
                    1245
                ],
                "ok_codes": [
                    1250,
                    1253
                ],
                "np.empty": [
                    1252,
                    2637,
                    2382
                ],
                "indexer.dtype": [
                    1252
                ],
                "level_index.take": [
                    1258,
                    1261,
                    1263
                ],
                "str": [
                    1496,
                    1420,
                    1421,
                    2227,
                    2420,
                    3445,
                    1272
                ],
                "count": [
                    1276,
                    1277
                ],
                "self.names.count": [
                    1276
                ],
                "is_integer": [
                    1284,
                    1277
                ],
                "self.names.index": [
                    1282
                ],
                "KeyError": [
                    1472,
                    1475,
                    1507,
                    1285,
                    2084,
                    2308,
                    2917,
                    1417,
                    2666,
                    3015,
                    2796,
                    2797,
                    2924,
                    2098,
                    2648,
                    1499,
                    2686,
                    2879
                ],
                "orig_level": [
                    1289,
                    1292
                ],
                "IndexError": [
                    1509,
                    1480,
                    1290,
                    1296,
                    2013,
                    1501
                ],
                "_tuples": [
                    1302
                ],
                "sizes": [
                    1308,
                    1311
                ],
                "np.ceil": [
                    1308
                ],
                "np.log2": [
                    1308
                ],
                "lev_bits": [
                    1321,
                    1318,
                    1311
                ],
                "np.cumsum": [
                    1311
                ],
                "offsets": [
                    1323,
                    1324,
                    1318
                ],
                "astype": [
                    2026,
                    1318
                ],
                "np.concatenate": [
                    2008,
                    1318
                ],
                "MultiIndexPyIntEngine": [
                    1323
                ],
                "MultiIndexUIntEngine": [
                    1324
                ],
                "vals": [
                    1334,
                    1335,
                    1336,
                    1337,
                    1338,
                    1339,
                    1340
                ],
                "self._get_level_values": [
                    1635,
                    1576,
                    1360,
                    1586,
                    2002,
                    1334
                ],
                "is_categorical_dtype": [
                    3306,
                    1335
                ],
                "vals._internal_get_values": [
                    1336
                ],
                "vals.dtype": [
                    1337
                ],
                "ExtensionDtype": [
                    1337
                ],
                "hasattr": [
                    2369,
                    1337,
                    3321
                ],
                "vals.astype": [
                    1338
                ],
                "values.append": [
                    1340
                ],
                "lib.fast_zip": [
                    1342
                ],
                "all": [
                    1352,
                    2403,
                    1997
                ],
                "x.is_monotonic": [
                    1352
                ],
                "libalgos.is_lexsorted": [
                    1705,
                    1354
                ],
                "libalgos": [
                    1705,
                    1354
                ],
                "x.astype": [
                    1355
                ],
                "reversed": [
                    1360
                ],
                "sort_order": [
                    1363,
                    1364
                ],
                "np.lexsort": [
                    1363
                ],
                "is_monotonic": [
                    1368,
                    1364
                ],
                "is_monotonic_increasing": [
                    1377
                ],
                "i.inferred_type": [
                    1387
                ],
                "hash_tuples": [
                    1392,
                    1414
                ],
                "stringify": [
                    1425,
                    1420
                ],
                "k": [
                    1420,
                    1421,
                    1422,
                    1425,
                    3361,
                    3362,
                    2679,
                    1704,
                    1705,
                    1706,
                    2807,
                    3367,
                    3369,
                    1458,
                    1462,
                    2998,
                    3000,
                    1465,
                    3002,
                    3003,
                    3005,
                    1471,
                    2753,
                    2754,
                    3009,
                    1479,
                    3026,
                    3030,
                    2007,
                    3035,
                    2780,
                    3419,
                    3043,
                    3428,
                    2537,
                    2802,
                    2803,
                    2804,
                    2805,
                    2551,
                    2808,
                    2681,
                    2810,
                    2812,
                    2813
                ],
                "self._have_mixed_levels": [
                    1425
                ],
                "hash_tuple": [
                    1427
                ],
                "shape": [
                    2245,
                    2249,
                    2255,
                    2259,
                    1431,
                    1432
                ],
                "map": [
                    1431
                ],
                "ids": [
                    1432,
                    1434
                ],
                "get_group_index": [
                    1432
                ],
                "duplicated_int64": [
                    1434
                ],
                "keep": [
                    1434
                ],
                "Index.duplicated.__doc__": [
                    1429
                ],
                "Index.duplicated": [
                    1429
                ],
                "NotImplementedError": [
                    1440,
                    2337,
                    2342,
                    3308,
                    2035,
                    2623
                ],
                "nans": [
                    1448,
                    1444,
                    1446
                ],
                "how": [
                    1450,
                    1445,
                    1447
                ],
                "np.all": [
                    1448
                ],
                "s": [
                    1457,
                    1479,
                    2964,
                    1471
                ],
                "com.values_from_object": [
                    1457,
                    1458,
                    3103
                ],
                "com": [
                    1922,
                    2981,
                    2057,
                    2091,
                    1457,
                    1458,
                    3026,
                    2071,
                    2964,
                    1911,
                    3000,
                    3103
                ],
                "series": [
                    1457,
                    1466,
                    1467,
                    1463
                ],
                "loc": [
                    2688,
                    2064,
                    2067,
                    2068,
                    2069,
                    2070,
                    2071,
                    2079,
                    2080,
                    2082,
                    3372,
                    1462,
                    1463,
                    1464,
                    3386,
                    2754,
                    2755,
                    2757,
                    2630,
                    2631,
                    2758,
                    2633,
                    2634,
                    2635,
                    2760,
                    2639,
                    2643,
                    2644,
                    2545,
                    2546,
                    2547,
                    2548,
                    2677,
                    2680,
                    2684,
                    2685
                ],
                "new_values": [
                    1467,
                    1463
                ],
                "series._values": [
                    1463
                ],
                "new_index": [
                    2754,
                    2279,
                    2776,
                    2736,
                    2745,
                    2740,
                    2775,
                    1464,
                    1465,
                    1467,
                    2271
                ],
                "maybe_droplevels": [
                    1465
                ],
                "__finalize__": [
                    1466
                ],
                "series._constructor": [
                    1466
                ],
                "series.name": [
                    1467
                ],
                "self._engine.get_value": [
                    1471
                ],
                "_try_mi": [
                    1498,
                    1474,
                    1505
                ],
                "libindex.get_value_at": [
                    1479
                ],
                "InvalidIndexError": [
                    1515,
                    1485
                ],
                "e1": [
                    1489,
                    1487
                ],
                "Exception": [
                    1488
                ],
                "datetime.datetime": [
                    1496
                ],
                "datetime": [
                    1496
                ],
                "np.datetime64": [
                    1496,
                    3446
                ],
                "Timestamp": [
                    1505
                ],
                "tslibs.OutOfBoundsDatetime": [
                    1511
                ],
                "tslibs": [
                    1511
                ],
                "unique": [
                    1538,
                    1583
                ],
                "algos.unique": [
                    1834,
                    1539
                ],
                "filled": [
                    1540,
                    1541
                ],
                "lev._na_value": [
                    1540
                ],
                "lev._shallow_copy": [
                    1541
                ],
                "super": [
                    2353,
                    2525,
                    2294,
                    1583
                ],
                "self.set_levels": [
                    1590
                ],
                "i._to_safe_for_reshape": [
                    1590
                ],
                "idx_names": [
                    1636,
                    1628,
                    1630
                ],
                "DataFrame": [
                    1633
                ],
                "lvlname": [
                    1635,
                    1636
                ],
                "index": [
                    3463,
                    1641,
                    3467,
                    2093,
                    2094,
                    3473,
                    3477
                ],
                "result.index": [
                    1642
                ],
                "self.lexsort_depth": [
                    2528,
                    2912,
                    2659,
                    2531,
                    2897,
                    1685,
                    2965,
                    2968,
                    2072
                ],
                "int64_codes": [
                    1705,
                    1703
                ],
                "ensure_int64": [
                    1763,
                    3372,
                    1703
                ],
                "self.is_lexsorted": [
                    1745
                ],
                "self.is_monotonic": [
                    1745
                ],
                "lev.is_monotonic": [
                    1753
                ],
                "lev.argsort": [
                    1756
                ],
                "ri": [
                    1764,
                    1765
                ],
                "lib.get_reverse_indexer": [
                    1764
                ],
                "changed": [
                    1856,
                    1817,
                    1828
                ],
                "np.bincount": [
                    1823
                ],
                "has_na": [
                    1824,
                    1826,
                    1835,
                    1842,
                    1844,
                    1849
                ],
                "na_idx": [
                    1836,
                    1838
                ],
                "code_mapping": [
                    1842,
                    1844,
                    1846
                ],
                "np.zeros": [
                    2978,
                    2756,
                    2860,
                    3408,
                    1842
                ],
                "np.arange": [
                    2993,
                    2195,
                    1844,
                    2677,
                    3288,
                    2843,
                    2303
                ],
                "self.view": [
                    1854
                ],
                "d": [
                    1885,
                    1879
                ],
                "ibase._new_Index": [
                    1885
                ],
                "state": [
                    1890,
                    1891,
                    1892,
                    1893,
                    1894,
                    1896,
                    1898
                ],
                "state.get": [
                    1891,
                    1892,
                    1893,
                    1894
                ],
                "nd_state": [
                    1898
                ],
                "own_state": [
                    1898,
                    1899
                ],
                "self._set_levels": [
                    1901
                ],
                "self._set_codes": [
                    1904,
                    1902
                ],
                "self._reset_identity": [
                    1907
                ],
                "is_scalar": [
                    2577,
                    1910
                ],
                "com.cast_scalar_indexer": [
                    1911
                ],
                "retval": [
                    1920,
                    1913,
                    1916,
                    1918
                ],
                "retval.append": [
                    1916,
                    1918
                ],
                "np.nan": [
                    1916
                ],
                "com.is_bool_indexer": [
                    3000,
                    1922,
                    2981,
                    2071
                ],
                "np.asarray": [
                    1923,
                    1930,
                    3116,
                    3122,
                    1976,
                    3002
                ],
                "nv.validate_take": [
                    1944
                ],
                "nv": [
                    1944,
                    2021
                ],
                "indices": [
                    1963,
                    1969,
                    1970,
                    1945,
                    1979,
                    1948
                ],
                "ensure_platform_int": [
                    2022,
                    2855,
                    2349,
                    2319,
                    1945,
                    2268
                ],
                "taken": [
                    1954,
                    1969,
                    1973,
                    1977,
                    1946,
                    1979,
                    1980
                ],
                "self._assert_take_fillable": [
                    1946
                ],
                "allow_fill": [
                    1962,
                    1949
                ],
                "fill_value": [
                    1962,
                    1950
                ],
                "msg": [
                    3329,
                    2082,
                    2083,
                    3333,
                    3307,
                    1964,
                    3308,
                    1968
                ],
                "lab.take": [
                    1969,
                    1979
                ],
                "lab": [
                    2537,
                    2540,
                    2541,
                    2542,
                    1969,
                    2545,
                    2550,
                    1979
                ],
                "masked": [
                    1976,
                    1977,
                    1972
                ],
                "new_label": [
                    1973,
                    1974
                ],
                "label_values": [
                    1976,
                    1974,
                    1975
                ],
                "na_value": [
                    1975
                ],
                "masked.append": [
                    1976
                ],
                "other": [
                    3331,
                    3335,
                    3336,
                    3091,
                    3094,
                    3222,
                    3223,
                    3097,
                    3225,
                    3099,
                    3100,
                    3229,
                    3103,
                    3106,
                    3109,
                    3119,
                    3122,
                    3395,
                    3269,
                    3270,
                    3143,
                    3272,
                    3321,
                    1994,
                    1995,
                    3147,
                    3275,
                    1998,
                    2003,
                    3285,
                    2007,
                    3184,
                    3185,
                    3187,
                    3193,
                    3322,
                    3323
                ],
                "o": [
                    2003,
                    1998
                ],
                "o.nlevels": [
                    1998
                ],
                "label": [
                    2467,
                    2468,
                    2469,
                    2002,
                    2004
                ],
                "appended": [
                    2003,
                    2004
                ],
                "o._get_level_values": [
                    2003
                ],
                "arrays.append": [
                    2004
                ],
                "label.append": [
                    2004
                ],
                "to_concat": [
                    2008,
                    2007
                ],
                "k._values": [
                    2007
                ],
                "new_tuples": [
                    2008,
                    2012,
                    2014
                ],
                "self.values.argsort": [
                    2017
                ],
                "args": [
                    2017
                ],
                "nv.validate_repeat": [
                    2021
                ],
                "axis": [
                    2021
                ],
                "repeats": [
                    2026,
                    2022
                ],
                "repeat": [
                    2026
                ],
                "level_codes.view": [
                    2026
                ],
                "np.intp": [
                    2026
                ],
                "self._drop_from_level": [
                    2053
                ],
                "errors": [
                    2097,
                    2085,
                    2053
                ],
                "com.index_labels_to_array": [
                    2057,
                    2091
                ],
                "inds": [
                    2080,
                    2088,
                    2061,
                    2068,
                    2070
                ],
                "inds.append": [
                    2068
                ],
                "slice": [
                    2688,
                    2823,
                    2824,
                    2069,
                    2977,
                    2865,
                    2755,
                    2888,
                    2634,
                    3030,
                    2906,
                    2780,
                    2788,
                    2669,
                    2925,
                    2803,
                    2805,
                    2808,
                    2812,
                    2813
                ],
                "inds.extend": [
                    2080,
                    2070
                ],
                "loc.start": [
                    2070
                ],
                "loc.stop": [
                    2070
                ],
                "warnings.warn": [
                    2073,
                    2671
                ],
                "warnings": [
                    2073,
                    2671
                ],
                "PerformanceWarning": [
                    2673,
                    2076
                ],
                "loc.nonzero": [
                    2079
                ],
                "AssertionError": [
                    2083,
                    2173,
                    2749
                ],
                "self.delete": [
                    2088
                ],
                "index.get_indexer": [
                    2094
                ],
                "algos.isin": [
                    2096,
                    3402
                ],
                "mask.all": [
                    2097,
                    2683
                ],
                "new_names": [
                    2147,
                    2179,
                    2182,
                    2154,
                    2157
                ],
                "j": [
                    3075,
                    2150,
                    2152,
                    2153,
                    2154,
                    2921,
                    2922,
                    2925,
                    2905,
                    2906,
                    3071
                ],
                "order": [
                    2177,
                    2178,
                    2179,
                    2171,
                    2172,
                    2175
                ],
                "max": [
                    2196
                ],
                "level_codes.dtype": [
                    2197
                ],
                "Categorical.from_codes": [
                    2201
                ],
                "Categorical": [
                    2201
                ],
                "cats": [
                    2201
                ],
                "ascending": [
                    2233,
                    2234,
                    2265,
                    2238
                ],
                "lexsort_indexer": [
                    2237
                ],
                "self.levshape": [
                    2245
                ],
                "primary": [
                    2248,
                    2258,
                    2263
                ],
                "primshp": [
                    2249,
                    2259,
                    2263
                ],
                "sorted": [
                    3233,
                    2738,
                    3291,
                    2253
                ],
                "codes.pop": [
                    2254
                ],
                "shape.pop": [
                    2255
                ],
                "sort_remaining": [
                    2257
                ],
                "indexer_from_factorized": [
                    2263
                ],
                "level_codes.take": [
                    2269
                ],
                "keyarr": [
                    2305,
                    2308,
                    2310,
                    2294,
                    2297,
                    2299
                ],
                "_convert_listlike_indexer": [
                    2294
                ],
                "kind": [
                    2525,
                    2294
                ],
                "self.reindex": [
                    2299
                ],
                "check": [
                    2305,
                    2306
                ],
                "get_indexer": [
                    2328,
                    2305
                ],
                "method": [
                    2340,
                    2341,
                    2372,
                    2314,
                    2327,
                    2329,
                    2395,
                    2622,
                    2335
                ],
                "missing.clean_reindex_fill_method": [
                    2314
                ],
                "missing": [
                    2314
                ],
                "target": [
                    2315,
                    2318,
                    2321,
                    2323,
                    2329,
                    2340,
                    2347,
                    2353,
                    2369,
                    2377,
                    2378,
                    2382,
                    2384,
                    2385,
                    2386,
                    2389,
                    2390,
                    2395,
                    2400,
                    2402,
                    2404,
                    2407,
                    2411,
                    2412,
                    2414,
                    2415,
                    2417
                ],
                "limit": [
                    2329,
                    2395,
                    2340
                ],
                "tolerance": [
                    2336,
                    2329,
                    2395
                ],
                "self.is_unique": [
                    2792,
                    2393,
                    2332,
                    2652
                ],
                "self._engine.get_indexer": [
                    2347,
                    2340
                ],
                "get_indexer_non_unique": [
                    2353
                ],
                "preserve_names": [
                    2369,
                    2410
                ],
                "ibase._ensure_has_len": [
                    2377
                ],
                "attrs": [
                    2380,
                    2381,
                    2382
                ],
                "idx._get_attributes_dict": [
                    2380
                ],
                "attrs.pop": [
                    2381
                ],
                "_simple_new": [
                    2382
                ],
                "idx.dtype": [
                    2382
                ],
                "self._join_level": [
                    2385
                ],
                "self.equals": [
                    3225,
                    3275,
                    3187,
                    2390
                ],
                "self.get_indexer": [
                    2394
                ],
                "self.take": [
                    2404
                ],
                "target.nlevels": [
                    2411
                ],
                "target.names": [
                    2412,
                    2415
                ],
                "target.copy": [
                    2414
                ],
                "Union": [
                    2420
                ],
                "Hashable": [
                    2420,
                    2557
                ],
                "Sequence": [
                    2420
                ],
                "self._partial_tup_index": [
                    2469
                ],
                "side": [
                    2469,
                    2545,
                    2546,
                    2548,
                    2555
                ],
                "slice_locs": [
                    2525,
                    3071
                ],
                "start": [
                    2688,
                    2843,
                    2871,
                    2873,
                    2883,
                    2886,
                    2888,
                    2893,
                    2895,
                    2901,
                    2904,
                    2525,
                    3421,
                    3422,
                    3424,
                    2661,
                    2535,
                    2665,
                    2538,
                    2669,
                    2548,
                    2677,
                    2552,
                    2553,
                    2555
                ],
                "end": [
                    2552,
                    2538,
                    2525,
                    2535
                ],
                "step": [
                    2886,
                    2895,
                    2897,
                    2901,
                    2906,
                    2843,
                    2525,
                    2878
                ],
                "UnsortedIndexError": [
                    2529,
                    2966
                ],
                "n": [
                    2978,
                    2982,
                    2534,
                    2993,
                    2551,
                    2972
                ],
                "zipped": [
                    2536,
                    2537
                ],
                "labs": [
                    2537,
                    2538
                ],
                "section": [
                    2538,
                    2548,
                    2552,
                    2553,
                    2555
                ],
                "lev.is_type_compatible": [
                    2541
                ],
                "lib.infer_dtype": [
                    2541
                ],
                "lev.searchsorted": [
                    2545
                ],
                "section.searchsorted": [
                    2552,
                    2553,
                    2555,
                    2548
                ],
                "self._get_loc_single_level_index": [
                    2680,
                    2910,
                    2550
                ],
                "level_index.get_loc": [
                    2875,
                    2580,
                    2871
                ],
                "loc.dtype": [
                    2630
                ],
                "lib.maybe_indices_to_slice": [
                    2633
                ],
                "mask.fill": [
                    2638
                ],
                "self._get_level_indexer": [
                    3012,
                    2827,
                    2643,
                    2804,
                    2774,
                    3035
                ],
                "_maybe_to_slice": [
                    2688,
                    2644
                ],
                "keylen": [
                    2649,
                    2652,
                    2646,
                    2647
                ],
                "self._engine.get_loc": [
                    2795,
                    2653
                ],
                "lead_key": [
                    2660,
                    2662,
                    2679
                ],
                "follow_key": [
                    2668,
                    2660,
                    2679
                ],
                "stop": [
                    2688,
                    2875,
                    2883,
                    2661,
                    2888,
                    2665,
                    2669,
                    2894,
                    2895,
                    2677,
                    2901,
                    2905,
                    2843,
                    2877
                ],
                "self.slice_locs": [
                    3072,
                    2662
                ],
                "drop_level": [
                    2790,
                    2825,
                    2762,
                    2828,
                    2733,
                    2775
                ],
                "orig_index": [
                    2736,
                    2744
                ],
                "new_index.droplevel": [
                    2740
                ],
                "self.get_loc_level": [
                    2754,
                    3043
                ],
                "maybe_mi_droplevels": [
                    2790,
                    2825,
                    2762,
                    2828,
                    2775
                ],
                "ilevels": [
                    2824,
                    2825,
                    2787,
                    2790
                ],
                "e": [
                    2797
                ],
                "partial_selection": [
                    2799
                ],
                "k.start": [
                    2807
                ],
                "k.stop": [
                    2807
                ],
                "k_index": [
                    2810,
                    2819,
                    2821
                ],
                "r": [
                    2977,
                    2979,
                    2980,
                    2981,
                    2982,
                    2856,
                    2988,
                    2861,
                    2989,
                    2843
                ],
                "Series": [
                    2856,
                    2854
                ],
                "codes.take": [
                    2855
                ],
                "nonzero": [
                    2856,
                    3286
                ],
                "isin": [
                    2856
                ],
                "m": [
                    2978,
                    2979,
                    2980,
                    2857,
                    2860,
                    2861,
                    2863
                ],
                "_ndarray_values": [
                    3024,
                    2857,
                    3050
                ],
                "result.map": [
                    2857
                ],
                "np.in1d": [
                    2861
                ],
                "is_unique": [
                    2861
                ],
                "key.start": [
                    2884,
                    2870,
                    2871
                ],
                "key.stop": [
                    2874,
                    2875,
                    2884
                ],
                "key.step": [
                    2884,
                    2878
                ],
                "level_index.slice_indexer": [
                    2883
                ],
                "start.step": [
                    2886
                ],
                "convert_indexer": [
                    2901,
                    2895
                ],
                "level_codes.searchsorted": [
                    2904,
                    2905,
                    2920,
                    2921
                ],
                "locs": [
                    2914,
                    2915,
                    2918
                ],
                "locs.any": [
                    2915
                ],
                "true_slices": [
                    2968,
                    2964,
                    2965
                ],
                "com.is_true_slices": [
                    2964
                ],
                "seq": [
                    2964,
                    2998
                ],
                "m.nonzero": [
                    2980
                ],
                "r.nonzero": [
                    2988
                ],
                "Int64Index": [
                    3024,
                    3050,
                    2989
                ],
                "idxr": [
                    2994,
                    2996
                ],
                "_update_indexer": [
                    3041,
                    3021,
                    3028,
                    3033,
                    3003
                ],
                "_convert_to_indexer": [
                    3034,
                    3003,
                    3042,
                    3011
                ],
                "indexers": [
                    3008,
                    3020,
                    3021,
                    3014
                ],
                "idxrs": [
                    3011,
                    3014
                ],
                "com.is_null_slice": [
                    3026
                ],
                "indexer._ndarray_values": [
                    3051
                ],
                "after": [
                    3072,
                    3068,
                    3071
                ],
                "before": [
                    3072,
                    3068,
                    3071
                ],
                "left": [
                    3072,
                    3077
                ],
                "right": [
                    3072,
                    3077
                ],
                "self.is_": [
                    3091
                ],
                "is_object_dtype": [
                    3099,
                    3309
                ],
                "other.dtype": [
                    3099
                ],
                "other.nlevels": [
                    3106,
                    3100,
                    3143
                ],
                "other_vals": [
                    3104,
                    3103
                ],
                "array_equivalent": [
                    3104,
                    3133
                ],
                "self._ndarray_values": [
                    3104,
                    3193,
                    3228
                ],
                "self_codes": [
                    3113,
                    3114,
                    3116
                ],
                "self_values": [
                    3130,
                    3115,
                    3133
                ],
                "algos.take_nd": [
                    3121,
                    3115
                ],
                "_values": [
                    3122,
                    3116
                ],
                "other_codes": [
                    3120,
                    3122,
                    3119
                ],
                "other.codes": [
                    3119
                ],
                "other_values": [
                    3121,
                    3130,
                    3133
                ],
                "other.levels": [
                    3122,
                    3147
                ],
                "equals": [
                    3147
                ],
                "self._validate_sort_keyword": [
                    3268,
                    3221,
                    3183
                ],
                "sort": [
                    3232,
                    3268,
                    3183,
                    3221,
                    3193,
                    3290
                ],
                "self._assert_can_do_setop": [
                    3184,
                    3269,
                    3222
                ],
                "result_names": [
                    3297,
                    3301,
                    3270,
                    3239,
                    3335,
                    3336,
                    3244,
                    3279,
                    3185,
                    3223,
                    3319,
                    3197
                ],
                "self._convert_can_do_setop": [
                    3185,
                    3270,
                    3223
                ],
                "uniq_tuples": [
                    3233,
                    3235,
                    3244,
                    3192,
                    3197,
                    3230
                ],
                "lib.fast_unique_multiple": [
                    3192
                ],
                "other._ndarray_values": [
                    3193,
                    3229
                ],
                "self_tuples": [
                    3228,
                    3230
                ],
                "other_tuples": [
                    3229,
                    3230
                ],
                "set": [
                    3230
                ],
                "this": [
                    3288,
                    3289,
                    3283,
                    3285
                ],
                "self._get_unique_index": [
                    3283
                ],
                "this.get_indexer": [
                    3285
                ],
                "indexer.take": [
                    3286
                ],
                "label_diff": [
                    3288,
                    3289
                ],
                "np.setdiff1d": [
                    3288
                ],
                "this.size": [
                    3288
                ],
                "difference": [
                    3289,
                    3291,
                    3293,
                    3301
                ],
                "this.values.take": [
                    3289
                ],
                "this.values": [
                    3289
                ],
                "dtype": [
                    3305,
                    3306,
                    3309,
                    3446
                ],
                "pandas_dtype": [
                    3305
                ],
                "other.names": [
                    3395,
                    3335
                ],
                "item": [
                    3361,
                    3354,
                    3355,
                    3356
                ],
                "lev_loc": [
                    3369,
                    3372,
                    3366,
                    3367
                ],
                "level.insert": [
                    3367
                ],
                "level.get_loc": [
                    3369
                ],
                "np.insert": [
                    3372
                ],
                "np.delete": [
                    3386
                ],
                "joined": [
                    3396
                ],
                "num": [
                    3404,
                    3405
                ],
                "levs": [
                    3408,
                    3409,
                    3405,
                    3407
                ],
                "self.get_level_values": [
                    3405
                ],
                "levs.size": [
                    3407
                ],
                "np.bool_": [
                    3408
                ],
                "levs.isin": [
                    3409
                ],
                "Index.isin.__doc__": [
                    3398
                ],
                "Index.isin": [
                    3398
                ],
                "MultiIndex._add_numeric_methods_disabled": [
                    3412
                ],
                "MultiIndex._add_numeric_methods_add_sub_disabled": [
                    3413
                ],
                "MultiIndex._add_logical_methods_disabled": [
                    3414
                ],
                "pivoted": [
                    3424,
                    3418,
                    3421,
                    3422
                ],
                "label_list": [
                    3418,
                    3419
                ],
                "prev": [
                    3440,
                    3427,
                    3422
                ],
                "cur": [
                    3424,
                    3440,
                    3427,
                    3436
                ],
                "sparse_cur": [
                    3425,
                    3429,
                    3430,
                    3434,
                    3436,
                    3437
                ],
                "p": [
                    3433,
                    3427
                ],
                "t": [
                    3433,
                    3427,
                    3429
                ],
                "sparse_cur.append": [
                    3434,
                    3429
                ],
                "result.append": [
                    3437,
                    3430
                ],
                "sparse_cur.extend": [
                    3436
                ],
                "get": [
                    3446
                ],
                "np.timedelta64": [
                    3446
                ],
                "original_index": [
                    3470,
                    3463
                ],
                "index.droplevel": [
                    3473,
                    3467
                ],
                "array_like": [
                    3496,
                    3498,
                    3499,
                    3500
                ],
                "coerce_indexer_dtype": [
                    3496
                ],
                "categories": [
                    3496
                ],
                "array_like.copy": [
                    3498
                ],
                "array_like.flags.writeable": [
                    3499
                ],
                "array_like.flags": [
                    3499
                ]
            },
            "filtered_variables_in_file": {
                "_index_doc_kwargs": [
                    2019,
                    2312,
                    1579,
                    975,
                    2351,
                    1942,
                    59,
                    60
                ],
                "ibase._index_doc_kwargs": [
                    59
                ],
                "ibase": [
                    2377,
                    59,
                    1885
                ],
                "_index_doc_kwargs.update": [
                    60
                ],
                "libindex.BaseMultiIndexCodesEngine": [
                    104,
                    65
                ],
                "libindex": [
                    65,
                    1479,
                    104,
                    71,
                    111
                ],
                "libindex.UInt64Engine": [
                    65,
                    71
                ],
                "_base": [
                    111,
                    71
                ],
                "codes": [
                    256,
                    258,
                    133,
                    2053,
                    2055,
                    2057,
                    138,
                    267,
                    140,
                    2062,
                    143,
                    796,
                    2844,
                    798,
                    548,
                    804,
                    2855,
                    552,
                    553,
                    809,
                    427,
                    938,
                    939,
                    2091,
                    943,
                    944,
                    433,
                    2094,
                    947,
                    2098,
                    2860,
                    2861,
                    2244,
                    2248,
                    333,
                    2254,
                    336,
                    2258,
                    341,
                    342,
                    345,
                    91,
                    1245,
                    96,
                    98,
                    1252,
                    101,
                    1253,
                    1254,
                    1892,
                    1899,
                    1261,
                    1902,
                    367,
                    368,
                    879,
                    370,
                    881,
                    884,
                    1263,
                    886,
                    1265,
                    894
                ],
                "self.offsets": [
                    91,
                    133
                ],
                "self": [
                    2053,
                    2064,
                    2072,
                    2088,
                    2092,
                    2093,
                    2096,
                    2100,
                    91,
                    2145,
                    2146,
                    2147,
                    2149,
                    2150,
                    2171,
                    2172,
                    2174,
                    2177,
                    2178,
                    2179,
                    133,
                    2202,
                    2229,
                    2238,
                    2244,
                    2245,
                    2269,
                    2273,
                    2274,
                    2299,
                    2303,
                    2305,
                    2328,
                    2332,
                    2340,
                    2347,
                    2379,
                    333,
                    334,
                    2385,
                    2390,
                    2393,
                    2394,
                    2402,
                    2404,
                    359,
                    360,
                    2411,
                    2412,
                    363,
                    364,
                    2415,
                    368,
                    2469,
                    2528,
                    2531,
                    2535,
                    2536,
                    2550,
                    2633,
                    2637,
                    2643,
                    2647,
                    2649,
                    2652,
                    2653,
                    2659,
                    2662,
                    626,
                    2680,
                    2681,
                    636,
                    645,
                    671,
                    681,
                    682,
                    2734,
                    688,
                    689,
                    2736,
                    691,
                    692,
                    2737,
                    694,
                    696,
                    697,
                    2754,
                    2756,
                    2764,
                    2773,
                    2774,
                    2786,
                    2792,
                    2795,
                    2804,
                    2807,
                    778,
                    2827,
                    780,
                    2835,
                    2836,
                    790,
                    796,
                    804,
                    807,
                    808,
                    810,
                    815,
                    817,
                    819,
                    820,
                    2897,
                    2910,
                    2912,
                    890,
                    892,
                    2965,
                    2968,
                    2972,
                    930,
                    937,
                    939,
                    942,
                    944,
                    949,
                    956,
                    960,
                    961,
                    3012,
                    969,
                    970,
                    973,
                    979,
                    987,
                    3035,
                    991,
                    3043,
                    1003,
                    1010,
                    1015,
                    3071,
                    3072,
                    3074,
                    3077,
                    1031,
                    1032,
                    1033,
                    1037,
                    3091,
                    1046,
                    3100,
                    1054,
                    3104,
                    3106,
                    1061,
                    3109,
                    3112,
                    3113,
                    1068,
                    3116,
                    1089,
                    1090,
                    3143,
                    3146,
                    3147,
                    1104,
                    1108,
                    1131,
                    3183,
                    3184,
                    3185,
                    3187,
                    3188,
                    3193,
                    1170,
                    1173,
                    3221,
                    3222,
                    3223,
                    3225,
                    3226,
                    3228,
                    3237,
                    3238,
                    1209,
                    1215,
                    1217,
                    3268,
                    3269,
                    3270,
                    3273,
                    1226,
                    3275,
                    1228,
                    3277,
                    3278,
                    3283,
                    1236,
                    1237,
                    1241,
                    3295,
                    3296,
                    3311,
                    3315,
                    3316,
                    3319,
                    1276,
                    3324,
                    3325,
                    1282,
                    1287,
                    3335,
                    1289,
                    1291,
                    1295,
                    1297,
                    3355,
                    1308,
                    3356,
                    3361,
                    1323,
                    1324,
                    3375,
                    1328,
                    1329,
                    1333,
                    1334,
                    3386,
                    3388,
                    1342,
                    1343,
                    3390,
                    3395,
                    1352,
                    3401,
                    3402,
                    1355,
                    3404,
                    3405,
                    1360,
                    1368,
                    1377,
                    1382,
                    1387,
                    1392,
                    1416,
                    1425,
                    1431,
                    1432,
                    1444,
                    1452,
                    1453,
                    1462,
                    1464,
                    1468,
                    1471,
                    1535,
                    1536,
                    1537,
                    1575,
                    1576,
                    1585,
                    1586,
                    1590,
                    1624,
                    1630,
                    1635,
                    1636,
                    1642,
                    1671,
                    1685,
                    1689,
                    1690,
                    1692,
                    1703,
                    1704,
                    1745,
                    1746,
                    1751,
                    1773,
                    1774,
                    1818,
                    1854,
                    1868,
                    1875,
                    1880,
                    1881,
                    1882,
                    1883,
                    1885,
                    1901,
                    1902,
                    1903,
                    1904,
                    1905,
                    1906,
                    1907,
                    1914,
                    1924,
                    1932,
                    1935,
                    1937,
                    1946,
                    1947,
                    1954,
                    1969,
                    1979,
                    1998,
                    2001,
                    2002,
                    2005,
                    2007,
                    2012,
                    2017,
                    2024,
                    2027,
                    2029,
                    2030
                ],
                "codes.ndim": [
                    96,
                    138
                ],
                "np.bitwise_or.reduce": [
                    98,
                    140,
                    101,
                    143
                ],
                "np.bitwise_or": [
                    98,
                    140,
                    101,
                    143
                ],
                "np": [
                    1923,
                    2055,
                    1930,
                    140,
                    143,
                    2319,
                    2195,
                    2196,
                    3480,
                    2843,
                    1308,
                    1311,
                    1823,
                    2978,
                    1318,
                    1446,
                    1448,
                    1836,
                    2860,
                    2861,
                    3116,
                    3372,
                    305,
                    306,
                    1074,
                    1842,
                    1844,
                    2993,
                    3122,
                    1976,
                    954,
                    1339,
                    3002,
                    3386,
                    2756,
                    2630,
                    2637,
                    2382,
                    3408,
                    1363,
                    1496,
                    2008,
                    3288,
                    1118,
                    2016,
                    98,
                    995,
                    994,
                    101,
                    485,
                    1252,
                    2914,
                    2026,
                    1141,
                    2677,
                    3446,
                    1916,
                    2303
                ],
                "libindex.ObjectEngine": [
                    104,
                    111
                ],
                "codes.astype": [
                    133
                ],
                "Index": [
                    1671,
                    2055,
                    1929,
                    146,
                    1429,
                    3094,
                    2328,
                    2856,
                    2861,
                    2993,
                    1083,
                    3398,
                    2378,
                    1364,
                    1368,
                    2014,
                    227,
                    485,
                    486,
                    235,
                    1005,
                    1901,
                    763,
                    2557
                ],
                "_deprecations": [
                    227
                ],
                "Index._deprecations": [
                    227
                ],
                "_typ": [
                    230
                ],
                "_names": [
                    231
                ],
                "FrozenList": [
                    802,
                    677,
                    231,
                    232,
                    233,
                    812,
                    685,
                    370,
                    1173,
                    631
                ],
                "_levels": [
                    232
                ],
                "_codes": [
                    233
                ],
                "_comparables": [
                    234
                ],
                "rename": [
                    235
                ],
                "Index.set_names": [
                    235
                ],
                "name": [
                    1537,
                    1541,
                    1054,
                    929,
                    930,
                    1220,
                    1221,
                    1224,
                    1228,
                    1620,
                    1621,
                    1624,
                    1628,
                    1131,
                    1136,
                    1137,
                    626,
                    254,
                    255
                ],
                "names": [
                    1156,
                    270,
                    272,
                    930,
                    549,
                    550,
                    553,
                    428,
                    429,
                    1202,
                    435,
                    691,
                    693,
                    694,
                    948,
                    1204,
                    1207,
                    1209,
                    3395,
                    1220,
                    3396,
                    1230,
                    987,
                    990,
                    482,
                    484,
                    1894,
                    618,
                    619,
                    1899,
                    1134,
                    495,
                    1905,
                    255
                ],
                "levels": [
                    256,
                    769,
                    258,
                    260,
                    772,
                    774,
                    266,
                    269,
                    783,
                    669,
                    671,
                    673,
                    548,
                    678,
                    936,
                    553,
                    937,
                    427,
                    683,
                    941,
                    942,
                    432,
                    2737,
                    946,
                    2738,
                    334,
                    336,
                    342,
                    1891,
                    1899,
                    1901,
                    368,
                    763,
                    764,
                    767
                ],
                "result": [
                    263,
                    266,
                    267,
                    1034,
                    269,
                    1037,
                    1038,
                    272,
                    275,
                    277,
                    280,
                    281,
                    284,
                    286,
                    2856,
                    2857,
                    1854,
                    960,
                    961,
                    962,
                    1857,
                    1858,
                    1859,
                    1861,
                    2752,
                    2760,
                    2762,
                    3421,
                    1633,
                    3430,
                    1642,
                    1643,
                    3437,
                    625,
                    3442,
                    628,
                    631
                ],
                "object.__new__": [
                    263
                ],
                "MultiIndex": [
                    3331,
                    2181,
                    263,
                    3080,
                    1934,
                    2321,
                    2323,
                    3097,
                    1953,
                    3236,
                    553,
                    3243,
                    3374,
                    431,
                    945,
                    3387,
                    1086,
                    3396,
                    968,
                    3401,
                    3276,
                    1998,
                    3412,
                    2005,
                    3413,
                    3414,
                    2012,
                    990,
                    2271,
                    2400,
                    3294,
                    3301,
                    2023,
                    2407,
                    1770,
                    2156,
                    495,
                    1269,
                    3323,
                    3196
                ],
                "result._set_levels": [
                    266,
                    1858
                ],
                "copy": [
                    803,
                    678,
                    3497,
                    266,
                    267,
                    684,
                    811,
                    3314
                ],
                "result._set_codes": [
                    1859,
                    267
                ],
                "result._names": [
                    269
                ],
                "result._set_names": [
                    272
                ],
                "sortorder": [
                    2275,
                    1924,
                    1893,
                    1927,
                    553,
                    619,
                    1899,
                    495,
                    434,
                    274,
                    275,
                    277,
                    1906,
                    1938,
                    2230,
                    2261
                ],
                "result.sortorder": [
                    275,
                    277
                ],
                "verify_integrity": [
                    814,
                    687,
                    783,
                    279,
                    894
                ],
                "new_codes": [
                    2178,
                    3077,
                    2182,
                    3078,
                    3080,
                    1932,
                    1936,
                    1815,
                    280,
                    281,
                    3360,
                    802,
                    808,
                    1065,
                    811,
                    812,
                    1452,
                    1453,
                    815,
                    688,
                    689,
                    817,
                    3372,
                    3375,
                    1079,
                    3386,
                    1083,
                    1852,
                    3389,
                    1088,
                    1859,
                    1749,
                    2269,
                    2272,
                    2146,
                    1768,
                    2153,
                    1772,
                    2157,
                    1903,
                    1904,
                    370,
                    371
                ],
                "result._verify_integrity": [
                    280
                ],
                "result._codes": [
                    281
                ],
                "_set_identity": [
                    283,
                    951
                ],
                "result._reset_identity": [
                    1857,
                    284
                ],
                "List": [
                    288,
                    310
                ],
                "null_mask": [
                    304,
                    305,
                    306
                ],
                "isna": [
                    304,
                    2577,
                    2540,
                    1125
                ],
                "level": [
                    1536,
                    1537,
                    2052,
                    2053,
                    1046,
                    1575,
                    1576,
                    1068,
                    1069,
                    1582,
                    2092,
                    1073,
                    1074,
                    1585,
                    1586,
                    1078,
                    1635,
                    1636,
                    1132,
                    1135,
                    628,
                    1141,
                    630,
                    1142,
                    671,
                    673,
                    676,
                    681,
                    2227,
                    2228,
                    2229,
                    1207,
                    1209,
                    2234,
                    2747,
                    2748,
                    1214,
                    1215,
                    2238,
                    1217,
                    2753,
                    1220,
                    2248,
                    2249,
                    2762,
                    2764,
                    2253,
                    2770,
                    1236,
                    1237,
                    2261,
                    2774,
                    1241,
                    2298,
                    2299,
                    1276,
                    1277,
                    766,
                    1279,
                    1282,
                    771,
                    1284,
                    773,
                    1285,
                    1286,
                    1287,
                    1288,
                    1289,
                    2827,
                    2828,
                    783,
                    1295,
                    1298,
                    2835,
                    1300,
                    2836,
                    796,
                    798,
                    801,
                    3361,
                    3362,
                    3366,
                    807,
                    3367,
                    3369,
                    3371,
                    304,
                    2371,
                    3400,
                    2379,
                    3404,
                    2897,
                    2386,
                    342,
                    347,
                    350,
                    2912,
                    355,
                    357,
                    878,
                    368,
                    883,
                    885,
                    894,
                    1535
                ],
                "np.any": [
                    305,
                    1446
                ],
                "code": [
                    2914,
                    2920,
                    2921,
                    368,
                    306,
                    307,
                    2910
                ],
                "np.where": [
                    306,
                    1836,
                    1823
                ],
                "Optional": [
                    310
                ],
                "self.codes": [
                    1536,
                    2178,
                    3077,
                    1032,
                    1932,
                    1170,
                    2836,
                    1432,
                    1818,
                    1947,
                    2202,
                    3361,
                    1444,
                    1703,
                    3113,
                    939,
                    1068,
                    1323,
                    1324,
                    1452,
                    944,
                    1969,
                    2096,
                    3386,
                    1979,
                    2238,
                    2244,
                    1355,
                    333,
                    1108,
                    1236,
                    1751,
                    1881,
                    2269,
                    2146,
                    2536,
                    2027,
                    2680,
                    1914
                ],
                "self.levels": [
                    2177,
                    2305,
                    3074,
                    1031,
                    1935,
                    2835,
                    1046,
                    1431,
                    1818,
                    1308,
                    3361,
                    1954,
                    3237,
                    937,
                    810,
                    1323,
                    1068,
                    1324,
                    942,
                    2093,
                    3116,
                    1590,
                    3388,
                    1352,
                    2379,
                    3147,
                    3277,
                    334,
                    1360,
                    1875,
                    1108,
                    1237,
                    2773,
                    1751,
                    1624,
                    1241,
                    1880,
                    3071,
                    2145,
                    2273,
                    1636,
                    2024,
                    2536,
                    1387,
                    2681,
                    1914,
                    1535
                ],
                "codes_length": [
                    341,
                    343
                ],
                "i": [
                    2177,
                    2178,
                    2179,
                    3075,
                    3078,
                    1031,
                    1032,
                    1033,
                    2824,
                    2964,
                    423,
                    424,
                    3112,
                    3113,
                    2092,
                    2093,
                    3116,
                    3119,
                    2096,
                    2737,
                    2738,
                    3122,
                    2740,
                    1333,
                    1334,
                    1590,
                    2998,
                    3012,
                    3146,
                    3147,
                    3043,
                    1360,
                    2001,
                    2002,
                    2003,
                    342,
                    2904,
                    2906,
                    3035,
                    3427,
                    349,
                    3428,
                    354,
                    2659,
                    2660,
                    357,
                    2149,
                    2788,
                    2152,
                    2153,
                    2154,
                    1387,
                    2920,
                    2922,
                    2925,
                    3436,
                    2802,
                    2804,
                    2679,
                    2680,
                    2681,
                    2171,
                    3071
                ],
                "level_codes": [
                    1536,
                    1539,
                    1540,
                    3077,
                    1932,
                    2062,
                    2064,
                    2196,
                    2197,
                    2836,
                    2838,
                    2201,
                    1818,
                    2202,
                    1823,
                    3361,
                    803,
                    804,
                    1444,
                    1703,
                    809,
                    1834,
                    811,
                    1068,
                    1452,
                    3372,
                    1071,
                    1075,
                    1076,
                    1077,
                    1846,
                    1079,
                    3386,
                    1852,
                    1108,
                    342,
                    343,
                    1751,
                    1113,
                    2904,
                    347,
                    1116,
                    349,
                    2269,
                    2905,
                    353,
                    354,
                    2914,
                    1765,
                    1126,
                    1768,
                    2920,
                    2026,
                    2027,
                    2921,
                    1914,
                    1915,
                    1918
                ],
                "code_": [
                    345
                ],
                "level_codes.max": [
                    347,
                    349
                ],
                "level_codes.min": [
                    353,
                    354
                ],
                "level.is_unique": [
                    355
                ],
                "self.sortorder": [
                    1090,
                    1924,
                    359,
                    360,
                    363,
                    1774,
                    2030,
                    1906,
                    949,
                    1689,
                    1690,
                    1882
                ],
                "self._lexsort_depth": [
                    360,
                    1692,
                    364
                ],
                "self._validate_codes": [
                    368
                ],
                "lib.no_default": [
                    498,
                    428,
                    549,
                    374
                ],
                "lib": [
                    1764,
                    549,
                    489,
                    2633,
                    491,
                    428,
                    2541,
                    498,
                    374,
                    3192,
                    1342
                ],
                "error_msg": [
                    410,
                    419,
                    412
                ],
                "is_list_like": [
                    769,
                    773,
                    774,
                    2318,
                    411,
                    543,
                    418,
                    1202,
                    3005,
                    1621,
                    476,
                    878,
                    879,
                    881,
                    885,
                    886,
                    763,
                    766,
                    767
                ],
                "arrays": [
                    417,
                    484,
                    423,
                    424,
                    489,
                    427,
                    491,
                    429,
                    493,
                    495,
                    2000,
                    2004,
                    2005,
                    411,
                    413,
                    414
                ],
                "is_iterator": [
                    545,
                    1484,
                    413,
                    478
                ],
                "array": [
                    417,
                    418
                ],
                "factorize_from_iterables": [
                    427,
                    548
                ],
                "arr": [
                    429
                ],
                "tuples": [
                    481,
                    485,
                    486,
                    487,
                    489,
                    490,
                    491,
                    493,
                    476,
                    478,
                    479
                ],
                "np.ndarray": [
                    2016,
                    485,
                    2630,
                    2055,
                    2026,
                    3480,
                    954
                ],
                "tuples._values": [
                    487
                ],
                "T": [
                    489,
                    491
                ],
                "lib.tuples_to_object_array": [
                    489
                ],
                "lib.to_object_array_tuples": [
                    491
                ],
                "MultiIndex.from_arrays": [
                    3243,
                    3196,
                    2005,
                    495
                ],
                "iterables": [
                    545,
                    546,
                    548,
                    550,
                    543
                ],
                "it": [
                    550
                ],
                "cartesian_product": [
                    552
                ],
                "df": [
                    617,
                    614
                ],
                "ABCDataFrame": [
                    614
                ],
                "column_names": [
                    617,
                    618
                ],
                "columns": [
                    617,
                    619
                ],
                "df.items": [
                    617
                ],
                "cls.from_arrays": [
                    619
                ],
                "cls": [
                    619
                ],
                "x._shallow_copy": [
                    626
                ],
                "x": [
                    3009,
                    3012,
                    1125,
                    1126,
                    1352,
                    1355,
                    1901,
                    626,
                    1875
                ],
                "self._levels": [
                    804,
                    682,
                    1868,
                    626,
                    692
                ],
                "self._names": [
                    1537,
                    626,
                    1228,
                    1173
                ],
                "level._no_setting_name": [
                    630
                ],
                "self.values": [
                    636,
                    2017,
                    2328,
                    1671,
                    3402,
                    2007,
                    1368,
                    956
                ],
                "validate": [
                    795,
                    668,
                    1206
                ],
                "self.nlevels": [
                    1287,
                    1416,
                    1289,
                    1291,
                    1295,
                    1297,
                    1685,
                    3355,
                    796,
                    3100,
                    3356,
                    671,
                    3106,
                    3238,
                    1704,
                    3112,
                    1333,
                    1209,
                    1215,
                    3143,
                    969,
                    970,
                    3146,
                    1998,
                    3278,
                    2001,
                    3324,
                    2647,
                    2649,
                    2652,
                    3295,
                    3296,
                    2792,
                    2411,
                    2172,
                    3325,
                    2174
                ],
                "new_levels": [
                    2177,
                    3074,
                    3075,
                    2182,
                    3080,
                    1814,
                    3359,
                    677,
                    1064,
                    682,
                    3371,
                    684,
                    685,
                    3375,
                    688,
                    692,
                    1078,
                    1081,
                    1851,
                    1083,
                    1087,
                    1858,
                    1748,
                    2145,
                    1767,
                    2152,
                    1771,
                    2157
                ],
                "_shallow_copy": [
                    684,
                    678
                ],
                "ensure_index": [
                    678,
                    2315,
                    684,
                    2384,
                    2389,
                    3103
                ],
                "lev": [
                    1540,
                    1541,
                    1818,
                    1826,
                    803,
                    804,
                    678,
                    807,
                    681,
                    810,
                    683,
                    684,
                    811,
                    1842,
                    2229,
                    1849,
                    1851,
                    2238,
                    1217,
                    2753,
                    2754,
                    1220,
                    2248,
                    2249,
                    1228,
                    2253,
                    2254,
                    2255,
                    1108,
                    1109,
                    1111,
                    1751,
                    1113,
                    1753,
                    1756,
                    1760,
                    1126,
                    1767,
                    2537,
                    1131,
                    2540,
                    2541,
                    2545,
                    1141,
                    2550,
                    1914,
                    1918,
                    1535
                ],
                "level_numbers": [
                    681,
                    683,
                    809,
                    807
                ],
                "self._get_level_number": [
                    1217,
                    2149,
                    2150,
                    1575,
                    807,
                    681,
                    2092,
                    2764,
                    3404,
                    1585,
                    2737,
                    2229,
                    2171
                ],
                "lev_num": [
                    809,
                    810,
                    683,
                    684,
                    811
                ],
                "self._verify_integrity": [
                    688,
                    1903,
                    815
                ],
                "self._codes": [
                    808,
                    689,
                    790,
                    817
                ],
                "self.names": [
                    1282,
                    2179,
                    3335,
                    1033,
                    1937,
                    1954,
                    3375,
                    691,
                    3390,
                    1089,
                    3395,
                    3401,
                    2005,
                    1883,
                    2012,
                    987,
                    1630,
                    2274,
                    2147,
                    1131,
                    2412,
                    1773,
                    2029,
                    2415,
                    3319,
                    1276
                ],
                "self._set_names": [
                    1905,
                    694
                ],
                "self._tuples": [
                    1328,
                    1329,
                    819,
                    696,
                    1342,
                    1343
                ],
                "self._reset_cache": [
                    697,
                    820
                ],
                "inplace": [
                    777,
                    895,
                    785,
                    889
                ],
                "idx": [
                    896,
                    778,
                    2379,
                    780,
                    781,
                    782,
                    2380,
                    2382,
                    786,
                    2550,
                    2552,
                    2553,
                    890,
                    2555,
                    892,
                    893,
                    894
                ],
                "self._shallow_copy": [
                    892,
                    3315,
                    780,
                    973
                ],
                "idx._reset_identity": [
                    893,
                    781
                ],
                "idx._set_levels": [
                    782
                ],
                "view": [
                    803
                ],
                "_coerce_indexer_frozen": [
                    811,
                    803
                ],
                "idx._set_codes": [
                    894
                ],
                "kwargs.get": [
                    929
                ],
                "kwargs": [
                    929,
                    2017,
                    931,
                    971,
                    973,
                    1069,
                    1944,
                    987,
                    989,
                    990,
                    991
                ],
                "self._validate_names": [
                    930
                ],
                "deep": [
                    930,
                    933,
                    1031,
                    1037,
                    1010
                ],
                "deepcopy": [
                    937,
                    939
                ],
                "self.copy": [
                    960,
                    1453,
                    991
                ],
                "result._id": [
                    961
                ],
                "self._id": [
                    961
                ],
                "values": [
                    1342,
                    967,
                    1576,
                    1577,
                    3401,
                    3402,
                    973,
                    2094,
                    1359,
                    1360,
                    2096,
                    3409,
                    1331,
                    1363,
                    986,
                    1340,
                    990
                ],
                "_": [
                    969,
                    970,
                    3465,
                    2385,
                    2299
                ],
                "Any": [
                    976
                ],
                "key": [
                    2816,
                    1922,
                    1923,
                    1413,
                    1414,
                    1416,
                    1929,
                    1930,
                    2824,
                    1932,
                    2827,
                    3464,
                    3465,
                    1424,
                    1425,
                    2577,
                    1427,
                    2580,
                    2865,
                    1458,
                    2870,
                    2871,
                    2874,
                    2875,
                    2748,
                    2878,
                    2753,
                    1474,
                    2884,
                    2686,
                    1484,
                    1485,
                    2767,
                    2768,
                    977,
                    2642,
                    979,
                    2643,
                    2770,
                    2646,
                    2773,
                    1496,
                    2774,
                    1498,
                    2780,
                    2653,
                    2910,
                    1505,
                    2786,
                    2660,
                    2788,
                    2917,
                    2792,
                    2666,
                    1515,
                    2795,
                    2797,
                    2924,
                    2799,
                    2802,
                    1910,
                    1911,
                    1915,
                    1918
                ],
                "self.get_loc": [
                    2064,
                    2786,
                    979,
                    1462
                ],
                "Appender": [
                    1442,
                    2019,
                    3398,
                    3303,
                    2312,
                    1579,
                    1005,
                    975,
                    2351,
                    1234,
                    1429,
                    1942,
                    984
                ],
                "_index_shared_docs": [
                    1442,
                    2019,
                    3303,
                    2312,
                    1579,
                    975,
                    2351,
                    1234,
                    1942,
                    984
                ],
                "kwargs.pop": [
                    987,
                    989
                ],
                "MultiIndex.from_tuples": [
                    3331,
                    3396,
                    3301,
                    2407,
                    3401,
                    2323,
                    1269,
                    2012,
                    990
                ],
                "np.dtype": [
                    994,
                    995
                ],
                "cache_readonly": [
                    993,
                    1345,
                    1379,
                    1384,
                    1687,
                    1389,
                    1012,
                    1271,
                    1304,
                    1370
                ],
                "l": [
                    1001,
                    1003,
                    1308,
                    1382
                ],
                "f": [
                    1425,
                    1003
                ],
                "self._inferred_type_levels": [
                    1003,
                    1382
                ],
                "self._nbytes": [
                    1010,
                    1015
                ],
                "Index.memory_usage.__doc__": [
                    1005
                ],
                "Index.memory_usage": [
                    1005
                ],
                "objsize": [
                    1033,
                    1029
                ],
                "level_nbytes": [
                    1034,
                    1031
                ],
                "i.memory_usage": [
                    1031
                ],
                "label_nbytes": [
                    1032,
                    1034
                ],
                "i.nbytes": [
                    1032
                ],
                "names_nbytes": [
                    1033,
                    1034
                ],
                "getsizeof": [
                    1033
                ],
                "self._engine.sizeof": [
                    1037
                ],
                "self._engine": [
                    2340,
                    2347,
                    2795,
                    1037,
                    2653,
                    1471
                ],
                "formatter_funcs": [
                    1046,
                    1047
                ],
                "level._formatter_func": [
                    1046
                ],
                "func": [
                    1047
                ],
                "val": [
                    1047
                ],
                "tup": [
                    2528,
                    2530,
                    2534,
                    2536,
                    1047
                ],
                "format_object_summary": [
                    1053
                ],
                "self._formatter_func": [
                    1054
                ],
                "format_object_attrs": [
                    1061
                ],
                "level._format_native_types": [
                    1069
                ],
                "na_rep": [
                    1074,
                    1109,
                    1069
                ],
                "mask": [
                    2306,
                    2307,
                    2308,
                    1071,
                    1072,
                    2096,
                    1970,
                    1971,
                    2097,
                    1077,
                    2100,
                    1975,
                    2756,
                    2757,
                    2758,
                    2637,
                    2638,
                    2639,
                    2640,
                    1116,
                    1117,
                    1119,
                    1249,
                    1250,
                    1253,
                    1254,
                    2680,
                    2683,
                    2684
                ],
                "mask.any": [
                    1072,
                    2307,
                    1971,
                    1117
                ],
                "nan_index": [
                    1073,
                    1077
                ],
                "np.append": [
                    1074
                ],
                "level_codes.flags.writeable": [
                    1075
                ],
                "level_codes.flags": [
                    1075
                ],
                "level_codes.copy": [
                    1076
                ],
                "new_levels.append": [
                    3371,
                    1851,
                    1078,
                    1767
                ],
                "new_codes.append": [
                    1768,
                    1852,
                    3372,
                    1079
                ],
                "_format_native_types": [
                    1083
                ],
                "take": [
                    1241,
                    1083
                ],
                "mi": [
                    1093,
                    1086
                ],
                "mi.values": [
                    1093
                ],
                "stringified_levels": [
                    1128,
                    1131,
                    1107
                ],
                "na": [
                    1125,
                    1109,
                    1119
                ],
                "_get_na_rep": [
                    1109
                ],
                "lev.dtype.type": [
                    1109
                ],
                "lev.dtype": [
                    1109
                ],
                "formatted": [
                    1120,
                    1124,
                    1128,
                    1113,
                    1118,
                    1119
                ],
                "lev.take": [
                    1760,
                    1113,
                    1849
                ],
                "formatter": [
                    1113
                ],
                "np.array": [
                    2914,
                    2319,
                    2196,
                    1141,
                    1339,
                    1118
                ],
                "formatted.tolist": [
                    1120
                ],
                "pprint_thing": [
                    1136,
                    1125
                ],
                "algos.take_1d": [
                    1540,
                    1765,
                    1126
                ],
                "algos": [
                    1250,
                    1539,
                    1540,
                    1765,
                    1126,
                    1834,
                    3115,
                    3402,
                    2096,
                    3121,
                    1245
                ],
                "lev._values": [
                    1540,
                    1126
                ],
                "stringified_levels.append": [
                    1128
                ],
                "result_levels": [
                    1155,
                    1156,
                    1130,
                    1163,
                    1165,
                    1142
                ],
                "level.append": [
                    1135
                ],
                "level.extend": [
                    1141
                ],
                "result_levels.append": [
                    1142
                ],
                "sparsify": [
                    1152,
                    1153,
                    1144,
                    1145,
                    1147
                ],
                "get_option": [
                    1145
                ],
                "sentinel": [
                    1153,
                    3434,
                    1148,
                    1156
                ],
                "_sparsify": [
                    1155
                ],
                "adjoin": [
                    1159
                ],
                "adj": [
                    1162,
                    1163
                ],
                "_get_adjustment": [
                    1162
                ],
                "split": [
                    1163
                ],
                "adj.adjoin": [
                    1163
                ],
                "space": [
                    1163
                ],
                "is_hashable": [
                    1224
                ],
                "_set_names": [
                    1231
                ],
                "_get_names": [
                    1231
                ],
                "indexer": [
                    2734,
                    2736,
                    2237,
                    1236,
                    3285,
                    3286,
                    2775,
                    2776,
                    3288,
                    2774,
                    2263,
                    1241,
                    2266,
                    2268,
                    2269,
                    1756,
                    1245,
                    1760,
                    1249,
                    1250,
                    1763,
                    1252,
                    1764,
                    2279,
                    2785,
                    2786,
                    2790,
                    2801,
                    2294,
                    2297,
                    2299,
                    2302,
                    2303,
                    2818,
                    2819,
                    2821,
                    2310,
                    2822,
                    2823,
                    2825,
                    2827,
                    2828,
                    2838,
                    2844,
                    2340,
                    2854,
                    2855,
                    2856,
                    2347,
                    2349,
                    2385,
                    2391,
                    2394,
                    2401,
                    2403,
                    2404,
                    2417,
                    2973,
                    1446,
                    1448,
                    1452,
                    2991,
                    2992,
                    2993,
                    2995,
                    2996,
                    3003,
                    3012,
                    3021,
                    3028,
                    3033,
                    3035,
                    3037,
                    3041,
                    3045,
                    3049,
                    3051
                ],
                "level_index": [
                    2883,
                    1256,
                    1258,
                    1260,
                    1261,
                    1263,
                    1265,
                    2835,
                    2580,
                    1237,
                    2871,
                    2875,
                    2877,
                    2910
                ],
                "mapper": [
                    2857,
                    1242,
                    2854,
                    1239
                ],
                "level_values": [
                    1241,
                    1242
                ],
                "grouper": [
                    1261,
                    1263,
                    1265,
                    1242,
                    1243
                ],
                "level_values.map": [
                    1242
                ],
                "uniques": [
                    1824,
                    1250,
                    1826,
                    1256,
                    1258,
                    1834,
                    1836,
                    1838,
                    1823,
                    1844,
                    1849,
                    1245,
                    1247
                ],
                "algos.factorize": [
                    1250,
                    1245
                ],
                "ok_codes": [
                    1250,
                    1253
                ],
                "np.empty": [
                    1252,
                    2637,
                    2382
                ],
                "indexer.dtype": [
                    1252
                ],
                "level_index.take": [
                    1258,
                    1261,
                    1263
                ],
                "count": [
                    1276,
                    1277
                ],
                "self.names.count": [
                    1276
                ],
                "is_integer": [
                    1284,
                    1277
                ],
                "self.names.index": [
                    1282
                ],
                "orig_level": [
                    1289,
                    1292
                ],
                "_tuples": [
                    1302
                ],
                "sizes": [
                    1308,
                    1311
                ],
                "np.ceil": [
                    1308
                ],
                "np.log2": [
                    1308
                ],
                "lev_bits": [
                    1321,
                    1318,
                    1311
                ],
                "np.cumsum": [
                    1311
                ],
                "offsets": [
                    1323,
                    1324,
                    1318
                ],
                "astype": [
                    2026,
                    1318
                ],
                "np.concatenate": [
                    2008,
                    1318
                ],
                "MultiIndexPyIntEngine": [
                    1323
                ],
                "MultiIndexUIntEngine": [
                    1324
                ],
                "vals": [
                    1334,
                    1335,
                    1336,
                    1337,
                    1338,
                    1339,
                    1340
                ],
                "self._get_level_values": [
                    1635,
                    1576,
                    1360,
                    1586,
                    2002,
                    1334
                ],
                "is_categorical_dtype": [
                    3306,
                    1335
                ],
                "vals._internal_get_values": [
                    1336
                ],
                "vals.dtype": [
                    1337
                ],
                "ExtensionDtype": [
                    1337
                ],
                "vals.astype": [
                    1338
                ],
                "values.append": [
                    1340
                ],
                "lib.fast_zip": [
                    1342
                ],
                "x.is_monotonic": [
                    1352
                ],
                "libalgos.is_lexsorted": [
                    1705,
                    1354
                ],
                "libalgos": [
                    1705,
                    1354
                ],
                "x.astype": [
                    1355
                ],
                "sort_order": [
                    1363,
                    1364
                ],
                "np.lexsort": [
                    1363
                ],
                "is_monotonic": [
                    1368,
                    1364
                ],
                "is_monotonic_increasing": [
                    1377
                ],
                "i.inferred_type": [
                    1387
                ],
                "hash_tuples": [
                    1392,
                    1414
                ],
                "stringify": [
                    1425,
                    1420
                ],
                "k": [
                    1420,
                    1421,
                    1422,
                    1425,
                    3361,
                    3362,
                    2679,
                    1704,
                    1705,
                    1706,
                    2807,
                    3367,
                    3369,
                    1458,
                    1462,
                    2998,
                    3000,
                    1465,
                    3002,
                    3003,
                    3005,
                    1471,
                    2753,
                    2754,
                    3009,
                    1479,
                    3026,
                    3030,
                    2007,
                    3035,
                    2780,
                    3419,
                    3043,
                    3428,
                    2537,
                    2802,
                    2803,
                    2804,
                    2805,
                    2551,
                    2808,
                    2681,
                    2810,
                    2812,
                    2813
                ],
                "self._have_mixed_levels": [
                    1425
                ],
                "hash_tuple": [
                    1427
                ],
                "shape": [
                    2245,
                    2249,
                    2255,
                    2259,
                    1431,
                    1432
                ],
                "ids": [
                    1432,
                    1434
                ],
                "get_group_index": [
                    1432
                ],
                "duplicated_int64": [
                    1434
                ],
                "keep": [
                    1434
                ],
                "Index.duplicated.__doc__": [
                    1429
                ],
                "Index.duplicated": [
                    1429
                ],
                "nans": [
                    1448,
                    1444,
                    1446
                ],
                "how": [
                    1450,
                    1445,
                    1447
                ],
                "np.all": [
                    1448
                ],
                "s": [
                    1457,
                    1479,
                    2964,
                    1471
                ],
                "com.values_from_object": [
                    1457,
                    1458,
                    3103
                ],
                "com": [
                    1922,
                    2981,
                    2057,
                    2091,
                    1457,
                    1458,
                    3026,
                    2071,
                    2964,
                    1911,
                    3000,
                    3103
                ],
                "series": [
                    1457,
                    1466,
                    1467,
                    1463
                ],
                "loc": [
                    2688,
                    2064,
                    2067,
                    2068,
                    2069,
                    2070,
                    2071,
                    2079,
                    2080,
                    2082,
                    3372,
                    1462,
                    1463,
                    1464,
                    3386,
                    2754,
                    2755,
                    2757,
                    2630,
                    2631,
                    2758,
                    2633,
                    2634,
                    2635,
                    2760,
                    2639,
                    2643,
                    2644,
                    2545,
                    2546,
                    2547,
                    2548,
                    2677,
                    2680,
                    2684,
                    2685
                ],
                "new_values": [
                    1467,
                    1463
                ],
                "series._values": [
                    1463
                ],
                "new_index": [
                    2754,
                    2279,
                    2776,
                    2736,
                    2745,
                    2740,
                    2775,
                    1464,
                    1465,
                    1467,
                    2271
                ],
                "maybe_droplevels": [
                    1465
                ],
                "__finalize__": [
                    1466
                ],
                "series._constructor": [
                    1466
                ],
                "series.name": [
                    1467
                ],
                "self._engine.get_value": [
                    1471
                ],
                "_try_mi": [
                    1498,
                    1474,
                    1505
                ],
                "libindex.get_value_at": [
                    1479
                ],
                "InvalidIndexError": [
                    1515,
                    1485
                ],
                "e1": [
                    1489,
                    1487
                ],
                "datetime.datetime": [
                    1496
                ],
                "datetime": [
                    1496
                ],
                "np.datetime64": [
                    1496,
                    3446
                ],
                "Timestamp": [
                    1505
                ],
                "tslibs.OutOfBoundsDatetime": [
                    1511
                ],
                "tslibs": [
                    1511
                ],
                "unique": [
                    1538,
                    1583
                ],
                "algos.unique": [
                    1834,
                    1539
                ],
                "filled": [
                    1540,
                    1541
                ],
                "lev._na_value": [
                    1540
                ],
                "lev._shallow_copy": [
                    1541
                ],
                "self.set_levels": [
                    1590
                ],
                "i._to_safe_for_reshape": [
                    1590
                ],
                "idx_names": [
                    1636,
                    1628,
                    1630
                ],
                "DataFrame": [
                    1633
                ],
                "lvlname": [
                    1635,
                    1636
                ],
                "index": [
                    3463,
                    1641,
                    3467,
                    2093,
                    2094,
                    3473,
                    3477
                ],
                "result.index": [
                    1642
                ],
                "self.lexsort_depth": [
                    2528,
                    2912,
                    2659,
                    2531,
                    2897,
                    1685,
                    2965,
                    2968,
                    2072
                ],
                "int64_codes": [
                    1705,
                    1703
                ],
                "ensure_int64": [
                    1763,
                    3372,
                    1703
                ],
                "self.is_lexsorted": [
                    1745
                ],
                "self.is_monotonic": [
                    1745
                ],
                "lev.is_monotonic": [
                    1753
                ],
                "lev.argsort": [
                    1756
                ],
                "ri": [
                    1764,
                    1765
                ],
                "lib.get_reverse_indexer": [
                    1764
                ],
                "changed": [
                    1856,
                    1817,
                    1828
                ],
                "np.bincount": [
                    1823
                ],
                "has_na": [
                    1824,
                    1826,
                    1835,
                    1842,
                    1844,
                    1849
                ],
                "na_idx": [
                    1836,
                    1838
                ],
                "code_mapping": [
                    1842,
                    1844,
                    1846
                ],
                "np.zeros": [
                    2978,
                    2756,
                    2860,
                    3408,
                    1842
                ],
                "np.arange": [
                    2993,
                    2195,
                    1844,
                    2677,
                    3288,
                    2843,
                    2303
                ],
                "self.view": [
                    1854
                ],
                "d": [
                    1885,
                    1879
                ],
                "ibase._new_Index": [
                    1885
                ],
                "state": [
                    1890,
                    1891,
                    1892,
                    1893,
                    1894,
                    1896,
                    1898
                ],
                "state.get": [
                    1891,
                    1892,
                    1893,
                    1894
                ],
                "nd_state": [
                    1898
                ],
                "own_state": [
                    1898,
                    1899
                ],
                "self._set_levels": [
                    1901
                ],
                "self._set_codes": [
                    1904,
                    1902
                ],
                "self._reset_identity": [
                    1907
                ],
                "is_scalar": [
                    2577,
                    1910
                ],
                "com.cast_scalar_indexer": [
                    1911
                ],
                "retval": [
                    1920,
                    1913,
                    1916,
                    1918
                ],
                "retval.append": [
                    1916,
                    1918
                ],
                "np.nan": [
                    1916
                ],
                "com.is_bool_indexer": [
                    3000,
                    1922,
                    2981,
                    2071
                ],
                "np.asarray": [
                    1923,
                    1930,
                    3116,
                    3122,
                    1976,
                    3002
                ],
                "nv.validate_take": [
                    1944
                ],
                "nv": [
                    1944,
                    2021
                ],
                "indices": [
                    1963,
                    1969,
                    1970,
                    1945,
                    1979,
                    1948
                ],
                "ensure_platform_int": [
                    2022,
                    2855,
                    2349,
                    2319,
                    1945,
                    2268
                ],
                "taken": [
                    1954,
                    1969,
                    1973,
                    1977,
                    1946,
                    1979,
                    1980
                ],
                "self._assert_take_fillable": [
                    1946
                ],
                "allow_fill": [
                    1962,
                    1949
                ],
                "fill_value": [
                    1962,
                    1950
                ],
                "msg": [
                    3329,
                    2082,
                    2083,
                    3333,
                    3307,
                    1964,
                    3308,
                    1968
                ],
                "lab.take": [
                    1969,
                    1979
                ],
                "lab": [
                    2537,
                    2540,
                    2541,
                    2542,
                    1969,
                    2545,
                    2550,
                    1979
                ],
                "masked": [
                    1976,
                    1977,
                    1972
                ],
                "new_label": [
                    1973,
                    1974
                ],
                "label_values": [
                    1976,
                    1974,
                    1975
                ],
                "na_value": [
                    1975
                ],
                "masked.append": [
                    1976
                ],
                "other": [
                    3331,
                    3335,
                    3336,
                    3091,
                    3094,
                    3222,
                    3223,
                    3097,
                    3225,
                    3099,
                    3100,
                    3229,
                    3103,
                    3106,
                    3109,
                    3119,
                    3122,
                    3395,
                    3269,
                    3270,
                    3143,
                    3272,
                    3321,
                    1994,
                    1995,
                    3147,
                    3275,
                    1998,
                    2003,
                    3285,
                    2007,
                    3184,
                    3185,
                    3187,
                    3193,
                    3322,
                    3323
                ],
                "o": [
                    2003,
                    1998
                ],
                "o.nlevels": [
                    1998
                ],
                "label": [
                    2467,
                    2468,
                    2469,
                    2002,
                    2004
                ],
                "appended": [
                    2003,
                    2004
                ],
                "o._get_level_values": [
                    2003
                ],
                "arrays.append": [
                    2004
                ],
                "label.append": [
                    2004
                ],
                "to_concat": [
                    2008,
                    2007
                ],
                "k._values": [
                    2007
                ],
                "new_tuples": [
                    2008,
                    2012,
                    2014
                ],
                "self.values.argsort": [
                    2017
                ],
                "args": [
                    2017
                ],
                "nv.validate_repeat": [
                    2021
                ],
                "axis": [
                    2021
                ],
                "repeats": [
                    2026,
                    2022
                ],
                "repeat": [
                    2026
                ],
                "level_codes.view": [
                    2026
                ],
                "np.intp": [
                    2026
                ],
                "self._drop_from_level": [
                    2053
                ],
                "errors": [
                    2097,
                    2085,
                    2053
                ],
                "com.index_labels_to_array": [
                    2057,
                    2091
                ],
                "inds": [
                    2080,
                    2088,
                    2061,
                    2068,
                    2070
                ],
                "inds.append": [
                    2068
                ],
                "inds.extend": [
                    2080,
                    2070
                ],
                "loc.start": [
                    2070
                ],
                "loc.stop": [
                    2070
                ],
                "warnings.warn": [
                    2073,
                    2671
                ],
                "warnings": [
                    2073,
                    2671
                ],
                "PerformanceWarning": [
                    2673,
                    2076
                ],
                "loc.nonzero": [
                    2079
                ],
                "self.delete": [
                    2088
                ],
                "index.get_indexer": [
                    2094
                ],
                "algos.isin": [
                    2096,
                    3402
                ],
                "mask.all": [
                    2097,
                    2683
                ],
                "new_names": [
                    2147,
                    2179,
                    2182,
                    2154,
                    2157
                ],
                "j": [
                    3075,
                    2150,
                    2152,
                    2153,
                    2154,
                    2921,
                    2922,
                    2925,
                    2905,
                    2906,
                    3071
                ],
                "order": [
                    2177,
                    2178,
                    2179,
                    2171,
                    2172,
                    2175
                ],
                "level_codes.dtype": [
                    2197
                ],
                "Categorical.from_codes": [
                    2201
                ],
                "Categorical": [
                    2201
                ],
                "cats": [
                    2201
                ],
                "ascending": [
                    2233,
                    2234,
                    2265,
                    2238
                ],
                "lexsort_indexer": [
                    2237
                ],
                "self.levshape": [
                    2245
                ],
                "primary": [
                    2248,
                    2258,
                    2263
                ],
                "primshp": [
                    2249,
                    2259,
                    2263
                ],
                "codes.pop": [
                    2254
                ],
                "shape.pop": [
                    2255
                ],
                "sort_remaining": [
                    2257
                ],
                "indexer_from_factorized": [
                    2263
                ],
                "level_codes.take": [
                    2269
                ],
                "keyarr": [
                    2305,
                    2308,
                    2310,
                    2294,
                    2297,
                    2299
                ],
                "_convert_listlike_indexer": [
                    2294
                ],
                "kind": [
                    2525,
                    2294
                ],
                "self.reindex": [
                    2299
                ],
                "check": [
                    2305,
                    2306
                ],
                "get_indexer": [
                    2328,
                    2305
                ],
                "method": [
                    2340,
                    2341,
                    2372,
                    2314,
                    2327,
                    2329,
                    2395,
                    2622,
                    2335
                ],
                "missing.clean_reindex_fill_method": [
                    2314
                ],
                "missing": [
                    2314
                ],
                "target": [
                    2315,
                    2318,
                    2321,
                    2323,
                    2329,
                    2340,
                    2347,
                    2353,
                    2369,
                    2377,
                    2378,
                    2382,
                    2384,
                    2385,
                    2386,
                    2389,
                    2390,
                    2395,
                    2400,
                    2402,
                    2404,
                    2407,
                    2411,
                    2412,
                    2414,
                    2415,
                    2417
                ],
                "limit": [
                    2329,
                    2395,
                    2340
                ],
                "tolerance": [
                    2336,
                    2329,
                    2395
                ],
                "self.is_unique": [
                    2792,
                    2393,
                    2332,
                    2652
                ],
                "self._engine.get_indexer": [
                    2347,
                    2340
                ],
                "get_indexer_non_unique": [
                    2353
                ],
                "preserve_names": [
                    2369,
                    2410
                ],
                "ibase._ensure_has_len": [
                    2377
                ],
                "attrs": [
                    2380,
                    2381,
                    2382
                ],
                "idx._get_attributes_dict": [
                    2380
                ],
                "attrs.pop": [
                    2381
                ],
                "_simple_new": [
                    2382
                ],
                "idx.dtype": [
                    2382
                ],
                "self._join_level": [
                    2385
                ],
                "self.equals": [
                    3225,
                    3275,
                    3187,
                    2390
                ],
                "self.get_indexer": [
                    2394
                ],
                "self.take": [
                    2404
                ],
                "target.nlevels": [
                    2411
                ],
                "target.names": [
                    2412,
                    2415
                ],
                "target.copy": [
                    2414
                ],
                "Union": [
                    2420
                ],
                "Hashable": [
                    2420,
                    2557
                ],
                "Sequence": [
                    2420
                ],
                "self._partial_tup_index": [
                    2469
                ],
                "side": [
                    2469,
                    2545,
                    2546,
                    2548,
                    2555
                ],
                "slice_locs": [
                    2525,
                    3071
                ],
                "start": [
                    2688,
                    2843,
                    2871,
                    2873,
                    2883,
                    2886,
                    2888,
                    2893,
                    2895,
                    2901,
                    2904,
                    2525,
                    3421,
                    3422,
                    3424,
                    2661,
                    2535,
                    2665,
                    2538,
                    2669,
                    2548,
                    2677,
                    2552,
                    2553,
                    2555
                ],
                "end": [
                    2552,
                    2538,
                    2525,
                    2535
                ],
                "step": [
                    2886,
                    2895,
                    2897,
                    2901,
                    2906,
                    2843,
                    2525,
                    2878
                ],
                "UnsortedIndexError": [
                    2529,
                    2966
                ],
                "n": [
                    2978,
                    2982,
                    2534,
                    2993,
                    2551,
                    2972
                ],
                "zipped": [
                    2536,
                    2537
                ],
                "labs": [
                    2537,
                    2538
                ],
                "section": [
                    2538,
                    2548,
                    2552,
                    2553,
                    2555
                ],
                "lev.is_type_compatible": [
                    2541
                ],
                "lib.infer_dtype": [
                    2541
                ],
                "lev.searchsorted": [
                    2545
                ],
                "section.searchsorted": [
                    2552,
                    2553,
                    2555,
                    2548
                ],
                "self._get_loc_single_level_index": [
                    2680,
                    2910,
                    2550
                ],
                "level_index.get_loc": [
                    2875,
                    2580,
                    2871
                ],
                "loc.dtype": [
                    2630
                ],
                "lib.maybe_indices_to_slice": [
                    2633
                ],
                "mask.fill": [
                    2638
                ],
                "self._get_level_indexer": [
                    3012,
                    2827,
                    2643,
                    2804,
                    2774,
                    3035
                ],
                "_maybe_to_slice": [
                    2688,
                    2644
                ],
                "keylen": [
                    2649,
                    2652,
                    2646,
                    2647
                ],
                "self._engine.get_loc": [
                    2795,
                    2653
                ],
                "lead_key": [
                    2660,
                    2662,
                    2679
                ],
                "follow_key": [
                    2668,
                    2660,
                    2679
                ],
                "stop": [
                    2688,
                    2875,
                    2883,
                    2661,
                    2888,
                    2665,
                    2669,
                    2894,
                    2895,
                    2677,
                    2901,
                    2905,
                    2843,
                    2877
                ],
                "self.slice_locs": [
                    3072,
                    2662
                ],
                "drop_level": [
                    2790,
                    2825,
                    2762,
                    2828,
                    2733,
                    2775
                ],
                "orig_index": [
                    2736,
                    2744
                ],
                "new_index.droplevel": [
                    2740
                ],
                "self.get_loc_level": [
                    2754,
                    3043
                ],
                "maybe_mi_droplevels": [
                    2790,
                    2825,
                    2762,
                    2828,
                    2775
                ],
                "ilevels": [
                    2824,
                    2825,
                    2787,
                    2790
                ],
                "e": [
                    2797
                ],
                "partial_selection": [
                    2799
                ],
                "k.start": [
                    2807
                ],
                "k.stop": [
                    2807
                ],
                "k_index": [
                    2810,
                    2819,
                    2821
                ],
                "r": [
                    2977,
                    2979,
                    2980,
                    2981,
                    2982,
                    2856,
                    2988,
                    2861,
                    2989,
                    2843
                ],
                "Series": [
                    2856,
                    2854
                ],
                "codes.take": [
                    2855
                ],
                "nonzero": [
                    2856,
                    3286
                ],
                "isin": [
                    2856
                ],
                "m": [
                    2978,
                    2979,
                    2980,
                    2857,
                    2860,
                    2861,
                    2863
                ],
                "_ndarray_values": [
                    3024,
                    2857,
                    3050
                ],
                "result.map": [
                    2857
                ],
                "np.in1d": [
                    2861
                ],
                "is_unique": [
                    2861
                ],
                "key.start": [
                    2884,
                    2870,
                    2871
                ],
                "key.stop": [
                    2874,
                    2875,
                    2884
                ],
                "key.step": [
                    2884,
                    2878
                ],
                "level_index.slice_indexer": [
                    2883
                ],
                "start.step": [
                    2886
                ],
                "convert_indexer": [
                    2901,
                    2895
                ],
                "level_codes.searchsorted": [
                    2904,
                    2905,
                    2920,
                    2921
                ],
                "locs": [
                    2914,
                    2915,
                    2918
                ],
                "locs.any": [
                    2915
                ],
                "true_slices": [
                    2968,
                    2964,
                    2965
                ],
                "com.is_true_slices": [
                    2964
                ],
                "seq": [
                    2964,
                    2998
                ],
                "m.nonzero": [
                    2980
                ],
                "r.nonzero": [
                    2988
                ],
                "Int64Index": [
                    3024,
                    3050,
                    2989
                ],
                "idxr": [
                    2994,
                    2996
                ],
                "_update_indexer": [
                    3041,
                    3021,
                    3028,
                    3033,
                    3003
                ],
                "_convert_to_indexer": [
                    3034,
                    3003,
                    3042,
                    3011
                ],
                "indexers": [
                    3008,
                    3020,
                    3021,
                    3014
                ],
                "idxrs": [
                    3011,
                    3014
                ],
                "com.is_null_slice": [
                    3026
                ],
                "indexer._ndarray_values": [
                    3051
                ],
                "after": [
                    3072,
                    3068,
                    3071
                ],
                "before": [
                    3072,
                    3068,
                    3071
                ],
                "left": [
                    3072,
                    3077
                ],
                "right": [
                    3072,
                    3077
                ],
                "self.is_": [
                    3091
                ],
                "is_object_dtype": [
                    3099,
                    3309
                ],
                "other.dtype": [
                    3099
                ],
                "other.nlevels": [
                    3106,
                    3100,
                    3143
                ],
                "other_vals": [
                    3104,
                    3103
                ],
                "array_equivalent": [
                    3104,
                    3133
                ],
                "self._ndarray_values": [
                    3104,
                    3193,
                    3228
                ],
                "self_codes": [
                    3113,
                    3114,
                    3116
                ],
                "self_values": [
                    3130,
                    3115,
                    3133
                ],
                "algos.take_nd": [
                    3121,
                    3115
                ],
                "_values": [
                    3122,
                    3116
                ],
                "other_codes": [
                    3120,
                    3122,
                    3119
                ],
                "other.codes": [
                    3119
                ],
                "other_values": [
                    3121,
                    3130,
                    3133
                ],
                "other.levels": [
                    3122,
                    3147
                ],
                "equals": [
                    3147
                ],
                "self._validate_sort_keyword": [
                    3268,
                    3221,
                    3183
                ],
                "sort": [
                    3232,
                    3268,
                    3183,
                    3221,
                    3193,
                    3290
                ],
                "self._assert_can_do_setop": [
                    3184,
                    3269,
                    3222
                ],
                "result_names": [
                    3297,
                    3301,
                    3270,
                    3239,
                    3335,
                    3336,
                    3244,
                    3279,
                    3185,
                    3223,
                    3319,
                    3197
                ],
                "self._convert_can_do_setop": [
                    3185,
                    3270,
                    3223
                ],
                "uniq_tuples": [
                    3233,
                    3235,
                    3244,
                    3192,
                    3197,
                    3230
                ],
                "lib.fast_unique_multiple": [
                    3192
                ],
                "other._ndarray_values": [
                    3193,
                    3229
                ],
                "self_tuples": [
                    3228,
                    3230
                ],
                "other_tuples": [
                    3229,
                    3230
                ],
                "this": [
                    3288,
                    3289,
                    3283,
                    3285
                ],
                "self._get_unique_index": [
                    3283
                ],
                "this.get_indexer": [
                    3285
                ],
                "indexer.take": [
                    3286
                ],
                "label_diff": [
                    3288,
                    3289
                ],
                "np.setdiff1d": [
                    3288
                ],
                "this.size": [
                    3288
                ],
                "difference": [
                    3289,
                    3291,
                    3293,
                    3301
                ],
                "this.values.take": [
                    3289
                ],
                "this.values": [
                    3289
                ],
                "dtype": [
                    3305,
                    3306,
                    3309,
                    3446
                ],
                "pandas_dtype": [
                    3305
                ],
                "other.names": [
                    3395,
                    3335
                ],
                "item": [
                    3361,
                    3354,
                    3355,
                    3356
                ],
                "lev_loc": [
                    3369,
                    3372,
                    3366,
                    3367
                ],
                "level.insert": [
                    3367
                ],
                "level.get_loc": [
                    3369
                ],
                "np.insert": [
                    3372
                ],
                "np.delete": [
                    3386
                ],
                "joined": [
                    3396
                ],
                "num": [
                    3404,
                    3405
                ],
                "levs": [
                    3408,
                    3409,
                    3405,
                    3407
                ],
                "self.get_level_values": [
                    3405
                ],
                "levs.size": [
                    3407
                ],
                "np.bool_": [
                    3408
                ],
                "levs.isin": [
                    3409
                ],
                "Index.isin.__doc__": [
                    3398
                ],
                "Index.isin": [
                    3398
                ],
                "MultiIndex._add_numeric_methods_disabled": [
                    3412
                ],
                "MultiIndex._add_numeric_methods_add_sub_disabled": [
                    3413
                ],
                "MultiIndex._add_logical_methods_disabled": [
                    3414
                ],
                "pivoted": [
                    3424,
                    3418,
                    3421,
                    3422
                ],
                "label_list": [
                    3418,
                    3419
                ],
                "prev": [
                    3440,
                    3427,
                    3422
                ],
                "cur": [
                    3424,
                    3440,
                    3427,
                    3436
                ],
                "sparse_cur": [
                    3425,
                    3429,
                    3430,
                    3434,
                    3436,
                    3437
                ],
                "p": [
                    3433,
                    3427
                ],
                "t": [
                    3433,
                    3427,
                    3429
                ],
                "sparse_cur.append": [
                    3434,
                    3429
                ],
                "result.append": [
                    3437,
                    3430
                ],
                "sparse_cur.extend": [
                    3436
                ],
                "get": [
                    3446
                ],
                "np.timedelta64": [
                    3446
                ],
                "original_index": [
                    3470,
                    3463
                ],
                "index.droplevel": [
                    3473,
                    3467
                ],
                "array_like": [
                    3496,
                    3498,
                    3499,
                    3500
                ],
                "coerce_indexer_dtype": [
                    3496
                ],
                "categories": [
                    3496
                ],
                "array_like.copy": [
                    3498
                ],
                "array_like.flags.writeable": [
                    3499
                ],
                "array_like.flags": [
                    3499
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_85/pandas/tests/groupby/test_apply.py",
                "test_function": "test_apply_multi_level_name",
                "test_function_code": "@pytest.mark.parametrize(\"category\", [False, True])\ndef test_apply_multi_level_name(category):\n    # https://github.com/pandas-dev/pandas/issues/31068\n    b = [1, 2] * 5\n    if category:\n        b = pd.Categorical(b, categories=[1, 2, 3])\n    df = pd.DataFrame(\n        {\"A\": np.arange(10), \"B\": b, \"C\": list(range(10)), \"D\": list(range(10))}\n    ).set_index([\"A\", \"B\"])\n    result = df.groupby(\"B\").apply(lambda x: x.sum())\n    expected = pd.DataFrame(\n        {\"C\": [20, 25], \"D\": [20, 25]}, index=pd.Index([1, 2], name=\"B\")\n    )\n    tm.assert_frame_equal(result, expected)\n    assert df.index.names == [\"A\", \"B\"]",
                "test_error": "RuntimeError: Cannot set name on a level of a MultiIndex. Use 'MultiIndex.set_names' instead.",
                "full_test_error": "category = False\n\n    @pytest.mark.parametrize(\"category\", [False, True])\n    def test_apply_multi_level_name(category):\n        # https://github.com/pandas-dev/pandas/issues/31068\n        b = [1, 2] * 5\n        if category:\n            b = pd.Categorical(b, categories=[1, 2, 3])\n        df = pd.DataFrame(\n            {\"A\": np.arange(10), \"B\": b, \"C\": list(range(10)), \"D\": list(range(10))}\n        ).set_index([\"A\", \"B\"])\n>       result = df.groupby(\"B\").apply(lambda x: x.sum())\n\npandas/tests/groupby/test_apply.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:735: in apply\n    result = self._python_apply_general(f)\npandas/core/groupby/groupby.py:753: in _python_apply_general\n    return self._wrap_applied_output(\npandas/core/groupby/generic.py:1202: in _wrap_applied_output\n    key_index.name = key_names[0]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2], dtype='int64', name='B'), value = 'B'\n\n    @name.setter\n    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n>           raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\nE           RuntimeError: Cannot set name on a level of a MultiIndex. Use 'MultiIndex.set_names' instead.\n\npandas/core/indexes/base.py:1168: RuntimeError",
                "traceback": "pandas/core/groupby/groupby.py:735: in apply\n    result = self._python_apply_general(f)\npandas/core/groupby/groupby.py:753: in _python_apply_general\n    return self._wrap_applied_output(\npandas/core/groupby/generic.py:1202: in _wrap_applied_output\n    key_index.name = key_names[0]",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Int64Index([1, 2], dtype='int64', name='B'), value = 'B'\n\n    @name.setter\n    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n>           raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\nE           RuntimeError: Cannot set name on a level of a MultiIndex. Use 'MultiIndex.set_names' instead.\n\npandas/core/indexes/base.py:1168: RuntimeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('category', [False, True])"
                ]
            }
        ]
    }
}