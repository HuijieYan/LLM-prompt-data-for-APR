{
    "pandas": [
        {
            "bugID": 37,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 268,
            "file_name": "pandas/core/arrays/string_.py",
            "replace_code": "def astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if isinstance(dtype, StringDtype):\n        if copy:\n            return self.copy()\n        return self\n    arr = self._ndarray\n    if isinstance(dtype, ExtensionDtype):\n        # A map between Pandas dtypes and their numpy-compatible versions\n        # Float64Array is a special case, since it's an internal subclass\n        # and we just pass the dtype straight through\n        if dtype is not pd.StringDtype  and dtype.numpy_dtype is not int:\n            if np.any(self.isna):\n                raise ValueError(\n                    \"Cannot convert non-finite values (NA or inf) to integer\"\n                )\n            values = arr.astype(dtype.numpy_dtype, copy=copy)\n            values[:-1][self.isna] = np.nan\n            return self._from_sequence(values)\n    else:\n        return super().astype(dtype, copy)",
            "import_list": []
        }
    ]
}