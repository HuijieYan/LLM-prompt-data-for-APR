{
    "pandas": [
        {
            "bugID": 37,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 268,
            "file_name": "pandas/core/arrays/string_.py",
            "replace_code": "def astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if isinstance(dtype, StringDtype) and dtype.subtype == 'string':\n        if copy:\n            return self.copy()\n        return self\n    elif isinstance(dtype, StringDtype) and dtype.subtype == 'bytes':\n        return self._from_sequence(self._sanitize_values(self._shallow_copy(self._data, copy=copy)), dtype=dtype)\n    elif isinstance(dtype, CategoricalDtype) or isinstance(dtype, PeriodDtype):\n        return super().astype(dtype, copy)\n    else:\n        return self._from_sequence(self._sanitize_values(self._shallow_copy(self._data, copy=copy)), dtype=dtype)",
            "import_list": []
        }
    ]
}