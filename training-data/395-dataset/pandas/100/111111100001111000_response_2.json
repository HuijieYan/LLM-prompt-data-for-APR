{
    "pandas": [
        {
            "bugID": 100,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 9850,
            "file_name": "pandas/core/generic.py",
            "replace_code": "def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, **kwargs):\n    \"\"\"\n    Percentage change between the current and a prior element.\n    Computes the percentage change between the current and the prior element.\n    This function uses the fillna or interpolate method given a fill method to knock out all NaNs in the current and\n    the prior element before computation.\n\n    For the helper `_shared_docs[\"pct_change\"]`, see the object's docstrings.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for forming the prior element.\n    fill_method : str, default 'pad'\n        Method to use for filling holes in reindexed Series (note this does not fill NaNs that already were present).\n        {\u2018backfill\u2019, \u2018bfill\u2019, \u2018pad\u2019, \u2018ffill\u2019, None}\n    limit : int, optional\n        The maximum number of consecutive NaN values to forward/backward fill.\n    freq : DateOffset, timedelta, or offset alias string, optional\n        Increment to use from time series API.\n        `PeriodIndex` -> subtract comp1 from comp2\n    **kwargs\n        Additional keywords have no effect but might be accepted.\n\n    Returns\n    -------\n    DataFrame\n        Percentage change of the current element compared to its prior element.\n\n    See Also\n    --------\n    Series.pct_change: Percentage change function for.Series objects.\n\n    Examples\n    --------\n    For usage examples, please see the documentation for `DataFrame.pct_change`.\n\n    \"\"\"\n    axis = self._get_axis_number(None, kwargs)\n    if fill_method is None:\n        data = self\n    else:\n        data = self.fillna(method=fill_method, limit=limit, axis=axis)\n\n    rs = data.div(data.shift(periods=periods, freq=freq, axis=axis)) - 1\n    rs = rs[~rs.index.duplicated()]  # remove duplicate index values\n    rs = rs.reindex_like(data)\n    if freq is None:\n        mask = rs.isna()\n        rs.values = np.where(mask, np.nan, rs.values)\n    return rs",
            "import_list": []
        }
    ]
}