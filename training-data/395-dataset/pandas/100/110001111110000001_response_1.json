{
    "pandas": [
        {
            "bugID": 100,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 9850,
            "file_name": "pandas/core/generic.py",
            "replace_code": "def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, **kwargs):\n    axis = self._get_axis_number(kwargs.pop(\"axis\", self._stat_axis_name))\n    if fill_method is None:\n        data = self\n    else:\n        data = self.fillna(method=fill_method, limit=limit, axis=axis)\n        \n    # shift the data by the specified periods\n    shifted_data = data.shift(periods=periods, freq=freq, axis=axis, **kwargs)\n    \n    # calculate the percentage change\n    rs = (data - shifted_data) / shifted_data\n    rs = rs.loc[~rs.index.duplicated()]\n    rs = rs.reindex_like(data)\n    if freq is None:\n        mask = isna(com.values_from_object(data))\n        np.putmask(rs.values, mask, np.nan)\n    return rs",
            "import_list": []
        }
    ]
}