{
    "pandas": [
        {
            "bugID": 95,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 67,
            "file_name": "pandas/core/arrays/period.py",
            "replace_code": "def _period_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert Period-like to PeriodDtype\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n        if isinstance(other, str):\n            try:\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # string that can't be parsed as Period\n                return invalid_comparison(self, other, op)\n        elif isinstance(other, int):\n            # Convert integer to Period\n            other = Period(other, freq=self.freq)\n\n        # Handle comparison and compatibility checks\n        result = self._compare_and_check_compatibility(other, op, nat_result)\n\n        return result\n\n    return compat.set_function_name(wrapper, opname, cls)",
            "imports": []
        }
    ]
}