{
    "pandas": [
        {
            "bugID": 95,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 67,
            "file_name": "pandas/core/arrays/period.py",
            "replace_code": "def _period_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert Period-like to PeriodDtype\n    \"\"\"\n    def wrapper(self, other):\n        if op.__name__ in [\"__eq__\", \"__ne__\"]:\n            # Handle equality and inequality comparisons\n            if isinstance(other, str):\n                try:\n                    other = self._scalar_from_string(other)\n                except ValueError:\n                    # string that can't be parsed as Period\n                    return invalid_comparison(self, other, op)\n            elif isinstance(other, int):\n                other = Period(other, freq=self.freq)\n\n            result = op(self.asi8, other.asi8)\n            if isna(other):\n                result.fill(op.__name__ == \"__ne__\")\n        else:\n            if not isinstance(other, (np.ndarray, cls)):\n                return invalid_comparison(self, other, op)\n            \n            other_i8 = self._unbox_scalar(other)\n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                result.fill(False)\n\n        if self._hasnans:\n            result[self._isnan] = op.__name__ == \"__ne__\"\n\n        return result\n\n    return compat.set_function_name(wrapper, f\"__{op.__name__}__\", cls)",
            "import_list": []
        }
    ]
}