{
    "pandas": [
        {
            "bugID": 95,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 67,
            "file_name": "pandas/core/arrays/period.py",
            "replace_code": "def _period_array_cmp(cls, op):\n\n    def wrapper(self, other):\n        ordinal_op = getattr(self.asi8, f\"__{op.__name__}__\")\n    \n        if isinstance(other, str):\n            try:\n                other = self.__class__(other, freq=self.freq)\n            except ValueError:\n                return invalid_comparison(self, other, op)\n        elif isinstance(other, int):\n            other = cls(other, freq=self.freq)\n    \n        if isinstance(other, (cls, self._recognized_scalars)) or other is NaT:\n            other = self._scalar_type(other)\n            self._check_compatible_with(other)\n    \n            other_i8 = self._unbox_scalar(other)\n    \n            result = op(self.view(\"i8\"), other_i8)\n            if isna(other):\n                nat_result = f\"__{op.__name__}__\" == \"__ne__\"\n                result.fill(nat_result)\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n        else:\n            if len(other) != len(self):\n                raise ValueError(\"Lengths must match\")\n            other = np.array(other)\n            if is_object_dtype(other):\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n            elif not cls._is_recognized_dtype(other.dtype):\n                return invalid_comparison(self, other, op)\n            else:\n                assert isinstance(other, cls), type(other)\n                self._check_compatible_with(other)\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n            if o_mask.any():\n                result[o_mask] = nat_result\n        if self._hasnans:\n            result[self._isnan] = nat_result\n        return result\n    \n    return compat.set_function_name(wrapper, f\"__{op.__name__}__\", cls)"
        }
    ]
}