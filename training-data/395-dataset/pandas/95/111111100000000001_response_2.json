{
    "pandas": [
        {
            "bugID": 95,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 67,
            "file_name": "pandas/core/arrays/period.py",
            "replace_code": "def _period_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert Period-like to PeriodDtype\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n        if isinstance(other, (str, int)):\n            other = pd.Period(other, freq=self.freq)\n        \n        if isinstance(other, pd.Period) or pd.isna(other):\n            self._check_compatible_with(other)\n\n            result = op(self.view(\"i8\"), other.view(\"i8\"))\n\n            if pd.isna(other):\n                result.fill(nat_result)\n\n        elif isinstance(other, (np.ndarray, pd.PeriodDtype)):\n            self._check_compatible_with(other)\n\n            result = op(self.view(\"i8\"), other.view(\"i8\"))\n\n            if pd.isna(other).any():\n                result[pd.isna(other)] = nat_result\n\n        elif pd.is_list_like(other):\n            if len(other) != len(self):\n                raise ValueError(\"Lengths must match\")\n            elif isinstance(other, list) or not isinstance(other, (np.ndarray, pd.PeriodDtype)):\n                other = np.array(other)\n\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(op, self.astype(object), other)\n                o_mask = pd.isna(other)\n\n                if o_mask.any():\n                    result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result\n\n    return compat.set_function_name(wrapper, opname, cls)",
            "import_list": []
        }
    ]
}