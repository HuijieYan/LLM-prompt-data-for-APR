{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"Specifying a limit for fillna has not been implemented yet\"\n        )\n\n    codes = self._codes\n\n    # pad / bfill\n    if method is not None:\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(self.categories.dtype)[0]\n        codes = _get_codes_for_values(values, self.categories)\n    else:\n        fill_codes = _get_codes_for_values(value, self.categories)\n        mask = self.isna()\n        if isinstance(value, (ABCSeries, Categorical)):\n            unhandled_cats = value[~value.isin(self.categories)].dropna().to_list()\n            if unhandled_cats:\n                raise ValueError(f\"fill value must be in categories, got {unhandled_cats}\")\n            fill_values_arr = fill_codes.get_values()\n            unhandled_cats = fill_values_arr[~np.isin(fill_values_arr, self.categories.values)]\n            if unhandled_cats.size:\n                raise ValueError(f\"fill value must be in categories, got {unhandled_cats}\")\n\n            fill_codes = fill_codes[mask]\n        else:\n            if not pd.isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n\n            codes[mask] = self.categories.get_loc(value)\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
            "imports": []
        }
    ]
}