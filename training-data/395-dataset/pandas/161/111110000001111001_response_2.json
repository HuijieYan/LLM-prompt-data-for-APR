{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    # ... (other parts of the function)\n\n    # Codes from original function for reference\n    # value, method = validate_fillna_kwargs(\n    #     value, method, validate_scalar_dict_value=False\n    # )\n\n    if not is_scalar(method):\n        raise ValueError(f\"Invalid fillna method: {method}\")\n\n    if method in ['backfill', 'bfill', 'pad', 'ffill']:\n        raise ValueError(f\"Method {method} not supported for Categorical\")\n\n    if limit is not None:\n        raise NotImplementedError(\n            \"Specifying a limit for fillna has not been implemented yet\"\n        )\n\n    filled_codes = self._codes.copy()  # Create a copy of the codes\n\n    # Find NaN indices\n    nan_indices = np.where(filled_codes == -1)[0]\n\n    # Fill NaN values with provided value\n    filled_codes[nan_indices] = self.categories.get_indexer([value] * len(nan_indices))\n\n    return self._constructor(filled_codes, dtype=self.dtype, fastpath=True)",
            "imports": []
        }
    ]
}