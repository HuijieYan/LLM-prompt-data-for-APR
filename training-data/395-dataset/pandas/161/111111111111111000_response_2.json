{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n    try:\n        if value is None:\n            raise ValueError(\"The 'value' parameter must be specified.\")\n        codes = self._codes\n        if method is not None:\n            values = self.to_dense().reshape(-1, len(self))\n            values = interpolate_2d(values, method, 0, None, value).astype(self.categories.dtype)[0]\n            codes = _get_codes_for_values(values, self.categories)\n        else:\n            if isinstance(value, ABCSeries):\n                if not value[~value.isin(self.categories)].isna().all():\n                    raise ValueError(\"Fill value must be in categories\")\n                values_codes = _get_codes_for_values(value, self.categories)\n                indexer = np.where(codes == -1)\n                codes[indexer] = values_codes[values_codes != -1]\n            elif is_hashable(value):\n                if not isna(value) and value not in self.categories:\n                    raise ValueError(\"Fill value must be in categories\")\n                mask = codes == -1\n                if mask.any():\n                    codes = codes.copy()\n                    if isna(value):\n                        codes[mask] = -1\n                    else:\n                        codes[mask] = self.categories.get_loc(value)\n            else:\n                raise TypeError(f\"Invalid value {value}\")\n        return self._constructor(codes, dtype=self.dtype, fastpath=True)\n    except Exception as e:\n        raise e",
            "import_list": []
        }
    ]
}