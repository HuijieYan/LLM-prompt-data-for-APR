{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n    value, method = validate_fillna_kwargs(value, method, validate_scalar_dict_value=False)\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n\n    if isinstance(value, (ABCSeries, Categorical)):\n        if not set(value.unique()).issubset(self.categories):\n            raise ValueError(\"fill value must be in categories\")\n\n        codes = _get_codes_for_values(value, self.categories)\n        return self._constructor(codes, dtype=self.dtype, fastpath=True)\n\n    elif is_hashable(value):\n        if value not in self.categories and not isna(value):\n            raise ValueError(\"fill value must be in categories\")\n\n        codes = self.codes.copy()\n        mask = codes == -1\n        if mask.any():\n            if isna(value):\n                codes[mask] = -1\n            else:\n                codes[mask] = self.categories.get_loc(value)\n\n        return self._constructor(codes, dtype=self.dtype, fastpath=True)\n\n    else:\n        raise TypeError(\n            '\"value\" parameter must be a scalar, dict ' \"or Series, but you passed a \" '\"{0}\"'.format(type(value).__name__)\n        )",
            "imports": []
        }
    ]
}