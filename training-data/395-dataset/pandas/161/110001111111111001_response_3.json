{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n    \n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n    \n    codes = self._codes\n    \n    if method is not None:\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(\n            self.categories.dtype\n        )[0]\n        codes = _get_codes_for_values(values, self.categories)\n    else:\n        # If value is a dict or a Series (a dict value has already\n        # been converted to a Series)\n        if isinstance(value, ABCSeries) or isinstance(value, Categorical):\n            if not getattr(value, 'isin', None):\n                value = Series(value, categories=self.categories)\n            else:\n                if not value[~value.isin(self.categories)].isna().all():\n                    raise ValueError(\"fill value must be in categories\")\n    \n                values_codes = _get_codes_for_values(value, self.categories)\n                indexer = np.where(values_codes != -1)\n                codes[indexer] = values_codes[values_codes != -1]"
        }
    ]
}