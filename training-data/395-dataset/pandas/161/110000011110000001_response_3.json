{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n    \n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. Otherwise, this is the\n        maximum number of entries along the entire axis where NaNs will\n        be filled.\n    \n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    value, method = validate_fillna_kwargs(value, method, validate_scalar_dict_value=True)\n    \n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\"specifying a limit for fillna has not been implemented yet\")\n    \n    codes = self._codes\n    \n    if method is not None:\n        fill_method = {'pad': 'ffill', 'ffill': 'ffill', 'backfill': 'bfill', 'bfill': 'bfill'}\n        if method in fill_method:\n            method = fill_method[method]\n        \n        values = self.to_dense().to_numpy()\n        mask = isna(values)\n    \n        if limit is not None:\n            lmask = mask.copy()\n            lmask[:limit] = False\n            mask[lmask] = False\n        \n        values[mask] = value\n        codes = _get_codes_for_values(values, self.categories)\n    \n    else:\n        # Handling the case when value is a dict or Series\n        if isinstance(value, (ABCSeries, dict)):\n            if not value[~value.isin(self.categories)].isna().all():\n                raise ValueError(\"fill value must be in categories\")\n    \n            values_codes = _get_codes_for_values(value, self.categories)\n            indexer = np.where(values_codes != -1)\n            codes[indexer] = values_codes[values_codes != -1]\n        # Handling the case when value is a scalar\n        elif is_hashable(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n    \n            mask = codes == -1\n            if mask.any():\n                codes[mask] = self.categories.get_loc(value)   \n    \n    return self._constructor(codes, dtype=self.dtype, fastpath=True)"
        }
    ]
}