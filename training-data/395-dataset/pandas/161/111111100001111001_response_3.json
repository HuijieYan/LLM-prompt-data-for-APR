{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n    value, method = validate_fillna_kwargs(value, method, validate_scalar_dict_value=False)\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n\n    codes = self._codes\n\n    if method is not None:\n        raise NotImplementedError(\"method for fillna has not been implemented yet\")\n    else:\n        if isinstance(value, ABCSeries):\n            if not value.cat.ordered and self.dtype.ordered:\n                raise ValueError(\"fill value for unordered Categorical must be ordered\")\n            new_dtype = CategoricalDtype(\n                categories=value.cat.categories.union(self.categories), ordered=True\n            )\n\n            if not value.cat.ordered:\n                value = value.cat.reorder_categories(\n                    self.categories, ordered=True\n                )\n\n            new_codes = _get_codes_for_values(value, value.cat.categories)\n\n            value_map = {i: v for i, v in enumerate(new_codes) if v != -1}\n            remap_categories = [c for c in value.cat.categories if c in value_map]\n            value = value.cat.set_categories(remap_categories, ordered=True)\n            if not value.isnull().any():\n                new_codes = _encode_from_values(value, new_dtype.categories)\n\n            indexer = np.where(codes == -1)[0]\n            mapped_codes = new_codes.take(indexer)\n\n            codes.put(indexer, mapped_codes)\n\n        elif is_scalar(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n            mask = codes == -1\n            if mask.any():\n                codes = codes.copy()\n                if isna(value):\n                    codes[mask] = -1\n                else:\n                    codes[mask] = self.categories.get_loc(value)\n        else:\n            raise TypeError('\"value\" parameter must be a scalar, dict, or Series')\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
            "imports": []
        }
    ]
}