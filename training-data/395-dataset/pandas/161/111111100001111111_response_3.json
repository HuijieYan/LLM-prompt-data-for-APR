{
    "pandas": [
        {
            "bugID": 161,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1782,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def fillna(self, value=None, method=None, limit=None):\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n\n    codes = self._codes\n\n    # Filling NaN values in the target column with values from the series\n    if isinstance(value, ABCSeries):\n        mask = codes == -1\n        if mask.any():\n            codes = codes.copy()\n            values_codes = _get_codes_for_values(value, self.categories)\n            codes[mask] = values_codes[mask]\n\n    # Filling NaN values based on the method\n    elif method is not None:\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(\n            self.categories.dtype\n        )[0]\n        codes = _get_codes_for_values(values, self.categories)\n\n    # Filling NaN values with scalar values\n    elif is_hashable(value):\n        mask = codes == -1\n        if mask.any():\n            codes = codes.copy()\n            codes[mask] = self.categories.get_indexer([value] * mask.sum())\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
            "import_list": []
        }
    ]
}