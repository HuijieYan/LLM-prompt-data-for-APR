{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    res_values = self.obj.values\n    is_integer = pd.api.types.is_integer_dtype(res_values)\n    is_boolean = pd.api.types.is_boolean_dtype(res_values)\n    if is_boolean:\n        res_values = res_values.astype('float64')\n        q = np.asarray(q)\n    elif is_integer:\n        res_values = pd.array(res_values, dtype=\"Int64\")\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_integer:\n            if isinstance(vals, pd.Int64Dtype):\n                inference = np.int64\n            else:\n                inference = \"Int64\"\n        elif is_boolean:\n            inference = None\n        else:\n            raise TypeError(\"'quantile' can only be performed against 'integer' or 'boolean' dtypes!\")\n\n        return vals, inference\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            if pd.api.types.is_integer_dtype(inference):\n                vals = vals.astype(inference)\n\n        return vals\n\n    if is_scalar(q):\n        result = self._get_cythonized_result(\n            \"group_quantile\",\n            aggregate=True,\n            needs_values=True,\n            needs_mask=True,\n            cython_dtype=np.dtype(np.float64),\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            q=q,\n            interpolation=interpolation\n        )\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                cython_dtype=np.dtype(np.float64),\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=qi,\n                interpolation=interpolation\n            )\n            for qi in q\n        ]\n        result = pd.concat(results, axis=0, keys=q)\n        result = result.reorder_levels([1, 0])\n\n    # Fix data type for nullable integer array\n    if is_integer:\n        result = result.astype('Int64')\n    elif is_boolean:\n        result = result.astype('boolean')\n\n    return result",
            "imports": []
        }
    ]
}