{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    from pandas.core.dtypes.common import classes as common_classes\n    import pandas.core.algorithms as algos\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n    \n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n    \n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n    \n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n    \n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key').quantile()\n        val\n    key\n    a    2.0\n    b    3.0\n    \"\"\"\n    from pandas.core.dtypes.common import classes as common_classes\n    import pandas.core.algorithms as algos\n    \n    if isinstance(q, (list, np.ndarray)):\n        return self._python_apply_general(\n            f\"group_quantile_for_list\",\n            q,\n            non_reduction=bool(interpolation),\n            interpolation=interpolation,\n        )\n    \n    elif common_classes._get_dtype_for_values(self.grouper.obj) == \"boolean\":\n        return self._python_apply_general(\n            f\"group_quantile_for_bool\",\n            non_reduction=bool(interpolation),\n            interpolation=interpolation,\n        )\n    else:\n        # type castings for handling integers and nullable integer type\n        dtype = None\n        inference, lower, upper = None, None, None\n        has_series, nat_scalar = False, False\n    \n        # set named aggregator and real dtype for specific returner\n        aggs = [\n            algos.nanmean,\n            algos.nanvar,\n            algos.nanstd,\n            algos.nanmin,\n            algos.nanmax,\n            algos.nanmedian,\n        ]\n    \n        result = np.empty(1, np.float64)\n    \n        if check_dtype_semantic(self.grouper, self.obj):\n            dtype = self.grouper.groupings[0].dtype\n            inference = dtype\n        else:\n            dtype, lower, upper = common_classes(self.grouper, self.obj)\n    \n        def f():\n            return algos.group_quantile(\n                self.grouper.group_info,\n                self.nkeys,\n                self.obj.values._ndarray_values,\n                q,\n                interpolation,\n                lower,\n                upper,\n                result,\n                aggs,\n                nat_scalar,\n                dtype,\n                has_series,\n            )\n    \n        result = self._python_apply_general(f, non_reduction=bool(interpolation))\n    \n    return self._wrap_result(result, dtype=dtype, shape=(len(self.result_index),))"
        }
    ]
}