{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n        \"\"\"\n        Return group values at the given quantile, a la numpy.percentile.\n    \n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            Value(s) between 0 and 1 providing the quantile(s) to compute.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            Method to use when the desired quantile falls between two points.\n    \n        Returns\n        -------\n        Series or DataFrame\n            Return type determined by caller of GroupBy object.\n    \n        See Also\n        --------\n        Series.quantile : Similar method for Series.\n        DataFrame.quantile : Similar method for DataFrame.\n        numpy.percentile : NumPy method to compute qth percentile.\n    \n        Examples\n        --------\n        >>> df = pd.DataFrame([\n        ...     ['a', 1], ['a', 2], ['a', 3],\n        ...     ['b', 1], ['b', 3], ['b', 5]\n        ... ], columns=['key', 'val'])\n        >>> df.groupby('key').quantile()\n            val\n        key\n        a    2.0\n        b    3.0\n        \"\"\"\n        from pandas import concat\n    \n        def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n            if is_object_dtype(vals):\n                raise TypeError(\n                    \"'quantile' cannot be performed against 'object' dtypes!\"\n                )\n    \n            inference = None\n            if is_integer_dtype(vals) or is_integer_array(vals):\n                if is_integer_array(vals):\n                    inference = np.int64\n                    vals = vals.astype(np.float32)\n                else:\n                    inference = np.int64\n            elif is_datetime64_dtype(vals) or is_datetime64tz_dtype(vals):\n                inference = \"datetime64[ns]\"\n                vals = np.asarray(vals).astype(np.float32)\n            elif isinstance(vals, ExtensionArray) and not isinstance(vals, IntegerArray):\n                vals = coerce_to_array(vals)\n    \n            return vals, inference\n    \n        def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n            if inference:\n                # Check for edge case\n                if not (\n                    is_integer_dtype(inference) or is_integer_array(vals)\n                ):\n                    if is_integer_array(vals):\n                        inference = np.dtype(np.int64)\n                        vals = vals.astype(np.float64)\n                    else:\n                        vals = cast_scalar_to_array(vals, dtype=inference)\n    \n            return vals\n    \n        # make sure we have a sanitised q\n        q = q if isinstance(q, (list, np.ndarray)) else [q]\n        check_q = np.asarray(q)\n    \n        if check_q.ndim > 1:\n            raise ValueError(\n                \"q is not a 1d array, one needs to only specify 1 quantile at a time\"\n            )\n    \n        if not is_scalar(q):\n            idx = np.nonzero((q <= 0) | (q >= 1))[0]\n            if len(idx) > 0:\n                raise ValueError(\n                    f\"percentiles should all be in the interval [0, 1]. Found invalid\" f\"percentiles {q[idx]}\"\n                )\n    \n        if np.any(interpolation not in _VALID_INTERPOLATION):\n            raise ValueError(f\"interpolation should be one of {_VALID_INTERPOLATION}\")\n    \n        to_be_squeezed = True if check_q.size == 1 else False\n        func = partial(self._get_cythonized_result, \"group_quantile\", cython_dtype=np.dtype(np.float64), aggregate=True, needs_values=True, needs_mask=True, pre_processing=pre_processor, post_processing=post_processor, q=check_q, interpolation=interpolation)\n        result = self._python_apply_general(func)\n    \n        if to_be_squeezed and result.ndim == 2:\n            # a 2D DataFrame\n            from zipapp import zipapp\n            result = result.squeeze(axis=1)\n    \n        if isinstance(q, (list, np.ndarray)):\n            result.index.names = list(range(1, result.index.nlevels)) + [0]\n            order = list(range(1, result.index.nlevels)) + [0]\n    \n            index_names = np.array(result.index.names)\n            result.index.names = np.arange(len(index_names))\n            result = result.reorder_levels(order)\n            result.index.names = index_names[order]\n    \n            # reorder rows to keep things sorted\n            indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n            return result.take(indices)\n        else:\n            return result",
            "import_list": [
                "from pandas import concat",
                "from zipapp import zipapp"
            ]
        }
    ]
}