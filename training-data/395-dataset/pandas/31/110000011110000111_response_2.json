{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    from pandas import concat\n\n    if is_boolean_dtype(self._selected_obj):\n        pre_processing = lambda vals: (vals.cat.codes, np.int8)\n        post_processing = lambda vals, inference: vals\n    # Special handling for nullable integer values\n    elif is_categorical_dtype(self._selected_obj):\n        pre_processing = lambda vals: (vals.cat.codes, np.intp)\n        post_processing = lambda vals, inference: vals\n    else:\n        if is_object_dtype(self._selected_obj) or is_integer_dtype(self._selected_obj):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' or 'integer' dtypes!\"\n            )\n\n        pre_processing = None\n        post_processing = None\n\n    return self._get_cythonized_result(\n        \"group_quantile\",\n        aggregate=True,\n        needs_values=True,\n        needs_mask=True,\n        cython_dtype=np.dtype(np.float64),\n        pre_processing=pre_processing,\n        post_processing=post_processing,\n        q=q,\n        interpolation=interpolation,\n    )",
            "imports": [
                "from pandas import concat"
            ]
        }
    ]
}