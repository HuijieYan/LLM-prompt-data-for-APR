{
    "1.1.1": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    \n    from pandas import concat\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n\n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = \"datetime64[ns]\"\n            vals = np.asarray(vals).astype(np.float)\n\n        return vals, inference\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            # Check for edge case\n            if not (\n                is_integer_dtype(inference)\n                and interpolation in {\"linear\", \"midpoint\"}\n            ):\n                vals = vals.astype(inference)\n\n        return vals\n\n    if is_scalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            aggregate=True,\n            needs_values=True,\n            needs_mask=True,\n            cython_dtype=np.dtype(np.float64),\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            q=q,\n            interpolation=interpolation,\n        )\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                cython_dtype=np.dtype(np.float64),\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=qi,\n                interpolation=interpolation,\n            )\n            for qi in q\n        ]\n        result = concat(results, axis=0, keys=q)\n        # fix levels to place quantiles on the inside\n        # TODO(GH-10710): Ideally, we could write this as\n        #  >>> result.stack(0).loc[pd.IndexSlice[:, ..., q], :]\n        #  but this hits https://github.com/pandas-dev/pandas/issues/10710\n        #  which doesn't reorder the list-like `q` on the inner level.\n        order = list(range(1, result.index.nlevels)) + [0]\n\n        # temporarily saves the index names\n        index_names = np.array(result.index.names)\n\n        # set index names to positions to avoid confusion\n        result.index.names = np.arange(len(index_names))\n\n        # place quantiles on the inside\n        result = result.reorder_levels(order)\n\n        # restore the index names in order\n        result.index.names = index_names[order]\n\n        # reorder rows to keep things sorted\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)\n",
    "1.1.2": "Return group values at the given quantile, a la numpy.percentile.\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n    Value(s) between 0 and 1 providing the quantile(s) to compute.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    Method to use when the desired quantile falls between two points.\n\nReturns\n-------\nSeries or DataFrame\n    Return type determined by caller of GroupBy object.\n\nSee Also\n--------\nSeries.quantile : Similar method for Series.\nDataFrame.quantile : Similar method for DataFrame.\nnumpy.percentile : NumPy method to compute qth percentile.\n\nExamples\n--------\n>>> df = pd.DataFrame([\n...     ['a', 1], ['a', 2], ['a', 3],\n...     ['b', 1], ['b', 3], ['b', 5]\n... ], columns=['key', 'val'])\n>>> df.groupby('key').quantile()\n    val\nkey\na    2.0\nb    3.0",
    "1.2.1": "class GroupBy(_GroupBy[FrameOrSeries])",
    "1.2.2": "Class for grouping and aggregating relational data.\n\nSee aggregate, transform, and apply functions on this object.\n\nIt's easiest to use obj.groupby(...) to use GroupBy, but you can also do:\n\n::\n\n    grouped = groupby(obj, ...)\n\nParameters\n----------\nobj : pandas object\naxis : int, default 0\nlevel : int, default None\n    Level of MultiIndex\ngroupings : list of Grouping objects\n    Most users should ignore this\nexclusions : array-like, optional\n    List of columns to exclude\nname : str\n    Most users should ignore this\n\nReturns\n-------\n**Attributes**\ngroups : dict\n    {group name -> group labels}\nlen(grouped) : int\n    Number of groups\n\nNotes\n-----\nAfter grouping, see aggregate, apply, and transform functions. Here are\nsome other brief notes about usage. When grouping by multiple groups, the\nresult index will be a MultiIndex (hierarchical) by default.\n\nIteration produces (key, group) tuples, i.e. chunking the data by group. So\nyou can write code like:\n\n::\n\n    grouped = obj.groupby(keys, axis=axis)\n    for key, group in grouped:\n        # do something with the data\n\nFunction calls on GroupBy, if not specially implemented, \"dispatch\" to the\ngrouped data. So if you group a DataFrame and wish to invoke the std()\nmethod on each group, you can simply do:\n\n::\n\n    df.groupby(mapper).std()\n\nrather than\n\n::\n\n    df.groupby(mapper).aggregate(np.std)\n\nYou can pass arguments to these \"wrapped\" functions, too.\n\nSee the online documentation for full exposition on these topics and much\nmore",
    "1.2.3": [
        "_get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs)",
        "pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]",
        "post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/groupby/groupby.py",
    "1.3.2": [
        "ngroups(self)",
        "indices(self)",
        "_get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs)",
        "pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]",
        "post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\n    \"values\",\n    [\n        pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n        pd.array([True, False, None] * 2, dtype=\"boolean\"),\n    ],\n)\n@pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\ndef test_groupby_quantile_nullable_array(values, q):\n    # https://github.com/pandas-dev/pandas/issues/33136\n    df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n    result = df.groupby(\"a\")[\"b\"].quantile(q)\n\n    if isinstance(q, list):\n        idx = pd.MultiIndex.from_product(([\"x\", \"y\"], q), names=[\"a\", None])\n        true_quantiles = [0.0, 0.5, 1.0]\n    else:\n        idx = pd.Index([\"x\", \"y\"], name=\"a\")\n        true_quantiles = [0.5]\n\n    expected = pd.Series(true_quantiles * 2, index=idx, name=\"b\")\n    tm.assert_series_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"values\",\n    [\n        pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n        pd.array([True, False, None] * 2, dtype=\"boolean\"),\n    ],\n)\n@pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\ndef test_groupby_quantile_nullable_array(values, q):\n    # https://github.com/pandas-dev/pandas/issues/33136\n    df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n    result = df.groupby(\"a\")[\"b\"].quantile(q)\n\n    if isinstance(q, list):\n        idx = pd.MultiIndex.from_product(([\"x\", \"y\"], q), names=[\"a\", None])\n        true_quantiles = [0.0, 0.5, 1.0]\n    else:\n        idx = pd.Index([\"x\", \"y\"], name=\"a\")\n        true_quantiles = [0.5]\n\n    expected = pd.Series(true_quantiles * 2, index=idx, name=\"b\")\n    tm.assert_series_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"values\",\n    [\n        pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n        pd.array([True, False, None] * 2, dtype=\"boolean\"),\n    ],\n)\n@pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\ndef test_groupby_quantile_nullable_array(values, q):\n    # https://github.com/pandas-dev/pandas/issues/33136\n    df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n    result = df.groupby(\"a\")[\"b\"].quantile(q)\n\n    if isinstance(q, list):\n        idx = pd.MultiIndex.from_product(([\"x\", \"y\"], q), names=[\"a\", None])\n        true_quantiles = [0.0, 0.5, 1.0]\n    else:\n        idx = pd.Index([\"x\", \"y\"], name=\"a\")\n        true_quantiles = [0.5]\n\n    expected = pd.Series(true_quantiles * 2, index=idx, name=\"b\")\n    tm.assert_series_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"values\",\n    [\n        pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n        pd.array([True, False, None] * 2, dtype=\"boolean\"),\n    ],\n)\n@pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\ndef test_groupby_quantile_nullable_array(values, q):\n    # https://github.com/pandas-dev/pandas/issues/33136\n    df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n    result = df.groupby(\"a\")[\"b\"].quantile(q)\n\n    if isinstance(q, list):\n        idx = pd.MultiIndex.from_product(([\"x\", \"y\"], q), names=[\"a\", None])\n        true_quantiles = [0.0, 0.5, 1.0]\n    else:\n        idx = pd.Index([\"x\", \"y\"], name=\"a\")\n        true_quantiles = [0.5]\n\n    expected = pd.Series(true_quantiles * 2, index=idx, name=\"b\")\n    tm.assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/groupby/test_function.py",
        "pandas/tests/groupby/test_function.py",
        "pandas/tests/groupby/test_function.py",
        "pandas/tests/groupby/test_function.py"
    ],
    "2.1.1": [
        [
            "E   TypeError: No matching signature found"
        ],
        [
            "E   TypeError: No matching signature found"
        ],
        [
            "E   TypeError: No matching signature found"
        ],
        [
            "E   TypeError: No matching signature found"
        ]
    ],
    "2.1.2": [
        [
            "values = <IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64\nq = 0.5\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n            pd.array([True, False, None] * 2, dtype=\"boolean\"),\n        ],\n    )\n    @pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\n    def test_groupby_quantile_nullable_array(values, q):\n        # https://github.com/pandas-dev/pandas/issues/33136\n        df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n>       result = df.groupby(\"a\")[\"b\"].quantile(q)\n\npandas/tests/groupby/test_function.py:1533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1890: in quantile\n    return self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,",
            "\npandas/_libs/groupby.pyx:719: TypeError"
        ],
        [
            "values = <BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean\nq = 0.5\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n            pd.array([True, False, None] * 2, dtype=\"boolean\"),\n        ],\n    )\n    @pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\n    def test_groupby_quantile_nullable_array(values, q):\n        # https://github.com/pandas-dev/pandas/issues/33136\n        df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n>       result = df.groupby(\"a\")[\"b\"].quantile(q)\n\npandas/tests/groupby/test_function.py:1533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1890: in quantile\n    return self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,",
            "\npandas/_libs/groupby.pyx:719: TypeError"
        ],
        [
            "values = <IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64\nq = [0.0, 0.5, 1.0]\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n            pd.array([True, False, None] * 2, dtype=\"boolean\"),\n        ],\n    )\n    @pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\n    def test_groupby_quantile_nullable_array(values, q):\n        # https://github.com/pandas-dev/pandas/issues/33136\n        df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n>       result = df.groupby(\"a\")[\"b\"].quantile(q)\n\npandas/tests/groupby/test_function.py:1533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1902: in quantile\n    results = [\npandas/core/groupby/groupby.py:1903: in <listcomp>\n    self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,",
            "\npandas/_libs/groupby.pyx:719: TypeError"
        ],
        [
            "values = <BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean\nq = [0.0, 0.5, 1.0]\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            pd.array([1, 0, None] * 2, dtype=\"Int64\"),\n            pd.array([True, False, None] * 2, dtype=\"boolean\"),\n        ],\n    )\n    @pytest.mark.parametrize(\"q\", [0.5, [0.0, 0.5, 1.0]])\n    def test_groupby_quantile_nullable_array(values, q):\n        # https://github.com/pandas-dev/pandas/issues/33136\n        df = pd.DataFrame({\"a\": [\"x\"] * 3 + [\"y\"] * 3, \"b\": values})\n>       result = df.groupby(\"a\")[\"b\"].quantile(q)\n\npandas/tests/groupby/test_function.py:1533: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1902: in quantile\n    results = [\npandas/core/groupby/groupby.py:1903: in <listcomp>\n    self._get_cythonized_result(\npandas/core/groupby/groupby.py:2273: in _get_cythonized_result\n    func(**kwargs)  # Call func to modify indexer values in place\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def group_quantile(ndarray[float64_t] out,",
            "\npandas/_libs/groupby.pyx:719: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "interpolation": "'linear'",
                "q": "0.5",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1128e17f0>",
                "self.ngroups": "2"
            },
            {
                "pre_processor": "<function GroupBy.quantile.<locals>.pre_processor at 0x1128e08b0>",
                "post_processor": "<function GroupBy.quantile.<locals>.post_processor at 0x1128e0820>"
            }
        ],
        [
            {
                "interpolation": "'linear'",
                "q": "0.5",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1127c2130>",
                "self.ngroups": "2"
            },
            {
                "pre_processor": "<function GroupBy.quantile.<locals>.pre_processor at 0x1127c4820>",
                "post_processor": "<function GroupBy.quantile.<locals>.post_processor at 0x1127c4790>"
            }
        ],
        [
            {
                "interpolation": "'linear'",
                "q": "[0.0, 0.5, 1.0]",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1127c2700>",
                "self.ngroups": "2"
            },
            {
                "vals": "<IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64",
                "inference": "<class 'numpy.int64'>",
                "vals.astype": "<bound method IntegerArray.astype of <IntegerArray>\n[1, 0, <NA>, 1, 0, <NA>]\nLength: 6, dtype: Int64>",
                "pre_processor": "<function GroupBy.quantile.<locals>.pre_processor at 0x1127c4ca0>",
                "post_processor": "<function GroupBy.quantile.<locals>.post_processor at 0x1127c49d0>"
            }
        ],
        [
            {
                "interpolation": "'linear'",
                "q": "[0.0, 0.5, 1.0]",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x112714040>",
                "self.ngroups": "2"
            },
            {
                "vals": "<BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean",
                "vals.astype": "<bound method BooleanArray.astype of <BooleanArray>\n[True, False, <NA>, True, False, <NA>]\nLength: 6, dtype: boolean>",
                "pre_processor": "<function GroupBy.quantile.<locals>.pre_processor at 0x1127c45e0>",
                "post_processor": "<function GroupBy.quantile.<locals>.post_processor at 0x1127c43a0>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "interpolation": "str",
                "q": "float",
                "self": "SeriesGroupBy",
                "self.ngroups": "int"
            },
            {
                "pre_processor": "function",
                "post_processor": "function"
            }
        ],
        [
            {
                "interpolation": "str",
                "q": "float",
                "self": "SeriesGroupBy",
                "self.ngroups": "int"
            },
            {
                "pre_processor": "function",
                "post_processor": "function"
            }
        ],
        [
            {
                "interpolation": "str",
                "q": "list",
                "self": "SeriesGroupBy",
                "self.ngroups": "int"
            },
            {
                "vals": "IntegerArray",
                "inference": "type",
                "vals.astype": "method",
                "pre_processor": "function",
                "post_processor": "function"
            }
        ],
        [
            {
                "interpolation": "str",
                "q": "list",
                "self": "SeriesGroupBy",
                "self.ngroups": "int"
            },
            {
                "vals": "BooleanArray",
                "vals.astype": "method",
                "pre_processor": "function",
                "post_processor": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "interpolation": "'linear'",
                "q": "0.5",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1153c8d60>",
                "self.ngroups": "2"
            },
            {
                "pre_processor": "<function GroupBy.quantile.<locals>.pre_processor at 0x1153be9d0>",
                "post_processor": "<function GroupBy.quantile.<locals>.post_processor at 0x1153be940>"
            }
        ],
        [
            {
                "interpolation": "'linear'",
                "q": "0.5",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11530c040>",
                "self.ngroups": "2"
            },
            {
                "pre_processor": "<function GroupBy.quantile.<locals>.pre_processor at 0x1153be820>",
                "post_processor": "<function GroupBy.quantile.<locals>.post_processor at 0x1153bedc0>"
            }
        ],
        [
            {
                "interpolation": "'linear'",
                "q": "[0.0, 0.5, 1.0]",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1153c8c10>",
                "self.ngroups": "2"
            },
            {
                "vals": "array([ 1.,  0., nan,  1.,  0., nan])",
                "inference": "<class 'numpy.int64'>",
                "vals.dtype": "dtype('float64')",
                "pre_processor": "<function GroupBy.quantile.<locals>.pre_processor at 0x1152f6b80>",
                "post_processor": "<function GroupBy.quantile.<locals>.post_processor at 0x1152f63a0>"
            }
        ],
        [
            {
                "interpolation": "'linear'",
                "q": "[0.0, 0.5, 1.0]",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1152a3550>",
                "self.ngroups": "2"
            },
            {
                "vals": "array([ 1.,  0., nan,  1.,  0., nan])",
                "vals.dtype": "dtype('float64')",
                "pre_processor": "<function GroupBy.quantile.<locals>.pre_processor at 0x1152f6820>",
                "post_processor": "<function GroupBy.quantile.<locals>.post_processor at 0x1152f6790>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "interpolation": "str",
                "q": "float",
                "self": "SeriesGroupBy",
                "self.ngroups": "int"
            },
            {
                "pre_processor": "function",
                "post_processor": "function"
            }
        ],
        [
            {
                "interpolation": "str",
                "q": "float",
                "self": "SeriesGroupBy",
                "self.ngroups": "int"
            },
            {
                "pre_processor": "function",
                "post_processor": "function"
            }
        ],
        [
            {
                "interpolation": "str",
                "q": "list",
                "self": "SeriesGroupBy",
                "self.ngroups": "int"
            },
            {
                "vals": "ndarray",
                "inference": "type",
                "vals.dtype": "dtype",
                "pre_processor": "function",
                "post_processor": "function"
            }
        ],
        [
            {
                "interpolation": "str",
                "q": "list",
                "self": "SeriesGroupBy",
                "self.ngroups": "int"
            },
            {
                "vals": "ndarray",
                "vals.dtype": "dtype",
                "pre_processor": "function",
                "post_processor": "function"
            }
        ]
    ],
    "3.1.1": [
        "SeriesGroupBy.quantile doesn't work for nullable integers\n"
    ],
    "3.1.2": [
        "import pandas as pd\n\ndf = pd.DataFrame(\n    {\"a\": [\"x\", \"x\", \"y\", \"y\"], \"b\": pd.array([1, 2, 3, 4], dtype=\"Int64\")}\n)\ndf.groupby(\"a\")[\"b\"].quantile(0.5)\nraises\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-1-ef27f953b945> in <module>\n      4     {\"a\": [\"x\", \"x\", \"y\", \"y\"], \"b\": pd.array([1, 2, 3, 4], dtype=\"Int64\")}\n      5 )\n----> 6 df.groupby(\"a\")[\"b\"].quantile(0.5)\n\n~/opt/miniconda3/lib/python3.7/site-packages/pandas/core/groupby/groupby.py in quantile(self, q, interpolation)\n   1911                 post_processing=post_processor,\n   1912                 q=q,\n-> 1913                 interpolation=interpolation,\n   1914             )\n   1915         else:\n\n~/opt/miniconda3/lib/python3.7/site-packages/pandas/core/groupby/groupby.py in _get_cythonized_result(self, how, cython_dtype, aggregate, needs_values, needs_mask, needs_ngroups, result_is_index, pre_processing, post_processing, **kwargs)\n   2289                 func = partial(func, ngroups)\n   2290 \n-> 2291             func(**kwargs)  # Call func to modify indexer values in place\n   2292 \n   2293             if result_is_index:\n\npandas/_libs/groupby.pyx in pandas._libs.groupby.__pyx_fused_cpdef()\n\nTypeError: No matching signature found\ncc @ghuname xref #33071\n"
    ]
}