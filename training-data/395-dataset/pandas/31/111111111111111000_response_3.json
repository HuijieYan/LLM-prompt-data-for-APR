{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    from pandas.core.dtypes.common import is_scalar, is_datetime64_dtype, is_object_dtype, is_integer_dtype\n    from pandas.core.dtypes.dtypes import IntegerDtype, BooleanDtype\n    from pandas import concat\n    def pre_processor(vals, val_dtype) -> Tuple[np.ndarray, Optional[type]]:\n        if is_object_dtype(val_dtype):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n        \n        inference_dtype = None\n        if is_integer_dtype(val_dtype):\n            inference_dtype = np.int64\n        elif is_datetime64_dtype(val_dtype):\n            inference_dtype = 'datetime64[ns]'\n            vals = np.asarray(vals).astype(np.float)\n            \n        return vals, inference_dtype\n\n    def post_processor(vals, inference_dtype) -> np.ndarray:\n        if inference_dtype:\n            if is_integer_dtype(inference_dtype):\n                vals = vals.astype(inference_dtype)\n            elif inference_dtype == 'boolean':\n                vals = np.asarray(vals).astype('boolean')\n\n        return vals\n\n    self.pre_processor = pre_processor\n    self.post_processor = post_processor\n\n    if is_scalar(q):\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                cython_dtype=np.dtype(np.float64),\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                needs_ngroups=True,\n                result_is_index=False,\n                pre_processing=self.pre_processor,\n                post_processing=self.post_processor,\n                q=q,\n                interpolation=interpolation,\n            )\n        ]\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                cython_dtype=np.dtype(np.float64),\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                needs_ngroups=True,\n                result_is_index=False,\n                pre_processing=self.pre_processor,\n                post_processing=self.post_processor,\n                q=qi,\n                interpolation=interpolation,\n            )\n            for qi in q\n        ]\n        result = concat(results, axis=0, keys=q)\n        # fix levels to place quantiles on the inside\n        # TODO(GH-10710): Ideally, we could write this as\n        #  >>> result.stack(0).loc[pd.IndexSlice[:, ..., q], :]\n        #  but this hits https://github.com/pandas-dev/pandas/issues/10710\n        #  which doesn't reorder the list-like `q` on the inner level.\n        order = list(range(1, result.index.nlevels)) + [0]\n        \n        # temporarily saves the index names\n        index_names = np.array(result.index.names)\n\n        # set index names to positions to avoid confusion\n        result.index.names = np.arange(len(index_names))\n\n        # place quantiles on the inside\n        result = result.reorder_levels(order)\n\n        # restore the index names in order\n        result.index.names = index_names[order]\n\n        # reorder rows to keep things sorted\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)",
            "imports": [
                "from pandas.core.dtypes.common import is_scalar, is_datetime64_dtype, is_object_dtype, is_integer_dtype",
                "from pandas.core.dtypes.dtypes import IntegerDtype, BooleanDtype",
                "from pandas import concat"
            ]
        }
    ]
}