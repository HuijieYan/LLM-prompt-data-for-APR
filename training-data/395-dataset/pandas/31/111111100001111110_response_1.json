{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    import numpy as np\n    from typing import Optional, Type, Tuple\n    from pandas.core.series import Series\n\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if isinstance(vals, Series):\n            if not vals.dtype.is_integer:\n                raise TypeError(\n                    \"'quantile' cannot be performed against non-integer dtypes!\"\n                )\n            inference = vals._data.get_dtype(np.int64)\n            return vals, inference\n\n        inference = None\n        if np.issubdtype(vals.dtype, np.integer):\n            inference = np.int64\n        elif np.issubdtype(vals.dtype, np.datetime64):\n            inference = \"datetime64[ns]\"\n            vals = np.asarray(vals, dtype=np.float)\n        return vals, inference\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference is not None and (inference != np.int64 or interpolation not in {\"linear\", \"midpoint\"}):\n            return vals.astype(inference)\n        return vals\n\n    if np.isscalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            cython_dtype=np.dtype(np.float64),\n            aggregate=True,\n            needs_values=True,\n            needs_ngroups=True,\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            how=\"quantile\",\n            q=q,\n            interpolation=interpolation,\n        )\n    else:\n        # If there is more than one quantile, we need to iterate across the list\n        result = []\n        for qi in q:\n            result.append(\n                self._get_cythonized_result(\n                    \"group_quantile\",\n                    cython_dtype=np.dtype(np.float64),\n                    aggregate=True,\n                    needs_values=True,\n                    needs_ngroups=True,\n                    pre_processing=pre_processor,\n                    post_processing=post_processor,\n                    how=\"quantile\",\n                    q=qi,\n                    interpolation=interpolation,\n                )\n            )\n\n        res_index = pd.Index(q, name=\"Quantile\")\n        result = pd.concat(result, axis=1, keys=res_index)\n\n        # Transpose to have 'group' on axis 1 and 'quantile' on axis 0\n        result = result.T\n        result.index.name = \"group\"\n        return result",
            "imports": [
                "import numpy as np",
                "from typing import Optional, Type, Tuple",
                "from pandas.core.series import Series"
            ]
        }
    ]
}