{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    def pre_processor(vals: Union[IntArray, BooleanArray]) -> Tuple[np.ndarray, Optional[Type]]:\n        if isinstance(vals, pd.core.arrays.boolean.BooleanArray):\n            if not vals.isna().sum() == 0:\n                raise ValueError(\"Cannot perform 'quantile' against 'boolean' dtypes with NaN values!\")\n        if isinstance(vals, pd.core.arrays.integer.IntegerArray):\n            if vals.isna().sum() == 0:\n                inference = vals.dtype\n                vals = vals.astype(np.float64)\n                return vals, inference\n    \n        raise TypeError(f\"'quantile' cannot be performed against '{type(vals).__name__}' dtypes!\")\n    \n    def post_processor(vals: np.ndarray, inference: Union[type, None]) -> np.ndarray:\n        if inference:\n            if inference == np.int64:\n                if interpolation in {\"linear\", \"midpoint\"}:\n                    return vals.astype(inference)\n                else:\n                    return vals\n        return vals\n    \n    if is_scalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            q=q,\n            interpolation=interpolation,\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            cython_dtype=np.dtype(np.float64),\n        )\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                q=qi,\n                interpolation=interpolation,\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                cython_dtype=np.dtype(np.float64),\n            )\n            for qi in q\n        ]\n        result = concat(results, axis=0, keys=q)\n        return result",
            "imports": []
        }
    ]
}