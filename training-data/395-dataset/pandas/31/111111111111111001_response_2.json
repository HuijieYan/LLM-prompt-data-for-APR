{
    "pandas": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1827,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation=\"linear\"):\n    from pandas import concat\n\n    def pre_processor(vals):\n        if is_object_dtype(vals):\n            raise TypeError(\"'quantile' cannot be performed against 'object' dtypes!\")\n\n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = \"datetime64[ns]\"\n            vals = np.asarray(vals).astype(np.float)\n\n        return vals, inference\n\n    def post_processor(vals, inference):\n        if inference:\n            # Check for edge case\n            if not (is_integer_dtype(inference) and interpolation in {\"linear\", \"midpoint\"}):\n                vals = vals.astype(inference)\n\n        return vals\n\n    if is_scalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            out=np.array([], dtype=np.float64),\n            q=q,\n            interpolation=interpolation,\n            needs_values=True,\n            needs_mask=True,\n            needs_ngroups=True,\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n        )\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                out=np.array([], dtype=np.float64),\n                q=qi,\n                interpolation=interpolation,\n                needs_values=True,\n                needs_mask=True,\n                needs_ngroups=True,\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n            )\n            for qi in q\n        ]\n        result = concat(results, axis=0, keys=q)\n\n        # Reorder levels to place quantiles on the inside\n        order = list(range(1, result.index.nlevels)) + [0]\n        index_names = np.array(result.index.names)\n        result.index.names = np.arange(len(index_names))\n        result = result.reorder_levels(order)\n        result.index.names = index_names[order]\n\n        # Reorder rows to keep things sorted\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)",
            "imports": [
                "from pandas import concat"
            ]
        }
    ]
}