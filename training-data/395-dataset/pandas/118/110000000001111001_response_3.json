{
    "pandas": [
        {
            "bugID": 118,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 20,
            "file_name": "pandas/core/reshape/melt.py",
            "replace_code": "def melt(frame, id_vars=None, value_vars=None, var_name=None, value_name=\"value\", col_level=None) -> DataFrame:\n    if isinstance(frame.columns, MultiIndex):\n        cols = [x for c in frame.columns for x in c]\n    else:\n        cols = list(frame.columns)\n\n    id_vars = id_vars if id_vars is not None and is_list_like(id_vars) else []\n    missing_id = Index(id_vars).difference(cols)\n    if not missing_id.empty:\n        raise KeyError(f\"The following 'id_vars' are not present in the DataFrame: {list(missing_id)}\")\n\n    value_vars = value_vars if value_vars is not None and is_list_like(value_vars) else []\n    missing_value = Index(value_vars).difference(cols)\n    if not missing_value.empty:\n        raise KeyError(f\"The following 'value_vars' are not present in the DataFrame: {list(missing_value)}\")\n\n    if value_vars:\n        result = frame[id_vars + value_vars]\n    else:\n        result = frame.copy()\n\n    if isinstance(var_name, str):\n        var_name = [var_name]\n\n    N, K = frame.shape\n    K -= len(id_vars)\n\n    mdata = {col: np.tile(frame.pop(col).values, K) if is_extension_array_dtype(frame[col]) else np.tile(frame[col].values, K) for col in id_vars}\n    mdata[value_name] = frame.values.ravel('F')\n\n    for i, name in enumerate(var_name if var_name else frame.columns.names if isinstance(frame.columns, MultiIndex) else (frame.columns.name,)):\n        mdata[name] = np.repeat(frame.columns._get_level_values(i), N)\n\n    mcolumns = id_vars + var_name + [value_name]\n    return DataFrame(mdata, columns=mcolumns)",
            "import_list": [
                "from pandas import DataFrame, Index, MultiIndex",
                "import numpy as np",
                "from pandas.core.arrays.base import is_extension_array_dtype",
                "from pandas.core.dtypes.common import is_list_like"
            ]
        }
    ]
}