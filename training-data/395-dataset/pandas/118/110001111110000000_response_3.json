{
    "pandas": [
        {
            "bugID": 118,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 20,
            "file_name": "pandas/core/reshape/melt.py",
            "replace_code": "def melt(\n    frame,\n    id_vars=None,\n    value_vars=None,\n    var_name=None,\n    value_name=\"value\",\n    col_level=None,\n):\n    \"\"\"\n    Melt a DataFrame.\n    Parameters\n    ----------\n    frame : DataFrame\n    id_vars : tuple, list, or ndarray, optional\n        Column(s) to use as identifier variables.\n    value_vars : tuple, list, or ndarray, optional\n        Column(s) to unpivot. If not specified, uses all columns that\n        are not set as `id_vars`.\n    var_name : scalar\n        Name to use for the 'variable' column. If None it uses\n        ``frame.columns.name`` or 'variable'.\n    value_name : scalar, default 'value'\n        Name to use for the 'value' column.\n    col_level : int or str, optional\n        If columns are a MultiIndex then use this level to melt.\n\n\n    Returns\n    -------\n    DataFrame\n        Melted DataFrame.\n\n    \"\"\"\n\n    if id_vars is not None:\n        if not is_list_like(id_vars):\n            id_vars = [id_vars]\n        else:\n            id_vars = list(id_vars)\n        for col in id_vars:\n            if col not in frame.columns:\n                raise KeyError(\n                    f\"The following 'id_vars' are not present in the DataFrame: {col}\")\n\n    if value_vars is not None:\n        if not is_list_like(value_vars):\n            value_vars = [value_vars]\n        else:\n            value_vars = list(value_vars)\n        for col in value_vars:\n            if col not in frame.columns:\n                raise KeyError(\n                    f\"The following 'value_vars' are not present in the DataFrame: {col}\")\n\n    if var_name is None:\n        var_name = \"variable\"\n\n    if isinstance(frame.columns, pd.MultiIndex):\n        if len(frame.columns.names) == len(set(frame.columns.names)):\n            var_name = frame.columns.names\n        else:\n            var_name = [\n                f\"variable_{i}\" for i in range(len(frame.columns.names))\n            ]\n    else:\n        var_name = [\n            frame.columns.name if frame.columns.name is not None else \"variable\"\n        ]\n\n    N, K = frame.shape\n    K -= len(id_vars)\n\n    mdata = {}\n    for col in id_vars:\n        mdata[col] = np.repeat(frame[col].values, K)\n\n    mcolumns = id_vars + var_name + [value_name]\n    mdata[value_name] = frame.values.ravel(\"F\")\n\n    for i, col in enumerate(var_name):\n        mdata[col] = np.repeat(frame.columns._get_level_values(i), N)\n\n    return frame._constructor(mdata, columns=mcolumns)",
            "imports": []
        }
    ]
}