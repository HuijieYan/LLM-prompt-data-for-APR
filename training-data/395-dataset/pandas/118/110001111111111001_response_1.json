{
    "pandas": [
        {
            "bugID": 118,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 20,
            "file_name": "pandas/core/reshape/melt.py",
            "replace_code": "def melt(\n        frame: DataFrame,\n        id_vars=None,\n        value_vars=None,\n        var_name=None,\n        value_name=\"value\",\n        col_level=None,\n) -> DataFrame:\n    # If multiindex, gather names of columns on all level for checking presence\n    # of `id_vars` and `value_vars`\n    if isinstance(frame.columns, (Index, list)):\n        cols = list(frame.columns)\n    else:\n        cols = list(frame.columns.names)\n\n    if id_vars is not None:\n        # Ensure id_vars is a list\n        if not is_list_like(id_vars):\n            id_vars = [id_vars]\n        # Check that id_vars are in frame\n        id_vars = list(id_vars)\n        missing = [var for var in id_vars if var not in cols]\n        if missing:\n            raise KeyError(\n                f\"The following 'id_vars' are not present in the DataFrame: {missing}\"\n            )\n    else:\n        id_vars = []\n\n    if value_vars is not None:\n        # Ensure value_vars is a list\n        if not is_list_like(value_vars):\n            value_vars = [value_vars]\n        # Check that value_vars are in frame\n        value_vars = list(value_vars)\n        missing = [var for var in value_vars if var not in cols]\n        if missing:\n            raise KeyError(\n                f\"The following 'value_vars' are not present in the DataFrame: {missing}\"\n            )\n        # Ensure var_name is not None if value_vars are specified\n        var_name = var_name if var_name is not None else \"variable\"\n        frame = frame.loc[:, id_vars + value_vars]\n    else:\n        frame = frame.copy()\n\n    if col_level is not None:\n        # frame is a copy\n        frame.columns = frame.columns.get_level_values(col_level)\n\n    if var_name is None:\n        # Default var_name\n        var_name = \"variable\"\n\n    N, K = frame.shape\n    K -= len(id_vars)\n\n    mdata = {}\n    for col in id_vars:\n        id_data = frame.pop(col)\n        if isinstance(id_data, ExtensionArray):\n            id_data = concat([id_data] * K, ignore_index=True)\n        else:\n            id_data = np.tile(id_data.values, K)\n        mdata[col] = id_data\n\n    mcolumns = id_vars + [var_name] + [value_name]\n    mdata[value_name] = frame.values.ravel(\"F\")\n    for i, col in enumerate(value_vars):\n        mdata[var_name] = np.repeat(col, N)\n        # asanyarray will keep the columns as an Index\n        mdata[value_name] = np.asanyarray(frame[col].values).repeat(N)\n\n    return DataFrame(mdata, columns=mcolumns)",
            "imports": [
                "from pandas.core.dtypes.common import is_list_like",
                "from pandas import Index, DataFrame, concat",
                "import numpy as np",
                "from pandas.core.generic import NDFrame",
                "from pandas.core.arrays.base import ExtensionArray",
                "from typing import Union"
            ]
        }
    ]
}