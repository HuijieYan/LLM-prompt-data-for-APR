{
    "pandas": [
        {
            "bugID": 118,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 20,
            "file_name": "pandas/core/reshape/melt.py",
            "replace_code": "def melt(\n    frame: DataFrame,\n    id_vars=None,\n    value_vars=None,\n    var_name=None,\n    value_name=\"value\",\n    col_level=None,\n) -> DataFrame:\n\n    if isinstance(frame.columns, ABCMultiIndex):\n        cols = [x for c in frame.columns for x in c]\n    else:\n        cols = list(frame.columns)\n    \n    if id_vars is not None:\n        if not is_list_like(id_vars):\n            id_vars = [id_vars]\n        elif isinstance(id_vars, list) and isinstance(frame.columns, ABCMultiIndex):\n            raise ValueError(\n                \"id_vars must be a list of tuples when columns are a MultiIndex\"\n            )\n        else:\n            id_vars = list(id_vars)\n            missing = [var for var in id_vars if var not in cols]\n            if missing:\n                raise KeyError(\n                    f\"The following 'id_vars' are not present in the DataFrame: {missing}\"\n                )\n    else:\n        id_vars = []\n    \n    if value_vars is not None:\n        if not is_list_like(value_vars):\n            value_vars = [value_vars]\n        elif isinstance(value_vars, list) and isinstance(frame.columns, ABCMultiIndex):\n            raise ValueError(\n                \"value_vars must be a list of tuples when columns are a MultiIndex\"\n            )\n        else:\n            value_vars = list(value_vars)\n            missing = [var for var in value_vars if var not in cols]\n            if missing:\n                raise KeyError(\n                    f\"The following 'value_vars' are not present in the DataFrame: {missing}\"\n                )\n        frame = frame.loc[:, id_vars + value_vars]\n    else:\n        frame = frame.copy()\n    \n    if col_level is not None:\n        frame.columns = frame.columns.get_level_values(col_level)\n    \n    if var_name is None:\n        if isinstance(frame.columns, ABCMultiIndex) and len(frame.columns.names) == len(set(frame.columns.names)):\n                var_name = frame.columns.names\n        else:\n            var_name = frame.columns.names if frame.columns.names else \"variable\"\n    \n    if isinstance(var_name, str):\n        var_name = [var_name]\n    \n    N, K = frame.shape\n    K -= len(id_vars)\n    \n    mdata = {}\n    for col in id_vars:\n        id_data = frame.pop(col)\n        if is_extension_array_dtype(id_data):\n            id_data = concat([id_data] * K, ignore_index=True)\n        else:\n            id_data = np.tile(id_data.values, K)\n        mdata[col] = id_data\n    \n    mcolumns = id_vars + var_name + [value_name]\n    \n    mdata[value_name] = frame.values.ravel(\"F\")\n    for i, col in enumerate(var_name):\n        mdata[col] = np.asarray(frame.columns._get_level_values(i)).repeat(N)\n    \n    return frame._constructor(mdata, columns=mcolumns)"
        }
    ]
}