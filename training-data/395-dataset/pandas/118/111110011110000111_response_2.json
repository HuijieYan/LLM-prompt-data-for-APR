{
    "pandas": [
        {
            "bugID": 118,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 20,
            "file_name": "pandas/core/reshape/melt.py",
            "replace_code": "def melt(frame: DataFrame, id_vars=None, value_vars=None, var_name=None, value_name=\"value\", col_level=None) -> DataFrame:\n    if isinstance(frame.columns, ABCMultiIndex):\n        cols = [x for c in frame.columns for x in c]\n    else:\n        cols = list(frame.columns)\n\n    if id_vars is not None:\n        if not is_list_like(id_vars):\n            id_vars = [id_vars]\n        elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):\n            raise ValueError(\"id_vars must be a list of tuples when columns are a MultiIndex\")\n        else:\n            id_vars = list(id_vars)\n            if all(isinstance(col, (int, np.integer)) for col in id_vars):\n                id_vars = [frame.columns[i] for i in id_vars]\n            missing = Index(np.ravel([id for id in id_vars])).difference(cols)\n            if not missing.empty:\n                raise KeyError(\"The following 'id_vars' are not present in the DataFrame: {missing}\".format(missing=list(missing)))\n    else:\n        id_vars = []\n\n    if value_vars is not None:\n        if not is_list_like(value_vars):\n            value_vars = [value_vars]\n        elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(value_vars, list):\n            raise ValueError(\"value_vars must be a list of tuples when columns are a MultiIndex\")\n        else:\n            value_vars = list(value_vars)\n            if all(isinstance(col, (int, np.integer)) for col in value_vars):\n                value_vars = [frame.columns[i] for i in value_vars]\n            missing = Index(np.ravel([value for value in value_vars])).difference(cols)\n            if not missing.empty:\n                raise KeyError(\"The following 'value_vars' are not present in the DataFrame: {missing}\".format(missing=list(missing)))\n        frame = frame.loc[:, id_vars + value_vars]\n    else:\n        frame = frame.copy()",
            "imports": []
        }
    ]
}