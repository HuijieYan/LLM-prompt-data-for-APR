{
    "pandas": [
        {
            "bugID": 50,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 65,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def _cat_compare_op(op):\n    opname = f\"__{op.__name__}__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            raise ValueError(\"Lengths must match.\")\n\n        if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"] and not self.ordered:\n            raise TypeError(\n                \"Unordered Categoricals can only compare equality or not\"\n            )\n\n        if isinstance(other, Categorical) and not pd.api.types.is_object_dtype(other):\n            return getattr(self._codes, opname)(other._codes)\n\n        if pd.api.types.is_scalar(other):\n            i = self.categories.get_indexer([other])\n            if i[0] == -1 and opname == \"__eq__\":\n                return False  # False for not equals if other is not in self's categories\n            return getattr(self._codes, opname)(i[0])\n\n        if pd.api.types.is_array_like(other) and pd.api.types.is_object_dtype(other):\n            other_array = np.array(other)\n            return getattr(self._codes, opname)(pd.Series(other_array).cat.codes)\n\n        raise TypeError(\n            f\"Cannot compare a Categorical for op {opname} with \"\n            f\"type {type(other)}.\\nIf you want to compare values, \"\n            \"use 'np.asarray(cat) <op> other'.\"\n        )\n\n    func.__name__ = opname\n\n    return func",
            "imports": []
        }
    ]
}