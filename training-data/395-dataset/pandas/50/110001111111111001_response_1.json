{
    "pandas": [
        {
            "bugID": 50,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 65,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def _cat_compare_op(op):\n    opname = f\"__{op.__name__}__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            raise ValueError(\"Lengths must match.\")\n\n        if isinstance(other, Categorical):\n            if not (\n                self.ordered == other.ordered\n                and set(self.categories) == set(other.categories)\n            ):\n                raise ValueError(\"Categories and ordering must match for comparison.\")\n\n            f = getattr(self._codes, opname)\n            other_codes = other._codes\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                ret[mask] = False\n            return ret\n        elif is_scalar(other) and other in self.categories:\n            i = self.categories.get_loc(other)\n            ret = getattr(self._codes, opname)(i)\n            if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                mask = self._codes == -1\n                ret[mask] = False\n            return ret\n        elif is_scalar(other) and other not in self.categories:\n            raise ValueError(\"Other scalar value is not in categories.\")\n        else:\n            if opname in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), opname)(np.array(other))\n            raise ValueError(f\"Unsupported operation: {opname}\")\n\n    func.__name__ = opname\n    return func",
            "imports": []
        }
    ]
}