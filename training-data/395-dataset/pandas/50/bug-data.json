{
    "pandas:50": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_50/pandas/core/arrays/categorical.py": {
            "buggy_functions": [
                {
                    "function_name": "_cat_compare_op",
                    "function_code": "def _cat_compare_op(op):\n    opname = f\"__{op.__name__}__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            # TODO: Could this fail if the categories are listlike objects?\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n        else:\n\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), opname)(np.array(other))\n\n            raise TypeError(\n                f\"Cannot compare a Categorical for op {opname} with \"\n                f\"type {type(other)}.\\nIf you want to compare values, \"\n                \"use 'np.asarray(cat) <op> other'.\"\n            )\n\n    func.__name__ = opname\n\n    return func\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 65,
                    "end_line": 144,
                    "variables": {
                        "opname": [
                            66,
                            68,
                            101,
                            133,
                            134,
                            137,
                            75,
                            142,
                            112,
                            114,
                            120,
                            122,
                            126
                        ],
                        "op.__name__": [
                            66
                        ],
                        "op": [
                            66
                        ],
                        "is_list_like": [
                            70
                        ],
                        "other": [
                            97,
                            99,
                            70,
                            134,
                            138,
                            109,
                            110,
                            79,
                            111,
                            84,
                            86,
                            88,
                            91,
                            95
                        ],
                        "len": [
                            121,
                            123,
                            84,
                            70
                        ],
                        "self": [
                            97,
                            101,
                            70,
                            103,
                            134,
                            74,
                            123,
                            110,
                            111,
                            112,
                            84,
                            116,
                            86,
                            88,
                            121,
                            91,
                            95
                        ],
                        "ValueError": [
                            72
                        ],
                        "self.ordered": [
                            74,
                            91,
                            86,
                            95
                        ],
                        "TypeError": [
                            136,
                            76,
                            85,
                            87,
                            89,
                            92,
                            125
                        ],
                        "isinstance": [
                            79
                        ],
                        "Categorical": [
                            79
                        ],
                        "msg": [
                            89,
                            83,
                            85,
                            87
                        ],
                        "self.categories": [
                            97,
                            110,
                            111,
                            84,
                            86,
                            88,
                            95
                        ],
                        "other.categories": [
                            88,
                            84,
                            86,
                            95
                        ],
                        "all": [
                            86
                        ],
                        "set": [
                            88
                        ],
                        "other.ordered": [
                            91
                        ],
                        "self.categories.equals": [
                            95
                        ],
                        "other_codes": [
                            97,
                            99,
                            102,
                            103
                        ],
                        "_get_codes_for_values": [
                            97
                        ],
                        "other._codes": [
                            99
                        ],
                        "f": [
                            101,
                            102
                        ],
                        "getattr": [
                            112,
                            101,
                            134
                        ],
                        "self._codes": [
                            112,
                            116,
                            101,
                            103
                        ],
                        "ret": [
                            102,
                            106,
                            107,
                            112,
                            117,
                            118
                        ],
                        "mask": [
                            103,
                            104,
                            106,
                            116,
                            117
                        ],
                        "mask.any": [
                            104
                        ],
                        "is_scalar": [
                            109
                        ],
                        "i": [
                            112,
                            111
                        ],
                        "self.categories.get_loc": [
                            111
                        ],
                        "np.zeros": [
                            121
                        ],
                        "np": [
                            121,
                            123,
                            134
                        ],
                        "bool": [
                            121,
                            123
                        ],
                        "np.ones": [
                            123
                        ],
                        "np.array": [
                            134
                        ],
                        "type": [
                            138
                        ],
                        "unpack_zerodim_and_defer": [
                            68
                        ],
                        "func.__name__": [
                            142
                        ],
                        "func": [
                            144,
                            142
                        ]
                    },
                    "filtered_variables": {
                        "opname": [
                            66,
                            68,
                            101,
                            133,
                            134,
                            137,
                            75,
                            142,
                            112,
                            114,
                            120,
                            122,
                            126
                        ],
                        "op.__name__": [
                            66
                        ],
                        "op": [
                            66
                        ],
                        "is_list_like": [
                            70
                        ],
                        "other": [
                            97,
                            99,
                            70,
                            134,
                            138,
                            109,
                            110,
                            79,
                            111,
                            84,
                            86,
                            88,
                            91,
                            95
                        ],
                        "self": [
                            97,
                            101,
                            70,
                            103,
                            134,
                            74,
                            123,
                            110,
                            111,
                            112,
                            84,
                            116,
                            86,
                            88,
                            121,
                            91,
                            95
                        ],
                        "self.ordered": [
                            74,
                            91,
                            86,
                            95
                        ],
                        "Categorical": [
                            79
                        ],
                        "msg": [
                            89,
                            83,
                            85,
                            87
                        ],
                        "self.categories": [
                            97,
                            110,
                            111,
                            84,
                            86,
                            88,
                            95
                        ],
                        "other.categories": [
                            88,
                            84,
                            86,
                            95
                        ],
                        "other.ordered": [
                            91
                        ],
                        "self.categories.equals": [
                            95
                        ],
                        "other_codes": [
                            97,
                            99,
                            102,
                            103
                        ],
                        "_get_codes_for_values": [
                            97
                        ],
                        "other._codes": [
                            99
                        ],
                        "f": [
                            101,
                            102
                        ],
                        "self._codes": [
                            112,
                            116,
                            101,
                            103
                        ],
                        "ret": [
                            102,
                            106,
                            107,
                            112,
                            117,
                            118
                        ],
                        "mask": [
                            103,
                            104,
                            106,
                            116,
                            117
                        ],
                        "mask.any": [
                            104
                        ],
                        "is_scalar": [
                            109
                        ],
                        "i": [
                            112,
                            111
                        ],
                        "self.categories.get_loc": [
                            111
                        ],
                        "np.zeros": [
                            121
                        ],
                        "np": [
                            121,
                            123,
                            134
                        ],
                        "np.ones": [
                            123
                        ],
                        "np.array": [
                            134
                        ],
                        "unpack_zerodim_and_defer": [
                            68
                        ],
                        "func.__name__": [
                            142
                        ],
                        "func": [
                            144,
                            142
                        ]
                    },
                    "diff_line_number": 106,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'eq'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__eq__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'eq'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__eq__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112fa1ca0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112f6c280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'lt'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function lt>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__lt__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'lt'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function lt>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__lt__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112f6c820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'gt'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function gt>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__gt__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'gt'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function gt>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__gt__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112f6cdc0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'le'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function le>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__le__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'le'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function le>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__le__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112f773a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ge__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ge__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112f6cb80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "[a, b]\nCategories (2, object): [a, b]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "[NaN, a]\nCategories (2, object): [a, b]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": "\"Categoricals can only be compared if 'categories' are the same.\"",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "other.categories": {
                                    "variable_value": "Index(['a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "other.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "f": {
                                    "variable_value": "<method-wrapper '__ne__' of numpy.ndarray object at 0x1185a65d0>",
                                    "variable_type": "method-wrapper",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "ret": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask": {
                                    "variable_value": "array([ True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1185a6940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112f6c280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "[0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "[NaN, 0]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": "\"Categoricals can only be compared if 'categories' are the same.\"",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "self.categories": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(2,)"
                                },
                                "other.categories": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(2,)"
                                },
                                "other.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "f": {
                                    "variable_value": "<method-wrapper '__ne__' of numpy.ndarray object at 0x118635a30>",
                                    "variable_type": "method-wrapper",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "ret": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask": {
                                    "variable_value": "array([ True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x118635170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112f6c280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "[2019-01-01, 2020-01-01]\nCategories (2, datetime64[ns]): [2019-01-01, 2020-01-01]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2019-01-01]\nCategories (2, datetime64[ns]): [2019-01-01, 2020-01-01]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": "\"Categoricals can only be compared if 'categories' are the same.\"",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2019-01-01', '2020-01-01'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "(2,)"
                                },
                                "other.categories": {
                                    "variable_value": "DatetimeIndex(['2019-01-01', '2020-01-01'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "(2,)"
                                },
                                "other.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "f": {
                                    "variable_value": "<method-wrapper '__ne__' of numpy.ndarray object at 0x118596d00>",
                                    "variable_type": "method-wrapper",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "ret": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask": {
                                    "variable_value": "array([ True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x118596710>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x112f6c280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'eq'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__eq__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'eq'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__eq__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x116724ca0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x116715280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'lt'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function lt>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__lt__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'lt'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function lt>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__lt__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x116715820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'gt'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function gt>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__gt__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'gt'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function gt>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__gt__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x116715dc0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'le'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function le>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__le__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'le'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function le>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__le__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x1167213a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ge__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ge__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x116715b80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "[a, b]\nCategories (2, object): [a, b]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "[NaN, a]\nCategories (2, object): [a, b]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": "\"Categoricals can only be compared if 'categories' are the same.\"",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "other.categories": {
                                    "variable_value": "Index(['a', 'b'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "other.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "f": {
                                    "variable_value": "<method-wrapper '__ne__' of numpy.ndarray object at 0x11bbe15d0>",
                                    "variable_type": "method-wrapper",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "ret": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask": {
                                    "variable_value": "array([ True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11bbe1940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x116715280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "[0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "[NaN, 0]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": "\"Categoricals can only be compared if 'categories' are the same.\"",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "self.categories": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(2,)"
                                },
                                "other.categories": {
                                    "variable_value": "Int64Index([0, 1], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "(2,)"
                                },
                                "other.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "f": {
                                    "variable_value": "<method-wrapper '__ne__' of numpy.ndarray object at 0x11bbcca80>",
                                    "variable_type": "method-wrapper",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "ret": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask": {
                                    "variable_value": "array([ True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11bbcc4e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x116715280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "opname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'ge'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ge>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.categories": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.ordered": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ret": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "opname": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "op.__name__": {
                                    "variable_value": "'ne'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "op": {
                                    "variable_value": "<built-in function ne>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "[2019-01-01, 2020-01-01]\nCategories (2, datetime64[ns]): [2019-01-01, 2020-01-01]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2019-01-01]\nCategories (2, datetime64[ns]): [2019-01-01, 2020-01-01]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(2,)"
                                },
                                "self.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Categorical": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": "\"Categoricals can only be compared if 'categories' are the same.\"",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2019-01-01', '2020-01-01'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "(2,)"
                                },
                                "other.categories": {
                                    "variable_value": "DatetimeIndex(['2019-01-01', '2020-01-01'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "(2,)"
                                },
                                "other.ordered": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.categories.equals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other_codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._codes": {
                                    "variable_value": "array([0, 1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "f": {
                                    "variable_value": "<method-wrapper '__ne__' of numpy.ndarray object at 0x11bbe1a80>",
                                    "variable_type": "method-wrapper",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "ret": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask": {
                                    "variable_value": "array([ True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11bbe1b20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.zeros": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_zerodim_and_defer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "func.__name__": {
                                    "variable_value": "'__ne__'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "func": {
                                    "variable_value": "<function _cat_compare_op.<locals>.func at 0x116715280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _cat_compare_op(op):\n    opname = f\"__{op.__name__}__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            # TODO: Could this fail if the categories are listlike objects?\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n        else:\n\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), opname)(np.array(other))\n\n            raise TypeError(\n                f\"Cannot compare a Categorical for op {opname} with \"\n                f\"type {type(other)}.\\nIf you want to compare values, \"\n                \"use 'np.asarray(cat) <op> other'.\"\n            )\n\n    func.__name__ = opname\n\n    return func",
                "def contains(cat, key, container):\n    \"\"\"\n    Helper for membership check for ``key`` in ``cat``.\n\n    This is a helper method for :method:`__contains__`\n    and :class:`CategoricalIndex.__contains__`.\n\n    Returns True if ``key`` is in ``cat.categories`` and the\n    location of ``key`` in ``categories`` is in ``container``.\n\n    Parameters\n    ----------\n    cat : :class:`Categorical`or :class:`categoricalIndex`\n    key : a hashable object\n        The key to check membership for.\n    container : Container (e.g. list-like or mapping)\n        The container to check for membership in.\n\n    Returns\n    -------\n    is_in : bool\n        True if ``key`` is in ``self.categories`` and location of\n        ``key`` in ``categories`` is in ``container``, else False.\n\n    Notes\n    -----\n    This method does not check for NaN values. Do that separately\n    before calling this method.\n    \"\"\"\n    hash(key)\n\n    # get location of key in categories.\n    # If a KeyError, the key isn't in categories, so logically\n    #  can't be in container either.\n    try:\n        loc = cat.categories.get_loc(key)\n    except (KeyError, TypeError):\n        return False\n\n    # loc is the location of key in categories, but also the *value*\n    # for key in container. So, `key` may be in categories,\n    # but still not in `container`. Example ('b' in categories,\n    # but not in values):\n    # 'b' in Categorical(['a'], categories=['a', 'b'])  # False\n    if is_scalar(loc):\n        return loc in container\n    else:\n        # if categories is an IntervalIndex, loc is an array.\n        return any(loc_ in container for loc_ in loc)",
                "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if dtype_equal:\n        # To prevent erroneous dtype coercion in _get_data_algo, retrieve\n        # the underlying numpy array. gh-22702\n        values = getattr(values, \"_ndarray_values\", values)\n        categories = getattr(categories, \"_ndarray_values\", categories)\n    elif is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        cls = categories.dtype.construct_array_type()\n        values = try_cast_to_ea(cls, values)\n        if not isinstance(values, cls):\n            # exception raised in _from_sequence\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    else:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    hash_klass, vals = _get_data_algo(values)\n    _, cats = _get_data_algo(categories)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
                "def _recode_for_categories(codes: np.ndarray, old_categories, new_categories):\n    \"\"\"\n    Convert a set of codes for to a new set of categories\n\n    Parameters\n    ----------\n    codes : np.ndarray\n    old_categories, new_categories : Index\n\n    Returns\n    -------\n    new_codes : np.ndarray[np.int64]\n\n    Examples\n    --------\n    >>> old_cat = pd.Index(['b', 'a', 'c'])\n    >>> new_cat = pd.Index(['a', 'b'])\n    >>> codes = np.array([0, 1, 1, 2])\n    >>> _recode_for_categories(codes, old_cat, new_cat)\n    array([ 1,  0,  0, -1])\n    \"\"\"\n    if len(old_categories) == 0:\n        # All null anyway, so just retain the nulls\n        return codes.copy()\n    elif new_categories.equals(old_categories):\n        # Same categories, so no need to actually recode\n        return codes.copy()\n    indexer = coerce_indexer_dtype(\n        new_categories.get_indexer(old_categories), new_categories\n    )\n    new_codes = take_1d(indexer, codes.copy(), fill_value=-1)\n    return new_codes",
                "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n    elif is_scalar(list_like):\n        return [list_like]\n    else:\n        # TODO: is this reached?\n        return [list_like]",
                "def factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
                "def factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(factorize_from_iterable(it) for it in iterables)))",
                "@unpack_zerodim_and_defer(opname)\ndef func(self, other):\n    if is_list_like(other) and len(other) != len(self):\n        # TODO: Could this fail if the categories are listlike objects?\n        raise ValueError(\"Lengths must match.\")\n\n    if not self.ordered:\n        if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n            raise TypeError(\n                \"Unordered Categoricals can only compare equality or not\"\n            )\n    if isinstance(other, Categorical):\n        # Two Categoricals can only be be compared if the categories are\n        # the same (maybe up to ordering, depending on ordered)\n\n        msg = \"Categoricals can only be compared if 'categories' are the same.\"\n        if len(self.categories) != len(other.categories):\n            raise TypeError(msg + \" Categories are different lengths\")\n        elif self.ordered and not (self.categories == other.categories).all():\n            raise TypeError(msg)\n        elif not set(self.categories) == set(other.categories):\n            raise TypeError(msg)\n\n        if not (self.ordered == other.ordered):\n            raise TypeError(\n                \"Categoricals can only be compared if 'ordered' is the same\"\n            )\n        if not self.ordered and not self.categories.equals(other.categories):\n            # both unordered and different order\n            other_codes = _get_codes_for_values(other, self.categories)\n        else:\n            other_codes = other._codes\n\n        f = getattr(self._codes, opname)\n        ret = f(other_codes)\n        mask = (self._codes == -1) | (other_codes == -1)\n        if mask.any():\n            # In other series, the leads to False, so do that here too\n            ret[mask] = False\n        return ret\n\n    if is_scalar(other):\n        if other in self.categories:\n            i = self.categories.get_loc(other)\n            ret = getattr(self._codes, opname)(i)\n\n            if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                # check for NaN needed if we are not equal or larger\n                mask = self._codes == -1\n                ret[mask] = False\n            return ret\n        else:\n            if opname == \"__eq__\":\n                return np.zeros(len(self), dtype=bool)\n            elif opname == \"__ne__\":\n                return np.ones(len(self), dtype=bool)\n            else:\n                raise TypeError(\n                    f\"Cannot compare a Categorical for op {opname} with a \"\n                    \"scalar, which is not a category.\"\n                )\n    else:\n\n        # allow categorical vs object dtype array comparisons for equality\n        # these are only positional comparisons\n        if opname in [\"__eq__\", \"__ne__\"]:\n            return getattr(np.array(self), opname)(np.array(other))\n\n        raise TypeError(\n            f\"Cannot compare a Categorical for op {opname} with \"\n            f\"type {type(other)}.\\nIf you want to compare values, \"\n            \"use 'np.asarray(cat) <op> other'.\"\n        )",
                "def __init__(\n    self, values, categories=None, ordered=None, dtype=None, fastpath=False\n):\n\n    dtype = CategoricalDtype._from_values_or_dtype(\n        values, categories, ordered, dtype\n    )\n    # At this point, dtype is always a CategoricalDtype, but\n    # we may have dtype.categories be None, and we need to\n    # infer categories in a factorization step further below\n\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, dtype.categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n\n    # null_mask indicates missing values we want to exclude from inference.\n    # This means: only missing values in list-likes (not arrays/ndframes).\n    null_mask = np.array(False)\n\n    # sanitize input\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype.ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        # sanitize_array coerces np.nan to a string under certain versions\n        # of numpy\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n\n            # By convention, empty lists result in object dtype:\n            sanitize_dtype = \"object\" if len(values) == 0 else None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n    if dtype.categories is None:\n        try:\n            codes, categories = factorize(values, sort=True)\n        except TypeError as err:\n            codes, categories = factorize(values, sort=False)\n            if dtype.ordered:\n                # raise, as we don't have a sortable data structure and so\n                # the user should give us one by specifying categories\n                raise TypeError(\n                    \"'values' is not ordered, please \"\n                    \"explicitly specify the categories order \"\n                    \"by passing in a categories argument.\"\n                ) from err\n        except ValueError as err:\n\n            # FIXME\n            raise NotImplementedError(\n                \"> 1 ndim Categorical are not supported at this time\"\n            ) from err\n\n        # we're inferring from values\n        dtype = CategoricalDtype(categories, dtype.ordered)\n\n    elif is_categorical_dtype(values):\n        old_codes = (\n            values._values.codes if isinstance(values, ABCSeries) else values.codes\n        )\n        codes = _recode_for_categories(\n            old_codes, values.dtype.categories, dtype.categories\n        )\n\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n\n    if null_mask.any():\n        # Reinsert -1 placeholders for previously removed missing values\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)",
                "@property\ndef categories(self):\n    \"\"\"\n    The categories of this categorical.\n\n    Setting assigns new values to each category (effectively a rename of\n    each individual category).\n\n    The assigned value has to be a list-like object. All items must be\n    unique and the number of items in the new categories must be the same\n    as the number of items in the old categories.\n\n    Assigning to `categories` is a inplace operation!\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not validate as categories or if the\n        number of new categories is unequal the number of old categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    return self.dtype.categories",
                "@categories.setter\ndef categories(self, categories):\n    new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if self.dtype.categories is not None and len(self.dtype.categories) != len(\n        new_dtype.categories\n    ):\n        raise ValueError(\n            \"new categories need to have the same number of \"\n            \"items as the old categories!\"\n        )\n    self._dtype = new_dtype",
                "@property\ndef ordered(self) -> Ordered:\n    \"\"\"\n    Whether the categories have an ordered relationship.\n    \"\"\"\n    return self.dtype.ordered",
                "@property\ndef dtype(self) -> CategoricalDtype:\n    \"\"\"\n    The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n    \"\"\"\n    return self._dtype",
                "@property\ndef _ndarray_values(self) -> np.ndarray:\n    return self.codes",
                "@property\ndef _constructor(self) -> Type[\"Categorical\"]:\n    return Categorical",
                "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return Categorical(scalars, dtype=dtype)",
                "def _formatter(self, boxed=False):\n    # Defer to CategoricalFormatter's formatter.\n    return None",
                "def copy(self) -> \"Categorical\":\n    \"\"\"\n    Copy constructor.\n    \"\"\"\n    return self._constructor(\n        values=self._codes.copy(), dtype=self.dtype, fastpath=True\n    )",
                "def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n    \"\"\"\n    Coerce this type to another dtype\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and dtype is categorical, the original\n        object is returned.\n    \"\"\"\n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n\n        # GH 10696/18593\n        dtype = self.dtype.update_dtype(dtype)\n        self = self.copy() if copy else self\n        if dtype == self.dtype:\n            return self\n        return self._set_dtype(dtype)\n    if is_extension_array_dtype(dtype):\n        return array(self, dtype=dtype, copy=copy)  # type: ignore # GH 28770\n    if is_integer_dtype(dtype) and self.isna().any():\n        raise ValueError(\"Cannot convert float NaN to integer\")\n    return np.array(self, dtype=dtype, copy=copy)",
                "@cache_readonly\ndef size(self) -> int:\n    \"\"\"\n    Return the len of myself.\n    \"\"\"\n    return self._codes.size",
                "@cache_readonly\ndef itemsize(self) -> int:\n    \"\"\"\n    return the size of a single category\n    \"\"\"\n    return self.categories.itemsize",
                "def tolist(self) -> List[Scalar]:\n    \"\"\"\n    Return a list of the values.\n\n    These are each a scalar type, which is a Python scalar\n    (for str, int, float) or a pandas scalar\n    (for Timestamp/Timedelta/Interval/Period)\n    \"\"\"\n    return list(self)",
                "@classmethod\ndef _from_inferred_categories(\n    cls, inferred_categories, inferred_codes, dtype, true_values=None\n):\n    \"\"\"\n    Construct a Categorical from inferred values.\n\n    For inferred categories (`dtype` is None) the categories are sorted.\n    For explicit `dtype`, the `inferred_categories` are cast to the\n    appropriate type.\n\n    Parameters\n    ----------\n    inferred_categories : Index\n    inferred_codes : Index\n    dtype : CategoricalDtype or 'category'\n    true_values : list, optional\n        If none are provided, the default ones are\n        \"True\", \"TRUE\", and \"true.\"\n\n    Returns\n    -------\n    Categorical\n    \"\"\"\n    from pandas import Index, to_numeric, to_datetime, to_timedelta\n\n    cats = Index(inferred_categories)\n    known_categories = (\n        isinstance(dtype, CategoricalDtype) and dtype.categories is not None\n    )\n\n    if known_categories:\n        # Convert to a specialized type with `dtype` if specified.\n        if dtype.categories.is_numeric():\n            cats = to_numeric(inferred_categories, errors=\"coerce\")\n        elif is_datetime64_dtype(dtype.categories):\n            cats = to_datetime(inferred_categories, errors=\"coerce\")\n        elif is_timedelta64_dtype(dtype.categories):\n            cats = to_timedelta(inferred_categories, errors=\"coerce\")\n        elif dtype.categories.is_boolean():\n            if true_values is None:\n                true_values = [\"True\", \"TRUE\", \"true\"]\n\n            cats = cats.isin(true_values)\n\n    if known_categories:\n        # Recode from observation order to dtype.categories order.\n        categories = dtype.categories\n        codes = _recode_for_categories(inferred_codes, cats, categories)\n    elif not cats.is_monotonic_increasing:\n        # Sort categories and recode for unknown categories.\n        unsorted = cats.copy()\n        categories = cats.sort_values()\n\n        codes = _recode_for_categories(inferred_codes, unsorted, categories)\n        dtype = CategoricalDtype(categories, ordered=False)\n    else:\n        dtype = CategoricalDtype(cats, ordered=False)\n        codes = inferred_codes\n\n    return cls(codes, dtype=dtype, fastpath=True)",
                "@classmethod\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n    \"\"\"\n    Make a Categorical type from codes and categories or dtype.\n\n    This constructor is useful if you already have codes and\n    categories/dtype and so do not need the (computation intensive)\n    factorization step, which is usually done on the constructor.\n\n    If your data does not follow this convention, please use the normal\n    constructor.\n\n    Parameters\n    ----------\n    codes : array-like of int\n        An integer array, where each integer points to a category in\n        categories or dtype.categories, or else is -1 for NaN.\n    categories : index-like, optional\n        The categories for the categorical. Items need to be unique.\n        If the categories are not given here, then they must be provided\n        in `dtype`.\n    ordered : bool, optional\n        Whether or not this categorical is treated as an ordered\n        categorical. If not given here or in `dtype`, the resulting\n        categorical will be unordered.\n    dtype : CategoricalDtype or \"category\", optional\n        If :class:`CategoricalDtype`, cannot be used together with\n        `categories` or `ordered`.\n\n        .. versionadded:: 0.24.0\n\n           When `dtype` is provided, neither `categories` nor `ordered`\n           should be provided.\n\n    Returns\n    -------\n    Categorical\n\n    Examples\n    --------\n    >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n    >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n    [a, b, a, b]\n    Categories (2, object): [a < b]\n    \"\"\"\n    dtype = CategoricalDtype._from_values_or_dtype(\n        categories=categories, ordered=ordered, dtype=dtype\n    )\n    if dtype.categories is None:\n        msg = (\n            \"The categories must be provided in 'categories' or \"\n            \"'dtype'. Both were None.\"\n        )\n        raise ValueError(msg)\n\n    if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n        # Avoid the implicit conversion of Int to object\n        if isna(codes).any():\n            raise ValueError(\"codes cannot contain NA values\")\n        codes = codes.to_numpy(dtype=np.int64)\n    else:\n        codes = np.asarray(codes)\n    if len(codes) and not is_integer_dtype(codes):\n        raise ValueError(\"codes need to be array-like integers\")\n\n    if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n        raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n    return cls(codes, dtype=dtype, fastpath=True)",
                "def _get_codes(self):\n    \"\"\"\n    Get the codes.\n\n    Returns\n    -------\n    codes : integer array view\n        A non writable view of the `codes` array.\n    \"\"\"\n    v = self._codes.view()\n    v.flags.writeable = False\n    return v",
                "def _set_codes(self, codes):\n    \"\"\"\n    Not settable by the user directly\n    \"\"\"\n    raise ValueError(\"cannot set Categorical codes directly\")",
                "def _set_categories(self, categories, fastpath=False):\n    \"\"\"\n    Sets new categories inplace\n\n    Parameters\n    ----------\n    fastpath : bool, default False\n       Don't perform validation of the categories for uniqueness or nulls\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'b'])\n    >>> c\n    [a, b]\n    Categories (2, object): [a, b]\n\n    >>> c._set_categories(pd.Index(['a', 'c']))\n    >>> c\n    [a, c]\n    Categories (2, object): [a, c]\n    \"\"\"\n    if fastpath:\n        new_dtype = CategoricalDtype._from_fastpath(categories, self.ordered)\n    else:\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if (\n        not fastpath\n        and self.dtype.categories is not None\n        and len(new_dtype.categories) != len(self.dtype.categories)\n    ):\n        raise ValueError(\n            \"new categories need to have the same number of \"\n            \"items than the old categories!\"\n        )\n\n    self._dtype = new_dtype",
                "def _set_dtype(self, dtype: CategoricalDtype) -> \"Categorical\":\n    \"\"\"\n    Internal method for directly updating the CategoricalDtype\n\n    Parameters\n    ----------\n    dtype : CategoricalDtype\n\n    Notes\n    -----\n    We don't do any validation here. It's assumed that the dtype is\n    a (valid) instance of `CategoricalDtype`.\n    \"\"\"\n    codes = _recode_for_categories(self.codes, self.categories, dtype.categories)\n    return type(self)(codes, dtype=dtype, fastpath=True)",
                "def set_ordered(self, value, inplace=False):\n    \"\"\"\n    Set the ordered attribute to the boolean value.\n\n    Parameters\n    ----------\n    value : bool\n       Set whether this categorical is ordered (True) or not (False).\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to the value.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    new_dtype = CategoricalDtype(self.categories, ordered=value)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                "def as_ordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be ordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to True.\n\n    Returns\n    -------\n    Categorical\n        Ordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    return self.set_ordered(True, inplace=inplace)",
                "def as_unordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be unordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to False.\n\n    Returns\n    -------\n    Categorical\n        Unordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    return self.set_ordered(False, inplace=inplace)",
                "def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n    \"\"\"\n    Set the categories to the specified new_categories.\n\n    `new_categories` can include new categories (which will result in\n    unused categories) or remove old categories (which results in values\n    set to NaN). If `rename==True`, the categories will simple be renamed\n    (less or more items than in old categories will result in values set to\n    NaN or in unused categories respectively).\n\n    This method can be used to perform more than one action of adding,\n    removing, and reordering simultaneously and is therefore faster than\n    performing the individual steps via the more specialised methods.\n\n    On the other hand this methods does not do checks (e.g., whether the\n    old categories are included in the new categories on a reorder), which\n    can result in surprising changes, for example when using special string\n    dtypes, which does not considers a S1 string equal to a single char\n    python string.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, default False\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    rename : bool, default False\n       Whether or not the new_categories should be considered as a rename\n       of the old categories or as reordered categories.\n    inplace : bool, default False\n       Whether or not to reorder the categories in-place or return a copy\n       of this categorical with reordered categories.\n\n    Returns\n    -------\n    Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If new_categories does not validate as categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if ordered is None:\n        ordered = self.dtype.ordered\n    new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n\n    cat = self if inplace else self.copy()\n    if rename:\n        if cat.dtype.categories is not None and len(new_dtype.categories) < len(\n            cat.dtype.categories\n        ):\n            # remove all _codes which are larger and set to -1/NaN\n            cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n    else:\n        codes = _recode_for_categories(\n            cat.codes, cat.categories, new_dtype.categories\n        )\n        cat._codes = codes\n    cat._dtype = new_dtype\n\n    if not inplace:\n        return cat",
                "def rename_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Rename categories.\n\n    Parameters\n    ----------\n    new_categories : list-like, dict-like or callable\n\n        New categories which will replace old categories.\n\n        * list-like: all items must be unique and the number of items in\n          the new categories must match the existing number of categories.\n\n        * dict-like: specifies a mapping from\n          old categories to new. Categories not contained in the mapping\n          are passed through and extra categories in the mapping are\n          ignored.\n\n        .. versionadded:: 0.21.0.\n\n        * callable : a callable that is called on all items in the old\n          categories and whose return values comprise the new categories.\n\n        .. versionadded:: 0.23.0.\n\n    inplace : bool, default False\n        Whether or not to rename the categories inplace or return a copy of\n        this categorical with renamed categories.\n\n    Returns\n    -------\n    cat : Categorical or None\n       With ``inplace=False``, the new categorical is returned.\n       With ``inplace=True``, there is no return value.\n\n    Raises\n    ------\n    ValueError\n        If new categories are list-like and do not have the same number of\n        items than the current categories or do not validate as categories\n\n    See Also\n    --------\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'a', 'b'])\n    >>> c.rename_categories([0, 1])\n    [0, 0, 1]\n    Categories (2, int64): [0, 1]\n\n    For dict-like ``new_categories``, extra keys are ignored and\n    categories not in the dictionary are passed through\n\n    >>> c.rename_categories({'a': 'A', 'c': 'C'})\n    [A, A, b]\n    Categories (2, object): [A, b]\n\n    You may also provide a callable to create the new categories\n\n    >>> c.rename_categories(lambda x: x.upper())\n    [A, A, B]\n    Categories (2, object): [A, B]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n\n    if is_dict_like(new_categories):\n        cat.categories = [new_categories.get(item, item) for item in cat.categories]\n    elif callable(new_categories):\n        cat.categories = [new_categories(item) for item in cat.categories]\n    else:\n        cat.categories = new_categories\n    if not inplace:\n        return cat",
                "def reorder_categories(self, new_categories, ordered=None, inplace=False):\n    \"\"\"\n    Reorder categories as specified in new_categories.\n\n    `new_categories` need to include all old categories and no new category\n    items.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, optional\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    inplace : bool, default False\n       Whether or not to reorder the categories inplace or return a copy of\n       this categorical with reordered categories.\n\n    Returns\n    -------\n    cat : Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not contain all old category items or any\n        new ones\n\n    See Also\n    --------\n    rename_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if set(self.dtype.categories) != set(new_categories):\n        raise ValueError(\n            \"items in new_categories are not the same as in old categories\"\n        )\n    return self.set_categories(new_categories, ordered=ordered, inplace=inplace)",
                "def add_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Add new categories.\n\n    `new_categories` will be included at the last/highest place in the\n    categories and will be unused directly after this call.\n\n    Parameters\n    ----------\n    new_categories : category or list-like of category\n       The new categories to be included.\n    inplace : bool, default False\n       Whether or not to add the categories inplace or return a copy of\n       this categorical with added categories.\n\n    Returns\n    -------\n    cat : Categorical with new categories added or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories include old categories or do not validate as\n        categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_list_like(new_categories):\n        new_categories = [new_categories]\n    already_included = set(new_categories) & set(self.dtype.categories)\n    if len(already_included) != 0:\n        raise ValueError(\n            f\"new categories must not include old categories: {already_included}\"\n        )\n    new_categories = list(self.dtype.categories) + list(new_categories)\n    new_dtype = CategoricalDtype(new_categories, self.ordered)\n\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n    if not inplace:\n        return cat",
                "def remove_categories(self, removals, inplace=False):\n    \"\"\"\n    Remove the specified categories.\n\n    `removals` must be included in the old categories. Values which were in\n    the removed categories will be set to NaN\n\n    Parameters\n    ----------\n    removals : category or list of categories\n       The categories which should be removed.\n    inplace : bool, default False\n       Whether or not to remove the categories inplace or return a copy of\n       this categorical with removed categories.\n\n    Returns\n    -------\n    cat : Categorical with removed categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the removals are not contained in the categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_list_like(removals):\n        removals = [removals]\n\n    removal_set = set(removals)\n    not_included = removal_set - set(self.dtype.categories)\n    new_categories = [c for c in self.dtype.categories if c not in removal_set]\n\n    # GH 10156\n    if any(isna(removals)):\n        not_included = {x for x in not_included if notna(x)}\n        new_categories = [x for x in new_categories if notna(x)]\n\n    if len(not_included) != 0:\n        raise ValueError(f\"removals must all be in old categories: {not_included}\")\n\n    return self.set_categories(\n        new_categories, ordered=self.ordered, rename=False, inplace=inplace\n    )",
                "def remove_unused_categories(self, inplace=False):\n    \"\"\"\n    Remove categories which are not used.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to drop unused categories inplace or return a copy of\n       this categorical with unused categories dropped.\n\n    Returns\n    -------\n    cat : Categorical with unused categories dropped or None if inplace.\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n    idx, inv = np.unique(cat._codes, return_inverse=True)\n\n    if idx.size != 0 and idx[0] == -1:  # na sentinel\n        idx, inv = idx[1:], inv - 1\n\n    new_categories = cat.dtype.categories.take(idx)\n    new_dtype = CategoricalDtype._from_fastpath(\n        new_categories, ordered=self.ordered\n    )\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(inv, new_dtype.categories)\n\n    if not inplace:\n        return cat",
                "def map(self, mapper):\n    \"\"\"\n    Map categories using input correspondence (dict, Series, or function).\n\n    Maps the categories to new categories. If the mapping correspondence is\n    one-to-one the result is a :class:`~pandas.Categorical` which has the\n    same order property as the original, otherwise a :class:`~pandas.Index`\n    is returned. NaN values are unaffected.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.Categorical or pandas.Index\n        Mapped categorical.\n\n    See Also\n    --------\n    CategoricalIndex.map : Apply a mapping correspondence on a\n        :class:`~pandas.CategoricalIndex`.\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'b', 'c'])\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n    >>> cat.map(lambda x: x.upper())\n    [A, B, C]\n    Categories (3, object): [A, B, C]\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    [first, second, third]\n    Categories (3, object): [first, second, third]\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a < b < c]\n    >>> cat.map({'a': 3, 'b': 2, 'c': 1})\n    [3, 2, 1]\n    Categories (3, int64): [3 < 2 < 1]\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> cat.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    new_categories = self.categories.map(mapper)\n    try:\n        return self.from_codes(\n            self._codes.copy(), categories=new_categories, ordered=self.ordered\n        )\n    except ValueError:\n        # NA values are represented in self._codes with -1\n        # np.take causes NA values to take final element in new_categories\n        if np.any(self._codes == -1):\n            new_categories = new_categories.insert(len(new_categories), np.nan)\n        return np.take(new_categories, self._codes)",
                "@property\ndef shape(self):\n    \"\"\"\n    Shape of the Categorical.\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    shape : tuple\n    \"\"\"\n    return tuple([len(self._codes)])",
                "def shift(self, periods, fill_value=None):\n    \"\"\"\n    Shift Categorical by desired number of periods.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative\n    fill_value : object, optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    shifted : Categorical\n    \"\"\"\n    # since categoricals always have ndim == 1, an axis parameter\n    # doesn't make any sense here.\n    codes = self.codes\n    if codes.ndim > 1:\n        raise NotImplementedError(\"Categorical with ndim > 1.\")\n    if np.prod(codes.shape) and (periods != 0):\n        codes = np.roll(codes, ensure_platform_int(periods), axis=0)\n        if isna(fill_value):\n            fill_value = -1\n        elif fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            raise ValueError(\n                f\"'fill_value={fill_value}' is not present \"\n                \"in this Categorical's categories\"\n            )\n        if periods > 0:\n            codes[:periods] = fill_value\n        else:\n            codes[periods:] = fill_value\n\n    return self.from_codes(codes, dtype=self.dtype)",
                "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The numpy array interface.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of either the specified dtype or,\n        if dtype==None (default), the same dtype as\n        categorical.categories.dtype.\n    \"\"\"\n    ret = take_1d(self.categories.values, self._codes)\n    if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n        return np.asarray(ret, dtype)\n    if is_extension_array_dtype(ret):\n        # When we're a Categorical[ExtensionArray], like Interval,\n        # we need to ensure __array__ get's all the way to an\n        # ndarray.\n        ret = np.asarray(ret)\n    return ret",
                "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    # for binary ops, use our custom dunder methods\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(\n        self, ufunc, method, *inputs, **kwargs\n    )\n    if result is not NotImplemented:\n        return result\n\n    # for all other cases, raise for now (similarly as what happens in\n    # Series.__array_prepare__)\n    raise TypeError(\n        f\"Object with dtype {self.dtype} cannot perform \"\n        f\"the numpy op {ufunc.__name__}\"\n    )",
                "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    if not isinstance(state, dict):\n        raise Exception(\"invalid pickle state\")\n\n    # compat with pre 0.21.0 CategoricalDtype change\n    if \"_dtype\" not in state:\n        state[\"_dtype\"] = CategoricalDtype(state[\"_categories\"], state[\"_ordered\"])\n\n    for k, v in state.items():\n        setattr(self, k, v)",
                "@property\ndef T(self):\n    \"\"\"\n    Return transposed numpy array.\n    \"\"\"\n    return self",
                "@property\ndef nbytes(self):\n    return self._codes.nbytes + self.dtype.categories.values.nbytes",
                "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self._codes.nbytes + self.dtype.categories.memory_usage(deep=deep)",
                "@Substitution(klass=\"Categorical\")\n@Appender(_shared_docs[\"searchsorted\"])\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    # searchsorted is very performance sensitive. By converting codes\n    # to same dtype as self.codes, we get much faster performance.\n    if is_scalar(value):\n        codes = self.categories.get_loc(value)\n        codes = self.codes.dtype.type(codes)\n    else:\n        locs = [self.categories.get_loc(x) for x in value]\n        codes = np.array(locs, dtype=self.codes.dtype)\n    return self.codes.searchsorted(codes, side=side, sorter=sorter)",
                "def isna(self):\n    \"\"\"\n    Detect missing values\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    a boolean array of whether my values are null\n\n    See Also\n    --------\n    isna : Top-level isna.\n    isnull : Alias of isna.\n    Categorical.notna : Boolean inverse of Categorical.isna.\n\n    \"\"\"\n    ret = self._codes == -1\n    return ret",
                "def notna(self):\n    \"\"\"\n    Inverse of isna\n\n    Both missing values (-1 in .codes) and NA as a category are detected as\n    null.\n\n    Returns\n    -------\n    a boolean array of whether my values are not null\n\n    See Also\n    --------\n    notna : Top-level notna.\n    notnull : Alias of notna.\n    Categorical.isna : Boolean inverse of Categorical.notna.\n\n    \"\"\"\n    return ~self.isna()",
                "def put(self, *args, **kwargs):\n    \"\"\"\n    Replace specific elements in the Categorical with given values.\n    \"\"\"\n    raise NotImplementedError((\"'put' is not yet implemented for Categorical\"))",
                "def dropna(self):\n    \"\"\"\n    Return the Categorical without null values.\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    valid : Categorical\n    \"\"\"\n    result = self[self.notna()]\n\n    return result",
                "def value_counts(self, dropna=True):\n    \"\"\"\n    Return a Series containing counts of each category.\n\n    Every category will have an entry, even those with a count of 0.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    from pandas import Series, CategoricalIndex\n\n    code, cat = self._codes, self.categories\n    ncat, mask = len(cat), 0 <= code\n    ix, clean = np.arange(ncat), mask.all()\n\n    if dropna or clean:\n        obs = code if clean else code[mask]\n        count = np.bincount(obs, minlength=ncat or 0)\n    else:\n        count = np.bincount(np.where(mask, code, ncat))\n        ix = np.append(ix, -1)\n\n    ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n\n    return Series(count, index=CategoricalIndex(ix), dtype=\"int64\")",
                "def _internal_get_values(self):\n    \"\"\"\n    Return the values.\n\n    For internal compatibility with pandas formatting.\n\n    Returns\n    -------\n    np.ndarray or Index\n        A numpy array of the same dtype as categorical.categories.dtype or\n        Index if datetime / periods.\n    \"\"\"\n    # if we are a datetime and period index, return Index to keep metadata\n    if needs_i8_conversion(self.categories):\n        return self.categories.take(self._codes, fill_value=np.nan)\n    elif is_integer_dtype(self.categories) and -1 in self._codes:\n        return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n    return np.array(self)",
                "def check_for_ordered(self, op):\n    \"\"\" assert that we are ordered \"\"\"\n    if not self.ordered:\n        raise TypeError(\n            f\"Categorical is not ordered for operation {op}\\n\"\n            \"you can use .as_ordered() to change the \"\n            \"Categorical to an ordered one\\n\"\n        )",
                "def _values_for_argsort(self):\n    return self._codes.copy()",
                "def argsort(self, ascending=True, kind=\"quicksort\", **kwargs):\n    \"\"\"\n    Return the indices that would sort the Categorical.\n\n    .. versionchanged:: 0.25.0\n\n       Changed to sort missing values at the end.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        Whether the indices should result in an ascending\n        or descending sort.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm.\n    **kwargs:\n        passed through to :func:`numpy.argsort`.\n\n    Returns\n    -------\n    numpy.array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n\n    Notes\n    -----\n    While an ordering is applied to the category values, arg-sorting\n    in this context refers more to organizing and grouping together\n    based on matching category values. Thus, this function can be\n    called on an unordered Categorical instance unlike the functions\n    'Categorical.min' and 'Categorical.max'.\n\n    Examples\n    --------\n    >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n    array([2, 0, 1, 3])\n\n    >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n    ...                      categories=['c', 'b', 'a'],\n    ...                      ordered=True)\n    >>> cat.argsort()\n    array([3, 0, 1, 2])\n\n    Missing values are placed at the end\n\n    >>> cat = pd.Categorical([2, None, 1])\n    >>> cat.argsort()\n    array([2, 0, 1])\n    \"\"\"\n    return super().argsort(ascending=ascending, kind=kind, **kwargs)",
                "def sort_values(self, inplace=False, ascending=True, na_position=\"last\"):\n    \"\"\"\n    Sort the Categorical by category value returning a new\n    Categorical by default.\n\n    While an ordering is applied to the category values, sorting in this\n    context refers more to organizing and grouping together based on\n    matching category values. Thus, this function can be called on an\n    unordered Categorical instance unlike the functions 'Categorical.min'\n    and 'Categorical.max'.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        Do operation in place.\n    ascending : bool, default True\n        Order ascending. Passing False orders descending. The\n        ordering parameter provides the method by which the\n        category values are organized.\n    na_position : {'first', 'last'} (optional, default='last')\n        'first' puts NaNs at the beginning\n        'last' puts NaNs at the end\n\n    Returns\n    -------\n    Categorical or None\n\n    See Also\n    --------\n    Categorical.sort\n    Series.sort_values\n\n    Examples\n    --------\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n    >>> c\n    [1, 2, 2, 1, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values()\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, 1, 1]\n    Categories (3, int64): [1, 2, 5]\n\n    Inplace sorting can be done as well:\n\n    >>> c.sort_values(inplace=True)\n    >>> c\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>>\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n    'sort_values' behaviour with NaNs. Note that 'na_position'\n    is independent of the 'ascending' parameter:\n\n    >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n    >>> c\n    [NaN, 2.0, 2.0, NaN, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values()\n    [2.0, 2.0, 5.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False)\n    [5.0, 2.0, 2.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(na_position='first')\n    [NaN, NaN, 2.0, 2.0, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False, na_position='first')\n    [NaN, NaN, 5.0, 2.0, 2.0]\n    Categories (2, int64): [2, 5]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if na_position not in [\"last\", \"first\"]:\n        raise ValueError(f\"invalid na_position: {repr(na_position)}\")\n\n    sorted_idx = nargsort(self, ascending=ascending, na_position=na_position)\n\n    if inplace:\n        self._codes = self._codes[sorted_idx]\n    else:\n        return self._constructor(\n            values=self._codes[sorted_idx], dtype=self.dtype, fastpath=True\n        )",
                "def _values_for_rank(self):\n    \"\"\"\n    For correctly ranking ordered categorical data. See GH#15420\n\n    Ordered categorical data should be ranked on the basis of\n    codes with -1 translated to NaN.\n\n    Returns\n    -------\n    numpy.array\n\n    \"\"\"\n    from pandas import Series\n\n    if self.ordered:\n        values = self.codes\n        mask = values == -1\n        if mask.any():\n            values = values.astype(\"float64\")\n            values[mask] = np.nan\n    elif self.categories.is_numeric():\n        values = np.array(self)\n    else:\n        #  reorder the categories (so rank can use the float codes)\n        #  instead of passing an object array to rank\n        values = np.array(\n            self.rename_categories(Series(self.categories).rank().values)\n        )\n    return values",
                "def view(self, dtype=None):\n    if dtype is not None:\n        raise NotImplementedError(dtype)\n    return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)",
                "def to_dense(self):\n    \"\"\"\n    Return my 'dense' representation\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    dense : array\n    \"\"\"\n    return np.asarray(self)",
                "def fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n\n    codes = self._codes\n\n    # pad / bfill\n    if method is not None:\n\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(\n            self.categories.dtype\n        )[0]\n        codes = _get_codes_for_values(values, self.categories)\n\n    else:\n\n        # If value is a dict or a Series (a dict value has already\n        # been converted to a Series)\n        if isinstance(value, ABCSeries):\n            if not value[~value.isin(self.categories)].isna().all():\n                raise ValueError(\"fill value must be in categories\")\n\n            values_codes = _get_codes_for_values(value, self.categories)\n            indexer = np.where(codes == -1)\n            codes[indexer] = values_codes[indexer]\n\n        # If value is not a dict or Series it should be a scalar\n        elif is_hashable(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n\n            mask = codes == -1\n            if mask.any():\n                codes = codes.copy()\n                if isna(value):\n                    codes[mask] = -1\n                else:\n                    codes[mask] = self.categories.get_loc(value)\n\n        else:\n            raise TypeError(\n                f\"'value' parameter must be a scalar, dict \"\n                f\"or Series, but you passed a {type(value).__name__}\"\n            )\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                "def take(self, indexer, allow_fill: bool = False, fill_value=None):\n    \"\"\"\n    Take elements from the Categorical.\n\n    Parameters\n    ----------\n    indexer : sequence of int\n        The indices in `self` to take. The meaning of negative values in\n        `indexer` depends on the value of `allow_fill`.\n    allow_fill : bool, default False\n        How to handle negative values in `indexer`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right. This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate missing values\n          (the default). These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n        .. versionchanged:: 1.0.0\n\n           Default value changed from ``True`` to ``False``.\n\n    fill_value : object\n        The value to use for `indices` that are missing (-1), when\n        ``allow_fill=True``. This should be the category, i.e. a value\n        in ``self.categories``, not a code.\n\n    Returns\n    -------\n    Categorical\n        This Categorical will have the same categories and ordered as\n        `self`.\n\n    See Also\n    --------\n    Series.take : Similar method for Series.\n    numpy.ndarray.take : Similar method for NumPy arrays.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'a', 'b'])\n    >>> cat\n    [a, a, b]\n    Categories (2, object): [a, b]\n\n    Specify ``allow_fill==False`` to have negative indices mean indexing\n    from the right.\n\n    >>> cat.take([0, -1, -2], allow_fill=False)\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n    values that should be filled with the `fill_value`, which is\n    ``np.nan`` by default.\n\n    >>> cat.take([0, -1, -1], allow_fill=True)\n    [a, NaN, NaN]\n    Categories (2, object): [a, b]\n\n    The fill value can be specified.\n\n    >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n    [a, a, a]\n    Categories (3, object): [a, b]\n\n    Specifying a fill value that's not in ``self.categories``\n    will raise a ``TypeError``.\n    \"\"\"\n    indexer = np.asarray(indexer, dtype=np.intp)\n\n    dtype = self.dtype\n\n    if isna(fill_value):\n        fill_value = -1\n    elif allow_fill:\n        # convert user-provided `fill_value` to codes\n        if fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            msg = (\n                f\"'fill_value' ('{fill_value}') is not in this \"\n                \"Categorical's categories.\"\n            )\n            raise TypeError(msg)\n\n    codes = take(self._codes, indexer, allow_fill=allow_fill, fill_value=fill_value)\n    result = type(self).from_codes(codes, dtype=dtype)\n    return result",
                "def take_nd(self, indexer, allow_fill: bool = False, fill_value=None):\n    # GH#27745 deprecate alias that other EAs dont have\n    warn(\n        \"Categorical.take_nd is deprecated, use Categorical.take instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self.take(indexer, allow_fill=allow_fill, fill_value=fill_value)",
                "def __len__(self) -> int:\n    \"\"\"\n    The length of this Categorical.\n    \"\"\"\n    return len(self._codes)",
                "def __iter__(self):\n    \"\"\"\n    Returns an Iterator over the values of this Categorical.\n    \"\"\"\n    return iter(self._internal_get_values().tolist())",
                "def __contains__(self, key) -> bool:\n    \"\"\"\n    Returns True if `key` is in this Categorical.\n    \"\"\"\n    # if key is a NaN, check if any NaN is in self.\n    if is_scalar(key) and isna(key):\n        return self.isna().any()\n\n    return contains(self, key, container=self._codes)",
                "def _tidy_repr(self, max_vals=10, footer=True) -> str:\n    \"\"\"\n    a short repr displaying only max_vals and an optional (but default\n    footer)\n    \"\"\"\n    num = max_vals // 2\n    head = self[:num]._get_repr(length=False, footer=False)\n    tail = self[-(max_vals - num) :]._get_repr(length=False, footer=False)\n\n    result = f\"{head[:-1]}, ..., {tail[1:]}\"\n    if footer:\n        result = f\"{result}\\n{self._repr_footer()}\"\n\n    return str(result)",
                "def _repr_categories(self):\n    \"\"\"\n    return the base repr for the categories\n    \"\"\"\n    max_categories = (\n        10\n        if get_option(\"display.max_categories\") == 0\n        else get_option(\"display.max_categories\")\n    )\n    from pandas.io.formats import format as fmt\n\n    if len(self.categories) > max_categories:\n        num = max_categories // 2\n        head = fmt.format_array(self.categories[:num], None)\n        tail = fmt.format_array(self.categories[-num:], None)\n        category_strs = head + [\"...\"] + tail\n    else:\n        category_strs = fmt.format_array(self.categories, None)\n\n    # Strip all leading spaces, which format_array adds for columns...\n    category_strs = [x.strip() for x in category_strs]\n    return category_strs",
                "def _repr_categories_info(self) -> str:\n    \"\"\"\n    Returns a string representation of the footer.\n    \"\"\"\n    category_strs = self._repr_categories()\n    dtype = str(self.categories.dtype)\n    levheader = f\"Categories ({len(self.categories)}, {dtype}): \"\n    width, height = get_terminal_size()\n    max_width = get_option(\"display.width\") or width\n    if console.in_ipython_frontend():\n        # 0 = no breaks\n        max_width = 0\n    levstring = \"\"\n    start = True\n    cur_col_len = len(levheader)  # header\n    sep_len, sep = (3, \" < \") if self.ordered else (2, \", \")\n    linesep = sep.rstrip() + \"\\n\"  # remove whitespace\n    for val in category_strs:\n        if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n            levstring += linesep + (\" \" * (len(levheader) + 1))\n            cur_col_len = len(levheader) + 1  # header + a whitespace\n        elif not start:\n            levstring += sep\n            cur_col_len += len(val)\n        levstring += val\n        start = False\n    # replace to simple save space by\n    return levheader + \"[\" + levstring.replace(\" < ... < \", \" ... \") + \"]\"",
                "def _repr_footer(self) -> str:\n    info = self._repr_categories_info()\n    return f\"Length: {len(self)}\\n{info}\"",
                "def _get_repr(self, length=True, na_rep=\"NaN\", footer=True) -> str:\n    from pandas.io.formats import format as fmt\n\n    formatter = fmt.CategoricalFormatter(\n        self, length=length, na_rep=na_rep, footer=footer\n    )\n    result = formatter.to_string()\n    return str(result)",
                "def __repr__(self) -> str:\n    \"\"\"\n    String representation.\n    \"\"\"\n    _maxlen = 10\n    if len(self._codes) > _maxlen:\n        result = self._tidy_repr(_maxlen)\n    elif len(self._codes) > 0:\n        result = self._get_repr(length=len(self) > _maxlen)\n    else:\n        msg = self._get_repr(length=False, footer=True).replace(\"\\n\", \", \")\n        result = f\"[], {msg}\"\n\n    return result",
                "def _maybe_coerce_indexer(self, indexer):\n    \"\"\"\n    return an indexer coerced to the codes dtype\n    \"\"\"\n    if isinstance(indexer, np.ndarray) and indexer.dtype.kind == \"i\":\n        indexer = indexer.astype(self._codes.dtype)\n    return indexer",
                "def __getitem__(self, key):\n    \"\"\"\n    Return an item.\n    \"\"\"\n    if isinstance(key, (int, np.integer)):\n        i = self._codes[key]\n        if i == -1:\n            return np.nan\n        else:\n            return self.categories[i]\n\n    key = check_array_indexer(self, key)\n\n    result = self._codes[key]\n    if result.ndim > 1:\n        deprecate_ndim_indexing(result)\n        return result\n    return self._constructor(result, dtype=self.dtype, fastpath=True)",
                "def __setitem__(self, key, value):\n    \"\"\"\n    Item assignment.\n\n    Raises\n    ------\n    ValueError\n        If (one or more) Value is not in categories or if a assigned\n        `Categorical` does not have the same categories\n    \"\"\"\n    value = extract_array(value, extract_numpy=True)\n\n    # require identical categories set\n    if isinstance(value, Categorical):\n        if not is_dtype_equal(self, value):\n            raise ValueError(\n                \"Cannot set a Categorical with another, \"\n                \"without identical categories\"\n            )\n        if not self.categories.equals(value.categories):\n            new_codes = _recode_for_categories(\n                value.codes, value.categories, self.categories\n            )\n            value = Categorical.from_codes(new_codes, dtype=self.dtype)\n\n    rvalue = value if is_list_like(value) else [value]\n\n    from pandas import Index\n\n    to_add = Index(rvalue).difference(self.categories)\n\n    # no assignments of values not in categories, but it's always ok to set\n    # something to np.nan\n    if len(to_add) and not isna(to_add).all():\n        raise ValueError(\n            \"Cannot setitem on a Categorical with a new \"\n            \"category, set the categories first\"\n        )\n\n    # set by position\n    if isinstance(key, (int, np.integer)):\n        pass\n\n    # tuple of indexers (dataframe)\n    elif isinstance(key, tuple):\n        # only allow 1 dimensional slicing, but can\n        # in a 2-d case be passd (slice(None),....)\n        if len(key) == 2:\n            if not com.is_null_slice(key[0]):\n                raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n            key = key[1]\n        elif len(key) == 1:\n            key = key[0]\n        else:\n            raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n\n    # slicing in Series or Categorical\n    elif isinstance(key, slice):\n        pass\n\n    # else: array of True/False in Series or Categorical\n\n    lindexer = self.categories.get_indexer(rvalue)\n    lindexer = self._maybe_coerce_indexer(lindexer)\n\n    key = check_array_indexer(self, key)\n    self._codes[key] = lindexer",
                "def _reverse_indexer(self) -> Dict[Hashable, np.ndarray]:\n    \"\"\"\n    Compute the inverse of a categorical, returning\n    a dict of categories -> indexers.\n\n    *This is an internal function*\n\n    Returns\n    -------\n    dict of categories -> indexers\n\n    Examples\n    --------\n    >>> c = pd.Categorical(list('aabca'))\n    >>> c\n    [a, a, b, c, a]\n    Categories (3, object): [a, b, c]\n    >>> c.categories\n    Index(['a', 'b', 'c'], dtype='object')\n    >>> c.codes\n    array([0, 0, 1, 2, 0], dtype=int8)\n    >>> c._reverse_indexer()\n    {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n    \"\"\"\n    categories = self.categories\n    r, counts = libalgos.groupsort_indexer(\n        self.codes.astype(\"int64\"), categories.size\n    )\n    counts = counts.cumsum()\n    _result = (r[start:end] for start, end in zip(counts, counts[1:]))\n    result = dict(zip(categories, _result))\n    return result",
                "def _reduce(self, name, axis=0, **kwargs):\n    func = getattr(self, name, None)\n    if func is None:\n        raise TypeError(f\"Categorical cannot perform the operation {name}\")\n    return func(**kwargs)",
                "@deprecate_kwarg(old_arg_name=\"numeric_only\", new_arg_name=\"skipna\")\ndef min(self, skipna=True):\n    \"\"\"\n    The minimum value of the object.\n\n    Only ordered `Categoricals` have a minimum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    min : the minimum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered(\"min\")\n\n    if not len(self._codes):\n        return self.dtype.na_value\n\n    good = self._codes != -1\n    if not good.all():\n        if skipna:\n            pointer = self._codes[good].min()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.min()\n    return self.categories[pointer]",
                "@deprecate_kwarg(old_arg_name=\"numeric_only\", new_arg_name=\"skipna\")\ndef max(self, skipna=True):\n    \"\"\"\n    The maximum value of the object.\n\n    Only ordered `Categoricals` have a maximum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    max : the maximum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered(\"max\")\n\n    if not len(self._codes):\n        return self.dtype.na_value\n\n    good = self._codes != -1\n    if not good.all():\n        if skipna:\n            pointer = self._codes[good].max()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.max()\n    return self.categories[pointer]",
                "def mode(self, dropna=True):\n    \"\"\"\n    Returns the mode(s) of the Categorical.\n\n    Always returns `Categorical` even if only one value.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    modes : `Categorical` (sorted)\n    \"\"\"\n    codes = self._codes\n    if dropna:\n        good = self._codes != -1\n        codes = self._codes[good]\n    codes = sorted(htable.mode_int64(ensure_int64(codes), dropna))\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                "def unique(self):\n    \"\"\"\n    Return the ``Categorical`` which ``categories`` and ``codes`` are\n    unique. Unused categories are NOT returned.\n\n    - unordered category: values and categories are sorted by appearance\n      order.\n    - ordered category: values are sorted by appearance order, categories\n      keeps existing order.\n\n    Returns\n    -------\n    unique values : ``Categorical``\n\n    Examples\n    --------\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.Categorical(list('baabc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.Categorical(list('baabc'), categories=list('abc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Categorical(list('baabc'),\n    ...                categories=list('abc'),\n    ...                ordered=True)\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    See Also\n    --------\n    unique\n    CategoricalIndex.unique\n    Series.unique\n\n    \"\"\"\n    # unlike np.unique, unique1d does not sort\n    unique_codes = unique1d(self.codes)\n    cat = self.copy()\n\n    # keep nan in codes\n    cat._codes = unique_codes\n\n    # exclude nan from indexer for categories\n    take_codes = unique_codes[unique_codes != -1]\n    if self.ordered:\n        take_codes = np.sort(take_codes)\n    return cat.set_categories(cat.categories.take(take_codes))",
                "def _values_for_factorize(self):\n    codes = self.codes.astype(\"int64\")\n    return codes, -1",
                "@classmethod\ndef _from_factorized(cls, uniques, original):\n    return original._constructor(\n        original.categories.take(uniques), dtype=original.dtype\n    )",
                "def equals(self, other):\n    \"\"\"\n    Returns True if categorical arrays are equal.\n\n    Parameters\n    ----------\n    other : `Categorical`\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if self.is_dtype_equal(other):\n        if self.categories.equals(other.categories):\n            # fastpath to avoid re-coding\n            other_codes = other._codes\n        else:\n            other_codes = _recode_for_categories(\n                other.codes, other.categories, self.categories\n            )\n        return np.array_equal(self._codes, other_codes)\n    return False",
                "def is_dtype_equal(self, other):\n    \"\"\"\n    Returns True if categoricals are the same dtype\n      same categories, and same ordered\n\n    Parameters\n    ----------\n    other : Categorical\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    try:\n        return hash(self.dtype) == hash(other.dtype)\n    except (AttributeError, TypeError):\n        return False",
                "def describe(self):\n    \"\"\"\n    Describes this Categorical\n\n    Returns\n    -------\n    description: `DataFrame`\n        A dataframe with frequency and counts by category.\n    \"\"\"\n    counts = self.value_counts(dropna=False)\n    freqs = counts / float(counts.sum())\n\n    from pandas.core.reshape.concat import concat\n\n    result = concat([counts, freqs], axis=1)\n    result.columns = [\"counts\", \"freqs\"]\n    result.index.name = \"categories\"\n\n    return result",
                "@Substitution(klass=\"Categorical\")\n@Appender(_extension_array_shared_docs[\"repeat\"])\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    codes = self._codes.repeat(repeats)\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                "@property\ndef _can_hold_na(self):\n    return True",
                "@classmethod\ndef _concat_same_type(self, to_concat):\n    from pandas.core.dtypes.concat import concat_categorical\n\n    return concat_categorical(to_concat)",
                "def isin(self, values):\n    \"\"\"\n    Check whether `values` are contained in Categorical.\n\n    Return a boolean NumPy Array showing whether each element in\n    the Categorical matches an element in the passed sequence of\n    `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    isin : numpy.ndarray (bool dtype)\n\n    Raises\n    ------\n    TypeError\n      * If `values` is not a set or list-like\n\n    See Also\n    --------\n    pandas.Series.isin : Equivalent method on Series.\n\n    Examples\n    --------\n    >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'])\n    >>> s.isin(['cow', 'lama'])\n    array([ True,  True,  True, False,  True, False])\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    array([ True, False,  True, False,  True, False])\n    \"\"\"\n    if not is_list_like(values):\n        values_type = type(values).__name__\n        raise TypeError(\n            \"only list-like objects are allowed to be passed \"\n            f\"to isin(), you passed a [{values_type}]\"\n        )\n    values = sanitize_array(values, None, None)\n    null_mask = np.asarray(isna(values))\n    code_values = self.categories.get_indexer(values)\n    code_values = code_values[null_mask | (code_values >= 0)]\n    return algorithms.isin(self.codes, code_values)",
                "def replace(self, to_replace, value, inplace: bool = False):\n    \"\"\"\n    Replaces all instances of one value with another\n\n    Parameters\n    ----------\n    to_replace: object\n        The value to be replaced\n\n    value: object\n        The value to replace it with\n\n    inplace: bool\n        Whether the operation is done in-place\n\n    Returns\n    -------\n    None if inplace is True, otherwise the new Categorical after replacement\n\n\n    Examples\n    --------\n    >>> s = pd.Categorical([1, 2, 1, 3])\n    >>> s.replace(1, 3)\n    [3, 3, 2, 3]\n    Categories (2, int64): [2, 3]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n\n    # build a dict of (to replace -> value) pairs\n    if is_list_like(to_replace):\n        # if to_replace is list-like and value is scalar\n        replace_dict = {replace_value: value for replace_value in to_replace}\n    else:\n        # if both to_replace and value are scalar\n        replace_dict = {to_replace: value}\n\n    # other cases, like if both to_replace and value are list-like or if\n    # to_replace is a dict, are handled separately in NDFrame\n    for replace_value, new_value in replace_dict.items():\n        if replace_value in cat.categories:\n            if isna(new_value):\n                cat.remove_categories(replace_value, inplace=True)\n                continue\n            categories = cat.categories.tolist()\n            index = categories.index(replace_value)\n            if new_value in cat.categories:\n                value_index = categories.index(new_value)\n                cat._codes[cat._codes == index] = value_index\n                cat.remove_categories(replace_value, inplace=True)\n            else:\n                categories[index] = new_value\n                cat.rename_categories(categories, inplace=True)\n    if not inplace:\n        return cat",
                "def __init__(self, data):\n    self._validate(data)\n    self._parent = data.values\n    self._index = data.index\n    self._name = data.name\n    self._freeze()",
                "@staticmethod\ndef _validate(data):\n    if not is_categorical_dtype(data.dtype):\n        raise AttributeError(\"Can only use .cat accessor with a 'category' dtype\")",
                "def _delegate_property_get(self, name):\n    return getattr(self._parent, name)",
                "def _delegate_property_set(self, name, new_values):\n    return setattr(self._parent, name, new_values)",
                "@property\ndef codes(self):\n    \"\"\"\n    Return Series of codes as well as the index.\n    \"\"\"\n    from pandas import Series\n\n    return Series(self._parent.codes, index=self._index)",
                "def _delegate_method(self, name, *args, **kwargs):\n    from pandas import Series\n\n    method = getattr(self._parent, name)\n    res = method(*args, **kwargs)\n    if res is not None:\n        return Series(res, index=self._index, name=self._name)"
            ],
            "inscope_function_signatures": [
                "_cat_compare_op(op)",
                "contains(cat, key, container)",
                "_get_codes_for_values(values, categories)",
                "_recode_for_categories(codes: np.ndarray, old_categories, new_categories)",
                "_convert_to_list_like(list_like)",
                "factorize_from_iterable(values)",
                "factorize_from_iterables(iterables)",
                "func(self, other)",
                "__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
                "categories(self)",
                "categories(self, categories)",
                "ordered(self) -> Ordered",
                "dtype(self) -> CategoricalDtype",
                "_ndarray_values(self) -> np.ndarray",
                "_constructor(self) -> Type['Categorical']",
                "_from_sequence(cls, scalars, dtype=None, copy=False)",
                "_formatter(self, boxed=False)",
                "copy(self) -> 'Categorical'",
                "astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike",
                "size(self) -> int",
                "itemsize(self) -> int",
                "tolist(self) -> List[Scalar]",
                "_from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None)",
                "from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
                "_get_codes(self)",
                "_set_codes(self, codes)",
                "_set_categories(self, categories, fastpath=False)",
                "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'",
                "set_ordered(self, value, inplace=False)",
                "as_ordered(self, inplace=False)",
                "as_unordered(self, inplace=False)",
                "set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
                "rename_categories(self, new_categories, inplace=False)",
                "reorder_categories(self, new_categories, ordered=None, inplace=False)",
                "add_categories(self, new_categories, inplace=False)",
                "remove_categories(self, removals, inplace=False)",
                "remove_unused_categories(self, inplace=False)",
                "map(self, mapper)",
                "shape(self)",
                "shift(self, periods, fill_value=None)",
                "__array__(self, dtype=None) -> np.ndarray",
                "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
                "__setstate__(self, state)",
                "T(self)",
                "nbytes(self)",
                "memory_usage(self, deep=False)",
                "searchsorted(self, value, side='left', sorter=None)",
                "isna(self)",
                "notna(self)",
                "put(self, *args, **kwargs)",
                "dropna(self)",
                "value_counts(self, dropna=True)",
                "_internal_get_values(self)",
                "check_for_ordered(self, op)",
                "_values_for_argsort(self)",
                "argsort(self, ascending=True, kind='quicksort', **kwargs)",
                "sort_values(self, inplace=False, ascending=True, na_position='last')",
                "_values_for_rank(self)",
                "view(self, dtype=None)",
                "to_dense(self)",
                "fillna(self, value=None, method=None, limit=None)",
                "take(self, indexer, allow_fill: bool=False, fill_value=None)",
                "take_nd(self, indexer, allow_fill: bool=False, fill_value=None)",
                "__len__(self) -> int",
                "__iter__(self)",
                "__contains__(self, key) -> bool",
                "_tidy_repr(self, max_vals=10, footer=True) -> str",
                "_repr_categories(self)",
                "_repr_categories_info(self) -> str",
                "_repr_footer(self) -> str",
                "_get_repr(self, length=True, na_rep='NaN', footer=True) -> str",
                "__repr__(self) -> str",
                "_maybe_coerce_indexer(self, indexer)",
                "__getitem__(self, key)",
                "__setitem__(self, key, value)",
                "_reverse_indexer(self) -> Dict[Hashable, np.ndarray]",
                "_reduce(self, name, axis=0, **kwargs)",
                "min(self, skipna=True)",
                "max(self, skipna=True)",
                "mode(self, dropna=True)",
                "unique(self)",
                "_values_for_factorize(self)",
                "_from_factorized(cls, uniques, original)",
                "equals(self, other)",
                "is_dtype_equal(self, other)",
                "describe(self)",
                "repeat(self, repeats, axis=None)",
                "_can_hold_na(self)",
                "_concat_same_type(self, to_concat)",
                "isin(self, values)",
                "replace(self, to_replace, value, inplace: bool=False)",
                "__init__(self, data)",
                "_validate(data)",
                "_delegate_property_get(self, name)",
                "_delegate_property_set(self, name, new_values)",
                "codes(self)",
                "_delegate_method(self, name, *args, **kwargs)"
            ],
            "variables_in_file": {
                "opname": [
                    66,
                    68,
                    101,
                    133,
                    134,
                    137,
                    75,
                    142,
                    112,
                    114,
                    120,
                    122,
                    126
                ],
                "op.__name__": [
                    66
                ],
                "op": [
                    1488,
                    66
                ],
                "is_list_like": [
                    2400,
                    70,
                    2443,
                    1068,
                    2037,
                    1019,
                    2653
                ],
                "other": [
                    134,
                    138,
                    2317,
                    70,
                    79,
                    84,
                    86,
                    88,
                    91,
                    95,
                    97,
                    99,
                    109,
                    110,
                    111,
                    2292,
                    2293,
                    2295,
                    2298
                ],
                "len": [
                    2178,
                    2692,
                    651,
                    2059,
                    654,
                    1934,
                    2063,
                    1942,
                    2582,
                    1946,
                    1947,
                    1948,
                    1951,
                    1959,
                    427,
                    1451,
                    2608,
                    1204,
                    1975,
                    1080,
                    1977,
                    1978,
                    1728,
                    708,
                    70,
                    1226,
                    846,
                    1872,
                    850,
                    84,
                    344,
                    2143,
                    2660,
                    121,
                    123,
                    1916,
                    2045,
                    1022
                ],
                "self": [
                    513,
                    1026,
                    1027,
                    1029,
                    523,
                    2074,
                    2075,
                    2077,
                    2078,
                    1072,
                    1073,
                    2105,
                    1083,
                    1084,
                    2107,
                    2116,
                    70,
                    74,
                    84,
                    86,
                    1110,
                    88,
                    91,
                    1627,
                    2141,
                    1118,
                    95,
                    1630,
                    97,
                    1632,
                    1633,
                    2143,
                    101,
                    2144,
                    103,
                    2146,
                    2149,
                    2153,
                    2154,
                    110,
                    111,
                    112,
                    1650,
                    1651,
                    116,
                    1656,
                    121,
                    1657,
                    123,
                    1662,
                    2176,
                    2178,
                    2179,
                    1669,
                    134,
                    2181,
                    2184,
                    2188,
                    2189,
                    1681,
                    668,
                    2208,
                    2210,
                    2211,
                    2213,
                    1195,
                    1197,
                    1198,
                    1203,
                    1205,
                    1723,
                    702,
                    704,
                    1728,
                    1730,
                    707,
                    708,
                    1732,
                    1226,
                    715,
                    1739,
                    1742,
                    2258,
                    2259,
                    1748,
                    730,
                    731,
                    2266,
                    1757,
                    1247,
                    2271,
                    1765,
                    1254,
                    1255,
                    746,
                    747,
                    1266,
                    2292,
                    2293,
                    2298,
                    2300,
                    1279,
                    768,
                    1280,
                    1292,
                    2317,
                    786,
                    1300,
                    2330,
                    1314,
                    1321,
                    2345,
                    2346,
                    1325,
                    1840,
                    1846,
                    1847,
                    1855,
                    1856,
                    324,
                    325,
                    1350,
                    841,
                    1866,
                    844,
                    1358,
                    1359,
                    1872,
                    1361,
                    1362,
                    1363,
                    1878,
                    1886,
                    1888,
                    1382,
                    1896,
                    1897,
                    2408,
                    2410,
                    1901,
                    1916,
                    1405,
                    1918,
                    1919,
                    1922,
                    390,
                    391,
                    2440,
                    1932,
                    1933,
                    1934,
                    1425,
                    1943,
                    931,
                    422,
                    1958,
                    1959,
                    426,
                    427,
                    1450,
                    1965,
                    434,
                    1461,
                    1975,
                    1976,
                    441,
                    1977,
                    1978,
                    1980,
                    448,
                    452,
                    1478,
                    1479,
                    1480,
                    1481,
                    1482,
                    1990,
                    1486,
                    1998,
                    2002,
                    979,
                    2004,
                    2517,
                    470,
                    471,
                    983,
                    1494,
                    2006,
                    2010,
                    2518,
                    2519,
                    2520,
                    2521,
                    2529,
                    2532,
                    490,
                    491,
                    492,
                    493,
                    494,
                    2026,
                    496,
                    497,
                    2031,
                    499,
                    2033,
                    2035,
                    2541,
                    2546,
                    2549,
                    2041,
                    506,
                    1021
                ],
                "ValueError": [
                    642,
                    647,
                    652,
                    655,
                    676,
                    430,
                    1200,
                    1081,
                    710,
                    72,
                    1740,
                    980,
                    1749,
                    1625,
                    1257,
                    363,
                    2027,
                    498,
                    2046,
                    1023
                ],
                "self.ordered": [
                    704,
                    1027,
                    426,
                    74,
                    1198,
                    1486,
                    1650,
                    86,
                    1943,
                    1118,
                    2266,
                    91,
                    1084,
                    702,
                    95
                ],
                "TypeError": [
                    1760,
                    353,
                    2402,
                    358,
                    2118,
                    136,
                    2654,
                    1853,
                    76,
                    2318,
                    1487,
                    1299,
                    85,
                    87,
                    89,
                    92,
                    125,
                    183
                ],
                "isinstance": [
                    2624,
                    2626,
                    2052,
                    1989,
                    2056,
                    2025,
                    1738,
                    555,
                    2572,
                    1997,
                    79,
                    336,
                    340,
                    2069,
                    375,
                    1306
                ],
                "Categorical": [
                    2661,
                    456,
                    2025,
                    2474,
                    2667,
                    460,
                    2477,
                    79,
                    2035
                ],
                "msg": [
                    642,
                    1981,
                    83,
                    85,
                    1849,
                    87,
                    89,
                    1980,
                    1853,
                    638
                ],
                "self.categories": [
                    1280,
                    513,
                    1922,
                    1933,
                    1934,
                    2189,
                    2074,
                    1450,
                    1195,
                    1918,
                    1846,
                    1847,
                    1919,
                    2105,
                    1730,
                    1732,
                    1478,
                    1479,
                    1480,
                    1481,
                    1739,
                    1358,
                    1742,
                    1361,
                    2002,
                    84,
                    1748,
                    86,
                    88,
                    730,
                    1757,
                    95,
                    97,
                    1254,
                    1255,
                    2408,
                    746,
                    2154,
                    110,
                    111,
                    2031,
                    2033,
                    2293,
                    1656,
                    2041,
                    2298,
                    1916,
                    1662,
                    1279
                ],
                "other.categories": [
                    84,
                    2293,
                    86,
                    88,
                    2298,
                    95
                ],
                "all": [
                    1739,
                    2045,
                    86
                ],
                "set": [
                    1071,
                    1072,
                    979,
                    88,
                    1021
                ],
                "other.ordered": [
                    91
                ],
                "self.categories.equals": [
                    2031,
                    2293,
                    95
                ],
                "other_codes": [
                    97,
                    99,
                    102,
                    103,
                    2295,
                    2297,
                    2300
                ],
                "_get_codes_for_values": [
                    97,
                    1732,
                    1742,
                    382
                ],
                "other._codes": [
                    99,
                    2295
                ],
                "f": [
                    101,
                    102
                ],
                "getattr": [
                    2529,
                    2116,
                    101,
                    134,
                    2564,
                    2565,
                    112,
                    2546
                ],
                "self._codes": [
                    2178,
                    1669,
                    2181,
                    391,
                    2184,
                    2188,
                    668,
                    2078,
                    2208,
                    2210,
                    2211,
                    2345,
                    1450,
                    1325,
                    1198,
                    1203,
                    1205,
                    1975,
                    1977,
                    1723,
                    1855,
                    324,
                    1350,
                    1479,
                    1480,
                    1481,
                    1226,
                    1990,
                    1998,
                    1872,
                    1494,
                    471,
                    2006,
                    1630,
                    2143,
                    1888,
                    1633,
                    2146,
                    101,
                    1382,
                    103,
                    2149,
                    2153,
                    112,
                    116,
                    506,
                    2300,
                    1279
                ],
                "ret": [
                    1281,
                    1282,
                    102,
                    1286,
                    1287,
                    1382,
                    106,
                    107,
                    1383,
                    112,
                    117,
                    118,
                    1279
                ],
                "mask": [
                    103,
                    104,
                    1655,
                    106,
                    1451,
                    1452,
                    1751,
                    1455,
                    1458,
                    116,
                    117,
                    1652,
                    1653,
                    1752,
                    1755,
                    1757
                ],
                "mask.any": [
                    104,
                    1653,
                    1752
                ],
                "is_scalar": [
                    2628,
                    1357,
                    109,
                    1885,
                    191
                ],
                "i": [
                    1998,
                    1999,
                    112,
                    111,
                    2002
                ],
                "self.categories.get_loc": [
                    1255,
                    1358,
                    111,
                    1361,
                    1847,
                    1757
                ],
                "np.zeros": [
                    121
                ],
                "np": [
                    1281,
                    386,
                    2052,
                    134,
                    1286,
                    648,
                    650,
                    2186,
                    1657,
                    1681,
                    2587,
                    2080,
                    1452,
                    1838,
                    1456,
                    1458,
                    1203,
                    1204,
                    1205,
                    1459,
                    1717,
                    451,
                    1989,
                    1479,
                    1481,
                    330,
                    1482,
                    1997,
                    1743,
                    2000,
                    1362,
                    340,
                    1111,
                    347,
                    2267,
                    1250,
                    1251,
                    2660,
                    2151,
                    2407,
                    499,
                    1268,
                    1655,
                    121,
                    123,
                    2300,
                    1661
                ],
                "bool": [
                    1859,
                    1767,
                    2412,
                    1880,
                    121,
                    474,
                    123
                ],
                "np.ones": [
                    386,
                    123
                ],
                "np.array": [
                    134,
                    1482,
                    330,
                    1362,
                    499,
                    1657,
                    1661
                ],
                "type": [
                    1856,
                    2401,
                    1762,
                    138,
                    731
                ],
                "unpack_zerodim_and_defer": [
                    68
                ],
                "func.__name__": [
                    142
                ],
                "func": [
                    2116,
                    2117,
                    2119,
                    142,
                    144
                ],
                "hash": [
                    176,
                    2317
                ],
                "key": [
                    1888,
                    2052,
                    2056,
                    2059,
                    2060,
                    1997,
                    1998,
                    2062,
                    176,
                    2063,
                    2064,
                    2077,
                    2004,
                    2069,
                    182,
                    2006,
                    1885,
                    2078
                ],
                "loc": [
                    192,
                    195,
                    182,
                    191
                ],
                "cat.categories.get_loc": [
                    182
                ],
                "cat.categories": [
                    934,
                    936,
                    938,
                    2668,
                    853,
                    182,
                    2453,
                    2457,
                    2459,
                    2268
                ],
                "cat": [
                    1029,
                    1030,
                    1031,
                    2440,
                    1033,
                    2453,
                    2455,
                    2457,
                    2459,
                    2461,
                    2462,
                    2465,
                    931,
                    2467,
                    934,
                    936,
                    938,
                    1450,
                    940,
                    1451,
                    182,
                    844,
                    846,
                    847,
                    850,
                    2259,
                    853,
                    1110,
                    855,
                    856,
                    1111,
                    2262,
                    859,
                    1116,
                    2268,
                    1120,
                    1121,
                    1124,
                    747,
                    748,
                    2667,
                    750,
                    2668,
                    2669
                ],
                "KeyError": [
                    183
                ],
                "container": [
                    192,
                    195
                ],
                "any": [
                    195,
                    646,
                    497,
                    1076,
                    1886
                ],
                "loc_": [
                    195
                ],
                "_codes_doc": [
                    678,
                    198
                ],
                "ExtensionArray": [
                    209
                ],
                "PandasObject": [
                    209,
                    2490,
                    309
                ],
                "__array_priority__": [
                    306
                ],
                "_dtype": [
                    307
                ],
                "CategoricalDtype": [
                    1027,
                    1311,
                    426,
                    555,
                    307,
                    444,
                    316,
                    702,
                    704,
                    582,
                    584,
                    842,
                    717,
                    335,
                    1117,
                    487,
                    746,
                    371,
                    634
                ],
                "_deprecations": [
                    309
                ],
                "PandasObject._deprecations": [
                    309
                ],
                "frozenset": [
                    309
                ],
                "_typ": [
                    310
                ],
                "dtype": [
                    1280,
                    1281,
                    1667,
                    1668,
                    390,
                    391,
                    1933,
                    654,
                    1934,
                    657,
                    555,
                    560,
                    1840,
                    562,
                    564,
                    566,
                    316,
                    317,
                    574,
                    1856,
                    324,
                    325,
                    582,
                    584,
                    587,
                    460,
                    334,
                    335,
                    730,
                    731,
                    350,
                    355,
                    486,
                    487,
                    490,
                    492,
                    494,
                    495,
                    496,
                    497,
                    371,
                    499,
                    634,
                    378,
                    635,
                    637,
                    382
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    634,
                    316
                ],
                "values": [
                    1664,
                    2564,
                    2566,
                    1655,
                    2571,
                    2572,
                    2574,
                    2577,
                    2580,
                    1662,
                    317,
                    1728,
                    1729,
                    324,
                    1732,
                    333,
                    335,
                    336,
                    339,
                    340,
                    341,
                    344,
                    345,
                    347,
                    348,
                    2653,
                    352,
                    2400,
                    354,
                    2401,
                    2656,
                    2657,
                    2406,
                    2407,
                    2408,
                    2660,
                    2661,
                    2662,
                    2667,
                    1651,
                    1652,
                    373,
                    1654,
                    375,
                    1657,
                    378,
                    1661,
                    382,
                    2559
                ],
                "categories": [
                    2565,
                    2566,
                    2570,
                    2575,
                    2578,
                    2581,
                    2457,
                    2458,
                    2460,
                    2464,
                    2465,
                    424,
                    426,
                    2105,
                    2107,
                    317,
                    702,
                    2111,
                    704,
                    574,
                    575,
                    579,
                    581,
                    582,
                    352,
                    354,
                    2661,
                    2668,
                    2670,
                    371,
                    635,
                    2559
                ],
                "ordered": [
                    840,
                    841,
                    842,
                    983,
                    635,
                    317
                ],
                "fastpath": [
                    706,
                    323,
                    701
                ],
                "coerce_indexer_dtype": [
                    1121,
                    324,
                    1031,
                    391,
                    2614,
                    2584
                ],
                "dtype.categories": [
                    382,
                    324,
                    391,
                    574,
                    555,
                    334,
                    654,
                    560,
                    562,
                    564,
                    566,
                    730,
                    378,
                    637,
                    350
                ],
                "self._dtype": [
                    448,
                    325,
                    390,
                    715,
                    434
                ],
                "self._dtype.update_dtype": [
                    325,
                    390
                ],
                "null_mask": [
                    384,
                    386,
                    387,
                    2407,
                    2409,
                    330,
                    345,
                    346,
                    347
                ],
                "is_categorical_dtype": [
                    2656,
                    486,
                    333,
                    373,
                    2525
                ],
                "values.categories": [
                    2660,
                    335
                ],
                "dtype.ordered": [
                    371,
                    355,
                    335
                ],
                "ABCIndexClass": [
                    336
                ],
                "ABCSeries": [
                    336,
                    1738,
                    375
                ],
                "maybe_infer_to_datetimelike": [
                    339
                ],
                "np.ndarray": [
                    2080,
                    451,
                    1989,
                    340,
                    1268,
                    2587
                ],
                "_convert_to_list_like": [
                    341
                ],
                "sanitize_dtype": [
                    344,
                    348
                ],
                "isna": [
                    1252,
                    646,
                    2407,
                    1385,
                    1739,
                    2045,
                    1842,
                    1076,
                    1748,
                    2454,
                    345,
                    1754,
                    1885
                ],
                "null_mask.any": [
                    384,
                    346
                ],
                "idx": [
                    1111,
                    1113,
                    1114,
                    347,
                    1116
                ],
                "np.where": [
                    1458,
                    347,
                    1743
                ],
                "sanitize_array": [
                    348,
                    2406
                ],
                "codes": [
                    386,
                    387,
                    388,
                    644,
                    646,
                    391,
                    648,
                    650,
                    651,
                    654,
                    657,
                    2208,
                    2211,
                    2212,
                    2213,
                    678,
                    2345,
                    2346,
                    2610,
                    2613,
                    2617,
                    1723,
                    575,
                    1855,
                    1856,
                    1732,
                    581,
                    585,
                    587,
                    1358,
                    1359,
                    1743,
                    1744,
                    1362,
                    1363,
                    852,
                    855,
                    1751,
                    1753,
                    730,
                    731,
                    1755,
                    1757,
                    1247,
                    352,
                    1248,
                    354,
                    1250,
                    1251,
                    1765,
                    2271,
                    2272,
                    2662,
                    2669,
                    1262,
                    2670,
                    1264,
                    1266,
                    377,
                    382
                ],
                "factorize": [
                    352,
                    354
                ],
                "err": [
                    368,
                    362
                ],
                "NotImplementedError": [
                    1249,
                    1668,
                    1413,
                    366,
                    1719
                ],
                "old_codes": [
                    378,
                    374
                ],
                "values._values.codes": [
                    375
                ],
                "values._values": [
                    375
                ],
                "values.codes": [
                    2660,
                    2662,
                    375
                ],
                "_recode_for_categories": [
                    581,
                    2297,
                    2032,
                    852,
                    377,
                    730,
                    575
                ],
                "values.dtype.categories": [
                    378
                ],
                "values.dtype": [
                    378,
                    2661,
                    2559
                ],
                "full_codes": [
                    386,
                    387,
                    388
                ],
                "null_mask.shape": [
                    386
                ],
                "codes.dtype": [
                    386
                ],
                "self.dtype.categories": [
                    1026,
                    707,
                    708,
                    422,
                    1350,
                    427,
                    1325,
                    1072,
                    1073,
                    979,
                    1021
                ],
                "self.dtype": [
                    1026,
                    2179,
                    1669,
                    2317,
                    1300,
                    2213,
                    422,
                    2346,
                    427,
                    1325,
                    1072,
                    1073,
                    1840,
                    1461,
                    441,
                    707,
                    708,
                    1350,
                    841,
                    979,
                    471,
                    2010,
                    2144,
                    1633,
                    1765,
                    490,
                    492,
                    1266,
                    2035,
                    1021
                ],
                "property": [
                    450,
                    1316,
                    454,
                    678,
                    2534,
                    393,
                    1323,
                    2349,
                    436,
                    443,
                    1215
                ],
                "new_dtype": [
                    1027,
                    1030,
                    1031,
                    426,
                    428,
                    434,
                    702,
                    704,
                    708,
                    842,
                    715,
                    846,
                    850,
                    853,
                    856,
                    1117,
                    1120,
                    1121,
                    746,
                    748
                ],
                "new_dtype.categories": [
                    1121,
                    708,
                    1031,
                    428,
                    846,
                    850,
                    853
                ],
                "categories.setter": [
                    424
                ],
                "self.dtype.ordered": [
                    841,
                    441
                ],
                "Ordered": [
                    437
                ],
                "self.codes": [
                    2271,
                    452,
                    2410,
                    1359,
                    1362,
                    1363,
                    1651,
                    2258,
                    730,
                    2107,
                    1247
                ],
                "Type": [
                    455
                ],
                "scalars": [
                    460
                ],
                "classmethod": [
                    2274,
                    458,
                    589,
                    527,
                    2353
                ],
                "self._constructor": [
                    1632,
                    1669,
                    1765,
                    2213,
                    2346,
                    1461,
                    470,
                    2010
                ],
                "self._codes.copy": [
                    1494,
                    1198,
                    471
                ],
                "Dtype": [
                    474
                ],
                "cast": [
                    487
                ],
                "Union": [
                    487
                ],
                "str": [
                    1890,
                    1957,
                    487,
                    1928,
                    1961,
                    1933,
                    1903,
                    1968,
                    1970
                ],
                "self.dtype.update_dtype": [
                    490
                ],
                "copy": [
                    496,
                    491,
                    499
                ],
                "self.copy": [
                    931,
                    1029,
                    2440,
                    491,
                    844,
                    747,
                    2259,
                    1110
                ],
                "self._set_dtype": [
                    494
                ],
                "is_extension_array_dtype": [
                    1282,
                    644,
                    2566,
                    495
                ],
                "array": [
                    496
                ],
                "is_integer_dtype": [
                    1480,
                    497,
                    651,
                    644
                ],
                "self.isna": [
                    497,
                    1405,
                    1886
                ],
                "ArrayLike": [
                    474
                ],
                "self._codes.size": [
                    506
                ],
                "cache_readonly": [
                    508,
                    501
                ],
                "int": [
                    2052,
                    1868,
                    1997,
                    502,
                    509
                ],
                "self.categories.itemsize": [
                    513
                ],
                "list": [
                    2624,
                    1026,
                    2627,
                    2695,
                    523
                ],
                "List": [
                    515
                ],
                "Scalar": [
                    515
                ],
                "to_list": [
                    525
                ],
                "tolist": [
                    525,
                    1878
                ],
                "cats": [
                    576,
                    578,
                    579,
                    2583,
                    584,
                    553,
                    561,
                    563,
                    565,
                    2581,
                    2582,
                    2584,
                    570,
                    575
                ],
                "Index": [
                    553,
                    2041
                ],
                "inferred_categories": [
                    553,
                    563,
                    565,
                    561
                ],
                "known_categories": [
                    554,
                    572,
                    558
                ],
                "dtype.categories.is_numeric": [
                    560
                ],
                "to_numeric": [
                    561
                ],
                "is_datetime64_dtype": [
                    562
                ],
                "to_datetime": [
                    563
                ],
                "is_timedelta64_dtype": [
                    564
                ],
                "to_timedelta": [
                    565
                ],
                "dtype.categories.is_boolean": [
                    566
                ],
                "true_values": [
                    568,
                    570,
                    567
                ],
                "cats.isin": [
                    570
                ],
                "inferred_codes": [
                    585,
                    581,
                    575
                ],
                "cats.is_monotonic_increasing": [
                    576
                ],
                "unsorted": [
                    578,
                    581
                ],
                "cats.copy": [
                    578
                ],
                "cats.sort_values": [
                    579
                ],
                "cls": [
                    2570,
                    2571,
                    587,
                    2572,
                    657
                ],
                "codes.to_numpy": [
                    648
                ],
                "np.int64": [
                    648
                ],
                "np.asarray": [
                    1281,
                    1286,
                    2407,
                    650,
                    1838,
                    1681
                ],
                "codes.max": [
                    654
                ],
                "codes.min": [
                    654
                ],
                "v": [
                    1313,
                    1314,
                    668,
                    669,
                    670
                ],
                "self._codes.view": [
                    668
                ],
                "v.flags.writeable": [
                    669
                ],
                "v.flags": [
                    669
                ],
                "_get_codes": [
                    678
                ],
                "_set_codes": [
                    678
                ],
                "CategoricalDtype._from_fastpath": [
                    1117,
                    702
                ],
                "inplace": [
                    768,
                    1029,
                    2439,
                    1032,
                    2440,
                    785,
                    786,
                    930,
                    931,
                    2466,
                    939,
                    1067,
                    1084,
                    839,
                    844,
                    978,
                    1109,
                    1110,
                    983,
                    1623,
                    858,
                    1629,
                    1123,
                    745,
                    747,
                    749,
                    1018,
                    767
                ],
                "validate_bool_kwarg": [
                    930,
                    839,
                    2439,
                    745,
                    1067,
                    785,
                    978,
                    1109,
                    1623,
                    1018,
                    767
                ],
                "value": [
                    2445,
                    2448,
                    1712,
                    1713,
                    1716,
                    1717,
                    1729,
                    1738,
                    1739,
                    1357,
                    1358,
                    1742,
                    1361,
                    1747,
                    1748,
                    1754,
                    1757,
                    1762,
                    2022,
                    2025,
                    746,
                    2026,
                    2031,
                    2033,
                    2035,
                    2037
                ],
                "cat._dtype": [
                    856,
                    748,
                    1030,
                    1120
                ],
                "self.set_ordered": [
                    768,
                    786
                ],
                "new_categories": [
                    1026,
                    1027,
                    933,
                    934,
                    935,
                    936,
                    938,
                    1195,
                    1198,
                    1073,
                    2611,
                    1204,
                    1205,
                    1078,
                    2615,
                    1084,
                    842,
                    979,
                    983,
                    1116,
                    1118,
                    1019,
                    1020,
                    1021
                ],
                "rename": [
                    845
                ],
                "cat.dtype.categories": [
                    1116,
                    846,
                    847
                ],
                "cat.dtype": [
                    1116,
                    846,
                    847
                ],
                "cat._codes": [
                    1121,
                    1031,
                    855,
                    850,
                    2262,
                    1111,
                    2461
                ],
                "cat.codes": [
                    2669,
                    853
                ],
                "is_dict_like": [
                    933
                ],
                "new_categories.get": [
                    934
                ],
                "item": [
                    936,
                    934
                ],
                "callable": [
                    935
                ],
                "self.set_categories": [
                    1083,
                    983
                ],
                "already_included": [
                    1024,
                    1021,
                    1022
                ],
                "removals": [
                    1068,
                    1069,
                    1076,
                    1071
                ],
                "removal_set": [
                    1072,
                    1073,
                    1071
                ],
                "not_included": [
                    1072,
                    1081,
                    1080,
                    1077
                ],
                "c": [
                    1073
                ],
                "x": [
                    1925,
                    1361,
                    1077,
                    1078
                ],
                "notna": [
                    1077,
                    1078,
                    1407
                ],
                "inv": [
                    1121,
                    1114,
                    1111
                ],
                "np.unique": [
                    1111
                ],
                "idx.size": [
                    1113
                ],
                "cat.dtype.categories.take": [
                    1116
                ],
                "self.categories.map": [
                    1195
                ],
                "mapper": [
                    1195
                ],
                "self.from_codes": [
                    1266,
                    1197
                ],
                "np.any": [
                    1203
                ],
                "new_categories.insert": [
                    1204
                ],
                "np.nan": [
                    1479,
                    2151,
                    1481,
                    2186,
                    2000,
                    1204,
                    1717,
                    1655
                ],
                "np.take": [
                    1205
                ],
                "__eq__": [
                    1207
                ],
                "_cat_compare_op": [
                    1207,
                    1208,
                    1209,
                    1210,
                    1211,
                    1212
                ],
                "operator.eq": [
                    1207
                ],
                "operator": [
                    1207,
                    1208,
                    1209,
                    1210,
                    1211,
                    1212
                ],
                "__ne__": [
                    1208
                ],
                "operator.ne": [
                    1208
                ],
                "__lt__": [
                    1209
                ],
                "operator.lt": [
                    1209
                ],
                "__gt__": [
                    1210
                ],
                "operator.gt": [
                    1210
                ],
                "__le__": [
                    1211
                ],
                "operator.le": [
                    1211
                ],
                "__ge__": [
                    1212
                ],
                "operator.ge": [
                    1212
                ],
                "tuple": [
                    2056,
                    1226,
                    2626,
                    2344
                ],
                "codes.ndim": [
                    1248
                ],
                "np.prod": [
                    1250
                ],
                "codes.shape": [
                    1250
                ],
                "periods": [
                    1250,
                    1251,
                    1261,
                    1262,
                    1264
                ],
                "np.roll": [
                    1251
                ],
                "ensure_platform_int": [
                    1251
                ],
                "fill_value": [
                    1252,
                    1253,
                    1254,
                    1255,
                    1258,
                    1866,
                    1262,
                    1264,
                    1842,
                    1843,
                    1846,
                    1847,
                    1850,
                    1855
                ],
                "take_1d": [
                    2617,
                    1279
                ],
                "self.categories.values": [
                    1279
                ],
                "is_dtype_equal": [
                    1280,
                    2026,
                    2559
                ],
                "self.categories.dtype": [
                    1280,
                    1730,
                    1933
                ],
                "result": [
                    1291,
                    1294,
                    1295,
                    1425,
                    1427,
                    2335,
                    2336,
                    2337,
                    2339,
                    1967,
                    1968,
                    1976,
                    1978,
                    1981,
                    1983,
                    1856,
                    1857,
                    2111,
                    2112,
                    2006,
                    2007,
                    2008,
                    2009,
                    2010,
                    1899,
                    1901,
                    1903
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    1291
                ],
                "ops": [
                    1291
                ],
                "ufunc": [
                    1292,
                    1301
                ],
                "method": [
                    1729,
                    1292,
                    1712,
                    1713,
                    2546,
                    2547,
                    1726
                ],
                "inputs": [
                    1292
                ],
                "kwargs": [
                    1547,
                    1292,
                    2547,
                    2119
                ],
                "NotImplemented": [
                    1294
                ],
                "ufunc.__name__": [
                    1301
                ],
                "state": [
                    1313,
                    1306,
                    1310,
                    1311
                ],
                "dict": [
                    2344,
                    1306,
                    2111
                ],
                "Exception": [
                    1307
                ],
                "k": [
                    1313,
                    1314
                ],
                "state.items": [
                    1313
                ],
                "setattr": [
                    1314,
                    2532
                ],
                "self._codes.nbytes": [
                    1325,
                    1350
                ],
                "self.dtype.categories.values.nbytes": [
                    1325
                ],
                "self.dtype.categories.values": [
                    1325
                ],
                "self.dtype.categories.memory_usage": [
                    1350
                ],
                "deep": [
                    1350
                ],
                "self.codes.dtype.type": [
                    1359
                ],
                "self.codes.dtype": [
                    1362,
                    1359
                ],
                "locs": [
                    1361,
                    1362
                ],
                "self.codes.searchsorted": [
                    1363
                ],
                "side": [
                    1363
                ],
                "sorter": [
                    1363
                ],
                "Substitution": [
                    1352,
                    2341
                ],
                "Appender": [
                    1353,
                    2342
                ],
                "_shared_docs": [
                    1353
                ],
                "isnull": [
                    1385
                ],
                "notnull": [
                    1407
                ],
                "self.notna": [
                    1425
                ],
                "code": [
                    1458,
                    1450,
                    1451,
                    1455
                ],
                "ncat": [
                    1456,
                    1458,
                    1451,
                    1452
                ],
                "ix": [
                    1459,
                    1452,
                    1461,
                    1463
                ],
                "clean": [
                    1452,
                    1454,
                    1455
                ],
                "np.arange": [
                    2660,
                    1452
                ],
                "mask.all": [
                    1452
                ],
                "dropna": [
                    2209,
                    2212,
                    1454
                ],
                "obs": [
                    1456,
                    1455
                ],
                "count": [
                    1456,
                    1458,
                    1463
                ],
                "np.bincount": [
                    1456,
                    1458
                ],
                "np.append": [
                    1459
                ],
                "Series": [
                    2549,
                    2541,
                    1662,
                    1463
                ],
                "CategoricalIndex": [
                    1463
                ],
                "needs_i8_conversion": [
                    1478
                ],
                "self.categories.take": [
                    1479
                ],
                "take": [
                    1481,
                    1855
                ],
                "self.categories.astype": [
                    1481
                ],
                "argsort": [
                    1547
                ],
                "super": [
                    1547
                ],
                "ascending": [
                    1627,
                    1547
                ],
                "kind": [
                    1547
                ],
                "na_position": [
                    1624,
                    1625,
                    1627
                ],
                "repr": [
                    1625
                ],
                "sorted_idx": [
                    1633,
                    1627,
                    1630
                ],
                "nargsort": [
                    1627
                ],
                "values.astype": [
                    1654
                ],
                "self.categories.is_numeric": [
                    1656
                ],
                "self.rename_categories": [
                    1662
                ],
                "rank": [
                    1662
                ],
                "validate_fillna_kwargs": [
                    1712
                ],
                "limit": [
                    1718
                ],
                "reshape": [
                    1728
                ],
                "self.to_dense": [
                    1728
                ],
                "astype": [
                    1729
                ],
                "interpolate_2d": [
                    1729
                ],
                "value.isin": [
                    1739
                ],
                "values_codes": [
                    1744,
                    1742
                ],
                "indexer": [
                    1989,
                    1990,
                    1991,
                    1866,
                    1838,
                    1743,
                    1744,
                    2614,
                    2617,
                    1855
                ],
                "is_hashable": [
                    1747
                ],
                "codes.copy": [
                    1753,
                    2610,
                    2613,
                    2617
                ],
                "__name__": [
                    2401,
                    1762
                ],
                "np.intp": [
                    1838
                ],
                "allow_fill": [
                    1866,
                    1844,
                    1855
                ],
                "from_codes": [
                    1856
                ],
                "warn": [
                    1861
                ],
                "FutureWarning": [
                    1863
                ],
                "self.take": [
                    1866
                ],
                "iter": [
                    1878
                ],
                "self._internal_get_values": [
                    1878
                ],
                "contains": [
                    1888
                ],
                "num": [
                    1895,
                    1896,
                    1897,
                    1917,
                    1918,
                    1919
                ],
                "max_vals": [
                    1897,
                    1895
                ],
                "head": [
                    1896,
                    1899,
                    1920,
                    1918
                ],
                "_get_repr": [
                    1896,
                    1897
                ],
                "tail": [
                    1920,
                    1897,
                    1899,
                    1919
                ],
                "footer": [
                    1900,
                    1965
                ],
                "self._repr_footer": [
                    1901
                ],
                "max_categories": [
                    1917,
                    1916,
                    1909
                ],
                "get_option": [
                    1912,
                    1936,
                    1911
                ],
                "fmt.format_array": [
                    1922,
                    1918,
                    1919
                ],
                "fmt": [
                    1922,
                    1964,
                    1918,
                    1919
                ],
                "category_strs": [
                    1920,
                    1922,
                    1925,
                    1926,
                    1932,
                    1945
                ],
                "x.strip": [
                    1925
                ],
                "self._repr_categories": [
                    1932
                ],
                "levheader": [
                    1955,
                    1934,
                    1942,
                    1947,
                    1948
                ],
                "width": [
                    1936,
                    1935
                ],
                "height": [
                    1935
                ],
                "get_terminal_size": [
                    1935
                ],
                "max_width": [
                    1936,
                    1946,
                    1939
                ],
                "console.in_ipython_frontend": [
                    1937
                ],
                "console": [
                    1937
                ],
                "levstring": [
                    1952,
                    1955,
                    1940,
                    1947,
                    1950
                ],
                "start": [
                    2110,
                    1953,
                    1941,
                    1949
                ],
                "cur_col_len": [
                    1946,
                    1948,
                    1942,
                    1951
                ],
                "sep_len": [
                    1946,
                    1943
                ],
                "sep": [
                    1944,
                    1950,
                    1943
                ],
                "linesep": [
                    1944,
                    1947
                ],
                "sep.rstrip": [
                    1944
                ],
                "val": [
                    1952,
                    1945,
                    1946,
                    1951
                ],
                "levstring.replace": [
                    1955
                ],
                "info": [
                    1958,
                    1959
                ],
                "self._repr_categories_info": [
                    1958
                ],
                "formatter": [
                    1964,
                    1967
                ],
                "fmt.CategoricalFormatter": [
                    1964
                ],
                "length": [
                    1965
                ],
                "na_rep": [
                    1965
                ],
                "formatter.to_string": [
                    1967
                ],
                "_maxlen": [
                    1976,
                    1978,
                    1974,
                    1975
                ],
                "self._tidy_repr": [
                    1976
                ],
                "self._get_repr": [
                    1978,
                    1980
                ],
                "replace": [
                    1980
                ],
                "indexer.dtype.kind": [
                    1989
                ],
                "indexer.dtype": [
                    1989
                ],
                "indexer.astype": [
                    1990
                ],
                "self._codes.dtype": [
                    1990
                ],
                "np.integer": [
                    2052,
                    1997
                ],
                "check_array_indexer": [
                    2004,
                    2077
                ],
                "result.ndim": [
                    2007
                ],
                "deprecate_ndim_indexing": [
                    2008
                ],
                "extract_array": [
                    2657,
                    2022
                ],
                "value.categories": [
                    2033,
                    2031
                ],
                "new_codes": [
                    2032,
                    2617,
                    2618,
                    2035
                ],
                "value.codes": [
                    2033
                ],
                "Categorical.from_codes": [
                    2035,
                    2661
                ],
                "rvalue": [
                    2041,
                    2074,
                    2037
                ],
                "to_add": [
                    2041,
                    2045
                ],
                "difference": [
                    2041
                ],
                "com.is_null_slice": [
                    2060
                ],
                "com": [
                    2060
                ],
                "AssertionError": [
                    2066,
                    2061
                ],
                "slice": [
                    2069
                ],
                "lindexer": [
                    2074,
                    2075,
                    2078
                ],
                "self.categories.get_indexer": [
                    2408,
                    2074
                ],
                "self._maybe_coerce_indexer": [
                    2075
                ],
                "r": [
                    2106,
                    2110
                ],
                "counts": [
                    2330,
                    2106,
                    2331,
                    2109,
                    2110,
                    2335
                ],
                "libalgos.groupsort_indexer": [
                    2106
                ],
                "libalgos": [
                    2106
                ],
                "self.codes.astype": [
                    2107,
                    2271
                ],
                "categories.size": [
                    2107
                ],
                "counts.cumsum": [
                    2109
                ],
                "_result": [
                    2110,
                    2111
                ],
                "end": [
                    2110
                ],
                "zip": [
                    2695,
                    2110,
                    2111
                ],
                "Dict": [
                    2080
                ],
                "Hashable": [
                    2080
                ],
                "name": [
                    2529,
                    2116,
                    2532,
                    2118,
                    2546
                ],
                "self.check_for_ordered": [
                    2176,
                    2141
                ],
                "self.dtype.na_value": [
                    2144,
                    2179
                ],
                "good": [
                    2146,
                    2147,
                    2210,
                    2149,
                    2182,
                    2181,
                    2184,
                    2211
                ],
                "good.all": [
                    2147,
                    2182
                ],
                "skipna": [
                    2148,
                    2183
                ],
                "pointer": [
                    2149,
                    2184,
                    2153,
                    2154,
                    2188,
                    2189
                ],
                "min": [
                    2149
                ],
                "self._codes.min": [
                    2153
                ],
                "deprecate_kwarg": [
                    2121,
                    2156
                ],
                "max": [
                    2184
                ],
                "self._codes.max": [
                    2188
                ],
                "sorted": [
                    2212
                ],
                "htable.mode_int64": [
                    2212
                ],
                "htable": [
                    2212
                ],
                "ensure_int64": [
                    2212
                ],
                "unique_codes": [
                    2265,
                    2258,
                    2262
                ],
                "unique1d": [
                    2258
                ],
                "take_codes": [
                    2265,
                    2267,
                    2268
                ],
                "np.sort": [
                    2267
                ],
                "cat.set_categories": [
                    2268
                ],
                "cat.categories.take": [
                    2268
                ],
                "original._constructor": [
                    2276
                ],
                "original": [
                    2276,
                    2277
                ],
                "original.categories.take": [
                    2277
                ],
                "original.categories": [
                    2277
                ],
                "uniques": [
                    2277
                ],
                "original.dtype": [
                    2277
                ],
                "self.is_dtype_equal": [
                    2292
                ],
                "other.codes": [
                    2298
                ],
                "np.array_equal": [
                    2300
                ],
                "other.dtype": [
                    2317
                ],
                "AttributeError": [
                    2526,
                    2318
                ],
                "self.value_counts": [
                    2330
                ],
                "freqs": [
                    2331,
                    2335
                ],
                "float": [
                    2331
                ],
                "counts.sum": [
                    2331
                ],
                "concat": [
                    2335
                ],
                "result.columns": [
                    2336
                ],
                "result.index.name": [
                    2337
                ],
                "result.index": [
                    2337
                ],
                "nv.validate_repeat": [
                    2344
                ],
                "nv": [
                    2344
                ],
                "axis": [
                    2344
                ],
                "self._codes.repeat": [
                    2345
                ],
                "repeats": [
                    2345
                ],
                "_extension_array_shared_docs": [
                    2342
                ],
                "concat_categorical": [
                    2357
                ],
                "to_concat": [
                    2357
                ],
                "values_type": [
                    2401,
                    2404
                ],
                "code_values": [
                    2408,
                    2409,
                    2410
                ],
                "algorithms.isin": [
                    2410
                ],
                "algorithms": [
                    2410
                ],
                "to_replace": [
                    2448,
                    2443,
                    2445
                ],
                "replace_dict": [
                    2448,
                    2452,
                    2445
                ],
                "replace_value": [
                    2445,
                    2452,
                    2453,
                    2455,
                    2458,
                    2462
                ],
                "new_value": [
                    2464,
                    2452,
                    2454,
                    2459,
                    2460
                ],
                "replace_dict.items": [
                    2452
                ],
                "cat.remove_categories": [
                    2462,
                    2455
                ],
                "cat.categories.tolist": [
                    2457
                ],
                "index": [
                    2464,
                    2458,
                    2461
                ],
                "categories.index": [
                    2458,
                    2460
                ],
                "value_index": [
                    2460,
                    2461
                ],
                "cat.rename_categories": [
                    2465
                ],
                "PandasDelegate": [
                    2490
                ],
                "NoNewAttributesMixin": [
                    2490
                ],
                "self._validate": [
                    2517
                ],
                "data": [
                    2517,
                    2518,
                    2519,
                    2520,
                    2525
                ],
                "self._parent": [
                    2529,
                    2532,
                    2541,
                    2546,
                    2518
                ],
                "data.values": [
                    2518
                ],
                "self._index": [
                    2549,
                    2541,
                    2519
                ],
                "data.index": [
                    2519
                ],
                "self._name": [
                    2520,
                    2549
                ],
                "data.name": [
                    2520
                ],
                "self._freeze": [
                    2521
                ],
                "data.dtype": [
                    2525
                ],
                "staticmethod": [
                    2523
                ],
                "new_values": [
                    2532
                ],
                "self._parent.codes": [
                    2541
                ],
                "res": [
                    2547,
                    2548,
                    2549
                ],
                "args": [
                    2547
                ],
                "delegate_names": [
                    2473,
                    2476
                ],
                "dtype_equal": [
                    2561,
                    2559
                ],
                "categories.dtype": [
                    2570,
                    2566,
                    2559
                ],
                "is_object_dtype": [
                    2566
                ],
                "categories.dtype.construct_array_type": [
                    2570
                ],
                "try_cast_to_ea": [
                    2571
                ],
                "ensure_object": [
                    2577,
                    2578,
                    2574,
                    2575
                ],
                "hash_klass": [
                    2580,
                    2582
                ],
                "vals": [
                    2584,
                    2580
                ],
                "_get_data_algo": [
                    2580,
                    2581
                ],
                "_": [
                    2581
                ],
                "t": [
                    2584,
                    2582,
                    2583
                ],
                "t.map_locations": [
                    2583
                ],
                "t.lookup": [
                    2584
                ],
                "old_categories": [
                    2608,
                    2611,
                    2615
                ],
                "new_categories.equals": [
                    2611
                ],
                "new_categories.get_indexer": [
                    2615
                ],
                "hasattr": [
                    2622
                ],
                "list_like": [
                    2624,
                    2625,
                    2626,
                    2627,
                    2628,
                    2629,
                    2632,
                    2622,
                    2623
                ],
                "is_sequence": [
                    2626
                ],
                "is_iterator": [
                    2626
                ],
                "cat_codes": [
                    2660,
                    2661
                ],
                "values.codes.dtype": [
                    2660
                ],
                "iterables": [
                    2692,
                    2695
                ],
                "map": [
                    2695
                ],
                "factorize_from_iterable": [
                    2695
                ],
                "it": [
                    2695
                ]
            },
            "filtered_variables_in_file": {
                "opname": [
                    66,
                    68,
                    101,
                    133,
                    134,
                    137,
                    75,
                    142,
                    112,
                    114,
                    120,
                    122,
                    126
                ],
                "op.__name__": [
                    66
                ],
                "op": [
                    1488,
                    66
                ],
                "is_list_like": [
                    2400,
                    70,
                    2443,
                    1068,
                    2037,
                    1019,
                    2653
                ],
                "other": [
                    134,
                    138,
                    2317,
                    70,
                    79,
                    84,
                    86,
                    88,
                    91,
                    95,
                    97,
                    99,
                    109,
                    110,
                    111,
                    2292,
                    2293,
                    2295,
                    2298
                ],
                "self": [
                    513,
                    1026,
                    1027,
                    1029,
                    523,
                    2074,
                    2075,
                    2077,
                    2078,
                    1072,
                    1073,
                    2105,
                    1083,
                    1084,
                    2107,
                    2116,
                    70,
                    74,
                    84,
                    86,
                    1110,
                    88,
                    91,
                    1627,
                    2141,
                    1118,
                    95,
                    1630,
                    97,
                    1632,
                    1633,
                    2143,
                    101,
                    2144,
                    103,
                    2146,
                    2149,
                    2153,
                    2154,
                    110,
                    111,
                    112,
                    1650,
                    1651,
                    116,
                    1656,
                    121,
                    1657,
                    123,
                    1662,
                    2176,
                    2178,
                    2179,
                    1669,
                    134,
                    2181,
                    2184,
                    2188,
                    2189,
                    1681,
                    668,
                    2208,
                    2210,
                    2211,
                    2213,
                    1195,
                    1197,
                    1198,
                    1203,
                    1205,
                    1723,
                    702,
                    704,
                    1728,
                    1730,
                    707,
                    708,
                    1732,
                    1226,
                    715,
                    1739,
                    1742,
                    2258,
                    2259,
                    1748,
                    730,
                    731,
                    2266,
                    1757,
                    1247,
                    2271,
                    1765,
                    1254,
                    1255,
                    746,
                    747,
                    1266,
                    2292,
                    2293,
                    2298,
                    2300,
                    1279,
                    768,
                    1280,
                    1292,
                    2317,
                    786,
                    1300,
                    2330,
                    1314,
                    1321,
                    2345,
                    2346,
                    1325,
                    1840,
                    1846,
                    1847,
                    1855,
                    1856,
                    324,
                    325,
                    1350,
                    841,
                    1866,
                    844,
                    1358,
                    1359,
                    1872,
                    1361,
                    1362,
                    1363,
                    1878,
                    1886,
                    1888,
                    1382,
                    1896,
                    1897,
                    2408,
                    2410,
                    1901,
                    1916,
                    1405,
                    1918,
                    1919,
                    1922,
                    390,
                    391,
                    2440,
                    1932,
                    1933,
                    1934,
                    1425,
                    1943,
                    931,
                    422,
                    1958,
                    1959,
                    426,
                    427,
                    1450,
                    1965,
                    434,
                    1461,
                    1975,
                    1976,
                    441,
                    1977,
                    1978,
                    1980,
                    448,
                    452,
                    1478,
                    1479,
                    1480,
                    1481,
                    1482,
                    1990,
                    1486,
                    1998,
                    2002,
                    979,
                    2004,
                    2517,
                    470,
                    471,
                    983,
                    1494,
                    2006,
                    2010,
                    2518,
                    2519,
                    2520,
                    2521,
                    2529,
                    2532,
                    490,
                    491,
                    492,
                    493,
                    494,
                    2026,
                    496,
                    497,
                    2031,
                    499,
                    2033,
                    2035,
                    2541,
                    2546,
                    2549,
                    2041,
                    506,
                    1021
                ],
                "self.ordered": [
                    704,
                    1027,
                    426,
                    74,
                    1198,
                    1486,
                    1650,
                    86,
                    1943,
                    1118,
                    2266,
                    91,
                    1084,
                    702,
                    95
                ],
                "Categorical": [
                    2661,
                    456,
                    2025,
                    2474,
                    2667,
                    460,
                    2477,
                    79,
                    2035
                ],
                "msg": [
                    642,
                    1981,
                    83,
                    85,
                    1849,
                    87,
                    89,
                    1980,
                    1853,
                    638
                ],
                "self.categories": [
                    1280,
                    513,
                    1922,
                    1933,
                    1934,
                    2189,
                    2074,
                    1450,
                    1195,
                    1918,
                    1846,
                    1847,
                    1919,
                    2105,
                    1730,
                    1732,
                    1478,
                    1479,
                    1480,
                    1481,
                    1739,
                    1358,
                    1742,
                    1361,
                    2002,
                    84,
                    1748,
                    86,
                    88,
                    730,
                    1757,
                    95,
                    97,
                    1254,
                    1255,
                    2408,
                    746,
                    2154,
                    110,
                    111,
                    2031,
                    2033,
                    2293,
                    1656,
                    2041,
                    2298,
                    1916,
                    1662,
                    1279
                ],
                "other.categories": [
                    84,
                    2293,
                    86,
                    88,
                    2298,
                    95
                ],
                "other.ordered": [
                    91
                ],
                "self.categories.equals": [
                    2031,
                    2293,
                    95
                ],
                "other_codes": [
                    97,
                    99,
                    102,
                    103,
                    2295,
                    2297,
                    2300
                ],
                "_get_codes_for_values": [
                    97,
                    1732,
                    1742,
                    382
                ],
                "other._codes": [
                    99,
                    2295
                ],
                "f": [
                    101,
                    102
                ],
                "self._codes": [
                    2178,
                    1669,
                    2181,
                    391,
                    2184,
                    2188,
                    668,
                    2078,
                    2208,
                    2210,
                    2211,
                    2345,
                    1450,
                    1325,
                    1198,
                    1203,
                    1205,
                    1975,
                    1977,
                    1723,
                    1855,
                    324,
                    1350,
                    1479,
                    1480,
                    1481,
                    1226,
                    1990,
                    1998,
                    1872,
                    1494,
                    471,
                    2006,
                    1630,
                    2143,
                    1888,
                    1633,
                    2146,
                    101,
                    1382,
                    103,
                    2149,
                    2153,
                    112,
                    116,
                    506,
                    2300,
                    1279
                ],
                "ret": [
                    1281,
                    1282,
                    102,
                    1286,
                    1287,
                    1382,
                    106,
                    107,
                    1383,
                    112,
                    117,
                    118,
                    1279
                ],
                "mask": [
                    103,
                    104,
                    1655,
                    106,
                    1451,
                    1452,
                    1751,
                    1455,
                    1458,
                    116,
                    117,
                    1652,
                    1653,
                    1752,
                    1755,
                    1757
                ],
                "mask.any": [
                    104,
                    1653,
                    1752
                ],
                "is_scalar": [
                    2628,
                    1357,
                    109,
                    1885,
                    191
                ],
                "i": [
                    1998,
                    1999,
                    112,
                    111,
                    2002
                ],
                "self.categories.get_loc": [
                    1255,
                    1358,
                    111,
                    1361,
                    1847,
                    1757
                ],
                "np.zeros": [
                    121
                ],
                "np": [
                    1281,
                    386,
                    2052,
                    134,
                    1286,
                    648,
                    650,
                    2186,
                    1657,
                    1681,
                    2587,
                    2080,
                    1452,
                    1838,
                    1456,
                    1458,
                    1203,
                    1204,
                    1205,
                    1459,
                    1717,
                    451,
                    1989,
                    1479,
                    1481,
                    330,
                    1482,
                    1997,
                    1743,
                    2000,
                    1362,
                    340,
                    1111,
                    347,
                    2267,
                    1250,
                    1251,
                    2660,
                    2151,
                    2407,
                    499,
                    1268,
                    1655,
                    121,
                    123,
                    2300,
                    1661
                ],
                "np.ones": [
                    386,
                    123
                ],
                "np.array": [
                    134,
                    1482,
                    330,
                    1362,
                    499,
                    1657,
                    1661
                ],
                "unpack_zerodim_and_defer": [
                    68
                ],
                "func.__name__": [
                    142
                ],
                "func": [
                    2116,
                    2117,
                    2119,
                    142,
                    144
                ],
                "key": [
                    1888,
                    2052,
                    2056,
                    2059,
                    2060,
                    1997,
                    1998,
                    2062,
                    176,
                    2063,
                    2064,
                    2077,
                    2004,
                    2069,
                    182,
                    2006,
                    1885,
                    2078
                ],
                "loc": [
                    192,
                    195,
                    182,
                    191
                ],
                "cat.categories.get_loc": [
                    182
                ],
                "cat.categories": [
                    934,
                    936,
                    938,
                    2668,
                    853,
                    182,
                    2453,
                    2457,
                    2459,
                    2268
                ],
                "cat": [
                    1029,
                    1030,
                    1031,
                    2440,
                    1033,
                    2453,
                    2455,
                    2457,
                    2459,
                    2461,
                    2462,
                    2465,
                    931,
                    2467,
                    934,
                    936,
                    938,
                    1450,
                    940,
                    1451,
                    182,
                    844,
                    846,
                    847,
                    850,
                    2259,
                    853,
                    1110,
                    855,
                    856,
                    1111,
                    2262,
                    859,
                    1116,
                    2268,
                    1120,
                    1121,
                    1124,
                    747,
                    748,
                    2667,
                    750,
                    2668,
                    2669
                ],
                "container": [
                    192,
                    195
                ],
                "loc_": [
                    195
                ],
                "_codes_doc": [
                    678,
                    198
                ],
                "ExtensionArray": [
                    209
                ],
                "PandasObject": [
                    209,
                    2490,
                    309
                ],
                "__array_priority__": [
                    306
                ],
                "_dtype": [
                    307
                ],
                "CategoricalDtype": [
                    1027,
                    1311,
                    426,
                    555,
                    307,
                    444,
                    316,
                    702,
                    704,
                    582,
                    584,
                    842,
                    717,
                    335,
                    1117,
                    487,
                    746,
                    371,
                    634
                ],
                "_deprecations": [
                    309
                ],
                "PandasObject._deprecations": [
                    309
                ],
                "_typ": [
                    310
                ],
                "dtype": [
                    1280,
                    1281,
                    1667,
                    1668,
                    390,
                    391,
                    1933,
                    654,
                    1934,
                    657,
                    555,
                    560,
                    1840,
                    562,
                    564,
                    566,
                    316,
                    317,
                    574,
                    1856,
                    324,
                    325,
                    582,
                    584,
                    587,
                    460,
                    334,
                    335,
                    730,
                    731,
                    350,
                    355,
                    486,
                    487,
                    490,
                    492,
                    494,
                    495,
                    496,
                    497,
                    371,
                    499,
                    634,
                    378,
                    635,
                    637,
                    382
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    634,
                    316
                ],
                "values": [
                    1664,
                    2564,
                    2566,
                    1655,
                    2571,
                    2572,
                    2574,
                    2577,
                    2580,
                    1662,
                    317,
                    1728,
                    1729,
                    324,
                    1732,
                    333,
                    335,
                    336,
                    339,
                    340,
                    341,
                    344,
                    345,
                    347,
                    348,
                    2653,
                    352,
                    2400,
                    354,
                    2401,
                    2656,
                    2657,
                    2406,
                    2407,
                    2408,
                    2660,
                    2661,
                    2662,
                    2667,
                    1651,
                    1652,
                    373,
                    1654,
                    375,
                    1657,
                    378,
                    1661,
                    382,
                    2559
                ],
                "categories": [
                    2565,
                    2566,
                    2570,
                    2575,
                    2578,
                    2581,
                    2457,
                    2458,
                    2460,
                    2464,
                    2465,
                    424,
                    426,
                    2105,
                    2107,
                    317,
                    702,
                    2111,
                    704,
                    574,
                    575,
                    579,
                    581,
                    582,
                    352,
                    354,
                    2661,
                    2668,
                    2670,
                    371,
                    635,
                    2559
                ],
                "ordered": [
                    840,
                    841,
                    842,
                    983,
                    635,
                    317
                ],
                "fastpath": [
                    706,
                    323,
                    701
                ],
                "coerce_indexer_dtype": [
                    1121,
                    324,
                    1031,
                    391,
                    2614,
                    2584
                ],
                "dtype.categories": [
                    382,
                    324,
                    391,
                    574,
                    555,
                    334,
                    654,
                    560,
                    562,
                    564,
                    566,
                    730,
                    378,
                    637,
                    350
                ],
                "self._dtype": [
                    448,
                    325,
                    390,
                    715,
                    434
                ],
                "self._dtype.update_dtype": [
                    325,
                    390
                ],
                "null_mask": [
                    384,
                    386,
                    387,
                    2407,
                    2409,
                    330,
                    345,
                    346,
                    347
                ],
                "is_categorical_dtype": [
                    2656,
                    486,
                    333,
                    373,
                    2525
                ],
                "values.categories": [
                    2660,
                    335
                ],
                "dtype.ordered": [
                    371,
                    355,
                    335
                ],
                "ABCIndexClass": [
                    336
                ],
                "ABCSeries": [
                    336,
                    1738,
                    375
                ],
                "maybe_infer_to_datetimelike": [
                    339
                ],
                "np.ndarray": [
                    2080,
                    451,
                    1989,
                    340,
                    1268,
                    2587
                ],
                "_convert_to_list_like": [
                    341
                ],
                "sanitize_dtype": [
                    344,
                    348
                ],
                "isna": [
                    1252,
                    646,
                    2407,
                    1385,
                    1739,
                    2045,
                    1842,
                    1076,
                    1748,
                    2454,
                    345,
                    1754,
                    1885
                ],
                "null_mask.any": [
                    384,
                    346
                ],
                "idx": [
                    1111,
                    1113,
                    1114,
                    347,
                    1116
                ],
                "np.where": [
                    1458,
                    347,
                    1743
                ],
                "sanitize_array": [
                    348,
                    2406
                ],
                "codes": [
                    386,
                    387,
                    388,
                    644,
                    646,
                    391,
                    648,
                    650,
                    651,
                    654,
                    657,
                    2208,
                    2211,
                    2212,
                    2213,
                    678,
                    2345,
                    2346,
                    2610,
                    2613,
                    2617,
                    1723,
                    575,
                    1855,
                    1856,
                    1732,
                    581,
                    585,
                    587,
                    1358,
                    1359,
                    1743,
                    1744,
                    1362,
                    1363,
                    852,
                    855,
                    1751,
                    1753,
                    730,
                    731,
                    1755,
                    1757,
                    1247,
                    352,
                    1248,
                    354,
                    1250,
                    1251,
                    1765,
                    2271,
                    2272,
                    2662,
                    2669,
                    1262,
                    2670,
                    1264,
                    1266,
                    377,
                    382
                ],
                "factorize": [
                    352,
                    354
                ],
                "err": [
                    368,
                    362
                ],
                "old_codes": [
                    378,
                    374
                ],
                "values._values.codes": [
                    375
                ],
                "values._values": [
                    375
                ],
                "values.codes": [
                    2660,
                    2662,
                    375
                ],
                "_recode_for_categories": [
                    581,
                    2297,
                    2032,
                    852,
                    377,
                    730,
                    575
                ],
                "values.dtype.categories": [
                    378
                ],
                "values.dtype": [
                    378,
                    2661,
                    2559
                ],
                "full_codes": [
                    386,
                    387,
                    388
                ],
                "null_mask.shape": [
                    386
                ],
                "codes.dtype": [
                    386
                ],
                "self.dtype.categories": [
                    1026,
                    707,
                    708,
                    422,
                    1350,
                    427,
                    1325,
                    1072,
                    1073,
                    979,
                    1021
                ],
                "self.dtype": [
                    1026,
                    2179,
                    1669,
                    2317,
                    1300,
                    2213,
                    422,
                    2346,
                    427,
                    1325,
                    1072,
                    1073,
                    1840,
                    1461,
                    441,
                    707,
                    708,
                    1350,
                    841,
                    979,
                    471,
                    2010,
                    2144,
                    1633,
                    1765,
                    490,
                    492,
                    1266,
                    2035,
                    1021
                ],
                "new_dtype": [
                    1027,
                    1030,
                    1031,
                    426,
                    428,
                    434,
                    702,
                    704,
                    708,
                    842,
                    715,
                    846,
                    850,
                    853,
                    856,
                    1117,
                    1120,
                    1121,
                    746,
                    748
                ],
                "new_dtype.categories": [
                    1121,
                    708,
                    1031,
                    428,
                    846,
                    850,
                    853
                ],
                "categories.setter": [
                    424
                ],
                "self.dtype.ordered": [
                    841,
                    441
                ],
                "Ordered": [
                    437
                ],
                "self.codes": [
                    2271,
                    452,
                    2410,
                    1359,
                    1362,
                    1363,
                    1651,
                    2258,
                    730,
                    2107,
                    1247
                ],
                "Type": [
                    455
                ],
                "scalars": [
                    460
                ],
                "self._constructor": [
                    1632,
                    1669,
                    1765,
                    2213,
                    2346,
                    1461,
                    470,
                    2010
                ],
                "self._codes.copy": [
                    1494,
                    1198,
                    471
                ],
                "Dtype": [
                    474
                ],
                "cast": [
                    487
                ],
                "Union": [
                    487
                ],
                "self.dtype.update_dtype": [
                    490
                ],
                "copy": [
                    496,
                    491,
                    499
                ],
                "self.copy": [
                    931,
                    1029,
                    2440,
                    491,
                    844,
                    747,
                    2259,
                    1110
                ],
                "self._set_dtype": [
                    494
                ],
                "is_extension_array_dtype": [
                    1282,
                    644,
                    2566,
                    495
                ],
                "array": [
                    496
                ],
                "is_integer_dtype": [
                    1480,
                    497,
                    651,
                    644
                ],
                "self.isna": [
                    497,
                    1405,
                    1886
                ],
                "ArrayLike": [
                    474
                ],
                "self._codes.size": [
                    506
                ],
                "cache_readonly": [
                    508,
                    501
                ],
                "self.categories.itemsize": [
                    513
                ],
                "List": [
                    515
                ],
                "Scalar": [
                    515
                ],
                "to_list": [
                    525
                ],
                "tolist": [
                    525,
                    1878
                ],
                "cats": [
                    576,
                    578,
                    579,
                    2583,
                    584,
                    553,
                    561,
                    563,
                    565,
                    2581,
                    2582,
                    2584,
                    570,
                    575
                ],
                "Index": [
                    553,
                    2041
                ],
                "inferred_categories": [
                    553,
                    563,
                    565,
                    561
                ],
                "known_categories": [
                    554,
                    572,
                    558
                ],
                "dtype.categories.is_numeric": [
                    560
                ],
                "to_numeric": [
                    561
                ],
                "is_datetime64_dtype": [
                    562
                ],
                "to_datetime": [
                    563
                ],
                "is_timedelta64_dtype": [
                    564
                ],
                "to_timedelta": [
                    565
                ],
                "dtype.categories.is_boolean": [
                    566
                ],
                "true_values": [
                    568,
                    570,
                    567
                ],
                "cats.isin": [
                    570
                ],
                "inferred_codes": [
                    585,
                    581,
                    575
                ],
                "cats.is_monotonic_increasing": [
                    576
                ],
                "unsorted": [
                    578,
                    581
                ],
                "cats.copy": [
                    578
                ],
                "cats.sort_values": [
                    579
                ],
                "cls": [
                    2570,
                    2571,
                    587,
                    2572,
                    657
                ],
                "codes.to_numpy": [
                    648
                ],
                "np.int64": [
                    648
                ],
                "np.asarray": [
                    1281,
                    1286,
                    2407,
                    650,
                    1838,
                    1681
                ],
                "codes.max": [
                    654
                ],
                "codes.min": [
                    654
                ],
                "v": [
                    1313,
                    1314,
                    668,
                    669,
                    670
                ],
                "self._codes.view": [
                    668
                ],
                "v.flags.writeable": [
                    669
                ],
                "v.flags": [
                    669
                ],
                "_get_codes": [
                    678
                ],
                "_set_codes": [
                    678
                ],
                "CategoricalDtype._from_fastpath": [
                    1117,
                    702
                ],
                "inplace": [
                    768,
                    1029,
                    2439,
                    1032,
                    2440,
                    785,
                    786,
                    930,
                    931,
                    2466,
                    939,
                    1067,
                    1084,
                    839,
                    844,
                    978,
                    1109,
                    1110,
                    983,
                    1623,
                    858,
                    1629,
                    1123,
                    745,
                    747,
                    749,
                    1018,
                    767
                ],
                "validate_bool_kwarg": [
                    930,
                    839,
                    2439,
                    745,
                    1067,
                    785,
                    978,
                    1109,
                    1623,
                    1018,
                    767
                ],
                "value": [
                    2445,
                    2448,
                    1712,
                    1713,
                    1716,
                    1717,
                    1729,
                    1738,
                    1739,
                    1357,
                    1358,
                    1742,
                    1361,
                    1747,
                    1748,
                    1754,
                    1757,
                    1762,
                    2022,
                    2025,
                    746,
                    2026,
                    2031,
                    2033,
                    2035,
                    2037
                ],
                "cat._dtype": [
                    856,
                    748,
                    1030,
                    1120
                ],
                "self.set_ordered": [
                    768,
                    786
                ],
                "new_categories": [
                    1026,
                    1027,
                    933,
                    934,
                    935,
                    936,
                    938,
                    1195,
                    1198,
                    1073,
                    2611,
                    1204,
                    1205,
                    1078,
                    2615,
                    1084,
                    842,
                    979,
                    983,
                    1116,
                    1118,
                    1019,
                    1020,
                    1021
                ],
                "rename": [
                    845
                ],
                "cat.dtype.categories": [
                    1116,
                    846,
                    847
                ],
                "cat.dtype": [
                    1116,
                    846,
                    847
                ],
                "cat._codes": [
                    1121,
                    1031,
                    855,
                    850,
                    2262,
                    1111,
                    2461
                ],
                "cat.codes": [
                    2669,
                    853
                ],
                "is_dict_like": [
                    933
                ],
                "new_categories.get": [
                    934
                ],
                "item": [
                    936,
                    934
                ],
                "self.set_categories": [
                    1083,
                    983
                ],
                "already_included": [
                    1024,
                    1021,
                    1022
                ],
                "removals": [
                    1068,
                    1069,
                    1076,
                    1071
                ],
                "removal_set": [
                    1072,
                    1073,
                    1071
                ],
                "not_included": [
                    1072,
                    1081,
                    1080,
                    1077
                ],
                "c": [
                    1073
                ],
                "x": [
                    1925,
                    1361,
                    1077,
                    1078
                ],
                "notna": [
                    1077,
                    1078,
                    1407
                ],
                "inv": [
                    1121,
                    1114,
                    1111
                ],
                "np.unique": [
                    1111
                ],
                "idx.size": [
                    1113
                ],
                "cat.dtype.categories.take": [
                    1116
                ],
                "self.categories.map": [
                    1195
                ],
                "mapper": [
                    1195
                ],
                "self.from_codes": [
                    1266,
                    1197
                ],
                "np.any": [
                    1203
                ],
                "new_categories.insert": [
                    1204
                ],
                "np.nan": [
                    1479,
                    2151,
                    1481,
                    2186,
                    2000,
                    1204,
                    1717,
                    1655
                ],
                "np.take": [
                    1205
                ],
                "__eq__": [
                    1207
                ],
                "_cat_compare_op": [
                    1207,
                    1208,
                    1209,
                    1210,
                    1211,
                    1212
                ],
                "operator.eq": [
                    1207
                ],
                "operator": [
                    1207,
                    1208,
                    1209,
                    1210,
                    1211,
                    1212
                ],
                "__ne__": [
                    1208
                ],
                "operator.ne": [
                    1208
                ],
                "__lt__": [
                    1209
                ],
                "operator.lt": [
                    1209
                ],
                "__gt__": [
                    1210
                ],
                "operator.gt": [
                    1210
                ],
                "__le__": [
                    1211
                ],
                "operator.le": [
                    1211
                ],
                "__ge__": [
                    1212
                ],
                "operator.ge": [
                    1212
                ],
                "codes.ndim": [
                    1248
                ],
                "np.prod": [
                    1250
                ],
                "codes.shape": [
                    1250
                ],
                "periods": [
                    1250,
                    1251,
                    1261,
                    1262,
                    1264
                ],
                "np.roll": [
                    1251
                ],
                "ensure_platform_int": [
                    1251
                ],
                "fill_value": [
                    1252,
                    1253,
                    1254,
                    1255,
                    1258,
                    1866,
                    1262,
                    1264,
                    1842,
                    1843,
                    1846,
                    1847,
                    1850,
                    1855
                ],
                "take_1d": [
                    2617,
                    1279
                ],
                "self.categories.values": [
                    1279
                ],
                "is_dtype_equal": [
                    1280,
                    2026,
                    2559
                ],
                "self.categories.dtype": [
                    1280,
                    1730,
                    1933
                ],
                "result": [
                    1291,
                    1294,
                    1295,
                    1425,
                    1427,
                    2335,
                    2336,
                    2337,
                    2339,
                    1967,
                    1968,
                    1976,
                    1978,
                    1981,
                    1983,
                    1856,
                    1857,
                    2111,
                    2112,
                    2006,
                    2007,
                    2008,
                    2009,
                    2010,
                    1899,
                    1901,
                    1903
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    1291
                ],
                "ops": [
                    1291
                ],
                "ufunc": [
                    1292,
                    1301
                ],
                "method": [
                    1729,
                    1292,
                    1712,
                    1713,
                    2546,
                    2547,
                    1726
                ],
                "inputs": [
                    1292
                ],
                "kwargs": [
                    1547,
                    1292,
                    2547,
                    2119
                ],
                "ufunc.__name__": [
                    1301
                ],
                "state": [
                    1313,
                    1306,
                    1310,
                    1311
                ],
                "k": [
                    1313,
                    1314
                ],
                "state.items": [
                    1313
                ],
                "self._codes.nbytes": [
                    1325,
                    1350
                ],
                "self.dtype.categories.values.nbytes": [
                    1325
                ],
                "self.dtype.categories.values": [
                    1325
                ],
                "self.dtype.categories.memory_usage": [
                    1350
                ],
                "deep": [
                    1350
                ],
                "self.codes.dtype.type": [
                    1359
                ],
                "self.codes.dtype": [
                    1362,
                    1359
                ],
                "locs": [
                    1361,
                    1362
                ],
                "self.codes.searchsorted": [
                    1363
                ],
                "side": [
                    1363
                ],
                "sorter": [
                    1363
                ],
                "Substitution": [
                    1352,
                    2341
                ],
                "Appender": [
                    1353,
                    2342
                ],
                "_shared_docs": [
                    1353
                ],
                "isnull": [
                    1385
                ],
                "notnull": [
                    1407
                ],
                "self.notna": [
                    1425
                ],
                "code": [
                    1458,
                    1450,
                    1451,
                    1455
                ],
                "ncat": [
                    1456,
                    1458,
                    1451,
                    1452
                ],
                "ix": [
                    1459,
                    1452,
                    1461,
                    1463
                ],
                "clean": [
                    1452,
                    1454,
                    1455
                ],
                "np.arange": [
                    2660,
                    1452
                ],
                "mask.all": [
                    1452
                ],
                "dropna": [
                    2209,
                    2212,
                    1454
                ],
                "obs": [
                    1456,
                    1455
                ],
                "count": [
                    1456,
                    1458,
                    1463
                ],
                "np.bincount": [
                    1456,
                    1458
                ],
                "np.append": [
                    1459
                ],
                "Series": [
                    2549,
                    2541,
                    1662,
                    1463
                ],
                "CategoricalIndex": [
                    1463
                ],
                "needs_i8_conversion": [
                    1478
                ],
                "self.categories.take": [
                    1479
                ],
                "take": [
                    1481,
                    1855
                ],
                "self.categories.astype": [
                    1481
                ],
                "argsort": [
                    1547
                ],
                "ascending": [
                    1627,
                    1547
                ],
                "kind": [
                    1547
                ],
                "na_position": [
                    1624,
                    1625,
                    1627
                ],
                "sorted_idx": [
                    1633,
                    1627,
                    1630
                ],
                "nargsort": [
                    1627
                ],
                "values.astype": [
                    1654
                ],
                "self.categories.is_numeric": [
                    1656
                ],
                "self.rename_categories": [
                    1662
                ],
                "rank": [
                    1662
                ],
                "validate_fillna_kwargs": [
                    1712
                ],
                "limit": [
                    1718
                ],
                "reshape": [
                    1728
                ],
                "self.to_dense": [
                    1728
                ],
                "astype": [
                    1729
                ],
                "interpolate_2d": [
                    1729
                ],
                "value.isin": [
                    1739
                ],
                "values_codes": [
                    1744,
                    1742
                ],
                "indexer": [
                    1989,
                    1990,
                    1991,
                    1866,
                    1838,
                    1743,
                    1744,
                    2614,
                    2617,
                    1855
                ],
                "is_hashable": [
                    1747
                ],
                "codes.copy": [
                    1753,
                    2610,
                    2613,
                    2617
                ],
                "np.intp": [
                    1838
                ],
                "allow_fill": [
                    1866,
                    1844,
                    1855
                ],
                "from_codes": [
                    1856
                ],
                "warn": [
                    1861
                ],
                "self.take": [
                    1866
                ],
                "self._internal_get_values": [
                    1878
                ],
                "contains": [
                    1888
                ],
                "num": [
                    1895,
                    1896,
                    1897,
                    1917,
                    1918,
                    1919
                ],
                "max_vals": [
                    1897,
                    1895
                ],
                "head": [
                    1896,
                    1899,
                    1920,
                    1918
                ],
                "_get_repr": [
                    1896,
                    1897
                ],
                "tail": [
                    1920,
                    1897,
                    1899,
                    1919
                ],
                "footer": [
                    1900,
                    1965
                ],
                "self._repr_footer": [
                    1901
                ],
                "max_categories": [
                    1917,
                    1916,
                    1909
                ],
                "get_option": [
                    1912,
                    1936,
                    1911
                ],
                "fmt.format_array": [
                    1922,
                    1918,
                    1919
                ],
                "fmt": [
                    1922,
                    1964,
                    1918,
                    1919
                ],
                "category_strs": [
                    1920,
                    1922,
                    1925,
                    1926,
                    1932,
                    1945
                ],
                "x.strip": [
                    1925
                ],
                "self._repr_categories": [
                    1932
                ],
                "levheader": [
                    1955,
                    1934,
                    1942,
                    1947,
                    1948
                ],
                "width": [
                    1936,
                    1935
                ],
                "height": [
                    1935
                ],
                "get_terminal_size": [
                    1935
                ],
                "max_width": [
                    1936,
                    1946,
                    1939
                ],
                "console.in_ipython_frontend": [
                    1937
                ],
                "console": [
                    1937
                ],
                "levstring": [
                    1952,
                    1955,
                    1940,
                    1947,
                    1950
                ],
                "start": [
                    2110,
                    1953,
                    1941,
                    1949
                ],
                "cur_col_len": [
                    1946,
                    1948,
                    1942,
                    1951
                ],
                "sep_len": [
                    1946,
                    1943
                ],
                "sep": [
                    1944,
                    1950,
                    1943
                ],
                "linesep": [
                    1944,
                    1947
                ],
                "sep.rstrip": [
                    1944
                ],
                "val": [
                    1952,
                    1945,
                    1946,
                    1951
                ],
                "levstring.replace": [
                    1955
                ],
                "info": [
                    1958,
                    1959
                ],
                "self._repr_categories_info": [
                    1958
                ],
                "formatter": [
                    1964,
                    1967
                ],
                "fmt.CategoricalFormatter": [
                    1964
                ],
                "length": [
                    1965
                ],
                "na_rep": [
                    1965
                ],
                "formatter.to_string": [
                    1967
                ],
                "_maxlen": [
                    1976,
                    1978,
                    1974,
                    1975
                ],
                "self._tidy_repr": [
                    1976
                ],
                "self._get_repr": [
                    1978,
                    1980
                ],
                "replace": [
                    1980
                ],
                "indexer.dtype.kind": [
                    1989
                ],
                "indexer.dtype": [
                    1989
                ],
                "indexer.astype": [
                    1990
                ],
                "self._codes.dtype": [
                    1990
                ],
                "np.integer": [
                    2052,
                    1997
                ],
                "check_array_indexer": [
                    2004,
                    2077
                ],
                "result.ndim": [
                    2007
                ],
                "deprecate_ndim_indexing": [
                    2008
                ],
                "extract_array": [
                    2657,
                    2022
                ],
                "value.categories": [
                    2033,
                    2031
                ],
                "new_codes": [
                    2032,
                    2617,
                    2618,
                    2035
                ],
                "value.codes": [
                    2033
                ],
                "Categorical.from_codes": [
                    2035,
                    2661
                ],
                "rvalue": [
                    2041,
                    2074,
                    2037
                ],
                "to_add": [
                    2041,
                    2045
                ],
                "difference": [
                    2041
                ],
                "com.is_null_slice": [
                    2060
                ],
                "com": [
                    2060
                ],
                "lindexer": [
                    2074,
                    2075,
                    2078
                ],
                "self.categories.get_indexer": [
                    2408,
                    2074
                ],
                "self._maybe_coerce_indexer": [
                    2075
                ],
                "r": [
                    2106,
                    2110
                ],
                "counts": [
                    2330,
                    2106,
                    2331,
                    2109,
                    2110,
                    2335
                ],
                "libalgos.groupsort_indexer": [
                    2106
                ],
                "libalgos": [
                    2106
                ],
                "self.codes.astype": [
                    2107,
                    2271
                ],
                "categories.size": [
                    2107
                ],
                "counts.cumsum": [
                    2109
                ],
                "_result": [
                    2110,
                    2111
                ],
                "end": [
                    2110
                ],
                "Dict": [
                    2080
                ],
                "Hashable": [
                    2080
                ],
                "name": [
                    2529,
                    2116,
                    2532,
                    2118,
                    2546
                ],
                "self.check_for_ordered": [
                    2176,
                    2141
                ],
                "self.dtype.na_value": [
                    2144,
                    2179
                ],
                "good": [
                    2146,
                    2147,
                    2210,
                    2149,
                    2182,
                    2181,
                    2184,
                    2211
                ],
                "good.all": [
                    2147,
                    2182
                ],
                "skipna": [
                    2148,
                    2183
                ],
                "pointer": [
                    2149,
                    2184,
                    2153,
                    2154,
                    2188,
                    2189
                ],
                "self._codes.min": [
                    2153
                ],
                "deprecate_kwarg": [
                    2121,
                    2156
                ],
                "self._codes.max": [
                    2188
                ],
                "htable.mode_int64": [
                    2212
                ],
                "htable": [
                    2212
                ],
                "ensure_int64": [
                    2212
                ],
                "unique_codes": [
                    2265,
                    2258,
                    2262
                ],
                "unique1d": [
                    2258
                ],
                "take_codes": [
                    2265,
                    2267,
                    2268
                ],
                "np.sort": [
                    2267
                ],
                "cat.set_categories": [
                    2268
                ],
                "cat.categories.take": [
                    2268
                ],
                "original._constructor": [
                    2276
                ],
                "original": [
                    2276,
                    2277
                ],
                "original.categories.take": [
                    2277
                ],
                "original.categories": [
                    2277
                ],
                "uniques": [
                    2277
                ],
                "original.dtype": [
                    2277
                ],
                "self.is_dtype_equal": [
                    2292
                ],
                "other.codes": [
                    2298
                ],
                "np.array_equal": [
                    2300
                ],
                "other.dtype": [
                    2317
                ],
                "self.value_counts": [
                    2330
                ],
                "freqs": [
                    2331,
                    2335
                ],
                "counts.sum": [
                    2331
                ],
                "concat": [
                    2335
                ],
                "result.columns": [
                    2336
                ],
                "result.index.name": [
                    2337
                ],
                "result.index": [
                    2337
                ],
                "nv.validate_repeat": [
                    2344
                ],
                "nv": [
                    2344
                ],
                "axis": [
                    2344
                ],
                "self._codes.repeat": [
                    2345
                ],
                "repeats": [
                    2345
                ],
                "_extension_array_shared_docs": [
                    2342
                ],
                "concat_categorical": [
                    2357
                ],
                "to_concat": [
                    2357
                ],
                "values_type": [
                    2401,
                    2404
                ],
                "code_values": [
                    2408,
                    2409,
                    2410
                ],
                "algorithms.isin": [
                    2410
                ],
                "algorithms": [
                    2410
                ],
                "to_replace": [
                    2448,
                    2443,
                    2445
                ],
                "replace_dict": [
                    2448,
                    2452,
                    2445
                ],
                "replace_value": [
                    2445,
                    2452,
                    2453,
                    2455,
                    2458,
                    2462
                ],
                "new_value": [
                    2464,
                    2452,
                    2454,
                    2459,
                    2460
                ],
                "replace_dict.items": [
                    2452
                ],
                "cat.remove_categories": [
                    2462,
                    2455
                ],
                "cat.categories.tolist": [
                    2457
                ],
                "index": [
                    2464,
                    2458,
                    2461
                ],
                "categories.index": [
                    2458,
                    2460
                ],
                "value_index": [
                    2460,
                    2461
                ],
                "cat.rename_categories": [
                    2465
                ],
                "PandasDelegate": [
                    2490
                ],
                "NoNewAttributesMixin": [
                    2490
                ],
                "self._validate": [
                    2517
                ],
                "data": [
                    2517,
                    2518,
                    2519,
                    2520,
                    2525
                ],
                "self._parent": [
                    2529,
                    2532,
                    2541,
                    2546,
                    2518
                ],
                "data.values": [
                    2518
                ],
                "self._index": [
                    2549,
                    2541,
                    2519
                ],
                "data.index": [
                    2519
                ],
                "self._name": [
                    2520,
                    2549
                ],
                "data.name": [
                    2520
                ],
                "self._freeze": [
                    2521
                ],
                "data.dtype": [
                    2525
                ],
                "new_values": [
                    2532
                ],
                "self._parent.codes": [
                    2541
                ],
                "res": [
                    2547,
                    2548,
                    2549
                ],
                "args": [
                    2547
                ],
                "delegate_names": [
                    2473,
                    2476
                ],
                "dtype_equal": [
                    2561,
                    2559
                ],
                "categories.dtype": [
                    2570,
                    2566,
                    2559
                ],
                "is_object_dtype": [
                    2566
                ],
                "categories.dtype.construct_array_type": [
                    2570
                ],
                "try_cast_to_ea": [
                    2571
                ],
                "ensure_object": [
                    2577,
                    2578,
                    2574,
                    2575
                ],
                "hash_klass": [
                    2580,
                    2582
                ],
                "vals": [
                    2584,
                    2580
                ],
                "_get_data_algo": [
                    2580,
                    2581
                ],
                "_": [
                    2581
                ],
                "t": [
                    2584,
                    2582,
                    2583
                ],
                "t.map_locations": [
                    2583
                ],
                "t.lookup": [
                    2584
                ],
                "old_categories": [
                    2608,
                    2611,
                    2615
                ],
                "new_categories.equals": [
                    2611
                ],
                "new_categories.get_indexer": [
                    2615
                ],
                "list_like": [
                    2624,
                    2625,
                    2626,
                    2627,
                    2628,
                    2629,
                    2632,
                    2622,
                    2623
                ],
                "is_sequence": [
                    2626
                ],
                "is_iterator": [
                    2626
                ],
                "cat_codes": [
                    2660,
                    2661
                ],
                "values.codes.dtype": [
                    2660
                ],
                "iterables": [
                    2692,
                    2695
                ],
                "factorize_from_iterable": [
                    2695
                ],
                "it": [
                    2695
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_50/pandas/tests/extension/test_categorical.py",
                "test_function": "test_not_equal_with_na",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"categories\",\n        [[\"a\", \"b\"], [0, 1], [pd.Timestamp(\"2019\"), pd.Timestamp(\"2020\")]],\n    )\n    def test_not_equal_with_na(self, categories):\n        # https://github.com/pandas-dev/pandas/issues/32276\n        c1 = Categorical.from_codes([-1, 0], categories=categories)\n        c2 = Categorical.from_codes([0, 1], categories=categories)\n\n        result = c1 != c2\n\n        assert result.all()",
                "test_error": "assert False  +  where False = <built-in method all of numpy.ndarray object at 0x121947800>()  +    where <built-in method all of numpy.ndarray object at 0x121947800> = array([False,  True]).all",
                "full_test_error": "self = <pandas.tests.extension.test_categorical.TestComparisonOps object at 0x1218a2d00>\ncategories = ['a', 'b']\n\n    @pytest.mark.parametrize(\n        \"categories\",\n        [[\"a\", \"b\"], [0, 1], [pd.Timestamp(\"2019\"), pd.Timestamp(\"2020\")]],\n    )\n    def test_not_equal_with_na(self, categories):\n        # https://github.com/pandas-dev/pandas/issues/32276\n        c1 = Categorical.from_codes([-1, 0], categories=categories)\n        c2 = Categorical.from_codes([0, 1], categories=categories)\n    \n        result = c1 != c2\n    \n>       assert result.all()\nE       assert False\nE        +  where False = <built-in method all of numpy.ndarray object at 0x121947800>()\nE        +    where <built-in method all of numpy.ndarray object at 0x121947800> = array([False,  True]).all\n\npandas/tests/extension/test_categorical.py:296: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('categories', [['a', 'b'], [0, 1], [pd.Timestamp('2019'), pd.Timestamp('2020')]])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_50/pandas/tests/extension/test_categorical.py",
                "test_function": "test_not_equal_with_na",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"categories\",\n        [[\"a\", \"b\"], [0, 1], [pd.Timestamp(\"2019\"), pd.Timestamp(\"2020\")]],\n    )\n    def test_not_equal_with_na(self, categories):\n        # https://github.com/pandas-dev/pandas/issues/32276\n        c1 = Categorical.from_codes([-1, 0], categories=categories)\n        c2 = Categorical.from_codes([0, 1], categories=categories)\n\n        result = c1 != c2\n\n        assert result.all()",
                "test_error": "assert False  +  where False = <built-in method all of numpy.ndarray object at 0x121a01620>()  +    where <built-in method all of numpy.ndarray object at 0x121a01620> = array([False,  True]).all",
                "full_test_error": "self = <pandas.tests.extension.test_categorical.TestComparisonOps object at 0x12193a910>\ncategories = [0, 1]\n\n    @pytest.mark.parametrize(\n        \"categories\",\n        [[\"a\", \"b\"], [0, 1], [pd.Timestamp(\"2019\"), pd.Timestamp(\"2020\")]],\n    )\n    def test_not_equal_with_na(self, categories):\n        # https://github.com/pandas-dev/pandas/issues/32276\n        c1 = Categorical.from_codes([-1, 0], categories=categories)\n        c2 = Categorical.from_codes([0, 1], categories=categories)\n    \n        result = c1 != c2\n    \n>       assert result.all()\nE       assert False\nE        +  where False = <built-in method all of numpy.ndarray object at 0x121a01620>()\nE        +    where <built-in method all of numpy.ndarray object at 0x121a01620> = array([False,  True]).all\n\npandas/tests/extension/test_categorical.py:296: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('categories', [['a', 'b'], [0, 1], [pd.Timestamp('2019'), pd.Timestamp('2020')]])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_50/pandas/tests/extension/test_categorical.py",
                "test_function": "test_not_equal_with_na",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"categories\",\n        [[\"a\", \"b\"], [0, 1], [pd.Timestamp(\"2019\"), pd.Timestamp(\"2020\")]],\n    )\n    def test_not_equal_with_na(self, categories):\n        # https://github.com/pandas-dev/pandas/issues/32276\n        c1 = Categorical.from_codes([-1, 0], categories=categories)\n        c2 = Categorical.from_codes([0, 1], categories=categories)\n\n        result = c1 != c2\n\n        assert result.all()",
                "test_error": "assert False  +  where False = <built-in method all of numpy.ndarray object at 0x121931a80>()  +    where <built-in method all of numpy.ndarray object at 0x121931a80> = array([False,  True]).all",
                "full_test_error": "self = <pandas.tests.extension.test_categorical.TestComparisonOps object at 0x1218a2a00>\ncategories = [Timestamp('2019-01-01 00:00:00'), Timestamp('2020-01-01 00:00:00')]\n\n    @pytest.mark.parametrize(\n        \"categories\",\n        [[\"a\", \"b\"], [0, 1], [pd.Timestamp(\"2019\"), pd.Timestamp(\"2020\")]],\n    )\n    def test_not_equal_with_na(self, categories):\n        # https://github.com/pandas-dev/pandas/issues/32276\n        c1 = Categorical.from_codes([-1, 0], categories=categories)\n        c2 = Categorical.from_codes([0, 1], categories=categories)\n    \n        result = c1 != c2\n    \n>       assert result.all()\nE       assert False\nE        +  where False = <built-in method all of numpy.ndarray object at 0x121931a80>()\nE        +    where <built-in method all of numpy.ndarray object at 0x121931a80> = array([False,  True]).all\n\npandas/tests/extension/test_categorical.py:296: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('categories', [['a', 'b'], [0, 1], [pd.Timestamp('2019'), pd.Timestamp('2020')]])"
                ]
            }
        ]
    }
}