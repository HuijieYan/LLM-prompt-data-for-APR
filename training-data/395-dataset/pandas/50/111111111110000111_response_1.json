{
    "pandas": [
        {
            "bugID": 50,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 65,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def _cat_compare_op(op):\n        opname = f\"__{op.__name__}__\"\n\n        @unpack_zerodim_and_defer(opname)\n        def func(self, other):\n            if is_list_like(other) and len(other) != len(self):\n                raise ValueError(\"Lengths must match.\")\n\n            if not self.ordered:\n                if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                    raise TypeError(\n                        \"Unordered Categoricals can only compare equality or not\"\n                    )\n            if isinstance(other, Categorical):\n                if not self.categories.equals(other.categories):\n                    raise TypeError(\n                        \"Categoricals can only be compared if 'categories' are the same.\"\n                    )\n\n                if not (self.ordered == other.ordered):\n                    raise TypeError(\n                        \"Categoricals can only be compared if 'ordered' is the same\"\n                    )\n\n                if self.ordered:\n                    mask = (self._codes == -1) | (other._codes == -1)\n                    if opname in [\"__eq__\", \"__ne__\"]:\n                        ret = (self._codes != other._codes) & ~mask\n                    else:\n                        ret = getattr(self._codes, opname)(other._codes)\n                else:\n                    other_codes = _get_codes_for_values(other, self.categories)\n                    mask = (self._codes == -1) | (other_codes == -1)\n                    if opname in [\"__eq__\", \"__ne__\"]:\n                        ret = (self._codes != other_codes) & ~mask\n                    else:\n                        f = getattr(self._codes, opname)\n                        ret = f(other_codes)\n                if mask.any():\n                    ret[mask] = False\n                return ret\n            elif is_scalar(other):\n                if other not in self.categories:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n                if self._codes[0] == -1:\n                    ret = np.full(len(self), False, dtype=bool)\n                else:\n                    i = self.categories.get_loc(other)\n                    ret = getattr(self._codes, opname)(i)\n                return ret\n            else:\n                if opname in [\"__eq__\", \"__ne__\"]:\n                    return getattr(np.array(self), opname)(np.array(other))\n                raise TypeError(\n                    f\"Cannot compare a Categorical for op {opname} with \"\n                    f\"type {type(other)}.\\nIf you want to compare values, \"\n                    \"use 'np.asarray(cat) <op> other'.\"\n                )\n\n        func.__name__ = opname\n\n        return func",
            "imports": []
        }
    ]
}