{
    "pandas": [
        {
            "bugID": 50,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 65,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def _cat_compare_op(op):\n\n    opname = f\"__{op.__name__}__\"\n    \n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            # TODO: Could this fail if the categories are listlike objects?\n            raise ValueError(\"Lengths must match.\")\n    \n        if np.any(self._codes == -1) or np.any(other._codes == -1):\n            # check for uninitialized values (-1)\n            uninitialized_mask = (self._codes == -1) | (other._codes == -1)\n            result = np.empty(len(self), dtype=bool)\n            result[uninitialized_mask] = False\n            result[~uninitialized_mask] = op(self._codes[~uninitialized_mask], other._codes[~uninitialized_mask])\n            return result\n        else:\n            # perform comparison without uninitialized values\n            return op(self._codes, other._codes)\n    \n    func.__name__ = opname\n    \n    return func"
        }
    ]
}