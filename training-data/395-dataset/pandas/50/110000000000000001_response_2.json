{
    "pandas": [
        {
            "bugID": 50,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 65,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def _cat_compare_op(op):\n\n    opname = f\"__{op.__name__}__\"\n\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n\n        if is_categorical_dtype(other):\n            # handling comparisons between Categorical type objects\n            if not self.categories.equals(other.categories):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'categories' are the same.\"\n                )\n\n            if self.ordered != other.ordered:\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n\n            self_arr = np.asarray(self)\n            other_arr = np.asarray(other)\n\n            return op(self_arr, other_arr)\n\n        elif is_scalar(other):\n            # handling comparison with scalar values\n            self_arr = np.asarray(self)\n            return op(self_arr, other)\n\n        else:\n            # handling other comparison cases\n            raise TypeError(\n                f\"Cannot compare a Categorical for op {opname} with \"\n                f\"type {type(other)}.\\nIf you want to compare values, \"\n                \"use 'np.asarray(cat) <op> other'.\"\n            )\n\n    func.__name__ = opname\n\n    return func",
            "imports": [
                "import numpy as np",
                "from pandas.api.types import (\n    CategoricalDtype, is_scalar, is_list_like, is_categorical_dtype\n)"
            ]
        }
    ]
}