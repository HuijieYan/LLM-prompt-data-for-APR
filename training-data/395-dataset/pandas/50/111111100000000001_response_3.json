{
    "pandas": [
        {
            "bugID": 50,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 65,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def _cat_compare_op(op):\n\n    opname = f\"__{op.__name__}__\"\n    \n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            raise ValueError(\"Lengths must match.\")\n    \n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n    \n        if isinstance(other, Categorical):\n            if not self.categories.equals(other.categories):\n                raise TypeError(\"Categoricals can only be compared if 'categories' are the same.\")\n            if self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(\"Categoricals can only be compared if 'categories' are the same.\")\n            \n            if not (self.ordered == other.ordered):\n                raise TypeError(\"Categoricals can only be compared if 'ordered' is the same\")\n            \n            mask = (self._codes == -1) | (other._codes == -1)\n            return getattr(self._codes, opname)(other._codes) & ~mask\n    \n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                return getattr(self._codes, opname)(i)\n            else:\n                return np.zeros(len(self), dtype=bool) if opname == \"__eq__\" else np.ones(len(self), dtype=bool)\n    \n        if opname in [\"__eq__\", \"__ne__\"]:\n            return getattr(np.asarray(self), opname)(np.asarray(other))\n    \n        raise TypeError(\n            f\"Cannot compare a Categorical for op {opname} with type {type(other)}.\\nIf you want to compare values, use 'np.asarray(cat) <op> other'.\"\n        )\n    \n    func.__name__ = opname\n    \n    return func"
        }
    ]
}