{
    "pandas": [
        {
            "bugID": 50,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 65,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def _cat_compare_op(op):\n    opname = f\"__{op}__\"\n\n    def func(self, other):\n        if len(other) != len(self):\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if op in [\"lt\", \"gt\", \"le\", \"ge\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n\n        if isinstance(other, Categorical):\n            if len(self.categories) != len(other.categories):\n                raise TypeError(\"Categoricals can only be compared if 'categories' are the same. Categories are different lengths\")\n\n            if self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(\"Categoricals can only be compared if 'categories' are the same.\")\n\n            if not set(self.categories) == set(other.categories):\n                raise TypeError(\"Categoricals can only be compared if 'categories' are the same.\")\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\"Categoricals can only be compared if 'ordered' is the same.\")\n\n            if not self.ordered and not np.array_equal(self.categories, other.categories):\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, op)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            ret[mask] = False\n            return ret\n\n        if np.isscalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if op not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if op == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif op == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {op} with a scalar, which is not a category.\"\n                    )\n        else:\n            if op in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), op)(np.array(other))\n\n            raise TypeError(\n                f\"Cannot compare a Categorical for op {op} with type {type(other)}.\\nIf you want to compare values, use 'np.asarray(cat) <op> other'.\"\n            )\n\n    func.__name__ = opname\n\n    return func",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}