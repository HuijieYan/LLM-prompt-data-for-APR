{
    "pandas": [
        {
            "bugID": 126,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 6822,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def append(self, other, ignore_index=False, verify_integrity=False, sort=None):\n    from pandas.core.reshape.concat import concat\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n    \n    Columns in `other` that are not in the caller are added as new columns.\n    \n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default None\n        Sort columns if the columns of `self` and `other` are not aligned.\n        The default sorting is deprecated and will change to not-sorting\n        in a future version of pandas. Explicitly pass ``sort=True`` to\n        silence the warning and sort. Explicitly pass ``sort=False`` to\n        silence the warning and not sort.\n    \n        .. versionadded:: 0.23.0\n    \n    Returns\n    -------\n    DataFrame\n    \n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n    \n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n    \n        if other.name is not None:\n            # other must have the same index name as self, otherwise\n            # index name will be reset\n            index = Index([other.name], name=self.index.name)\n        else:\n            index = None\n    \n        combined_columns = self.columns.union(other.index)\n        \n        if other.name is None and ignore_index:\n            index = None\n    \n        other = other.reindex(combined_columns, copy=False) if not other.empty else DataFrame(columns=combined_columns, index=index)\n        other = other._convert(datetime=True, timedelta=True)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list) and not isinstance(other[0], DataFrame) and other:\n        other = DataFrame(other, columns=self.columns)\n    elif isinstance(other, DataFrame) and other.empty and not ignore_index:\n        return self.copy()\n        \n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    \n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )"
        }
    ]
}