{
    "pandas": [
        {
            "bugID": 126,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 6822,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def append(self, other, ignore_index=False, verify_integrity=False, sort=None):\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n\n    Columns in `other` that are not in the caller are added as new columns.\n\n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default None\n        Sort columns if the columns of `self` and `other` are not aligned.\n        The default sorting is deprecated and will change to not-sorting\n        in a future version of pandas. Explicitly pass ``sort=True`` to\n        silence the warning and sort. Explicitly pass ``sort=False`` to\n        silence the warning and not sort.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n\n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n\n    With `ignore_index` set to True:\n\n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n\n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n\n    Less efficient:\n\n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n\n    More efficient:\n\n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, (pd.Series, dict)):\n        if isinstance(other, dict):\n            other = pd.Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n\n        if other.name is None:\n            index = None\n        else:\n            # other must have the same index name as self, otherwise\n            # index name will be reset\n            index = pd.Index([other.name], name=self.index.name)\n\n        idx_diff = other.index.difference(self.columns)\n        combined_columns = self.columns.union(idx_diff)\n        other = other.reindex(combined_columns, copy=False)\n        other = pd.DataFrame(\n            other.values.reshape((1, len(other))),\n            index=index,\n            columns=combined_columns,\n        )\n        other = other._convert(datetime=True, timedelta=True)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list) and not isinstance(other[0], pd.DataFrame):\n        other = pd.DataFrame(other)\n        if len(self.columns.intersection(other.columns)) > 0:\n            other = other.reindex(columns=self.columns)\n\n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )",
            "imports": [
                "from pandas.core.reshape.concat import concat"
            ]
        }
    ]
}