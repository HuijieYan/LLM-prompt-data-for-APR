{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name: str = \"All\", dropna: bool = True, normalize=False) -> \"DataFrame\":\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    common_idx = None\n    pass_objs = [index, columns]\n    \n    rownames = rownames if rownames is not None else ['']\n    colnames = colnames if colnames is not None else ['']\n    \n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data = {'index': index, 'columns': columns}\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(index=index, columns=columns)\n    if values is not None:\n        df[\"__dummy__\"] = values\n        kwargs = {\"values\": '__dummy__', \"aggfunc\": aggfunc}\n    else:\n        kwargs = {}\n\n    table = df.pivot_table(index=rownames, columns=colnames, margins=margins, margins_name=margins_name, dropna=dropna, **kwargs)\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(table, normalize=normalize, margins=margins, margins_name=margins_name)\n\n    return table",
            "import_list": [
                "from pandas import DataFrame"
            ]
        }
    ]
}