{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    \n    import pandas as pd\n    \n    def maybe_make_list(obj, default_names):\n        if isinstance(obj, (list, tuple, range)):\n            return list(obj)\n        else:\n            return [obj] if obj is not None else default_names\n\n    index = maybe_make_list(index, None)\n    columns = maybe_make_list(columns, None)\n    rownames = maybe_make_list(rownames, index)\n    colnames = maybe_make_list(colnames, columns)\n\n    common_idx = index if len(index) == len(columns) else None\n\n    data = dict(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None:\n        if aggfunc is not None:\n            raise ValueError(\"aggfunc cannot be used without values.\")\n        df = pd.DataFrame(data)\n        table = df.pivot_table(\n            index=rownames,\n            columns=colnames,\n            margins=margins,\n            margins_name=margins_name,\n            dropna=dropna,\n        )        \n    else:\n        if aggfunc is None:\n            raise ValueError(\"values cannot be used without an aggfunc.\")\n        df = pd.DataFrame({**data, \"__dummy__\": values})\n        table = df.pivot_table(\n            \"__dummy__\",\n            index=rownames,\n            columns=colnames,\n            margins=margins,\n            margins_name=margins_name,\n            dropna=dropna,\n            aggfunc=aggfunc,\n        )\n\n    if normalize:\n        return table.div(table.sum().sum())\n    else:\n        return table",
            "import_list": [
                "import pandas as pd"
            ]
        }
    ]
}