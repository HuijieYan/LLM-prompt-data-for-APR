{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(index, columns, values=None, rownames=None, colnames=None,\n             aggfunc=None, margins=False, margins_name: str = \"All\",\n             dropna: bool = True, normalize=False) -> \"DataFrame\":\n    \n    # Convert index and columns to list if they are not\n    index = index if isinstance(index, list) else [index]\n    columns = columns if isinstance(columns, list) else [columns]\n\n    # Ensure rownames and colnames are lists\n    rownames = rownames if isinstance(rownames, list) else [rownames]\n    colnames = colnames if isinstance(colnames, list) else [colnames]\n\n    # Convert index and columns to list if they are not\n    rownames = rownames if isinstance(rownames, list) else [rownames]\n    colnames = colnames if isinstance(colnames, list) else [colnames]\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (pd.Series, pd.DataFrame))]\n    if pass_objs:\n        common_idx = pd.concat(pass_objs, axis=1, join=\"inner\")\n\n    data = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    df = pd.DataFrame(data, index=common_idx)\n\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\"__dummy__\", index=rownames, columns=colnames,\n                           margins=margins, margins_name=margins_name,\n                           dropna=dropna, **kwargs)\n\n    if normalize:\n        table = (table - table.min()) / (table.max() - table.min())\n\n    return table",
            "imports": [
                "import pandas as pd",
                "import numpy as np"
            ]
        }
    ]
}