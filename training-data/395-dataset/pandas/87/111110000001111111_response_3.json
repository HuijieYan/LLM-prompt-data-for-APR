{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    from pandas import DataFrame\n    from pandas.api.types import is_list_like, is_bool\n    if is_list_like(index) or is_list_like(columns):\n        rows = list(index) if is_list_like(index) else [index]\n        cols = list(columns) if is_list_like(columns) else [columns]\n        index = [rows] * len(cols)\n        index = [item for sublist in index for item in sublist]\n        columns = []\n        for col in cols:\n            columns.extend([col] * len(rows))\n    else:\n        index = [index]\n        columns = [columns]\n\n    rownames = list(rownames) if rownames is not None else None\n    colnames = list(colnames) if colnames is not None else None\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, pd.Series)]\n    if pass_objs:\n        common_idx = pd.MultiIndex.from_arrays(pass_objs)\n\n    data: Dict = {}\n    index_name = index[0].name if hasattr(index[0], \"name\") else None\n    column_name = columns[0].name if hasattr(columns[0], \"name\") else None\n\n    data[index_name] = index[0].array if index_name else index[0]\n    data[column_name] = columns[0].array if column_name else columns[0]\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    df = pd.DataFrame(data)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=index_name,\n        columns=column_name,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table",
            "imports": [
                "from typing import List, Dict",
                "import pandas as pd",
                "from pandas.core.internals import BlockManager",
                "from pandas.core.dtypes.common import is_list_like",
                "from pandas.api.types import is_bool, _get_dtype_type, is_list_like, is_integer, is_string_like, is_datetimelike, is_scalar",
                "from pandas import DataFrame",
                "from pandas.api.types import is_list_like, is_bool"
            ]
        }
    ]
}