{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None,\n             margins=False, margins_name='All', dropna=True, normalize=False) -> 'DataFrame':\n    index = [index] if isinstance(index, (Series, list, np.ndarray)) and not is_list_like(index) else index\n    columns = [columns] if isinstance(columns, (Series, list, np.ndarray)) and not is_list_like(columns) else columns\n    rownames = _get_names(index, rownames, prefix='row')\n    colnames = _get_names(columns, colnames, prefix='col')\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (Series, DataFrame))]\n    \n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data = dict(zip(rownames if isinstance(rownames, list) else [rownames], index if isinstance(index, list) else [index]))\n    data.update(zip(colnames if isinstance(colnames, list) else [colnames], columns if isinstance(columns, list) else [columns]))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    df = DataFrame(data, index=common_idx)\n    \n    if values is None:\n        df['__dummy__'] = 0\n        kwargs = {'aggfunc': len, 'fill_value': 0}\n    else:\n        df['__dummy__'] = values\n        kwargs = {'aggfunc': aggfunc}\n\n    table = df.pivot_table('__dummy__',\n                           index=rownames,\n                           columns=colnames,\n                           margins=margins,\n                           margins_name=margins_name,\n                           dropna=dropna,\n                           **kwargs)\n\n    if normalize:\n        table = _normalize(table, normalize=normalize, margins=margins, margins_name=margins_name)\n\n    return table",
            "imports": [
                "from pandas import DataFrame, Series",
                "from pandas.core.dtypes.common import is_list_like",
                "from pandas.core.arrays.categorical import Categorical"
            ]
        }
    ]
}