{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n    \n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n    \n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n    \n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n    \n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n    \n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n    \n    Examples\n    --------\n    ...(examples remain unchanged)...\n    \"\"\"",
            "imports": [
                "import pandas as pd",
                "from pandas.core import common as com",
                "from pandas.core.dtypes.generic import ABCSeries, ABCDataFrame"
            ]
        }
    ]
}