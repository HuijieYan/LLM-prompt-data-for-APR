{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(\n    index: Any,\n    columns: Any,\n    values: Any = None,\n    rownames: Sequence = None,\n    colnames: Sequence = None,\n    aggfunc: Callable = None,\n    margins: bool = False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize: Any = False,\n) -> DataFrame:\n    import pandas as pd\n    import numpy as np\n    from pandas.core.arrays.categorical import maybe_iterable_to_list\n    from pandas.core.arrays.categorical import ABCSeries, ABCDataFrame\n    from pandas.core import common as com\n    from pandas.core.frame import DataFrame\n    from typing import Any, Sequence, Dict, Callable\n    if values is not None and aggfunc is None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n    \n    if values is None and aggfunc is not None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n    \n    index, columns = maybe_iterable_to_list(index), maybe_iterable_to_list(columns)\n    \n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n    \n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n    \n    if values is None:\n        df = DataFrame(\n            {\"__dummy__\": 0},\n            index=common_idx,\n        )\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df = DataFrame(\n            {\"__dummy__\": values},\n            index=common_idx,\n        )\n        kwargs = {\"aggfunc\": aggfunc}\n    \n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n    \n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n    \n    return table"
        }
    ]
}