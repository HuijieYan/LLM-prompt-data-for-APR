{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n) -> \"DataFrame\":\n    import pandas as pd\n    import numpy as np\n    from pandas.core.arrays.categorical import ABCSeries\n    from pandas.core.frame import DataFrame\n    from typing import Dict\n    index = [index] if isinstance(index, pd.Series) else index\n    columns = [columns] if isinstance(columns, pd.Series) else columns\n    \n    if isinstance(index, pd.Series):\n        rownames = index.name\n    if isinstance(columns, pd.Series):\n        colnames = columns.name\n    \n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n    \n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n    \n    data: Dict = {}\n    if rownames:\n        data[rownames] = index\n    if colnames:\n        data[colnames] = columns\n    \n    df = pd.DataFrame(data)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": 'size', \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n    \n    table = pd.pivot_table(\n        df,\n        values=\"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n    \n    if type(table.columns) != type(table.index):\n        table.columns = pd.MultiIndex.from_tuples(table.columns)\n        table.index = pd.MultiIndex.from_tuples(table.index)\n    \n    if normalize:\n        table = table / table.sum().sum()\n    \n    return table"
        }
    ]
}