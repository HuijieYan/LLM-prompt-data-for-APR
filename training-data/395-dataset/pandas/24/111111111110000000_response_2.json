{
    "pandas": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 810,
            "file_name": "pandas/core/arrays/datetimes.py",
            "replace_code": "def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\"):\n\n    \"\"\"\n    Localize tz-naive Datetime Array/Index to tz-aware\n    Datetime Array/Index.\n    This method takes a time zone (tz) naive Datetime Array/Index object and makes this time zone aware. It does not move the time to another time zone.\n    Time zone localization helps to switch from time zone aware to time zone unaware objects.\n    Parameters\n    ----------\n    tz : str, pytz.timezone, dateutil.tz.tzfile or None\n        Time zone to convert timestamps to. Passing ``None`` will remove the time zone information preserving local time.\n    ambiguous : 'infer', 'NaT', bool array, default 'raise'\n        When clocks moved backward due to DST, ambiguous times may arise. For example in Central European Time (UTC+01), when going from 03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at 00:30:00 UTC and at 01:30:00 UTC. In such a situation, the `ambiguous` parameter dictates how ambiguous times should be handled.\n            - 'infer' will attempt to infer fall dst-transition hours based on order\n            - bool-ndarray where True signifies a DST time, False signifies a non-DST time (note that this flag is only applicable for ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous times.\n    nonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, default 'raise'\n        A nonexistent time does not exist in a particular timezone where clocks moved forward due to DST.\n            - 'shift_forward' will shift the nonexistent time forward to the closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise a NonExistentTimeError if there are nonexistent times.\n        .. versionadded:: 0.24.0\n    Returns\n    -------\n    Same type as self\n        Array/Index converted to the specified time zone.\n    Raises\n    ------\n    TypeError\n        If the Datetime Array/Index is tz-aware and tz is not None.\n    See Also\n    --------\n    DatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n        one time zone to another.\n    Examples\n    --------\n    ...\n    \"\"\"\n    \n    nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n    if nonexistent not in nonexistent_options and not isinstance(nonexistent, timedelta):\n        raise ValueError(\"The nonexistent argument must be one of 'raise', 'NaT', 'shift_forward', 'shift_backward' or a timedelta object\")\n    \n    if self.tz is not None:\n        if tz is None:\n            new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n        else:\n            raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n    else:\n        tz = timezones.maybe_get_tz(tz)\n        # Convert to UTC\n        new_dates = conversion.tz_localize_to_utc(self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent)\n    new_dates = new_dates.view(DT64NS_DTYPE)\n    dtype = tz_to_dtype(tz)\n    return self._simple_new(new_dates, dtype=dtype, freq=self.freq)"
        }
    ]
}