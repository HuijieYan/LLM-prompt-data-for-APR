{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, (list, tuple)):\n        if not is_list_like(data):\n            data = [data]\n        data = com.asarray_tuplesafe(data, dtype=dtype)\n\n    # Convert values that may have levels, to a Categorical\n    # if this makes sense to be categorical\n    inferred_type = lib.infer_dtype(data)\n    if isinstance(inferred_type, ExtensionDtype):\n\n        if not is_dtype_equal(inferred_type, dtype):\n\n            if is_object_dtype(inferred_type) and hasattr(data, \"__array__\"):\n                data = np.asarray(data)\n\n            if is_integer_dtype(inferred_type) and is_object_dtype(dtype):\n                if hasattr(data, \"__array__\"):\n                    data = np.asarray(data)\n\n            if isinstance(dtype, CategoricalDtype) and isinstance(data, (list, tuple)):\n                data = Categorical(data, dtype=dtype)\n            elif is_datetime_or_timedelta_dtype(dtype):\n                data = data.copy()\n\n    return data",
            "import_list": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas.api.types import is_list_like",
                "from pandas.api import extensions as com",
                "from pandas.core.dtypes.dtypes import ExtensionDtype",
                "from pandas.core import algorithms as lib",
                "from pandas.core.dtypes.cast import maybe_upcast, pandas_dtype, infer_dtype_from_scalar",
                "from pandas.core.dtypes.common import (\n    is_datetime_or_timedelta_dtype,\n    is_dtype_equal,\n    is_extension_array_dtype,\n    is_extension_type,\n    is_list_like,\n    is_object_dtype,\n    is_integer_dtype,\n    is_float_dtype,\n)",
                "from pandas.core.dtypes.dtypes import CategoricalDtype",
                "from pandas.core.dtypes.generic import ABCDataFrame"
            ]
        }
    ]
}