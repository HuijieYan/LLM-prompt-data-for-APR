{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    from typing import Sequence, Optional, Union\n    import numpy as np\n    from numpy.ma import MaskedArray\n    from pandas.core.arrays.base import ExtensionDtype\n    from pandas.core.arrays.base import ABCExtensionArray\n    from pandas.core.dtypes.common import is_float_dtype, is_integer_dtype, is_extension_array_dtype, is_object_dtype\n    from pandas.core.arrays.masked import maybe_upcast\n    from pandas.core.dtypes.dtypes import pandas_dtype\n    from pandas.core.dtypes.generic import ABCDatetimeArray\n    from pandas.core.dtypes.inference import infer_dtype_from_scalar\n    from pandas.core.dtypes.missing import lib, na as isna\n    from pandas.core.tools.datetimes import maybe_cast_to_datetime, maybe_convert_platform\n    from pandas.core.arrays.casted import construct_1d_arraylike_from_scalar\n    from pandas.core.construction import maybe_cast_to_extension_array\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n    \n    if isinstance(data, MaskedArray):\n        mask = data.mask\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n    \n    data = maybe_cast_to_extension_array(data)\n    \n    if isinstance(data, np.ndarray):\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n    \n    elif isinstance(data, ABCExtensionArray):\n        subarr = data\n        \n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n    \n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n    \n        subarr = maybe_cast_to_datetime(subarr, dtype)\n    \n    elif isinstance(data, range):\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n    \n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                value = maybe_cast_to_datetime(value, dtype)\n    \n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n        else:\n            return subarr.item()\n    \n    elif subarr.ndim == 1:\n        if index is not None:\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n            \n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise ValueError(\"Data must be 1-dimensional\")\n        else:\n            subarr = np.array(data, dtype=object)\n        \n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        if issubclass(subarr.dtype.type, str):\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n        \n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n    \n    return subarr"
        }
    ]
}