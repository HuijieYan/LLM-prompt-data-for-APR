{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n    data, index, dtype=None, copy=False, raise_cast_failure=False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    if isinstance(data, np.ndarray):\n        subarr = data.copy() if copy else data\n        if dtype is not None:\n            subarr = subarr.astype(dtype)\n        return subarr\n\n    if isinstance(data, ABCExtensionArray):\n        subarr = data.copy() if copy else data\n        if dtype is not None:\n            subarr = subarr.astype(dtype)\n        return subarr\n\n    if isinstance(data, (list, tuple)) and len(data) > 0:\n        subarr = maybe_cast_to_datetime(data, dtype)\n        return subarr\n\n    if isinstance(data, range):\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n        return subarr\n\n    # handle scalar data or other cases\n    if lib.is_scalar(data):\n        if index is not None:\n            value = data\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            return construct_1d_arraylike_from_scalar(value, len(index), dtype)\n        else:\n            return np.array(data).item()\n\n    # raise exception for higher dimension data since it's expected to be 1-dimensional\n    if isinstance(data, np.ndarray) and data.ndim > 1:\n        raise ValueError(\"Data must be 1-dimensional\")\n\n    # return 'data' itself if it couldn't be handled by other cases\n    return data",
            "import_list": []
        }
    ]
}