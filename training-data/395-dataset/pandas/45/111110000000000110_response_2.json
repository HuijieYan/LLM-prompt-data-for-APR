{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(data, index, dtype=None, copy=False, raise_cast_failure=False):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pd.api.types.pandas_dtype(dtype)\n\n    if isinstance(data, pd.Series):\n        if dtype is not None:\n            data = data.astype(dtype, copy=copy)\n        elif copy:\n            data = data.copy()\n        return data\n\n    elif isinstance(data, (list, tuple)):\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = pd.api.types.maybe_convert_platform(data)\n        subarr = pd.api.types.maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = pd.Series(range(data.start, data.stop, data.step), dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, (list, tuple)):\n            subarr = pd.Series(data, dtype=object)\n        elif index is not None:\n            value = data\n            if dtype is None:\n                dtype, value = pd.api.types.infer_dtype_from_scalar(value)\n            else:\n                value = pd.api.types.maybe_cast_to_datetime(value, dtype)\n            subarr = pd.api.types.construct_1d_arraylike_from_scalar(value, len(index), dtype)\n        else:\n            return subarr.item()\n\n    elif subarr.ndim == 1 and index is not None:\n        if len(subarr) != len(index) and len(subarr) == 1:\n            subarr = pd.api.types.construct_1d_arraylike_from_scalar(subarr[0], len(index), subarr.dtype)\n\n    elif subarr.ndim > 1:\n        if isinstance(data, pd.Series):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = pd.core.common.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (pd.api.types.is_extension_array_dtype(subarr.dtype) or pd.api.types.is_extension_array_dtype(dtype)):\n        if issubclass(subarr.dtype.type, str):\n            if not pd.isna(data).all():\n                data = pd.Series(data, dtype=dtype, copy=False)\n            subarr = pd.Series(data, dtype=object, copy=copy)\n\n        if pd.api.types.is_object_dtype(subarr.dtype) and not pd.api.types.is_object_dtype(dtype):\n            inferred = pd.core.common.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = pd.core.arrays.base.ExtensionArray(subarr)\n\n    return subarr",
            "import_list": [
                "import pandas as pd"
            ]
        }
    ]
}