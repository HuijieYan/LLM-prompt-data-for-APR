{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(data, index, dtype=None, copy=False, raise_cast_failure=False):\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    if isinstance(data, np.ndarray):\n        if data.ndim == 0:  # scalar-like\n            if isinstance(data, list):\n                data = np.array(data, dtype=object)\n            elif index is not None:\n                value = data\n                if dtype is None:\n                    dtype, value = infer_dtype_from_scalar(value)\n                else:\n                    value = maybe_cast_to_datetime(value, dtype)\n                data = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n            else:\n                return data.item()\n        elif data.ndim == 1:  # 1-dimensional\n            if index is not None and len(data) != len(index) and len(data) == 1:\n                data = construct_1d_arraylike_from_scalar(data[0], len(index), data.dtype)\n        elif data.ndim > 1:  # multi-dimensional\n            if isinstance(data, np.ndarray):\n                raise Exception(\"Data must be 1-dimensional\")\n            else:\n                data = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(data.dtype) or is_extension_array_dtype(dtype)):\n        if issubclass(data.dtype.type, str) and not np.all(isna(data)):  # convert data to dtype\n            data = np.array(data, dtype=dtype, copy=False)\n        if is_object_dtype(data.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(data, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                data = array(data)\n\n    return data",
            "import_list": []
        }
    ]
}