{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n    data, index=None, dtype=None, copy=False, raise_cast_failure=False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pd.api.types.pandas_dtype(dtype)\n\n    if isinstance(data, np.ma.MaskedArray):\n        mask = np.ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = np.ma.maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    data = pd.api.types.is_extension_array_dtype(data, dtype=dtype)\n\n    if isinstance(data, np.ndarray):\n        if dtype is not None and pd.api.types.is_float_dtype(data.dtype) and pd.api.types.is_integer_dtype(dtype):\n            try:\n                subarr = np.ma.maybe_convert_platform(_try_cast(data, dtype, copy, True))\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n    elif isinstance(data, pd.api.types.ABCExtensionArray):\n        subarr = data\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = np.array(data)\n        subarr = pd.api.types.maybe_cast_to_datetime(subarr, dtype)\n    elif isinstance(data, range):\n        arr = np.arange(data.start, data.stop, data.step, dtype=np.int64)\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    if hasattr(subarr, \"ndim\") and subarr.ndim == 0:\n        if index is not None:\n            value = data\n            if dtype is None:\n                dtype, value = pd.api.types.infer_dtype_from_scalar(value)\n            else:\n                value = pd.api.types.maybe_cast_to_datetime(value, dtype)\n            subarr = np.array(value, dtype=dtype, copy=False)\n        else:\n            return subarr.item()\n    elif subarr.ndim == 1:\n        if index is not None:\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = np.array(subarr[0], copy=False)\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = pd.core.common.asanyarray(data, dtype=dtype)\n    if not (pd.api.types.is_extension_array_dtype(subarr.dtype) or pd.api.types.is_extension_array_dtype(dtype)):\n        if issubclass(subarr.dtype.type, str):\n            if not np.isnan(data).all():\n                data = np.array(data, dtype=dtype, copy=False)\n            subarr = np.array(data, dtype=object, copy=copy)\n        if pd.api.types.is_object_dtype(subarr.dtype) and not pd.api.types.is_object_dtype(dtype):\n            inferred = pd.core.dtypes.cast.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = np.array(subarr)\n    return subarr",
            "import_list": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}