{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n        data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n    ):\n        \"\"\"\n        Sanitize input data to an ndarray, copy if specified, coerce to the\n        dtype if specified.\n        \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n    \n        if isinstance(data, (list, tuple)):\n            data = np.array(data)\n        elif isinstance(data, range):\n            arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n            data = np.array(arr)\n        elif isinstance(data, set):\n            data = np.array(list(data))\n\n        if dtype is not None:\n            data = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            if copy:\n                data = data.copy()\n\n        return data",
            "import_list": []
        }
    ]
}