{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        \n    data = _sanitize_data(data)\n\n    # the result that we want\n    return subarr",
            "imports": [
                "import numpy as np",
                "import pandas as pd",
                "import numpy.ma as ma",
                "from pandas.api.types import pandas_dtype",
                "from pandas.api.extensions import maybe_convert_platform",
                "from pandas.api.types import is_float_dtype, is_integer_dtype",
                "from pandas.core.dtypes.common import is_object_dtype, is_extension_array_dtype",
                "from pandas.core.arrays import ExtensionArray as ABCExtensionArray",
                "from pandas import array, isna, com, lib",
                "from pandas.core.dtypes.dtypes import infer_dtype_from_scalar",
                "from pandas.core.arrays.base import asarray_tuplesafe",
                "from pandas.core.construction import construct_1d_arraylike_from_scalar",
                "from pandas.api.types import is_object_dtype"
            ]
        }
    ]
}