{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n    data, index = None, dtype=None, copy = False, raise_cast_failure = False\n):\n    from pandas.api.types import pandas_dtype\n    import pandas as pd\n    import numpy as np\n    import numpy.ma as ma\n    import pandas.core.common as com\n    from pandas import Series, DataFrame, Panel, Index, MultiIndex\n    from numpy import nan, dtype as nptype\n    from pandas._libs import lib, algos, converters\n    import pandas.core.common as com\n    from pandas.util._validators import validate_bool_kwarg\n    from pandas.api.extensions import (ExtensionArray, ExtensionScalarOpsMixin,\n                                   ExtensionOpsMixin, last)\n    from pandas.core.dtypes.common import (\n    is_extension_array_dtype, is_period_dtype, is_scalar, is_datetimelike,\n    is_list_like, is_numeric_dtype, is_integer_dtype, is_complex_dtype,\n    is_object_dtype, is_bool_dtype, pandas_dtype)\n    from pandas.core.dtypes.dtypes import CategoricalDtype\n    from pandas.compat import lzip, lmap, asanyarray\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n    \n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = ma.maybe_upcast(data, copy = True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n    \n    data = com.maybe_promote(data, dtype)\n    \n    if np.ndim(data) == 0:\n        data = np.array([data])\n    \n    if dtype is not None and is_numeric_dtype(data.dtype):\n        if hasattr(dtype, \"tz\"):\n            dtype = dtype.tz_localize(None)\n    \n    if isinstance(data, np.ndarray) or hasattr(data, \"_data\"):\n        subarr = data\n        if dtype is not None:\n            if data.dtype.name == \"category\" and data.dtype != dtype:\n                endian = data.dtype.str[0]\n                data = asanyarray(data)\n                subarr = com._possibly_cast_to_datetime(data, dtype, copy = copy)\n                data = subarr\n            if copy:\n                subarr = data.copy()\n    \n    if isinstance(subarr, ABCExtensionArray):\n        if isinstance(data, Series) and raise_cast_failure:\n            if isinstance(data.dtype, CategoricalDtype) and data._can_hold_na:\n                data = data.copy()\n        if dtype is not None:\n            if is_period_dtype(dtype):\n                subarr = array(subarr)\n            else:\n                try:\n                    subarr = subarr.astype(dtype)\n                except Exception:\n                    msg = (\"Specified through dtype and dtype coercion failed; got \"\n                           \"the type: {actualtype}\")\n                    raise ValueError(msg.format(actualtype = data.dtype))\n    \n        if raise_cast_failure:\n            subarr = array(subarr)\n        return maybe_cast_to_datetime(subarr, dtype)\n    \n    if isinstance(data, (tuple, range, list, Series)):\n        if index is not None:\n            if dtype is not None:\n                if is_bool_dtype(dtype):\n                    if is_bool_dtype(subarr.dtype):\n                        return subarr\n                if not is_categorical_dtype(dtype) and not is_period_dtype(dtype):\n                    if isinstance(data, Series):\n                        if not isinstance(data.dtype, (CategoricalDtype, PeriodDtype)):\n                            return maybe_convert_platform(data)\n    \n    var = lib.maybe_convert_objects(data)\n    \n    if hasattr(subarr, \"str\"):\n        return com.maybe_cast_to_datetime(subarr, dtype)\n    \n    if com.is_datetimelike(subarr) and not is_list_like(subarr):\n        return com.maybe_cast_to_datetime(subarr)"
        }
    ]
}