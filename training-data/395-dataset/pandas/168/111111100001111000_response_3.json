{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if hasattr(level, '__iter__') and len(level) == 1:\n                level = level[0]\n\n            if key is None and not (isinstance(level, str)\n                                    or hasattr(level, '__array_struct__')):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if hasattr(level, '__iter__'):\n                if len(level) == 1:\n                    level = level[0]\n                elif len(level) == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            elif not -1 < level < 1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n            level = None\n            key = group_axis\n    \n    if hasattr(key, '__iter__'):\n        from warnings import warn\n        if not hasattr(key, '__hash__'):\n            warn(\"Interpreting iterable 'by' as a list of keys.\", FutureWarning, stacklevel=5)\n            key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    groupings = []\n    exclusions = []\n\n    def is_in_axis(key):\n        if hasattr(key, '__array_struct__'):\n            try:\n                obj._data.items.get_loc(key)\n            except KeyError:\n                return False\n            return True\n        return _is_label_like(key)\n\n    def is_in_obj(gpr):\n        try:\n            if id(gpr) == id(obj[gpr.name]):\n                return True\n            return False\n        except KeyError:\n            return False\n\n    for i, (gpr, level) in enumerate(zip(keys, len(keys) * [level])):\n        if is_in_obj(gpr):\n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n        elif is_in_axis(gpr):\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr)\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n            elif obj._is_level_reference(gpr):\n                in_axis, name, level, gpr = False, None, gpr, None\n            else:\n                raise KeyError(gpr)\n\n        ping = (\n            Grouping(\n                group_axis, gpr=obj[gpr] if isinstance(gpr, Grouper) and gpr.key is None else gpr,\n                obj=obj, name=name, level=level, sort=sort, observed=observed, in_axis=in_axis\n            ) if not isinstance(gpr, Grouping) else gpr\n        )\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n\n    return grouper, exclusions, obj",
            "import_list": [
                "from warnings import warn"
            ]
        }
    ]
}