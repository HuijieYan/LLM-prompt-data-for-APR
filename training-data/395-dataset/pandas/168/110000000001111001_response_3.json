{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed axis of the object\n    if level is not None and isinstance(group_axis, MultiIndex):\n        level = level[0] if is_list_like(level) and len(level) == 1 else level\n\n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n    else:\n        if is_list_like(level) and len(level) == 1:\n            level = level[0]\n        elif len(level) == 0:\n            raise ValueError(\"No group keys passed!\")\n        else:\n            raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n        if obj.index.name != level:\n            raise ValueError(\"level name {} is not the name of the index\".format(level))\n        level = None\n        key = group_axis\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return (grouper, {key.key}) if key.key is not None else (grouper, [], obj)\n\n    if isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    if isinstance(key, tuple):\n        keys = list(key)\n\n    else:\n        keys = [key]\n        match_axis_length = False\n\n    # logic to handle what to do with keys and levels\n\n    groupings = []\n    exclusions = []\n\n    # other logic related to groupings and exclusions\n\n    return BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated), exclusions, obj",
            "import_list": []
        }
    ]
}