{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, pd.MultiIndex):\n            if isinstance(level, (list, set)) and len(level) == 1:\n                level = level[0]\n                \n            if key is None and np.isscalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if isinstance(level, (list, tuple)):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            level = None\n            key = group_axis\n\n    if isinstance(key, pd.Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return (grouper, {key.key} if key.key is not None else [], obj)\n    elif isinstance(key, pd.BaseGrouper):\n        return (key, [], obj)\n    else:\n        if isinstance(key, tuple):\n            key = list(key)\n\n        if isinstance(level, (tuple, list)):\n            keys, levels = [key[0]], level[0]\n        else:\n            keys, levels = [key], [level] if level is not None else [None]\n            \n    groupings = []\n\n    def is_in_axis(key):\n        try:\n            obj._data.items.get_loc(key)\n        except Exception:\n            return False\n        return True\n\n    def is_in_obj(gpr):\n        try:\n            return id(gpr) == id(obj[gpr.name])\n        except Exception:\n            return False\n\n    exclusions = []\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n        if is_in_obj(gpr):\n            exclusions.append(gpr.name)\n        elif is_in_axis(gpr):\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr)\n                exclusions.append(gpr)\n            elif obj._is_level_reference(gpr):\n                level, gpr = None, None\n            else:\n                raise KeyError(gpr)\n\n        if pd.api.types.is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                \"Length of grouper ({len_gpr}) and axis ({len_axis}) must be same length\".format(\n                    len_gpr=len(gpr), len_axis=obj.shape[axis]\n                )\n            )\n\n        ping = pd.Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            name=gpr if gpr in exclusions else None,\n            level=level,\n            sort=bool(sort),\n            observed=observed,\n            in_axis=gpr in obj,\n        )\n        groupings.append(ping)\n\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = pd.BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "imports": []
        }
    ]
}