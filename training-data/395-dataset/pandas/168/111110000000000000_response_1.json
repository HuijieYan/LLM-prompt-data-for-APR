{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates Grouping for each k, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    \n    group_axis = obj._get_axis(axis)\n    exclusions = []\n    ping = None\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if len(level) == 1:\n                level = level[0]\n            if key is None and type(level) in (int, float):\n                key = group_axis.get_level_values(level)\n            level = None\n        else:\n            if len(level) == 1:\n                level = level[0]\n            elif len(level) == 0:\n                raise ValueError(\"No group keys passed!\")\n            else:\n                raise ValueError(\"multiple levels only valid with MultiIndex\")\n            \n            if type(level) == str and obj.index.name != level :\n                raise ValueError(\"level name \"+level+\" is not the name of the index\")\n            elif type(level) in (int, float) and not (level > 0 or level < -1):\n                raise ValueError(\"Level > 0 or level < -1 only valid with MultiIndex\")\n            \n            level = None\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            if key.key is None:\n                return grouper, [], obj\n            else:\n                return grouper, {key.key}, obj\n        \n        elif isinstance(key, BaseGrouper):\n            return key, [], obj\n        \n        elif isinstance(key, tuple):\n            key =  list(key)\n            \n        is_hashable = all([isinstance(i, hashable) for i in key]) # Prepared a check method for hashable attribute\n    \n        if (isinstance(key, list) and isinstance(level, (tuple, list))) or any([callable(x) for x in key]) or any([isinstance(x, dict) for x in key]) or any([isinstance(x, Grouper) for x in key]): \n            any_callable = any([callable(x) for x in key])\n            any_groupers = any([isinstance(x, Grouper) for x in key])\n            any_arraylike = any([type(x) in (list, tuple, Series, Index, np.ndarray) for x in key])\n            \n            if not any_callable and not any_arraylike and not any_groupers and len(key) == len(group_axis) and level is None:\n                if isinstance(obj, DataFrame):\n                    all_in_columns_index = all([g in obj.columns or g in obj.index.names for g in key])\n                elif isinstance(obj, Series):\n                    all_in_columns_index = all([g in obj.index.names for g in key])\n                    \n                if not all_in_columns_index:\n                    key = [com.asarray_tuplesafe(key)]\n        else:\n            keys = [key]\n            if type(key) != list:\n                key = keys\n                \n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [None] * len(level)\n            levels = level\n        else:\n            levels = [level] * len(keys)\n        \n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n            if not _is_label_like(gpr):\n                try:\n                    obj._data.items.get_loc(gpr)\n                except Exception:\n                    gpr_key = None\n            else :\n                in_axis, gpr_key = True, gpr\n                \n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}