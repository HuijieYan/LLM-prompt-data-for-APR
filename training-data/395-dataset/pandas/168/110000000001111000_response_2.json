{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n    \"\"\"\n    group_axis = obj.index if axis == 0 else obj.columns\n\n    if level is not None:\n        if axis == 0:\n            if key is None and isinstance(level, str):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if isinstance(level, int):\n                key = level\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    else:\n        if isinstance(key, tuple):\n            key = list(key)\n\n        if not isinstance(key, list):\n            keys = [key]\n            match_axis_length = False\n        else:\n            keys = key\n            match_axis_length = len(keys) == len(group_axis)\n\n        any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n        any_groupers = any(isinstance(g, Grouper) for g in keys)\n        any_arraylike = any(isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys)\n\n        if not any_callable and not any_arraylike and not any_groupers and match_axis_length and level is None:\n            if isinstance(obj, DataFrame):\n                all_in_columns_index = all(\n                    g in obj.columns or g in obj.index.names for g in keys\n                )\n            elif isinstance(obj, Series):\n                all_in_columns_index = all(g in obj.index.names for g in keys)\n\n            if not all_in_columns_index:\n                keys = [com.asarray_tuplesafe(keys)]\n\n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [None] * len(level)\n            levels = level\n        else:\n            levels = [level] * len(keys)\n\n        groupings = []\n        exclusions = []\n\n        def is_in_axis(key):\n            if not _is_label_like(key):\n                try:\n                    obj._data.items.get_loc(key)\n                except Exception:\n                    return False\n\n            return True\n\n        def is_in_obj(gpr):\n            try:\n                return id(gpr) == id(obj[gpr.name])\n            except Exception:\n                return False\n\n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n            if is_in_obj(gpr):\n                in_axis, name = True, gpr.name\n                exclusions.append(name)\n            elif is_in_axis(gpr):\n                if gpr in obj:\n                    if validate:\n                        obj._check_label_or_level_ambiguity(gpr)\n                    in_axis, name, gpr = True, gpr, obj[gpr]\n                    exclusions.append(name)\n                elif obj._is_level_reference(gpr):\n                    in_axis, name, level, gpr = False, None, gpr, None\n                else:\n                    raise KeyError(gpr)\n\n            if (\n                isinstance(gpr, pd.Categorical)\n                and len(gpr) != obj.shape[axis]\n            ):\n                raise ValueError(\"Length of grouper ({len_gpr}) and axis ({len_axis}) must be same length\".format(\n                    len_gpr=len(gpr), len_axis=obj.shape[axis]\n                ))\n\n            ping = Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n            groupings.append(ping)\n\n        if len(groupings) == 0 and len(obj):\n            raise ValueError(\"No group keys passed!\")\n        elif len(groupings) == 0:\n            groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n        grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n        return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}