{
    "pandas": [
        {
            "bugID": 163,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 226,
            "file_name": "pandas/core/window.py",
            "replace_code": "def _prep_values(self, values: Optional[np.ndarray] = None) -> np.ndarray:\n    import numpy as np\n    from typing import Optional\n    \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n    if values is None:\n        values = getattr(self._selected_obj, \"values\", self._selected_obj)\n    \n    # GH #12373 : rolling functions error on float32 data\n    # make sure the data is coerced to float64\n    if values.dtype.kind in ['i', 'f'] and values.dtype != np.float64:\n        values = values.astype(np.float64)\n    \n    # Always convert inf to nan\n    values = np.where(np.isinf(values), np.nan, values)\n    \n    return values"
        }
    ]
}