{
    "pandas": [
        {
            "bugID": 149,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 142,
            "file_name": "pandas/io/parquet.py",
            "replace_code": "def write(self, df, path, compression=\"snappy\", index=None, partition_cols=None, **kwargs):\n\n    self.validate_dataframe(df)\n    \n    if \"partition_on\" in kwargs and partition_cols is not None:\n        raise ValueError(\n            \"Cannot use both partition_on and \"\n            \"partition_cols. Use partition_cols for \"\n            \"partitioning data\"\n        )\n    elif \"partition_on\" in kwargs:\n        partition_cols = kwargs.pop(\"partition_on\")\n    \n    if partition_cols is not None:\n        kwargs[\"file_scheme\"] = \"hive\"\n    \n    if is_s3_url(path):\n        with open(path, mode=\"wb\") as f:\n            # path is s3:// so we need to open the s3file in 'wb' mode.\n            # TODO: Support 'ab'\n            # And pass the opened s3file to the fastparquet internal impl.\n            kwargs[\"open_with\"] = lambda path, _: f\n    else:\n        with open(path, mode=\"wb\") as f:\n            # path is not s3:// so we need to open the file in 'wb' mode.\n            # And pass the opened file to the fastparquet internal impl.\n            kwargs[\"open_with\"] = lambda path, _: f\n    \n    with catch_warnings(record=True):\n        self.api.write(\n            path, df, compression=compression, write_index=index, partition_on=partition_cols, **kwargs\n        )"
        }
    ]
}