{
    "1.1.1": "def _join_multi(self, other, how, return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n\n    # figure out join names\n    self_names = set(com.not_none(*self.names))\n    other_names = set(com.not_none(*other.names))\n    overlap = self_names & other_names\n\n    # need at least 1 in common\n    if not overlap:\n        raise ValueError(\"cannot join with no overlapping index names\")\n\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n\n    if self_is_mi and other_is_mi:\n\n        # Drop the non-matching levels from left and right respectively\n        ldrop_names = list(self_names - overlap)\n        rdrop_names = list(other_names - overlap)\n\n        # if only the order differs\n        if not len(ldrop_names + rdrop_names):\n            self_jnlevels = self\n            other_jnlevels = other.reorder_levels(self.names)\n        else:\n            self_jnlevels = self.droplevel(ldrop_names)\n            other_jnlevels = other.droplevel(rdrop_names)\n\n        # Join left and right\n        # Join on same leveled multi-index frames is supported\n        join_idx, lidx, ridx = self_jnlevels.join(\n            other_jnlevels, how, return_indexers=True\n        )\n\n        # Restore the dropped levels\n        # Returned index level order is\n        # common levels, ldrop_names, rdrop_names\n        dropped_names = ldrop_names + rdrop_names\n\n        levels, codes, names = _restore_dropped_levels_multijoin(\n            self, other, dropped_names, join_idx, lidx, ridx\n        )\n\n        # Re-create the multi-index\n        multi_join_idx = MultiIndex(\n            levels=levels, codes=codes, names=names, verify_integrity=False\n        )\n\n        multi_join_idx = multi_join_idx.remove_unused_levels()\n\n        return multi_join_idx, lidx, ridx\n\n    jl = list(overlap)[0]\n\n    # Case where only one index is multi\n    # make the indices into mi's that match\n    flip_order = False\n    if self_is_mi:\n        self, other = other, self\n        flip_order = True\n        # flip if join method is right or left\n        how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n    level = other.names.index(jl)\n    result = self._join_level(\n        other, level, how=how, return_indexers=return_indexers\n    )\n\n    if flip_order:\n        if isinstance(result, tuple):\n            return result[0], result[2], result[1]\n    return result\n",
    "1.1.2": null,
    "1.2.1": "class Index(IndexOpsMixin, PandasObject)",
    "1.2.2": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: object)\n    If dtype is None, we find the dtype that best fits the data.\n    If an actual dtype is provided, we coerce to that dtype if it's safe.\n    Otherwise, an error will be raised.\ncopy : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex : Index of datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nPeriodIndex : Index of Period data.\nInt64Index : A special case of :class:`Index` with purely integer labels.\nUInt64Index : A special case of :class:`Index` with purely unsigned integer labels.\nFloat64Index : A special case of :class:`Index` with purely float labels.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nInt64Index([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')",
    "1.2.3": [
        "droplevel(self, level=0)",
        "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/indexes/base.py",
    "1.3.2": [
        "droplevel(self, level=0)",
        "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)"
    ],
    "1.4.1": [
        "def test_join_multi_return_indexers():\n    # GH 34074\n\n    midx1 = pd.MultiIndex.from_product([[1, 2], [3, 4], [5, 6]], names=[\"a\", \"b\", \"c\"])\n    midx2 = pd.MultiIndex.from_product([[1, 2], [3, 4]], names=[\"a\", \"b\"])\n\n    result = midx1.join(midx2, return_indexers=False)\n    tm.assert_index_equal(result, midx1)"
    ],
    "1.4.2": [
        "pandas/tests/indexes/multi/test_join.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'tuple'> instead"
        ]
    ],
    "2.1.2": [
        [
            "def test_join_multi_return_indexers():\n        # GH 34074\n    \n        midx1 = pd.MultiIndex.from_product([[1, 2], [3, 4], [5, 6]], names=[\"a\", \"b\", \"c\"])\n        midx2 = pd.MultiIndex.from_product([[1, 2], [3, 4]], names=[\"a\", \"b\"])\n    \n        result = midx1.join(midx2, return_indexers=False)\n>       tm.assert_index_equal(result, midx1)\n\npandas/tests/indexes/multi/test_join.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = (MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n  ...       (2, 4, 6)],\n           names=['a', 'b', 'c']), array([0, 1, 2, 3, 4, 5, 6, 7]), array([0, 0, 1, 1, 2, 2, 3, 3]))\nright = MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])\ncls = <class 'pandas.core.indexes.base.Index'>\n\n    def _check_isinstance(left, right, cls):\n        \"\"\"\n        Helper method for our assert_* methods that ensures that\n        the two objects being compared have the right type before\n        proceeding with the comparison.\n    \n        Parameters\n        ----------\n        left : The first object being compared.\n        right : The second object being compared.\n        cls : The class type to check against.\n    \n        Raises\n        ------\n        AssertionError : Either `left` or `right` is not an instance of `cls`.\n        \"\"\"\n        cls_name = cls.__name__\n    \n        if not isinstance(left, cls):\n>           raise AssertionError(\n                f\"{cls_name} Expected type {cls}, found {type(left)} instead\"\n            )",
            "\npandas/_testing.py:410: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.names": {
                    "value": "FrozenList(['a', 'b', 'c'])",
                    "shape": "3",
                    "omitted": false
                },
                "self": {
                    "value": "MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "other.names": {
                    "value": "FrozenList(['a', 'b'])",
                    "shape": "2",
                    "omitted": false
                },
                "other": {
                    "value": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "how": {
                    "value": "'left'",
                    "shape": "4",
                    "omitted": false
                },
                "return_indexers": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "self_names": {
                    "value": "{'a', 'b', 'c'}",
                    "shape": "3",
                    "omitted": false
                },
                "other_names": {
                    "value": "{'a', 'b'}",
                    "shape": "2",
                    "omitted": false
                },
                "overlap": {
                    "value": "{'a', 'b'}",
                    "shape": "2",
                    "omitted": false
                },
                "self_is_mi": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "other_is_mi": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "ldrop_names": {
                    "value": "['c']",
                    "shape": "1",
                    "omitted": false
                },
                "rdrop_names": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "self_jnlevels": {
                    "value": "MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "other_jnlevels": {
                    "value": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "join_idx": {
                    "value": "MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "lidx": {
                    "value": "array([0, 1, 2, 3, 4, 5, 6, 7])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "ridx": {
                    "value": "array([0, 0, 1, 1, 2, 2, 3, 3])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "dropped_names": {
                    "value": "['c']",
                    "shape": "1",
                    "omitted": false
                },
                "levels": {
                    "value": "FrozenList([[1, 2], [3, 4], [5, 6]])",
                    "shape": "3",
                    "omitted": false
                },
                "codes": {
                    "value": "FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])",
                    "shape": "3",
                    "omitted": false
                },
                "names": {
                    "value": "FrozenList(['a', 'b', 'c'])",
                    "shape": "3",
                    "omitted": false
                },
                "multi_join_idx": {
                    "value": "MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])",
                    "shape": "(8,)",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self.names": "FrozenList",
                "self": "MultiIndex",
                "other.names": "FrozenList",
                "other": "MultiIndex",
                "how": "str",
                "return_indexers": "bool"
            },
            {
                "self_names": "set",
                "other_names": "set",
                "overlap": "set",
                "self_is_mi": "bool",
                "other_is_mi": "bool",
                "ldrop_names": "list",
                "rdrop_names": "list",
                "self_jnlevels": "MultiIndex",
                "other_jnlevels": "MultiIndex",
                "join_idx": "MultiIndex",
                "lidx": "ndarray",
                "ridx": "ndarray",
                "dropped_names": "list",
                "levels": "FrozenList",
                "codes": "FrozenList",
                "names": "FrozenList",
                "multi_join_idx": "MultiIndex"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self.names": {
                    "value": "FrozenList(['a', 'b', 'c'])",
                    "shape": "3",
                    "omitted": false
                },
                "self": {
                    "value": "MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "other.names": {
                    "value": "FrozenList(['a', 'b'])",
                    "shape": "2",
                    "omitted": false
                },
                "other": {
                    "value": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "how": {
                    "value": "'left'",
                    "shape": "4",
                    "omitted": false
                },
                "return_indexers": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "self_names": {
                    "value": "{'a', 'b', 'c'}",
                    "shape": "3",
                    "omitted": false
                },
                "other_names": {
                    "value": "{'a', 'b'}",
                    "shape": "2",
                    "omitted": false
                },
                "overlap": {
                    "value": "{'a', 'b'}",
                    "shape": "2",
                    "omitted": false
                },
                "self_is_mi": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "other_is_mi": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "ldrop_names": {
                    "value": "['c']",
                    "shape": "1",
                    "omitted": false
                },
                "rdrop_names": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "self_jnlevels": {
                    "value": "MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "other_jnlevels": {
                    "value": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])",
                    "shape": "(4,)",
                    "omitted": false
                },
                "join_idx": {
                    "value": "MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "lidx": {
                    "value": "array([0, 1, 2, 3, 4, 5, 6, 7])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "ridx": {
                    "value": "array([0, 0, 1, 1, 2, 2, 3, 3])",
                    "shape": "(8,)",
                    "omitted": false
                },
                "dropped_names": {
                    "value": "['c']",
                    "shape": "1",
                    "omitted": false
                },
                "levels": {
                    "value": "FrozenList([[1, 2], [3, 4], [5, 6]])",
                    "shape": "3",
                    "omitted": false
                },
                "codes": {
                    "value": "FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])",
                    "shape": "3",
                    "omitted": false
                },
                "names": {
                    "value": "FrozenList(['a', 'b', 'c'])",
                    "shape": "3",
                    "omitted": false
                },
                "multi_join_idx": {
                    "value": "MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])",
                    "shape": "(8,)",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.names": "FrozenList",
                "self": "MultiIndex",
                "other.names": "FrozenList",
                "other": "MultiIndex",
                "how": "str",
                "return_indexers": "bool"
            },
            {
                "self_names": "set",
                "other_names": "set",
                "overlap": "set",
                "self_is_mi": "bool",
                "other_is_mi": "bool",
                "ldrop_names": "list",
                "rdrop_names": "list",
                "self_jnlevels": "MultiIndex",
                "other_jnlevels": "MultiIndex",
                "join_idx": "MultiIndex",
                "lidx": "ndarray",
                "ridx": "ndarray",
                "dropped_names": "list",
                "levels": "FrozenList",
                "codes": "FrozenList",
                "names": "FrozenList",
                "multi_join_idx": "MultiIndex"
            }
        ]
    ],
    "3.1.1": [
        "BUG: Multijoining indexes always returns indexers, ignores function parameters\n"
    ],
    "3.1.2": [
        " I have checked that this issue has not already been reported.\n\n I have confirmed this bug exists on the latest version of pandas.\n\n (optional) I have confirmed this bug exists on the master branch of pandas.\n\nCode Sample\n>>>frame = pd.DataFrame([(1,2,3,4),(4,5,6,7)],columns=[\"i1\", \"i2\", \"i3\",\"val\"]).set_index([\"i1\",\"i2\",\"i3\"])\n>>>frame2 = pd.DataFrame([(1,2,3),(4,5,6)],columns=[\"i1\", \"i2\", \"val\"]).set_index([\"i1\",\"i2\"])\n>>>frame.index.join(frame2.index,return_indexers=False)\n(MultiIndex([(1, 2, 3),\n            (4, 5, 6)],\n           names=['i1', 'i2', 'i3']), None, None)\nProblem description\nParameter return_indexers is ignored in some cases of __join_multi\n\nExpected Output\n>>>frame.index.join(frame2.index,return_indexers=False)\nMultiIndex([(1, 2, 3),\n            (4, 5, 6)],\n           names=['i1', 'i2', 'i3'])\n"
    ]
}