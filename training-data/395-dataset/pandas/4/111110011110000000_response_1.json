{
    "pandas": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 3479,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def _join_multi(self, other, how='left', return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    from pandas.core.arrays.categorical import maybe_cast_to_period\n    \n    # figure out join names\n    self_names, other_names = frozenset(self.names), frozenset(other.names)\n    overlap = self_names.intersection(other_names)\n    \n    # need at least 1 in common\n    if not overlap:\n        raise ValueError(\"cannot join with no overlapping index names\")\n    \n    self_is_mi, other_is_mi = isinstance(self, MultiIndex), isinstance(other, MultiIndex)\n    \n    # we only support multi MultiIndex for some types of joint\n    if self_is_mi and other_is_mi:\n        levels, lidx, ridx = self._inner_indexer_multi(other)\n        join_index = MultiIndex(levels=levels, codes=[lidx, ridx], names=self.names)\n    else:\n        join_index, lidx, ridx = self._inner_indexer_standard(other)\n    \n    return join_index, lidx, ridx",
            "imports": [
                "from pandas.core.indexes.multi import MultiIndex",
                "from pandas.core.reshape.merge import _restore_dropped_levels_multijoin",
                "from pandas.core.arrays.categorical import maybe_cast_to_period"
            ]
        }
    ]
}