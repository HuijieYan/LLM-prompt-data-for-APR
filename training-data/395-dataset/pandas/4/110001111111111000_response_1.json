{
    "pandas": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 3479,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def _join_multi(self, other, how, return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    from pandas.core.indexes.api import _ensure_index\n\n    self, other = _ensure_index(self), _ensure_index(other)\n\n    self_is_mi = isinstance(self, MultiIndex)\n    other_is_mi = isinstance(other, MultiIndex)\n\n    if not (self_is_mi and other_is_mi):\n        return self._join_level(other=other, level=0, how=how)\n\n    # Perform the set operation on level names\n    self_level_names = set(self.names)\n    other_level_names = set(other.names)\n    overlap = self_level_names & other_level_names\n\n    # need at least 1 in common\n    if not overlap:\n        raise ValueError(\"cannot join with no overlapping index names\")\n\n    # Drop the non-matching levels from left and right respectively\n    ldrop_names = list(self_level_names - overlap)\n    rdrop_names = list(other_level_names - overlap)\n\n    self_jnlevels = self.droplevel(ldrop_names)\n    other_jnlevels = other.droplevel(rdrop_names)\n\n    # Join the multiindex by common level values\n    join_idx, lidx, ridx = self_jnlevels.join(other_jnlevels, how, return_indexers=True)\n\n    # Restore the dropped levels\n    dropped_names = ldrop_names + rdrop_names\n    levels, codes, new_names = _restore_dropped_levels_multijoin(self, other, dropped_names, join_idx, lidx, ridx)\n    multi_index = MultiIndex(levels=levels, codes=codes, names=new_names)\n\n    return (multi_index, lidx, ridx)",
            "imports": [
                "from pandas.core.indexes.multi import MultiIndex",
                "from pandas.core.reshape.merge import _restore_dropped_levels_multijoin",
                "from pandas.core.indexes.api import _ensure_index"
            ]
        }
    ]
}