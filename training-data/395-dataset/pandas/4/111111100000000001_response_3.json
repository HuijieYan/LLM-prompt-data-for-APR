{
    "pandas": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 3479,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def _join_multi(self, other, how, return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _remove_the_level_by_name\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _remove_the_level_by_name\n    \n    # figure out join names\n    self_names = set(self.names)\n    other_names = set(other.names)\n    overlap = self_names & other_names\n    \n    # need at least 1 in common\n    if not overlap:\n        raise ValueError(\"cannot join with no overlapping index names\")\n    \n    self_is_mi = isinstance(self, MultiIndex)\n    other_is_mi = isinstance(other, MultiIndex)\n    \n    if self_is_mi and other_is_mi:\n        left_result = _remove_the_level_by_name(self, list(self_names - overlap))\n        right_result = _remove_the_level_by_name(other, list(other_names - overlap))\n    \n        join_idx, lidx, ridx = left_result.join(right_result, how=how, return_indexers=return_indexers)\n    \n        # Re-create the multi-index\n        multi_join_idx = join_idx\n        return multi_join_idx, lidx, ridx\n    \n    jl = list(overlap)[0]\n    \n    level = other.names.index(jl)\n    result = self._join_level(other, level, how=how, return_indexers=return_indexers)\n    \n    return result"
        }
    ]
}