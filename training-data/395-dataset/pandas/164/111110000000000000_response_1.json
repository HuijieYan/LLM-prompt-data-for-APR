{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box=False,\n    format=None,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=False,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n\n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    from pandas import DatetimeIndex, Index\n    from pandas import tslib\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        array_with_unit_to_datetime,\n    )\n    from pandas.core.arrays.datetimes import NaT, OutOfBoundsDatetime, objects_to_datetime64ns, require_iso8601, _format_is_iso, array_strptime\n\n    import numpy as np\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if isinstance(arg,(DatetimeArray,DatetimeIndex)):\n        box = False\n        if tz == \"utc\":\n            arg = arg.tz_convert(tz)\n        return arg\n\n    elif not box and isinstance(arg, DatetimeArray):\n        return arg\n    elif isinstance(arg, DatetimeIndex) and tz == \"utc\":\n        arg = arg.tz_convert('utc')\n\n    elif unit and not format:\n        if isinstance(arg,np.ndarray):\n            arg = arg.values\n        arg, tz_parsed = array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                return Index(arg, name=name)\n            result = DatetimeIndex(arg, name=name)\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed) if tz else result.tz_localize(tz)\n        return result\n\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise ValueError('arg must be a string, datetime, list, tuple, 1-d array, or Series')\n\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n\n    arg = require_iso8601(arg, True)\n\n    if infer_datetime_format and not format:\n        format = _guess_datetime_format_for_array(arg, dayfirst)\n\n    if format:\n        format_is_iso = _format_is_iso(format)\n        if format_is_iso and not infer_datetime_format:\n            require_iso8601 = False\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format:\n        if format == '%Y%m%d':\n            orig_arg = require_iso8601(orig_arg)\n            result = _attempt_YYYYMMDD(orig_arg, errors)\n        else:\n            result, timezones = array_strptime(arg, format, exact=exact, errors=errors)\n            if \"%Z\" in format or \"%z\" in format:\n                return _return_parsed_timezone_results(result, timezones, box, tz, name)\n\n    if result is None or not format:\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(arg, dayfirst,yearfirst,utc,errors,require_iso8601,True)\n    \n    if tz_parsed:\n        if box:\n            result = DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n        else:\n            result = np.array([Timestamp(ts, tz=tz_parsed).to_pydatetime() for ts in result], dtype=object) if not box else _box_as_indexlike(result, tz = tz, name = name)\n    return result",
            "import_list": [
                "from pandas import DatetimeIndex, Index",
                "from pandas import tslib",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        array_with_unit_to_datetime,\n    )",
                "from pandas.core.arrays.datetimes import NaT, OutOfBoundsDatetime, objects_to_datetime64ns, require_iso8601, _format_is_iso, array_strptime",
                "import numpy as np"
            ]
        }
    ]
}