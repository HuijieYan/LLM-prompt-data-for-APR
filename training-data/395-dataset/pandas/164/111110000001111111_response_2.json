{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format=None,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=False,\n    dayfirst=False,\n    yearfirst=False,\n    exact=True\n):\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if isinstance(arg, DatetimeIndex):\n        return arg.tz_convert(tz).tz_localize(tz) if tz == \"utc\" else arg.tz_convert(None).tz_localize(tz)\n\n    elif isinstance(arg, np.ndarray) and np.issubdtype(arg.dtype, np.datetime64):\n        if box:\n            return DatetimeIndex(arg, tz=tz, name=name)\n        else:\n            return arg\n\n    elif unit is not None:\n        arg = np.asarray(arg)\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n\n        result, _ = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                from pandas import Index\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n\n            if tz is not None:\n                result = (result.tz_localize(\"UTC\").tz_convert(tz) if tz == \"utc\" else result)\n                \n        return result\n\n    elif len(arg.shape) > 1:\n        raise TypeError(\"arg must be a string, datetime, list, tuple, 1-d array, or Series\")\n\n    else:\n        return arg",
            "imports": [
                "import numpy as np",
                "from pandas import DatetimeIndex",
                "from pandas import Index"
            ]
        }
    ]
}