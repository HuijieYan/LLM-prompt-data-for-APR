{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    import numpy as np\n    from pandas import Index, DatetimeIndex, Timestamp, tslib\n    from pandas.core.dtypes.common import ensure_object\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns, array_strptime\n    from pandas.core.algorithms import unique\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n    \n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n    \n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n    \n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    import numpy as np\n    from pandas import Index, DatetimeIndex, Timestamp, tslib\n    from pandas.core.dtypes.common import ensure_object\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns, array_strptime\n    from pandas.core.algorithms import unique\n    orig_arg = arg\n    dtype = getattr(arg, \"dtype\", None)\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n    \n    taken = getattr(arg, \"ndim\", 1) > 1\n    if taken and format is not None:\n        raise ValueError(\"cannot specify both `format` and `unit`\")\n    if is_datetime64tz_dtype(arg):\n        if tz is not None and tz != \"utc\":\n            raise ValueError(\n                \"Cannot specify tz for timezone-naive values with \" \"unit specification\"\n            )\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex, np.ndarray)):\n            arg = np.array(arg, dtype=\"M8[ns]\")\n            tz_parsed = _flatten_as_maybe_datetime(arg)\n            arg = DatetimeIndex._simple_new(arg, name=name, tz=tz_parsed)\n        elif tz is not None:\n            tz_parsed = None\n            if tz == \"utc\":\n                arg = arg.tz_localize(\"UTC\")\n        return arg\n    \n    if not taken:\n        arg, other_tz = tslib.array_to_datetime(\n            arg, errors=errors, dayfirst=dayfirst, yearfirst=yearfirst\n        )\n        tz_parsed = _guess_infer_tz(arg, other_tz, tz)\n        other_tz, tz_parsed = tz_parsed\n        if other_tz is not None:\n            # Note that asarray(_raise_tz_parsed(2, 3)) will raise exception\n            arg = other_tz._simple_new(arg, name=name, tz=tz_parsed)\n            return arg\n    \n    dtype = getattr(arg, \"dtype\", None)\n    if unit is not None:\n        if format is None:\n            format = _frequency.get(unit)\n            if format is None:\n                format = units.get(unit)\n        if format is None:\n            raise ValueError(\"Cannot infer from frequency string range\")\n        arg, _ = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if dayfirst and format is not None:\n            require_iso8601 = _format_is_iso(format)\n            if require_iso8601:\n                format = None\n        else:\n            require_iso8601 = False\n        format = get_loc_format(format)\n        if format is not None:\n            if format == \"h\":\n                result, timezones = objects_to_numpy(arg, format, errors=errors)\n            else:\n                try:\n                    result, timezones = array_strptime(\n                        arg, format, exact=exact, errors=errors\n                    )\n                except tslibs.OutOfBoundsDatetime:\n                    if errors != \"raise\":\n                        result = arg\n                        require_iso8601 = True\n                    else:\n                        raise\n    else:\n        if infer_datetime_format:\n            raise ValueError(\n                \"Cannot specify `tz` and infer_datetime_format=True at the same time\"\n            )\n        if format is not None:\n            if not require_iso8601:\n                if format == \"%Y%m%d\":\n                    result = _attempt_YYYYMMDD(arg, errors=errors)\n                else:\n                    result, timezones = array_strptime(arg, format, errors=errors)\n                    exact_match = True\n                    for fmt2, _ in assert_setup_format(format)[0]:\n                        if len(fmt2) > 3:\n                            break\n                    format = get_loc_format(fmt2)\n    \n    if tz is not None:\n        tz_parsed = maybe_get_tz_parsed(result)\n        if box:\n            result = _box_as_indexlike(result, tz_parsed, tz, utc, name)\n        else:\n            result = _convert_and_box(result, tz_parsed, tz, utc, name)\n    elif format is not None and not taken:\n        tz_parsed = maybe_get_tz_parsed(result)\n        result = DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n    \n    return result"
        }
    ]
}