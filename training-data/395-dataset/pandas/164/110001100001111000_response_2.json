{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    from pandas import DatetimeIndex, Index\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import array_with_unit_to_datetime, tslib\n    import numpy as np\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if hasattr(arg, \"tz_localize\"):\n        if tz == \"utc\":\n            arg = arg.tz_localize(None).tz_localize(tz) # changed from tz_convert to tz_localize\n        return DatetimeIndex(arg, tz=tz, name=name)\n\n    elif hasattr(arg, \"tz_convert\"):\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz) # changed from tz_convert to tz_localize\n        return arg\n\n    elif isinstance(arg, DatetimeIndex) or isinstance(arg, DatetimeArray):\n        if tz is not None and tz == \"utc\":\n            arg = arg.tz_convert(\"UTC\")\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed).tz_localize(tz)\n        return result\n\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )",
            "import_list": [
                "from pandas import DatetimeIndex, Index",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import array_with_unit_to_datetime, tslib",
                "import numpy as np"
            ]
        }
    ]
}