{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n\n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n\n        return arg\n\n    elif unit is not None:\n        arg = arg.values if hasattr(arg, \"values\") else arg\n        result, tz_parsed = conversion.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n            if tz is not None:\n                if result.tz is None:\n                    result = result.tz_localize(tz)\n                else:\n                    result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n    arg = conversion.ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        try:\n            if format == \"%Y%m%d\":\n                orig_arg = conversion.ensure_object(orig_arg)\n                result = conversion._attempt_YYYYMMDD(np.array(orig_arg, dtype='O'), errors=errors)\n            if result is None:\n                result, timezones = conversion.array_strptime(\n                    arg, format, exact=exact, errors=errors\n                )\n                if \"%Z\" in format or \"%z\" in format:\n                    return _return_parsed_timezone_results(\n                        result, timezones, box, tz, name\n                    )\n        except libts.OutOfBoundsDatetime:\n            if errors == \"raise\":\n                raise\n            elif errors == \"coerce\":\n                result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                iresult = result.view(\"i8\")\n                iresult.fill(libts.iNaT)\n            else:\n                result = arg\n        except ValueError:\n            if not infer_datetime_format:\n                if errors == \"raise\":\n                    raise\n                elif errors == \"coerce\":\n                    result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                    iresult = result.view(\"i8\")\n                    iresult.fill(libts.iNaT)\n                else:\n                    result = arg\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n    if tz_parsed is not None:\n        if box:\n            return DatetimeIndex(result, name=name, tz=tz_parsed)\n        else:\n            result = [Timestamp(ts, tz=tz_parsed).to_pydatetime() for ts in result]\n            return np.array(result, dtype=object)\n    if box:\n        utc = tz == \"utc\"\n        return _box_as_indexlike(result, utc=utc, name=name)\n    return result",
            "import_list": [
                "import numpy as np",
                "from pandas import DatetimeIndex, Index, Timestamp",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import (\n    maybe_convert_dtype,\n    objects_to_datetime64ns,\n    timedelta_range\n)",
                "from pandas.core.dtypes.common import is_datetime64_ns_dtype, is_datetime64tz_dtype",
                "from pandas.tseries import frequencies",
                "from pandas.tseries import offset",
                "import pandas._libs.tslibs.timedeltas as libts",
                "import pandas._libs.tslibs.conversion as conversion"
            ]
        }
    ]
}