{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    from pandas import DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n  \n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            result = DatetimeIndex(arg, tz=tz, name=name)\n            if tz == \"utc\":\n                result = result.tz_convert(None).tz_localize(tz)\n            return result\n    \n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                result = DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n            return result\n    \n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                from pandas import Index\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed) if tz_parsed else result\n            result = result.tz_localize(tz) if tz and result.tz is None else result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n  \n    arg = ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        if format == \"%Y%m%d\":\n            try:\n                orig_arg = ensure_object(orig_arg)\n                result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n            except (ValueError, TypeError, tslibs.OutOfBoundsDatetime):\n                raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n    \n        if result is None:\n            try:\n                result, timezones = array_strptime(arg, format, exact=exact, errors=errors)\n                if \"%Z\" in format or \"%z\" in format:\n                    return _return_parsed_timezone_results(result, timezones, box, tz, name)\n            except tslibs.OutOfBoundsDatetime:\n                if errors == \"raise\":\n                    raise\n                elif errors == \"coerce\":\n                    result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                    iresult = result.view(\"i8\")\n                    iresult.fill(tslibs.iNaT)\n                else:\n                    result = arg\n        if result is None:\n            assert format is None or infer_datetime_format\n            utc = tz == \"utc\"\n            result, tz_parsed = objects_to_datetime64ns(\n                arg,\n                dayfirst=dayfirst,\n                yearfirst=yearfirst,\n                utc=utc,\n                errors=errors,\n                require_iso8601=require_iso8601,\n                allow_object=True,\n            )\n      \n        if tz_parsed is not None:\n            if box:\n                result = DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n            else:\n                result = [Timestamp(ts, tz = tz_parsed).to_pydatetime() for ts in result]\n                return np.array(result, dtype=object)\n\n        if box:\n            utc = tz == \"utc\"\n            return _box_as_indexlike(result, utc=utc, name=name)\n        return result",
            "import_list": [
                "from pandas import DatetimeIndex",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )",
                "from pandas import Index"
            ]
        }
    ]
}