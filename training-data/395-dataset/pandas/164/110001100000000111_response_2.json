{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if box and not (isinstance(arg, DatetimeArray) or isinstance(arg, DatetimeIndex)):\n        if is_datetime64tz_dtype(arg):\n            index = DatetimeIndex(arg, tz=tz, name=name)\n            if tz == \"utc\":\n                index = index.tz_convert(None).tz_localize(tz)\n            return index\n\n        if is_datetime64_ns_dtype(arg):\n            if box:\n                try:\n                    index = DatetimeIndex(arg, tz=tz, name=name)\n                    return index\n                except ValueError:\n                    pass\n            return arg\n\n    if unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        \n        values = getattr(arg, \"values\", arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(values, unit, errors=errors)\n        \n        if box:\n            if errors == \"ignore\":\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n                \n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n            \n            if tz is not None:\n                if result.tz is None:\n                    result = result.tz_localize(tz)\n                else:\n                    result = result.tz_convert(tz)\n            return result\n\n    if getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # Handle datetime formats\n    # ...\n\n    return result",
            "imports": [
                "from pandas import DatetimeIndex, Timestamp, Index",
                "import numpy as np",
                "from pandas.core.arrays import DatetimeArray"
            ]
        }
    ]
}