{
    "pandas": [
        {
            "bugID": 164,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 265,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format=None,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=False,\n    dayfirst=False,\n    yearfirst=False,\n    exact=False,\n):\n    from pandas import DatetimeIndex\n    from pandas._libs.tslibs import tslib\n    from pandas.core.array_algos import array_strptime\n    import numpy as np\n    from pandas import Index\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike of dates\n    \n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n    date to be parsed\n    box : boolean\n    True boxes result as an Index-like, False returns an ndarray\n    name : object\n    None or string for the Index name\n    tz : object\n    None or 'utc'\n    unit : string\n    None or string of the frequency of the passed data\n    errors : string\n    error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n    inferring format behavior from to_datetime\n    dayfirst : boolean\n    dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n    yearfirst parsing behavior from to_datetime\n    exact : boolean\n    exact format matching behavior from to_datetime\n    \n    Returns\n    -------\n    ndarray of parsed dates\n    Returns:\n    - Index-like if box=True\n    - ndarray of Timestamps if box=False\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas._libs.tslibs import tslib\n    from pandas.core.array_algos import array_strptime\n    import numpy as np\n    \n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n    \n    objects_to_datetime64ns = tslib.objects_to_datetime64ns\n    maybe_convert_dtype = tslib.maybe_convert_dtype\n    validation.convert_listlike = validation._convert_listlike\n    \n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n    \n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        return arg\n    \n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                from pandas import Index\n    \n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            # GH 23758: We may still need to localize the result with tz\n            # GH 25546: Apply tz_parsed first (from arg), then tz (from caller)\n            # result will be naive but in UTC\n            try:\n                result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n            except AttributeError:\n                # Regular Index from 'ignore' path\n                return result\n            if tz is not None:\n                if result.tz is None:\n                    result = result.tz_localize(tz)\n                else:\n                    result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\"arg must be a string, datetime, list, tuple, 1-d array, or Series\")\n    \n    assert format is None or infer_datetime_format\n    utc = tz == \"utc\"\n    result, tz_parsed, format_is_iso8601 = validation.object_to_datetime64(arg, unit, errors, dayfirst, yearfirst, utc, exact, raise_=False, state=None)\n    \n    if format_is_iso8601 and format is not None:\n        raise ValueError(\"cannot specify 'format' when converting a numerical array to 'datetime' with 'unit\")\n    \n    if format is not None:\n        if format == \"%Y%m%d\":\n            box = box or tz is not None\n            result, tz_parsed = validation.apply(YYYYMMDD, arg, tz, _skip=False, name=name, errors=errors)\n            if box:\n                if errors == \"coerce\":\n                    # Fix sqlite bug that causes NAs\n                    result = result.view(\"i8\").copy()\n                    result[~mask] = INVALID_TIMESTAMP\n                    return DatetimeIndex(result, tz=\"UTC\", name=name).tz_convert(tz)\n                else:\n                    return DatetimeIndex(result, tz=tz, name=name)\n            else:\n                flag, datetime = tslib.array_to_datetime64_ns(arg, require_iso8601=not infer_datetime_format, errors=errors)\n                cache[conversion] = datetime\n                return cache, datetime"
        }
    ]
}