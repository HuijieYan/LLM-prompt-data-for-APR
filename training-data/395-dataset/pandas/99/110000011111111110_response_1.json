{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    format=None,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    format : str\n        format string\n    name : object, default None\n        None or string for the Index name\n    tz : object, default None\n        None or 'utc'\n    unit : string, default None\n        None or string of the frequency of the passed data\n    errors : string, default None\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean, default None\n        inferring format behavior from to_datetime\n    dayfirst : boolean, default None\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean, default None\n        yearfirst parsing behavior from to_datetime\n    exact : boolean, default None\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if unit is not None and format is not None:\n        raise ValueError(\"cannot specify both format and unit\")\n\n    if errors is not None and errors not in ['raise', 'coerce', 'ignore']:\n        raise ValueError(\"errors must be one of 'raise', 'coerce', 'ignore'\")\n\n    if infer_datetime_format is not None:\n        raise ValueError(\"infer_datetime_format should be set to either True or False\")\n\n    if isinstance(arg, (DatetimeArray, DatetimeIndex)):\n        arg = arg._ndarray_values\n\n    if format is None and infer_datetime_format and not tz:\n        format = \"%Y-%m-%d %H:%M:%S\"\n\n    try:\n        result = pd.to_datetime(arg, format=format, errors=errors, utc=tz==\"utc\")\n    except Exception as e:\n        if errors == \"ignore\":\n            result = arg\n        elif errors == \"coerce\":\n            result = pd.to_datetime([np.nan] * len(arg), errors=errors, utc=tz==\"utc\")\n        else:\n            raise e\n\n    if tz is not None:\n        result = result.tz_localize(tz)\n    return result",
            "imports": [
                "from pandas import DatetimeIndex",
                "import numpy as np"
            ]
        }
    ]
}