{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n        arg,\n        format=None,\n        name=None,\n        tz=None,\n        unit=None,\n        errors=None,\n        infer_datetime_format=None,\n        dayfirst=None,\n        yearfirst=None,\n        exact=None,\n    ):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handling behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if isinstance(arg, DatetimeArray) or isinstance(arg, DatetimeIndex):\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(\"utc\")\n        return arg\n    else:\n        if isinstance(arg, np.ndarray):\n            if arg.dtype == \"datetime64[ns, UTC]\":\n                return DatetimeIndex(arg, tz=tz, name=name)\n            else:\n                if format is not None:\n                    result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n                    if errors == \"ignore\":\n                        return Index(result, name=name)\n                    else:\n                        return DatetimeIndex(result, name=name)\n                else:\n                    raise TypeError(\"arg must be a string, datetime, list, tuple, 1-d array, or Series\")\n        else:\n            try:\n                orig_arg = ensure_object(arg)\n                format = infer_datetime_format and _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n                values, tz_parsed = objects_to_datetime64ns(\n                    orig_arg,\n                    dayfirst=dayfirst,\n                    yearfirst=yearfirst,\n                    utc=tz == \"utc\",\n                    errors=errors\n                )\n                if tz_parsed is not None:\n                    return DatetimeIndex._simple_new(values, name=name, tz=tz_parsed)\n                else:\n                    return _box_as_indexlike(values, utc=tz == \"utc\", name=name)\n            except (ValueError, TypeError) as e:\n                if (format == \"%Y%m%d\"):\n                    try:\n                        orig_arg = ensure_object(arg)\n                        result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                    except (ValueError, TypeError, tslib.OutOfBoundsDatetime):\n                        raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n                    else:\n                        if result is not None:\n                            return result\n                else:\n                    raise e\n    return None",
            "import_list": [
                "import numpy as np",
                "from pandas import DatetimeIndex, Index",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns",
                "import pandas._libs.tslibs as tslib",
                "from pandas._libs.tslibs.conversion import datetime_to_datetime64"
            ]
        }
    ]
}