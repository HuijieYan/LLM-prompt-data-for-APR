{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n        arg,\n        format,\n        name=None,\n        tz=None,\n        unit=None,\n        errors=None,\n        infer_datetime_format=None,\n        dayfirst=None,\n        yearfirst=None,\n        exact=None,\n    ):\n        if isinstance(arg, (list, tuple)):\n            arg = np.array(arg, dtype=\"O\")\n\n        if unit is not None:\n            if format is not None:\n                raise ValueError(\"cannot specify both format and unit\")\n\n            result, tz_parsed = objects_to_datetime64ns(\n                arg,\n                dayfirst=dayfirst,\n                yearfirst=yearfirst,\n                utc=(tz == \"utc\"),\n                errors=errors\n            )\n\n            return DatetimeIndex(result, name=name, tz=tz_parsed)\n\n        elif infer_datetime_format and format is None:\n            if errors == \"coerce\":\n                raise ValueError(\"infer_datetime_format can only be used with a specified format\")\n\n            format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n        if format is not None:\n            result, timezones = array_strptime(arg, format, exact=exact, errors=errors)\n\n            if \"%Z\" in format or \"%z\" in format:\n                return _return_parsed_timezone_results(result, timezones, tz, name)\n\n            return DatetimeIndex(result, name=name)\n\n        raise ValueError(\"unable to convert input to datetime\")",
            "import_list": [
                "from pandas import DatetimeIndex",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns",
                "import numpy as np"
            ]
        }
    ]
}