{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(arg, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None):\n    import numpy as np\n    from pandas import DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import objects_to_datetime64ns, tslib\n    from pandas import Index\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n    \n    if isinstance(arg, DatetimeArray):\n        if tz == 'utc':\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n    elif isinstance(arg, DatetimeIndex):\n        if tz == 'utc':\n            arg = arg.tz_localize(None).tz_localize(tz)\n        return arg\n    elif isinstance(arg, np.ndarray):\n        if unit is not None:\n            if format is not None:\n                raise ValueError(\"cannot specify both format and unit\")\n            result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n            result = Index(result, name=name) if errors == 'ignore' else DatetimeIndex(result, name=name)\n            result = result.tz_localize(\"utc\").tz_convert(tz_parsed)\n            if tz is not None:\n                result = result.tz_localize(tz) if result.tz is None else result.tz_convert(tz)\n            return result\n        elif arg.ndim > 1:\n            raise TypeError(\"arg must be a string, datetime, list, tuple, 1-d array, or Series\")\n    else:\n        orig_arg = arg\n        arg, _ = objects_to_datetime64ns(arg)\n        if infer_datetime_format and format is None:\n            format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n        tz_parsed = None\n        result = None\n        if format is not None:\n            if format == \"%Y%m%d\":\n                try:\n                    orig_arg = ensure_object(orig_arg)\n                    result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                except (ValueError, TypeError, tslibs.OutOfBoundsDatetime):\n                    raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n            if result is None:\n                try:\n                    result, timezones = array_strptime(arg, format, exact=exact, errors=errors)\n                    if \"%Z\" in format or \"%z\" in format:\n                        return _return_parsed_timezone_results(result, timezones, tz, name)\n                except tslibs.OutOfBoundsDatetime:\n                    if errors == \"raise\":\n                        raise\n                    elif errors == \"coerce\":\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        iresult = result.view(\"i8\")\n                        iresult.fill(tslibs.iNaT)\n                    else:\n                        result = arg\n                except ValueError:\n                    if not infer_datetime_format:\n                        if errors == \"raise\":\n                            raise\n                        elif errors == \"coerce\":\n                            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                            iresult = result.view(\"i8\")\n                            iresult.fill(tslibs.iNaT)\n                        else:\n                            result = arg\n        if result is None:\n            assert format is None or infer_datetime_format\n            utc = tz == \"utc\"\n            result, tz_parsed = objects_to_datetime64ns(arg, dayfirst=dayfirst, yearfirst=yearfirst, utc=utc, errors=errors, require_iso8601=False, allow_object=True)\n        if tz_parsed is not None:\n            return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n        utc = tz == \"utc\"\n        return DatetimeIndex._simple_new(result, name=name, tz=tz) if tz else Index(result, name=name)"
        }
    ]
}