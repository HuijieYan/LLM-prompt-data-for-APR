{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n        arg,\n        format,\n        name=None,\n        tz=None,\n        unit=None,\n        errors=None,\n        infer_datetime_format=None,\n        dayfirst=None,\n        yearfirst=None,\n        exact=None,\n    ):\n        \"\"\"\n        Helper function for to_datetime. Performs the conversions of 1D listlike\n        of dates\n    \n        Parameters\n        ----------\n        arg : list, tuple, ndarray, Series, Index\n            date to be parced\n        name : object\n            None or string for the Index name\n        tz : object\n            None or 'utc'\n        unit : string\n            None or string of the frequency of the passed data\n        errors : string\n            error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n        infer_datetime_format : boolean\n            inferring format behavior from to_datetime\n        dayfirst : boolean\n            dayfirst parsing behavior from to_datetime\n        yearfirst : boolean\n            yearfirst parsing behavior from to_datetime\n        exact : boolean\n            exact format matching behavior from to_datetime\n    \n        Returns\n        -------\n        Index-like of parsed dates\n        \"\"\"\n        import pandas as pd\n        import numpy as np\n        from pandas.core.arrays import DatetimeArray\n        from pandas.core.indexes.datetimes import DatetimeIndex\n    \n        if isinstance(arg, (list, tuple)):\n            arg = np.array(arg, dtype=\"O\")\n    \n        else:\n            arg = np.asarray(arg)\n    \n        if np.issubdtype(arg.dtype, np.datetime64):\n            return DatetimeIndex(arg, tz=tz, name=name)\n    \n        elif np.issubdtype(arg.dtype, np.timedelta64):\n            raise TypeError(\n                \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n            )\n    \n        elif unit is not None:\n            if format is not None:\n                raise ValueError(\"cannot specify both format and unit\")\n            result = pd.to_datetime(arg, unit=unit, errors=errors)\n            result = result.tz_localize(tz) if tz else result\n            result.name = name\n            return result\n    \n        elif np.ndim(arg) > 1:\n            raise TypeError(\n                \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n            )\n    \n        orig_arg = arg\n        arg = pd.Series(arg) if not isinstance(arg, pd.Series) else arg\n        arg = arg.astype('O')\n    \n        if infer_datetime_format and format is None:\n            format = pd.core.tools.datetimes._guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n    \n        result = pd.to_datetime(arg, format=format, errors=errors, infer_datetime_format=infer_datetime_format, dayfirst=dayfirst,\n                                               yearfirst=yearfirst, exact=exact)\n    \n        if tz:\n            return result.dt.tz_localize(tz)\n        else:\n            return result",
            "imports": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.indexes.datetimes import DatetimeIndex"
            ]
        }
    ]
}