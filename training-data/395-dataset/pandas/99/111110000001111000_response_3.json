{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if isinstance(arg, DatetimeArray) or isinstance(arg, DatetimeIndex):\n        if tz == \"utc\":\n            return arg.tz_localize(None).tz_localize(tz)\n        return DatetimeIndex(arg, tz=tz, name=name)\n\n    if unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        result, tz_parsed = objects_to_datetime64ns(arg, unit=unit, errors=errors)\n        if errors == \"ignore\":\n            result = DatetimeIndex(result, name=name)\n        else:\n            result = DatetimeIndex(result, name=name)\n        result = result.tz_localize(\"UTC\").tz_convert(tz_parsed) if tz_parsed else result\n        if tz is not None:\n            result = result.tz_localize(tz) if result.tz is None else result.tz_convert(tz)\n        return result\n\n    if arg.ndim > 1:\n        raise TypeError(\"arg must be a string, datetime, list, tuple, 1-d array, or Series\")\n\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n    arg = arg.astype(\"O\")\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    result = None\n\n    if format is not None:\n        result = _attempt_YYYYMMDD(orig_arg, errors=errors) if format == \"%Y%m%d\" else array_strptime(arg, format, exact=exact, errors=errors)[0]\n        if \"%Z\" in format or \"%z\" in format:\n            return _return_parsed_timezone_results(result, array_strptime(arg, format, exact=exact, errors=errors)[1], tz, name)\n\n    if result is None:\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(arg, dayfirst=dayfirst, yearfirst=yearfirst, utc=utc, errors=errors, require_iso8601=require_iso8601, allow_object=True)\n\n    if tz_parsed:\n        return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n    else:\n        utc = tz == \"utc\"\n        return _box_as_indexlike(result, utc=utc, name=name)",
            "imports": [
                "import numpy as np",
                "from pandas import DatetimeIndex",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns"
            ]
        }
    ]
}