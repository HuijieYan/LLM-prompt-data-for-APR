{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n        arg,\n        name=None,\n        tz=None,\n        unit=None,\n        errors=None,\n        infer_datetime_format=None,\n        dayfirst=None,\n        yearfirst=None,\n        exact=None,\n    ):\n        \"\"\"\n        Helper function for to_datetime. Performs the conversions of 1D listlike\n        of dates\n    \n        Parameters\n        ----------\n        arg : list, tuple, ndarray, Series, Index\n            date to be parsed\n        name : object\n            None or string for the Index name\n        tz : object\n            None or 'utc'\n        unit : string\n            None or string of the frequency of the passed data\n        errors : string\n            error handling behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n        infer_datetime_format : boolean\n            inferring format behavior from to_datetime\n        dayfirst : boolean\n            dayfirst parsing behavior from to_datetime\n        yearfirst : boolean\n            yearfirst parsing behavior from to_datetime\n        exact : boolean\n            exact format matching behavior from to_datetime\n    \n        Returns\n        -------\n        Index-like of parsed dates\n        \"\"\"\n        from pandas import DatetimeIndex\n        from pandas.core.arrays import DatetimeArray\n        from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns\n    \n        if isinstance(arg, (list, tuple)):\n            arg = np.array(arg, dtype=\"O\")\n    \n        if infer_datetime_format and not errors:\n            try:\n                return DatetimeIndex(\n                    arg,\n                    name=name,\n                    tz=tz,\n                    unit=unit,\n                    dayfirst=dayfirst,\n                    yearfirst=yearfirst,\n                    exact=exact\n                )\n            except ValueError as e:\n                raise ValueError(\"Error converting the input to datetime index\")\n\n        orig_arg = arg\n        arg, _ = maybe_convert_dtype(arg, copy=False)\n        arg = ensure_object(arg)\n\n        if infer_datetime_format and not unit:\n            unit = 'ns'  # Default to nanoseconds if unit not provided\n\n        if format:\n            try:\n                return DatetimeIndex(\n                    arg,\n                    name=name,\n                    tz=tz,\n                    unit=unit,\n                    dayfirst=dayfirst,\n                    yearfirst=yearfirst,\n                    exact=exact\n                )\n            except (ValueError, TypeError) as e:\n                raise ValueError(\"Error converting the input to datetime index\")\n\n        if unit is not None:\n            result, tz_parsed = objects_to_datetime64ns(arg, dayfirst=dayfirst, yearfirst=yearfirst, utc=(tz == \"utc\"),\n                                                        errors=errors, require_iso8601=False, allow_object=True)\n            return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed if tz_parsed is not None else tz)",
            "imports": [
                "from pandas import DatetimeIndex",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns"
            ]
        }
    ]
}