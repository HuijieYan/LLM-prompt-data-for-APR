{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handling behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    from pandas import DatetimeIndex, Int64Dtype\n    import numpy as np\n    \n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    # these are short-cutable\n    if isinstance(arg, pd.IntegerArray):\n        mask = arg.isna()\n        result = pd.to_datetime(arg[mask], unit=unit, errors=errors, infer_datetime_format=infer_datetime_format, dayfirst=dayfirst, yearfirst=yearfirst).append(pd.Index([pd.NaT] * mask.sum()))\n        return result\n\n    if isinstance(arg, (pd.DatetimeArray, pd.DatetimeIndex)):\n        if tz == \"utc\":\n            result = arg.tz_convert(None).tz_localize(tz)\n        else:\n            result = arg\n        return result\n\n\n    if np.issubdtype(arg, np.datetime64):\n        result = pd.to_datetime(arg, unit=unit, errors=errors, infer_datetime_format=infer_datetime_format, dayfirst=dayfirst, yearfirst=yearfirst)\n        if tz == \"utc\":\n            result = result.tz_localize(None).tz_localize(tz)\n        return result\n\n    arg = arg.astype(str)\n    result = pd.to_datetime(arg, format=format, errors=errors, infer_datetime_format=infer_datetime_format, dayfirst=dayfirst, yearfirst=yearfirst)\n    return result",
            "import_list": [
                "from pandas import DatetimeIndex, Int64Dtype",
                "import numpy as np"
            ]
        }
    ]
}