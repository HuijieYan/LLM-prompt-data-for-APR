{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n    format=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handling behavior from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n    format : string\n        None or string of the format of the passed data\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays.datetimes import DatetimeArray, _box_as_indexlike\n    from pandas.core.arrays.integer import IntegerArray\n    from pandas.core.arrays.numpy_ import PandasArray\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if format is not None:\n        if unit is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n\n    if isinstance(arg, DatetimeArray) or isinstance(arg, DatetimeIndex):\n        if tz == \"utc\":\n            return arg.tz_convert(None).tz_localize(tz)\n        return DatetimeIndex(arg, tz=tz, name=name)\n\n    if isinstance(arg, DatetimeArray) or isinstance(arg, DatetimeIndex) or isinstance(arg, PandasArray):\n        if not isinstance(arg, IntegerArray):\n            return DatetimeIndex(arg, tz=tz, name=name)\n\n    if unit is not None:\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if errors == \"ignore\":\n            from pandas import Index\n            result = Index(result, name=name)\n        else:\n            result = DatetimeIndex(result, name=name)\n\n        try:\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n        except AttributeError:\n            return result\n\n        if tz is not None:\n            if result.tz is None:\n                result = result.tz_localize(tz)\n            else:\n                return result.tz_convert(tz)\n        return result\n\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\"arg must be a string, datetime, list, tuple, 1-d array, or Series\")\n    else:\n        return _box_as_indexlike(result, utc=(tz == \"utc\"), name=name)",
            "import_list": [
                "from pandas import DatetimeIndex",
                "from pandas.core.arrays.datetimes import DatetimeArray, _box_as_indexlike",
                "from pandas.core.arrays.integer import IntegerArray",
                "from pandas.core.arrays.numpy_ import PandasArray",
                "from pandas import Index"
            ]
        }
    ]
}