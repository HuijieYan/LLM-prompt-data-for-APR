{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n    import numpy as np\n    from pandas import DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns\n    from pandas.api.extensions import is_integer_dtype, is_float_dtype\n    from pandas.core.indexers import check_array_indexer, is_array_like\n    from pandas.tseries.common import return_stamp_like\n    from pandas.io.date_converters import StringArrayDatetime\n\n    coerce = errors == \"coerce\"\n\n    if not is_array_like(arg):\n        try:\n            values, tz = conversion.datetime_to_datetime64(arg)\n            return DatetimeIndex._simple_new(values, name=name, tz=tz)\n        except (ValueError, TypeError):\n            if not is_integer_dtype(arg) and not is_float_dtype(arg):\n                raise ValueError(\"arg must be a string, datetime, list, tuple, 1-d array, or Series\")\n\n        if is_integer_dtype(arg) or is_float_dtype(arg):\n            arg = ensure_object(arg)\n            require_iso8601 = False\n            if infer_datetime_format and format is None:\n                format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n            if format is not None:\n                format_is_iso8601 = _format_is_iso(format)\n                if format_is_iso8601:\n                    require_iso8601 = not infer_datetime_format\n                    format = None\n\n            try:\n                values, tz_parsed = StringArrayDatetime._from_sequence(arg, format, errors, require_iso8601, coerce)\n                result = return_stamp_like(arg, values, tz_parsed, tz,format=format,name=name,exact=exact, yearfirst=yearfirst)\n                return result\n            except ValueError as e:\n                raise e\n\n    if unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = check_array_indexer(arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        result = DatetimeIndex(result, name=name)\n        result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n        if tz is not None:\n            result = result.tz_localize(tz) if result.tz is None else result.tz_convert(tz)\n        return result\n\n    try:\n        values = tslib.array_strptime(arg, format)\n        tz_parsed = tslib.array_parse_java_timeunit_format(arg, format)\n        assert tz_parsed is None\n\n        if \"%Z\" in format or \"%z\" in format:\n            return _return_parsed_timezone_results(result, timezones, tz, name)\n    except (OutOfBoundsDatetime, AbsentFrequency, OutOfBoundsDatetimeToo, AbsentFrequencyToo, DateParseError, DateFormatToo):\n        if coerce:\n            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n            iresult = result.view(\"i8\")\n            iresult.fill(tslibs.iNaT)\n        else:\n            result = arg\n    return _return_parsed_results(arg, result, tz, name, result, coerce)",
            "imports": [
                "import numpy as np",
                "from pandas import DatetimeIndex",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.arrays.datetimes import maybe_convert_dtype, objects_to_datetime64ns",
                "from pandas.api.extensions import is_integer_dtype, is_float_dtype",
                "from pandas.core.indexers import check_array_indexer, is_array_like",
                "from pandas.tseries.common import return_stamp_like",
                "from pandas.io.date_converters import StringArrayDatetime"
            ]
        }
    ]
}