{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parsed\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    Index-like of parsed dates\n    \"\"\"\n  \n    from pandas.tseries.frequencies import to_offset\n    from pandas import Index, DatetimeIndex, convert_dtypes\n\n    if format is None and infer_datetime_format:\n        format = _guess_datetime_format_for_array(\n            arg, dayfirst=dayfirst, yearfirst=yearfirst\n        )\n\n    # for unit= specifying things that aren't Y, M, D\n    if unit is not None:\n        arg = getattr(arg, 'values', arg)\n\n        result, tz_parsed = array_with_unit_to_datetime(arg, unit, errors=errors)\n        if errors == 'ignore':\n            result = Index(result, name=name)\n        else:\n            result = DatetimeIndex(result, name=name)\n        result = result.tz_localize('UTC').tz_convert(tz_parsed)\n\n        if tz is not None:\n            if result.tz is None:\n                result = result.tz_localize(tz)\n            else:\n                result = result.tz_convert(tz)\n\n        return result\n\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    arg, _ = convert_dtypes(arg, format=format, origin=\"compat\", exact=exact)\n\n    arg = ensure_object(arg)\n    orig_arg = arg\n    result = None\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst, yearfirst=yearfirst)\n\n    if format is not None:\n        if format == \"%Y%m%d\":\n            result = _attempt_YYYYMMDD(arg, errors=errors)\n            if result is not None:\n                return result\n\n            result, tz_parsed = tslib.array_strptime(arg, format, exact=exact, errors=errors)\n            if \"%Z\" in format or \"%z\" in format:\n                return _return_parsed_timezone_results(result, tz_parsed, tz, name)\n\n        else:\n            try:\n                result, tz_parsed = tslib.array_strptime(arg, format, exact=exact, errors=errors)\n                if \"%Z\" in format or \"%z\" in format:\n                    return _return_parsed_timezone_results(result, tz_parsed, tz, name)\n            except tslib.OutOfBoundsDatetime:\n\n                # if format was inferred, try falling back\n                # to array_to_datetime and terminate here\n                # for specified formats\n                if not infer_datetime_format:\n                    raise\n\n            # pymc3 needs tz-naive in the UTC for astype\n            if tz == \"UTC\":\n                tz_parsed = \"UTC\"\n            return _box_as_indexlike(result, utc=tz_parsed == \"UTC\", name=name)\n\n    if result is None:\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            exact=exact,\n            errors=errors,\n        )\n\n    if tz_parsed is not None:\n        return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n\n    # We may still need to localize the result with tz\n    if tz is not None:\n        return _box_as_indexlike(result, utc=tz == \"utc\", name=name)\n\n    return result",
            "imports": [
                "from pandas.tseries.frequencies import to_offset",
                "from pandas import Index, DatetimeIndex, convert_dtypes"
            ]
        }
    ]
}