{
    "pandas": [
        {
            "bugID": 99,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 245,
            "file_name": "pandas/core/tools/datetimes.py",
            "replace_code": "def _convert_listlike_datetimes(\n    arg,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n    \"\"\"\n    import numpy as np\n    from pandas import DatetimeIndex\n    from pandas.core.arrays.datetimes import require_iso8601\n    from pandas.core.arrays.datetimes import tz_convert\n    from pandas.core.inserts import _delete_trajectory\n    from pandas.core.internals import com, ops\n    from pandas.core.tools import convert_listlike\n    \n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    if np.isin([\"DatetimeArray\", \"DatetimeIndex\"], arg.dtype):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n\n    elif ops.is_datetime64_ns_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        elif tz:\n            return arg.tz_localize(tz)\n\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = convert_listlike(arg, unit, errors=errors)\n        from pandas import Index\n        if errors == \"ignore\":\n            result = Index(result, name=name)\n        else:\n            result = DatetimeIndex(result, name=name)\n\n        try:\n            result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n        except AttributeError:\n            return result\n        if tz is not None:\n            if result.tz is None:\n                result = result.tz_localize(tz)\n            else:\n                result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    val = np.array(arg, dtype=\"datetime64[ns]\")\n    orig_shape = val.shape\n    \n    if infer_datetime_format and format is None:\n        format = pd.offsets._guess_datetime_format_for_array(val, dayfirst=dayfirst)\n\n    if format is not None:\n        format_is_iso8601 = pd.offsets._format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    result = None\n\n    if format is not None:\n        if format == \"%Y%m%d\":\n            try:\n                result = pd.offsets._attempt_YYYYMMDD(val, errors=errors)\n            except (ValueError, TypeError, tslibs.OutOfBoundsDatetime):\n                raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n\n        if result is None:\n            result, timezones = pd.array_strptime(\n                val, format, exact=exact, errors=errors\n            )\n            tz_result = _delete_trajectory(result, timezones, tz, name)\n            if tz_result:\n                return tz_result\n\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = pd.objects_to_datetime64ns(\n            val,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n\n    if tz_parsed is not None:\n        return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n\n    utc = tz == \"utc\"\n    return pd.tools.box_as_indexlike(result, utc=utc, name=name)",
            "imports": [
                "import numpy as np",
                "from pandas import DatetimeIndex",
                "from pandas.core.arrays.datetimes import require_iso8601",
                "from pandas.core.arrays.datetimes import tz_convert",
                "from pandas.core.inserts import _delete_trajectory",
                "from pandas.core.internals import com, ops",
                "from pandas.core.tools import convert_listlike",
                "from pandas import Index"
            ]
        }
    ]
}