{
    "pandas": [
        {
            "bugID": 104,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1845,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n\n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by the caller of GroupBy object.\n\n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n    \"\"\"\n    import numpy as np\n    from numpy import isscalar\n    from pandas.core.dtypes.common import is_object_dtype\n    from pandas.core.dtypes.dtypes import (\n        is_datetime64_dtype,\n        is_integer_dtype,\n        needs_i8_conversion,\n    )\n    from pandas import concat\n    from typing import Type, Tuple, Optional\n\n    if isscalar(q):\n        indexer = _class_getitem_indexer(self, \"quantile\", q, interpolation)\n        return self._cython_agg_general(\n            how=\"quantile\",\n            q=q,\n            interpolation=interpolation,\n            alt=None,\n            numeric_only=False,\n            needs_i8_conversion=needs_i8_conversion(self),\n            **indexer,\n        )\n    else:\n        results = [\n            self.quantile(q=qq, interpolation=interpolation) for qq in q\n        ]\n        result = concat(results, axis=0, keys=q)\n\n        return result",
            "import_list": [
                "import numpy as np",
                "from numpy import isscalar",
                "from pandas.core.dtypes.common import is_object_dtype",
                "from pandas.core.dtypes.dtypes import (\n        is_datetime64_dtype,\n        is_integer_dtype,\n        needs_i8_conversion,\n    )",
                "from pandas import concat",
                "from typing import Type, Tuple, Optional",
                "from pandas._libs import lib, algos",
                "from pandas.core.arrays import ExtensionArray",
                "from pandas.core.dtypes.dtypes import (\n        is_string_dtype,\n        is_integral_dtype,\n        is_float_dtype,\n        is_datetime64_any_dtype,\n        is_timedelta64_dtype,\n        needs_i8_conversion,\n    )"
            ]
        }
    ]
}