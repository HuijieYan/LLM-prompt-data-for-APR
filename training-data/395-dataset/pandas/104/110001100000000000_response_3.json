{
    "pandas": [
        {
            "bugID": 104,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1845,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n        from pandas import concat\n    \n        def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n            if is_object_dtype(vals):\n                raise TypeError(\n                    \"'quantile' cannot be performed against 'object' dtypes!\"\n                )\n    \n            inference = None\n            if is_integer_dtype(vals):\n                inference = np.int64\n            elif is_datetime64_dtype(vals):\n                inference = \"datetime64[ns]\"\n                vals = vals.astype(np.float)\n    \n            return vals, inference\n    \n        def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n            if inference:\n                if not (is_integer_dtype(inference) and interpolation in {\"linear\", \"midpoint\"}):\n                    vals = vals.astype(inference)\n    \n            return vals\n    \n        if not isinstance(q, (int, float, list, np.ndarray)):\n            raise ValueError(\"q must be a scalar or sequence\")\n    \n        if is_scalar(q):\n            result = self._get_cythonized_result(\n                \"group_quantile\",\n                cython_dtype=np.dtype(np.float64),\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                needs_ngroups=True,\n                result_is_index=False,\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=q,\n                interpolation=interpolation\n                )\n            return result\n        else:\n            results = [self._get_cythonized_result(\n                \"group_quantile\",\n                cython_dtype=np.dtype(np.float64),\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                needs_ngroups=True,\n                result_is_index=False,\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=qi,\n                interpolation=interpolation\n                ) for qi in q]\n            result = concat(results, axis=0, keys=q)\n            order = list(range(result.index.nlevels - 1))\n            order.append(result.index.nlevels - 1)\n            result = result.reorder_levels(order)\n            result = result.reindex(q, level=-1)\n            hi = len(q) * self.ngroups\n            arr = np.arange(0, hi, self.ngroups)\n            arrays = [arr + i for i in range(self.ngroups)]\n            indices = np.concatenate(arrays)\n            assert len(indices) == len(result)\n            return result.take(indices)",
            "import_list": [
                "from pandas import concat"
            ]
        }
    ]
}