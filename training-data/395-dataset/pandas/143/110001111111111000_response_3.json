{
    "pandas": [
        {
            "bugID": 143,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 381,
            "file_name": "pandas/core/indexes/range.py",
            "replace_code": "def get_indexer(index, target, method=None, limit=None, tolerance=None):\n    # ... previous omitted code ...\n\n    import numpy as np\n    from pandas.core.indexes.range import RangeIndex\n    from pandas.core.indexes.numeric import is_integer_dtype\n    from pandas.core.dtypes.common import is_list_like\n    from pandas._libs.algos import ensure_platform_int\n    import pandas._libs.algos as libalg\n    from pandas.core.indexers import BaseIndexer\n    from pandas.core.indexes.common import Index\n    if not is_list_like(target):\n        return libalg.full((len(target),), -1, np.int32)\n    \n    tm_dtype = index.values.dtype\n    if not (np.issubdtype(tm_dtype, np.integer) or is_integer_dtype(index)):\n        indexer = libalg.get_indexer_float64(target._values, index._start, index._stop,\n                                             index._step, side, needs_mask, limit)\n        if _need_rounding(tm_locs):\n            indexer = np.floor(indexer)\n        return ensure_platform_int(indexer)\n    \n    sub_arr, indexer = _unpack_tolerance(index, target, side, tolerance,\n                                        needs_mask, dereference, target_is_dict)\n    return ensure_platform_int(indexer)"
        }
    ]
}