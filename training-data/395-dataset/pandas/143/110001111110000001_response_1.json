{
    "pandas": [
        {
            "bugID": 143,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 381,
            "file_name": "pandas/core/indexes/range.py",
            "replace_code": "def get_indexer(self, target, method=None, limit=None, tolerance=None):\n\n    if method not in [None, \"pad\"] or tolerance is not None:\n        return super().get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n    \n    target_array = np.asarray(target)\n    if not is_integer_dtype(target_array):\n        return super().get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n    \n    locs = pd.Index(target_array).get_indexer_non_unique(self)\n    if method == \"pad\":\n        locs[locs == -1] = np.nan\n        if limit is not None:\n            mask = pd.isna(locs)\n            ffill_values = pd.concat([self[:limit], pd.Index(np.nan)])\n            locs = ffill_values.get_indexer_non_unique(target_array)\n            mask &= pd.notna(locs)\n            locs[mask] = ffill_values.get_indexer_non_unique(target_array[mask])\n    \n    return ensure_platform_int(locs)"
        }
    ]
}