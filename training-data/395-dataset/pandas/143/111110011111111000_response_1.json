{
    "pandas": [
        {
            "bugID": 143,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 381,
            "file_name": "pandas/core/indexes/range.py",
            "replace_code": "def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        if method is None and tolerance is None and isinstance(target, Int64Index):\n            if not is_list_like(target):\n                target = target._values\n                locs = target - self.start\n            else:\n                locs = np.asarray(target) - self.start\n            step = self.step\n            if step > 0:\n                stop = self.stop\n                cond = (locs >= 0) & (target < stop)\n                if limit is not None:\n                    cond &= (locs < limit * step)\n                locs_out = locs[cond] // step\n                locs_out = np.where(~cond, -1, locs_out)\n            else:\n                start = self.stop - 1\n                cond = (locs > start) & (target >= start)\n                if limit is not None:\n                    cond &= (locs > start - limit * -step)\n                locs_out = np.round((start - locs[cond]) / -step).astype(np.int_)\n            if step != self.step:\n                # We reversed this range: transform to original locs\n                locs_out = len(self) - 1 - locs_out\n            return ensure_platform_int(locs_out)\n        return super().get_indexer(target, method=method, tolerance=tolerance)",
            "imports": []
        }
    ]
}