{
    "pandas": [
        {
            "bugID": 143,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 381,
            "file_name": "pandas/core/indexes/range.py",
            "replace_code": "def get_indexer(self, target, method=None, limit=None, tolerance=None):\n    if not (method is None and tolerance is None and is_list_like(target)):\n        return super().get_indexer(target, method=method, tolerance=tolerance)\n\n    if self.step > 0:\n        start, stop, step = self.start, self.stop, self.step\n    else:\n        # Work on reversed range for simplicity:\n        start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n\n    if limit is None:  # If limit is not specified, use the default behavior\n        limit = -1\n\n    target_array = np.asarray(target)\n    locs = (target_array - start) // step  # Calculate directly based on start and step\n    valid = (locs >= 0) & (locs < len(self))\n    locs[~valid] = -1\n\n    if limit >= 0:\n        locs[valid & (locs >= limit)] = -1  # Apply limit to the valid locs\n\n    if step < 0:\n        locs[valid] = len(self) - 1 - locs[valid]  # Adjust for reversed range\n\n    return ensure_platform_int(locs)",
            "imports": []
        }
    ]
}