{
    "pandas": [
        {
            "bugID": 56,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2610,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _get_value(self, index, col, takeable: bool = False):\n        \"\"\"\n        Quickly retrieve single value at passed column and index.\n    \n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n    \n        Returns\n        -------\n        scalar\n        \"\"\"\n        \n        if takeable:\n            series = self._iget_item_cache(col)\n            return com.maybe_box_datetimelike(series._values[index])\n    \n        series = self._get_item_cache(col)\n        idx = self.index\n        # Handle range index separately\n        if is_range_index:\n            from pandas.core.indexes.range import RangeIndex\n            if not self.index._should_fallback_to_positional(iindexer):\n                engine = self._engine\n                c = series.dtype\n                return engine.get_value(series, index, c)\n            else:\n                return self._get_value_with_indexer(index, col, takeable)",
            "import_list": [
                "from pandas.core.indexes.range import RangeIndex"
            ]
        }
    ]
}