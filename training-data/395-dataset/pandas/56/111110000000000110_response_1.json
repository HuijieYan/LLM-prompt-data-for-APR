{
    "pandas": [
        {
            "bugID": 56,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2610,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _get_value(self, index, col, takeable: bool = False):\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._iget_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n\n    series = self._get_item_cache(col)\n    col_idx = self.columns.get_loc(col)\n\n    if isinstance(index, (slice, Iterable, np.ndarray)):\n        # This is called for many but very small slices (under 20).\n        dtype = series.dtype\n        if isinstance(dtype, pd.DatetimeTZDtype):\n            # Slow to frequent dispatch for compatibility with default case.\n            return series._values[index]\n\n    if is_label_like(index):\n        index = self.index.get_loc(index)\n\n    engine = self.index._engine\n    values = series._values\n\n    # If \"index\" is an out-of-order boolean, then we cannot use _ENGINE to retrieve the value.\n    if not is_boolean_indexer(index):\n        loc = engine.get_loc(index)\n        return values[loc]\n\n    if not engine.requires_unique_index_values:\n\n        # With non-unique index values, the boolean takes precedence.\n        if needs_i8_conversion(index):\n            index = self.index.get_indexer_for(index)\n\n        else:\n            locs = engine.get_locs(index)\n            return values[locs]\n\n    # Rescheduling the previous block\n    raise ValueError(\"is_label_like is not supported\")",
            "imports": []
        }
    ]
}