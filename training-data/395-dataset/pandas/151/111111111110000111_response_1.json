{
    "pandas": [
        {
            "bugID": 151,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 229,
            "file_name": "pandas/core/arrays/numpy_.py",
            "replace_code": "def __setitem__(self, key, value):\n    value = extract_array(value, extract_numpy=True)\n\n    if not lib.is_scalar(key) and is_list_like(key):\n        key = np.asarray(key)\n\n    if not lib.is_scalar(value):\n        value = np.asarray(value)\n\n    values = self._ndarray\n    \n    if isinstance(value, str) and self._ndarray.dtype.kind not in ('U', 'S'):\n        raise ValueError(\"String value can only be set in a string dtype PandasArray\")\n\n    if value.dtype.kind != self._ndarray.dtype.kind:\n        try:\n            value = value.astype(self._ndarray.dtype)\n        except ValueError:\n            raise ValueError(f\"Cannot set values with data type '{value.dtype}' into PandasArray with data type '{self._ndarray.dtype}'\")\n\n    if value.shape != () and key.shape != value.shape:\n        raise ValueError(\"shape mismatch: value array of shape {value.shape} could not be broadcast to indexing key of shape {key.shape}\")\n\n    self._ndarray[key] = value",
            "imports": []
        }
    ]
}