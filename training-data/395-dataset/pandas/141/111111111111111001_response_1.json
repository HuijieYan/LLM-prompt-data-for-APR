{
    "pandas": [
        {
            "bugID": 141,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 381,
            "file_name": "pandas/core/indexes/range.py",
            "replace_code": "def get_indexer(self, target, method=None, limit=None, tolerance=None):\n    if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n        return super().get_indexer(\n            target, method=method, tolerance=tolerance, limit=limit\n        )\n    \n    if self.step > 0:\n        start, stop, step = self.start, self.stop, self.step\n    else:\n        start, stop, step = self.stop + 1, self.start - 1, -self.step\n    \n    target_array = np.asarray(target)\n    locs = (target_array - start) // step\n    valid = (locs >= 0) & (locs < len(self))\n    locs[~valid] = -1\n    if step != self.step:\n        locs[valid] = len(self) - 1 - locs[valid]\n    return locs",
            "import_list": []
        }
    ]
}