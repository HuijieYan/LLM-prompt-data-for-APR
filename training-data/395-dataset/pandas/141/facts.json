{
    "1.1.1": "@Appender(_index_shared_docs[\"get_indexer\"])\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n        return super().get_indexer(\n            target, method=method, tolerance=tolerance, limit=limit\n        )\n\n    if self.step > 0:\n        start, stop, step = self.start, self.stop, self.step\n    else:\n        # Work on reversed range for simplicity:\n        start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n\n    target_array = np.asarray(target)\n    if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n        # checks/conversions/roundings are delegated to general method\n        return super().get_indexer(target, method=method, tolerance=tolerance)\n\n    locs = target_array - start\n    valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n    locs[~valid] = -1\n    locs[valid] = locs[valid] / step\n\n    if step != self.step:\n        # We reversed this range: transform to original locs\n        locs[valid] = len(self) - 1 - locs[valid]\n    return ensure_platform_int(locs)\n",
    "1.1.2": null,
    "1.2.1": "class RangeIndex(Int64Index)",
    "1.2.2": "Immutable Index implementing a monotonic integer range.\n\nRangeIndex is a memory-saving special case of Int64Index limited to\nrepresenting monotonic ranges. Using RangeIndex may in some instances\nimprove computing speed.\n\nThis is the default index type used\nby DataFrame and Series when no explicit index is provided by the user.\n\nParameters\n----------\nstart : int (default: 0), or other RangeIndex instance\n    If int and \"stop\" is not given, interpreted as \"stop\" instead.\nstop : int (default: 0)\nstep : int (default: 1)\nname : object, optional\n    Name to be stored in the index\ncopy : bool, default False\n    Unused, accepted for homogeneity with other index types.\n\nAttributes\n----------\nstart\nstop\nstep\n\nMethods\n-------\nfrom_range\n\nSee Also\n--------\nIndex : The base pandas Index type.\nInt64Index : Index of int64 data.",
    "1.2.3": [
        "start(self)",
        "stop(self)",
        "step(self)",
        "get_indexer(self, target, method=None, limit=None, tolerance=None)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/indexes/range.py",
    "1.3.2": [
        "start(self)",
        "stop(self)",
        "step(self)",
        "get_indexer(self, target, method=None, limit=None, tolerance=None)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)",
        "    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/indexes/test_range.py",
        "pandas/tests/indexes/test_range.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: numpy array are different\nE           \nE           numpy array values are different (55.55556 %)\nE           [left]:  [-1, -1, -1, 2, -1, -1, 1, -1, -1]\nE           [right]: [-1, 2, -1, -1, 1, -1, -1, 0, -1]"
        ],
        [
            "E           AssertionError: numpy array are different\nE           \nE           numpy array values are different (55.55556 %)\nE           [left]:  [-1, -1, 2, -1, -1, 1, -1, -1, -1]\nE           [right]: [-1, 2, -1, -1, 1, -1, -1, 0, -1]"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x11ff0ba30>\nstop = 0\n\n    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n>       tm.assert_numpy_array_equal(result, expected)\n\npandas/tests/indexes/test_range.py:433: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([-1, -1, -1,  2, -1, -1,  1, -1, -1])\nright = array([-1,  2, -1, -1,  1, -1, -1,  0, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n>           raise_assert_detail(obj, msg, left, right)",
            "\npandas/util/testing.py:1004: AssertionError"
        ],
        [
            "self = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x12005f1c0>\nstop = -1\n\n    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n>       tm.assert_numpy_array_equal(result, expected)\n\npandas/tests/indexes/test_range.py:433: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([-1, -1,  2, -1, -1,  1, -1, -1, -1])\nright = array([-1,  2, -1, -1,  1, -1, -1,  0, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n>           raise_assert_detail(obj, msg, left, right)",
            "\npandas/util/testing.py:1004: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "target": "range(0, 9)",
                "self.step": "-3",
                "self": "RangeIndex(start=7, stop=0, step=-3)",
                "self.start": "7",
                "self.stop": "0"
            },
            {
                "start": "3",
                "stop": "8",
                "step": "3",
                "target_array": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                "target_array.ndim": "1",
                "locs": "array([-1, -1, -1,  2, -1, -1,  1, -1, -1])",
                "valid": "array([False, False, False,  True, False, False,  True, False, False])"
            }
        ],
        [
            {
                "target": "range(0, 9)",
                "self.step": "-3",
                "self": "RangeIndex(start=7, stop=-1, step=-3)",
                "self.start": "7",
                "self.stop": "-1"
            },
            {
                "start": "2",
                "stop": "8",
                "step": "3",
                "target_array": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                "target_array.ndim": "1",
                "locs": "array([-1, -1,  2, -1, -1,  1, -1, -1, -1])",
                "valid": "array([False, False,  True, False, False,  True, False, False, False])"
            }
        ],
        [
            {
                "target": "range(0, 9)",
                "self.step": "-3",
                "self": "RangeIndex(start=7, stop=-2, step=-3)",
                "self.start": "7",
                "self.stop": "-2"
            },
            {
                "start": "1",
                "stop": "8",
                "step": "3",
                "target_array": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                "target_array.ndim": "1",
                "locs": "array([-1,  2, -1, -1,  1, -1, -1,  0, -1])",
                "valid": "array([False,  True, False, False,  True, False, False,  True, False])"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "target": "range",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int"
            },
            {
                "start": "int",
                "stop": "int",
                "step": "int",
                "target_array": "ndarray",
                "target_array.ndim": "int",
                "locs": "ndarray",
                "valid": "ndarray"
            }
        ],
        [
            {
                "target": "range",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int"
            },
            {
                "start": "int",
                "stop": "int",
                "step": "int",
                "target_array": "ndarray",
                "target_array.ndim": "int",
                "locs": "ndarray",
                "valid": "ndarray"
            }
        ],
        [
            {
                "target": "range",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int"
            },
            {
                "start": "int",
                "stop": "int",
                "step": "int",
                "target_array": "ndarray",
                "target_array.ndim": "int",
                "locs": "ndarray",
                "valid": "ndarray"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "target": "range(0, 9)",
                "self.step": "-3",
                "self": "RangeIndex(start=7, stop=0, step=-3)",
                "self.start": "7",
                "self.stop": "0",
                "self._range": "range(7, 0, -3)"
            },
            {
                "start": "1",
                "stop": "10",
                "step": "3",
                "reverse": "range(1, 10, 3)",
                "reverse.start": "1",
                "reverse.stop": "10",
                "reverse.step": "3",
                "target_array": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                "target_array.ndim": "1",
                "locs": "array([-1,  2, -1, -1,  1, -1, -1,  0, -1])",
                "valid": "array([False,  True, False, False,  True, False, False,  True, False])"
            }
        ],
        [
            {
                "target": "range(0, 9)",
                "self.step": "-3",
                "self": "RangeIndex(start=7, stop=-1, step=-3)",
                "self.start": "7",
                "self.stop": "-1",
                "self._range": "range(7, -1, -3)"
            },
            {
                "start": "1",
                "stop": "10",
                "step": "3",
                "reverse": "range(1, 10, 3)",
                "reverse.start": "1",
                "reverse.stop": "10",
                "reverse.step": "3",
                "target_array": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                "target_array.ndim": "1",
                "locs": "array([-1,  2, -1, -1,  1, -1, -1,  0, -1])",
                "valid": "array([False,  True, False, False,  True, False, False,  True, False])"
            }
        ],
        [
            {
                "target": "range(0, 9)",
                "self.step": "-3",
                "self": "RangeIndex(start=7, stop=-2, step=-3)",
                "self.start": "7",
                "self.stop": "-2",
                "self._range": "range(7, -2, -3)"
            },
            {
                "start": "1",
                "stop": "10",
                "step": "3",
                "reverse": "range(1, 10, 3)",
                "reverse.start": "1",
                "reverse.stop": "10",
                "reverse.step": "3",
                "target_array": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                "target_array.ndim": "1",
                "locs": "array([-1,  2, -1, -1,  1, -1, -1,  0, -1])",
                "valid": "array([False,  True, False, False,  True, False, False,  True, False])"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "target": "range",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int",
                "self._range": "range"
            },
            {
                "start": "int",
                "stop": "int",
                "step": "int",
                "reverse": "range",
                "reverse.start": "int",
                "reverse.stop": "int",
                "reverse.step": "int",
                "target_array": "ndarray",
                "target_array.ndim": "int",
                "locs": "ndarray",
                "valid": "ndarray"
            }
        ],
        [
            {
                "target": "range",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int",
                "self._range": "range"
            },
            {
                "start": "int",
                "stop": "int",
                "step": "int",
                "reverse": "range",
                "reverse.start": "int",
                "reverse.stop": "int",
                "reverse.step": "int",
                "target_array": "ndarray",
                "target_array.ndim": "int",
                "locs": "ndarray",
                "valid": "ndarray"
            }
        ],
        [
            {
                "target": "range",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int",
                "self._range": "range"
            },
            {
                "start": "int",
                "stop": "int",
                "step": "int",
                "reverse": "range",
                "reverse.start": "int",
                "reverse.stop": "int",
                "reverse.step": "int",
                "target_array": "ndarray",
                "target_array.ndim": "int",
                "locs": "ndarray",
                "valid": "ndarray"
            }
        ]
    ],
    "3.1.1": [
        "BUG: RangeIndex.get_indexer is incorrect for some decreasing RangeIndex\n"
    ],
    "3.1.2": [
        "For some decreasing RangeIndex, the get_indexer method will indicate that all of it's own values are missing, and find matches for values not included in the index:\n\nIn [2]: ri = pd.RangeIndex(10, 0, -3)\n\nIn [3]: ri.get_indexer(ri)\nOut[3]: array([-1, -1, -1, -1])\n\nIn [4]: ri.get_indexer(ri - 1)\nOut[4]: array([ 1,  2,  3, -1])\nThis will in turn result in methods like Series.reindex not working properly:\n\nIn [5]: s = pd.Series(list('abcd'), index=ri) \n\nIn [6]: s\nOut[6]: \n10    a\n7     b\n4     c\n1     d\ndtype: object\n\nIn [7]: s.reindex([10, 9, 7])\nOut[7]: \n10    NaN\n9       b\n7     NaN\ndtype: object\nThe issue appears to occur specifically for decreasing RangeIndex that are not in their canonical form. By canonical form, I mean when stop is the next valid value in the range that's not included, e.g. when you think of a more standard range like range(1, 7, 1), 7 is the next valid value that's not present, but when the step is larger than 1 you lose uniqueness of representation with stop (i.e. range(1, 6, 2) == range(1, 7, 2)).\n\nNote that the code above works properly for the equivalent RangeIndex in it's canonical form:\n\nIn [8]: ri2 = pd.RangeIndex(start=10, stop=-2, step=-3)\n\nIn [9]: ri2.equals(ri)\nOut[9]: True\n\nIn [10]: ri2.get_indexer(ri2)\nOut[10]: array([0, 1, 2, 3])\n\nIn [11]: ri2.get_indexer(ri2 - 1)\nOut[11]: array([-1, -1, -1, -1])\n\nIn [12]: s2 = pd.Series(list('abcd'), index=ri2)\n\nIn [13]: s2\nOut[13]: \n10    a\n7     b\n4     c\n1     d\ndtype: object\n\nIn [14]: s2.reindex([10, 9, 7])\nOut[14]: \n10      a\n9     NaN\n7       b\ndtype: object\nThe cause of the issue appears to be that the code to determine start, stop, step when dealing with decreasing RangeIndex in get_indexer assumes self.stop is the canonical form:\n\npandas/pandas/core/indexes/range.py\n\nLines 386 to 390 in c4489cb\n\n if self.step > 0: \n     start, stop, step = self.start, self.stop, self.step \n else: \n     # Work on reversed range for simplicity: \n     start, stop, step = (self.stop - self.step, self.start + 1, -self.step) \nInstead of directly computing the reversed values ourselves, I think we should simply take the values from the reversed underlying range object:\n\ndiff --git a/pandas/core/indexes/range.py b/pandas/core/indexes/range.py\nindex 8783351cc..4c5904e5a 100644\n--- a/pandas/core/indexes/range.py\n+++ b/pandas/core/indexes/range.py\n@@ -387,7 +387,8 @@ class RangeIndex(Int64Index):\n             start, stop, step = self.start, self.stop, self.step\n         else:\n             # Work on reversed range for simplicity:\n-            start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n+            reverse = self._range[::-1]\n+            start, stop, step = reverse.start, reverse.stop, reverse.step\n \n         target_array = np.asarray(target)\n         if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n"
    ]
}