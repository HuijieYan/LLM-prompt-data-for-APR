{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n        # input must be a ndarray, list, Series, index\n    from pandas.api.types import is_scalar, is_list_like, is_dict_like\n    from pandas.api.types import is_datetimelike   # ensure this as type or method exist\n    \n    if is_scalar(values) or isinstance(values, str):\n        values = np.asarray([values])\n    elif is_list_like(values) and not (is_dict_like(values)):\n        if len(values) > 0 and is_datetimelike(values[0]):\n            values = np.array(values, dtype=dtype)\n        else:\n            values = values\n    elif is_dict_like(values):\n        raise ValueError(\"If using all scalar values, you must pass an index\")\n    else:\n        values = values\n    \n    if index is None:\n        index = RangeIndex(len(values))\n    else:\n        index = ensure_index(index)\n    \n    if columns is None:\n        if not is_list_like(values) and not is_dict_like(values):\n            # i.e. scalar (if list-like); for example\n            column = [\"0\"]\n        else:\n            if is_datetimelike(values[0]) and isinstance(values[0], (DatetimeTZDtype, Timestamp)):\n                column = [\"fromTS{0}\".format(i) for i in range(len(values))]\n            else:\n                column = ['0'] if len(values) < 2 else [\"from{0}\".format(0)]\n    else:\n        column = ensure_index(columns)\n        if len(column) != len(np.atleast_1d(values)):\n            # we have to check the the length to ensure the not fall on the side\n            column = [str(series) for series in range(len(values), dtype=dtype)]\n        else:\n            column = column\n    \n    # if dtype is specified for arrays_to_mgr then the dtype of the returned DataFrame should be same as that of the data\n    if is_scalar(values) or is_list_like(values):\n        return arrays_to_mgr([values], index, array(columns), dtype=dtype)\n    elif isinstance(values, (list, np.ndarray)):\n        dataframe = DataFrame(values, index=index, columns=columns)\n        if dtype is not None:\n            if len(dataframe.columns) == dtype(1):\n                return DataFrame(dataframe, dtype=dtype)\n            else:\n                return DataFrame(np.squeeze(values), index=index, columns=columns, dtype=str(dtype))\n        else:\n            if dtype is None or len(dataframe.index) == len(dataframe.values) or len(dataframe.index) > len(dataframe.values):\n                return DataFrame(dataframe.values, index=index, columns=column)\n    else:\n        return values",
            "imports": [
                "from pandas.api.types import is_scalar, is_list_like, is_dict_like",
                "from pandas.api.types import is_datetimelike"
            ]
        }
    ]
}