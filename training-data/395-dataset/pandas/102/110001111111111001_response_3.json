{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    from pandas.api.types import is_categorical_dtype, is_extension_array_dtype, is_object_dtype, is_dtype_equal\n    from pandas.core.indexes.range import RangeIndex\n    from pandas.core.internals.blocks import create_block_manager_from_blocks\n    from pandas.core.series import ABCSeries\n    import numpy as np\n    if index is None:\n        index = RangeIndex(start=0, stop=values.shape[0], step=1)\n    \n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(dtype):\n        if not hasattr(values, \"dtype\"):\n            values = prep_ndarray(values, copy=copy)\n            values = values.ravel()\n        elif copy:\n            values = values.copy()\n    \n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    \n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        if columns is None:\n            columns = [0]\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    \n    else:\n        if dtype is not None:\n            if not is_dtype_equal(values.dtype, dtype):\n                try:\n                    values = values.astype(dtype)\n                except Exception as orig:\n                    raise ValueError(\n                        f\"Failed to cast to '{dtype}' (Exception was: {orig})\"\n                    ) from orig\n    \n        values = values.T\n    \n        result_columns = columns if columns is not None else RangeIndex(start=0, stop=values.shape[0], step=1)\n    \n        if is_object_dtype(values):\n            block_values = [values]\n        else:\n            block_values = [values]\n    \n        return create_block_manager_from_blocks(block_values, [result_columns, index])"
        }
    ]
}