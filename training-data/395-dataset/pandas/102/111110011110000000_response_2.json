{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index=None, columns=None, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n\n # check if the values passed is an instance of ABCSeries\n    import numpy as np\n    import pandas as pd\n    from pandas.api.types import is_categorical_dtype, is_object_dtype\n    from pandas.core.dtypes.common import is_dtype_equal, is_extension_array_dtype, is_list_like\n    from pandas.core.arrays.base import arrays_to_mgr\n    from pandas.core.arrays.categorical import _get_axes\n    from pandas.core.dtypes.dtypes import CategoricalDtype\n    from pandas.core.series import ABCSeries\n    from pandas.core.indexes.base import Index\n    from pandas.core import internals\n    from pandas.core.arrays.base import ExtensionArray\n    from pandas._libs.internals import create_block_manager_from_blocks, maybe_infer_to_datetimelike, prepare_block\n    from pandas.core.internals.blocks import make_block\n    if isinstance(values, ABCSeries):\n        # check if the 'columns' parameter is None and assign value to 'columns'\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        # check if the 'index' parameter is None and assign value to 'index'\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n    \n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n    \n    # we could have a categorical type passed or coerced to 'category'\n    # recast this to an arrays_to_mgr\n    # check if the values is a categorical dtype\n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(\n        dtype\n    ):\n      # check for the values attribute and take action\n        if not hasattr(values, \"dtype\"):\n            values = prepare_block(values, copy=copy)\n            values = values.ravel()\n        elif copy: # check if copy is True\n            values = values.copy()\n    \n        # passing len of values,index and columns to _get_axes function\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        # GH#19157\n        if columns is None: # check if columns is none and take action to assign value to columns\n            columns = [0]\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    \n    # by definition an array here\n    # the dtypes will be coerced to a single dtype\n    values = prepare_block(values, copy=copy)\n    \n    if dtype is not None: # check if dtype is not none and assign value to values if True\n        if not is_dtype_equal(values.dtype, dtype):\n            try:\n                values = values.astype(dtype)\n            except Exception as orig:\n                # e.g. ValueError when trying to cast object dtype to float64\n                raise ValueError(\n                    f\"failed to cast to '{dtype}' (Exception was: {orig})\"\n                ) from orig\n    \n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n    \n    # if we don't have a dtype specified, then try to convert objects\n    # on the entire block; this is to convert if we have datetimelike's\n    # embedded in an object type\n    if dtype is None and is_object_dtype(values):\n    \n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n            dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n    \n            from pandas.core.internals.blocks import make_block\n    \n            # TODO: What about reverse-joining object columns?\n            block_values = [\n                make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n            ]\n    \n        else:\n            datelike_vals = maybe_infer_to_datetimelike(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n    \n    return create_block_manager_from_blocks(block_values, [columns, index])"
        }
    ]
}