{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n        # input must be a ndarray, list, Series, index\n        \n        if isinstance(values, ABCSeries):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n        \n            # zero len case (GH #2234)\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n        \n        # we could have a categorical type passed or coerced to 'category'\n        # recast this to an arrays_to_mgr\n        if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(\n            dtype\n        ):\n        \n            if not hasattr(values, \"dtype\"):\n                values = prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n        \n            index, columns = _get_axes(len(values), 1, index, columns)\n            if dtype is None or is_dtype_equal(values.dtype, dtype):\n                return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n            try:\n                values = values.astype(dtype)\n            except Exception as orig:\n                raise ValueError(\n                    f\"failed to cast to '{dtype}' (Exception was: {orig})\"\n                ) from orig\n        elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n            # GH#19157\n            if columns is None:\n                columns = [0]\n        \n        block_values = [values]\n        \n        return create_block_manager_from_blocks(block_values, [columns, index])",
            "imports": []
        }
    ]
}