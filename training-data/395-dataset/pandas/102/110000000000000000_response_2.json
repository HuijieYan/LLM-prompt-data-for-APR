{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index=None, columns=None, dtype=None, copy=False):\n    if isinstance(values, ABCSeries):\n        if columns is None:\n            columns = [values.name] if values.name is not None else None\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n\n        if len(values) == 0 and columns and len(columns):\n            values = np.empty((0, 1), dtype=object)\n    elif is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(dtype):\n        values = values if hasattr(values, \"dtype\") else prep_ndarray(values, copy=copy).ravel() if copy else values.copy()\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        columns = [0] if columns is None else columns\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    values = prep_ndarray(values, copy=copy)\n    if dtype and not is_dtype_equal(values.dtype, dtype):\n        try:\n            values = values.astype(dtype)\n        except Exception as orig:\n            raise ValueError(f\"failed to cast to '{dtype}' (Exception was: {orig})\") from orig\n\n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n    if dtype is None and is_object_dtype(values):\n        if values.ndim == 2 and values.shape[0] != 1:\n            dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n            from pandas.core.internals.blocks import make_block\n            block_values = [make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))]\n\n        else:\n            datelike_vals = maybe_infer_to_datetimelike(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n\n    return create_block_manager_from_blocks(block_values, [columns, index])",
            "import_list": [
                "import numpy as np",
                "from pandas.api.types import is_categorical_dtype, is_extension_array_dtype",
                "from pandas.core.dtypes.common import is_dtype_equal",
                "from pandas.core.dtypes.generic import ABCSeries",
                "from pandas.core.internals.managers import create_block_manager_from_blocks",
                "from pandas.core.series import Series",
                "from pandas.core.arrays.categorical import is_dtype_equal as is_categorical_dtype",
                "from pandas.core.internals.blocks import make_block"
            ]
        }
    ]
}