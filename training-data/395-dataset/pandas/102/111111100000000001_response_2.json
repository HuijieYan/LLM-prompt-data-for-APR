{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    if isinstance(values, (pd.Series, np.ndarray, list)):\n        if isinstance(values, pd.Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n\n        if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(dtype):\n            if not hasattr(values, \"dtype\"):\n                values = np.array(values, copy=copy).ravel()\n            elif copy:\n                values = values.copy()\n\n            index, columns = _get_axes(len(values), 1, index, columns)\n            return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n\n        elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n            if columns is None:\n                columns = [0]\n            return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n\n        else:\n            values = np.array(values, copy=copy)\n\n            if dtype is not None:\n                if not is_dtype_equal(values.dtype, dtype):\n                    try:\n                        values = values.astype(dtype)\n                    except Exception as orig:\n                        raise ValueError(f\"failed to cast to '{dtype}' (Exception was: {orig})\") from orig\n\n            index, columns = _get_axes(*values.shape, index=index, columns=columns)\n            values = values.T\n\n            if is_object_dtype(values):\n                if values.ndim == 2 and values.shape[0] != 1:\n                    dvals_list = [recursive_pad(maybe_infer_to_datetimelike(row)) for row in values]\n                    block_values = [make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))]\n                else:\n                    datelike_vals = recursive_pad(maybe_infer_to_datetimelike(values))\n                    block_values = [datelike_vals]\n            else:\n                block_values = [values]\n\n            return create_block_manager_from_blocks(block_values, [columns, index])",
            "import_list": [
                "import numpy as np",
                "from pandas.api.types import is_categorical_dtype, is_extension_array_dtype",
                "from pandas.core.dtypes.common import is_dtype_equal, is_object_dtype",
                "from pandas.core.indexers import _get_set_subset_indexer",
                "from pandas.core.arrays import Categorical, ExtensionArray",
                "from pandas._sparse.array import BlockIndex",
                "from pandas.core.internals.blocks import make_block",
                "from pandas.core.indexers import recursive_pad",
                "from pandas.util._decorators import deprecate_kwarg"
            ]
        }
    ]
}