{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n\n    # input must be a ndarray, list, Series, and index\n    # check if input is a pandas Series\n    from pandas.core.series import ABCSeries\n\n    if isinstance(values, (ABCSeries, list, np.ndarray)):\n        if isinstance(values, ABCSeries):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n\n            # zero len case (GH #2234)\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n\n        # we could have a categorical type passed or coerced to 'category'\n        # recast this to an arrays_to_mgr\n\n        from pandas.api.types import is_categorical_dtype, is_object_dtype\n        values_dtype = getattr(values, \"dtype\", None)\n\n        if is_categorical_dtype(values_dtype) or is_categorical_dtype(dtype):\n            from pandas.core.indexes.api import _get_axes\n            from pandas.core.internals.construction import arrays_to_mgr\n            if not hasattr(values, \"dtype\"):\n                values = pd.core.construction.prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n\n            index, columns = _get_axes(len(values), 1, index, columns)\n            return arrays_to_mgr([values], [columns, index], columns, index, dtype=dtype)\n\n        from pandas.api.types import is_extension_array_dtype\n        if is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n            # GH#19157\n            from pandas.core.internals.construction import arrays_to_mgr\n            if columns is None:\n                columns = [0]\n            return arrays_to_mgr([values], [columns, index], columns, index, dtype=dtype)\n\n        # by definition an array here\n        # the dtypes will be coerced to a single dtype\n        from pandas.core.internals.construction import prep_ndarray\n        from pandas.core.internals.construction import _get_axes\n        values = prep_ndarray(values, dtype=dtype, copy=copy)\n\n        if dtype is not None:\n            from pandas.core.dtypes.common import is_dtype_equal\n            if not is_dtype_equal(values.dtype, dtype):\n                try:\n                    from pandas.api.types import infer_dtype_from_scalar\n                    values = values.astype(infer_dtype_from_scalar(dtype))\n                except Exception as orig:\n                    # e.g. ValueError when trying to cast object dtype to float64\n                    raise ValueError(\n                        f\"failed to cast to '{infer_dtype_from_scalar(dtype)}' (Exception was: {orig})\"\n                    ) from orig\n\n        from pandas.core.internals.construction import _get_axes\n        index, columns = _get_axes(*values.shape, index=index, columns=columns)\n        values = values.T\n\n        # if we don't have a dtype specified, then try to convert objects\n        # on the entire block; this is to convert if we have datetimelike's\n        # embedded in an object type\n        if dtype is None and is_object_dtype(values):\n            from pandas.core.internals.construction import maybe_infer_to_datetimelike, create_block_manager_from_blocks\n            if values.ndim == 2 and values.shape[0] != 1:\n                # transpose and separate blocks\n                dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n                for n in range(len(dvals_list)):\n                    if isinstance(dvals_list[n], np.ndarray):\n                        dvals_list[n] = dvals_list[n].reshape(1, -1)\n\n                from pandas.core.internals.blocks import make_block\n\n                # TODO: What about re-joining object columns?\n                block_values = [\n                    make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n                ]\n\n            else:\n                datelike_vals = maybe_infer_to_datetimelike(values)\n                block_values = [datelike_vals]\n        else:\n            from pandas.core.internals.construction import create_block_manager_from_blocks\n            block_values = [values]\n\n        return create_block_manager_from_blocks(block_values, [columns, index])\n    else:\n        raise ValueError(f\"values must be an ndarray, list, Series, or index; \"\n                         f\"you passed a {type(values).__name__}\")",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.series import ABCSeries",
                "from pandas.api.types import is_categorical_dtype, is_object_dtype",
                "from pandas.api.types import is_extension_array_dtype",
                "from pandas.core.internals.construction import prep_ndarray",
                "from pandas.core.internals.construction import _get_axes",
                "from pandas.core.internals.construction import _get_axes",
                "from pandas.core.indexes.api import _get_axes",
                "from pandas.core.internals.construction import arrays_to_mgr",
                "from pandas.core.internals.construction import arrays_to_mgr",
                "from pandas.core.dtypes.common import is_dtype_equal",
                "from pandas.core.internals.construction import maybe_infer_to_datetimelike, create_block_manager_from_blocks",
                "from pandas.core.internals.construction import create_block_manager_from_blocks",
                "from pandas.core.internals.blocks import make_block",
                "from pandas.api.types import infer_dtype_from_scalar"
            ]
        }
    ]
}