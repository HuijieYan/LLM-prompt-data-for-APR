{
    "1.1.1": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n\n    if isinstance(values, ABCSeries):\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n\n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n\n    # we could have a categorical type passed or coerced to 'category'\n    # recast this to an arrays_to_mgr\n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(\n        dtype\n    ):\n\n        if not hasattr(values, \"dtype\"):\n            values = prep_ndarray(values, copy=copy)\n            values = values.ravel()\n        elif copy:\n            values = values.copy()\n\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        # GH#19157\n        if columns is None:\n            columns = [0]\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n\n    # by definition an array here\n    # the dtypes will be coerced to a single dtype\n    values = prep_ndarray(values, copy=copy)\n\n    if dtype is not None:\n        if not is_dtype_equal(values.dtype, dtype):\n            try:\n                values = values.astype(dtype)\n            except Exception as orig:\n                # e.g. ValueError when trying to cast object dtype to float64\n                raise ValueError(\n                    f\"failed to cast to '{dtype}' (Exception was: {orig})\"\n                ) from orig\n\n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n\n    # if we don't have a dtype specified, then try to convert objects\n    # on the entire block; this is to convert if we have datetimelike's\n    # embedded in an object type\n    if dtype is None and is_object_dtype(values):\n\n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n\n            dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n\n            from pandas.core.internals.blocks import make_block\n\n            # TODO: What about re-joining object columns?\n            block_values = [\n                make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n            ]\n\n        else:\n            datelike_vals = maybe_infer_to_datetimelike(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n\n    return create_block_manager_from_blocks(block_values, [columns, index])\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/internals/construction.py",
    "1.3.2": [
        "arrays_to_mgr(arrays, arr_names, index, columns, dtype=None)",
        "prep_ndarray(values, copy=True) -> np.ndarray",
        "_get_axes(N, K, index, columns)"
    ],
    "1.4.1": [
        "    def test_from_2d_ndarray_with_dtype(self):\n        # GH#12513\n        array_dim2 = np.arange(10).reshape((5, 2))\n        df = pd.DataFrame(array_dim2, dtype=\"datetime64[ns, UTC]\")\n\n        expected = pd.DataFrame(array_dim2).astype(\"datetime64[ns, UTC]\")\n        tm.assert_frame_equal(df, expected)"
    ],
    "1.4.2": [
        "pandas/tests/frame/test_constructors.py"
    ],
    "2.1.1": [
        [
            "E               ValueError: If using all scalar values, you must pass an index"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ object at 0x11d6a4dc0>\n\n    def test_from_2d_ndarray_with_dtype(self):\n        # GH#12513\n        array_dim2 = np.arange(10).reshape((5, 2))\n>       df = pd.DataFrame(array_dim2, dtype=\"datetime64[ns, UTC]\")\n\npandas/tests/frame/test_constructors.py:2558: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:458: in __init__\n    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\npandas/core/internals/construction.py:157: in init_ndarray\n    return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\npandas/core/internals/construction.py:64: in arrays_to_mgr\n    index = extract_index(arrays)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata = [array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])]\n\n    def extract_index(data):\n        index = None\n        if len(data) == 0:\n            index = Index([])\n        elif len(data) > 0:\n            raw_lengths = []\n            indexes = []\n    \n            have_raw_arrays = False\n            have_series = False\n            have_dicts = False\n    \n            for val in data:\n                if isinstance(val, ABCSeries):\n                    have_series = True\n                    indexes.append(val.index)\n                elif isinstance(val, dict):\n                    have_dicts = True\n                    indexes.append(list(val.keys()))\n                elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:\n                    have_raw_arrays = True\n                    raw_lengths.append(len(val))\n    \n            if not indexes and not raw_lengths:\n>               raise ValueError(\"If using all scalar values, you must pass an index\")",
            "\npandas/core/internals/construction.py:347: ValueError"
        ]
    ],
    "2.1.3": [
        [
            {
                "values": {
                    "value": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])",
                    "shape": "(5, 2)"
                },
                "dtype": {
                    "value": "datetime64[ns, UTC]",
                    "shape": "()"
                },
                "copy": {
                    "value": "False",
                    "shape": null
                },
                "values.dtype": {
                    "value": "dtype('int64')",
                    "shape": "()"
                },
                "values.shape": {
                    "value": "(5, 2)",
                    "shape": "2"
                },
                "values.T": {
                    "value": "array([[0, 2, 4, 6, 8],\n       [1, 3, 5, 7, 9]])",
                    "shape": "(2, 5)"
                },
                "values.ndim": {
                    "value": "2",
                    "shape": null
                }
            },
            {
                "columns": {
                    "value": "[0]",
                    "shape": "1"
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "values": "ndarray",
                "dtype": "DatetimeTZDtype",
                "copy": "bool",
                "values.dtype": "dtype",
                "values.shape": "tuple",
                "values.T": "ndarray",
                "values.ndim": "int"
            },
            {
                "columns": "list"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "values": {
                    "value": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])",
                    "shape": "(5, 2)"
                },
                "dtype": {
                    "value": "datetime64[ns, UTC]",
                    "shape": "()"
                },
                "copy": {
                    "value": "False",
                    "shape": null
                },
                "values.ndim": {
                    "value": "2",
                    "shape": null
                },
                "values.shape": {
                    "value": "(5, 2)",
                    "shape": "2"
                },
                "values.dtype": {
                    "value": "dtype('int64')",
                    "shape": "()"
                },
                "values.T": {
                    "value": "array([[0, 2, 4, 6, 8],\n       [1, 3, 5, 7, 9]])",
                    "shape": "(2, 5)"
                }
            },
            {
                "values": {
                    "value": "[array([0, 2, 4, 6, 8]), array([1, 3, 5, 7, 9])]",
                    "shape": "2"
                },
                "columns": {
                    "value": "[0, 1]",
                    "shape": "2"
                }
            }
        ],
        [
            {
                "values": {
                    "value": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])",
                    "shape": "(5, 2)"
                },
                "copy": {
                    "value": "False",
                    "shape": null
                },
                "values.ndim": {
                    "value": "2",
                    "shape": null
                },
                "values.shape": {
                    "value": "(5, 2)",
                    "shape": "2"
                },
                "values.dtype": {
                    "value": "dtype('int64')",
                    "shape": "()"
                },
                "values.T": {
                    "value": "array([[0, 2, 4, 6, 8],\n       [1, 3, 5, 7, 9]])",
                    "shape": "(2, 5)"
                }
            },
            {
                "values": {
                    "value": "array([[0, 2, 4, 6, 8],\n       [1, 3, 5, 7, 9]])",
                    "shape": "(2, 5)"
                },
                "columns": {
                    "value": "RangeIndex(start=0, stop=2, step=1)",
                    "shape": "(2,)"
                },
                "index": {
                    "value": "RangeIndex(start=0, stop=5, step=1)",
                    "shape": "(5,)"
                },
                "values.shape": {
                    "value": "(2, 5)",
                    "shape": "2"
                },
                "values.T": {
                    "value": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])",
                    "shape": "(5, 2)"
                },
                "block_values": {
                    "value": "[array([[0, 2, 4, 6, 8],\n       [1, 3, 5, 7, 9]])]",
                    "shape": "1"
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "values": "ndarray",
                "dtype": "DatetimeTZDtype",
                "copy": "bool",
                "values.ndim": "int",
                "values.shape": "tuple",
                "values.dtype": "dtype",
                "values.T": "ndarray"
            },
            {
                "values": "list",
                "columns": "list"
            }
        ],
        [
            {
                "values": "ndarray",
                "copy": "bool",
                "values.ndim": "int",
                "values.shape": "tuple",
                "values.dtype": "dtype",
                "values.T": "ndarray"
            },
            {
                "values": "ndarray",
                "columns": "RangeIndex",
                "index": "RangeIndex",
                "values.shape": "tuple",
                "values.T": "ndarray",
                "block_values": "list"
            }
        ]
    ],
    "3.1.1": [
        "BUG: DataFrame constructor raises error if specify tz dtype dtype='datetime64[ns, UTC]'\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nimport pandas as pd\nimport numpy as np\narray_dim2 = np.arange(10).reshape((5, 2))\ndf = pd.DataFrame(array_dim2 , dtype='datetime64[ns, UTC]') # doesn't work\nThe error:\n\nTypeError                                 Traceback (most recent call last)\n<ipython-input-4-7101cf798aa3> in <module>()\n----> 1 df = pd.DataFrame(array_dim2 , dtype='datetime64[ns, UTC]')\n\nC:\\D\\Projects\\Github\\pandas\\pandas\\core\\frame.py in __init__(self, data, index,\ncolumns, dtype, copy)\n    252             else:\n    253                 mgr = self._init_ndarray(data, index, columns, dtype=dty\npe,\n--> 254                                          copy=copy)\n    255         elif isinstance(data, (list, types.GeneratorType)):\n    256             if isinstance(data, types.GeneratorType):\n\nC:\\D\\Projects\\Github\\pandas\\pandas\\core\\frame.py in _init_ndarray(self, values,\nindex, columns, dtype, copy)\n    412\n    413         if dtype is not None:\n--> 414             if values.dtype != dtype:\n    415                 try:\n    416                     values = values.astype(dtype)\n\nTypeError: data type not understood\nExpected Output\nIn [5]: df = pd.DataFrame(array_dim2 , dtype='datetime64[ns, UTC]')\n\nIn [6]: df\nOut[6]:\n                              0                                           1\n0 1970-01-01 00:00:00.000000000+00:00 1970-01-01 00:00:00.000000001+00:00\n1 1970-01-01 00:00:00.000000002+00:00 1970-01-01 00:00:00.000000003+00:00\n2 1970-01-01 00:00:00.000000004+00:00 1970-01-01 00:00:00.000000005+00:00\n3 1970-01-01 00:00:00.000000006+00:00 1970-01-01 00:00:00.000000007+00:00\n4 1970-01-01 00:00:00.000000008+00:00 1970-01-01 00:00:00.000000009+00:00\n"
    ]
}