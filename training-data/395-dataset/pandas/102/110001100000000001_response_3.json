{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index=None, columns=None, dtype=None, copy=False):\n    if isinstance(values, (np.ndarray, list, Series, ABCSeries, ExtensionArray)):\n        if isinstance(values, ABCSeries):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n\n            if not len(values) and columns is not None and len(columns):  # zero len case (GH #2234)\n                values = np.empty((0, 1), dtype=object)\n\n        if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(dtype):\n            if not hasattr(values, \"dtype\"):\n                values = prep_ndarray(values, copy=copy)\n            index, columns = _get_axes(N=1, K=len(values), index=index, columns=columns)\n            return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n        elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n            if columns is None:\n                columns = [0]\n            return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n\n        values = prep_ndarray(values, copy=copy)\n        if not isna(dtype):\n            values = values.astype(dtype, copy=False)\n        index, columns = _get_axes(N=values.shape[0], K=values.shape[1], index=index, columns=columns)\n        return create_block_manager_from_blocks([values], [columns, index])\n    else:\n        raise ValueError(\"Input must be a ndarray, list, Series, or index\")",
            "imports": [
                "from pandas.core.arrays.categorical import is_categorical_dtype",
                "from pandas.core.series import Series",
                "import numpy as np",
                "from pandas.core.dtypes.common import is_extension_array_dtype",
                "from pandas.core.dtypes.dtypes import is_object_dtype",
                "from pandas.core.dtypes.missing import isna",
                "from pandas.core.indexes.api import ensure_index",
                "from pandas.core.series import ABCSeries",
                "from pandas.core.arrays.base import ExtensionArray"
            ]
        }
    ]
}