{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index=None, columns=None, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n    if isinstance(values, (np.ndarray, list, Series, ABCSeries, SparseSeries, Index)):\n        if isinstance(index, Block):\n            if len(index) != len(values):\n                raise ValueError(\"index' length and ndarray's length are different\")\n        if isinstance(columns, Block):\n            if len(columns) != len(values.T):\n                raise ValueError(\"columns' length and ndarray's length are different\")\n        \n        values = extract_array(values, extract_numpy=True)\n        index, columns = ensure_index(index), ensure_index(columns)\n        dtypes = ensure_dtype(dtypes)\n        if is_any_array_dtype(typ):\n            return Block(typ, values, ndim=na_index.ndim, placement=na_index.placement)\n        return make_block(values, placement=placement, ndim=ndim)\n    \n    else:\n        raise ValueError(\"Input must be a ndarray, list, Series, Index or ndarray-like\")",
            "imports": [
                "import numpy as np",
                "from pandas.core.arrays.categorical import is_categorical_dtype",
                "from pandas.core.arrays.base import is_extension_array_dtype",
                "from pandas.api.types import is_object_dtype",
                "from pandas.core.arrays.sparse.dtype import is_dtype_equal",
                "from pandas import Series",
                "from pandas.core.indexing import is_label_like",
                "from pandas.core.dtypes.common import ensure_str, is_categorical_dtype",
                "from pandas.core.generic import ABCSeries",
                "from pandas.core.internals.blocks import create_block_manager_from_blocks, make_block",
                "from pandas.core.internals.managers import arrays_to_mgr",
                "from pandas.core.internals.construction import maybe_infer_to_datetimelike",
                "from pandas.core.arrays.sparse import SparseDtype",
                "from pandas.core.construction import extract_array",
                "from pandas.core.dtypes.common import is_categorical_dtype",
                "from pandas.core import algorithms",
                "from pandas.core import common as com",
                "from pandas.core.dtypes.cast import find_common_type",
                "import numpy as np"
            ]
        }
    ]
}