{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n\n    import numpy as np\n    from pandas.core.dtypes.common import is_categorical_dtype, is_extension_array_dtype, is_object_dtype\n    from pandas.core.dtypes.inference import (is_dtype_equal, is_list_like, maybe_infer_to_datetimelike, \n    _get_dtype_type, extract_index, prep_ndarray, _possibly_cast_to_datetime)\n    from pandas.core.dtypes.missing import isna, notna, na_value_for_dtype\n    from pandas.core.indexers import maybe_convert_indices\n    from pandas.core.missing import array_equivalent\n    from pandas.core.tools.numeric import to_numeric\n    from pandas.core.arrays.categorical import Categorical\n    from pandas.core.arrays.datetimes import DatetimeArray\n    from pandas.core.arrays.masked import BaseMaskedArray\n    from pandas.core.arrays.sparse import SparseArray\n    from pandas.core.internals import (arrays_to_mgr, create_block_manager_from_blocks, extract_array, get_combined_index, \n    get_blockarr_manager, make_block, _missing_ctypes, _rec_to_generichint, _stack_arrays)\n    from pandas.core.algorithms import unique1d\n    from pandas.core.indexes.base import Index\n    import numpy as np\n    from pandas.core.dtypes.common import is_categorical_dtype, is_extension_array_dtype, is_object_dtype\n    from pandas.core.dtypes.inference import (is_dtype_equal, is_list_like, maybe_infer_to_datetimelike, \n    _get_dtype_type, extract_index, prep_ndarray, _possibly_cast_to_datetime)\n    from pandas.core.dtypes.missing import isna, notna, na_value_for_dtype\n    from pandas.core.indexers import maybe_convert_indices\n    from pandas.core.missing import array_equivalent\n    from pandas.core.tools.numeric import to_numeric\n    from pandas.core.arrays.categorical import Categorical\n    from pandas.core.arrays.datetimes import DatetimeArray\n    from pandas.core.arrays.masked import BaseMaskedArray\n    from pandas.core.arrays.sparse import SparseArray\n    from pandas.core.internals import (arrays_to_mgr, create_block_manager_from_blocks, extract_array, get_combined_index, \n    get_blockarr_manager, make_block, _missing_ctypes, _rec_to_generichint, _stack_arrays)\n    from pandas.core.algorithms import unique1d\n    from pandas.core.indexes.base import Index\n    \n    if not is_list_like(values):\n        values = [values]\n    \n    if isinstance(values, np.ndarray) and values.ndim == 1:\n        values = [values]\n    \n    # input must be a ndarray, list, Index, Series, or range\n    if not is_list_like(index):\n        index = [index]\n    \n    if columns is None:\n        columns = list(range(len(values) if values else 0))\n    \n    # if we got a list input; convert the strings to objects with index.\n    i = extract_index(values)\n    if not i.equals(index):\n        raise ValueError(\"Index must match len(values)\")\n    \n    values = to_numeric(values)\n    \n    mgr = create_block_manager_from_blocks([values], [columns, index], is_unique=True)\n    return mgr"
        }
    ]
}