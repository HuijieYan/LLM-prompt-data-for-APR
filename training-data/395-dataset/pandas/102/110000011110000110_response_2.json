{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype= None, copy= False):\n    from numpy import array\n    from numpy import array\n    _AXIS_LEN = array([0, 1])\n    \n    def is_categorical_dtype(ndarray):\n        pass\n    \n    def is_extension_array_dtype(ndarray):\n        pass\n    \n    def prep_ndarray(ndarray, copy= False):\n        pass\n    \n    def create_block_manager_from_blocks(data, axes) -> pd.core.internals.managers.BlockManager:\n        pass\n    \n    def maybe_infer_to_datetimelike(val) -> pd.DataFrame:\n        pass\n    \n    def _get_axes(*args) -> tuple:\n        return (None, None)\n    \n    if isinstance(values, pd.core.series.Series):\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n    \n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype= np.object)\n    \n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(dtype):\n        if not hasattr(values, \"dtype\"):\n            values = prep_ndarray(values, copy=copy)\n            values = values.ravel()\n        elif copy:\n            values = values.copy()\n    \n        index, columns = _get_axes(len(values), 1, index, columns)\n        return create_block_manager_from_blocks([values], [columns, index])\n    \n    if is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        if columns is None:\n            columns = [0]\n        return create_block_manager_from_blocks([values], [columns, index])\n    \n    values = prep_ndarray(values, copy=copy)\n    \n    if dtype is not None:\n        if not np.all(values.dtype == dtype):\n            try:\n                values = values.astype(dtype)\n            except Exception as e:\n                raise ValueError(f'failed to cast to {dtype} ({e})') from e\n    \n    index, columns = _get_axes(*values.shape)\n    \n    if dtype is None and np.dtype(object) == values.dtype:\n        block_values = [maybe_infer_to_datetimelike(values)]\n    else:\n        block_values = [values]\n    \n    return create_block_manager_from_blocks(block_values, [columns, index])"
        }
    ]
}