{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    index = index if index is not None else values.index\n    columns = [values.name] if columns is None and values.name is not None else columns\n    \n    if not len(values) and columns is not None and len(columns):\n        values = np.empty((0, 1), dtype=object)\n\n    values = values.reindex(index) if index is not None else values\n    \n    if hasattr(values, \"dtype\"):\n        values = values.copy() if copy else values\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n        columns = [0] if columns is None else columns\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    else:\n        values = prep_ndarray(values, copy=copy)\n        \n        if dtype is not None and not is_dtype_equal(values.dtype, dtype):\n            values = values.astype(dtype)\n        index, columns = _get_axes(*values.shape, index=index, columns=columns)\n        values = values.T\n\n        if dtype is None and is_object_dtype(values):\n\n            if values.ndim == 2 and values.shape[0] != 1:\n                dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n                for n in range(len(dvals_list)):\n                    if isinstance(dvals_list[n], np.ndarray):\n                        dvals_list[n] = dvals_list[n].reshape(1, -1)\n\n                block_values = [\n                    make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n                ]\n            else:\n                datelike_vals = maybe_infer_to_datetimelike(values)\n                block_values = [datelike_vals]\n        else:\n            block_values = [values]\n\n        return create_block_manager_from_blocks(block_values, [columns, index])",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}