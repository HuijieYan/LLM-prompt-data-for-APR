{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index=None, columns=None, dtype=None, copy=False):\n    if isinstance(values, (Series, list, np.ndarray)):\n        if isinstance(values, Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n\n        if isinstance(values, Categorical) or is_categorical_dtype(dtype):\n            if not hasattr(values, \"dtype\"):\n                values = np.array(values)\n            elif copy:\n                values = values.copy()\n\n            index, columns = _get_axes(len(values), 1, index, columns)\n            return DataFrame(values, columns=columns, index=Index(index)).astype(dtype)\n        elif is_extension_array_dtype(values) or is_extension_array_dtype(dtype):\n            if columns is None:\n                columns = [0]\n            return DataFrame(values, columns=columns, index=index).astype(dtype)\n        else:\n            values = np.array(values)\n            \n            if dtype is not None:\n                if not is_dtype_equal(values.dtype, dtype):\n                    try:\n                        values = values.astype(dtype)\n                    except Exception as orig:\n                        raise ValueError(f\"failed to cast to '{dtype}' (Exception was: {orig})\") from orig\n\n            index, columns = _get_axes(*values.shape, index=index, columns=columns)\n            values = values.T\n\n            if dtype is None and is_object_dtype(values):\n                if values.ndim == 2 and len(values) != 1:\n                    dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n                    block_values = [make_block(dvals.reshape(1, -1), placement=[n]) for n, dvals in enumerate(dvals_list)]\n                else:\n                    datelike_vals = maybe_infer_to_datetimelike(values)\n                    block_values = [datelike_vals]\n            else:\n                block_values = [values]\n\n            return DataFrame(block_values[0], columns=columns, index=index)\n    else:\n        raise ValueError(\"Input must be a ndarray, list, Series, or index\")",
            "imports": [
                "import numpy as np",
                "from pandas.core.arrays.categorical import is_categorical_dtype",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas.core.indexers import _get_axes",
                "from pandas.core.internals.blocks import make_block",
                "from pandas import Series",
                "from pandas.core.dtypes.common import (\n    is_extension_array_dtype,\n    is_object_dtype,\n    is_dtype_equal,\n)",
                "from pandas import DataFrame, Index",
                "from pandas.core.arrays import Categorical"
            ]
        }
    ]
}