{
    "pandas": [
        {
            "bugID": 102,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "pandas/core/internals/construction.py",
            "replace_code": "def init_ndarray(values, index=None, columns=None, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n\n    # Check if values is a Pandas Series\n    import numpy as np\n    import pandas as pd\n    from pandas.api.extensions import ExtensionDtype, register_extension_dtype\n    if isinstance(values, pd.Series):\n        if columns is None and values.name is not None:\n            columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n    \n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n    \n    # Handle categorical and extension array types\n    if isinstance(values, pd.Categorical) or isinstance(values, pd.CategoricalDtype) or isinstance(values, ExtensionDtype):\n        values = pd.array(values, copy=copy)\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return pd.DataFrame(values, columns=columns, index=index, dtype=dtype)\n    \n    # By definition an array here, the dtypes will be coerced to a single dtype\n    values = np.asanyarray(values)\n    \n    # If a specific dtype is provided, try to cast the values to that dtype\n    if dtype is not None:\n        try:\n            values = values.astype(dtype)\n        except Exception as orig:\n            raise ValueError(f\"Failed to cast to '{dtype}' (Exception was: {orig})\") from orig\n    \n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n    \n    if pd.api.types.is_object_dtype(values):\n        if values.ndim == 2 and values.shape[0] != 1:\n            dvals_list = [pd.api.types.infer_dtype(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n                    \n            block_values = [pd.core.internals.blocks.make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))]\n        else:\n            datelike_vals = pd.api.types.infer_dtype(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n    \n    return pd.core.internals.create_block_manager_from_blocks(block_values, [columns, index])"
        }
    ]
}