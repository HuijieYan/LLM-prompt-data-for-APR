{
    "pandas": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 668,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def replace(self, to_replace, value, inplace: bool = False, regex: bool = False, convert: bool = True):\n        \"\"\"\n        replace the to_replace value with value, possible to create new\n        blocks here this is just a call to putmask. regex is not used here.\n        It is used in ObjectBlocks.  It is here for API compatibility.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if not self._can_hold_element(to_replace):\n            if not isinstance(to_replace, list):\n                if inplace:\n                    return [self]\n                return [self.copy()]\n\n            to_replace = [x for x in to_replace if self._can_hold_element(x)]\n            if not len(to_replace):\n                if inplace:\n                    return [self]\n                return [self.copy()]\n\n            if len(to_replace) == 1:\n                return self.replace(to_replace[0], value, inplace=inplace, regex=regex, convert=convert)\n\n            if is_object_dtype(self):\n                raise AssertionError\n\n            block = self.astype(object)\n            return block.replace(to_replace=to_replace, value=value, inplace=inplace, regex=regex, convert=convert)\n\n        values = self.values\n        if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n            to_replace = convert_scalar_for_putitemlike(to_replace, values.dtype)\n\n        mask = missing.mask_missing(values, to_replace)\n\n        if not mask.any():\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        try:\n            blocks = self.putmask(mask, value, inplace=inplace)\n        except (TypeError, ValueError):\n            if is_object_dtype(self):\n                raise\n\n            assert not self._can_hold_element(value), value\n\n            block = self.astype(object)\n            return block.replace(to_replace, value, inplace, regex, convert)\n\n        if convert:\n            blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n        return blocks",
            "imports": [
                "from pandas.core.dtypes.common import is_object_dtype"
            ]
        }
    ]
}