{
    "1.1.1": "def replace(\n    self,\n    to_replace,\n    value,\n    inplace: bool = False,\n    regex: bool = False,\n    convert: bool = True,\n):\n    \n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n\n    # If we cannot replace with own dtype, convert to ObjectBlock and\n    # retry\n    if not self._can_hold_element(to_replace):\n        if not isinstance(to_replace, list):\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        to_replace = [x for x in to_replace if self._can_hold_element(x)]\n        if not len(to_replace):\n            # GH#28084 avoid costly checks since we can infer\n            #  that there is nothing to replace in this block\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        if len(to_replace) == 1:\n            # _can_hold_element checks have reduced this back to the\n            #  scalar case and we can avoid a costly object cast\n            return self.replace(\n                to_replace[0], value, inplace=inplace, regex=regex, convert=convert,\n            )\n\n        # GH 22083, TypeError or ValueError occurred within error handling\n        # causes infinite loop. Cast and retry only if not objectblock.\n        if is_object_dtype(self):\n            raise AssertionError\n\n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n        )\n\n    values = self.values\n    if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n        # The only non-DatetimeLike class that also has a non-trivial\n        #  try_coerce_args is ObjectBlock, but that overrides replace,\n        #  so does not get here.\n        to_replace = convert_scalar_for_putitemlike(to_replace, values.dtype)\n\n    mask = missing.mask_missing(values, to_replace)\n\n    if not mask.any():\n        if inplace:\n            return [self]\n        return [self.copy()]\n\n    try:\n        blocks = self.putmask(mask, value, inplace=inplace)\n        # Note: it is _not_ the case that self._can_hold_element(value)\n        #  is always true at this point.  In particular, that can fail\n        #  for:\n        #   \"2u\" with bool-dtype, float-dtype\n        #   0.5 with int64-dtype\n        #   np.nan with int64-dtype\n    except (TypeError, ValueError):\n        # GH 22083, TypeError or ValueError occurred within error handling\n        # causes infinite loop. Cast and retry only if not objectblock.\n        if is_object_dtype(self):\n            raise\n\n        assert not self._can_hold_element(value), value\n\n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=original_to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n        )\n    if convert:\n        blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n    return blocks\n",
    "1.1.2": "replace the to_replace value with value, possible to create new\nblocks here this is just a call to putmask. regex is not used here.\nIt is used in ObjectBlocks.  It is here for API compatibility.",
    "1.2.1": "class Block(PandasObject)",
    "1.2.2": "Canonical n-dimensional unit of homogeneous dtype contained in a pandas\ndata structure\n\nIndex-ignorant; let the container take care of that",
    "1.2.3": [
        "dtype(self)",
        "astype(self, dtype, copy: bool=False, errors: str='raise')",
        "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "_can_hold_element(self, element: Any) -> bool",
        "copy(self, deep: bool=True)",
        "replace(self, to_replace, value, inplace: bool=False, regex: bool=False, convert: bool=True)",
        "putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False) -> List['Block']"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/internals/blocks.py",
    "1.3.2": [
        "dtype(self)",
        "astype(self, dtype, copy: bool=False, errors: str='raise')",
        "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "_can_hold_element(self, element: Any) -> bool",
        "copy(self, deep: bool=True)",
        "replace(self, to_replace, value, inplace: bool=False, regex: bool=False, convert: bool=True)",
        "putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False) -> List['Block']",
        "putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False) -> List['Block']",
        "_can_hold_element(self, element: Any) -> bool",
        "_can_hold_element(self, element: Any) -> bool",
        "_can_hold_element(self, element: Any) -> bool",
        "_can_hold_element(self, element: Any) -> bool",
        "astype(self, dtype, copy: bool=False, errors: str='raise')",
        "_can_hold_element(self, element: Any) -> bool",
        "_can_hold_element(self, element: Any) -> bool",
        "_can_hold_element(self, element: Any) -> bool",
        "replace(self, to_replace, value, inplace=False, regex=False, convert=True)",
        "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "_can_hold_element(self, element: Any) -> bool",
        "replace(self, to_replace, value, inplace=False, regex=False, convert=True)",
        "replace(self, to_replace, value, inplace: bool=False, regex: bool=False, convert: bool=True)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\"dtype\", [\"float\", \"float64\", \"int64\", \"Int64\", \"boolean\"])\n    @pytest.mark.parametrize(\"value\", [np.nan, pd.NA])\n    def test_replace_no_replacement_dtypes(self, dtype, value):\n        # https://github.com/pandas-dev/pandas/issues/32988\n        df = pd.DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n        tm.assert_frame_equal(result, df)",
        "    @pytest.mark.parametrize(\"dtype\", [\"float\", \"float64\", \"int64\", \"Int64\", \"boolean\"])\n    @pytest.mark.parametrize(\"value\", [np.nan, pd.NA])\n    def test_replace_no_replacement_dtypes(self, dtype, value):\n        # https://github.com/pandas-dev/pandas/issues/32988\n        df = pd.DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n        tm.assert_frame_equal(result, df)",
        "    @pytest.mark.parametrize(\"dtype\", [\"float\", \"float64\", \"int64\", \"Int64\", \"boolean\"])\n    @pytest.mark.parametrize(\"value\", [np.nan, pd.NA])\n    def test_replace_no_replacement_dtypes(self, dtype, value):\n        # https://github.com/pandas-dev/pandas/issues/32988\n        df = pd.DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n        tm.assert_frame_equal(result, df)",
        "    @pytest.mark.parametrize(\"dtype\", [\"float\", \"float64\", \"int64\", \"Int64\", \"boolean\"])\n    @pytest.mark.parametrize(\"value\", [np.nan, pd.NA])\n    def test_replace_no_replacement_dtypes(self, dtype, value):\n        # https://github.com/pandas-dev/pandas/issues/32988\n        df = pd.DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n        tm.assert_frame_equal(result, df)"
    ],
    "1.4.2": [
        "pandas/tests/frame/methods/test_replace.py",
        "pandas/tests/frame/methods/test_replace.py",
        "pandas/tests/frame/methods/test_replace.py",
        "pandas/tests/frame/methods/test_replace.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"0\") are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: float64"
        ],
        [
            "E       AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"0\") are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: float64"
        ],
        [
            "E       AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"0\") are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: float64"
        ],
        [
            "E       AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"0\") are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: float64"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.methods.test_replace.TestDataFrameReplace object at 0x11d838fd0>\ndtype = 'float', value = nan\n\n    @pytest.mark.parametrize(\"dtype\", [\"float\", \"float64\", \"int64\", \"Int64\", \"boolean\"])\n    @pytest.mark.parametrize(\"value\", [np.nan, pd.NA])\n    def test_replace_no_replacement_dtypes(self, dtype, value):\n        # https://github.com/pandas-dev/pandas/issues/32988\n        df = pd.DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n>       tm.assert_frame_equal(result, df)",
            "\npandas/tests/frame/methods/test_replace.py:1390: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.methods.test_replace.TestDataFrameReplace object at 0x11da25340>\ndtype = 'float64', value = nan\n\n    @pytest.mark.parametrize(\"dtype\", [\"float\", \"float64\", \"int64\", \"Int64\", \"boolean\"])\n    @pytest.mark.parametrize(\"value\", [np.nan, pd.NA])\n    def test_replace_no_replacement_dtypes(self, dtype, value):\n        # https://github.com/pandas-dev/pandas/issues/32988\n        df = pd.DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n>       tm.assert_frame_equal(result, df)",
            "\npandas/tests/frame/methods/test_replace.py:1390: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.methods.test_replace.TestDataFrameReplace object at 0x11dccaee0>\ndtype = 'float', value = <NA>\n\n    @pytest.mark.parametrize(\"dtype\", [\"float\", \"float64\", \"int64\", \"Int64\", \"boolean\"])\n    @pytest.mark.parametrize(\"value\", [np.nan, pd.NA])\n    def test_replace_no_replacement_dtypes(self, dtype, value):\n        # https://github.com/pandas-dev/pandas/issues/32988\n        df = pd.DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n>       tm.assert_frame_equal(result, df)",
            "\npandas/tests/frame/methods/test_replace.py:1390: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.methods.test_replace.TestDataFrameReplace object at 0x11d9d2610>\ndtype = 'float64', value = <NA>\n\n    @pytest.mark.parametrize(\"dtype\", [\"float\", \"float64\", \"int64\", \"Int64\", \"boolean\"])\n    @pytest.mark.parametrize(\"value\", [np.nan, pd.NA])\n    def test_replace_no_replacement_dtypes(self, dtype, value):\n        # https://github.com/pandas-dev/pandas/issues/32988\n        df = pd.DataFrame(np.eye(2), dtype=dtype)\n        result = df.replace(to_replace=[None, -np.inf, np.inf], value=value)\n>       tm.assert_frame_equal(result, df)",
            "\npandas/tests/frame/methods/test_replace.py:1390: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "FloatBlock: slice(0, 2, 1), 2 x 2, dtype: float64",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1., 0.],\n       [0., 1.]])",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "block": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object",
                    "shape": "(2, 2)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "self": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1.0, 0.0],\n       [0.0, 1.0]], dtype=object)",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "values": {
                    "value": "array([[1.0, 0.0],\n       [0.0, 1.0]], dtype=object)",
                    "shape": "(2, 2)"
                },
                "values.dtype": {
                    "value": "dtype('O')",
                    "shape": "()"
                },
                "mask": {
                    "value": "array([[False, False],\n       [False, False]])",
                    "shape": "(2, 2)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "IntBlock: slice(0, 2, 1), 2 x 2, dtype: int64",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1, 0],\n       [0, 1]])",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "to_replace": {
                    "value": "[]",
                    "shape": "0"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: Int64",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<IntegerArray>\n[1, 0]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<IntegerArray>\n[1, 0]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "Int64Dtype()",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: Int64",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "Int64Dtype()",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: boolean",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "BooleanDtype",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: boolean",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<BooleanArray>\n[False, True]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<BooleanArray>\n[False, True]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "BooleanDtype",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "FloatBlock: slice(0, 2, 1), 2 x 2, dtype: float64",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1., 0.],\n       [0., 1.]])",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "block": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object",
                    "shape": "(2, 2)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "self": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1.0, 0.0],\n       [0.0, 1.0]], dtype=object)",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "values": {
                    "value": "array([[1.0, 0.0],\n       [0.0, 1.0]], dtype=object)",
                    "shape": "(2, 2)"
                },
                "values.dtype": {
                    "value": "dtype('O')",
                    "shape": "()"
                },
                "mask": {
                    "value": "array([[False, False],\n       [False, False]])",
                    "shape": "(2, 2)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "IntBlock: slice(0, 2, 1), 2 x 2, dtype: int64",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1, 0],\n       [0, 1]])",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "to_replace": {
                    "value": "[]",
                    "shape": "0"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: Int64",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<IntegerArray>\n[1, 0]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<IntegerArray>\n[1, 0]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "Int64Dtype()",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: Int64",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "Int64Dtype()",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: boolean",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "BooleanDtype",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: boolean",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<BooleanArray>\n[False, True]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<BooleanArray>\n[False, True]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "BooleanDtype",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "FloatBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "to_replace": "list",
                "block": "ObjectBlock"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ObjectBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "values": "ndarray",
                "values.dtype": "dtype",
                "mask": "ndarray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "IntBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "to_replace": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "IntegerArray"
            },
            {
                "original_to_replace": "list",
                "values": "IntegerArray",
                "values.dtype": "Int64Dtype",
                "mask": "BooleanArray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "IntegerArray"
            },
            {
                "original_to_replace": "list",
                "values": "IntegerArray",
                "values.dtype": "Int64Dtype",
                "mask": "BooleanArray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "BooleanArray"
            },
            {
                "original_to_replace": "list",
                "values": "BooleanArray",
                "values.dtype": "BooleanDtype",
                "mask": "BooleanArray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "BooleanArray"
            },
            {
                "original_to_replace": "list",
                "values": "BooleanArray",
                "values.dtype": "BooleanDtype",
                "mask": "BooleanArray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "FloatBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "to_replace": "list",
                "block": "ObjectBlock"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ObjectBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "values": "ndarray",
                "values.dtype": "dtype",
                "mask": "ndarray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "IntBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "to_replace": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "IntegerArray"
            },
            {
                "original_to_replace": "list",
                "values": "IntegerArray",
                "values.dtype": "Int64Dtype",
                "mask": "BooleanArray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "IntegerArray"
            },
            {
                "original_to_replace": "list",
                "values": "IntegerArray",
                "values.dtype": "Int64Dtype",
                "mask": "BooleanArray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "BooleanArray"
            },
            {
                "original_to_replace": "list",
                "values": "BooleanArray",
                "values.dtype": "BooleanDtype",
                "mask": "BooleanArray"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "BooleanArray"
            },
            {
                "original_to_replace": "list",
                "values": "BooleanArray",
                "values.dtype": "BooleanDtype",
                "mask": "BooleanArray"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "FloatBlock: slice(0, 2, 1), 2 x 2, dtype: float64",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1., 0.],\n       [0., 1.]])",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "block": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object",
                    "shape": "(2, 2)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "self": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1.0, 0.0],\n       [0.0, 1.0]], dtype=object)",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "values": {
                    "value": "array([[1.0, 0.0],\n       [0.0, 1.0]], dtype=object)",
                    "shape": "(2, 2)"
                },
                "values.dtype": {
                    "value": "dtype('O')",
                    "shape": "()"
                },
                "mask": {
                    "value": "array([[False, False],\n       [False, False]])",
                    "shape": "(2, 2)"
                },
                "blocks": {
                    "value": "[[FloatBlock: slice(0, 1, 1), 1 x 2, dtype: float64, FloatBlock: slice(1, 2, 1), 1 x 2, dtype: float64]]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "IntBlock: slice(0, 2, 1), 2 x 2, dtype: int64",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1, 0],\n       [0, 1]])",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "to_replace": {
                    "value": "[]",
                    "shape": "0"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: Int64",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<IntegerArray>\n[1, 0]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<IntegerArray>\n[1, 0]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "Int64Dtype()",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "blocks": {
                    "value": "[ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: Int64]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: Int64",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "Int64Dtype()",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "blocks": {
                    "value": "[ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: Int64]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: boolean",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "BooleanDtype",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "blocks": {
                    "value": "[ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: boolean]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: boolean",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "nan",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<BooleanArray>\n[False, True]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<BooleanArray>\n[False, True]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "BooleanDtype",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "blocks": {
                    "value": "[ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: boolean]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "FloatBlock: slice(0, 2, 1), 2 x 2, dtype: float64",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1., 0.],\n       [0., 1.]])",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "block": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object",
                    "shape": "(2, 2)"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "self": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 2, dtype: object",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1.0, 0.0],\n       [0.0, 1.0]], dtype=object)",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[-inf, inf]",
                    "shape": "2"
                },
                "values": {
                    "value": "array([[1.0, 0.0],\n       [0.0, 1.0]], dtype=object)",
                    "shape": "(2, 2)"
                },
                "values.dtype": {
                    "value": "dtype('O')",
                    "shape": "()"
                },
                "mask": {
                    "value": "array([[False, False],\n       [False, False]])",
                    "shape": "(2, 2)"
                },
                "blocks": {
                    "value": "[[FloatBlock: slice(0, 1, 1), 1 x 2, dtype: float64, FloatBlock: slice(1, 2, 1), 1 x 2, dtype: float64]]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "IntBlock: slice(0, 2, 1), 2 x 2, dtype: int64",
                    "shape": "(2, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "array([[1, 0],\n       [0, 1]])",
                    "shape": "(2, 2)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "to_replace": {
                    "value": "[]",
                    "shape": "0"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: Int64",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<IntegerArray>\n[1, 0]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<IntegerArray>\n[1, 0]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "Int64Dtype()",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "blocks": {
                    "value": "[ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: Int64]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: Int64",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "Int64Dtype()",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "blocks": {
                    "value": "[ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: Int64]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: boolean",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "BooleanDtype",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "blocks": {
                    "value": "[ExtensionBlock: slice(0, 1, 1), 1 x 2, dtype: boolean]",
                    "shape": "1"
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "False",
                    "shape": null
                },
                "to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "self": {
                    "value": "ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: boolean",
                    "shape": "(1, 2)"
                },
                "value": {
                    "value": "<NA>",
                    "shape": null
                },
                "regex": {
                    "value": "False",
                    "shape": null
                },
                "convert": {
                    "value": "True",
                    "shape": null
                },
                "self.values": {
                    "value": "<BooleanArray>\n[False, True]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                }
            },
            {
                "original_to_replace": {
                    "value": "[None, -inf, inf]",
                    "shape": "3"
                },
                "values": {
                    "value": "<BooleanArray>\n[False, True]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "values.dtype": {
                    "value": "BooleanDtype",
                    "shape": null
                },
                "mask": {
                    "value": "<BooleanArray>\n[False, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)"
                },
                "blocks": {
                    "value": "[ExtensionBlock: slice(1, 2, 1), 1 x 2, dtype: boolean]",
                    "shape": "1"
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "FloatBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "to_replace": "list",
                "block": "ObjectBlock"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ObjectBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "values": "ndarray",
                "values.dtype": "dtype",
                "mask": "ndarray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "IntBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "to_replace": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "IntegerArray"
            },
            {
                "original_to_replace": "list",
                "values": "IntegerArray",
                "values.dtype": "Int64Dtype",
                "mask": "BooleanArray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "IntegerArray"
            },
            {
                "original_to_replace": "list",
                "values": "IntegerArray",
                "values.dtype": "Int64Dtype",
                "mask": "BooleanArray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "BooleanArray"
            },
            {
                "original_to_replace": "list",
                "values": "BooleanArray",
                "values.dtype": "BooleanDtype",
                "mask": "BooleanArray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "float",
                "regex": "bool",
                "convert": "bool",
                "self.values": "BooleanArray"
            },
            {
                "original_to_replace": "list",
                "values": "BooleanArray",
                "values.dtype": "BooleanDtype",
                "mask": "BooleanArray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "FloatBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "to_replace": "list",
                "block": "ObjectBlock"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ObjectBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "values": "ndarray",
                "values.dtype": "dtype",
                "mask": "ndarray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "IntBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "ndarray"
            },
            {
                "original_to_replace": "list",
                "to_replace": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "IntegerArray"
            },
            {
                "original_to_replace": "list",
                "values": "IntegerArray",
                "values.dtype": "Int64Dtype",
                "mask": "BooleanArray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "IntegerArray"
            },
            {
                "original_to_replace": "list",
                "values": "IntegerArray",
                "values.dtype": "Int64Dtype",
                "mask": "BooleanArray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "BooleanArray"
            },
            {
                "original_to_replace": "list",
                "values": "BooleanArray",
                "values.dtype": "BooleanDtype",
                "mask": "BooleanArray",
                "blocks": "list"
            }
        ],
        [
            {
                "inplace": "bool",
                "to_replace": "list",
                "self": "ExtensionBlock",
                "value": "NAType",
                "regex": "bool",
                "convert": "bool",
                "self.values": "BooleanArray"
            },
            {
                "original_to_replace": "list",
                "values": "BooleanArray",
                "values.dtype": "BooleanDtype",
                "mask": "BooleanArray",
                "blocks": "list"
            }
        ]
    ],
    "3.1.1": [
        "REGR: replace casts columns to object\n"
    ],
    "3.1.2": [
        "Calling df.replace casts columns to object\npd.DataFrame(np.eye(2)).replace(to_replace=[None, -np.inf, np.inf], value=pd.NA).dtypes\n# 0    object\n# 1     object\n# dtype: object\nProblem description\nI'd expect that the dtypes of the columns remain the same after replacing with pd.NA (especially considering no values are replaced in the above call). We do not get this issue if to_replace is any subset of [None, -np.inf, np.inf]. We get the same issue if value is instead np.nan.\n\nExpected Output\n# 0    float64\n# 1     float64\n# dtype: object\n"
    ]
}