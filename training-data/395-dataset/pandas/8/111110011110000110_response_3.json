{
    "pandas": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 668,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def replace(\n        self,\n        to_replace,\n        value,\n        inplace: bool = False,\n        regex: bool = False,\n        column: Union[str, Sequence[str]] = None,\n        method: Optional[str] = None,\n    ):\n        \"\"\"\n        replace values given in `to_replace` with `value`.\n        Currently only supports replacing with `pd.NA` and not\n        any other types. `to_replace` and `value` must have the same dtype.\n    \n        Parameters\n        ----------\n        to_replace : str, regex, list, dict, Series, int, float, or None\n            How to find the values that will be replaced.\n        value : scalar, dict\n            Value to replace any values matching `to_replace` with.\n            For a DataFrame, it can only replace values with None.\n        inplace : bool, default False\n            If True, in place. Note: THIS functionality is not yet implemented.\n        regex : bool or same types as `to_replace`, optional\n            Whether to interpret `to_replace` and/or `value` as regular expressions.\n            If this is True then `to_replace` must be a string. Otherwise, this\n            allows you to indicate that `to_replace` and `value` are not regular\n            expressions and should be treated as literal strings.\n            .. versionchanged:: 0.23.0\n               adj, traj=False, traj=False, traj=False, traj=False, traj=False, traj=False\n        column : str, list\n            Optional string or list of string to restrict the replacement\n            to\n        method : 'pad' : fill (or backfill) those intermittent missings or\n            blanks. Note: THIS functionality is not yet implemented.\n    \n        Returns\n        -------\n        DataFrame\n            DataFrame after replacement.\n        \"\"\"\n        if column is not None and method is not None:\n            raise ValueError(\"Column and method can not be specified together.\")\n    \n        if method not in [\"pad\"]:\n            raise NotImplementedError(\n                \"Only pad method is implemented. We apologize for the inconvenience.\"\n            )\n    \n        df = self\n        if column is not None:\n            data = df._replace_col(to_replace, value, inplace=inplace, column=column)\n            return df._constructor_sliced(data, index=df.index)\n        data = df._replace(to_replace, value, inplace=inplace, regex=regex, method=method)\n        return df._constructor(data, index=df.index)",
            "imports": []
        }
    ]
}