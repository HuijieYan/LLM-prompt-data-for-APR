{
    "pandas": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 668,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def replace(self, to_replace, value, inplace: bool = False, regex: bool = False, convert: bool = True):\n    \"\"\"\n    replace the to_replace value with value, possible to create new\n    blocks here this is just a call to putmask. regex is not used here.\n    It is used in ObjectBlocks.  It is here for API compatibility.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    to_replace_arr = np.asarray(to_replace)\n    if isna(value):\n        value = self.mgr._mgr.missing_type\n\n    # sanitize the passed in to_replace value (!array -> [])\n    if not is_list_like(to_replace):\n        to_replace_arr = [to_replace_arr]\n\n    # Sanitize the passed in value (!array -> [])\n    if not is_list_like(value):\n        value = [value]\n\n    if len(to_replace_arr) != len(value) and len(value) != 1:\n        # GH#20969\n        msg = (\"Replacement lists must be of same length\")\n        raise ValueError(msg)\n\n    mask = missing.mask_missing(self.mgr, to_replace_arr)\n\n    if len(to_replace_arr) == 1 and self._can_hold_element(to_replace_arr):\n        new_values = self.values[~mask.fillna(False)]\n    else:\n        mask = mask.view('i1')\n        new_values = np.where(mask, self.values, value)\n\n    blocks = self.putmask(mask, value, inplace=inplace)\n\n    if convert:\n        blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n\n    return blocks",
            "import_list": []
        }
    ]
}