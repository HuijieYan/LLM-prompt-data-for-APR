{
    "pandas": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 668,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def replace(\n    self,\n    to_replace,\n    value,\n    inplace: bool = False,\n    regex: bool = False,\n    convert: bool = True,\n):\n    \"\"\"\n    replace the to_replace value with value, possible to create new\n    blocks here this is just a call to putmask. regex is not used here.\n    It is used in ObjectBlocks.  It is here for API compatibility.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n\n    if not self._can_hold_element(to_replace):\n        if not isinstance(to_replace, list):\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        mask_applied = False\n        if to_replace == pd.NA or to_replace == np.nan:\n            # create a boolean mask for the condition\n            mask = self.isin([to_replace])\n            mask_applied = True\n        else:\n            to_replace = [x for x in to_replace if self._can_hold_element(x)]\n            if not len(to_replace):\n                # avoid costly checks since there is nothing to replace in this block\n                if inplace:\n                    return [self]\n                return [self.copy()]\n\n        if not mask_applied:\n            if len(to_replace) != 1:\n                return self.replace(\n                    to_replace[0], value, inplace=inplace, regex=regex, convert=convert,\n                )\n\n        try:\n            blocks = self.putmask(mask, value, inplace=inplace)\n        except (TypeError, ValueError):\n            assert not self._can_hold_element(value), value\n            block = self.astype(object)\n            return block.replace(\n                to_replace=original_to_replace,\n                value=value,\n                inplace=inplace,\n                regex=regex,\n                convert=convert,\n            )\n        \n        if convert:\n            blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n        return blocks",
            "import_list": []
        }
    ]
}