{
    "pandas": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 668,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def replace(self, to_replace, value, inplace: bool = False, regex: bool = False, convert: bool = True):\n\n    \"\"\"\n    Replace the to_replace value with value, possible to create new blocks here. \n    This is just a call to putmask. regex is not used here. It is used in ObjectBlocks. \n    It is here for API compatibility.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n    \n    if regex:\n        # Handle regex separately if needed\n        raise NotImplementedError(\"Regex replacement is not supported in this method\")\n    \n    if not self._can_hold_element(to_replace):\n        if inplace:\n            return [self]\n        return [self.copy()]\n    \n    values = self.values\n    \n    # Mask creation\n    if np.isscalar(to_replace) and isinstance(values, np.ndarray):\n        mask = values == to_replace\n    else:\n        mask = np.in1d(values, to_replace)\n    \n    if not mask.any():\n        if inplace:\n            return [self]\n        return [self.copy()]\n    \n    # Putmask application\n    new_values = np.where(mask, value, values)\n    if inplace:\n        self.values = new_values\n        return [self]\n    else:\n        return [type(self)(new_values, self.index, self.columns, fastpath=True)]"
        }
    ]
}