{
    "pandas": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 668,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def replace(self, to_replace, value, inplace: bool = False, regex: bool = False, convert: bool = True):\n    \"\"\"\n    replace the to_replace value with value, possible to create new\n    blocks here this is just a call to putmask. regex is not used here.\n    It is used in ObjectBlocks.  It is here for API compatibility.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n\n    # check if we need to convert the to_replace list to a list of elements compatible with the block's dtype\n    if not self._can_hold_element(to_replace):\n        to_replace = [x for x in to_replace if self._can_hold_element(x)]\n        if not to_replace:\n            if inplace:\n                return [self]\n            return [self.copy()]\n        if len(to_replace) == 1:\n            return self.replace(\n                to_replace[0],\n                value,\n                inplace=inplace,\n                regex=regex,\n                convert=convert,\n            )\n        # checks for the case when we need to cast the block to a compatible block type\n        if is_object_dtype(self):\n            raise AssertionError(\"Cannot replace with own dtype\")\n        block = self.astype(object)\n        return block.replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n        )\n\n    values = self.values\n    if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n        to_replace = convert_scalar_for_putitemlike(to_replace, values.dtype)\n\n    mask = missing.mask_missing(values, to_replace)\n\n    if not mask.any():\n        if inplace:\n            return [self]\n        return [self.copy()]\n\n    blocks = self.putmask(mask, value, inplace=inplace)\n    if convert:\n        blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n    return blocks",
            "imports": []
        }
    ]
}