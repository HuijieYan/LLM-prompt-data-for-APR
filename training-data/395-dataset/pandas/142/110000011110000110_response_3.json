{
    "pandas": [
        {
            "bugID": 142,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1890,
            "file_name": "pandas/core/algorithms.py",
            "replace_code": "def diff(arr, n: int, axis: int = 0):\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n\n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n\n    Returns\n    -------\n    shifted\n    \"\"\"\n\n    n = int(n)\n    na = np.nan\n    dtype = arr.dtype\n    out_arr = np.empty(arr.shape, dtype=dtype)\n\n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n    out_arr[tuple(na_indexer)] = na\n\n    if arr.ndim == 2:  # Remove redundant checks\n\n        # To keep mypy happy, _res_indexer is a list while res_indexer is\n        #  a tuple, ditto for lag_indexer.\n        _res_indexer = [slice(None)] * arr.ndim\n        _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n        res_indexer = tuple(_res_indexer)\n\n        _lag_indexer = [slice(None)] * arr.ndim\n        _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n        lag_indexer = tuple(_lag_indexer)\n\n        # need to make sure that we account for na for datelike/timedelta\n        # we don't actually want to subtract these i8 numbers\n        if needs_i8_conversion(arr):\n            dtype = np.float64\n            arr = arr.view(\"i8\")\n            na = iNaT\n            out_arr = np.empty(arr.shape, dtype=dtype)\n        elif is_bool_dtype(dtype):\n            dtype = np.object_\n            out_arr = np.empty(arr.shape, dtype=dtype)\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            out_arr = np.empty(arr.shape, dtype=dtype)\n\n        dtype = np.dtype(dtype)\n\n        mask = np.zeros(arr.shape, dtype=bool)\n        mask[res_indexer] = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n        mask_lagged = (arr[lag_indexer] == na)\n\n        arr1 = arr[res_indexer].copy()\n        arr1[mask] = 0\n        arr2 = arr[lag_indexer].copy()\n        arr2[mask] = 0\n\n        result = np.subtract(arr1, arr2)\n        result[mask_lagged] = na\n\n        out_arr[res_indexer] = result\n\n        if needs_i8_conversion:\n            return out_arr.astype(\"timedelta64[ns]\")\n        return out_arr\n\n    else:\n        raise ValueError(f\"Unsupported number of dimensions: {arr.ndim}\")",
            "import_list": [
                "import numpy as np",
                "from pandas.core.internals import iNaT",
                "from pandas.core.dtypes.common import (\n    is_bool_dtype,\n    is_integer_dtype,\n    needs_i8_conversion,\n)"
            ]
        }
    ]
}