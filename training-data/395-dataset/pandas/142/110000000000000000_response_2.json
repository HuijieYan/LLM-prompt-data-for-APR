{
    "pandas": [
        {
            "bugID": 142,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1890,
            "file_name": "pandas/core/algorithms.py",
            "replace_code": "def diff(arr: np.ndarray, n: int, axis: int = 0) -> np.ndarray:\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n\n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n\n    Returns\n    -------\n    shifted\n    \"\"\"\n    na = np.nan\n\n    if issubclass(arr.dtype.type, np.datetime64):\n        is_timedelta = True\n    else:\n        is_timedelta = False\n\n    out_arr = np.empty(arr.shape, dtype=arr.dtype)\n\n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n\n    out_arr[tuple(na_indexer)] = na\n\n    idx = [slice(None)] * arr.ndim\n    idx[axis] = slice(n, None) if n >= 0 else slice(None, n)\n    res = arr[tuple(idx)]\n\n    idx = [slice(None)] * arr.ndim\n    idx[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n    lag = arr[tuple(idx)]\n\n    result = res - lag\n    mask = np.isnan(res) | np.isnan(lag)\n    result[mask] = na\n    out_arr[tuple(na_indexer)] = na\n    out_arr[tuple(idx)] = result\n\n    if is_timedelta:\n        out_arr = out_arr.astype(\"timedelta64[ns]\")\n\n    return out_arr",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}