{
    "pandas": [
        {
            "bugID": 142,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1890,
            "file_name": "pandas/core/algorithms.py",
            "replace_code": "def diff(arr, n: int, axis: int = 0):\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n\n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n\n    Returns\n    -------\n    shifted\n    \"\"\"\n\n    n = int(n)\n    na = np.nan\n\n    dtype = arr.dtype\n\n    is_timedelta = False\n    if np.issubdtype(arr.dtype, np.datetime64):\n        is_timedelta = True\n\n    dtype = np.dtype(dtype)\n    out_arr = np.empty(arr.shape, dtype=dtype)\n\n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n    np.put_along_axis(out_arr, na_indexer, na, axis)\n\n    _res_indexer = [slice(None)] * arr.ndim\n    _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n    res_indexer = tuple(_res_indexer)\n\n    _lag_indexer = [slice(None)] * arr.ndim\n    _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n    lag_indexer = tuple(_lag_indexer)\n\n    res = np.take(arr, res_indexer, axis)\n    lag = np.take(arr, lag_indexer, axis)\n\n    mask = np.isnan(arr) | np.isnan(arr[lag_indexer])\n\n    if np.isnan(na):\n      maxval = np.iinfo(np.dtype(\"i8\")).max\n      if is_timedelta:\n          maxval = pd.Timedelta.max.nanoseconds\n\n      maxval = np.where(dtype.type(maxval), np.datetime64(\"NaT\"), maxval)\n      mask |= (arr[lag_indexer] == maxval)\n\n    if mask.any():\n        res = res.copy()\n        res[mask] = 0\n        lag = lag.copy()\n        lag[mask] = 0\n        \n        if is_timedelta:\n             result = res.astype(np.int64) - lag.astype(np.int64)\n             result[mask] = maxval\n             out_arr[res_indexer] = result.view(dtype)\n        else:\n             out_arr[res_indexer] = res - lag\n    return out_arr",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}