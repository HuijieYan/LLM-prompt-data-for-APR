{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    import pandas as pd\n    import numpy as np\n    from pandas.core.dtypes.common import is_scalar, is_list_like\n    from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries\n    from pandas.core.computation.expressions import evaluate\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n    \n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n    \n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Note: we use iloc to access columns for compat with non-unique columns.\n    right = pd.core.computation.ops._cast_scalar_indexer(right)\n    \n    if is_scalar(right) or np.ndim(right) == 0:\n        def column_op(a, b):\n            return func(a, b)\n    \n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left), \"index values must be the same\"\n    \n        def column_op(a, b):\n            return func(a, b)\n    \n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        assert right.index.equals(left.columns)\n        def column_op(a, b):\n            return func(a, b)\n    \n    elif isinstance(right, ABCSeries):\n        assert (right.index.equals(left.index) or\n                right.index.equals(left.columns)), \"index values must be the same\"\n    \n        b = right\n        if isinstance(func, (pd.core.ops.CmpOp)):\n            # avoid calling sarray.map or np.array\n            # with a pandas object; dispatch to numpy\n            # 1D input testing requires an explicit conversion,\n            # not Pandas' .values with object-dtype EAs\n            if is_list_like(left) and len(left) and hasattr(b, \"reindex\"):\n                left = left.reindex(b.index)\n        else:\n            b = right.reindex(a.index)\n    \n        def column_op(a, b):\n            with np.errstate(all=\"ignore\"):\n                return func(a.values, b)\n    \n    else:\n        raise NotImplementedError\n    \n    new_data = evaluate(column_op, str_rep, left, right)\n    return new_data"
        }
    ]
}