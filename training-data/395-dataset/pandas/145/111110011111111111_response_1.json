{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Other imports\n    import pandas.core.computation.expressions as expressions\n    import numpy as np\n    import pandas as pd\n    from pandas.api.types import is_scalar\n\n    right = pd.core.common.is_scalar(right) or np.ndim(right) == 0\n    if np.isscalar(right):\n        def column_op(a, b):\n            result = {}\n            for i in range(len(a.columns)):\n                col_result = np.where(~pd.isna(a.iloc[:, i]) & ~pd.isna(b), func(a.iloc[:, i], b), np.NaN)\n                result[i] = col_result\n            return result\n    elif isinstance(right, pd.DataFrame):\n        assert right._indexed_same(left)\n\n        def column_op(a, b):\n            result = {}\n            for i in range(len(a.columns)):\n                col_result = np.where(~pd.isna(a.iloc[:, i]) & ~pd.isna(b.iloc[:, i]), func(a.iloc[:, i], b.iloc[:, i]), np.NaN)\n                result[i] = col_result\n            return result",
            "imports": [
                "import pandas.core.computation.expressions as expressions",
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_scalar"
            ]
        }
    ]
}