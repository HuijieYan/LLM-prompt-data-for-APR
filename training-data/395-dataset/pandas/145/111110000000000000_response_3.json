{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    import pandas.core.computation.expressions as expressions\n    import numpy as np\n    import pandas.core.common as com\n    import pandas.core.ops as ops\n    from pandas import DataFrame\n    from pandas import Series\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n    \n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n    \n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    import pandas.core.computation.expressions as expressions\n    import numpy as np\n    import pandas.core.common as com\n    import pandas.core.ops as ops\n    from pandas import DataFrame\n    from pandas import Series\n    \n    if axis not in [0, 1, \"index\", \"columns\", None]:\n        raise ValueError(\"Invalid axis. Expected one of {0, 1, 'index', 'columns', None}\")\n    \n    if isinstance(right, DataFrame):\n        if not right._indexed_same(left):\n            raise ValueError(\"right DataFrame index is not aligned with left DataFrame index\")\n    \n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n    \n    elif isinstance(right, Series):\n        if axis == \"columns\":\n            if not right.index.equals(left.columns):\n                raise ValueError(\"right Series index is not aligned with left DataFrame columns\")\n    \n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n    \n        else:\n            if not right.index.equals(left.index):\n                raise ValueError(\"right Series index is not aligned with left DataFrame index\")\n    \n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    \n    else:\n        right = com.cast_scalar_to_array(right, left.shape[1], raise_on_fail=True)\n    \n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    \n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data"
        }
    ]
}