{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    right = pd.core.algorithms.where(lib.is_scalar(right), right, lib.item_from_zerodim(right))\n\n    if axis is None or axis in (0, \"index\"):\n        axis = 0\n    elif axis in (1, \"columns\"):\n        axis = 1\n    else:\n        raise ValueError(\"Invalid axis: {0}\".format(axis))\n\n    if isinstance(right, pd.DataFrame):\n        if right.index is not None and right.index.equals(left.index) and right.columns is not None and right.columns.equals(left.columns):\n            new_data = pd.DataFrame({col: func(left[col], right[col]) for col in left.columns}, index=left.index)\n        else:\n            raise ValueError(\"Unable to align the index and columns of the DataFrame objects\")\n\n    elif isinstance(right, pd.Series):\n        if axis == 1 and right.index is not None and len(right.index) == len(left.columns) and right.index.equals(left.columns):\n            new_data = pd.DataFrame({col: func(left[col], right.values) for col in left.columns}, index=left.index)\n        elif right.index is not None and len(right.index) == len(left.index) and right.index.equals(left.index):\n            new_data = pd.DataFrame({col: func(left[col], right) for col in left.columns}, index=left.index)\n        else:\n            raise ValueError(\"Unable to align the index of the Series object with the DataFrame\")\n\n    else:\n        raise ValueError(\"Unsupported type for 'right' parameter\")\n\n    return new_data",
            "imports": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas.core.computation.expressions import evaluate"
            ]
        }
    ]
}