{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    \n    import numpy as np\n    from pandas.core.dtypes.common import is_scalar\n    from pandas.core.frame import DataFrame\n    from pandas.core.series import Series\n    import pandas.core.computation.expressions as expressions\n\n    dtype = left.dtypes\n    if isinstance(right, DataFrame) and right.shape[0] == left.shape[0]:\n        if right.columns.equals(left.columns):\n            use_series = False\n        else:\n            raise ValueError(\"Cannot broadcast operands together.\")\n    elif np.ndim(right) == 0 or is_scalar(right):\n        use_series = False\n    elif isinstance(right, Series):\n        if axis == \"index\":\n            if right.index.equals(left.index):\n                use_series = True\n            else:\n                raise ValueError(\"Cannot broadcast operands together.\")\n        elif axis == \"columns\":\n            if right.index.equals(left.columns):\n                use_series = True\n            else:\n                raise ValueError(\"Cannot broadcast operands together.\")\n        else:\n            raise ValueError(\"Unsupported axis value: {}\".format(axis))\n    else:\n        raise NotImplementedError()\n\n    if use_series:\n\n        def column_op(a, b):\n            if b.ndim == 0:\n                return {i: func(a.iloc[:, i], b.item()) for i in range(len(a.columns))}\n            else:\n                return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n\n    else:\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
            "imports": [
                "import numpy as np",
                "from pandas.core.dtypes.common import is_scalar",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.series import Series",
                "import pandas.core.computation.expressions as expressions"
            ]
        }
    ]
}