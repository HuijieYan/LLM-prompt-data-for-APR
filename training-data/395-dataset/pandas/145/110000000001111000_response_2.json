{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    import numpy as np\n    import pandas.core.common as com\n    from pandas.core.dtypes.common import is_scalar\n    import numpy as np\n    import pandas.core.common as com\n    from pandas.core.dtypes.common import is_scalar\n    \n    new_data = left.copy()\n    for i in range(len(left.columns)):\n        if is_scalar(right) or np.ndim(right) == 0:\n            new_data.iloc[:, i] = func(left.iloc[:, i], right)\n        elif com.is_bool_indexer(right):\n            new_data.iloc[:, i] = func(left.iloc[:, i], right)\n        elif isinstance(right, ABCDataFrame) and right._indexed_same(left):\n            new_data.iloc[:, i] = func(left.iloc[:, i], right.iloc[:, i])\n        elif isinstance(right, ABCSeries) and axis == \"columns\":\n            assert right.index.equals(left.columns)\n            new_data.iloc[:, i] = func(left.iloc[:, i], right.iloc[i])\n        else:\n            raise NotImplementedError(right)\n            \n    return new_data"
        }
    ]
}