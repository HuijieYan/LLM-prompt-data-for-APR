{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n    \n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str, default None\n    axis : {0, 1, 'index', 'columns'}, default None\n    \n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    left = lib.item_from_zerodim(left)\n    right = lib.item_from_zerodim(right)\n    if is_scalar(right):\n        right = {\n            -1: right,\n            0: right\n        }[axis]\n\n    if lib.is_scalar(left) or np.ndim(left) == 0:\n        assert np.ndim(right) == 0\n    else:\n        assert not lib.is_scalar(right)\n\n    try:\n        comparison_bitwise = func in {'eq', 'ne', 'lt', 'gt', 'le', 'ge'}\n\n        # systematically remove all timezones, as naive-tz is used under the hood\n        is_special = [arg is not None and getattr(arg, 'tz', None) is not None for arg in (left, right)]\n        if is_special[0] and is_special[1]:\n            # If the output dtype could be NA, explicitly enforce that\n            o = lib.item_from_zerodim(func(left, right))\n            if isna(o):\n                # Assuming two-arg versions of 'cmp' can't produce NaT\n                return _wrapreduced(o, left, right)\n        \n        if func in {\"add\", \"sub\"}:\n            if is_extension_type(right):\n                if func == \"add\":\n                    if (is_timedelta64_ns_dtype(left) and right.dtype != \"object\"):\n                        result = result.astype(\"timedelta64[ns]\")\n                else:\n                    return NotImplemented\n            else:\n                return NotImplemented\n        if func == \"mul\":\n            if is_scalar_dtype(right.dtype) and _TIMEDURATION_CLS.is_dtype:\n                if np.issubdtype(left.dtype, np.integer):\n                    return lib.cardinality_check(left.dtype.itemsize + right.dtype.itemsize)\n                return NotImplemented\n    except TypeError:\n        if not is_special:\n            pass\n    \n    return func(left, right)",
            "import_list": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas.core.dtypes.common import is_scalar",
                "from pandas.core.indexes.api import get_objs_combined_axis",
                "from pandas.core.indexes.accessors import is_timedelta64_ns_dtype",
                "from pandas.core.computation.expressions import _trim_zeros, _bool_arith_check",
                "from pandas.core.dtypes.dtypes import _check_comparison_types",
                "from pandas.core.computation.ops import _all_arithmetic",
                "from pandas.core.ga import _TIMEDURATION_CLS",
                "from pandas._libs import lib, Timedelta",
                "from pandas.core.dtypes.base import ABCExtensionArray, ABCSeries, is_scalar_dtype, is_extension_type",
                "from pandas.core.dtypes.generic import ABCDataFrame, ABCPanel"
            ]
        }
    ]
}