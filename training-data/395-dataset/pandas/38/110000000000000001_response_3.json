{
    "pandas": [
        {
            "bugID": 38,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n\n    if len(clocs) == 0:\n        return data\n    \n    # NOTE: This doesn't deal with hierarchical columns yet\n    \n    index = data.index\n    \n    # Check if index is a MultiIndex\n    if isinstance(index, pd.MultiIndex):\n        # GH 19966 Make sure if MultiIndexed index has tuple name, they will be recognised as a whole\n        if all(c in index.names for c in clocs):\n            clocs = [clocs]\n        clocs = [index._get_level_number(i) for i in clocs]\n    \n        rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    \n        clevels = [index.levels[i] for i in clocs]\n        ccodes = [index.codes[i] for i in clocs]\n        cnames = [index.names[i] for i in clocs]\n        rlevels = [index.levels[i] for i in rlocs]\n        rcodes = [index.codes[i] for i in rlocs]\n        rnames = [index.names[i] for i in rlocs]\n    \n        shape = [len(x) for x in clevels]\n        group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n    \n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n    \n        if rlocs == []:\n            # Everything is in clocs, so the dummy df has a regular index\n            dummy_index = pd.Index(obs_ids, name=\"__placeholder__\")\n        else:\n            dummy_index = pd.MultiIndex(\n                levels=rlevels + [obs_ids],\n                codes=rcodes + [comp_ids],\n                names=rnames + [\"__placeholder__\"],\n                verify_integrity=False,\n            )\n    \n        if isinstance(data, pd.Series):\n            dummy = data.copy()\n            dummy.index = dummy_index\n    \n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n            new_levels = clevels\n            new_names = cnames\n            new_codes = recons_codes\n        else:\n            if isinstance(data.columns, pd.MultiIndex):\n                result = data\n                for i in range(len(clocs)):\n                    val = clocs[i]\n                    result = result.unstack(val, fill_value=fill_value)\n                    clocs = [v if i > v else v - 1 for v in clocs]\n    \n                return result\n    \n            dummy = data.copy()\n            dummy.index = dummy_index\n    \n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n            if isinstance(unstacked, pd.Series):\n                unstcols = unstacked.index\n            else:\n                unstcols = unstacked.columns\n            assert isinstance(unstcols, pd.MultiIndex)  # for mypy\n            new_levels = [unstcols.levels[0]] + clevels\n            new_names = [data.columns.name] + cnames\n    \n            new_codes = [unstcols.codes[0]]\n            for rec in recons_codes:\n                new_codes.append(rec.take(unstcols.codes[-1]))\n    \n        new_columns = pd.MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )\n    \n        if isinstance(unstacked, pd.Series):\n            unstacked.index = new_columns\n        else:\n            unstacked.columns = new_columns\n    \n        return unstacked\n    else:\n        # Handle the case where data.index is not a MultiIndex\n        # Implement the logic for the Index case\n        return data  # Simply return data if it's not a MultiIndex"
        }
    ]
}