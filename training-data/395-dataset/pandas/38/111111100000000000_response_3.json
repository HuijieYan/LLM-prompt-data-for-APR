{
    "pandas": [
        {
            "bugID": 38,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n        if len(clocs) == 0:\n            return data\n\n        index = data.index\n        selection = [index._get_level_number(c) for c in clocs]\n\n        n = index.nlevels\n        rlocs = [i for i in range(n) if i not in selection]\n\n        c_labels = [index.labels[i] for i in selection]\n        r_labels = [index.labels[i] for i in rlocs]\n\n        c_names = [index.names[i] for i in selection]\n        r_names = [index.names[i] for i in rlocs]\n\n        shape = [len(c) for c in c_labels]\n        group_index, reconstructed = get_compressed_ids(c_labels, shape=shape, compress=not data._is_label_reference)\n        dummy_index = MultiIndex.from_tuples([(None,) * len(rlocs) + (i,) for i in range(len(reconstructed))], names=r_names + [None])\n        values = data.values\n        columns = data.columns\n\n        if isinstance(data.columns, MultiIndex):\n            new_columns = unstack_frame(data, group_index, shape, fill_value, reconstructed)\n        else:\n            new_columns = unstack_series(data, group_index, shape, fill_value, reconstructed)\n\n        return new_columns",
            "import_list": []
        }
    ]
}