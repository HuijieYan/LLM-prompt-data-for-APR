{
    "pandas": [
        {
            "bugID": 157,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    # ... omitted code ...\n\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n    # validate tolerance; must be a Timedelta if we have a DTI\n    if self.tolerance is not None:\n        lt = self.left.index if self.left_index else left_join_keys[-1]\n        tolerance_type = type(self.tolerance).__name__\n        lt_type = str(lt.dtype)\n        \n        if 'timedelta' in lt_type and tolerance_type != 'Timedelta':\n            raise MergeError(\"incompatible tolerance {tolerance}, must be a Timedelta with type {lkdtype}\".format(\n                tolerance=type(self.tolerance).__name__, lkdtype=str(lt.dtype)\n            ))\n        elif 'datetime64' in lt_type and tolerance_type != 'Timedelta':\n            raise MergeError(\"incompatible tolerance {tolerance}, must be a Timedelta for type {lkdtype}\".format(\n                tolerance=type(self.tolerance).__name__, lkdtype=str(lt.dtype)\n            ))\n        elif 'int64' in lt_type and tolerance_type != 'int':\n            raise MergeError(\"incompatible tolerance {tolerance}, must be an integer for type {lkdtype}\".format(\n                tolerance=type(self.tolerance).__name__, lkdtype=str(lt.dtype)\n            ))\n        elif 'float' in lt_type and tolerance_type != 'float':\n            raise MergeError(\"incompatible tolerance {tolerance}, must be a float for type {lkdtype}\".format(\n                tolerance=type(self.tolerance).__name__, lkdtype=str(lt.dtype)\n            ))\n        elif 'category' in lt_type and tolerance_type != 'Timedelta':\n            raise MergeError(\"incompatible tolerance {tolerance}, must be a Timedelta for type {lkdtype}\".format(\n                tolerance=type(self.tolerance).__name__, lkdtype=str(lt.dtype)\n            ))\n        elif not any(x in lt_type for x in ['timedelta', 'datetime64', 'int64', 'float']):\n            raise MergeError(\"incompatible type of tolerance or join key\")\n            \n    # validate allow_exact_matches\n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n        \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}