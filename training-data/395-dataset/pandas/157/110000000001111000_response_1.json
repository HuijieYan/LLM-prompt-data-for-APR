{
    "pandas": [
        {
            "bugID": 157,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    merge_keys = super()._get_merge_keys()\n    left_join_keys, right_join_keys, join_names = merge_keys\n\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not lk.equals(rk):\n            if lk.dtype.kind == 'O' and rk.dtype.kind == 'O':\n                msg = (\n                    f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, both sides category, but not equal ones\"\n                )\n            else:\n                msg = f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, must be the same type\"\n            raise MergeError(msg)\n\n    if self.tolerance is not None:\n        lt = self.left.index if self.left_index else left_join_keys[-1]\n\n        if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n            if not isinstance(self.tolerance, Timedelta):\n                raise MergeError(f\"incompatible tolerance {type(self.tolerance)}, must be compat with type {lt.dtype}\")\n            if self.tolerance < Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n        elif is_numeric(lt):\n            if not is_numeric(self.tolerance):\n                raise MergeError(f\"incompatible tolerance {type(self.tolerance)}, must be compat with type {lt.dtype}\")\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n    \n    if not is_bool(self.allow_exact_matches):\n        raise MergeError(f\"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\")\n\n    return left_join_keys, right_join_keys, join_names",
            "imports": []
        }
    ]
}