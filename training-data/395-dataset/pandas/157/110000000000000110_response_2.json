{
    "pandas": [
        {
            "bugID": 157,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    # note this function has side effects\n\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not lk[0].dtype == rk[0].dtype:\n            if pd.api.types.is_categorical_dtype(lk):\n                raise MergeError(f\"joined keys don't match: {i} {lk[0].dtype} and {rk[0].dtype} \")\n            elif pd.api.types.is_float_dtype(lk):\n                raise MergeError(f\"joined keys don't match: {i} {lk[0].dtype} and {rk[0].dtype} \")\n            elif pd.api.types.is_float_dtype(rk):\n                raise MergeError(f\"joined keys don't match: {i} {lk[0].dtype} and {rk[0].dtype} \")\n        else:\n            continue\n    \n    # validate tolerance; must be a Timedelta if we have a DTI\n    if self.tolerance is not None:\n        if not isinstance(left_join_keys[-1], pd.DatetimeIndex):\n            if not isinstance(right_join_keys[-1], pd.DatetimeIndex):\n                raise MergeError(\"Tolerance is not compatible with the type of index.\")\n            else:\n                if not isinstance(self.tolerance, pd.Timedelta):\n                    raise MergeError(\"Tolerance must be a Timedelta object if the index is a DatetimeIndex.\")\n    \n    # validate allow_exact_matches\n    if not pd.api.types.is_bool(self.allow_exact_matches):\n        raise MergeError(f\"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\")\n    \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}