{
    "pandas": [
        {
            "bugID": 157,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    # note this function has side effects\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                # The generic error message is confusing for categoricals.\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, both sides category, but not equal ones\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            else:\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            raise MergeError(msg)\n\n    # validate tolerance; must be a Timedelta if we have a DTI\n    if self.tolerance is not None:\n        if (self.left_index and (\n            is_datetime64_dtype(self.left.index) or \n            is_datetime64tz_dtype(self.left.index)\n        )) or (\n            not isinstance(self.left.index, (pd.TimedeltaIndex, pd.RangeIndex)) and\n            is_datetime64_dtype(left_join_keys[-1]) or \n            is_datetime64tz_dtype(left_join_keys[-1])\n        ):\n            if not isinstance(self.tolerance, Timedelta):\n                raise MergeError(\n                    \"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\"\n                    .format(tolerance=type(self.tolerance), lkdtype=repr(left_join_keys[-1].dtype))\n                )\n            if self.tolerance < Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n        elif (...):  # repeat similar checks for other dtypes\n            ...  # similar checks for other dtypes\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n\n    # validate allow_exact_matches\n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n    return left_join_keys, right_join_keys, join_names",
            "import_list": []
        }
    ]
}