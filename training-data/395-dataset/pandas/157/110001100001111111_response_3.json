{
    "pandas": [
        {
            "bugID": 157,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    # ... previous code ...\n\n    if self.tolerance is not None:\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n\n        msg = \"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\"\n        lkdtype = repr(lt.dtype)\n\n        if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n            if not isinstance(self.tolerance, Timedelta):\n                raise MergeError(f\"{msg.format(tolerance=type(self.tolerance), lkdtype=lkdtype)}\")\n            if self.tolerance < Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_int64_dtype(lt):\n            if not is_integer(self.tolerance):\n                raise MergeError(f\"{msg.format(tolerance=self.tolerance, lkdtype=lkdtype)}\")\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_float_dtype(lt):\n            if not is_number(self.tolerance):\n                raise MergeError(f\"{msg.format(tolerance=self.tolerance, lkdtype=lkdtype)}\")\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_categorical_dtype(lt):\n            msg = (\n                \"incompatible merge keys [{i}] {lkdtype} and \"\n                \"{rkdtype}, both sides category, but not equal ones\"\n            )\n            raise MergeError(msg.format(i=0, lkdtype=lkdtype, rkdtype=repr(lt.dtype)))\n\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n\n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n    return left_join_keys, right_join_keys, join_names",
            "import_list": [
                "from pandas.core.common import is_integer, is_number, is_bool",
                "from pandas.core.dtypes.common import is_datetime64_dtype, is_datetime64tz_dtype, is_int64_dtype, is_float_dtype, is_dtype_equal, is_categorical_dtype",
                "from pandas._libs.tslibs.timedeltas import Timedelta",
                "from pandas.errors import MergeError"
            ]
        }
    ]
}