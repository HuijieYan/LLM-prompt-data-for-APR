{
    "pandas": [
        {
            "bugID": 157,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n        # note this function has side effects\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n        # validate index types are the same\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if not is_dtype_equal(lk.dtype, rk.dtype):\n                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                    # The generic error message is confusing for categoricals.\n                    #\n                    # In this function, the join keys include both the original\n                    # ones of the merge_asof() call, and also the keys passed\n                    # to its by= argument. Unordered but equal categories\n                    # are not supported for the former, but will fail\n                    # later with a ValueError, so we don't *need* to check\n                    # for them here.\n                    msg = f\"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, both sides category, but not equal ones\"\n                else:\n                    msg = f\"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, must be the same type\"\n                raise MergeError(msg)\n\n        # validate tolerance; must be a Timedelta if we have a DTI\n        if self.tolerance is not None and isinstance(left_join_keys[-1], Timedelta):\n\n            lt = self.left.index if self.left_index else left_join_keys[-1]\n\n            lt_dtype = repr(lt.dtype)\n            if isinstance(self.tolerance, Timedelta):\n                tolerance_type = type(self.tolerance)\n            else:\n                tolerance_type = type(self.tolerance).__name__\n\n            msg = f\"incompatible tolerance {tolerance_type}, must be compat with type {lt_dtype}\"\n\n            if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n                if not isinstance(self.tolerance, Timedelta) or self.tolerance < Timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n            elif is_integer(lt):\n                if not is_integer(self.tolerance) or self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n            elif is_number(lt):\n                if not is_number(self.tolerance) or self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n            else:\n                raise MergeError(\"key must be integer, timestamp or float\")\n\n        # validate allow_exact_matches\n        if not is_bool(self.allow_exact_matches):\n            msg = f\"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\"\n            raise MergeError(msg)\n\n        return left_join_keys, right_join_keys, join_names",
            "import_list": []
        }
    ]
}