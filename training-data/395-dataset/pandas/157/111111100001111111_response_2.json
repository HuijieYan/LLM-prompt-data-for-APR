{
    "pandas": [
        {
            "bugID": 157,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    if self.tolerance is not None:\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = self.left.index\n        if isinstance(lt, pd.TimedeltaIndex):\n            if not isinstance(self.tolerance, pd.Timedelta):\n                raise MergeError(\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                    tolerance=self.tolerance, lkdtype=lt.dtype))\n            if self.tolerance < pd.Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n        else:\n            lt_dtype = lt.dtype\n            if is_datetime64_dtype(lt_dtype) or is_datetime64tz_dtype(lt_dtype):\n                # validate tolerance for datetime index\n                if not isinstance(self.tolerance, pd.Timedelta):\n                    raise MergeError(\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                        tolerance=self.tolerance, lkdtype=lt_dtype))\n                if self.tolerance < pd.Timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n            elif is_int64_dtype(lt_dtype):\n                # validate tolerance for integer index\n                if not is_integer(self.tolerance):\n                    raise MergeError(\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                        tolerance=self.tolerance, lkdtype=lt_dtype))\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n            elif is_float_dtype(lt_dtype):\n                # validate tolerance for float index\n                if not is_number(self.tolerance):\n                    raise MergeError(\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                        tolerance=self.tolerance, lkdtype=lt_dtype))\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n            else:\n                raise MergeError(\"key must be integer, timestamp or float\")",
            "imports": []
        }
    ]
}