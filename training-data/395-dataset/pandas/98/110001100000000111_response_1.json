{
    "pandas": [
        {
            "bugID": 98,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 271,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def __new__(\n    cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs\n) -> \"Index\":\n\n    from .range import RangeIndex\n    from pandas import PeriodIndex, DatetimeIndex, TimedeltaIndex\n    from .numeric import Float64Index, Int64Index, UInt64Index\n    from .interval import IntervalIndex\n    from .category import CategoricalIndex\n\n    name = maybe_extract_name(name, data, cls)\n\n    if dtype is not None and dtype != object:\n        # specified dtype, disable inference\n        kwargs['dtype'] = dtype\n        kwargs['copy'] = True  # always make a copy\n\n    if isinstance(data, RangeIndex):\n        return RangeIndex(start=data, copy=copy, name=name, **kwargs)\n    elif isinstance(data, range):\n        return RangeIndex.from_range(data, name=name, **kwargs)\n    elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n        return CategoricalIndex(data, copy=copy, name=name, **kwargs)\n    # ... other cases ...\n\n    # Always make a copy before returning\n    return cls._simple_new(data, name, **kwargs).copy()",
            "imports": [
                "from .range import RangeIndex",
                "from pandas import PeriodIndex, DatetimeIndex, TimedeltaIndex",
                "from .numeric import Float64Index, Int64Index, UInt64Index",
                "from .interval import IntervalIndex",
                "from .category import CategoricalIndex"
            ]
        }
    ]
}