{
    "pandas": [
        {
            "bugID": 98,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 271,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def __new__(\n    cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs\n) -> \"Index\":\n    # ... (omitted code for imports and name extraction)\n\n    name = maybe_extract_name(name, data, cls)\n\n    if dtype is not None and not isinstance(data, (np.ndarray, Index, ABCSeries)):\n        # If the dtype is specified and the data is not an array-like object, raise an error\n        raise ValueError(\"Cannot specify dtype with non-array data\")\n\n    # If data is array-like, enforce the specified dtype\n    if data is not None and not isinstance(data, (np.ndarray, Index, ABCSeries)):\n        data = np.asarray(data)\n        data = data.astype(dtype)\n\n    # Check the type of data and construct the appropriate type of Index\n    if isinstance(data, pd.PeriodIndex):\n        return data\n    elif isinstance(data, pd.RangeIndex):\n        return pd.RangeIndex(start=data.start, stop=data.stop, copy=copy, dtype=dtype, name=name)\n    elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n        return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n    # ... (omitted code for other types of Index)\n\n    # If no specific type matches, return a generic Index\n    return Index(data, dtype=dtype, copy=copy, name=name, **kwargs)",
            "import_list": []
        }
    ]
}