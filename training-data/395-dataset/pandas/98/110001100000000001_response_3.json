{
    "pandas": [
        {
            "bugID": 98,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 271,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n) -> \"Index\":\n\n        # ... (omitted code for brevity)\n\n        # range\n        if isinstance(data, pd.RangeIndex):\n            return pd.RangeIndex(start=data.start, stop=data.stop, step=data.step, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return pd.RangeIndex(start=data.start, stop=data.stop, step=data.step, dtype=dtype, name=name)\n\n        # categorical\n        elif pd.api.types.is_categorical_dtype(data) or pd.api.types.is_categorical_dtype(dtype):\n            return pd.CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n        # interval\n        elif pd.api.types.is_interval_dtype(data) or pd.api.types.is_interval_dtype(dtype):\n            closed = kwargs.get(\"closed\", None)\n            return pd.IntervalIndex(data, dtype=dtype, name=name, copy=copy, closed=closed)\n\n        elif pd.api.types.is_datetime64_any_dtype(data) or pd.api.types.is_datetime64_any_dtype(dtype) or \"tz\" in kwargs:\n            if pd.api.types.is_dtype_equal(_o_dtype, dtype):\n                # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n                #  will raise in the where `data` is already tz-aware.  So\n                #  we leave it out of this step and cast to object-dtype after\n                #  the DatetimeIndex construction.\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                return pd.DatetimeIndex(data, copy=False, name=name, **kwargs).astype(\n                    object\n                )\n            else:\n                return pd.DatetimeIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        # ... (omitted code for brevity)\n\n        else:\n            if tupleize_cols and pd.api.types.is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if pd.api.types.is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from pandas.core.indexes.multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = pd.com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
            "import_list": [
                "from pandas.core.indexes.multi import MultiIndex"
            ]
        }
    ]
}