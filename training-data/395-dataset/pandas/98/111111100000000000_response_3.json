{
    "pandas": [
        {
            "bugID": 98,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 271,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs\n    ) -> \"Index\":\n\n        if data is None or (is_string_like(data) and \"tz\" not in kwargs):\n            if name is None:\n                name = tuple()\n            data = np.asarray(data)\n            if dtype is not None and is_datetime64_any_dtype(dtype):\n                from . import DatetimeIndex\n\n                result = DatetimeIndex._simple_new(data, name, dtype)\n            elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n                from . import TimedeltaIndex\n\n                result = TimedeltaIndex._simple_new(data, name, dtype)\n            elif is_period_dtype(data) and not is_object_dtype(dtype):\n                from . import PeriodIndex\n\n                result = PeriodIndex._simple_new(data, name, dtype)\n            elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n                if dtype is not None and not is_object_dtype(dtype):\n                    cls = dtype.construct_array_type()._generate()\n                data = np.asarray(data, dtype=object)\n                if dtype is None:\n                    result = cls._simple_new(data, name)\n                else:\n                    result = cls._simple_new(data, name, dtype)\n            elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n                from .category import CategoricalIndex\n\n                result = CategoricalIndex._simple_new(data, name, dtype, _AS_OBJECT)\n            else:\n                result = _ensure_generated_array(result, dtype, copy=copy)\n\n            return result",
            "imports": [
                "from typing import Optional, Hashable",
                "import numpy as np",
                "from . import DatetimeIndex",
                "from . import TimedeltaIndex",
                "from . import PeriodIndex",
                "from .category import CategoricalIndex"
            ]
        }
    ]
}