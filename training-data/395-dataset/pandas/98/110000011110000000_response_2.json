{
    "pandas": [
        {
            "bugID": 98,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 271,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def __new__(\n    cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs\n) -> \"Index\":\n    from pandas.api.extensions import ExtensionArray, register_extension_dtype\n    from pandas.core import algorithms, com, common, nanops, ops, series\n    from pandas.core.arrays import Categorical, DatetimeArray, IntervalArray, PeriodArray, TimedeltaArray\n    from pandas.core.arrays.base import ExtensionArray as ABCPandasArray\n\n    name = maybe_extract_name(name, data, cls)\n    coerce = kwargs.pop(\"coerce\", False)\n    cls = getattr(cls, \"_maybe_coerce_to_extension\", cls)\n\n    if isinstance(data, ABCPandasArray):\n        data = data._ndarray_values\n\n        if copy:\n            data = data.copy()\n\n    if is_scalar(data):\n        if data is None:\n            data = []\n        else:\n            data = [data]\n\n    if dtype is None and isinstance(data, ABCPandasArray):\n        data, dtype = cls._coerce_to_ndarray(data)\n\n    if is_scalar(dtype):\n        dtype = [dtype]\n    else:\n        dtype = list(dtype)\n\n    # GH 11658\n    if not is_list_like(data):\n        if is_sparse(data) and dtype:\n            raise TypeError(\n                \"Sparse data type specified with non-sparse data.\"\n            )\n        elif is_scalar(data):\n            data = [data]\n        elif not isinstance(data, ABCPandasArray):\n            data = list(data)\n        elif not dtype:\n            data, dtype = cls._coerce_to_ndarray(data)\n\n    subarr = index.get_subarr(data, dtype, copy=is_copy, datetime=handle_datetime)\n    return cls._simple_new(subarr, name=name)",
            "imports": [
                "from pandas.api.extensions import ExtensionArray, register_extension_dtype",
                "from pandas.core import algorithms, com, common, nanops, ops, series",
                "from pandas.core.arrays import Categorical, DatetimeArray, IntervalArray, PeriodArray, TimedeltaArray",
                "from pandas.core.arrays.base import ExtensionArray as ABCPandasArray"
            ]
        }
    ]
}