{
    "pandas": [
        {
            "bugID": 98,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 271,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n    ) -> \"Index\":\n        \n        _o_dtype = object  # assuming this is the object dtype\n        \n        name = maybe_extract_name(name, data, cls)\n\n        if isinstance(data, ABCPandasArray):\n            data = data.to_numpy()\n\n        if isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        if is_categorical_dtype(data) or is_categorical_dtype(dtype):\n            return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n        if is_interval_dtype(data) or is_interval_dtype(dtype):\n            closed = kwargs.get(\"closed\", None)\n            return IntervalIndex(data, dtype=dtype, name=name, copy=copy, closed=closed)\n\n        if is_datetime64_any_dtype(data) or is_datetime64_any_dtype(dtype) or \"tz\" in kwargs:\n            return DatetimeIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        if is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n            return TimedeltaIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        if is_period_dtype(data) and not is_object_dtype(dtype):\n            return PeriodIndex(data, copy=copy, name=name, **kwargs)\n\n        if is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n        \n        if isinstance(data, (np.ndarray, Index, ABCSeries)):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        \n        if data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        \n        if tupleize_cols and is_list_like(data):\n            if is_iterator(data):\n                data = list(data)\n\n            if data and all(isinstance(e, tuple) for e in data):\n                from .multi import MultiIndex\n                return MultiIndex.from_tuples(data, names=name or kwargs.get(\"names\"))\n\n        subarr = com.asarray_tuplesafe(data, dtype=object)\n        return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
            "import_list": [
                "from typing import Optional, Hashable",
                "import numpy as np",
                "from pandas.core.arrays.base import ABCPandasArray",
                "from pandas.core.dtypes.common import is_categorical_dtype, is_interval_dtype, is_datetime64_any_dtype, is_timedelta64_dtype, is_period_dtype, is_extension_array_dtype",
                "from pandas._libs import lib, libts, Interval, Period",
                "from pandas._typing import ArrayLike, Dtype, DtypeObj, Scalar",
                "from pandas.core.dtypes.common import is_signed_integer_dtype, is_unsigned_integer_dtype, is_float_dtype, is_bool_dtype",
                "from pandas.core import algorithms as algos",
                "from pandas.core.algorithms import factorize, take",
                "from pandas.core.arrays import Categorical",
                "import pandas._libs.missing as libmissing",
                "import pandas.compat.numpy as npt",
                "from pandas.core.algorithms import unique1d",
                "from pandas.core.arrays import ExtensionArray",
                "from pandas.core.arrays.boolean import BooleanDtype",
                "from pandas.core.arrays.integer import (\n    Int8Dtype,\n    Int16Dtype,\n    Int32Dtype,\n    Int64Dtype,\n    UInt8Dtype,\n    UInt16Dtype,\n    UInt32Dtype,\n    UInt64Dtype,\n)",
                "from pandas.core.arrays.integer import SubType as IntSubType",
                "from pandas.core.dtypes.generic import ABCDatetimeArray, ABCPeriodArray, ABCTimedeltaArray",
                "from pandas.core.dtypes.missing import notna, na_value_for_dtype",
                "from pandas._config import config",
                "from .multi import MultiIndex"
            ]
        }
    ]
}