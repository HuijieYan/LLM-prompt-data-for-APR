{
    "pandas": [
        {
            "bugID": 98,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 271,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def __new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,):\n    from .range import RangeIndex\n    from pandas import PeriodIndex, DatetimeIndex, TimedeltaIndex\n    from .numeric import Float64Index, Int64Index, UInt64Index\n    from .interval import IntervalIndex\n    from .category import CategoricalIndex\n    \n    name = maybe_extract_name(name, data, cls)\n    \n    defaultValue = None # Default value \n    if kwargs: \n        defaultValue = None # Parameter values by default to declare\n    \n    if data is None or callable(data):\n        return cls\n    # range\n    if isinstance(data, RangeIndex):\n        return RangeIndex(start = data, copy = copy, dtype = dtype, name = name)\n    elif isinstance(data, range):\n        return RangeIndex.from_range(data, dtype = dtype, name = name)\n    \n    # categorical\n    elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n        return CategoricalIndex(data, dtype = dtype, copy = copy, name = name, **kwargs)\n\n    # interval\n    elif (is_interval_dtype(data) or is_interval_dtype(dtype)) and not is_object_dtype(dtype):\n        closed = kwargs.get(\"closed\", None)\n        return IntervalIndex(data = data, dtype = dtype, name = name, copy = copy, closed = closed)\n    \n    elif (is_datetime64_any_dtype(data) or is_datetime64_any_dtype(dtype) or \"tz\" in kwargs):\n        if is_dtype_equal(_o_dtype, dtype):\n            # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n            #  will raise in the where `data` is already tz-aware.  So\n            #  we leave it out of this step and cast to object-dtype after\n            #  the DatetimeIndex construction.\n            # Note we can pass copy=False because the .astype below\n            #  will always make a copy\n            return DatetimeIndex(data, copy = False, name = name, **kwargs).astype(object)\n        else:\n            return DatetimeIndex(data, copy = copy, name = name, dtype = dtype, **kwargs)\n\n    elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n        if is_dtype_equal(_o_dtype, dtype):\n            # Note we can pass copy=False because the .astype below\n            #  will always make a copy\n            return TimedeltaIndex(data, copy = False, name = name, **kwargs).astype(object)\n        else:\n            return TimedeltaIndex(data, copy = copy, name = name, dtype = dtype, **kwargs)\n    \n    elif is_period_dtype(data) and not is_object_dtype(dtype):\n        return PeriodIndex(data, copy = copy, name = name, **kwargs)\n    \n    # extension dtype\n    elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n        if not (dtype is None or is_object_dtype(dtype)):\n            # coerce to the provided dtype\n            ea_cls = dtype.construct_array_type()\n            data = ea_cls._from_sequence(data, dtype = dtype, copy = False)\n        else:\n            data = np.array(data, dtype = object)\n        \n        # coerce to the object dtype\n        data = data.astype(object)\n        return Index(data, dtype = object, copy = copy, name = name, **kwargs)\n    \n    # index like\n    elif isinstance(data, (np.array, Index, ABCSeries)) :\n        if dtype is not None:\n            # we need to avoid having numpy coerce\n            # things that look like ints/floats to ints unless\n            # they are actually ints, e.g. '0' and 0.0\n            # should not be coerced\n            # GH 11836\n            data = _maybe_cast_with_dtype(data, dtype, copy)\n            dtype = data.dtype  # TODO: maybe not for object?\n        \n        # maybe coerce to a sub-class\n        if is_signed_integer_dtype(data.dtype):\n            return Int64Index(data, copy = copy, dtype = dtype, name = name)\n        elif is_unsigned_integer_dtype(data.dtype):\n            return UInt64Index(data, copy = copy, dtype = dtype,  name = name)\n        elif is_float_dtype(data.dtype):\n            return Float64Index(data, copy = copy, dtype = dtype, name = name)\n        elif is_subclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n            subarr = data.astype(\"object\")\n        else:\n            subarr = com.array2_safe(data, dtype = object) \n       \n        # subprocess does not always copy underlying data,\n        # so we need to ensyre that Pg this happens \n        if copy:\n            subarr = subarr.copy()\n        \n        if dtype is None:\n            new_data, new_dtype = maybe_case_data_without_dtype(subarr)\n            if new_dtype is not None:\n                return cls(new_data, dtype = new_dtype, copy = False, name = name, **kwargs)\n        if kwargs:\n            raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n        return cls._simple_new(subarr, name, **kwargs)",
            "imports": [
                "from .range import RangeIndex",
                "from pandas import PeriodIndex, DatetimeIndex, TimedeltaIndex",
                "from .numeric import Float64Index, Int64Index, UInt64Index",
                "from .interval import IntervalIndex",
                "from .category import CategoricalIndex"
            ]
        }
    ]
}