{
    "cookiecutter": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 61,
            "file_name": "cookiecutter/prompt.py",
            "replace_code": "def read_user_choice(var_name, options):\n    from collections import OrderedDict\n    import click\n    \"\"\"Prompt the user to choose from several options for the given variable.\n    \n    The first item will be returned if no input happens.\n    \n    :param str var_name: Variable as specified in the context\n    :param list options: Sequence of options that are available to select from\n    :return: Exactly one item of ``options`` that has been chosen by the user\n    \"\"\"\n    if not isinstance(options, list):\n        raise TypeError\n    \n    if not options:\n        raise ValueError\n    \n    choice_map = OrderedDict(\n        (u'{}'.format(i), value) for i, value in enumerate(options, 1)\n    )\n    default = u'1'\n    \n    prompt = u'Select {}:'.format(var_name)\n    for key, value in choice_map.items():\n        prompt += u'\\n{} - {}'.format(key, value)\n    prompt += u'\\nChoose from ' + ', '.join(choice_map.keys())\n    \n    user_choice = click.prompt(\n        prompt, type=click.Choice(choice_map.keys()), default=default\n    )\n    return choice_map[user_choice]"
        }
    ]
}