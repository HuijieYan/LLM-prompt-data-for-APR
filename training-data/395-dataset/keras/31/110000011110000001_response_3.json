{
    "keras": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 3928,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def ctc_batch_cost(y_true, y_pred, input_length, label_length):\n    label_length = tf.cast(tf.squeeze(label_length), dtype=tf.int32)\n    input_length = tf.cast(tf.squeeze(input_length), dtype=tf.int32)\n\n    # Perform a shape check on the output of ctc_label_dense_to_sparse\n    # to ensure it has the desired shape\n    sparse_labels = ctc_label_dense_to_sparse(y_true, label_length)\n    if len(sparse_labels.shape) == 1:\n        sparse_labels = tf.expand_dims(sparse_labels, 1)\n    elif len(sparse_labels.shape) == 2 and sparse_labels.shape[1] != 2:\n        raise ValueError(\"Invalid shape for sparse_labels: \" + str(sparse_labels.shape))\n\n    y_pred = tf.math.log(tf.transpose(y_pred, perm=[1, 0, 2]) + tf.keras.backend.epsilon())\n\n    return tf.expand_dims(tf.nn.ctc_loss(labels=sparse_labels,\n                                        logits=y_pred,\n                                        label_length=label_length,\n                                        logit_length=input_length,\n                                        logits_time_major=True), 1)",
            "imports": []
        }
    ]
}