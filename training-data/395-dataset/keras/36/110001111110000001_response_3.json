{
    "keras": [
        {
            "bugID": 36,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 3391,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def separable_conv1d(x, depthwise_kernel, pointwise_kernel, strides=1,\n                     padding='valid', data_format=None, dilation_rate=1):\n    if data_format is None:\n        data_format = K.image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv1d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        spatial_start_dim = 1\n        strides = (1, strides, 1)\n        x = K.temporal_padding(x, 1)\n    else:\n        spatial_start_dim = 2\n        strides = (1, 1, strides)\n        x = K.temporal_padding(x, (1, 1))\n    x = K.expand_dims(x, spatial_start_dim)\n    depthwise_kernel = K.expand_dims(depthwise_kernel, 0)\n    pointwise_kernel = K.expand_dims(pointwise_kernel, 0)\n    dilation_rate = (1,) + (dilation_rate,)\n\n    x = K.separable_conv1d(x, depthwise_kernel, pointwise_kernel,\n                           strides=strides,\n                           padding=padding,\n                           dilation_rate=dilation_rate,\n                           data_format=tf_data_format)\n  \n    if tf_data_format == 'NHWC':\n        x = x[:, 1:-1, :]  # Adjust for temporal padding\n    else:\n        x = x[:, :, 1:-1]  # Adjust for temporal padding\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = K.permute_dimensions(x, (0, 2, 1))  # NWC -> NCW\n\n    return x",
            "import_list": []
        }
    ]
}