{
    "keras": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 933,
            "file_name": "keras/engine/network.py",
            "replace_code": "def from_config(cls, config, custom_objects=None):\n    \"\"\"Instantiates a Model from its config (output of `get_config()`).\n\n    # Arguments\n        config: Model config dictionary.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n\n    # Returns\n        A model instance.\n\n    # Raises\n        ValueError: In case of improperly formatted config dict.\n    \"\"\"\n    # Layer instances created during\n    # the graph reconstruction process\n    created_layers = {}\n\n    # Dictionary mapping layer instances to\n    # node data that specifies a layer call.\n    # It acts as a queue that maintains any unprocessed\n    # layer call until it becomes possible to process it\n    # (i.e. until the input tensors to the call all exist).\n    unprocessed_nodes = {}\n\n    def add_unprocessed_node(layer, node_data):\n        if layer not in unprocessed_nodes:\n            unprocessed_nodes[layer] = [node_data]\n        else:\n            unprocessed_nodes[layer].append(node_data)\n\n    def process_node(layer, node_data):\n        input_tensors = []\n        for input_data in node_data:\n            inbound_layer_name = input_data[0]\n            inbound_node_index = input_data[1]\n            inbound_tensor_index = input_data[2]\n            if len(input_data) == 3:\n                kwargs = {}\n            elif len(input_data) == 4:\n                kwargs = input_data[3]\n            else:\n                raise ValueError('Improperly formatted model config.')\n            inbound_layer = created_layers[inbound_layer_name]\n            if not inbound_layer._inbound_nodes:\n               add_unprocessed_node(layer, node_data)\n               return\n            inbound_node = inbound_layer._inbound_nodes[inbound_node_index]\n            input_tensors.append(\n                inbound_node.output_tensors[inbound_tensor_index])\n        # Call layer on its inputs, thus creating the node\n        # and building the layer if needed.\n        if input_tensors:\n            layer(unpack_singleton(input_tensors), **kwargs)\n\n    def process_layer(layer_data):\n        \"\"\"Deserializes a layer, then call it on appropriate inputs.\n\n        # Arguments\n            layer_data: layer config dict.\n\n        # Raises\n            ValueError: In case of improperly formatted `layer_data` dict.\n        \"\"\"\n        layer_name = layer_data['name']\n\n        # Instantiate layer.\n        from keras.layers import deserialize\n\n        layer = deserialize(layer_data,\n                            custom_objects=custom_objects)\n        created_layers[layer_name] = layer\n\n        # Gather layer inputs.\n        inbound_nodes_data = layer_data['inbound_nodes']\n        for node_data in inbound_nodes_data:\n            # We don't process nodes (i.e. make layer calls)\n            # on the fly because the inbound node may not yet exist,\n            # in case of layer shared at different topological depths\n            # (e.g. a model such as A(B(A(B(x)))))\n            add_unprocessed_node(layer, node_data)\n\n    # First, we create all layers and enqueue nodes to be processed\n    for layer_data in config['layers']:\n        process_layer(layer_data)\n    # Then we process nodes in order of layer depth.\n    # Nodes that cannot yet be processed (if the inbound node\n    # does not yet exist) are re-enqueued, and the process\n    # is repeated until all nodes are processed.\n    while unprocessed_nodes:\n        for layer in list(created_layers.values()):  # Make a copy\n            if layer in unprocessed_nodes:\n                for node_data in unprocessed_nodes.pop(layer):\n                    process_node(layer, node_data)\n                    # return the built model\n    name = config.get('name')\n    input_tensors = []\n    output_tensors = []\n    for layer_data in config['input_layers']:\n        layer_name, node_index, tensor_index = layer_data\n        assert layer_name in created_layers\n        layer = created_layers[layer_name]\n        layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n        input_tensors.append(layer_output_tensors[tensor_index])\n    for layer_data in config['output_layers']:\n        layer_name, node_index, tensor_index = layer_data\n        assert layer_name in created_layers\n        layer = created_layers[layer_name]\n        layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n        output_tensors.append(layer_output_tensors[tensor_index])\n    return cls(inputs=input_tensors, outputs=output_tensors, name=name)",
            "import_list": [
                "from keras.layers import deserialize"
            ]
        }
    ]
}