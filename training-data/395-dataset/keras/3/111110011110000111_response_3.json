{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    # ... (same docstring as before)\n    \n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ' + str(model))\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead: ' + str(model))\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.input_shape) for layer in model.layers if isinstance(layer, InputLayer)]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    for original_tensor, input_tensor in zip(model.inputs, input_tensors):\n        tensor_map[original_tensor] = (input_tensor, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    for layer in model.layers:\n        if layer not in layer_map:\n            # Clone layer.\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n\n    for node in model._nodes_by_depth:\n        input_tensors = [tensor_map[tensor][0] for tensor in node.input_tensors]\n        output_tensors = layer_map[node.outbound_layer](input_tensors)  # Call the new layer\n\n        for original_tensor, output_tensor in zip(node.output_tensors, output_tensors):\n            tensor_map[original_tensor] = (output_tensor, None)\n\n    # Check that we did compute the model outputs,\n    # then instantiate a new model from inputs and outputs.\n    output_tensors = [tensor_map[tensor][0] for tensor in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": []
        }
    ]
}