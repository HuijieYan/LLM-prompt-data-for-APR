{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, tf.keras.Model):\n          raise ValueError('Expected `model` argument '\n                           'to be a `Model` instance, got ', model)\n    if isinstance(model, tf.keras.Sequential):\n          raise ValueError('Expected `model` argument '\n                           'to be a functional `Model` instance, '\n                           'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [tf.keras.layers.Input(shape=layer.input_shape[1:]) for layer in model.layers if isinstance(layer, tf.keras.layers.InputLayer)]\n    else:\n        input_tensors = tf.nest.flatten(input_tensors, expand_composites=True)\n    \n        for x, y in zip(model.inputs, input_tensors):\n              tensor_map[x] = (y, None)  # tensor, mask\n\n    for layer in model.layers:\n        if isinstance(layer, tf.keras.layers.InputLayer):\n              layer_map[layer] = layer\n    \n    # Iterated over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # Recover the corresponding layer.\n            layer = node.outbound_layer\n    \n            # Get or create layer.\n            if layer not in layer_map:\n                # Clone layer.\n                new_layer = tf.keras.layers.deserialize({\n                    'class_name': layer.__class__.__name__,\n                    'config': layer.get_config(),\n                })\n                layer_map[layer] = new_layer\n            else:\n                # Reuse previously cloned layer.\n                layer = layer_map[layer]\n                # Don't call InputLayer multiple times.\n                if isinstance(layer, tf.keras.layers.InputLayer):\n                    continue\n    \n            # Gather inputs to call the new layer.\n            reference_input_tensors = node.input_tensors\n    \n            # If all previous input tensors are available in tensor_map,\n            # then call node.inbound_layer on them.\n            computed_tensors_and_masks = []\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_tensors_and_masks.append(tensor_map[x] + (None, ))  # Tensor, mask, dummy_placeholder\n            dummy_mask = None  # Dummy mask to disable compiler optimization for tf.compat.v1.data.experimental.get_filtered_dtypes() on `output_tensors` later.\n            if len(computed_tensors_and_masks) == len(reference_input_tensors) and all(mask is None for (_, mask, _) in computed_tensors_and_masks):\n                computed_tensors = [x for x, _, _ in computed_tensors_and_masks]\n                computed_masks = [mask for _, mask, _ in computed_tensors_and_masks]\n                output_tensors = tensor_map[node.output_tensors[0]][0]\n                if len(computed_tensors) == 1:\n                    if layer._expects_training_arg:\n                        output_tensors = layer(computed_tensors[0], training=True)\n                    else:\n                        output_tensors = layer(computed_tensors[0])\n                else:\n                    # call the layer, special handling of training argument\n                    if layer._expects_mask_arg:\n                        kwargs = {'mask': computed_masks}\n                    else:\n                        kwargs = {}\n                    if layer._expects_training_arg:\n                        output_tensors = layer(computed_tensors, **kwargs, training=True)\n                    else:\n                        output_tensors = layer(computed_tensors, **kwargs)\n                icond = isinstance(output_tensors, list) or isinstance(output_tensors, tuple)\n                if icond and len(output_tensors) == len(node.output_tensors):\n                    output_tensors = [output_tensors]  # Ensure that list wrappers are stripped -- list nestedness was needed because multiple input tensors were present.\n                if not icond:\n                    output_tensors = [output_tensors]\n                i = 0\n                for x, dummy_output_tensor in zip(node.output_tensors, output_tensors):\n                    tensor_map[x] = (dummy_output_tensor, None)\n                    i += 1\n        \n      # Check that we did compute the model outputs, then instantiate a new model from inputs and outputs.\n    output_tensors = []\n    for x in model.outputs:\n        if x not in tensor_map:\n            raise ValueError('Could not compute output ', x)\n        tensor, _ = tensor_map[x]\n        output_tensors.append(tensor)\n    return tf.keras.Model(tf.nest.flatten(model.inputs), output_tensors, name=model.name)",
            "imports": []
        }
    ]
}