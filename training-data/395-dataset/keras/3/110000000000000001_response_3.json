{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if model.__class__.__name__ == 'Sequential':\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.input.shape[1:]) for layer in model.layers if isinstance(layer, InputLayer)]\n    \n    layer_map = {}\n    tensor_map = {}\n    for i, layer in enumerate(model.layers):\n        if isinstance(layer, InputLayer):\n            layer_map[layer] = input_tensors[i]\n\n    for i, layer in enumerate(model.layers):\n        if i == 0:\n            prev_layer = layer_map.get(layer)\n        else:\n            prev_layer = layer_map.get(model.layers[i - 1])\n        layer_map[layer] = layer(prev_layer)\n        tensor_map[layer.output] = layer_map[layer]\n\n    cloned_model = Model(inputs=input_tensors, outputs=tensor_map[model.layers[-1].output])\n    return cloned_model",
            "import_list": [
                "from tensorflow.keras.models import Model, Input"
            ]
        }
    ]
}