{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n  \n    input_layers = model.layers\n    if input_tensors is None:\n        input_tensors = [Input(batch_input_shape=layer.input_shape,\n                               dtype=layer.input.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name) for layer in input_layers]\n\n    layer_map = {}  # Cache for created layers.\n\n    for layer, input_tensor in zip(input_layers, input_tensors):\n        layer_map[layer] = input_tensor\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            # Clone layer.\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n\n    # Create new input layers using provided input tensors.\n    new_input_layers = [layer_map[layer] for layer in model.layers]\n\n    # Create new instances of layers and clone them.\n    new_layers = [layer_map[layer] for layer in model.layers]\n\n    # Instantiate a new model from inputs and outputs.\n    input_tensors = [layer.output for layer in layer_map.values()]\n    output_tensors = [layer.output for layer in new_layers]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "from tensorflow.keras.models import Model",
                "from tensorflow.keras import Input"
            ]
        }
    ]
}