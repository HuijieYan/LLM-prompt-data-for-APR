{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if model.__class__.__name__ == 'Sequential':\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n            # Cache newly created input layer.\n            input_layers.append(input_tensor)\n            layer_map[layer] = input_layers[-1]\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=x,\n                                     name='input_wrapper_for_' + name)\n                input_tensors[i] = input_tensor\n                layer_map[x] = input_tensor\n                tensor_map[x] = (input_tensor, None)\n            else:\n                layer_map[x] = x\n                tensor_map[x] = (x, None)\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            config = layer.get_config()\n            new_layer = layer.__class__.from_config(config)\n            layer_map[layer] = new_layer\n\n    # Map the input_tensors to model.inputs\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    for node in model._nodes_by_depth.values():\n        for layer in node:\n            inbound_layers = layer.inbound_layers\n            node_tensors = layer.input_tensors\n\n            computed_data = [(tensor_map[tensor][0], tensor_map[tensor][1]) for tensor in node_tensors if tensor in tensor_map]\n\n            if len(computed_data) == len(node_tensors):\n                computed_tensors = [data[0] for data in computed_data]\n                computed_masks = [data[1] for data in computed_data]\n                kwargs = layer.arguments\n                if has_arg(layer.call, 'mask') and 'mask' not in kwargs:\n                    kwargs['mask'] = computed_masks\n                if len(computed_tensors) == 1:\n                    y = layer(computed_tensors[0], **kwargs)\n                else:\n                    y = layer(computed_tensors, **kwargs)\n\n                if len(layer._output_tensor_cache) == 1:\n                    y = to_list(y)\n                output_masks = getattr(layer, 'compute_mask', None)\n                if output_masks is not None and len(computed_tensors) == 1:\n                    m = [output_masks(computed_tensors[0], computed_masks)]\n                elif output_masks is not None:\n                    m = [output_masks(computed_tensors, computed_masks)]\n                else:\n                    m = [None for _ in to_list(y)]\n                for _y, t, _m in zip(to_list(y), layer._output_tensor_cache, m):\n                    tensor_map[t] = _y, _m\n\n    outputs = [tensor_map[t][0] for t in model.outputs]\n    output_masks = []\n    for t in model.outputs:\n        output_masks.extend(to_list(tensor_map[t][1]))\n    \n    return Model(input_tensors, outputs, name=model.name)",
            "imports": [
                "from keras.engine.training import Model",
                "from keras.layers import InputLayer, Input",
                "from keras.utils.generic_utils import to_list",
                "from keras import backend as K",
                "from keras.utils.layer_utils import has_arg"
            ]
        }
    ]
}