{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.output_shape, dtype=layer.dtype, name=layer.name) for layer in model.layers]\n        for original_input_layer, cloned_input_layer in zip(model.layers, input_tensors):\n            layer_map[original_input_layer] = cloned_input_layer\n    else:\n        input_tensors = input_tensors\n\n    for layer in model.layers:\n        layer_config = layer.get_config()\n        new_layer = layer.__class__.from_config(layer_config)\n        layer_map[layer] = new_layer\n\n    for i, input_layer in enumerate(model.inputs):\n        tensor_map[input_layer] = (input_tensors[i], None)  # tensor, mask\n\n    for layer in model.layers:\n        if layer in layer_map:\n            layer = layer_map[layer]\n        else:\n            layer_config = layer.get_config()\n            new_layer = layer.__class__.from_config(layer_config)\n            layer_map[layer] = new_layer\n            layer = new_layer\n\n        inputs = []\n        for node in layer._inbound_nodes:\n            for inbound_layer, node_index, tensor_index, _ in node.iterate_inbound():\n                if inbound_layer in layer_map:\n                    inputs.append(tensor_map[inbound_layer][0])\n\n        output_tensors = layer(inputs)\n        for i, output_tensor in enumerate(output_tensors):\n            tensor_map[layer._outbound_nodes[0].output_tensors[i]] = (output_tensor, None)\n\n    output_tensors = [tensor_map[output_tensor][0] for output_tensor in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": [
                "from tensorflow.keras.models import Model",
                "from tensorflow.keras.layers import Input"
            ]
        }
    ]
}