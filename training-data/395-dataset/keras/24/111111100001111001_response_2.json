{
    "keras": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 734,
            "file_name": "keras/callbacks.py",
            "replace_code": "def set_model(self, model):\n    self.model = model\n    self.sess = K.get_session()\n    if self.histogram_freq > 0 and self.merged is None:\n        for layer in self.model.layers:\n            for weight in layer.weights:\n                mapped_weight_name = weight.name.replace(':', '_')\n                tf.compat.v1.summary.histogram(mapped_weight_name, weight)\n                if self.write_grads:\n                    grads = K.gradients(model.total_loss, weight)\n                    for grad in grads:\n                        if isinstance(grad, tf.IndexedSlices):\n                            grad_values = grad.values\n                        else:\n                            grad_values = grad\n                        tf.compat.v1.summary.histogram('{}_grad'.format(mapped_weight_name), grad_values)\n                if self.write_images:\n                    w_img = tf.transpose(weight)\n                    w_img = tf.reshape(w_img, [1, -1])\n                    tf.compat.v1.summary.image(mapped_weight_name, w_img)\n\n        if hasattr(layer, 'output'):\n            tf.compat.v1.summary.histogram('{}_out'.format(layer.name), layer.output)\n\n    self.merged = tf.compat.v1.summary.merge_all()\n\n    self.writer = tf.compat.v1.summary.FileWriter(self.log_dir)\n    if self.write_graph:\n        self.writer.add_graph(self.sess.graph)\n\n    if self.embeddings_freq:\n        embeddings_layer_names = self.embeddings_layer_names\n        if not embeddings_layer_names:\n            embeddings_layer_names = [layer.name for layer in self.model.layers if isinstance(layer, tf.keras.layers.Embedding)]\n        embeddings = {layer.name: layer.weights[0] for layer in self.model.layers if layer.name in embeddings_layer_names}\n        saver = tf.compat.v1.train.Saver(list(embeddings.values()))\n        embeddings_metadata = {}\n\n        for layer_name, tensor in embeddings.items():\n            embedding = config.embeddings.add()\n            embedding.tensor_name = tensor.name\n            if layer_name in embeddings_metadata:\n                embedding.metadata_path = embeddings_metadata[layer_name]\n\n        self.saver = saver\n        projector.visualize_embeddings(self.writer, config)",
            "import_list": []
        }
    ]
}