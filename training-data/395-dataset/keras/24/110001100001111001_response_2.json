{
    "keras": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 734,
            "file_name": "keras/callbacks.py",
            "replace_code": "def set_model(self, model):\n        self.model = model\n        if K.backend() == 'tensorflow':\n            self.sess = tf.compat.v1.Session()\n        if self.histogram_freq and self.merged is None:\n            for layer in self.model.layers:\n                for weight in layer.weights:\n                    mapped_weight_name = weight.name.replace(':', '_')\n                    tf.summary.scalar(mapped_weight_name, weight)\n                    if self.write_grads:\n                        with tf.GradientTape() as tape:\n                            loss = model.total_loss\n                            grads = tape.gradient(loss, weight)\n                            tf.summary.histogram('{}_grad'.format(mapped_weight_name), grads)\n                    if self.write_images:\n                        w_img = tf.squeeze(weight)\n                        shape = K.int_shape(w_img)\n                        if len(shape) == 2:  # dense layer kernel case\n                            if shape[0] > shape[1]:\n                                w_img = tf.transpose(w_img)\n                                shape = K.int_shape(w_img)\n                            w_img = tf.reshape(w_img, [1, shape[0], shape[1], 1])\n                        elif len(shape) == 3:  # convnet case\n                            if K.image_data_format() == 'channels_last':\n                                w_img = tf.transpose(w_img, perm=[2, 0, 1])\n                                shape = K.int_shape(w_img)\n                            w_img = tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])\n                        elif len(shape) == 1:  # bias case\n                            w_img = tf.reshape(w_img, [1, shape[0], 1, 1])\n                        else:\n                            continue\n\n                        shape = K.int_shape(w_img)\n                        assert len(shape) == 4 and shape[-1] in [1, 3, 4]\n                        tf.summary.image(mapped_weight_name, w_img)\n\n        self.merged = tf.summary.merge_all()\n        if self.write_graph:\n            self.writer = tf.summary.create_file_writer(self.log_dir)\n        else:\n            self.writer = tf.summary.create_file_writer(self.log_dir)\n\n        if self.embeddings_freq:\n            embeddings_layer_names = self.embeddings_layer_names\n            if not embeddings_layer_names:\n                embeddings_layer_names = [layer.name for layer in self.model.layers\n                                          if isinstance(layer, Embedding)]\n            embeddings = {layer.name: layer.weights[0]\n                          for layer in self.model.layers\n                          if layer.name in embeddings_layer_names}\n            self.saver = tf.compat.v1.train.Saver(list(embeddings.values()))\n            embeddings_metadata = {}\n            if not isinstance(self.embeddings_metadata, str):\n                embeddings_metadata = self.embeddings_metadata\n            else:\n                embeddings_metadata = {layer_name: self.embeddings_metadata\n                                       for layer_name in embeddings.keys()}\n            projector_config = projector.ProjectorConfig()\n            self.embeddings_ckpt_path = os.path.join(self.log_dir, 'keras_embedding.ckpt')\n            for layer_name, tensor in embeddings.items():\n                embedding = projector_config.embeddings.add()\n                embedding.tensor_name = tensor.name\n                if layer_name in embeddings_metadata:\n                    embedding.metadata_path = embeddings_metadata[layer_name]\n            projector.visualize_embeddings(self.writer, projector_config)",
            "imports": []
        }
    ]
}