{
    "keras": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 734,
            "file_name": "keras/callbacks.py",
            "replace_code": "def set_model(self, model):\n    self.model = model\n    if K.backend() == 'tensorflow':\n        self.sess = tf.compat.v1.keras.backend.get_session()\n    if self.histogram_freq and self.merged is None:\n        for layer in self.model.layers:\n            for weight in layer.weights:\n                mapped_weight_name = weight.name.replace(':', '_')\n                summary_ops_v2.histogram(mapped_weight_name, weight)\n                if self.write_grads:\n                    grads = model.optimizer.get_gradients(model.total_loss, weight)\n\n                    def is_indexed_slices(grad):\n                        return type(grad).__name__ == 'IndexedSlices'\n                    grads = [grad.values if is_indexed_slices(grad) else grad for grad in grads]\n                    summary_ops_v2.histogram('{}_grad'.format(mapped_weight_name), grads)\n                if self.write_images:\n                    w_img = tf.squeeze(weight)\n                    shape = K.int_shape(w_img)\n                    if len(shape) == 2:  # dense layer kernel case\n                        if shape[0] > shape[1]:\n                            w_img = tf.transpose(w_img)\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [1, shape[0], shape[1], 1])\n                    elif len(shape) == 3:  # convnet case\n                        if K.image_data_format() == 'channels_last':\n                            # switch to channels_first to display every kernel as a separate image\n                            w_img = tf.transpose(w_img, perm=[2, 0, 1])\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])\n                    elif len(shape) == 1:  # bias case\n                        w_img = tf.reshape(w_img, [1, shape[0], 1, 1])\n                    else:\n                        # not possible to handle 3D convnets etc.\n                        continue\n                    shape = K.int_shape(w_img)\n                    assert len(shape) == 4 and shape[-1] in [1, 3, 4]\n                    summary_ops_v2.image(mapped_weight_name, w_img)\n\n            if hasattr(layer, 'output'):\n                summary_ops_v2.histogram('{}_out'.format(layer.name), layer.output)\n    self.merged = tf.compat.v1.summary.merge_all()\n\n    if self.write_graph:\n        self.writer = tf.compat.v1.summary.FileWriter(self.log_dir, self.sess.graph)\n    else:\n        self.writer = tf.compat.v1.summary.FileWriter(self.log_dir)",
            "import_list": [
                "import tensorflow as tf",
                "from tensorflow.python.ops import summary_ops_v2",
                "from tensorflow.python.keras import backend as K"
            ]
        }
    ]
}