{
    "keras": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 734,
            "file_name": "keras/callbacks.py",
            "replace_code": "def set_model(self, model):\n    self.model = model\n    if K.backend() == 'tensorflow':\n        self.sess = K.get_session()\n    if self.histogram_freq and self.merged is None:\n        with self.writer.as_default():\n            for layer in self.model.layers:\n                for weight in layer.weights:\n                    mapped_weight_name = weight.name.replace(':', '_')\n                    tf.summary.histogram(mapped_weight_name, weight)\n                    if self.write_grads:\n                        with tf.GradientTape() as grad_tape:\n                            # Calculate gradients\n                            grads = grad_tape.gradient(model.total_loss, weight)\n                            tf.summary.histogram('{}_grad'.format(mapped_weight_name), grads)\n                    if self.write_images:\n                        w_img = tf.expand_dims(weight, axis=-1)\n                        tf.summary.image(mapped_weight_name, w_img)\n\n                if hasattr(layer, 'output'):\n                    tf.summary.histogram('{}_out'.format(layer.name), layer.output)\n        self.merged = tf.summary.merge_all()\n\n    if self.write_graph:\n        if tf.__version__.startswith('1.'):\n            self.writer.add_graph(self.sess.graph)\n        else:\n            from tensorflow.python.framework import ops\n            ops.reset_default_graph()\n            self.writer.add_graph(tf.compat.v1.get_default_graph())\n\n    if self.embeddings_freq and self.embeddings_layer_names:\n        log_dir = str(self.log_dir)\n        if isinstance(log_dir, list):\n            log_dir = log_dir[0]\n        config = projector.ProjectorConfig()\n        for layer in self.model.layers:\n            layer_name = layer.name\n            if layer_name in self.embeddings_layer_names:\n                for weight in layer.weights:\n                    tensor = weight\n                    embedding = config.embeddings.add()\n                    embedding.tensor_name = tensor.name\n                    if layer_name in self.embeddings_metadata:\n                        embedding.metadata_path = self.embeddings_metadata[layer_name]\n\n        self.embeddings_ckpt_path = os.path.join(log_dir, 'keras_embedding.ckpt')\n        self.saver = tf.compat.v1.train.Saver(list(embeddings.values()))\n        projector.visualize_embeddings(self.writer, config)",
            "imports": [
                "from tensorflow.python.framework import ops"
            ]
        }
    ]
}