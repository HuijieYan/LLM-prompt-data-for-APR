{
    "keras": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 734,
            "file_name": "keras/callbacks.py",
            "replace_code": "def set_model(self, model):\n\n    self.model = model\n    if K.backend() == 'tensorflow':\n        self.sess = K.get_session()\n    if self.histogram_freq and self.merged is None:\n        for layer in self.model.layers:\n            for weight in layer.weights:\n                mapped_weight_name = weight.name.replace(':', '_')\n                if self.write_grads and model.optimizer:\n                    grads = model.optimizer.get_gradients(model.total_loss, weight)\n                    tf.summary.histogram('{}_grad'.format(mapped_weight_name), grads)\n                if self.write_images:\n                    w_img = tf.expand_dims(weight, 0)\n                    shape = K.int_shape(w_img)\n                    if len(shape) == 4 and shape[-1] in [1, 3, 4]:\n                        tf.summary.image(mapped_weight_name, w_img)\n            if hasattr(layer, 'output'):\n                tf.summary.histogram('{}_out'.format(layer.name), layer.output)\n    self.merged = tf.summary.merge_all()\n    self.writer = tf.summary.FileWriter(self.log_dir, self.sess.graph) if self.write_graph else tf.summary.FileWriter(self.log_dir)\n    if self.embeddings_freq:\n        embeddings_layer_names = [layer.name for layer in self.model.layers if isinstance(layer, Embedding)]\n        embeddings = {layer.name: layer.weights[0] for layer in self.model.layers if layer.name in embeddings_layer_names}\n        self.saver = tf.train.Saver(list(embeddings.values()))\n        embeddings_metadata = {layer_name: self.embeddings_metadata for layer_name in embeddings.keys()} if isinstance(self.embeddings_metadata, str) else self.embeddings_metadata\n        config = projector.ProjectorConfig()\n        self.embeddings_ckpt_path = os.path.join(self.log_dir, 'keras_embedding.ckpt')\n        for layer_name, tensor in embeddings.items():\n            embedding = config.embeddings.add()\n            embedding.tensor_name = tensor.name\n            embedding.metadata_path = embeddings_metadata.get(layer_name, '')\n        projector.visualize_embeddings(self.writer, config)"
        }
    ]
}