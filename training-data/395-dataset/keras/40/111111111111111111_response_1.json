{
    "keras": [
        {
            "bugID": 40,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "keras/layers/recurrent.py",
            "replace_code": "def compute_output_shape(self, input_shape):\n    if isinstance(input_shape, list):\n        input_shape = input_shape[0]\n\n    state_sizes = self.cell.state_size if isinstance(self.cell.state_size, (list, tuple)) else [self.cell.state_size]\n\n    if self.return_sequences:\n        output_shape = (input_shape[0], input_shape[1], state_sizes[0])\n    else:\n        output_shape = (input_shape[0], state_sizes[0])\n\n    state_shape = [(input_shape[0], size) for size in state_sizes]\n\n    if self.return_state:\n        return [output_shape] + state_shape\n    else:\n        return output_shape",
            "imports": []
        }
    ]
}