{
    "keras": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 428,
            "file_name": "keras/engine/training_utils.py",
            "replace_code": "def standardize_weights(y,\n                        sample_weight=None,\n                        class_weight=None,\n                        sample_weight_mode=None):\n    if sample_weight_mode is not None:\n        # Check if sample_weight_mode is valid\n        if sample_weight_mode != 'temporal' and sample_weight_mode != 'spatial':\n            raise ValueError('sample_weight_mode should be None, \"temporal\", or \"spatial\". Found: ' + str(sample_weight_mode))\n        \n        # Check if sample_weight is provided and has valid dimensions\n        if sample_weight is not None:\n            if sample_weight_mode == 'temporal' and len(sample_weight.shape) != 2:\n                raise ValueError('Found a sample_weight array with shape ' + str(sample_weight.shape) + '. In order to use timestep-wise sample weighting, you should pass a 2D sample_weight array.')\n            elif sample_weight_mode == 'spatial' and sample_weight.ndim != len(y.shape):\n                raise ValueError('Found a sample_weight with shape ' + str(sample_weight.shape) + '. Expected sample_weight with rank equal to ' + str(len(y.shape)))\n    \n    else:\n        # Check if sample_weight is provided and has valid dimensions for spatial mode\n        if sample_weight is not None:\n            if sample_weight.ndim != 1:\n                raise ValueError('Found a sample_weight array with shape ' + str(sample_weight.shape) + '. In order to use sample-wise weights, make sure your sample_weight array is 1D.')\n        \n        # Check if class_weight is a dictionary and has valid dimensions\n        if isinstance(class_weight, dict):\n            if len(y.shape) > 2:\n                raise ValueError('`class_weight` not supported for 3+ dimensional targets.')\n            \n            if len(y.shape) > 1 and y.shape[1] > 1:\n                y_classes = np.argmax(y, axis=1)\n            else:\n                y_classes = y\n                \n            weights = np.array([class_weight.get(cls, 1) for cls in y_classes])\n            return weights\n        else:\n            # Return weights based on the mode (spatial or temporal)\n            if sample_weight_mode is None and sample_weight is None:\n                return np.ones((y.shape[0],), dtype=K.floatx())\n            else:\n                return np.ones(y.shape, dtype=K.floatx())",
            "imports": []
        }
    ]
}