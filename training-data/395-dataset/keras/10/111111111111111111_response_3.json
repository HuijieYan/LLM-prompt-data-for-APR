{
    "keras": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 428,
            "file_name": "keras/engine/training_utils.py",
            "replace_code": "def standardize_weights(y,\n                        sample_weight=None,\n                        class_weight=None,\n                        sample_weight_mode=None):\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal':\n            raise ValueError('\"sample_weight_mode '\n                            'should be None or \"temporal\". '\n                            'Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 2:\n            raise ValueError('Found a sample_weight array for '\n                            'an input with shape ' +\n                            str(y.shape) + '. '\n                            'Timestep-wise sample weighting (use of '\n                            'sample_weight_mode=\"temporal\") is restricted to '\n                            'outputs that are at least 2D, i.e. that have '\n                            'a time dimension.')\n        if sample_weight is not None and len(sample_weight.shape) != 2:\n            raise ValueError('Found a sample_weight array with shape ' +\n                            str(sample_weight.shape) + '. '\n                            'In order to use timestep-wise sample weighting, '\n                            'you should pass a 2D sample_weight array.')\n        if sample_weight is not None and len(sample_weight) != len(y):\n            raise ValueError('Found a sample_weight array with length ' +\n                            str(len(sample_weight)) + '. '\n                            'It should have the same length as the number of samples in y.')\n\n    if sample_weight is not None:\n        return sample_weight\n    elif class_weight is not None:\n        y_classes = np.argmax(y, axis=-1)\n        weights = np.array([class_weight[cls] for cls in y_classes])\n        return weights\n    else:\n        return np.ones((len(y),), dtype=K.floatx())",
            "imports": [
                "import numpy as np",
                "import warnings",
                "from tensorflow.keras import backend as K"
            ]
        }
    ]
}