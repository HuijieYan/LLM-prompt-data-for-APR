{
    "keras": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 428,
            "file_name": "keras/engine/training_utils.py",
            "replace_code": "def standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None):\n    \"\"\"Performs sample weight validation and standardization.\n    \n    Everything gets normalized to a single sample-wise (or timestep-wise)\n    weight array.\n\n    # Arguments\n        y: Numpy array of model targets to be weighted.\n        sample_weight: User-provided `sample_weight` argument.\n        class_weight: User-provided `class_weight` argument.\n        sample_weight_mode: One of `None` or `\"temporal\"`.\n            `\"temporal\"` indicated that we expect 2D weight data\n            that will be applied to the last 2 dimensions of\n            the targets (i.e. we are weighting timesteps, not samples).\n\n    # Returns\n        A Numpy array of target weights, one entry per sample to weight.\n\n    # Raises\n        ValueError: In case of invalid user-provided arguments.\n    \"\"\"\n    # Handle sample_weight_mode\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal':\n            raise ValueError('sample_weight_mode should be None or \"temporal\". Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 3:\n            raise ValueError('Timestep-wise sample weighting is restricted to outputs that are at least 3D (have a time dimension).')\n        if sample_weight is not None and len(sample_weight.shape) != 2:\n            raise ValueError('In order to use timestep-wise sample weighting, you should pass a 2D sample_weight array.')\n    else:\n        if sample_weight is not None and len(sample_weight.shape) != 1:\n            raise ValueError('In order to use sample-wise weights, make sure your sample_weight array is 1D.')\n    \n    # Handle sample_weight and class_weight\n    if sample_weight is not None and class_weight is not None:\n        warnings.warn('Found both `sample_weight` and `class_weight`: `class_weight` argument will be ignored.')\n    \n    if sample_weight is not None:\n        if len(sample_weight.shape) > len(y.shape):\n            raise ValueError('Found a sample_weight with shape ' + str(sample_weight.shape) + '. Expected sample_weight with rank less than or equal to ' + str(len(y.shape)))\n        \n        if np.any(np.not_equal(y.shape[:sample_weight.ndim], sample_weight.shape)):\n            raise ValueError('Sample_weight array shape does not match the input shape. Sample_weight cannot be broadcast.')\n        \n        return sample_weight\n    elif isinstance(class_weight, dict):\n        y_classes = np.argmax(y, axis=-1)\n        weights = np.array([class_weight.get(cls, 1.0) for cls in y_classes])\n        \n        if len(weights) != len(y_classes):\n            missing_classes = set(y_classes) - set(class_weight.keys())\n            raise ValueError('class_weight must contain all classes present in the data. Missing classes: {}'.format(missing_classes))\n        \n        return weights\n    else:\n        if sample_weight_mode is None:\n            return np.ones((y.shape[0],), dtype=np.float32)\n        else:\n            return np.ones((y.shape[0], y.shape[1]), dtype=np.float32)",
            "imports": [
                "import numpy as np",
                "import warnings"
            ]
        }
    ]
}