{
    "keras": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 428,
            "file_name": "keras/engine/training_utils.py",
            "replace_code": "def standardize_weights(y,\n                        sample_weight=None,\n                        class_weight=None,\n                        sample_weight_mode=None):\n    \"\"\"Performs sample weight validation and standardization.\n\n    Everything gets normalized to a single sample-wise (or timestep-wise)\n    weight array.\n\n    # Arguments\n        y: Numpy array of model targets to be weighted.\n        sample_weight: User-provided `sample_weight` argument.\n        class_weight: User-provided `class_weight` argument.\n        sample_weight_mode: One of `None` or `\"temporal\"`.\n            `\"temporal\"` indicated that we expect 2D weight data\n            that will be applied to the last 2 dimensions of\n            the targets (i.e. we are weighting timesteps, not samples).\n\n    # Returns\n        A Numpy array of target weights, one entry per sample to weight.\n\n    # Raises\n        ValueError: In case of invalid user-provided arguments.\n    \"\"\"\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal' and sample_weight_mode != None:\n            raise ValueError('sample_weight_mode should be None or \"temporal\". Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 2 and sample_weight_mode == 'temporal':\n            raise ValueError('Found a sample_weight array for an input with shape ' + str(y.shape) + '. Timestep-wise sample weighting (use of sample_weight_mode=\"temporal\") is restricted to outputs that are at least 2D, i.e. that have a time dimension.')\n        if sample_weight is not None and len(sample_weight.shape) != 2 and sample_weight_mode == 'temporal':\n            raise ValueError('Found a sample_weight array with shape ' + str(sample_weight.shape) + '. In order to use timestep-wise sample weighting, you should pass a 2D sample_weight array.')\n    else:\n        if sample_weight is not None and sample_weight_mode != \"temporal\" and len(sample_weight.shape) != 1:\n            raise ValueError('Found a sample_weight array with shape ' + str(sample_weight.shape) + '. In order to use timestep-wise sample weights, you should specify sample_weight_mode=\"temporal\" in compile(). If you just mean to use sample-wise weights, make sure your sample_weight array is 1D.')\n\n    if sample_weight is not None and class_weight is not None:\n        warnings.warn('Found both `sample_weight` and `class_weight`: `class_weight` argument will be ignored.')\n    \n    weights_flag = False\n\n    if sample_weight is not None:\n        if len(sample_weight.shape) > 1:\n            raise ValueError('Found a sample_weight with shape' + str(sample_weight.shape) + '. Expected sample_weight with rank less than or equal to 1.')\n        if sample_weight.ndim == 1 and len(sample_weight) != len(y):\n            raise ValueError('The length of the sample_weight array ' + str(len(sample_weight)) + ' should be equal to the number of samples ' + str(len(y)) + '.')\n        if sample_weight.ndim == 1 and len(sample_weight) == len(y):\n            weights_flag = True\n            weights = sample_weight\n        if sample_weight.ndim == 2 and len(sample_weight) != len(y[0]):\n            raise ValueError('The length of the sample_weight array ' + str(len(sample_weight)) + ' should be equal to the number of timesteps ' + str(len(y[0])) + '.')\n        if sample_weight.ndim == 2 and len(sample_weight) == len(y[0]):\n            weights_flag = True\n            weights = sample_weight\n        if not weights_flag:\n            raise ValueError('Invalid shape of sample_weight: ' + str(sample_weight.shape) + ' for input with shape: ' + str(y.shape) )\n        return weights\n        \n    elif isinstance(class_weight, dict):\n        if len(y.shape) > 1:\n            raise ValueError('`class_weight` not supported for 2+ dimensional targets.')\n        \n        weights = np.asarray([class_weight[cls] for cls in y])\n        return weights\n    else:\n        if sample_weight_mode is None:\n            return np.ones((y.shape[0],), dtype=np.float32)\n        else:\n            return np.ones((y.shape[0], y.shape[1]), dtype=np.float32)",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}