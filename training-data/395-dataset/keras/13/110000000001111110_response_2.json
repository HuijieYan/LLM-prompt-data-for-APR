{
    "keras": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 21,
            "file_name": "keras/engine/training_generator.py",
            "replace_code": "def fit_generator(model,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Train a model with a Python generator.\n\n    This method first transforms the data with the generator \n    specified by the \"generator\" argument and then trains the \n    model using the transformed data. The function takes several \n    arguments for specifying the training process, such as the \n    number of epochs, batch size, and so on.\n\n    Args:\n      model: A Keras model object.\n      generator: A generator that provides the training data in \n                 batches.\n      steps_per_epoch: The number of batches to yield from the \n                       generator for each epoch. If it is `None`, \n                       the `len(generator)` will be used instead.\n      epochs: The number of epochs to train the model. An epoch \n              is an iteration over the entire x and y data provided.\n      verbose: Integer. 0: quiet, 1: progress bar, 2: one line \n               per epoch.\n      callbacks: List of Keras callback objects to apply during \n                 training.\n      validation_data: This can be either a generator for the \n                       validation data or a tuple of numpy arrays.\n      validation_steps: Only relevant if `validation_data` is a \n                        generator. Total number of steps (batches \n                        of samples) to validate before stopping \n                        when using a generator.\n      class_weight: Dictionary mapping class indices to a weight \n                    for the class.\n      max_queue_size: Integer. Used for generator or \n                      `keras.utils.Sequence` input only. Maximum \n                      size of generator queue.\n      workers: Integer. Used for generator or \n               `keras.utils.Sequence` input only. Maximum number \n               of processes to spin up when using process-based \n               threading. If `0`, will execute the generator on \n               the main thread.\n      use_multiprocessing: Boolean. Used for generator or \n                           `keras.utils.Sequence` input only. If \n                           `True`, use process-based threading. If \n                           `None`, `use_multiprocessing` will be set \n                           to `True`.\n      shuffle: Boolean. Whether to shuffle the order of the \n               batches at the beginning of each epoch.\n      initial_epoch: Integer. Epoch at which to start training \n                     (useful for resuming a previous training run).\n\n    Returns:\n      A `keras.callbacks.History` object. Its `History.history` \n      attribute is a record of training loss values and metric \n      values at successive epochs, as well as validation loss \n      and validation metrics values if applicable.\n    \"\"\"",
            "imports": []
        }
    ]
}