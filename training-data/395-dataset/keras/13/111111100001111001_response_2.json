{
    "keras": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 21,
            "file_name": "keras/engine/training_generator.py",
            "replace_code": "def fit_generator(model,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n\n    # ... (existing code)\n\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n\n    if validation_data is not None:\n        if val_gen and workers > 0:\n            val_data = validation_data\n            if isinstance(val_data, Sequence):\n                val_enqueuer = OrderedEnqueuer(\n                    val_data,\n                    use_multiprocessing=use_multiprocessing)\n                validation_steps = validation_steps or len(val_data)\n            else:\n                val_enqueuer = GeneratorEnqueuer(\n                    val_data,\n                    use_multiprocessing=use_multiprocessing)\n            val_enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            val_enqueuer_gen = val_enqueuer.get()\n        else:\n            # Prepare data for validation\n            if len(validation_data) == 2:\n                val_x, val_y = validation_data\n                val_sample_weight = None\n            elif len(validation_data) == 3:\n                val_x, val_y, val_sample_weight = validation_data\n            else:\n                raise ValueError('`validation_data` should be a tuple '\n                                '`(val_x, val_y, val_sample_weight)` '\n                                'or `(val_x, val_y)`. Found: ' +\n                                str(validation_data))\n            val_x, val_y, val_sample_weights = model._standardize_user_data(\n                val_x, val_y, val_sample_weight)\n            val_data = val_x + val_y + val_sample_weights\n            if model.uses_learning_phase and not isinstance(K.learning_phase(),\n                                                            int):\n                val_data += [0.]\n            for cbk in callbacks:\n                cbk.validation_data = val_data\n\n    # ... (existing code)\n\n    return model.history",
            "import_list": []
        }
    ]
}