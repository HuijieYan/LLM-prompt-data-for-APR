{
    "keras": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "keras/utils/data_utils.py",
            "replace_code": "def get_file(fname,\n             origin,\n             file_hash=None,\n             cache_subdir='datasets',\n             hash_algorithm='auto',\n             extract=False,\n             archive_format='auto',\n             cache_dir=None):\n    \"\"\"Downloads a file from a URL if it is not already in the cache.\n    \n    ... (rest of the docstring remains the same)\n\n    # Returns\n        Path to the downloaded file\n    \"\"\"  \n    if cache_dir is None:\n        cache_dir = os.path.join(os.path.expanduser('~'), '.keras')\n        \n    datadir = os.path.join(cache_dir, cache_subdir)\n    os.makedirs(datadir, exist_ok=True)\n\n    fpath = os.path.join(datadir, fname)\n\n    if not os.path.exists(fpath):\n        with requests.get(origin, stream=True) as r:\n            total_size = int(r.headers.get('content-length', 0))\n            with open(fpath, 'wb') as file, tqdm(\n                desc=fname,\n                total=total_size,\n                unit='B',\n                unit_scale=True,\n                unit_divisor=1024,\n            ) as bar:\n                for data in r.iter_content(chunk_size=1024):\n                    file.write(data)\n                    bar.update(len(data))\n\n    if file_hash is not None:\n        if validate_file(fpath, file_hash, algorithm=hash_algorithm): \n            return fpath\n        else:\n            print('File hash does not match the original value. Redownloading...')\n            os.remove(fpath)\n\n    if extract:\n        if archive_format == 'tar':\n            with tarfile.open(fpath, 'r:gz') as tar:\n                tar.extractall(datadir)\n        elif archive_format == 'zip':\n            with zipfile.ZipFile(fpath, 'r') as zip_ref:\n                zip_ref.extractall(datadir)\n\n    return fpath",
            "imports": [
                "import os",
                "import requests",
                "from tqdm import tqdm",
                "import tarfile",
                "import zipfile"
            ]
        }
    ]
}