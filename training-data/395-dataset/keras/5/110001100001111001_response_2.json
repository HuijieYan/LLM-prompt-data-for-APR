{
    "keras": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "keras/utils/data_utils.py",
            "replace_code": "def get_file(fname,\n             origin,\n             untar=False,\n             md5_hash=None,\n             file_hash=None,\n             cache_subdir='datasets',\n             hash_algorithm='auto',\n             extract=False,\n             archive_format='auto',\n             cache_dir=None):\n    if cache_dir is None:\n        cache_dir = os.path.join(os.path.expanduser('~'), '.keras')\n    if md5_hash is not None and file_hash is None:\n        file_hash = md5_hash\n        hash_algorithm = 'md5'\n    datadir_base = os.path.expanduser(cache_dir)\n    if not os.access(datadir_base, os.W_OK):\n        datadir_base = os.path.join('/tmp', '.keras')\n    datadir = os.path.join(datadir_base, cache_subdir)\n    os.makedirs(datadir, exist_ok=True)\n\n    if untar:\n        untar_fpath = os.path.join(datadir, fname)\n        fpath = untar_fpath + '.tar.gz'\n    else:\n        fpath = os.path.join(datadir, fname)\n\n    if os.path.exists(fpath) and file_hash is not None:\n        if not validate_file(fpath, file_hash, algorithm=hash_algorithm):\n            print('A local file was found, but it seems to be incomplete or outdated because the ' + hash_algorithm +\n                  ' file hash does not match the original value of ' +\n                  file_hash + ' so we will re-download the data.')\n            download = True\n    else:\n        download = True\n\n    if download:\n        print('Downloading data from', origin)\n\n        try:\n            urlreq.urlretrieve(origin, fpath)\n        except (HTTPError, URLError) as e:\n            raise Exception('URL fetch failure on {} : {} -- {}'.format(origin, e.errno if hasattr(e, 'errno') else e.code,\n                                                                       e.reason if hasattr(e, 'reason') else e.msg))\n\n    if untar:\n        if not os.path.exists(untar_fpath):\n            with tarfile.open(fpath, 'r:gz') as tar:\n                tar.extractall(path=datadir)\n        return untar_fpath\n\n    if extract:\n        if archive_format == 'tar':\n            with tarfile.open(fpath, 'r') as tar:\n                tar.extractall(path=datadir)\n        elif archive_format == 'zip':\n            with zipfile.ZipFile(fpath, 'r') as zip_ref:\n                zip_ref.extractall(datadir)\n    \n    return fpath",
            "import_list": [
                "import os",
                "from urllib import error as urlerror",
                "from urllib import request as urlreq",
                "from urllib.error import URLError, HTTPError",
                "import tarfile",
                "import zipfile"
            ]
        }
    ]
}