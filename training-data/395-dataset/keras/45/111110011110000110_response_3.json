{
    "keras": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1786,
            "file_name": "keras/layers/recurrent.py",
            "replace_code": "def call(self, inputs, states, training=None):\n        if self.implementation == 1:\n            dropout_inputs = self.dropout(inputs, self._dropout_mask, self.kernel, self.recurrent_kernel)\n            recurrent_dropout_inputs = self.recurrent_dropout(states[0], self._recurrent_dropout_mask, self.kernel, self.recurrent_kernel)\n            \n            i = self.recurrent_activation(dropout_inputs[0] + recurrent_dropout_inputs[0])\n            f = self.recurrent_activation(dropout_inputs[1] + recurrent_dropout_inputs[1])\n            c = f * states[1] + i * self.activation(dropout_inputs[2] + recurrent_dropout_inputs[2])\n            o = self.recurrent_activation(dropout_inputs[3] + recurrent_dropout_inputs[3])\n        else:\n            i = self.recurrent_activation(self.basic_operations(inputs, self.kernel, states, self.recurrent_kernel, self.recurrent_dropout, self._recurrent_dropout_mask).x0)\n            f = self.recurrent_activation(self.basic_operations(inputs, self.kernel, states, self.recurrent_kernel, self.recurrent_dropout, self._recurrent_dropout_mask).x1)\n            c = f * states[1] + i * self.activation(self.basic_operations(inputs, self.kernel, states, self.recurrent_kernel, self.recurrent_dropout, self._recurrent_dropout_mask).x2)\n            o = self.recurrent_activation(self.basic_operations(inputs, self.kernel, states, self.recurrent_kernel, self.recurrent_dropout, self._recurrent_dropout_mask).x3)\n        \n        h = o * self.activation(c)\n        if self.dropout + self.recurrent_dropout > 0:\n            h._uses_learning_phase = True\n            return h, [h, c]",
            "import_list": []
        }
    ]
}