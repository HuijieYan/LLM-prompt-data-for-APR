{
    "black": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2393,
            "file_name": "black.py",
            "replace_code": "def bracket_split_build_line(\n    leaves: List[Tuple[str, Any]],\n    original: Tuple[int, List[Tuple[str, Any]], bool],\n    opening_bracket: Tuple[str, Any], \n    is_body: bool = False\n) -> Tuple[int, List[Tuple[str, Any]], bool]:\n\n    from typing import Any, List, Tuple\n    result = (original[0], [], False)\n    inside_brackets = False\n    \n    if is_body:\n        result_depth = original[0] + 1\n        if leaves:\n            # Since body is a new indent level, remove spurious leading whitespace.\n            leaves[0][1].normalize_prefix(inside_brackets=True)\n            # Ensure a trailing comma when expected.\n            if original[1][0][1].is_import:\n                if leaves[-1][0] != 'COMMA':\n                    leaves.append(('COMMA', ','))\n    \n        # Populate the line\n        for leaf in leaves:\n            result[1].append(leaf)\n            comments_after = original[1][1].comments_after(leaf)\n            for comment_after in comments_after:\n                result[1].append(comment_after)\n    \n        inside_brackets = True\n    \n    result = (result[0], result[1], inside_brackets)\n    \n    should_explode = is_interior_exploded(result, opening_bracket)\n    result = (result[0], result[1], inside_brackets, should_explode)\n    \n    return result"
        }
    ]
}