{
    "1.1.1": "def bracket_split_build_line(\n    leaves: List[Leaf], original: Line, opening_bracket: Leaf, *, is_body: bool = False\n) -> Line:\n    \n    result = Line(depth=original.depth)\n    if is_body:\n        result.inside_brackets = True\n        result.depth += 1\n        if leaves:\n            # Since body is a new indent level, remove spurious leading whitespace.\n            normalize_prefix(leaves[0], inside_brackets=True)\n            # Ensure a trailing comma when expected.\n            if original.is_import:\n                if leaves[-1].type != token.COMMA:\n                    leaves.append(Leaf(token.COMMA, \",\"))\n    # Populate the line\n    for leaf in leaves:\n        result.append(leaf, preformatted=True)\n        for comment_after in original.comments_after(leaf):\n            result.append(comment_after, preformatted=True)\n    if is_body:\n        result.should_explode = should_explode(result, opening_bracket)\n    return result\n",
    "1.1.2": "Return a new line with given `leaves` and respective comments from `original`.\n\nIf `is_body` is True, the result line is one-indented inside brackets and as such\nhas its first leaf's prefix normalized and a trailing comma added when expected.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "black.py",
    "1.3.2": [
        "is_import(leaf: Leaf) -> bool",
        "normalize_prefix(leaf: Leaf) -> None",
        "should_explode(line: Line, opening_bracket: Leaf) -> bool",
        "append(self, leaf: Leaf, preformatted: bool=False) -> None",
        "is_import(self) -> bool",
        "comments_after(self, leaf: Leaf) -> List[Leaf]"
    ],
    "1.4.1": [
        "    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_comments7(self) -> None:\n        source, expected = read_data(\"comments7\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, black.FileMode())"
    ],
    "1.4.2": [
        "tests/test_black.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: 'from[181 chars]ES,\\n)\\n\\n\\nfrom .config import (\\n    Any,\\n [179 chars]n)\\n' != 'from[181 chars]ES,\\n    ,\\n)\\n\\n\\nfrom .config import (\\n    [192 chars]n)\\n'\nE     from .config import (\nE         Any,\nE         Bool,\nE         ConfigType,\nE         ConfigTypeAttributes,\nE         Int,\nE         Path,\nE         #  String,\nE         #  resolve_to_config_type,\nE         #  DEFAULT_TYPE_ATTRIBUTES,\nE   +     ,\nE     )\nE     \nE     \nE     from .config import (\nE         Any,\nE         Bool,\nE         ConfigType,\nE         ConfigTypeAttributes,\nE         Int,\nE   -     no_comma_here_yet,\nE   ?                      -\nE   +     no_comma_here_yet\nE         #  and some comments,\nE         #  resolve_to_config_type,\nE         #  DEFAULT_TYPE_ATTRIBUTES,\nE   +     ,\nE     )"
        ]
    ],
    "2.1.2": [
        [
            "self = <test_black.BlackTestCase testMethod=test_comments7>\n\n    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_comments7(self) -> None:\n        source, expected = read_data(\"comments7\")\n        actual = fs(source)\n>       self.assertFormatEqual(expected, actual)\n\ntests/test_black.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_black.py:159: in assertFormatEqual\n    self.assertEqual(expected, actual)"
        ]
    ],
    "2.1.3": [
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')]",
                    "shape": "5"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "True",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')]",
                    "shape": "15"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=1, leaves=[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(COMMA, ',')], comments={} ... {4500738688: 18, 4500738784: 18, 4500738880: 18, 4500738976: 18, 4500739072: 18, 4500739168: 18, 4500818960: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "True",
                    "shape": null
                },
                "result.depth": {
                    "value": "1",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(COMMA, ',')]",
                    "shape": "16"
                },
                "leaf": {
                    "value": "Leaf(COMMA, ',')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "True",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(RPAR, '')]",
                    "shape": "1"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(RPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(RPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')]",
                    "shape": "5"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "True",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')]",
                    "shape": "14"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=1, leaves=[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(COMMA, ',')], comments={} ... {4500739744: 18, 4500739840: 18, 4500739936: 18, 4500740032: 18, 4500740128: 18, 4500886960: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "True",
                    "shape": null
                },
                "result.depth": {
                    "value": "1",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(COMMA, ',')]",
                    "shape": "15"
                },
                "leaf": {
                    "value": "Leaf(COMMA, ',')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "True",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(RPAR, '')]",
                    "shape": "1"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(RPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(RPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaves": "list",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaves": "list",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')]",
                    "shape": "5"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "True",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')]",
                    "shape": "15"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=1, leaves=[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')], comments={} ... {4334979248: 18, 4334979056: 18, 4334978864: 18, 4334978672: 18, 4334978480: 18, 4334978288: 18}, previous=Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "True",
                    "shape": null
                },
                "result.depth": {
                    "value": "1",
                    "shape": null
                },
                "i": {
                    "value": "11",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "True",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(RPAR, '')]",
                    "shape": "1"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(RPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(RPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')]",
                    "shape": "5"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "True",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')]",
                    "shape": "14"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=1, leaves=[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')], comments={} ... {4334977088: 18, 4334980016: 18, 4334980208: 18, 4334980304: 18, 4334980400: 18, 4335223136: 18}, previous=Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "True",
                    "shape": null
                },
                "result.depth": {
                    "value": "1",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')]",
                    "shape": "15"
                },
                "i": {
                    "value": "10",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "True",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(RPAR, '')]",
                    "shape": "1"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(RPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(RPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')]",
                    "shape": "5"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "True",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')]",
                    "shape": "15"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=1, leaves=[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')], comments={} ... {4335169984: 18, 4335170608: 18, 4335171616: 18, 4335263312: 18, 4335262256: 18, 4335262448: 18}, previous=Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "True",
                    "shape": null
                },
                "result.depth": {
                    "value": "1",
                    "shape": null
                },
                "i": {
                    "value": "11",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "True",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'Path'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  String,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(RPAR, '')]",
                    "shape": "1"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(RPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(RPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')]",
                    "shape": "5"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "True",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')]",
                    "shape": "15"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=1, leaves=[Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')], comments={} ... {4335262736: 18, 4335262784: 18, 4335262880: 18, 4335262976: 18, 4335263072: 18, 4335263168: 18}, previous=Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "True",
                    "shape": null
                },
                "result.depth": {
                    "value": "1",
                    "shape": null
                },
                "i": {
                    "value": "11",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "True",
                    "shape": null
                }
            }
        ],
        [
            {
                "original.depth": {
                    "value": "0",
                    "shape": null
                },
                "original": {
                    "value": "Line(depth=0, leaves=[Leaf(NAME, 'from'), Leaf(DOT, '.'), Leaf(NAME, 'config'), Leaf(NAME, 'import'), Leaf(LPAR, ''), Leaf(NAME, 'Any'), Leaf(COMMA, ','), Leaf(NAME, 'Bool'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigType'), Leaf(COMMA, ','), Leaf(NAME, 'ConfigTypeAttributes'), Leaf(COMMA, ','), Leaf(NAME, 'Int'), Leaf(COMMA, ','), Leaf(NAME, 'no_comma_here_yet'), Leaf(COMMA, ','), Leaf(STANDALONE_COMMENT, '#  and some comments,'), Leaf(STANDALONE_COMMENT, '#  resolve_to_config_type,'), Leaf(STANDALONE_COMMENT, '#  DEFAULT_TYPE_ATTRIBUTES,'), Leaf(RPAR, '')], comments={} ... {}, previous=Leaf(RPAR, ''), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "is_body": {
                    "value": "False",
                    "shape": null
                },
                "leaves": {
                    "value": "[Leaf(RPAR, '')]",
                    "shape": "1"
                },
                "original.is_import": {
                    "value": "True",
                    "shape": null
                },
                "opening_bracket": {
                    "value": "Leaf(LPAR, '')",
                    "shape": null
                }
            },
            {
                "result": {
                    "value": "Line(depth=0, leaves=[Leaf(RPAR, '')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                    "shape": null
                },
                "result.inside_brackets": {
                    "value": "False",
                    "shape": null
                },
                "result.depth": {
                    "value": "0",
                    "shape": null
                },
                "leaf": {
                    "value": "Leaf(RPAR, '')",
                    "shape": null
                },
                "result.should_explode": {
                    "value": "False",
                    "shape": null
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "i": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaves": "list",
                "i": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "i": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "i": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ],
        [
            {
                "original.depth": "int",
                "original": "Line",
                "is_body": "bool",
                "leaves": "list",
                "original.is_import": "bool",
                "opening_bracket": "Leaf"
            },
            {
                "result": "Line",
                "result.inside_brackets": "bool",
                "result.depth": "int",
                "leaf": "Leaf",
                "result.should_explode": "bool"
            }
        ]
    ],
    "3.1.1": [
        "Black produces invalid code with commented out multi-line includes\n"
    ],
    "3.1.2": [
        "Howdy! Sorry you're having trouble. To expedite your experience,\nprovide some basics for me:\n\nOperating system: MacOS\nPython version: Python 3.7.1\nBlack version: 18.9b0\nDoes also happen on master: Yes\n\nrepro:\n\n(black-repro) [schrockn@mbp ~/code/playground/black_bug_repro]$ black test.py\nerror: cannot format test.py: INTERNAL ERROR: Black produced invalid code: invalid syntax (<unknown>, line 11). Please report a bug on https://github.com/ambv/black/issues.  This invalid output might be helpful: /var/folders/nb/18_t4vkx595_cnpf8nz5gt_80000gn/T/blk_di3puv3v.log\nAll done! \ud83d\udca5 \ud83d\udc94 \ud83d\udca5\n1 file failed to reformat.\ntest file:\n\nfrom .config import (\n    Any,\n    Bool,\n    ConfigType,\n    ConfigTypeAttributes,\n    Int,\n    Path,\n    #  String,\n    #  resolve_to_config_type,\n    #  DEFAULT_TYPE_ATTRIBUTES,\n)\nThe invalid output:\n\n(black-repro) [schrockn@mbp ~/code/playground/black_bug_repro]$ more /var/folders/nb/18_t4vkx595_cnpf8nz5gt_80000gn/T/blk_di3puv3v.log\n  File \"/Users/schrockn/code/githubs/black/black.py\", line 3318, in assert_equivalent\n    dst_ast = ast.parse(dst)\n  File \"/Users/schrockn/.pyenv/versions/3.7.1/lib/python3.7/ast.py\", line 35, in parse\n    return compile(source, filename, mode, PyCF_ONLY_AST)\nfrom .config import (\n    Any,\n    Bool,\n    ConfigType,\n    ConfigTypeAttributes,\n    Int,\n    Path,\n    #  String,\n    #  resolve_to_config_type,\n    #  DEFAULT_TYPE_ATTRIBUTES,\n    ,\n)\nThanks!\n"
    ]
}