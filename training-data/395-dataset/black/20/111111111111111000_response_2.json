{
    "black": [
        {
            "bugID": 20,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 318,
            "file_name": "black.py",
            "replace_code": "def format_file_in_place(\n    src: str,\n    line_length: int,\n    fast: bool,\n    write_back: Any = None,\n    lock: Any = None\n) -> bool:\n    \"\"\"Format file under `src` path. Return True if changed.\n\n    If `write_back` is True, write reformatted code back to stdout.\n    `line_length` and `fast` options are passed to :func:`format_file_contents`.\n    \"\"\"\n\n    src_buffer = open(src, \"r\")\n    try:\n        src_contents = src_buffer.read()\n    finally:\n        src_buffer.close()\n\n    try:\n        dst_buffer = open(src, \"w\", encoding='utf-8')\n        dst_contents = format_file_contents(src_contents, line_length=line_length, fast=fast)\n    except NothingChanged:\n        return False\n    finally:\n        if write_back:\n            dst_buffer.write(dst_contents)\n            dst_buffer.close()\n        elif write_back == 2:  # WriteBack.DIFF\n            src_name = f\"{src}  (original)\"\n            dst_name = f\"{src}  (formatted)\"\n            diff_contents = diff(src_contents, dst_contents, src_name, dst_name)\n            if lock:\n                lock.acquire()\n            try:\n                print(diff_contents, file=sys.stdout)\n            finally:\n                if lock:\n                    lock.release()\n            dst_buffer.close()\n\n    return True",
            "import_list": [
                "from typing import Any, List"
            ]
        }
    ]
}