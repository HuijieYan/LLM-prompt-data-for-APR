{
    "black": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 337,
            "file_name": "blib2to3/pgen2/tokenize.py",
            "replace_code": "def generate_tokens(readline):\n    lnum = parenlev = continued = 0\n    # other variable initializations\n\n    while True:  # loop over lines in stream\n        try:\n            line = readline()\n        except StopIteration:\n            line = ''\n        lnum += 1\n        # other lines of code for processing the input line\n        # ...\n\n        # original code for processing async operations\n        if token in ('async', 'await'):\n            if async_def:\n                yield (ASYNC if token == 'async' else AWAIT,\n                       token, spos, epos, line)\n                continue\n\n        tok = (NAME, token, spos, epos, line)\n        if token == 'async' and not stashed:\n            stashed = tok\n            continue\n\n        if token == 'def':\n            if (stashed and stashed[0] == NAME and stashed[1] == 'async'):\n                async_def = True\n                async_def_indent = indents[-1]\n                yield (ASYNC, stashed[1], stashed[2], stashed[3], stashed[4])\n                stashed = None",
            "imports": []
        }
    ]
}