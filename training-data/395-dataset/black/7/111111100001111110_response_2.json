{
    "black": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2713,
            "file_name": "black.py",
            "replace_code": "def normalize_invisible_parens(node: Node, parens_after: Set[String]) -> None:\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n\n    `parens_after` is a set of string leaf values immeditely after which parens\n    should be put.\n\n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    FMT_OFF = []  # define FMT_OFF\n    for pc in list_comments('', False):\n        if pc.value not in FMT_OFF:\n            check_lpar = False\n            for index, child in enumerate(list(node.children)):\n                if check_lpar:\n                    if child.type == token.NAME:\n                        child_node = Node(token.NAME, [Leaf(token.LPAR, \"\"), child, Leaf(token.RPAR, \"\")])\n                        node.insert_child(index, child_node)\n                    elif is_one_tuple(child):\n                        child_node = Node(token.NAME, [Leaf(token.LPAR, \"(\"), child, Leaf(token.RPAR, \")\")])\n                        child.remove()\n                        node.insert_child(index, child_node)\n                    elif node.type != token.IMPORT_FROM:\n                        if child.type in (token.LPAR, token.RPAR):\n                            child.value = \"\"  \n                            node.children[-1].value = \"\"\n                        elif child.type != token.STAR:\n                            node.insert_child(index, Leaf(token.LPAR, \"\"))\n                            node.append_child(Leaf(token.RPAR, \"\"))\n                        break\n                    elif not isinstance(child, Leaf) and not is_multiline_string(child):\n                        child_node = Node(token.NAME, [Leaf(token.LPAR, \"\"), child, Leaf(token.RPAR, \"\")])\n                        child.remove()\n                        node.insert_child(index, child_node)\n                check_lpar = isinstance(child, Leaf) and child.value in parens_after",
            "imports": [
                "from typing import List, Set",
                "from tokenize import NL",
                "from lib2to3.pgen2.token import String",
                "from lib2to3.pgen2 import token"
            ]
        }
    ]
}