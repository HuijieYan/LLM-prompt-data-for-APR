{
    "black": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2713,
            "file_name": "black.py",
            "replace_code": "def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n\n    `parens_after` is a set of string leaf values immediately after which parens\n    should be added.\n\n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    for pc in list_comments(node.prefix, is_endmarker=False):\n        if pc.value in FMT_OFF:\n            # This `node` has a prefix with `# fmt: off`, don't mess with parens.\n            return\n\n    check_lpar = False\n    for index, child in enumerate(list(node.children)):\n        if check_lpar:\n            if isinstance(child, Node):\n                if is_one_tuple(child):\n                    if node.type == syms.import_from and child.type != token.LPAR and child.type != token.STAR:\n                        # insert invisible parentheses\n                        invisible_lpar = Leaf(token.LPAR, \"\")\n                        invisible_rpar = Leaf(token.RPAR, \"\")\n                        node.insert_child(index, invisible_lpar)\n                        node.insert_child(index + 2, invisible_rpar)\n                elif child.type == syms.testlist_star_expr or child.type == syms.testlist_gexp:\n                    if child.children:\n                        lpar = Leaf(token.LPAR, \"\")\n                        rpar = Leaf(token.RPAR, \"\")\n                        child.insert_child(0, lpar)\n                        child.append_child(rpar)\n                    else:\n                        lpar = Leaf(token.LPAR, \"(\")\n                        rpar = Leaf(token.RPAR, \")\")\n                        child.insert_child(0, lpar)\n                        child.append_child(rpar)\n            elif isinstance(child, Leaf) and child.value in parens_after:\n                # wrap previous child in visible parentheses\n                prev_child = node.children[index - 1]\n                if isinstance(prev_child, Node):\n                    lpar = Leaf(token.LPAR, \"(\")\n                    rpar = Leaf(token.RPAR, \")\")\n                    prev_child.insert_child(0, lpar)\n                    prev_child.append_child(rpar)\n\n        check_lpar = isinstance(child, Leaf) and child.value in parens_after",
            "import_list": []
        }
    ]
}