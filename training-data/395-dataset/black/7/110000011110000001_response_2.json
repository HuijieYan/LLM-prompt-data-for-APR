{
    "black": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2713,
            "file_name": "black.py",
            "replace_code": "def normalize_invisible_parens(node: Union[ast.stmt, ast.expr], parens_after: Set[str]) -> None:\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n\n    `parens_after` is a set of string leaf values immediately after which parens\n    should be put.\n\n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    # Updated the function signature to use Union for handling both types of AST\n    if hasattr(node, 'prefix') and isinstance(node.prefix, str):\n        # Check for prefix attribute to ensure it's a statement\n        for pc in node.prefix:\n            if pc.value in FMT_OFF:\n                # This `node` has a prefix with `# fmt: off`, don't mess with parens.\n                return\n\n    check_lpar = False\n    for index, child in enumerate(node.children if hasattr(node, 'children') else node.body):\n        if check_lpar:\n            if isinstance(child, ast27.Expr) and isinstance(child.value, ast27.Tuple):\n                # Check for tuple expression in Python 2.7\n                if len(child.value.elts) == 1:\n                    # wrap child in visible parentheses if it's a single-element tuple\n                    node.prune()\n                    node.slice = ast27.Slice(lower=ast27.Lower(), upper=ast27.Upper())\n                    node.node = ast27.Tuple(elts=[ast27.Tuple(elts=list(child.value.elts))])\n                    node.node.elts[0].ctx = ast.Store()\n                else:\n                    # keep existing visible parentheses for other tuples and generator expressions\n                    pass\n            elif isinstance(child, ast.Expr) and isinstance(child.value, ast.Tuple):\n                # Check for tuple expression in Python 3\n                if len(child.value.elts) == 1:\n                    # wrap child in visible parentheses if it's a single-element tuple\n                    node.prune()\n                    node.slice = ast.Slice(lower=ast.UnaryOp(), upper=ast.UnaryOp())\n                    node.node = ast.Tuple(elts=[ast.Tuple(elts=list(child.value.elts))])\n                    node.node.elts[0].ctx = ast.Store()\n                else:\n                    # keep existing visible parentheses for other tuples and generator expressions\n                    pass\n\n        check_lpar = isinstance(child, ast27.Constant if hasattr(ast27, 'Constant') else ast.Str) and child.value in parens_after",
            "imports": [
                "from typing import List, Set",
                "from typed_ast import ast3 as ast",
                "from typed_ast import ast27 as ast27"
            ]
        }
    ]
}