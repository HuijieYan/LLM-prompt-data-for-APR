{
    "black": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 3112,
            "file_name": "black.py",
            "replace_code": "def generate_ignored_nodes(leaf: Leaf) -> Iterator[LN]:\n    \"\"\"Starting from the container of `leaf`, generate all leaves until `# fmt: on`.\n\n    Stops at the end of the block.\n    \"\"\"\n    container: Optional[LN] = leaf.get_parent()\n    while container is not None and not container.type == 'endmarker':\n        is_fmt_on = False\n        for comment in container.get_previous_leaf().get_comments()[True]:\n            if comment.value == '# fmt: on':\n                is_fmt_on = True\n            elif comment.value == '# fmt: off':\n                is_fmt_on = False\n        if is_fmt_on:\n            return\n        yield container\n        container = container.get_next_leaf()",
            "import_list": [
                "from typing import Iterator, Optional",
                "from jedi.api.classes import Leaf",
                "from jedi.api.classes import BaseNode as LN"
            ]
        }
    ]
}