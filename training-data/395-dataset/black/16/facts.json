{
    "1.1.1": "def gen_python_files_in_dir(\n    path: Path,\n    root: Path,\n    include: Pattern[str],\n    exclude: Pattern[str],\n    report: \"Report\",\n) -> Iterator[Path]:\n    \n    assert root.is_absolute(), f\"INTERNAL ERROR: `root` must be absolute but is {root}\"\n    for child in path.iterdir():\n        normalized_path = \"/\" + child.resolve().relative_to(root).as_posix()\n        if child.is_dir():\n            normalized_path += \"/\"\n        exclude_match = exclude.search(normalized_path)\n        if exclude_match and exclude_match.group(0):\n            report.path_ignored(child, f\"matches the --exclude regular expression\")\n            continue\n\n        if child.is_dir():\n            yield from gen_python_files_in_dir(child, root, include, exclude, report)\n\n        elif child.is_file():\n            include_match = include.search(normalized_path)\n            if include_match:\n                yield child\n",
    "1.1.2": "Generate all files under `path` whose paths are not excluded by the\n`exclude` regex, but are included by the `include` regex.\n\n`report` is where output about exclusions goes.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "black.py",
    "1.3.2": [
        "gen_python_files_in_dir(path: Path, root: Path, include: Pattern[str], exclude: Pattern[str], report: 'Report') -> Iterator[Path]",
        "path_ignored(self, path: Path, message: str) -> None"
    ],
    "1.4.1": [
        "    def test_symlink_out_of_root_directory(self) -> None:\n        # prepare argumens\n        path = MagicMock()\n        root = THIS_DIR\n        child = MagicMock()\n        include = re.compile(black.DEFAULT_INCLUDES)\n        exclude = re.compile(black.DEFAULT_EXCLUDES)\n        report = black.Report()\n\n        # set the behavior of mock arguments\n        # child should behave like a symlink which resolved path is clearly\n        # outside of the root directory\n        path.iterdir.return_value = [child]\n        child.resolve.return_value = Path(\"/a/b/c\")\n        child.is_symlink.return_value = True\n\n        # call the method\n        # it should not raise any error\n        list(black.gen_python_files_in_dir(path, root, include, exclude, report))\n\n        # check the call of the methods of the mock objects\n        path.iterdir.assert_called_once()\n        child.resolve.assert_called_once()\n        child.is_symlink.assert_called_once()\n\n        # set the behavior of mock arguments\n        # child should behave like a strange file which resolved path is clearly\n        # outside of the root directory\n        child.is_symlink.return_value = False\n\n        # call the method\n        # it should raise a ValueError\n        with self.assertRaises(ValueError):\n            list(black.gen_python_files_in_dir(path, root, include, exclude, report))\n\n        # check the call of the methods of the mock objects\n        path.iterdir.assert_called()\n        self.assertEqual(path.iterdir.call_count, 2)\n        child.resolve.assert_called()\n        self.assertEqual(child.resolve.call_count, 2)\n        child.is_symlink.assert_called()\n        self.assertEqual(child.is_symlink.call_count, 2)"
    ],
    "1.4.2": [
        "tests/test_black.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: '/a/b/c' does not start with '/Volumes/SSD2T/bgp_envs/repos/black_16/tests'"
        ]
    ],
    "2.1.2": [
        [
            "self = <test_black.BlackTestCase testMethod=test_symlink_out_of_root_directory>\n\n    def test_symlink_out_of_root_directory(self) -> None:\n        # prepare argumens\n        path = MagicMock()\n        root = THIS_DIR\n        child = MagicMock()\n        include = re.compile(black.DEFAULT_INCLUDES)\n        exclude = re.compile(black.DEFAULT_EXCLUDES)\n        report = black.Report()\n    \n        # set the behavior of mock arguments\n        # child should behave like a symlink which resolved path is clearly\n        # outside of the root directory\n        path.iterdir.return_value = [child]\n        child.resolve.return_value = Path(\"/a/b/c\")\n        child.is_symlink.return_value = True\n    \n        # call the method\n        # it should not raise any error\n>       list(black.gen_python_files_in_dir(path, root, include, exclude, report))\n\ntests/test_black.py:1183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nblack.py:2948: in gen_python_files_in_dir\n    normalized_path = \"/\" + child.resolve().relative_to(root).as_posix()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = PosixPath('/a/b/c')\nother = (PosixPath('/Volumes/SSD2T/bgp_envs/repos/black_16/tests'),)\nparts = ['/', 'a', 'b', 'c'], drv = '', root = '/'\n\n    def relative_to(self, *other):\n        \"\"\"Return the relative path to another path identified by the passed\n        arguments.  If the operation is not possible (because this is not\n        a subpath of the other path), raise ValueError.\n        \"\"\"\n        # For the purpose of this method, drive and root are considered\n        # separate parts, i.e.:\n        #   Path('c:/').relative_to('c:')  gives Path('/')\n        #   Path('c:/').relative_to('/')   raise ValueError\n        if not other:\n            raise TypeError(\"need at least one argument\")\n        parts = self._parts\n        drv = self._drv\n        root = self._root\n        if root:\n            abs_parts = [drv, root] + parts[1:]\n        else:\n            abs_parts = parts\n        to_drv, to_root, to_parts = self._parse_args(other)\n        if to_root:\n            to_abs_parts = [to_drv, to_root] + to_parts[1:]\n        else:\n            to_abs_parts = to_parts\n        n = len(to_abs_parts)\n        cf = self._flavour.casefold_parts\n        if (root or drv) if n == 0 else cf(abs_parts[:n]) != cf(to_abs_parts):\n            formatted = self._format_parsed_parts(to_drv, to_root, to_parts)\n>           raise ValueError(\"{!r} does not start with {!r}\"\n                             .format(str(self), str(formatted)))",
            "\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/pathlib.py:908: ValueError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "root": {
                    "value": "PosixPath('/Volumes/SSD2T/bgp_envs/repos/black_16/tests')",
                    "shape": null
                },
                "path.iterdir": {
                    "value": "<MagicMock name='mock.iterdir' id='4453752448'>",
                    "shape": "<MagicMock name='mock.iterdir.shape' id='4455751104'>"
                },
                "path": {
                    "value": "<MagicMock id='4455711696'>",
                    "shape": null
                },
                "report": {
                    "value": "Report(check=False, quiet=False, verbose=False, change_count=0, same_count=0, failure_count=0)",
                    "shape": null
                },
                "exclude": {
                    "value": "re.compile('/(\\\\.git",
                    "shape": "\\\\.hg"
                },
                "include": {
                    "value": "re.compile('\\\\.pyi?$')",
                    "shape": null
                }
            },
            {
                "child": {
                    "value": "<MagicMock id='4455654352'>",
                    "shape": null
                },
                "child.resolve": {
                    "value": "<MagicMock name='mock.resolve' id='4453731632'>",
                    "shape": "<MagicMock name='mock.resolve.shape' id='4454710144'>"
                },
                "child.is_symlink": {
                    "value": "<MagicMock name='mock.is_symlink' id='4453666048'>",
                    "shape": "<MagicMock name='mock.is_symlink.shape' id='4454733904'>"
                },
                "child.is_dir": {
                    "value": "<MagicMock name='mock.is_dir' id='4454758240'>",
                    "shape": "<MagicMock name='mock.is_dir.shape' id='4454786144'>"
                },
                "child.is_file": {
                    "value": "<MagicMock name='mock.is_file' id='4454802240'>",
                    "shape": "<MagicMock name='mock.is_file.shape' id='4454821744'>"
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "root": "PosixPath",
                "path.iterdir": "MagicMock",
                "path": "MagicMock",
                "report": "Report",
                "exclude": "Pattern",
                "include": "Pattern"
            },
            {
                "child": "MagicMock",
                "child.resolve": "MagicMock",
                "child.is_symlink": "MagicMock",
                "child.is_dir": "MagicMock",
                "child.is_file": "MagicMock"
            }
        ]
    ],
    "3.1.1": [
        "Crash if there is a symlink to a resource outside of the root directory\n"
    ],
    "3.1.2": [
        "Hello there, thank you for this great tool!\n\nBlack crashes when it finds a symbolic link pointing to a file or a directory outside of the root directory.\n\nSteps to reproduce\n\nCreate the following structure:\nbase\n  |-- repo\n  |     |-- dummy.py\n  |     `-- resource -> ../resource\n  `-- resource\nInitiate base/repo as a Git repository (so as to set the root directory);\nCall black . within base/repo;\nExpected behavior: Black ends as expected;\nCurrent behavior: throws an exception:\nTraceback (most recent call last):\n  File \"/home/neraste/.virtualenvs/test_black/bin/black\", line 11, in <module>\n    sys.exit(main())\n  File \"/home/neraste/.virtualenvs/test_black/lib/python3.6/site-packages/click/core.py\", line 722, in __call__\n    return self.main(*args, **kwargs)\n  File \"/home/neraste/.virtualenvs/test_black/lib/python3.6/site-packages/click/core.py\", line 697, in main\n    rv = self.invoke(ctx)\n  File \"/home/neraste/.virtualenvs/test_black/lib/python3.6/site-packages/click/core.py\", line 895, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/home/neraste/.virtualenvs/test_black/lib/python3.6/site-packages/click/core.py\", line 535, in invoke\n    return callback(*args, **kwargs)\n  File \"/home/neraste/.virtualenvs/test_black/lib/python3.6/site-packages/click/decorators.py\", line 17, in new_func\n    return f(get_current_context(), *args, **kwargs)\n  File \"/home/neraste/.virtualenvs/test_black/lib/python3.6/site-packages/black.py\", line 347, in main\n    gen_python_files_in_dir(p, root, include_regex, exclude_regex, report)\n  File \"/home/neraste/.virtualenvs/test_black/lib/python3.6/site-packages/black.py\", line 2942, in gen_python_files_in_dir\n    normalized_path = \"/\" + child.resolve().relative_to(root).as_posix()\n  File \"/usr/lib64/python3.6/pathlib.py\", line 872, in relative_to\n    .format(str(self), str(formatted)))\nValueError: '/data/test_black/base/resource' does not start with '/data/test_black/base/repo'\nAs pointed out in the backtrace, this is due to the line 2942, where the resolved path of the files is made relative to the root directory. This is indeed impossible if the file is outside of the root directory. One can wonder if it makes sense to have an external link within a repository, but, well I am in this case.\n\nAdding the conflicting file/folder to the exclude list does not work.\n\nPossible workaround\n\nA possible workaround could be to simply ignore this case and do not handle this simlinked resource:\n\n        try:\n            normalized_path = \"/\" + child.resolve().relative_to(root).as_posix()\n\n        except ValueError:\n            if child.is_symlink():\n                continue                                                        \n\n            raise\nAdditional information\n\nOperating system: GNU/Linux OpenSUSE Tumbleweed\nPython version: 3.6\nBlack version: 18.6b2\nDoes also happen on master: yes\n"
    ]
}