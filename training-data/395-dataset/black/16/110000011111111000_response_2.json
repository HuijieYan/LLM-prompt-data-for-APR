{
    "black": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 2934,
            "file_name": "black.py",
            "replace_code": "def gen_python_files_in_dir(\n    path: Path,\n    root: Path,\n    include: Pattern[str],\n    exclude: Pattern[str],\n    report: Report,\n) -> List[Path]:\n    def is_subpath(src: Path, dst: Path) -> bool:\n        try:\n            src.relative_to(dst)\n            return True\n        except ValueError:\n            return False\n\n    assert root.is_absolute(), f\"INTERNAL ERROR: `root` must be absolute but is {root}\"\n    result = []\n    paths_to_visit = [path]\n    \n    while paths_to_visit:\n        current_path = paths_to_visit.pop(0)\n        for child in current_path.iterdir():\n            normalized_path = \"/\" + child.resolve().absolute().relative_to(root).as_posix()\n\n            if child.is_dir():\n                paths_to_visit.append(child)\n            elif child.is_file():\n                exclude_match = exclude.search(normalized_path)\n                if exclude_match and exclude_match.group(0):\n                    report.path_ignored(child, f\"matches the --exclude regular expression\")\n                else:\n                    include_match = include.search(normalized_path)\n                    if include_match and is_subpath(child.resolve(), root):\n                        result.append(child)\n\n    return result",
            "imports": [
                "import re",
                "from pathlib import Path",
                "from typing import Pattern, Iterator, List, Any"
            ]
        }
    ]
}