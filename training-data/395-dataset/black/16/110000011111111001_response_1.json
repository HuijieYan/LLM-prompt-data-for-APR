{
    "black": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2934,
            "file_name": "black.py",
            "replace_code": "def gen_python_files_in_dir(\n    path: Path,\n    root: Path,\n    include: Pattern[str],\n    exclude: Pattern[str],\n    report: \"Report\",\n) -> Iterator[Path]:\n    assert root.is_absolute(), f\"INTERNAL ERROR: `root` must be absolute but is {root}\"\n    for child in path.iterdir():\n        if child.is_dir():\n            yield from gen_python_files_in_dir(child, root, include, exclude, report)\n        elif child.is_file():\n            child_path = child.resolve()\n            if child_path.is_absolute():\n                try:\n                    relative_path = child_path.relative_to(root)\n                    normalized_path = relative_path.as_posix()\n                    include_match = include.search(normalized_path)\n                    exclude_match = exclude.search(normalized_path)\n                    if include_match and not exclude_match:\n                        yield child\n                except ValueError:\n                    report.path_ignored(child, f\"ValueError: could not determine the relative path\")\n            else:\n                report.path_ignored(child, f\"Child path is not absolute\")",
            "import_list": [
                "from typing import Iterator, Pattern",
                "from pathlib import Path"
            ]
        }
    ]
}