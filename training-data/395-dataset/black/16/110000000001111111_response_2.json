{
    "black": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2934,
            "file_name": "black.py",
            "replace_code": "def gen_python_files_in_dir(path: Path, root: Path, include: Pattern[str], exclude: Pattern[str], report: Report) -> Iterator[Path]:\n    assert root.is_absolute(), f\"INTERNAL ERROR: `root` must be absolute but is {root}\"\n    for child in path.iterdir():\n        normalized_path = \"/\" + os.path.relpath(child.resolve(), root)\n        if os.path.islink(child) and not os.path.exists(child.resolve()):\n            continue  # Skip if the symlink points to a non-existing file or directory\n        if exclude.search(normalized_path):\n            report.path_ignored(child, f\"matches the --exclude regular expression\")\n            continue\n        if child.is_dir():\n            yield from gen_python_files_in_dir(child, root, include, exclude, report)\n        elif child.is_file():\n            if include.search(normalized_path):\n                yield child",
            "imports": [
                "import os",
                "from typing import Iterator, Pattern",
                "from pathlib import Path"
            ]
        }
    ]
}