{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, pd.DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    idx = ax\n    if isinstance(idx, pd.DatetimeIndex):\n        idx = idx.asi8\n\n    if len(idx) == 0:\n        binner = labels = pd.DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    if not isinstance(self.freq, to_offset):\n        freq = to_offset(self.freq)\n        first, last = _get_timestamp_range_edges(\n            idx.min(), idx.max(), freq, closed=self.closed, base=self.base\n        )\n\n        if isinstance(first, pd.Timestamp) and isinstance(last, pd.Timestamp):\n            # GH #12037\n            # use first/last directly instead of call replace() on them\n            # because replace() will swallow the nanosecond part\n            # thus last bin maybe slightly before the end if the end contains\n            # nanosecond part and lead to `Values falls after last bin` error\n            binner = labels = pd.date_range(\n                start=first, end=last, freq=freq, tz=ax.tz, name=ax.name, ambiguous=\"infer\", nonexistent=\"shift_forward\"\n            )\n\n            binner, bin_edges = self._adjust_bin_edges(binner, idx)\n\n            # general version, knowing nothing about relative frequencies\n            bins = lib.generate_bins_dt64(\n                idx, bin_edges, self.closed, hasnans=idx.hasnans\n            )\n\n            if self.closed == \"right\":\n                labels = binner\n                if self.label == \"right\":\n                    labels = labels[1:]\n            elif self.label == \"right\":\n                labels = labels[1:]\n\n            if idx.hasnans:\n                binner = binner.insert(0, pd.NaT)\n                labels = labels.insert(0, pd.NaT)\n\n            # if we end up with more labels than bins\n            # adjust the labels\n            # GH4076\n            if len(bins) < len(labels):\n                labels = labels[: len(bins)]\n\n            return binner, bins, labels\n        else:\n            return [], [], []",
            "import_list": [
                "import pandas as pd",
                "from datetime import datetime",
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}