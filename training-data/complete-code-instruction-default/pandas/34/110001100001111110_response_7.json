{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    import numpy as np \n    from pandas.tseries.frequencies import to_offset\n    from pandas.tseries.frequencies import infer_freq\n    from pandas.core.indexes.datetimes import DatetimeIndex\n    from pandas import date_range, NaT, Timestamp\n   \n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=ax.freq, name=ax.name)\n        return binner, [], labels\n    \n    first = ax.min()\n    last = ax.max()\n    frequency = infer_freq(ax)\n    \n    if frequency is not None:\n        offset = to_offset(frequency)\n        if self.closed == 'left':\n            last -= 1\n        else:\n            first += 1\n        first = np.datetime64(first, 'ns') - np.timedelta64(1, 'ns')\n        last = np.datetime64(last, 'ns') + np.timedelta64(1, 'ns')\n    else:\n        offset = to_offset(self.freq)\n        \n    binner = labels = date_range(\n        freq=offset,\n        start=first,\n        end=last,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    bins = np.searchsorted(bin_edges, ax_values, side=self.closed)\n    \n    labels = binner\n    if self.label == \"right\":\n        labels = labels[1:]\n    \n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n        \n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n        \n    return binner, bins, labels",
            "import_list": [
                "import warnings",
                "import numpy as np",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.frequencies import infer_freq",
                "from pandas.core.indexes.datetimes import DatetimeIndex",
                "from pandas import date_range, NaT, Timestamp"
            ]
        }
    ]
}