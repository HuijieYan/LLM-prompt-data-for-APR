{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, pd.DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if len(ax) == 0:\n            binner = labels = pd.DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        first, last = ax[0], ax[-1]\n        if isinstance(first, Timestamp) and isinstance(last, Timestamp):\n            first, last = first.to_pydatetime(), last.to_pydatetime()\n\n        if not self.freq.onOffset(first) or not self.freq.onOffset(last):\n            raise ValueError(\"Axes must be sorted and in increasing order to work properly\")\n\n        binner = labels = date_range(\n            start=first,\n            end=last + self.freq,\n            freq=self.freq,\n            closed=self.closed,\n            tz=ax.tz,\n            name=ax.name,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n        )\n\n        ax_values = ax.values\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n        bins = np.digitize(\n            ax_values,\n            bin_edges,\n            right=self.closed == \"right\",\n            # np.digitize needs array-likes as input even though ax_values is an ndarray\n            # GH 25815, exceptions are illegal arguments in certain cases\n        )\n        \n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n\n        if ax._hasnans:\n            binner = binner.insert(0, pd.NaT)\n            labels = labels.insert(0, pd.NaT)\n\n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n\n        return binner, bins, labels",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas import Timestamp, date_range",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.offsets import Day"
            ]
        }
    ]
}