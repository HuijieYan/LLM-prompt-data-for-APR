{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    # Use converted first and last values to account for ambiguous times\n    first, last = _get_timestamp_range_edges(ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base)\n    first = first.tz_localize(ax.tz)\n    last = last.tz_localize(ax.tz)\n\n    if isinstance(self.freq, (str, liboffset.Tick)):\n        freq = to_offset(self.freq)\n    elif isinstance(self.freq, Timedelta):\n        freq = get_offset(self.freq)\n    else:\n        freq = self.freq\n\n    binner = date_range(\n        start=ax.min(),\n        end=ax.max() + freq,\n        freq=self.freq,\n        tz=ax.tz,\n        name=ax.name,\n    )\n\n    ax_values = ax.asi8\n\n    # Generate bins and labels based on adjusted first and last\n    bins = lib.generate_bins_dt64(\n        ax_values, [first.value, last.value], self.closed, hasnans=ax.hasnans\n    )\n\n    bin_edges = np.array([first.value, last.value])\n\n    # adjust the labels based on frequency, known nothing about relative frequencies\n    binner = binner[1:] - freq\n    labels = binner[1:]\n\n    if self.closed == \"left\":\n        labels = labels.insert(0, first)\n    else:\n        labels = labels.insert(labels.shape[0], last)\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    return binner, bins, labels",
            "import_list": [
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.frequencies import get_offset",
                "import pandas._libs.tslibs.offsets as liboffset"
            ]
        }
    ]
}