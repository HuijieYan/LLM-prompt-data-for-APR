{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, pd.DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if len(ax) == 0:\n            binner = labels = pd.DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        first = ax.min()\n        last = ax.max()\n        if self.freq.n == 1:  # if freq is daily\n            last -= pd.Timedelta('1h')  # subtract an hour\n        else:\n            last = last.replace(second=0, microsecond=0)  # start of the last day\n\n        binner = labels = pd.date_range(\n            freq=self.freq,\n            start=first,\n            end=last,\n            tz=ax.tz,\n            name=ax.name,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n            closed=self.closed\n        )\n\n        ax_values = ax.astype(np.int64)\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n        # general version, knowing nothing about relative frequencies\n        bins = lib.generate_bins_dt64(\n            ax_values, bin_edges, self.closed, has_nans=ax.hasnans\n        )\n\n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n\n        if ax.hasnans:\n            binner = binner.insert(0, pd.NaT)\n            labels = labels.insert(0, pd.NaT)\n\n        # if we end up with more labels than bins\n        # adjust the labels\n        # GH4076\n        if len(bins) < len(labels):\n            labels = labels[:len(bins)]\n\n        return binner, bins, labels",
            "import_list": []
        }
    ]
}