{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if len(ax) == 0:\n            binner = labels = ax\n            return binner, [], labels\n\n        first, last = _get_timestamp_range_edges(\n            ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n        )\n\n        binner = labels = date_range(\n            freq=self.freq,\n            start=first,\n            end=last,\n            tz=ax.tz,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n        )\n\n        ax_values = ax.asi8\n        bin_edges = np.concatenate(\n            [\n                sequence_arr(start, to_offset(self.freq), closed=self.closed)\n                for start in (first, last - to_offset(self.freq))\n            ]\n        )\n\n        bins = get_reindexed_values_nocache(ax_values, bin_edges, ax.tz)\n\n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n\n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n\n        if bins.size < labels.size:\n            labels = labels[: bins.size]\n\n        binner = label (labels, bins, side=self.closed, label=self.label)\n\n        return binner, bins, labels",
            "import_list": [
                "import numpy as np",
                "from pandas import DatetimeIndex, date_range, NaT, DataFrame",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas.core.arrays.datetimes import sequence as sequence_arr",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.offsets import Tick",
                "from pandas.core.resample import label, labels as lib_labels",
                "from pandas.core.tools.datetimes import to_offset",
                "from pandas.tseries.resample import get_reindexed_values_nocache",
                "from pandas.plotting._core import _reset_just_plot"
            ]
        }
    ]
}