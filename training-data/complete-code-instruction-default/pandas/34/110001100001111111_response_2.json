{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, pd.DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = ax\n        return binner, [], labels\n\n    first = ax.min()\n    last = ax.max()\n    \n    # Adjust the timestamps directly instead of using replace()\n    first = pd.Timestamp(first.value, tz=first.tz, is_dst=False)\n    last = pd.Timestamp(last.value, tz=last.tz, is_dst=False)\n    \n    binner = labels = pd.date_range(\n        start=first,\n        end=last,\n        freq=self.freq,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\"\n    )\n\n    ax_values = np.array(ax.tolist())\n    bin_edges = np.append(ax_values, [2*ax_values[-1] - ax_values[-2]])\n    \n    # modify the bin_edges and labels based on the ambiguous time\n    # account for the ambiguous time and adjust the bins and labels\n    \n    if self.freq.n == 1:\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values, bin_edges)\n    else:\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n    \n    bins = np.digitize(ax_values, bin_edges)\n\n    labels = binner\n\n    if ax.hasnans:\n        binner = np.insert(binner, 0, pd.NaT)\n        labels = np.insert(labels, 0, pd.NaT)\n\n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n\n    return binner, bins, labels",
            "import_list": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}