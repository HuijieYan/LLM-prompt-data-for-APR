{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    # add imports\n    import numpy as np\n    import pandas._libs.lib as lib\n    import pandas.core.dtypes.common as pandas_dtype\n    import pandas.core.arrays.integer as tlib\n    import pandas.core.dtypes.cast as cast\n    import pandas.util._validators as validators\n\n    if validators.is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if np.issubdtype(dtype, np.floating):\n        if np.issubdtype(dtype, np.integer):\n            if not lib.isfinite(arr).all():\n                raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n            return cast.astype_float_to_int_safe(arr.ravel(), dtype).reshape(arr.shape)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif tlib.is_integer_dtype(dtype):\n        return arr.view(dtype)\n\n    elif dtype.kind in [\"M\", \"m\"]:\n        if dtype.kind == \"M\" and arr.block.values[0] == iNaT:\n            # can't assume that all blocks have iNaT value if there's more than one block\n            if dtype.name in [\"datetime64\", \"timedelta64\"]:\n                msg = (\n                    f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n                    f\"'{dtype.name}[ns]' instead.\"\n                )\n                raise ValueError(msg)\n            a = tlib.iNaT\n        else:\n            a = arr\n        return arr.astype(dtype)\n\n    if is_object_dtype(arr):\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif np.issubdtype(dtype, np.datetime64):\n            from pandas import to_datetime\n            return cast.astype(arr, dtype, copy=copy)\n\n    # Explicit copy, or required since NumPy can't view from / to object.\n    return arr.astype(dtype, copy=True)",
            "import_list": [
                "import numpy as np",
                "import pandas._libs.lib as lib",
                "import pandas.core.dtypes.common as pandas_dtype",
                "import pandas.core.arrays.integer as tlib",
                "import pandas.core.dtypes.cast as cast",
                "import pandas.util._validators as validators",
                "from pandas import to_datetime"
            ]
        }
    ]
}