{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    if is_datetime64_dtype(dtype) or is_timedelta64_dtype(dtype):\n        if dtype == 'datetime64':\n            dtype = 'datetime64[ns]'\n        elif dtype == 'timedelta64':\n            dtype = 'timedelta64[ns]'\n\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    try:\n        c_dtype = np.dtype(dtype)\n    except TypeError:\n        c_dtype = pandas_dtype(dtype)\n\n    if issubclass(c_dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    if is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif c_dtype == np.int64:\n            return arr.view(c_dtype)\n\n        # allow frequency conversions\n        if c_dtype.kind == \"M\":\n            return arr.astype(c_dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{c_dtype}]\")\n\n    if is_timedelta64_dtype(arr):\n        if is_object_dtype(c_dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif c_dtype == np.int64:\n            return arr.view(c_dtype)\n\n        if c_dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if c_dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(c_dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif c_dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{c_dtype}]\")\n\n    if np.issubdtype(arr.dtype, np.floating) and np.issubdtype(c_dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    if is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(c_dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), c_dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(c_dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, c_dtype, copy=copy)\n        elif is_timedelta64_dtype(c_dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, c_dtype, copy=copy)\n\n    if str(c_dtype) in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{c_dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{c_dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(c_dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(c_dtype, copy=True)\n\n    return arr.view(c_dtype)",
            "import_list": [
                "import numpy as np",
                "import pandas.api.types as ptypes",
                "import pandas.core.common as com",
                "from pandas.core import nanops",
                "from pandas.core.dtypes.common import is_datetime64_dtype",
                "from pandas.core.dtypes.common import is_timedelta64_dtype",
                "from pandas.core.dtypes.common import pandas_dtype",
                "from pandas import to_datetime",
                "from pandas import to_timedelta"
            ]
        }
    ]
}