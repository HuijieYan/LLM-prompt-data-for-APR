{
    "pandas": [
        {
            "bugID": 69,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2110,
            "file_name": "pandas/core/indexing.py",
            "replace_code": "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require the keys to be the same type as the index. (so we don't fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    for ax, i in zip(self.obj.axes, key):\n        if isinstance(self.obj, pd.TimedeltaIndex):\n            if isinstance(i, int) and not pd.api.types.is_timedelta64_any_dtype(self.obj.dtype):\n                raise ValueError(\n                    \"At based indexing on a non-timedelta index \"\n                    \"can only have non-integer indexers\"\n                )\n            elif not pd.api.types.is_timedelta64_any_dtype(self.obj.dtype):\n                if not isinstance(i, int):\n                    raise ValueError(\n                        \"At based indexing on a non-timedelta \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )\n        elif isinstance(self.obj, pd.DatetimeIndex):\n            if isinstance(i, int) and not pd.api.types.is_datetime64_any_dtype(self.obj.dtype):\n                raise ValueError(\n                    \"At based indexing on a non-datetime index \"\n                    \"can only have non-integer indexers\"\n                )\n            elif not pd.api.types.is_datetime64_any_dtype(self.obj.dtype):\n                if not isinstance(i, int):\n                    raise ValueError(\n                        \"At based indexing on a non-datetime \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )\n\n    return key",
            "import_list": []
        }
    ]
}