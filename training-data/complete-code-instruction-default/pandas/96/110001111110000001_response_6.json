{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        business_hour_start = self.start[0].replace(year=other.year, month=other.month, day=other.day)\n        business_hour_end = self.end[-1].replace(year=other.year, month=other.month, day=other.day)\n\n        if n >= 0:\n            if other.time() > self.end[-1].time() or not self._is_on_offset(other):\n                next_opening = self._next_opening_time(business_hour_end)\n                other = next_opening\n        else:\n            if other.time() < self.start[0].time():\n                # adjustment to move to previous business day\n                other = other - timedelta(days=1)\n            if not self._is_on_offset(other):\n                next_opening = self._next_opening_time(other)\n                other = self._get_closing_time(next_opening)\n\n        if n < 0:\n            diff = business_hour_start - business_hour_end\n        else:\n            diff = business_hour_end - business_hour_start\n\n        remaining_business_hours = diff.total_seconds() / 60\n        business_days, remaining_hours = divmod(abs(n * 60), remaining_business_hours)\n\n        if n < 0:\n            business_days, remaining_hours = -business_days, -remaining_hours\n\n        adjusted_datetime = business_hour_start\n        adjusted_datetime += timedelta(days=business_days)\n\n        remaining_time = timedelta(minutes=remaining_hours)\n\n        while remaining_time.total_seconds() > 0:\n            next_opening = self._next_opening_time(adjusted_datetime)\n            time_interval = next_opening - adjusted_datetime\n            if remaining_time < time_interval:\n                adjusted_datetime += remaining_time\n                remaining_time = timedelta(0)\n            else:\n                adjusted_datetime = self._next_opening_time(adjusted_datetime + time_interval)\n                remaining_time -= time_interval\n\n        return adjusted_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}