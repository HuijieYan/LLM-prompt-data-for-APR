{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n    n = self.n\n\n    nanosecond = getattr(other, \"nanosecond\", 0)\n\n    # adjust the timezone and nanosecond\n    adjusted_time = datetime(\n        other.year,\n        other.month,\n        other.day,\n        other.hour,\n        other.minute,\n        other.second,\n        other.microsecond,\n    )\n\n    # handle the cases based on n value\n    if n >= 0:\n        if adjusted_time.time() in self.end or not self._is_on_offset(adjusted_time):\n            adjusted_time = self._next_opening_time(adjusted_time)\n    else:\n        if adjusted_time.time() in self.start:\n            adjusted_time -= timedelta(seconds=1)\n        if not self._is_on_offset(adjusted_time):\n            adjusted_time = self._next_opening_time(adjusted_time)\n            adjusted_time = self._get_closing_time(adjusted_time)\n\n    # perform other calculations and adjustments\n    # ...\n\n    # return the adjusted datetime\n    return adjusted_time",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}