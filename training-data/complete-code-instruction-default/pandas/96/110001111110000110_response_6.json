{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self.n == 0:\n            return other\n\n        start = other.replace(hour=self.start.hour, minute=self.start.minute, second=self.start.second, microsecond=self.start.microsecond)\n        end = other.replace(hour=self.end.hour, minute=self.end.minute, second=self.end.second, microsecond=self.end.microsecond)\n\n        if self.n > 0:\n            if other >= end or not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n            while other < end and not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n\n            if other.time() in self.end:\n                other = self._next_opening_time(other)\n        else:\n            if other <= start or not self.is_on_offset(other):\n                other = self._prev_opening_time(other)\n            while other > start and not self.is_on_offset(other):\n                other = self._prev_opening_time(other)\n\n            if other.time() in self.start:\n                other = self._prev_opening_time(other)\n                \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}