{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # (all code inside the function remains unchanged)\n            # ...\n\n            # get total business hours by sec in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            total_minutes = abs(n * 60)\n            effective_minutes = total_minutes % (businesshours // 60)\n\n            # handle negative number of business hours\n            if n < 0 and effective_minutes > 0:\n                effective_minutes = businesshours - effective_minutes\n\n            # business day adjustment logic\n            business_days = n // (businesshours // 60)\n            other += timedelta(days=business_days)\n\n            # handle positive number of business hours\n            if n > 0 and effective_minutes > 0:\n                curr_time = other.time()\n                for start, end in zip(self.start, self.end):\n                    if start <= curr_time < end:\n                        minutes_left = (end.hour - curr_time.hour) * 60 + (end.minute - curr_time.minute)\n                        if minutes_left >= effective_minutes:\n                            other = datetime.combine(other.date(), curr_time + timedelta(minutes=effective_minutes))\n                            effective_minutes = 0\n                        else:\n                            effective_minutes -= minutes_left\n                            other = datetime.combine(other.date(), end)\n                            curr_time = end\n\n            # handle negative number of business hours\n            if n < 0 and effective_minutes > 0:\n                curr_time = other.time()\n                for start, end in zip(self.start, self.end):\n                    if start < curr_time <= end:\n                        minutes_left = (curr_time.hour - start.hour) * 60 + (curr_time.minute - start.minute)\n                        if minutes_left >= effective_minutes:\n                            other = datetime.combine(other.date(), curr_time - timedelta(minutes=effective_minutes))\n                            effective_minutes = 0\n                        else:\n                            effective_minutes -= minutes_left\n                            other = datetime.combine(other.date(), start)\n                            curr_time = start\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}