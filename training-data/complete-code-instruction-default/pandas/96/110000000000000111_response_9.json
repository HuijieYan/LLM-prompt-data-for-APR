{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # original code - unchanged\n        if other.time() in self.start:\n            # adjustment to move to previous business day\n            other = other - timedelta(seconds=1)\n        if not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n            other = self._get_closing_time(other)\n\n        # get total business hours by sec in one business day - unchanged\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # logic to adjust for holidays and business hours - modified\n        holiday_hours = 0\n        for holiday in self.holidays:\n            if holiday.date() == other.date():\n                holiday_hours += 1\n\n        total_hours = self._get_business_hours_by_sec(self.start[0], self.end[-1])\n        total_business_days = (other - datetime.combine(other.date(), time(0, 0))).days\n        total_business_hours = total_business_days * total_hours + businesshours + (holiday_hours * 60 * 60)\n\n        new_time = (other - datetime.datetime.combine(other.date(), time(0, 0))).seconds / 3600\n\n        period, remainder = divmod(abs(self.n) * 60, total_hours // 60)\n        if self.n < 0:\n            period, remainder = -period, -remainder\n\n        if self.n >= 0:\n            new_time += period * total_hours / 3600\n        else:\n            new_time -= period * total_hours / 3600\n\n        # calculate new datetime after adjustments\n        new_datetime = datetime.combine(other.date(), time(0, 0)) + timedelta(hours=new_time)\n\n        return new_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from pandas.tseries.offsets import CustomBusinessDay",
                "from pandas.tseries.offsets import Day",
                "from pandas.tseries.offsets import BDay"
            ]
        }
    ]
}