{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # used for detecting edge condition\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        # reset timezone and nanosecond\n        # other may be a Timestamp, thus not use replace\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n        offset = self.offset\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() in self.end or not self.on_offset(other):\n                other = self.next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                # adjustment to move to previous business day\n                other = other - timedelta(seconds=1)\n            if not self.on_offset(other):\n                other = self.next_opening_time(other)\n                other = self.get_closing_time(other)\n\n        # get total business hours by sec in one business day\n        business_hours = sum(\n            self.get_business_hours_by_seconds(start, end)\n            for start, end in zip(self.start, self.end)\n        )\n\n        business_days, remainder = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            business_days, remainder = -business_days, -remainder\n\n        # adjust by business days first\n        if business_days != 0:\n            skip_business_days = CustomBusinessHour(n=business_days, start=self.start, end=self.end, holidays=self.holidays)\n            if not self.next_bday.on_offset(other):\n                prev_open = self.prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_business_days + remain\n            else:\n                other = other + skip_business_days\n\n        # remaining business hours to adjust\n        business_hours_remainder = timedelta(minutes=remainder)\n\n        if n >= 0:\n            while business_hours_remainder != timedelta(0):\n                # business hour left in this business time interval\n                business_hour = (\n                    self.get_closing_time(self.prev_opening_time(other)) - other\n                )\n                if business_hours_remainder < business_hour:\n                    # finish adjusting if possible\n                    other += business_hours_remainder\n                    business_hours_remainder = timedelta(0)\n                else:\n                    # go to next business time interval\n                    business_hours_remainder -= business_hour\n                    other = self.next_opening_time(other + business_hour)\n        else:\n            while business_hours_remainder != timedelta(0):\n                # business hour left in this business time interval\n                business_hour = self.next_opening_time(other) - other\n                if (\n                    business_hours_remainder > business_hour\n                    or business_hours_remainder == business_hour\n                    and nanosecond != 0\n                ):\n                    # finish adjusting if possible\n                    other += business_hours_remainder\n                    business_hours_remainder = timedelta(0)\n                else:\n                    # go to next business time interval\n                    business_hours_remainder -= business_hour\n                    other = self.get_closing_time(\n                        self.next_opening_time(\n                            other + business_hour - timedelta(seconds=1)\n                        )\n                    )\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta",
                "from pandas.tseries.offsets import CustomBusinessHour",
                "import pandas as pd"
            ]
        }
    ]
}