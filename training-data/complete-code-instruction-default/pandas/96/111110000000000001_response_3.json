{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n            total_minutes = businesshours // 60\n            n = self.n\n            if n < 0:\n                total_minutes = -total_minutes\n\n            days, minutes = divmod(abs(n * 60), total_minutes)\n\n            if n < 0:\n                days = -days\n                minutes = -minutes\n\n            if days != 0:\n                business_day_offset = self.next_bday(other) - other\n                remaining_minutes = minutes + days * total_minutes\n                adjusted_time = self._next_opening_time(other + business_day_offset)\n            else:\n                remaining_minutes = minutes\n                adjusted_time = other\n\n            while remaining_minutes != 0:\n                if n >= 0:\n                    next_opening = self._next_opening_time(adjusted_time)\n                    business_time_left = self._get_closing_time(\n                        self._prev_opening_time(adjusted_time)\n                    ) - adjusted_time\n                else:\n                    next_opening = self._next_opening_time(adjusted_time)\n                    business_time_left = next_opening - adjusted_time\n\n                if abs(business_time_left.seconds // 60) <= abs(remaining_minutes):\n                    adjusted_time = self._get_closing_time(next_opening)\n                    remaining_minutes -= abs(business_time_left.seconds // 60)\n                else:\n                    adjusted_time += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n\n            return adjusted_time\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}