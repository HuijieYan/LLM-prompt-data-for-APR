{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n            if n >= 0:  \n                next_opening = other if other.time() in self.start else self._next_opening_time(other)\n\n                while n > 0:\n                    next_closing = self._get_closing_time(next_opening)\n                    time_within_interval = (next_closing - next_opening).total_seconds()\n\n                    if n >= time_within_interval / 60:\n                        n -= time_within_interval / 60\n                        next_opening = self._next_opening_time(next_closing)\n                    else:\n                        next_opening += timedelta(minutes=n)\n                        n = 0\n\n                return next_opening\n            else:\n                prev_opening = self._prev_opening_time(other) if other.time() in self.end else self._get_closing_time(other)\n                while n < 0:\n                    curr_opening = self._next_opening_time(prev_opening)\n\n                    if curr_opening.date() == prev_opening.date():\n                        closing_to_opening = (curr_opening - self._get_closing_time(prev_opening)).total_seconds()\n                        if abs(n) >= closing_to_opening / 60:\n                            n += closing_to_opening / 60\n                            prev_opening = curr_opening\n                        else:\n                            prev_opening -= timedelta(minutes=abs(n))\n                            n = 0\n                    else:\n                        prev_opening = curr_opening\n                        n += 1\n\n                return prev_opening\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}