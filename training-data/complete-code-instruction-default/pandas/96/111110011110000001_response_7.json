{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        # apply custom business hour frequency\n        if isinstance(self, pd.tseries.offsets.CustomBusinessHour):\n            start_of_day = other.normalize()\n            adjusted_time = (other - start_of_day).total_seconds() / 3600\n            business_hour_start = self.start.hour + (self.start.minute / 60)\n            business_hour_end = self.end.hour + (self.end.minute / 60)\n            normalizer = business_hour_start\n            if business_hour_start >= adjusted_time:\n                adjusted_time = business_hour_start\n            elif business_hour_end <= adjusted_time:\n                adjusted_time = business_hour_start\n                normalizer = business_hour_end\n            alarm = start_of_day + pd.Timedelta((math.ceil(adjusted_time - normalizer)) * 3600, unit='s')\n            if alarm >= other:\n                return alarm\n            alarm += pd.Timedelta(1, 'D')\n            return alarm\n        else:\n            # handle other date offsets\n            return other + self.n * self.freq\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}