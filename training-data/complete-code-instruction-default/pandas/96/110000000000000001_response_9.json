{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n    n = self.n\n\n    working_hours = (self.end - self.start).total_seconds() / 60\n    working_days = 1 if working_hours == 0 else abs(n) // (working_hours / 60)\n    remaining_minutes = abs(n) % (working_hours / 60) if working_hours != 0 else 0\n\n    if n < 0:\n        working_days *= -1\n        remaining_minutes *= -1\n\n    result = other + timedelta(days=working_days)\n    result = self._get_closing_time(self.start) if result.time() in self.start else result\n    result = self._next_opening_time(result) if result.time() not in self.end else result\n\n    while remaining_minutes != 0:\n        next_opening = self._next_opening_time(result)\n\n        if n >= 0:\n            bhour = self._get_closing_time(self._prev_opening_time(result)) - result\n            if remaining_minutes < bhour.total_seconds() / 60:\n                result += timedelta(minutes=remaining_minutes)\n                remaining_minutes = 0\n            else:\n                remaining_minutes -= bhour.total_seconds() / 60\n                result = self._next_opening_time(next_opening)\n        else:\n            bhour = next_opening - result\n            if remaining_minutes > bhour.total_seconds() / 60:\n                result += timedelta(minutes=remaining_minutes)\n                remaining_minutes = 0\n            else:\n                remaining_minutes -= bhour.total_seconds() / 60\n                result = self._get_closing_time(self._next_opening_time(result) - timedelta(seconds=1))\n\n    return result",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}