{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This function doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clevels = [(index.names[i] if isinstance(index.names[i], tuple) else index.names[i]) for i in clocs]\n    cnames = [index.names[i] if isinstance(index.names[i], tuple) else None for i in clocs]\n    \n    if all([name is not None for name in cnames]):\n        clevels = [cnames] + clevels\n\n    if cnames[0] is not None:\n        new_levels = list(clevels)\n    else:  # New level is none, insert an empty list\n        new_levels = []\n        new_levels.append([])\n\n    group_index = index.codes[clocs[0]]\n    ngroups = group_index.max() + 1\n    ua_labels = [None] * ngroups\n    \n    for i in range(len(clevels)):\n        group_index, unstacker = _get_unstacker(index.codes[clocs[i]], ngroups)\n\n        if unstacker is not None:\n            new_levels.append(unstacker)\n            ua_labels = _mlist_to_array(ua_labels)\n            next_labels = _recon_group_index(group_index, unstacker)\n            blabels.append(next_labels)\n\n    new_columns = pd.MultiIndex(levels=new_levels, codes=new_labels, names=clevels)\n    return pd.DataFrame(bdata.values, index=new_index, columns=new_columns)",
            "import_list": []
        }
    ]
}