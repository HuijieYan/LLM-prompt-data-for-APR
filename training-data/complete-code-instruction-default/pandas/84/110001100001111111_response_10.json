{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Determine the level numbers for the given clocs\n    cloc_numbers = [data.index._get_level_number(c) if isinstance(c, tuple) else data.index.names.index(c) for c in clocs]\n\n    # Determine the remaining levels\n    rloc_numbers = [i for i in range(data.index.nlevels) if i not in cloc_numbers]\n\n    # Get the levels and codes for the clocs\n    clevels = [data.index.levels[i] for i in cloc_numbers]\n    ccodes = [data.index.codes[i] for i in cloc_numbers]\n    cnames = [data.index.names[i] for i in cloc_numbers]\n    \n    # Get the levels and codes for the rlocs\n    rlevels = [data.index.levels[i] for i in rloc_numbers]\n    rcodes = [data.index.codes[i] for i in rloc_numbers]\n    rnames = [data.index.names[i] for i in rloc_numbers]\n\n    # Perform unstacking based on the above information\n    unstacked = data.unstack(clocs, fill_value=fill_value)\n\n    # If the result is a Series, update the index with new_columns\n    if isinstance(unstacked, Series):\n        new_columns = MultiIndex.from_tuples(unstacked.index, names=cnames)\n        unstacked.index = new_columns\n    else:\n        # If the result is a DataFrame, update the columns with new_columns\n        new_columns = MultiIndex.from_tuples(unstacked.columns, names=cnames)\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}