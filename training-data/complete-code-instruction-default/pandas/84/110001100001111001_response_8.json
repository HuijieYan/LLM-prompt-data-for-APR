{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    # Convert clocs tuple to a list\n    if not isinstance(clocs, list):\n        clocs = list(clocs)\n\n    # Get the level numbers for clocs\n    cloc_numbers = [index._get_level_number(i) if isinstance(i, tuple) else index.names.index(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in cloc_numbers]\n\n    if isinstance(data, Series):\n        unstacked = data.unstack(clocs)\n    else:\n        unstacked = data.unstack(clocs[-1])\n\n    # Correct the construction of new index and columns\n    new_index = unstacked.index.to_frame().reset_index(drop=True)\n    new_columns = unstacked.columns.to_frame().reset_index(drop=True)\n\n    # If there are more levels, set the new index and columns to the new levels and codes\n    if len(cloc_numbers) > 1:\n        new_index = index.reorder_levels(clocs).droplevel(rlocs).to_frame().reset_index(drop=True)\n        new_columns = unstacked.columns.reorder_levels(clocs).droplevel(rlocs).to_frame().reset_index(drop=True)\n\n    unstacked.index = MultiIndex.from_frame(new_index)\n    unstacked.columns = MultiIndex.from_frame(new_columns)\n\n    return unstacked",
            "import_list": []
        }
    ]
}