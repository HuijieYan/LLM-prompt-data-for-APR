{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) if isinstance(i, tuple) else i for i in clocs]\n\n    # Hierarchical columns unstacking\n    if isinstance(data.columns, MultiIndex):\n        result = data\n        for i in range(len(clocs)):\n            val = clocs[i]\n            result = result.unstack(val, fill_value=fill_value)\n            clocs = [v if i > v else v - 1 for v in clocs]\n\n        return result\n\n    shape = [len(index.levels[i]) for i in clocs]\n    \n    group_index = get_group_index(index.codes[clocs], shape, sort=False, xnull=False)\n    \n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    \n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, index.codes[clocs], xnull=False)\n\n    # Extract the relevant data based on the index information\n    dummy_index = index.partial_droplevel(clocs).set_levels(obs_ids, level=clocs)\n\n    dummy = data.copy()\n    dummy.index = dummy_index\n    \n    unstacked = dummy.unstack(fill_value=fill_value)\n    new_levels = index.levels[clocs]\n    new_names = [index.names[i] for i in clocs]\n    new_codes = recons_codes\n\n    new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n\n    if isinstance(unstacked, MultiIndex):\n        unstacked = unstacked.set_levels(new_levels)\n    else:\n        unstacked.columns = new_columns\n    \n    return unstacked",
            "import_list": [
                "from pandas.core.reshape.reshape import unstack, get_group_index, compress_group_index, decons_obs_group_ids",
                "from pandas.core.indexes.multi import MultiIndex"
            ]
        }
    ]
}