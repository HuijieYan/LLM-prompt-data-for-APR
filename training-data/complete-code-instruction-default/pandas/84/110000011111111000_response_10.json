{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Get the level number for each clocs\n    clocs = [_get_level_number(i) for i in clocs]\n\n    if len(set(clocs)) < len(clocs):\n        raise ValueError(\"The name occurs multiple times, use a level number\")\n\n    index = data.index\n\n    # Split into hierarchical and regular columns\n    regular_cols = set(index.names) - set(index.names[i] for i in clocs)\n\n    if not regular_cols:\n        # Regular index\n        dummy_index = index.remove_unused_levels()\n    else:\n        # Hierarchical columns\n        regular_levels = [index.levels[i] for i in range(index.nlevels) if i not in clocs]\n        regular_codes = [index.codes[i] for i in range(index.nlevels) if i not in clocs]\n\n        dummy_index = MultiIndex(\n            levels=regular_levels + [index.levels[i] for i in clocs],\n            codes=regular_codes + [index.codes[i] for i in clocs],\n            names=[index.names[i] for i in range(index.nlevels) if i not in clocs] + [\n                index.names[i] for i in clocs\n            ],\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(list(clocs), fill_value=fill_value)\n\n        new_levels = [index.levels[i] for i in range(index.nlevels) if i not in clocs]\n        new_codes = [index.codes[i] for i in range(index.nlevels) if i not in clocs]\n\n        for row in range(len(index.codes[-1])):\n            new_codes.append(unstacked.index.codes[-1])\n\n        new_columns = MultiIndex(\n            levels=new_levels + [unstacked.index.levels[-1]],\n            codes=new_codes,\n            names=[index.names[i] for i in range(index.nlevels) if i not in clocs]\n            + [unstacked.index.names[-1]],\n        )\n\n        # Adjust the type of the MultiIndex to properly handle the new column structure\n        unstacked.index = unstacked.index.reorder_levels(new_columns.names)\n\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for c in sorted(list(clocs)):\n                result = result.unstack(c, fill_value=fill_value)\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(list(clocs))\n\n    return unstacked",
            "import_list": []
        }
    ]
}