{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n    index_columns = data.columns\n\n    clevels = [index.levels[index._get_level_number(name)] for name in clocs]\n    ccodes = [index.codes[index._get_level_number(name)] for name in clocs]\n    cnames = [name for name in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in ccodes]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = pd.Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = pd.MultiIndex(\n            levels=index.levels[rlocs] + [obs_ids],\n            codes=index.codes[rlocs] + [comp_ids],\n            names=index.names[rlocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    unstacked = dummy.unstack(cnames, fill_value=fill_value)\n\n    if len(clocs) == 1:\n        new_columns = unstacked.columns\n\n        if isinstance(new_columns, pd.MultiIndex):\n            new_levels = [idx.levels[0] for idx in new_columns]\n            new_codes = [idx.codes[0] for idx in new_columns]\n\n            if isinstance(new_levels[0], pd.Index):\n                new_names = [name for name in new_levels[0].names]\n            else:\n                new_names = [None] * len(new_levels)\n\n            new_columns = pd.MultiIndex(\n                levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n            )\n        else:\n            new_columns = index_columns\n\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}