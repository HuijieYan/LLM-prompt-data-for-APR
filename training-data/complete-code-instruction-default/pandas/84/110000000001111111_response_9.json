{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    # Extract level numbers for clocs\n    cloc_numbers = [index._get_level_number(i) for i in clocs]\n\n    # Identify the remaining level numbers\n    rloc_numbers = [i for i in range(index.nlevels) if i not in cloc_numbers]\n\n    if rloc_numbers == []:\n        # All levels are in clocs, dummy index has a regular index\n        dummy_index = pd.Index([c[0] for c in data.index], name=\"__placeholder__\")\n    else:\n        # Create a MultiIndex for the dummy index\n        dummy_index = pd.MultiIndex.from_tuples([c[:rloc_numbers[0]] for c in data.index], names=index.names[:rloc_numbers[0]] + [\"__placeholder__\"])\n\n    if isinstance(data, pd.Series):\n        # For Series, unstack with dummy index\n        unstacked = data.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        # For DataFrames, unstack using dummy index and construct new levels, codes, and names\n        unstacked = data.unstack(\"__placeholder__\", fill_value=fill_value)\n\n        new_levels = [index.levels[i] for i in cloc_numbers] + [dummy_index]\n        new_codes = [index.codes[i] for i in cloc_numbers] + [unstacked.index.codes[-1]]\n        new_names = [index.names[i] for i in cloc_numbers] + [\"__placeholder__\"]\n\n        new_columns = pd.MultiIndex(levels=new_levels, codes=new_codes, names=new_names)\n\n        if isinstance(unstacked, pd.Series):\n            # For Series, update the index\n            unstacked.index = new_columns\n        else:\n            # For DataFrames, update the columns\n            unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}