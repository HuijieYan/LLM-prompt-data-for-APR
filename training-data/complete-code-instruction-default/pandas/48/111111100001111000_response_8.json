{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n        \n        data=self._get_data_to_aggregate()\n        \n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n        result=[]\n        new_items=[]\n        deleted_items=[]\n        split_items=[]\n        split_frames=[]\n        no_res = object()\n        for block in data.blocks:\n            new_res = no_res\n            locs = block.mgr_locs.as_array\n            try:\n                new_res, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:\n                if alt is None:\n                    assert how == \"ohlc\"\n                    deleted_items.append(locs)\n                    continue\n                \n                obj = self.obj[data.items[locs]]\n                if obj.shape[1] == 1:\n                    obj = obj.iloc[:, 0]    \n                \n                s = get_groupby(obj, self.grouper)\n                try:\n                    new_res = s.aggregate(lambda x: alt(x, axis=self.axis))\n                except TypeError:\n                    deleted_items.append(locs)\n                    continue\n                else:\n                    new_res = cast(DataFrame, new_res)\n                    if len(new_res._data.blocks) != 1:\n                        split_items.append(locs)\n                        split_frames.append(new_res)\n                        continue\n        \n                    assert len(new_res._data.blocks) == 1\n                    new_res = new_res._data.blocks[0].values\n                    if isinstance(new_res, np.ndarray) and new_res.ndim == 1:\n                        new_res = new_res.reshape(1, -1)\n                    \n            assert not isinstance(new_res, DataFrame)\n            \n            if new_res is not no_res:\n                new_res = maybe_downcast_numeric(new_res, block.dtype)\n\n                if block.is_extension and isinstance(new_res, np.ndarray):\n                    assert new_res.ndim == 1 or new_res.shape[0] == 1\n                    try:\n                        new_res = type(block.values)._from_sequence(\n                            new_res.ravel(), dtype=block.values.dtype\n                        )\n                    except ValueError:\n                        new_res = new_res.reshape(1, -1)\n\n                new_block = block.make_block(new_res)\n            \n            new_items.append(locs)\n            result.append(new_block)\n\n        if not (result or split_frames):\n            raise DataError(\"No numeric types to aggregate\")\n\n        if split_items:\n            for locs, new_res in zip(split_items, split_frames):\n                assert len(locs) == new_res.shape[1]\n                for i, loc in enumerate(locs):\n                    new_items.append(np.array([loc], dtype=locs.dtype))\n                    result.append(new_res.iloc[:, [i]]._data.blocks[0])\n        \n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(indexer))\n\n        if deleted_items:\n            deleted = np.concatenate(deleted_items)\n            ai = np.arange(len(data))\n            mask = np.zeros(len(data))\n            mask[deleted] = 1\n            indexer = (ai - mask.cumsum())[indexer]\n        \n        offset = 0\n        for blk in result:\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[offset : (offset + loc)]\n            offset += loc\n        \n        return result, agg_items",
            "import_list": []
        }
    ]
}