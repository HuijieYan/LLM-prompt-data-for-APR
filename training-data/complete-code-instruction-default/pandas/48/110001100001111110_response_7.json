{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n\n    # Change conditional to check dtype of the data\n    if data._data.dtypes.any() != \"category\":\n        agg_blocks = data._data.agg(how, min_count=min_count)\n        if isinstance(agg_blocks, DataFrame):\n            to_concat = []\n\n            for block in agg_blocks.blocks:\n                to_concat.append(block.internal_values())\n            \n            result = np.concatenate(to_concat, axis=self.axis)\n            new_blocks = np.array_split(result, len(to_concat))\n\n            new_items = []\n            offset = 0\n            for blk in new_blocks:\n                new_block = Block(blk, self.grouper.indices, self.grouper.group_info, self._block_shape)\n                new_items.append(blk)\n                new_blocks.append(new_block)\n\n            agg_blocks = ColumnZip(new_blocks, new_items, index=agg_blocks._index)\n\n            return agg_blocks\n        elif isinstance(agg_blocks, DataFrame) and \"Series\" in agg_blocks.dtypes:\n            s = agg_blocks.iloc[:, 0]\n            index = s.index\n            return s\n        else:\n            # Groupby methods with 'how' argument calling\n            if isinstance(agg_blocks, Series):\n                # Return the same type as original if 'how' call is getting new groups which doesn't have 'value'\n                return agg_blocks\n            else:\n                return\n    else:\n        # probably you may raise warning about non-numeric types on which mean is being calculated\n        raise TypeError(\"Non-numeric types are not allowed for mean aggregation in groupby\")",
            "import_list": []
        }
    ]
}