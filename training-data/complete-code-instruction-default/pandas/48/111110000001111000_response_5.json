{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n    \n        data: BlockManager = self._get_data_to_aggregate()\n    \n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n    \n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n        for block in data.blocks:\n            locs = block.mgr_locs.as_array\n        \n            try:\n                _, _ = self.grouper.aggregate(\n                    block.values, how, axis=self.axis, min_count=min_count\n                )\n            except NotImplementedError:        \n                obj = self.obj[data.items[locs]]\n                if obj.shape[1] == 1:\n                    # Avoid call to self.values that can occur in DataFrame\n                    #  reductions; see GH#28949\n                    obj = obj.iloc[:, 0]\n        \n                s = get_groupby(obj, self.grouper)\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n        \n                if len(result._data.blocks) != 1:\n                    split_items.append(locs) \n                    split_frames.append(result)\n        \n                result = result._data.blocks[0].values\n                if result.ndim == 1:\n                    result = result.reshape(1, -1)\n        \n            if result.ndim == 1 and len(result) == 2:\n                # If result is 1-dimensional and there are only 2 values, fill the third\n                result = np.concatenate((result, [np.nan]))\n             \n            if not isinstance(result, DataFrame):\n                result = normalize_result(result, block.dtype)\n                if block.is_extension and isinstance(result, np.ndarray):\n                    result = restructure_extension_block_shape(result, block.values)\n                    if not isinstance(result, block.values):\n                        result = block.values._from_sequence( \n                            result.ravel(), dtype=block.values.dtype\n                        )\n                    else:\n                        result = result.reshape(1, -1)\n        \n                agg_block: Block = block.make_block(result)\n                new_items.append(locs)\n                agg_blocks.append(agg_block)\n         \n            else:\n                deleted_items.append(locs)\n        \n        if not agg_blocks and not split_frames:\n            raise DataError(\"No numeric types to aggregate\")   \n         \n        if split_items:\n            for locs, result in zip(split_items, split_frames):\n                for i, loc in enumerate(locs):\n                    new_items.append(np.array([loc], dtype=locs.dtype))\n                    agg_blocks.append(result._data.blocks[0])\n    \n        # reset the locs in the blocks to correspond to our\n        # current ordering\n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(indexer))\n         \n        if deleted_items:\n            deleted = np.concatenate(deleted_items)\n            ai = np.arange(len(data))\n            mask = np.zeros(len(data))\n            mask[deleted] = 1\n            indexer = (ai - mask.cumsum())[indexer]\n\n        offset = 0\n        for blk in agg_blocks:\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[offset : (offset + loc)]\n            offset += loc\n        \n        return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}