{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], Index]:\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    # Sanitize input to a consistent format\n    if how.lower() in ['mean', 'median', 'var']:\n        how = how.lower()\n    else:\n        raise ValueError(\"Invalid value for 'how'. Expected 'mean', 'median', or 'var'.\")\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n\n        # Perform aggregation based on the specified 'how' method\n        if how == 'mean':\n            result = block.values.mean(axis=1, skipna=True)\n        elif how == 'median':\n            result = block.values.median(axis=1, skipna=True)\n        elif how == 'var':\n            result = block.values.var(axis=1, ddof=1, skipna=True)\n\n        agg_block: Block = block.make_block(result)\n\n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n\n    # Further processing and indexing\n\n    return agg_blocks, data.items.take(np.sort(np.concatenate(new_items)))",
            "import_list": [
                "from typing import List, Tuple, Union",
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.internals.blocks import Block",
                "from pandas.core.indexes.base import Index",
                "from pandas.core.internals.managers import BlockManager",
                "from pandas.core.frame import DataFrame"
            ]
        }
    ]
}