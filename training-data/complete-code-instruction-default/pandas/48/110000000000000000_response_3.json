{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data._get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n\n    new_items = []\n    deleted_items = []\n    split_items = []\n    split_frames = []\n\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array.tolist()\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except Exception as e:\n            if alt is None:\n                if how == \"ohlc\":\n                    deleted_items.append(locs)\n                    continue\n                alt_values = block.values[0] if how == \"ohlc\" else alt(block.values)\n                result, _ = block._split_op(alt_values, alt)\n\n        if result is not no_result:\n            result = self._to_not_apply_block(result, block, how)\n\n            new_items.append(locs)\n            agg_block = block.make_block(result)\n            agg_blocks.append(agg_block)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    for locs, result in zip(split_items, split_frames):\n        for i, loc in enumerate(locs):\n            new_items.append([loc])\n            agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n\n    indexer = self._get_indexer(new_items)\n    new_items, deleted_items = self._cleanup_blocks(\n        agg_blocks, indexer, new_items, deleted_items, split_frames\n    )\n\n    agg_blocks, agg_items = self._reorder_blocks_and_create_frame(\n        data, agg_blocks, indexer, new_items\n    )\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}