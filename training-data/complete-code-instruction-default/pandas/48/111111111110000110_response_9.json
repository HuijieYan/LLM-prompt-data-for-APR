{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n    \n        data: BlockManager = self._get_data_to_aggregate()\n    \n        if numeric_only:\n            data = data.select_dtypes(include=[np.number], exclude=[np.object])\n    \n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n    \n        no_result = object()\n        for block in data.blocks:\n            # Avoid inheriting result from earlier in the loop\n            result = no_result\n            locs = block.mgr_locs.as_array\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:\n                try:\n                    if alt is None:\n                        raise NotImplementedError\n                    indicator = [\"ohlc\"]\n                    if how in indicator:\n                        raise NotImplementedError\n                    result = alt(block.values, axis=self.axis)\n                    if result.shape[0] != data.shape[1]:\n                        raise TypeError\n                    result = DataFrame([result])\n                except (NotImplementedError, TypeError):\n                    deleted_items.append(locs)\n                    continue\n                else:\n                    # We may have performed a Python agg\n                    result = result._to_dict(orient=\"list\")\n            else:\n                if result is None:\n                    result = block.values.apply(how, axis=1)\n                    if result.ndim != 1:\n                        deleted_items.append(locs)\n                        continue\n                    result = DataFrame([result])\n    \n            agg_blocks.append(apply(result, index=new_items, axis=1))\n    \n        if not (agg_blocks or split_frames):\n            raise DataError(\"No numeric types to aggregate\")\n    \n        # reset the locs in the blocks to correspond to our\n        # current ordering\n        indexer = np.concatenate(new_items)\n    \n        if deleted_items:\n            # we need to adjust the indexer to account for the\n            # items we have removed\n            m = np.repeat(True, len(new_items))\n            m[deleted_items] = False\n            indexer = indexer[m]\n    \n        return agg_blocks, None",
            "import_list": []
        }
    ]
}