{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    \"\"\"\n    This function aggregates the blocks using given parameters.\n    It returns agg_blocks and agg_items.\n    \"\"\"\n\n    # The actual managing of mgr_locs should happen via BlockManager.combine\n    data: BlockManager = self._get_data_to_aggregate()\n\n    # Only apply get_numeric_data if numeric_only is True\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n\n    # Loop through the data blocks\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n\n        # Try to apply the how function for aggregation\n        try:\n            # Aggregate using the grouper\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # If the how function is not implemented, handle the exception\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n\n            # Perform alternate aggregation\n            obj = self.obj[data.items[locs]]\n            if obj.shape[1] == 1:\n                obj = obj.iloc[:, 0]\n\n            s = get_groupby(obj, self.grouper)\n            result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            result = cast(DataFrame, result)\n\n            # Handle split block case\n            if len(result._data.blocks) != 1:\n                split_items.append(locs)\n                split_frames.append(result)\n                continue\n\n            assert len(result._data.blocks) == 1\n            result = result._data.blocks[0].values\n            if isinstance(result, np.ndarray) and result.ndim == 1:\n                result = result.reshape(1, -1)\n\n        # Ensure result is not a DataFrame\n        assert not isinstance(result, DataFrame)\n\n        # If result is not no_result, apply some operations\n        if result is not no_result:\n            result = maybe_downcast_numeric(result, block.dtype)\n\n            if block.is_extension and isinstance(result, np.ndarray):\n                assert result.ndim == 1 or result.shape[0] == 1\n                try:\n                    result = type(block.values)._from_sequence(\n                        result.ravel(), dtype=block.values.dtype\n                    )\n                except ValueError:\n                    result = result.reshape(1, -1)\n\n            agg_block: Block = block.make_block(result)\n\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n\n    # If there are no resulting agg_blocks or split_frames, raise an error\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    # If there are split items, clean up the mess left over from split blocks\n    if split_items:\n        for locs, result in zip(split_items, split_frames):\n            assert len(locs) == result.shape[1]\n            for i, loc in enumerate(locs):\n                new_items.append(np.array([loc], dtype=locs.dtype))\n                agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n\n    # Reset the locs in the blocks to correspond to the current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    # Handle deletion of items\n    if deleted_items:\n        deleted = np.concatenate(deleted_items)\n        ai = np.arange(len(data))\n        mask = np.zeros(len(data))\n        mask[deleted] = 1\n        indexer = (ai - mask.cumsum())[indexer]\n\n    offset = 0\n\n    # Set the new mgr_locs for each block\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    # Return the agg_blocks and agg_items\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}