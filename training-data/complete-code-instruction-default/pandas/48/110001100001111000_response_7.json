{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n\n    def _handle_error(e, alt, axis):\n        try:\n            result = alt.blockwise(axis)\n        except:\n            from pandas.core.dtypes.common import not_na\n            alt = not_na(alt, obj.shape[1], self.gf,\n                          fill_value=_maybe_fill(min_count))\n            result = alt.blockwise(axis)\n        return result\n\n    mgr_locs = self._get_data_to_aggregate()\n  \n    if numeric_only:\n        mgr_locs = mgr_locs.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n\n    for block in mgr_locs:\n        result = None\n        try:\n            axis = 0\n            result, _ = self.grouper.aggregate(block.values, how, axis=axis, min_count=min_count)\n        except NotImplementedError:\n            alt_obj = self.obj[mgr_locs.items[block.mgr_locs]]\n            alt = alt_obj._maybe_update_inplace(alt_obj.dropna(), inplace=True)\n\n            alt_block = ''.join(2 * ['[%s]' % axis])\n            alt = _handle_error(block, alt_block, axis)\n            result = alt\n        except Exception as e:\n            print(e)\n            pass\n\n        if result is not None:\n            result = maybe_downcast_numeric(result, block.dtype)\n            if block.is_extension and isinstance(result, np.ndarray):\n                result = type(block.values)._from_sequence(result.ravel(),\n                                                          dtype=block.values.dtype)\n            agg_block: Block = block.make_block(result)\n            agg_blocks.append(agg_block)\n\n    if len(agg_blocks) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return agg_blocks, mgr_locs",
            "import_list": [
                "from pandas.core.dtypes.common import not_na"
            ]
        }
    ]
}