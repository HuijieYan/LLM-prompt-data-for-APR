{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> Tuple[List[Block], Index]:\n        # Retrieve data to aggregate\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n\n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n\n        def __get_result(value, data_obj, block, idx):\n            try:\n                result, _ = self.grouper.aggregate(value, how, axis=1, min_count=min_count)\n            except NotImplementedError:\n                return None\n            agg_block: Block = block.make_block(result)\n            new_items.append(idx)\n            agg_blocks.append(agg_block)\n            return result\n\n        no_result = object()\n        for locs, block in data.items_iter(return_block=True, return_indexer=True):\n            # Avoid inheriting result from earlier in the loop\n            result = no_result\n            result = None\n            result = __get_result(block.values, self.obj[block.items[locs]], block, locs)\n            if result is None and alt is not None:\n                # Assume we can downcast the results to float64\n                alt_result = __get_result(block.values, self.obj[block.items[locs]], block, locs)\n                if alt_result is not None:\n                    result = alt_result",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.internals.blocks import Block, ExtensionBlock, FloatBlock",
                "from pandas.core.internals.managers import BlockManager",
                "from pandas.core.indexes.base import Index",
                "from pandas.core.groupby.groupby import DataError"
            ]
        }
    ]
}