{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n    default_object_dtypes = object_dtype.default_dtypes\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[BlockPlacement] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.array_data\n        tp = block.values.dtype\n\n        if alt is None or block.is_extension or not pd.api.types.is_object_dtype(tp) or tp in default_object_dtypes:\n            mask = check_not_na(block.values, block.mgr_locs.as_array)\n            if mask.any():\n                result, _ = self.grouper.aggregate(\n                    block.values, mask, how, axis=1, min_count=min_count,\n                )\n            else:\n                deleted_items.append(block.mgr_locs.as_array)\n        else:\n            split_array = empties(len(locs), np.ndarray)\n            split_groups = defaultdict(list)\n\n            for idx, value in enumerate(block.values):\n                name = self.obj.index[loc]\n                col_data = self.obj._get_subobject(name)\n    \n                if maybe_downcast_numeric(value).dtype in default_object_dtypes:\n                    split_array[idx] = value\n                    split_groups[self.grouper.group_info[idx]].append(idx)\n                else:\n                    try:\n                        split_result = alt(col_data, self.grouper.group_info, component, axis=self.axis)\n                    except:\n                        result = pd.np.nan\n                    else:\n                        agg_blocks.append(compiled_binops.convert_and_unstack_result(col_data, split_result, self.grouper.group_info, axis=self.axis, alt=composition))",
            "import_list": []
        }
    ]
}