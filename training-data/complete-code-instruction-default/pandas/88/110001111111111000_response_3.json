{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n\n    def _convert_by(by):\n        # Please ignore the body of this function\n\n        return by\n\n    def _add_margins(table: Union['Series', 'DataFrame'], data, values, rows, cols, aggfunc, observed=None, margins_name: str='All', fill_value=None):\n        # Please ignore the body of this function\n\n        return table\n\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: list[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        if not set(values).issubset(data.columns):\n            raise KeyError([val for val in values if val not in data])\n\n        to_filter = [i for i in keys + values if isinstance(data[i], Grouper) or data[i] in data]\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = [val for val in data if val not in keys]\n    \n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    \n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n        \n        for v in values:\n            if (\n                v in data\n                and isinstance(data[v], Series)\n                and isinstance(data[v].dtype, int)\n                and v in agged\n                and not isinstance(agged[v].dtype, int)\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n\n    if table.index.nlevels > 1:\n        index_names = agged.index.names[: len(index)]\n        to_unstack = [i for i in range(len(index), len(keys)) \n                      if agged.index.names[i] is None or agged.index.names[i] in index_names]\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        for axis in [0, 1]:\n            index_or_columns = getattr(table, \"index\" if axis == 0 else \"columns\")\n            if index_or_columns.nlevels > 1:\n                mover = MultiIndex.from_arrays(\n                    cartesian_product(index_or_columns.levels), \n                    names=index_or_columns.names\n                )\n                table = table.reindex(mover, axis=axis)\n        \n        if isinstance(table, ABCDataFrame):\n            table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    table = table[values[0]] if values_passed and not values_multi and not table.empty and table.columns.nlevels > 1 else table\n    table = table.T if len(index) == 0 and len(columns) > 0 else table\n    table = table.dropna(how=\"all\", axis=1) if isinstance(table, ABCDataFrame) and dropna else table\n\n    return table",
            "import_list": [
                "from pandas.api.types import is_list_like",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.generic import ABCDataFrame",
                "from pandas.core.indexing import Grouper",
                "from pandas.core.series import Series",
                "from pandas.core.reshape.concat import concat",
                "from pandas.core.reshape.pivot import maybe_downcast_to_dtype",
                "from pandas.core.reshape.util import cartesian_product",
                "from pandas.core.algorithms import MultiIndex"
            ]
        }
    ]
}