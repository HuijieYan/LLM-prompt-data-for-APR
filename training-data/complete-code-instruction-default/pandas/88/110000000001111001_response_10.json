{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[pd.DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pd.pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return pd.concat(pieces, keys=keys, axis=1)\n\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\"Input 'data' must be of type pd.DataFrame\")\n\n    if values is not None and not isinstance(values, (str, list)):\n        raise TypeError(\"Input 'values' must be a string or a list of strings\")\n\n    if not isinstance(index, (str, list)) or not isinstance(columns, (str, list)):\n        raise TypeError(\"Input 'index' and 'columns' must be strings or lists of strings\")\n\n    keys = index + columns\n\n    if values is not None:\n        if isinstance(values, list):\n            values_multi = True\n        else:\n            values_multi = False\n            values = [values]\n\n        for i in values:\n            if i not in data.columns:\n                raise KeyError(i)\n\n        to_filter = [x for x in keys + values if isinstance(x, str) and x in data.columns]\n        data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            if key in values:\n                values.remove(key)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n\n    if dropna and not agged.empty:\n        agged = agged.dropna(how=\"all\")\n\n        for v in values:\n            if isinstance(data[v], pd.Series) and data[v].dtype == 'int' and v in agged and str(agged[v].dtype) != 'int':\n                agged[v] = agged[v].astype(data[v].dtype)\n\n    table = agged\n\n    if table.index.nlevels > 1:\n        index_names = agged.index.names[: len(index)]\n        to_unstack = [i for i in range(len(index), len(keys)) if pd.isna(agged.index.names[i]) or agged.index.names[i] in index_names]\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = pd.MultiIndex.from_product(table.index.levels, names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = pd.MultiIndex.from_product(table.columns.levels, names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, pd.DataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    if values_multi:\n        table = table[values[0]]\n\n    if not index and columns:\n        table = table.T\n\n    if isinstance(table, pd.DataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "import pandas as pd"
            ]
        }
    ]
}