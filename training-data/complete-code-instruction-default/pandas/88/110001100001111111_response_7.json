{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data: pd.DataFrame, values: Optional[str] = None, index: Optional[str] = None, columns: Optional[str] = None, aggfunc: Union[str, List[str]] = 'mean', fill_value: Optional[int] = None, margins: bool = False, dropna: bool = True, margins_name: str = 'All', observed: bool = False) -> pd.DataFrame:\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[pd.DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index if isinstance(index, list) else [index]\n    if columns:\n        keys += columns if isinstance(columns, list) else [columns]\n\n    values_passed = values is not None\n    if values_passed:\n        if isinstance(values, list):\n            values_multi = True\n        else:\n            values_multi = False\n\n        for i in [values] if not values_multi else values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + [values] if not values_multi else keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n    if table.index.nlevels > 1:\n        index_names = agged.index.names[: len(keys)]\n        to_unstack = [i if name is None or name in index_names else name for i, name in enumerate(agged.index.names) if i >= len(keys)]\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        for axis in [0, 1]:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.index.levels if axis == 0 else table.columns.levels), names=table.index.names if axis == 0 else table.columns.names\n            )\n            table = table.reindex(m, axis=axis)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    if values_passed and not values_multi and not table.empty and table.columns.nlevels > 1:\n        table = table[values]\n\n    if len(keys) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from pandas.core.reshape.concat import concat",
                "from pandas.core.generic import ABCDataFrame",
                "from pandas.core.indexes.api import MultiIndex",
                "from pandas.core.dtypes.common import is_integer_dtype",
                "from pandas.core.reshape.pivot import Grouper",
                "from pandas.core.reshape.pivot import _shared_docs",
                "from pandas.core.reshape.pivot import _convert_by",
                "from pandas.core.reshape.pivot import _add_margins",
                "from pandas.core.dtypes.cast import maybe_downcast_to_dtype",
                "from pandas.core.arrays.cartesian import cartesian_product",
                "import pandas as pd",
                "from typing import List, Union, TYPE_CHECKING, Optional"
            ]
        }
    ]
}