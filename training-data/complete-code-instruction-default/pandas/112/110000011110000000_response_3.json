{
    "pandas": [
        {
            "bugID": 112,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n    self,\n    target: Union[pd.Interval, pd.Int64Index],\n    method: Optional[str] = None,\n    limit: Optional[int] = None,\n    tolerance: Optional[Any] = None,\n) -> Tuple[np.ndarray, Optional[IntervalIndex]]:\n    self._check_method(method)\n\n    if self.is_overlapping:\n        msg = (\n            \"cannot handle overlapping indices; use \"\n            \"IntervalIndex.get_indexer_non_unique\"\n        )\n        raise ValueError(msg)\n\n    target = self._ensure_index(target)\n\n    if isinstance(target, pd.Int64Index):\n        target_as_index = self._maybe_convert_i8(target)\n        indexer = self._engine.get_indexer(target_as_index.values)\n    else:\n        target_class = target.__class__\n        if target_class == pd.Interval:\n            target_as_index = IntervalIndex.from_intervals([target])\n            indexer = self.get_loc(target)\n        elif is_interval_or_categorical_dtype(target):\n            target_as_index = ensure_index(target)\n            indexer = _get_indexer_non_unique(target_as_index, self, kind=\"legacy\")\n        elif is_scalar(target):\n            indexer = self._get_indexer_for_scalar(target)\n        else:\n            indexer = self._get_indexer_for_non_scalar(target)\n\n    return ensure_platform_int(indexer)",
            "import_list": []
        }
    ]
}