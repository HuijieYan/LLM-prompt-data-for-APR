{
    "pandas": [
        {
            "bugID": 112,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(self, target: AnyArrayLike, method: Optional[str] = None, limit: Optional[int] = None, tolerance: Optional[Any] = None) -> np.ndarray:\n        # Check if target is of CategoricalIndex made from IntervalIndex\n        if isinstance(target, pd.CategoricalIndex) and isinstance(target.dtype, CategoricalDtype) and isinstance(target.dtype.categories, IntervalIndex):\n            # Convert target to IntervalIndex\n            target_as_interval = target.dtype.categories\n            # Perform indexing operation for IntervalIndex\n            indexer = super(IntervalIndexFixed, self).get_indexer(target_as_interval, method, limit, tolerance)\n            return indexer\n        else:\n            # For other cases, continue with the original logic\n            return super(IntervalIndexFixed, self).get_indexer(target, method, limit, tolerance)",
            "import_list": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas._libs.interval import IntervalIndex",
                "from pandas.api.types import CategoricalDtype"
            ]
        }
    ]
}