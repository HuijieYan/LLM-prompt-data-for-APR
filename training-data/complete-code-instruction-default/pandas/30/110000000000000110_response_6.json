{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if new_data.dtype == \"object\":\n        if len(data) > 0:\n            elements_are_numeric = all(pd.api.types.is_numeric(x) for x in data)\n            if elements_are_numeric:\n                new_data = pd.to_datetime(data, unit=\"s\", origin=\"unix\")\n            else:\n                # in the case of non-numeric data, keep it as is\n                pass\n\n    date_units = (self.date_unit,) if self.date_unit else (\"s\", \"ms\", \"us\", \"ns\")\n    for date_unit in date_units:\n        try:\n            new_data = pd.to_datetime(new_data, errors=\"raise\", format=None, unit=date_unit, infer_datetime_format=False)\n        except (ValueError, OverflowError):\n            continue\n\n        all_elements_are_datetime = all(pd.api.types.is_datetime64_any_dtype(x) for x in new_data)\n        if all_elements_are_datetime:\n            return new_data, True\n\n    return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_numeric_dtype, is_datetime64_dtype"
            ]
        }
    ]
}