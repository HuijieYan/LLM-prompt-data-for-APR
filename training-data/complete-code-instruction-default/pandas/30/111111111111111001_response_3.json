{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        if not len(data):\n            return data, False\n\n        if not should_convert_dtype(data.dtype):\n            return data, False\n\n        # Skip conversion if boolean\n        if data.dtype == 'bool':\n            return data, False\n\n        # ignore numbers that are out of range\n        if issubclass(data.dtype.type, np.number):\n            in_range = (\n                isna(data._values)\n                | (data > self.min_stamp)\n                | (data._values == iNaT)\n            )\n            if not in_range.all():\n                return data, False\n\n        try:\n            new_data = to_datetime(data, errors=\"raise\", unit=self.date_unit)\n        except (ValueError, TypeError, OverflowError):\n            return data, False\n\n        return new_data, True",
            "import_list": [
                "import numpy as np",
                "from pandas.errors import UnsupportedFunctionCall",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.missing import notna, isna",
                "from pandas._libs.missing import iNaT",
                "from pandas.core.tools.timedeltas import to_timedelta, should_convert",
                "from pandas.core.tools.datetimes import to_datetime, should_convert_dtype, validate_all_hashable"
            ]
        }
    ]
}