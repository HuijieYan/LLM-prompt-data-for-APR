{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data, min_stamp, date_unit):\n        \"\"\"\n\n        Try to parse a ndarray like into a date column.\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n\n        \"\"\"\n\n        if is_datetime64_any_dtype(data) or is_scalar(data):\n            return data, True\n\n        # convert to datetime\n        try:\n            data = pd.to_datetime(data, errors='coerce')\n            in_range = ((data >= min_stamp) | (data == NaT) | (data == iNaT))\n            if not in_range.all():\n                return pd.Series(data), False\n        except OutOfBoundsDatetime:\n            return pd.Series(data), False\n        except (TypeError, ValueError, OverflowError):\n            # conversion to int64\n            try:\n                data = data.astype('int64')\n                data = pd.to_datetime(data, errors='coerce', unit=date_unit)\n                return data, True\n            except (ValueError, OverflowError):\n                pass\n\n        return pd.Series(data), False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas import Series, read_json",
                "from pandas._libs.tslibs.nattype import iNaT",
                "from pandas._libs.tslibs.np_datetime import NaT",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype, is_scalar",
                "from pandas.errors import OutOfBoundsDatetime",
                "from pandas.util._decorators import Appender"
            ]
        }
    ]
}