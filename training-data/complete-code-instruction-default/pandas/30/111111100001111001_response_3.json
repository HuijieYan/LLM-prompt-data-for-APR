{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        if not len(data):\n            return data, False\n\n        new_data = data\n        if new_data.dtype == \"object\":\n            try:\n                new_data = new_data[~pd.isnull(data)].astype(\"int64\")\n            except (TypeError, ValueError):\n                pass\n\n        timestamp = new_data\n        if is_datetime_or_timedelta_dtype(timestamp) or is_datetime_or_timedelta_dtype(data):\n            return new_data, True\n        elif not isinstance(data, (DatetimeArray, NaTType)):\n            try:\n                date_unit = self.date_unit if self.date_unit else 'ns'\n                new_data = new_data.apply(lambda x: pd.to_datetime(x, unit=date_unit))\n                return new_data, True\n            except (TypeError, ValueError):\n                pass\n        return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas.core.dtypes.common import is_datetime_or_timedelta_dtype",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas._libs.tslibs.nattype import NaTType"
            ]
        }
    ]
}