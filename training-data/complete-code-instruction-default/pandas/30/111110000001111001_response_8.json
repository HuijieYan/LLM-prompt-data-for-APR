{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        if isinstance(data, pd.RangeIndex):\n            new_data = pd.Series(data)\n        else:\n            new_data = data\n\n        if isinstance(new_data, pd.Series):\n            in_range = (\n                (new_data > self.min_stamp) | (new_data == pd.NaT)\n            )\n            if not in_range.all():\n                return data, False\n\n            new_data = pd.to_datetime(new_data, errors=\"coerce\")\n            return new_data, True\n\n        elif isinstance(new_data, np.ndarray):\n            if new_data.dtype == \"object\":\n                try:\n                    new_data = new_data.astype(\"int64\")\n                except (TypeError, ValueError, OverflowError):\n                    pass\n\n            in_range = (\n                (new_data > self.min_stamp) | (new_data == pd.NaT)\n            )\n            if not in_range.all():\n                return data, False\n\n            date_units = (self.date_unit,) if self.date_unit else ('s', 'ms', 'us', 'ns')\n            for date_unit in date_units:\n                try:\n                    new_data = pd.to_datetime(new_data, errors=\"raise\", unit=date_unit)\n                except (ValueError, OverflowError):\n                    continue\n                return new_data, True\n            return data, False\n\n        else:\n            return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}