{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        # no conversion on empty\n        if not len(data):\n            return data, False\n\n        new_data = data\n        if new_data.dtype == \"object\":\n            try:\n                new_data = data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                pass\n\n        # ignore numbers that are out of range\n        if is_dtype(data.dtype):\n            if isna(new_data).any():\n                return data, False\n\n            new_data = algorithms.take_1d(new_data, None)\n            try:\n                result = self._check_for_coercible_errors(new_data)\n            except OverflowError:\n                result = False\n            return new_data, result\n\n        date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n        for date_unit in date_units:\n            try:\n                new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n                return new_data, True\n            except (ValueError, OverflowError):\n                continue\n        return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas.core.dtypes.common import is_datetime_or_timedelta_dtype as is_dtype",
                "from pandas.core.dtypes.dtypes import CategoricalDtype",
                "from pandas.core.tools.datetimes import to_datetime",
                "from pandas.core.arrays import isna",
                "from pandas.core.dtypes.dtypes import DatetimeTZDtype",
                "from pandas.compat.numpy import np_array_datetime64_compat",
                "from pandas.core.dtypes.common import is_string_dtype",
                "from pandas._libs.tslibs.nattype import NaTType",
                "from pandas.core import algorithms",
                "from typing import List"
            ]
        }
    ]
}