{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        if not len(data):\n            return data, False\n        if is_scalar(data) and not is_datetimelike(data):\n            return data, False\n\n        if is_object_dtype(data):\n            try:\n                new_data = data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                new_data = data\n        else:\n            new_data = data\n\n        if is_scalar(new_data) and new_data == -1:\n            return data, False\n\n        if isinstance(new_data, (DatetimeArray, pd.Series, np.ndarray)):\n            if new_data.dtype.kind in [\"O\", \"m\"]:\n                return data, False\n\n        if is_datetimelike(data):\n            return data, True\n\n        if issubclass(data.dtype.type, np.number):\n            in_range = (\n                isna(new_data._values)\n                | (new_data > self.min_stamp)\n                | (new_data._values == NaT)\n            )\n            if not in_range.all():\n                return data, False\n\n        date_units = [self.date_unit] if self.date_unit else self._STAMP_UNITS\n\n        new_data = pd.to_datetime(new_data, errors=\"coerce\", unit=date_units)\n        return new_data, True",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas._libs.tslibs.nattype import NaT",
                "from pandas.core.dtypes.common import is_datetimelike, is_scalar, is_object_dtype",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas.core.dtypes.missing import isna",
                "from pandas.core.tools.datetimes import to_datetime"
            ]
        }
    ]
}