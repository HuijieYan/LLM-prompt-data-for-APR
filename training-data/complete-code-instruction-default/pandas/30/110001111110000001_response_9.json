{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    dtype = data.dtype\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    if dtype == \"object\":\n        try:\n            new_data = data.astype(\"int64\")\n            data = new_data\n        except (TypeError, ValueError, OverflowError):\n            pass\n    elif is_datetime64_any_dtype(data):\n        # already in datetime\n        return data, True\n    elif np.issubdtype(dtype, np.bool_):\n        # handle boolean values\n        return data, False\n\n    # ignore numbers that are out of range\n    if issubclass(dtype.type, np.number):\n        in_range = (\n            data.isna()\n            | (data > self.min_stamp)\n            | (data == pd.NaT)\n        )\n        if not in_range.all():\n            return data, False\n\n    date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n    for date_unit in date_units:\n        try:\n            new_data = pd.to_datetime(data, errors=\"raise\", unit=date_unit)\n            return new_data, True\n        except (ValueError, OverflowError):\n            continue\n    return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_datetime64_any_dtype"
            ]
        }
    ]
}