{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if is_integer_dtype(data) or is_float_dtype(data):\n        try:\n            new_data = to_datetime(data, errors=\"coerce\", unit=self.date_unit)\n        except (ValueError, OverflowError):\n            pass\n    elif is_datetime64_dtype(data) or is_timedelta64_dtype(data):\n        return data, True\n\n    if is_datetime64_dtype(new_data) or is_timedelta64_dtype(new_data):\n        in_range = (\n            isna(new_data._data)\n            | (new_data > self.min_stamp)\n            | (new_data._data == iNaT)\n        )\n        if in_range.all():\n            return new_data, True\n        else:\n            return data, False\n    else:\n        return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas.core.dtypes.common import is_integer_dtype, is_float_dtype, is_datetime64_dtype, is_timedelta64_dtype",
                "from pandas.core.dtypes.missing import isna",
                "from pandas._libs.tslibs.nattype import iNaT",
                "from pandas.core.tools.datetimes import to_datetime"
            ]
        }
    ]
}