{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        if not len(data):\n            return data, False\n\n        new_data = data\n        if new_data.dtype == \"object\":\n            try:\n                new_data = data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                pass\n\n        if _get_dtype(new_data) in [np.dtype('datetime64[ns]'), np.dtype('datetime64[us]'),\n                                       np.dtype('datetime64[ms]'), np.dtype('datetime64[s]')]:\n            return new_data, True\n\n        in_range = (isna(new_data._values) |\n                    (new_data > self.min_stamp) |\n                    (new_data._values == iNaT))\n        if not in_range.all():\n            return data, False\n\n        try:\n            new_data = to_datetime(new_data, errors=\"raise\", unit=self.date_unit)\n        except (ValueError, OverflowError, TypeError):\n            return data, False\n\n        return new_data, True",
            "import_list": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas.core.algorithms import isin, isna",
                "from pandas.core.dtypes.common import _get_dtype",
                "from pandas.core.indexes.range import RangeIndex",
                "from pandas.core.missing import iNaT",
                "from pandas.tseries.tools import to_datetime"
            ]
        }
    ]
}