{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        import numpy as np\n        from pandas.core.dtypes.dtypes import DatetimeTZDtype\n        from pandas.core.dtypes.common import is_datetime64_any_dtype, is_datetimetz, is_extension_array_dtype, is_object_dtype, is_integer, is_float\n        from pandas.core.missing import isna\n        from pandas.core.tools.datetimes import to_datetime\n        from pandas.compat.numpy import datetime64, iNaT, long\n\n        # no conversion on empty\n        if not len(data):\n            return data, False\n\n        # coerce numeric to datetimes\n        if is_object_dtype(data) and not is_datetimetz(data) and not isinstance(data.dtype, DatetimeTZDtype):\n            # If data is object and has strings (e.g. formatted dates), try to avoid a cast to\n            # strings and only parse the data, if it's not a timestamp/iso format\n            data = to_datetime(data, errors=\"ignore\")\n            if is_datetime64_any_dtype(data.dtype):\n                return data, True\n\n            if not is_object_dtype(data):\n                return data, False\n\n            data = data.astype('str')\n\n        new_data = data\n        unit = self.date_unit\n        if is_object_dtype(new_data):\n            # Option 1: allow coercion to integer of objects\n            # e.g. epoch timestamps\n            if is_float(new_data).all() or is_integer(new_data).all():\n                new_data = new_data.astype('int64', copy=False)\n\n            # ignore numbers that are out of range\n            if is_numeric_exact_dtype(new_data.dtype):\n                in_range = (\n                    isna(new_data._values)\n                    | (new_data > self.min_stamp)\n                    | (new_data._values == iNaT)\n                )\n                if not in_range.all():\n                    return data, False\n\n            if is_object_dtype(new_data):\n                # option 3: strings and object dtype\n                # since the date_unit is not specified, try all units to coerce\n                date_units = (unit,) if unit else self._STAMP_UNITS\n                for u in date_units:\n                    try:\n                        new_data = to_datetime(new_data, errors=\"ignore\", unit=u)\n                        return new_data, True\n                    except (ValueError, OverflowError):\n                        pass\n                return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas.core.dtypes.dtypes import DatetimeTZDtype",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype, is_datetimetz, is_extension_array_dtype, is_object_dtype, is_integer, is_float",
                "from pandas.core.missing import isna",
                "from pandas.core.tools.datetimes import to_datetime",
                "from pandas.compat.numpy import datetime64, iNaT, long"
            ]
        }
    ]
}