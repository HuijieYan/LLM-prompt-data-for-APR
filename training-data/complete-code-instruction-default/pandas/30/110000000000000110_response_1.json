{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if new_data.dtype == \"object\":\n        try:\n            new_data = data.astype(\"int64\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    # ignore numbers that are out of range\n    if is_numeric_dtype(new_data.dtype) or isna(new_data._values):\n        in_range = ((new_data > DatetimeArray._min_stamp) |\n                    (new_data._values == iNaT))\n        if not in_range.all():\n            return data, False\n\n    date_unit = self.date_unit if self.date_unit else DatetimeArray._STAMP_UNITS[0]\n    try:\n        new_data = _time_to_datetime(new_data, errors=\"raise\", box=False, unit=date_unit)\n        mask = None\n    except (ValueError, OverflowError):\n        mask = True\n\n    return new_data if mask is None else data",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.dtypes.common import is_numeric_dtype",
                "from pandas.core.dtypes.missing import isna",
                "from pandas.core.array_algos.tdatetime import iNaT",
                "from pandas.core.arrays.datetimes import DatetimeArray,_time_to_datetime",
                "from pandas.core.tools.timedeltas import _to_datetime_with_unit as to_datetime"
            ]
        }
    ]
}