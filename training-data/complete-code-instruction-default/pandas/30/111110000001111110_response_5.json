{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n    \n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        # no conversion on empty\n        if not len(data):\n            return data, False\n\n        if isinstance(data, DatetimeIndex):\n            return data, True\n\n        new_data = data\n        if new_data.dtype == \"object\":\n            try:\n                new_data = maybe_box_datetimelike(new_data)\n            except (ValueError, TypeError, OverflowError) as e:\n                pass\n\n        if not isNewDataType and is_datetime(new_data):\n            return new_data, True\n        else:\n            return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas import isna, iNaT",
                "from pandas.api.types import is_datetime64_any_dtype as is_datetime",
                "from pandas._libs.tslibs.timestamps import Timestamp, NaT",
                "from pandas.core.arrays.timedeltas import Timedelta, NaTType",
                "from pandas._libs.tslibs.nattype import NaTTypeType",
                "from pandas.core.common import maybe_box_datetimelike",
                "from pandas.core.dtypes.generic import ABCDatetimeArray",
                "from pandas._libs.tslibs.conversion import get_datetimelike_name",
                "from pandas.core.indexers import check_setitem_copy",
                "from pandas.core.indexes.datetimes import DatetimeIndex",
                "from datetime import datetime"
            ]
        }
    ]
}