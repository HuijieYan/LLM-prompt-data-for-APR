{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    if isinstance(data.columns, MultiIndex):\n        result = data\n        for col_loc in clocs[::-1]:  # Iterate over clocs in reverse order\n            result = result.unstack(col_loc, fill_value=fill_value)\n        return result\n\n    index = data.index\n\n    levels = [index.levels[index._get_level_number(col_loc)] for col_loc in clocs]\n    codes = [index.codes[index._get_level_number(col_loc)] for col_loc in clocs]\n    names = [index.names[index._get_level_number(col_loc)] for col_loc in clocs]\n\n    shape = [len(x) for x in levels]\n    group_index = get_group_index(codes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, codes, xnull=False)\n\n    # Prepare dummy index\n    dummy_index_levels = index.levels[:]\n    for idx, level in zip(clocs, levels):\n        dummy_index_levels[index._get_level_number(idx)] = obs_ids\n\n    dummy_index = MultiIndex(\n        levels=dummy_index_levels,\n        codes=index.codes[:len(dummy_index_levels)],\n        names=index.names[:len(dummy_index_levels)],\n        verify_integrity=False,\n    )\n\n    # Prepare dummy DataFrame\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    # Unstack the dummy DataFrame\n    unstacked = dummy.unstack(obs_ids, fill_value=fill_value)\n\n    # Build new MultiIndex for columns\n    new_levels = [unstacked.columns.names] + levels\n    new_names = [index.names[-1]] + names\n    new_codes = [index.codes[-1]]\n\n    for rec in recons_codes:\n        new_codes.append(rec.take(unstacked.columns.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}