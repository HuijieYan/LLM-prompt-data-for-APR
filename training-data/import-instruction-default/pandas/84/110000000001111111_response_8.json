{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    # Correctly identify the level numbers for clocs\n    cloc_numbers = [index.get_level_number(i) if i in index.names else i for i in clocs]\n\n    # For hierarchical columns, unstack the data and return\n    if len(cloc_numbers) > 1:\n        unstacked = data.unstack(cloc_numbers)\n        return unstacked\n\n    # Handle the group index and compressing\n    shape = [len(index.levels[i]) for i in cloc_numbers]\n    group_index = get_group_index([index.codes[i] for i in cloc_numbers], shape, sort=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, [index.codes[i] for i in cloc_numbers], xnull=False)\n\n    # Create the dummy index for unstacking\n    dummy_index_levels = [index.levels[i] for i in range(index.nlevels) if i not in cloc_numbers] + [obs_ids]\n    dummy_index_codes = [index.codes[i] for i in range(index.nlevels) if i not in cloc_numbers] + [comp_ids]\n\n    dummy_index = MultiIndex(levels=dummy_index_levels, codes=dummy_index_codes, verify_integrity=False)\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(-1, fill_value=fill_value)\n\n        new_levels = list(data.index.levels[i] for i in cloc_numbers) + [obs_ids]\n        new_names = list(data.index.names[i] for i in cloc_numbers) + [\"__placeholder__\"]\n        new_codes = recons_codes\n\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(-1, fill_value=fill_value)\n\n        unstcols = unstacked.index if isinstance(unstacked, Series) else unstacked.columns\n        new_levels = [pd.Index(unstcols.levels[0])] + list(data.index.levels[i] for i in cloc_numbers)\n        new_names = [unstcols.names[0]] + list(data.index.names[i] for i in cloc_numbers)\n        new_codes = [unstcols.codes[0]] + recons_codes\n\n    new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}