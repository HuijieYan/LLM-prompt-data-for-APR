{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    \n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [i if isinstance(i, tuple) else (i,) for i in clocs]\n    \n    cnames = index.names\n    cidx = [index._get_level_number(i) for i in clocs]\n    \n    ridx = [i for i in range(len(index.names)) if i not in cidx]\n    rnames = [cnames[i] for i in ridx]\n    ridx = [index._get_level_number(i) for i in rnames]\n\n    shape = [len(index.levels[i]) for i in cidx]\n    group_index = get_group_index(index.codes, shape, sort=False, xnull=False)\n\n    compressed, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(compressed, obs_ids, shape, index.codes, xnull=False)\n\n    if not ridx:\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        rlevels = [index.levels[i] for i in ridx]\n        rcodes = [index.codes[i] for i in ridx]\n        dummy_index = MultiIndex(levels=rlevels + [obs_ids],\n                                 codes=rcodes + [compressed],\n                                 names=rnames + [\"__placeholder__\"],\n                                 verify_integrity=False)\n\n    if isinstance(data, Series):\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = [index.levels[i] for i in cidx]\n        new_names = [cnames[i] for i in cidx]\n        new_codes = recons_codes\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[-1]] + [index.levels[i] for i in cidx]\n        new_names = [unstacked.columns.names[-1]] + [cnames[i] for i in cidx]\n        new_codes = [unstcols.codes[-1]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}