{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    \n    index = data.index\n    \n    levels = []\n    codes = []\n    names = []\n    \n    for cloc in clocs:\n        level_number = index._get_level_number(cloc)\n        \n        levels.append(index.levels[level_number])\n        codes.append(index.codes[level_number])\n        names.append(index.names[level_number])\n    \n    rlocs = [i for i in range(index.nlevels) if i not in [index._get_level_number(cloc) for cloc in clocs]]\n\n    shape = [len(x) for x in levels]\n    group_index = get_group_index(codes, shape, sort=False, xnull=False)\n    \n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, codes, xnull=False)\n    \n    recons_names = names + ['__placeholder__']\n    \n    dummy_index = MultiIndex(\n        levels=levels + [obs_ids],\n        codes=codes + [comp_ids],\n        names=recons_names,\n        verify_integrity=False\n    )\n    \n    dummy = data.copy()\n    dummy.index = dummy_index\n    \n    unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n    \n    new_levels = [x for x in dummy.index.levels[:-1]] + [obs_ids]\n    new_codes = list(recons_codes)\n    new_names = list(recons_names)\n    \n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n    \n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n    \n    return unstacked",
            "import_list": []
        }
    ]
}