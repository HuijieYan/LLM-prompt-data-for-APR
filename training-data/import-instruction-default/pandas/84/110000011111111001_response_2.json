{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    if isinstance(clocs, tuple):\n        clocs = list(clocs)\n\n    shape = [len(index.levels[i]) for i in clocs]\n\n    if isinstance(data.columns, MultiIndex):\n        result = data\n        for i in range(len(clocs)):\n            val = clocs[i]\n            result = result.unstack(val, fill_value=fill_value)\n            clocs = [v if i > v else v - 1 for v in clocs]\n\n        return result\n    else:\n        group_index = get_group_index(index.codes, shape, sort=False, xnull=False)\n\n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, index.codes, xnull=False)\n\n        # Create the new MultiIndex for the unstacked DataFrame\n        dummy_index_levels = [index.levels[i] for i in range(len(index.levels)) if i not in clocs] + [obs_ids]\n        dummy_index_codes = [index.codes[i] for i in range(len(index.codes)) if i not in clocs] + [comp_ids]\n        dummy_index_names = [index.names[i] for i in range(len(index.names)) if i not in clocs] + [\"__placeholder__\"]\n\n        dummy_index = MultiIndex(levels=dummy_index_levels, codes=dummy_index_codes, names=dummy_index_names, verify_integrity=False)\n\n        # Create a copy of the DataFrame with the new MultiIndex and unstack the \"__placeholder__\" level\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n        # Handle column names and levels based on the type of unstacked object\n        if isinstance(unstacked, Series):\n            new_levels = [index.levels[clocs[0]]]\n            new_names = [index.names[clocs[0]]]  \n            new_codes = [recons_codes[clocs[0]]]\n        else:\n            unstcols = unstacked.columns\n            new_levels = [unstcols.levels[0]] + [index.levels[i] for i in clocs]\n            new_names = [data.columns.name] + [index.names[i] for i in clocs]\n            new_codes = [unstcols.codes[0]]\n            for rec in recons_codes:\n                new_codes.append(rec.take(unstcols.codes[-1]))\n\n        new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n\n        if isinstance(unstacked, Series):\n            unstacked.index = new_columns\n        else:\n            unstacked.columns = new_columns\n\n        return unstacked",
            "import_list": []
        }
    ]
}