{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    \n    # NOTE: This doesn't deal with hierarchical columns yet\n    \n    index = data.index\n    \n    if isinstance(index, MultiIndex):\n        clocs = [(c, index._get_level_number(c)) for c in clocs]\n    else:\n        clocs = [(c, c) for c in clocs]\n    \n    rlocs = [i for i in range(index.nlevels) if i not in [loc for i, loc in clocs]]\n    \n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(data.index)\n    else:\n        obs_ids = Index(compress_group_index(get_group_index([index.codes[loc] for c, loc in clocs], sort=False, xnull=False),\n                                             sort=False)[1], name=\"__placeholder__\")\n        \n        dummy_index = MultiIndex(\n            levels=[index.levels[loc] for c, loc in clocs] + [obs_ids],\n            codes=[index.codes[loc] for c, loc in clocs] + [get_compressed_ids(compress_group_index(get_group_index([index.codes[loc] for c, loc in clocs], sort=False, xnull=False),\n                                           sort=False), [len(l) for l in [index.levels[loc] for c, loc in clocs]], xnull=False)[1]],\n            names=[index.names[loc] for c, loc in clocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n    \n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = [index.levels[loc] for c, loc in clocs]\n        new_names = [index.names[loc] for c, loc in clocs]\n        new_codes = [recons_codes for _, recons_codes in recons_codes]\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + [index.levels[loc] for c, loc in clocs]\n        new_names = [unstcols.names[0]] + [index.names[loc] for c, loc in clocs]\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}