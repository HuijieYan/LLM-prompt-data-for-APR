{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data: DataFrame,\n    values: Union[str, List[str], None] = None,\n    index: Union[str, List[str], None] = None,\n    columns: Union[str, List[str], None] = None,\n    aggfunc: Union[str, List[Callable], Dict[str, Union[str, List[str], Callable]]] = \"mean\",\n    fill_value: Union[int, str, float, None] = None,\n    margins: bool = False,\n    dropna: bool = True,\n    margins_name: str = \"All\",\n    observed: bool = False\n) -> DataFrame:\n\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n    \n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    if values is not None:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n    else:\n        values = data.columns\n        keys = keys if all(isinstance(k, Grouper) for k in keys) else [data[k] for k in keys]\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    \n    if isinstance(agged, ABCDataFrame): \n        agged = agged.replace({0: None})\n        agged = agged.dropna()\n\n        for v in values:\n            if v in data and is_integer_dtype(data[v]) and v in agged and not is_integer_dtype(agged[v]):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n\n    if table.index.nlevels > 1:\n        # If index_names are integers, determine whether the integers refer to the level position or name.\n        index_names = agged.index.names[: len(index)]  # type: ignore  # ignore flake8's preferred way for `MultiIndex.names`\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = table.unstack(to_unstack, dropna=False)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            table = table.reindex(cartesian_product(table.index.levels)).sort_values(by=list(range(table.index.nlevels)))\n        if table.columns.nlevels > 1:\n            table = table.reorder_levels([i for i in range(len(keys, len(keys) + len(values)))], axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast=\"infer\")\n\n    if margins:\n        data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value\n        )\n\n    if values_passed and not values_multi:\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    return table",
            "import_list": []
        }
    ]
}