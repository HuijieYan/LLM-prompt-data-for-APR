{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n    # Existing logic of the pivot_table function...\n\n    if table.ndim > 1 and table.columns.nlevels > 1:\n        table = table.sort_index(axis=1)\n\n        if fill_value is not None:\n            table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n        if margins:\n            if dropna:\n                data = data[data.notna().all(axis=1)]\n            table = _add_margins(\n                table,\n                data,\n                values,\n                rows=index,\n                cols=columns,\n                aggfunc=aggfunc,\n                observed=dropna,\n                margins_name=margins_name,\n                fill_value=fill_value,\n            )\n\n        # discard the top level\n        if values_passed and not values_multi and not table.empty and (table.columns.nlevels > 1):\n            table = table[values[0]]\n\n        if len(index) == 0 and len(columns) > 0:\n            table = table.T\n\n        # GH 15193 Make sure empty columns are removed if dropna=True\n        if dropna:\n            table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from pandas.core.frame import DataFrame",
                "from pandas.core.indexes.api import Index, MultiIndex",
                "from pandas.core.reshape.concat import concat",
                "from pandas.core.reshape.util import cartesian_product",
                "from pandas.core.dtypes.common import is_list_like",
                "from pandas.core.groupby import Grouper",
                "from pandas import MultiIndex",
                "import pandas._testing as tm"
            ]
        }
    ]
}