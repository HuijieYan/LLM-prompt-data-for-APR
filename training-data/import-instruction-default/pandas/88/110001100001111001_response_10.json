{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            grouped = data.groupby([index, columns], observed=observed)\n            agged = grouped.agg(func)\n            if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n                agged = agged.dropna(how=\"all\")\n\n                # coerce to floats if original values are ints and NaN values are dropped\n                for v in values:\n                    if (\n                        v in data\n                        and is_integer_dtype(data[v])\n                        and v in agged\n                        and not is_integer_dtype(agged[v])\n                    ):\n                        agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n            pieces.append(agged)\n            keys.append(getattr(func, \"__name__\", func))\n\n        result = concat(pieces, keys=keys, axis=1)\n    else:\n        grouped = data.groupby([index, columns], observed=observed)\n        agged = grouped.agg(aggfunc)\n        if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n            agged = agged.dropna(how=\"all\")\n\n            # coerce to floats if original values are ints and NaN values are dropped\n            for v in values:\n                if (\n                    v in data\n                    and is_integer_dtype(data[v])\n                    and v in agged\n                    and not is_integer_dtype(agged[v])\n                ):\n                    agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n        result = agged\n\n    # rest of the function remains unchanged\n    # ...\n    # ...\n\n    return result",
            "import_list": []
        }
    ]
}