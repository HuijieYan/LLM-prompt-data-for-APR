{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    from pandas.tseries.frequencies import to_offset\n    freq = to_offset(self.freq)\n\n    result, tz = axasi8, ax.tz\n    if not axasi8.flags[\"C_CONTIGUOUS\"]:\n        axasi8 = axasi8.copy()\n\n    axasi8 = axasi8.view(\"i8\")\n\n    unique, counts = axasi8.factorize()\n    uniques, idx, counts = np.unique(unique, return_inverse=True, return_counts=True)\n    values, bounds = generate_bins(unique, counts, self.closed)\n\n    has_nans = np.isnan(axasi8).any()\n    has_nans = ax.hasnans or has_nans\n\n    if has_nans:\n        mask = generate_bins_na(\n            unique, bounds, self.closed, is_monotonic=not axasi8.flags[\"F_CONTIGUOUS\"]\n        )\n\n        # flip\n        # GH27696\n        if axasi8.flags[\"F_CONTIGUOUS\"]:\n            mask = mask.reshape(mask.shape[::-1]).T\n        if len(mask) != len(uniques):\n            values, bounds = _na_filter_uniques(values, bounds, mask, uniques)\n\n    binner = PeriodArray(values, freq=freq).asfreq(freq, how=self.closed)\n\n    hmask = np.insert(mask, 0, True)\n\n    group_info = consolidated_loose_group(self.closed, binner, values, bounds, tz, hmask)\n\n    self.group_info = group_info\n\n    if freq.n == 1 and isinstance(axasi8, np.ndarray):\n        return _get_central_time_bins(\n            freq,\n            binner.freq,\n            axasi8,\n            group_info,\n            hmask,\n            ax,\n            ax.freq,\n            bins,\n            closed,\n        )\n\n    labels = PeriodIndex(binner.shift(1), freq=freq).asfreq(freq, how=self.label)\n    if freq.n == 1:\n        dist = binner[1] - binner[0]\n        assert dist == self.freq, (dist, self.freq)\n    labels.freq = freq\n\n    left_static = axasi8[0].view(\"datetime64[ns]\")\n\n    if self.closed == \"left\":\n        left_outer = binner.values\n    else:\n        left_outer = left_static\n\n    left_outer = left_outer.astype(\"i8\", casting=\"safe\", copy=False)\n    if left_outer.dtype != \"@m8[ns]\":\n        left_outer = left_outer.view(\"<M8[ns]\")\n\n    if self.closed == \"right\":\n        right_outer = (\n            binner.values.astype(\"i8\", casting=\"safe\", copy=False)\n            + 1\n        ).view(\"<M8[ns]\")\n    else:\n        right_outer = binner.shift(-1).values\n\n    return binner, group_info, labels",
            "import_list": [
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}