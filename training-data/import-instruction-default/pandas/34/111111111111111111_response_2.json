{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        first = ax[0].round(freq=self.freq)  # Round the first timestamp to the nearest frequency\n        last = ax[-1].round(freq=self.freq)  # Round the last timestamp to the nearest frequency\n        bin_indices = (last - first) // to_offset(self.freq) + 1  \n        if isinstance(self.freq, BaseOffset):  \n            offset = self.freq\n            closed, tbase, _ = apply_wraps(offset)\n            binner = date_range(start=first, periods=bin_indices, freq=self.freq, closed=closed, base=tbase, name=ax.name)\n        elif isinstance(self.freq, Tick):\n            # Get frequency properties \n            freq_base = get_min_dt64(self.freq.n)\n            binner = date_range(first, periods=bin_indices, freq=self.freq, name=ax.name)\n        else:\n            binner, bin_edges = self._adjust_bin_edges(first, last, ax_values)\n\n        # Retrieve bin indices\n        bins = lib.generate_bins_dt64(ax.asi8, binner.asi8, self.closed, has_nans=ax.hasnans)\n        if self.closed == 'right' and self.label == 'right':\n            labels = binner[1:]\n        elif self.label == 'right':\n            labels = binner[1:]\n        else:\n            labels = binner\n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n        \n        return binner, bins, labels",
            "import_list": [
                "from pandas._libs import lib",
                "from pandas._libs.tslibs import NaT, date_range",
                "from pandas.core.indexes.datetimes import DatetimeIndex",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.frequencies import BaseOffset",
                "from pandas.tseries.offsets import Tick",
                "from pandas.tseries.offsets import apply_wraps",
                "from pandas.tseries.offsets import cache_readonly",
                "from pandas.tseries.offsets import get_min_dt64",
                "from pandas.tseries.offsets import Tick",
                "from pandas.tseries.offsets import to_offset"
            ]
        }
    ]
}