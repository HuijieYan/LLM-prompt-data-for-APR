{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    # ... (existing code)\n\n    if is_datetime64_dtype(arr) and is_object_dtype(dtype):\n        return astype_nansafe(to_datetime(arr, errors='coerce').values, dtype, copy=copy)\n    elif is_datetime64_dtype(arr) and is_integer_dtype(dtype):\n        return arr.view(dtype)\n    elif is_timedelta64_dtype(arr) and is_object_dtype(dtype):\n        return astype_nansafe(to_timedelta(arr, errors='coerce').values, dtype, copy=copy)\n    elif is_timedelta64_dtype(arr) and is_integer_dtype(dtype):\n        return arr.view(dtype)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        if dtype == 'datetime64':\n            msg = f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\"\n        else:  # dtype == 'timedelta64'\n            msg = f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\"\n        raise ValueError(msg)\n\n    if is_object_dtype(arr):\n        if is_integer_dtype(dtype):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n    \n    return arr.astype(dtype, copy=copy)",
            "import_list": []
        }
    ]
}