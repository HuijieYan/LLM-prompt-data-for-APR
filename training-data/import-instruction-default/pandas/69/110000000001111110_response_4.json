{
    "pandas": [
        {
            "bugID": 69,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2110,
            "file_name": "pandas/core/indexing.py",
            "replace_code": "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require they keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    for ax, i in zip(self.obj.axes, key):\n        if not is_list_like(i):\n            i = [i]  # convert non-iterable items to iterable\n        if ax.is_numeric():\n            if not is_list_like(i):  # if the index is numeric and the key is not iterable\n                if not is_numeric_dtype(ax):\n                    raise ValueError(\n                        \"At based indexing on a non-numeric index \"\n                        \"can only have non-numeric indexers\"\n                    )\n                if not is_scalar(i):  # if the index is numeric and the key is not a scalar\n                    raise ValueError(\n                        \"At based indexing on a numeric \"\n                        \"index can only have numeric \"\n                        \"indexers\"\n                    )\n            else:\n                for val in i:\n                    if not is_numeric_dtype(ax) and is_scalar(val):  # if the index is not numeric but the key is a scalar\n                        raise ValueError(\n                            \"At based indexing on a non-numeric index \"\n                            \"can only have non-numeric indexers\"\n                        )\n                    if is_numeric_dtype(ax) and not is_scalar(val):  # if the index is numeric but the key is not a scalar\n                        raise ValueError(\n                            \"At based indexing on a numeric \"\n                            \"index can only have numeric \"\n                            \"indexers\"\n                        )\n        else:  # if the index is not numeric\n            if is_numeric_dtype(ax) and not is_numeric_dtype(i):\n                raise ValueError(\n                    \"At based indexing on a non-numeric index \"\n                    \"can only have non-numeric indexers\"\n                )\n\n    return key",
            "import_list": []
        }
    ]
}