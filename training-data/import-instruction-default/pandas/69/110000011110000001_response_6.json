{
    "pandas": [
        {
            "bugID": 69,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2110,
            "file_name": "pandas/core/indexing.py",
            "replace_code": "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require the keys to be the same type as the index. (so we don't fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    index_types = [is_float, is_integer]\n    key_type_check = [any(check(i) for check in index_types) for i in key]\n    axis_types = [is_numeric_dtype(ax) for ax in self.obj.axes]\n\n    for ax, i, is_numeric in zip(self.obj.axes, key, axis_types):\n        key_is_integer = is_integer(i)\n        if ax.is_integer():\n            if not key_is_integer:\n                raise ValueError(\n                    \"At based indexing on an integer index can only have integer indexers\"\n                )\n        else:\n            if key_is_integer and not is_numeric:\n                raise ValueError(\n                    \"At based indexing on a non-integer index can only have non-integer indexers\"\n                )\n            if not key_type_check:\n                raise ValueError(\n                    \"Indexers must be integers if index is non-numeric\"\n                )\n    return key",
            "import_list": []
        }
    ]
}