{
    "pandas": [
        {
            "bugID": 69,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2110,
            "file_name": "pandas/core/indexing.py",
            "replace_code": "def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        if is_setter:\n            return list(key)\n\n        axes = self.obj.axes\n        converted_key = []\n\n        for ax, i in zip(axes, key):\n            if is_list_like(i) and not is_scalar(i):\n                i = convert_to_index_sliceable(i)\n\n            if ax.is_integer() and not is_integer(i):\n                raise ValueError(\n                    \"At based indexing on an integer index \"\n                    \"can only have integer indexers\"\n                )\n            elif not ax.is_integer() and is_integer(i):\n                raise ValueError(\n                    \"At based indexing on a non-integer \"\n                    \"index can only have non-integer \"\n                    \"indexers\"\n                )\n            else:\n                converted_key.append(i)\n\n        return tuple(converted_key)",
            "import_list": [
                "from pandas.core.indexing import IndexingMixin",
                "from pandas.core.indexing._scalar import _ScalarAccessIndexer",
                "from pandas._libs.indexing import convert_to_index_sliceable"
            ]
        }
    ]
}