{
    "pandas": [
        {
            "bugID": 69,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 2110,
            "file_name": "pandas/core/indexing.py",
            "replace_code": "def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n    \n        idx = self.obj.axes[0]\n        if is_list_like(key) and not isinstance(key, (str, bytes, bytearray)):\n            key = [x for x in key]\n            arrays = [idx._get_engine_target(x) for x in key]\n\n            dtypes = [x.dtype for x in arrays]\n            for dtype in dtypes:\n                # take care of nan -> nan: when passed a bool array,\n                #    is the float dtype\n                if is_bool_dtype(dtype):\n                    break\n            else:\n                nan_dtype = get_fill_value_dtypes(dtypes)\n                arrays = [x.astype(nan_dtype) for x in arrays]\n                key = [x.astype(nan_dtype, copy=False) for x in key]\n            return key\n        else:\n            int_dtype = ['int32', 'float32', 'int64', 'float64']\n            if idx.is_floating():\n                try:\n                    if not is_float(key) and not is_scalar(key):\n                        key = int(key)\n                except TypeError:\n                    pass\n                key = idx.astype(type(key))._shallow_copy(key)\n            elif is_float(key) and not is_scalar(key) and not idx.is_floating():\n                raise ValueError(\n                    \"At based indexing on an integer index with a \"\n                    \"float indexer\"\n                )\n            elif (\n                is_integer(key)\n                and not idx.is_floating()\n                and not idx.is_integer()\n            ):\n                raise ValueError(\n                    \"At based indexing on a non-integer index \"\n                    \"can only have non-integer indexers\"\n                )\n            elif not is_sequence(key):\n                key = [key]\n            return key",
            "import_list": []
        }
    ]
}