{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.convert(numeric_only=True)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    # Some object-dtype blocks might be split into List[Block[T], Block[U]]\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for label, block in data.items():\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = data.items._get_indexer([label])\n        try:\n            result = self.grouper.aggregate(\n                block, how, axis=1, min_count=min_count\n            )\n        except (NotImplementedError, DataError, SpecificationError):  # catch DataError and SpecificationError exceptions\n            if alt is None:\n                raise NotImplementedError  # we cannot perform the operation in an alternate way\n            result = alt(block.values, axis=self.axis)\n            result = block._logical_func(alt, verify=False).transform(result, axis=1, verify=False)\n        else:\n            if not isinstance(result, pd.Series):\n                result = pd.Series(result)\n        finally:\n            if result is not no_result:\n                try:\n                    result = result._get_data_to_resolve_other(data)\n                except AttributeError:  # handle AttributeError exceptions\n                    result = pd.Series(result, name=label)\n                    if result.ndim == 1:\n                        result = result.to_frame()\n                    result = result._get_data_to_resolve_other(data)\n                if result.is_extension_array_dtype:\n                    result = result.values\n        if pd.isnull(result).all():\n            deleted_items.append(locs)\n        else:\n            result = maybe_convert_objects(result)\n            agg_block = maybe_downcast_to_dtype(result.astype(block.dtype.dt.type), dtype=block.dtype)\n\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    if split_items:\n        # Clean up the mess left over from split blocks.\n        for locs, result in zip(split_items, split_frames):\n            assert len(locs) == result.shape[1]\n            for i, loc in enumerate(locs):\n                new_items.append(np.array([loc], dtype=locs.dtype))\n                agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n\n    # reset the locs in the blocks to correspond to our\n    # current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(indexer).reindex(indexer)\n\n    if deleted_items:\n\n        # we need to adjust the indexer to account for the\n        # items we have removed\n        # really should be done in internals :<\n        deleted = np.concatenate(deleted_items)\n        indexer = np.arange(len(data))[~np.isin(np.arange(len(data)), deleted)]\n        \n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}