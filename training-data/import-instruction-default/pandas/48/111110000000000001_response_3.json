{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> Tuple[List[Block], Index]:\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n        \n        data: BlockManager = self._get_data_to_aggregate()\n        \n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n        \n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n        split_items: List[np.ndarray] = []\n        split_frames: List[DataFrame] = []\n        no_result = object()\n        \n        for block in data.blocks:\n            result = no_result\n            locs = block.mgr_locs.as_array\n            # Perform aggregation\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n            if result is no_result:\n                continue\n            # Handle the result and append to agg_blocks and new_items\n        \n        if not (agg_blocks or split_frames):\n            raise DataError(\"No numeric types to aggregate\")\n        \n        # Concatenation and reordering of agg_blocks\n        \n        return agg_blocks, agg_items",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "from pandas.core.internals import BlockManager, Block",
                "from pandas.core.groupby.groupby import GroupBy",
                "from pandas.core.frame import DataFrame"
            ]
        }
    ]
}