{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[\"Block\"], pd.Index]:\n    data: pd.core.internals.BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    no_result = object()\n    agg_blocks: List[pd.core.internals.Block] = []\n    new_items: List[np.ndarray] = []\n\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                assert how == \"ohlc\"\n                # Exclude the block if the operation is not applicable in an alternate way\n                new_items.append(np.empty(0, dtype=locs.dtype))\n                continue\n            obj = self.obj[data.items[locs]]\n            s = obj.groupby(self.grouper)\n            try:\n                result = alt(s)\n            except TypeError:\n                new_items.append(np.empty(0, dtype=locs.dtype))\n                continue\n\n        if result is not no_result:\n            result = np.reshape(result, (1, -1))\n\n            agg_block = block.make_block(result)\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise pd.core.base.DataError(\"No numeric types to aggregate\")\n\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.argsort(indexer))\n\n    if alt is not None:\n        # Adjust the indexer to account for the items we have removed\n        deleted_items = np.setdiff1d(np.arange(len(data)), indexer)\n        mask = np.isin(np.arange(len(data)), deleted_items)\n        indexer = (np.arange(len(data)) - mask.cumsum())[indexer]\n\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}