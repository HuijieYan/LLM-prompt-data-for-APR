{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[pd.core.internals.blocks.Block], pd.Index]:\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks = []\n    agg_items = data.items.copy()\n\n    for block in data.blocks:\n        result = self.grouper.aggregate(\n            block.values, how, axis=self.axis, min_count=min_count\n        )\n        new_block = pd.core.internals.blocks.make_block(result)\n        agg_blocks.append(new_block)\n\n    if not agg_blocks:\n        raise pd.core.base.DataError(\"No numeric types to aggregate\")\n\n    indexer = data.items.get_indexer(agg_items)\n    agg_items = agg_items.take(indexer)\n\n    for offset, block in enumerate(agg_blocks):\n        loc = len(block.mgr_locs)\n        block.mgr_locs = data.items.take(indexer[offset:offset + loc])\n\n    return agg_blocks, agg_items",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}