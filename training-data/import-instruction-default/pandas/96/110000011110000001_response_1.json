{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        business_hours = list(zip(self.start, self.end))\n        business_hour_length = sum((en - st).total_seconds() // 60 for st, en in business_hours)\n\n        if n == 0:\n            return other\n        else:\n            rounding = n // abs(n)\n\n            if other.time() >= self.end[0]:\n                other = self._next_opening_time(other)\n            elif other.time() < self.start[0]:\n                other = self._get_closing_time(other)\n\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start and self._is_on_offset(other):\n                    # adjustment to move to previous business day\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            days, remainder_minutes = divmod(abs(n) * 60, business_hour_length)\n            if n < 0:\n                days, remainder_minutes = -days, -remainder_minutes\n\n            if days != 0:\n                if abs(n) == 1:\n                    return other + timedelta(days=days)\n\n                bh_offset = CustomBusinessHour(start=self.start[0], end=self.end[-1], holidays=self.holidays)\n                if not self._is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + bh_offset * days + remain\n                else:\n                    other = other + bh_offset * days\n\n            minutes_left = remainder_minutes\n            for st, en in business_hours:\n                interval_length = (en - st).total_seconds() // 60\n                if rounding > 0:\n                    if st <= other.time() < en:\n                        minutes_left -= (en - other.time()).total_seconds() // 60\n                        if minutes_left <= 0:\n                            return other + timedelta(minutes=minutes_left)\n                        other = datetime.combine(other, en)\n                else:\n                    if st < other.time() <= en:\n                        minutes_left -= (other.time() - st).total_seconds() // 60\n                        if minutes_left <= 0:\n                            return other - timedelta(minutes=minutes_left)\n                        other = datetime.combine(other, st)\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessHour, CustomBusinessHour",
                "from pandas.tseries.offsets import apply_wraps"
            ]
        }
    ]
}