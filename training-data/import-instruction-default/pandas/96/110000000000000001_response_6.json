{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        business_hours = []\n\n        for start, end in zip(self.start, self.end):\n            business_hours.append((start, end))\n\n        adjusted_time = other\n        if n >= 0:\n            if adjusted_time.time() in self.end or not self._is_on_offset(adjusted_time):\n                adjusted_time = self._next_opening_time(adjusted_time)\n        else:\n            if adjusted_time.time() in self.start:\n                adjusted_time -= timedelta(seconds=1)\n            if not self._is_on_offset(adjusted_time):\n                adjusted_time = self._next_opening_time(adjusted_time)\n                adjusted_time = self._get_closing_time(adjusted_time)\n\n        total_business_hours = sum(\n            (end - start).seconds / 60 for start, end in business_hours\n        )\n\n        business_days, remaining_minutes = divmod(abs(n * 60), total_business_hours)\n        if n < 0:\n            business_days, remaining_minutes = -business_days, -remaining_minutes\n\n        if business_days != 0:\n            skip_bd = BusinessDay(n=business_days)\n            if not self.next_bday.is_on_offset(adjusted_time):\n                prev_open = self._prev_opening_time(adjusted_time)\n                remain = adjusted_time - prev_open\n                adjusted_time = prev_open + skip_bd + remain\n            else:\n                adjusted_time += skip_bd\n\n        remaining_business_hours = timedelta(minutes=remaining_minutes)\n\n        if n >= 0:\n            while remaining_business_hours != timedelta(0):\n                last_closing = self._get_closing_time(self._prev_opening_time(adjusted_time))\n                business_hours_left = last_closing - adjusted_time\n                if remaining_business_hours < business_hours_left:\n                    adjusted_time += remaining_business_hours\n                    remaining_business_hours = timedelta(0)\n                else:\n                    remaining_business_hours -= business_hours_left\n                    adjusted_time = self._next_opening_time(adjusted_time + business_hours_left)\n        else:\n            while remaining_business_hours != timedelta(0):\n                next_opening = self._next_opening_time(adjusted_time)\n                business_hours_left = next_opening - adjusted_time\n                if remaining_business_hours > business_hours_left:\n                    adjusted_time += remaining_business_hours\n                    remaining_business_hours = timedelta(0)\n                else:\n                    remaining_business_hours -= business_hours_left\n                    adjusted_time = self._get_closing_time(\n                        self._next_opening_time(adjusted_time + business_hours_left - timedelta(seconds=1))\n                    )\n\n        return adjusted_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}