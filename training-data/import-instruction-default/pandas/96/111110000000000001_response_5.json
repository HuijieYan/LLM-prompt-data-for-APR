{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            # get total business hours by sec in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd = abs(n) // businesshours // 60\n            r = abs(n) % (businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            business_day_adjustment = BusinessDay(n=bd)\n            other = self.next_bday if self._is_on_offset(other) else self._prev_opening_time(other) + business_day_adjustment\n\n            remaining_business_hours = timedelta(minutes=r)\n\n            if n >= 0:\n                while remaining_business_hours > timedelta(0):\n                    remaining_interval = self._get_closing_time(self._prev_opening_time(other)) - other\n                    if remaining_business_hours < remaining_interval:\n                        other += remaining_business_hours\n                        remaining_business_hours = timedelta(0)\n                    else:\n                        remaining_business_hours -= remaining_interval\n                        other = self._next_opening_time(other + remaining_interval)\n            else:\n                while remaining_business_hours > timedelta(0):\n                    remaining_interval = self._next_opening_time(other) - other\n                    if remaining_business_hours >= remaining_interval:\n                        other += remaining_business_hours\n                        remaining_business_hours = timedelta(0)\n                    else:\n                        remaining_business_hours -= remaining_interval\n                        other = self._get_closing_time(self._next_opening_time(other + remaining_interval - timedelta(seconds=1)))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}