{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # reset timezone and nanosecond\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n        \n            n = self.n\n\n            # adjust other based on the sign of self.n\n            if n >= 0:\n                if other.time() in self.end and not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start or not self._is_on_offset(other):\n                    other = self._prev_opening_time(other)\n\n            # get total business hours by sec in one business day\n            business_hours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n) * 60, business_hours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # handle adjusting by business days\n            if bd != 0:\n                business_day_offset = timedelta(days=bd)\n                other = self.next_bday(other) + business_day_offset\n\n            # handle adjusting remaining business hours\n            business_hours_offset = timedelta(minutes=r)\n            opening_time = self._next_opening_time(other)\n\n            while business_hours_offset > timedelta(0):\n                time_until_closing = self._get_closing_time(opening_time) - other\n\n                if time_until_closing <= business_hours_offset:\n                    business_hours_offset -= time_until_closing\n                    other = self._get_closing_time(opening_time)\n                else:\n                    other += business_hours_offset\n                    business_hours_offset = timedelta(0)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}