{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        \n        # Adjust other to reduce the number of cases to handle\n        if n >= 0 and (other.hour, other.minute) >= self.start:\n            other = self._next_opening_time(other)\n        elif n < 0 or (other.hour, other.minute) < self.start:\n            # modification to move to the previous business day\n            other = other.replace(hour=self.start[0], minute=self.start[1], second=0, microsecond=0) + timedelta(hours=-24)\n\n        # Calculate the business hours in a day\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        # Calculate business days and remaining business hours\n        bd, r = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first\n        if bd != 0:\n            other += timedelta(days=bd)\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        while bhour_remain.total_seconds() > 0:\n            bhour = self._get_closing_time(other) - other\n            if n < 0:\n                bhour = self._next_opening_time(other) - other\n            if bhour_remain >= bhour:\n                bhour_remain -= bhour\n                if n < 0:\n                    other = other.replace(hour=self.start[0], minute=self.start[1], second=0, microsecond=0) - timedelta(days=1)\n                other = self._next_opening_time(other)\n            else:\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from pandas._libs.tslibs.offsets import ApplyTypeError",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}