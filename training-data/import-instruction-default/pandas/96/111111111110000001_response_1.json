{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n      if isinstance(other, datetime):\n          business_day = BusinessDay()\n          if self.n >= 0:\n              # Get the next opening time\n              while other.time() in self.end or not self._is_on_offset(other):\n                  other = self._next_opening_time(other)\n          else:\n              # Adjust to move to the previous business day\n              if other.time() in self.start:\n                  other = other - timedelta(seconds=1)\n              while other.time() not in self.start or not self._is_on_offset(other):\n                  other = self._prev_opening_time(other)\n\n          businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n          # Calculate business days and remaining business hours\n          bd, r = divmod(abs(self.n) * 60, businesshours // 60)\n\n          if self.n < 0:\n              bd, r = -bd, -r\n          \n          other = other + bd * business_day\n\n          # Adjust remaining business hours\n          if r != 0:\n              elapsed = timedelta(seconds=0)\n              for start, end in zip(self.start, self.end):\n                  if start <= other.time() < end:\n                      elapsed = (end - other.time()).total_seconds()\n                      break\n              if self.n < 0:\n                  r = -r\n\n              other = other + timedelta(seconds=elapsed + r * 60)\n          \n          return other\n      else:\n          raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}