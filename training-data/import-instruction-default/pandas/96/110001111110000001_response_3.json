{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        if n == 0:\n            return other\n\n        # Make sure other is a datetime object with nanosecond set to 0\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            0,\n        )\n\n        # Calculate the total business hours by sec in one business day\n        business_hours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # Calculate the number of business days and remaining business hours\n        total_minutes = n * 60\n        bd, r = divmod(abs(total_minutes), business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        # Skip business days\n        if bd != 0:\n            business_days = bd * BusinessDay()\n            other = self.next_bday.apply(other) if n > 0 else self.prev_bday.apply(other - timedelta(days=1))\n            while not self.is_on_offset(other):\n                other = self.next_bday.apply(other)\n            other = other.replace(hour=0, minute=0, second=0, microsecond=0) + business_days\n\n        # Adjust remaining business hours\n        if r != 0:\n            business_hours_in_seconds = business_hours * 60\n            if n > 0:\n                while r > 0:\n                    next_opening_time = self._next_opening_time(other)\n                    remaining_time = (next_opening_time - other).total_seconds()\n                    if r < remaining_time:\n                        other += timedelta(seconds=r)\n                        r = 0\n                    else:\n                        r -= remaining_time\n                        other = next_opening_time\n            else:\n                while r < 0:\n                    prev_opening_time = self._prev_opening_time(other)\n                    remaining_time = (other - prev_opening_time).total_seconds()\n                    if abs(r) < remaining_time:\n                        other -= timedelta(seconds=abs(r))\n                        r = 0\n                    else:\n                        r += remaining_time\n                        other = self._get_closing_time(prev_opening_time - timedelta(days=1))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}