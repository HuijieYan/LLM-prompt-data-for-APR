{
    "pandas": [
        {
            "bugID": 112,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n    self,\n    target: AnyArrayLike,\n    method: Optional[str] = None,\n    limit: Optional[int] = None,\n    tolerance: Optional[Any] = None,\n) -> np.ndarray:\n\n    self._check_method(method)\n\n    if self.is_overlapping():\n        msg = (\n            \"cannot handle overlapping indices; use \"\n            \"IntervalIndex.get_indexer_non_unique\"\n        )\n        raise InvalidIndexError(msg)\n\n    target_as_index = ensure_index(target)\n\n    indexer = np.full(len(target_as_index), -1, dtype='intp')\n\n    if isinstance(target_as_index, IntervalIndex):\n        if self.equals(target_as_index):\n            indexer = np.arange(len(self), dtype='intp')\n        else:\n            common_dtype = find_common_type([self.dtype.subtype, target_as_index.dtype.subtype])\n            if (\n                self.closed != target_as_index.closed\n                or (\n                    is_object_dtype(common_dtype)\n                    and not is_datetime_or_timedelta_dtype(common_dtype)\n                )\n            ):\n                indexer = np.full(len(target_as_index), -1, dtype='intp')\n            else:\n                left_indexer = self.left.get_indexer(target_as_index.left)\n                right_indexer = self.right.get_indexer(target_as_index.right)\n                indexer = np.where(left_indexer == right_indexer, left_indexer, -1)\n    else:\n        for i, key in enumerate(target_as_index):\n            try:\n                if isinstance(key, slice):\n                    start = key.start\n                    stop = key.stop\n                    locs = self.slice_locs(start, stop)\n                    indexer[i] = slice(locs[0], locs[1], locs[2])\n                else:\n                    indexer[i] = self.get_loc(key, method=method, tolerance=tolerance)\n            except KeyError:\n                indexer[i] = -1\n\n    return indexer",
            "import_list": []
        }
    ]
}