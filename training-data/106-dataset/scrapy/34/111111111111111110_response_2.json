{
    "scrapy": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 26,
            "file_name": "scrapy/item.py",
            "replace_code": "def __new__(mcs, class_name, bases, attrs):\n    new_bases = tuple(base for base in bases if hasattr(base, '_class'))\n    _class = super(ItemMeta, mcs).__new__(mcs, 'x_' + class_name, new_bases, attrs)\n\n    fields = {} \n    new_attrs = {}\n    for n in dir(_class):\n        v = getattr(_class, n)\n        if isinstance(v, Field):\n            fields[n] = v\n        elif n in attrs:\n            new_attrs[n] = attrs[n]\n\n    new_attrs['fields'] = {**fields, **attrs.get('fields', {})}\n    new_attrs['_class'] = _class\n    return super(ItemMeta, mcs).__new__(mcs, class_name, bases, new_attrs)",
            "imports": []
        }
    ]
}