{
    "scrapy": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 46,
            "file_name": "scrapy/mail.py",
            "replace_code": "def send(self, to, subject, body, cc=None, attachs=(), mimetype='text/plain', charset=None, _callback=None):\n    if attachs:\n        msg = MIMEMultipart()\n    else:\n        msg = MIMENonMultipart(*mimetype.split('/'))\n    msg['From'] = self.mailfrom\n    msg['To'] = COMMASPACE.join(to)\n    msg['Date'] = formatdate(localtime=True)\n    msg['Subject'] = subject\n    rcpts = to[:]\n    if cc:\n        rcpts.extend(cc)\n        msg['Cc'] = COMMASPACE.join(cc)\n\n    if charset:\n        msg.set_charset(charset)\n\n    if attachs:\n        msg.attach(MIMEText(body, 'plain', charset or 'us-ascii'))\n        for attach_name, mimetype, f in attachs:\n            part = MIMEBase(*mimetype.split('/'))\n            part.set_payload(f.read())\n            Encoders.encode_base64(part)\n            part.add_header('Content-Disposition', 'attachment; filename=\"%s\"'\n                            % attach_name)\n            msg.attach(part)\n    else:\n        msg.set_payload(body)\n\n    if _callback:\n        _callback(to=to, subject=subject, body=body, cc=cc, attach=attachs, msg=msg)\n\n    if self.debug:\n        logger.debug(f'Debug mail sent OK: To={to} Cc={cc} Subject=\"{subject}\" Attachs={len(attachs)}')\n        return\n\n    dfd = self._sendmail(rcpts, msg.as_string())\n    dfd.addCallbacks(lambda result: self._sent_ok(result, to, cc, subject, len(attachs)), \n                      lambda failure: self._sent_failed(failure, to, cc, subject, len(attachs)))\n    reactor.addSystemEventTrigger('before', 'shutdown', lambda: dfd)\n    return dfd",
            "imports": []
        }
    ]
}