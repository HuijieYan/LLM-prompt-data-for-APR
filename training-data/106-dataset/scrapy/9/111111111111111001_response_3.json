{
    "scrapy": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 46,
            "file_name": "scrapy/mail.py",
            "replace_code": "def send(self, to, subject, body, cc=None, attachs=(), mimetype='text/plain', charset=None, _callback=None):\n    if attachs:\n        msg = MIMEMultipart()\n    else:\n        msg = MIMENonMultipart(*mimetype.split('/', 1))\n    msg['From'] = self.mailfrom\n    to_list = [to] if isinstance(to, str) else to  # Ensure to is a list\n    msg['To'] = COMMASPACE.join(to_list)\n    msg['Date'] = formatdate(localtime=True)\n    msg['Subject'] = subject\n    rcpts = to_list[:]  # Use to_list instead of to\n    if cc:\n        cc_list = [cc] if isinstance(cc, str) else cc  # Ensure cc is a list\n        rcpts.extend(cc_list)\n        msg['Cc'] = COMMASPACE.join(cc_list)\n\n    if charset:\n        msg.set_charset(charset)\n\n    if attachs:\n        msg.attach(MIMEText(body, 'plain', charset or 'us-ascii'))\n        for attach_name, mimetype, f in attachs:\n            part = MIMEBase(*mimetype.split('/'))\n            part.set_payload(f.read())\n            Encoders.encode_base64(part)\n            part.add_header('Content-Disposition', 'attachment; filename=\"%s\"' % attach_name)\n            msg.attach(part)\n    else:\n        msg.set_payload(body)\n\n    if _callback:\n        _callback(to=to_list, subject=subject, body=body, cc=cc_list, attach=attachs, msg=msg)\n\n    if self.debug:\n        logger.debug('Debug mail sent OK: To=%(mailto)s Cc=%(mailcc)s '\n                     'Subject=\"%(mailsubject)s\" Attachs=%(mailattachs)d',\n                     {'mailto': to_list, 'mailcc': cc_list, 'mailsubject': subject,\n                      'mailattachs': len(attachs)})\n        return\n\n    dfd = self._sendmail(rcpts, msg.as_string())\n    dfd.addCallbacks(self._sent_ok, self._sent_failed,\n                      callbackArgs=[to_list, cc_list, subject, len(attachs)],\n                      errbackArgs=[to_list, cc_list, subject, len(attachs)])\n    reactor.addSystemEventTrigger('before', 'shutdown', lambda: dfd)\n    return dfd",
            "import_list": []
        }
    ]
}