{
    "tornado": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 592,
            "file_name": "tornado/httputil.py",
            "replace_code": "def url_concat(url, args):\n    parsed_url = urlparse(url)\n    \n    if args is None:\n        final_query = parsed_url.query\n    elif isinstance(args, dict):\n        parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n        parsed_query.extend(args.items())\n        final_query = urlencode(parsed_query)\n    elif isinstance(args, (list, tuple)):\n        parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n        parsed_query.extend(args)\n        final_query = urlencode(parsed_query)\n    else:\n        err = \"'args' parameter should be dict, list or tuple. Not {0}\".format(type(args))\n        raise TypeError(err)\n    \n    url = urlunparse((\n        parsed_url.scheme,\n        parsed_url.netloc,\n        parsed_url.path,\n        parsed_url.params,\n        final_query,\n        parsed_url.fragment\n    ))\n    \n    return url",
            "import_list": [
                "from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse"
            ]
        }
    ]
}