{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n        self,\n        start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n        headers: httputil.HTTPHeaders,\n        chunk: bytes = None,\n    ) -> \"Future[None]\":\n\n    \"\"\"Implements .HTTPConnection.write_headers.\"\"\"\n    lines = []\n    if self.is_client:\n        assert isinstance(\n            start_line, (httputil.RequestStartLine, httputil.ResponseStartLine)\n        )\n        if isinstance(start_line, httputil.RequestStartLine):\n            self._request_start_line = start_line\n            lines.append(\n                utf8(f\"{start_line.method} {start_line.path} HTTP/1.1\")\n            )\n        else:\n            assert self._request_start_line is not None\n            assert self._request_headers is not None\n            self._response_start_line = start_line\n            lines.append(\n                utf8(f\"HTTP/1.1 {start_line.code} {start_line.reason}\")\n            )\n    \n        self._chunking_output = (\n            start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n            and \"Content-Length\" not in headers\n            and \"Transfer-Encoding\" not in headers\n        )\n        # If connection to a 1.1 client will be closed, inform client\n        if (self._request_start_line.version == \"HTTP/1.1\"\n            and self._disconnect_on_finish):\n            headers[\"Connection\"] = \"close\"\n        # If a 1.0 client is connection is keep-alive, add the header.\n        if (self._request_start_line.version == \"HTTP/1.0\"\n            and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"):\n            headers[\"Connection\"] = \"Keep-Alive\"\n        if self._chunking_output:\n            headers[\"Transfer-Encoding\"] = \"chunked\"\n        if not self.is_client and (\n            self._request_start_line.method == \"HEAD\"\n            or self._response_start_line.code == 304\n        ):\n            self._expected_content_remaining = 0\n        elif \"Content-Length\" in headers:\n            self._expected_content_remaining = int(headers[\"Content-Length\"])\n        else:\n            self._expected_content_remaining = None\n        header_lines = (\n            native_str(n) + \": \" + native_str(v) for n, v in headers.items()\n        )\n        for line in map(lambda l: l.encode(\"latin1\"), header_lines):\n            if b\"\\n\" in line:\n                raise ValueError(\"Newline in header: \" + repr(line))\n        data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n        if chunk:\n            data += self._format_chunk(chunk)\n        future = self.stream.write(data)\n        return future"
        }
    ]
}