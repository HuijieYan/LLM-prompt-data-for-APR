{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n    self,\n    start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n    headers: httputil.HTTPHeaders,\n    chunk: bytes = None,\n) -> \"Future[None]\":\n    \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n    lines = []\n    if self.is_client:\n        assert isinstance(start_line, httputil.RequestStartLine)\n        self._request_start_line = start_line\n        lines.append(utf8(\"%s %s HTTP/1.1\" % (start_line.method, start_line.path)))\n        content_length_present = \"Content-Length\" in headers\n        transfer_encoding_present = \"Transfer-Encoding\" in headers\n        self._chunking_output = (\n            start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n            and not (content_length_present or transfer_encoding_present)\n        )\n    else:\n        assert isinstance(start_line, httputil.ResponseStartLine)\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        lines.append(utf8(\"HTTP/1.1 %d %s\" % (start_line.code, start_line.reason)))\n        content_length_transfer_encoding_conditions = (\n            start_line.code not in (204, 304) and start_line.code < 100\n        )\n        self._chunking_output = (\n            (\n                self._request_start_line.version == \"HTTP/1.1\"\n                and content_length_transfer_encoding_conditions\n                and not content_length_present\n                and not transfer_encoding_present\n            )\n            or (\n                self._request_start_line.version == \"HTTP/1.0\"\n                and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"\n            )\n        )\n        # Handle the headers according to the HTTP/1.1 and HTTP/1.0 specifications\n        if self._request_start_line.version == \"HTTP/1.1\" and self._disconnect_on_finish:\n            headers[\"Connection\"] = \"close\"\n        if (\n            self._request_start_line.version == \"HTTP/1.0\"\n            and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"\n        ):\n            headers[\"Connection\"] = \"Keep-Alive\"\n    if self._chunking_output:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n    if not self.is_client and (\n        self._request_start_line.method == \"HEAD\"\n        or isinstance(start_line, httputil.ResponseStartLine)\n        and start_line.code == 304\n    ):\n        self._expected_content_remaining = 0\n    elif \"Content-Length\" in headers:\n        self._expected_content_remaining = int(headers[\"Content-Length\"])\n    else:\n        self._expected_content_remaining = None\n\n    header_lines = (\n        native_str(n) + \": \" + native_str(v) for n, v in headers.get_all()\n    )\n    lines.extend(l.encode(\"latin1\") for l in header_lines)\n    for line in lines:\n        if b\"\\n\" in line:\n            raise ValueError(\"Newline in header: \" + repr(line))\n    future = self.stream.write(b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\")\n    self._pending_write = future\n    return future",
            "imports": []
        }
    ]
}