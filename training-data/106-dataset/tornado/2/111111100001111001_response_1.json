{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n            self,\n            start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n            headers: httputil.HTTPHeaders,\n            chunk: bytes = None,\n    ) -> \"Future[None]\":\n        \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n        \n        header_lines = [f\"{start_line.method} {start_line.path} {start_line.version or 'HTTP/1.1'}\"]\n        for name, value in headers.get_all():\n            header_lines.append(f\"{name}: {value}\")\n        \n        if self.is_client:\n            # client-side logic\n            if chunk and start_line.method in (\"POST\", \"PUT\", \"PATCH\") and \"Content-Length\" not in headers and \"Transfer-Encoding\" not in headers:\n                self._chunking_output = True\n                \n            if self._chunking_output:\n                headers[\"Transfer-Encoding\"] = \"chunked\"\n        else:\n            # server-side logic\n            if start_line.code not in (204, 304) and (start_line.code < 100 or start_line.code >= 200) and \"Content-Length\" not in headers and \"Transfer-Encoding\" not in headers:\n                self._chunking_output = True\n                \n            if self._request_start_line.version == \"HTTP/1.1\" and self._disconnect_on_finish:\n                headers[\"Connection\"] = \"close\"\n            if self._request_start_line.version == \"HTTP/1.0\" and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\":\n                headers[\"Connection\"] = \"Keep-Alive\"\n            if self._chunking_output:\n                headers[\"Transfer-Encoding\"] = \"chunked\"\n                \n        data = \"\\r\\n\".join(header_lines).encode(\"latin1\") + b\"\\r\\n\\r\\n\"\n        \n        if chunk:\n            data += self._format_chunk(chunk)\n        \n        future = self._write_future = Future()\n        if not self.stream.closed():\n            self._pending_write = self.stream.write(data)\n            future_add_done_callback(self._pending_write, self._on_write_complete)\n            \n        return future",
            "import_list": [
                "from typing import Union"
            ]
        }
    ]
}