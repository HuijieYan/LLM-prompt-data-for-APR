{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n    self,\n    start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n    headers: httputil.HTTPHeaders,\n    chunk: bytes = None,\n) -> 'Future[None]':\n    lines = []\n    if self.is_client:\n        if isinstance(start_line, httputil.RequestStartLine):\n            self._request_start_line = start_line\n            lines.append(bytes(f\"{start_line.method} {start_line.path} HTTP/1.1\", 'utf-8'))\n            self._chunking_output = (\n                start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n                and \"Content-Length\" not in headers\n                and \"Transfer-Encoding\" not in headers\n            )\n    else:\n        if isinstance(start_line, httputil.ResponseStartLine):\n            self._response_start_line = start_line\n            lines.append(bytes(f\"HTTP/1.1 {start_line.code} {start_line.reason}\", 'utf-8'))\n            self._chunking_output = (\n                self._request_start_line.version == \"HTTP/1.1\"\n                and start_line.code not in (204, 304)\n                and (start_line.code < 100 or start_line.code >= 200)\n                and \"Content-Length\" not in headers\n                and \"Transfer-Encoding\" not in headers\n            )\n            if self._request_start_line.version == \"HTTP/1.1\" and self._disconnect_on_finish:\n                headers[\"Connection\"] = \"close\"\n            if self._request_start_line.version == \"HTTP/1.0\" and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\":\n                headers[\"Connection\"] = \"Keep-Alive\"\n    if self._chunking_output:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n    if not self.is_client and (\n        self._request_start_line.method == \"HEAD\"\n        or isinstance(start_line, httputil.ResponseStartLine) and start_line.code == 304\n    ):\n        self._expected_content_remaining = 0\n    elif \"Content-Length\" in headers:\n        self._expected_content_remaining = int(headers[\"Content-Length\"])\n    else:\n        self._expected_content_remaining = None\n    header_lines = (f'{n}: {v}' for n, v in headers.get_all())\n    lines.extend(header_lines)\n    for line in lines:\n        if b'\\n' in line:\n            raise ValueError(f'Newline in header: {line}')\n    data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n    future = Future()\n    if self.stream.closed():\n        future.set_exception(iostream.StreamClosedError())\n        return future\n    if chunk:\n        data += self._format_chunk(chunk)\n    self._pending_write = self.stream.write(data)\n    future_add_done_callback(self._pending_write, self._on_write_complete)\n    return future",
            "import_list": []
        }
    ]
}