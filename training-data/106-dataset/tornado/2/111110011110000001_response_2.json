{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n        self,\n        start_line: Union[RequestStartLine, ResponseStartLine],\n        headers: HTTPHeaders,\n        chunk: bytes = None,\n    ) -> \"Future[None]\":\n    from typing import Union, cast\n    from tornado.http1connection import HTTPConnection, RequestStartLine, ResponseStartLine, HTTPHeaders\n    from tornado.concurrent import Future\n    lines = []\n    if self.is_client:\n        assert isinstance(start_line, RequestStartLine)\n        self._request_start_line = start_line\n        lines.append(f\"{start_line.method} {start_line.path} HTTP/1.1\")\n        # Client requests with a non-empty body must have either a\n        # Content-Length or a Transfer-Encoding.\n        self._chunking_output = (\n            start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n            and \"Content-Length\" not in headers\n            and \"Transfer-Encoding\" not in headers\n        )\n    else:\n        assert isinstance(start_line, ResponseStartLine)\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        lines.append(f\"HTTP/1.1 {start_line.code} {start_line.reason}\")\n        self._chunking_output = (\n            self._request_start_line.version == \"HTTP/1.1\"\n            and start_line.code not in (204, 304)\n            and (start_line.code < 100 or start_line.code >= 200)\n            and \"Content-Length\" not in headers\n            and \"Transfer-Encoding\" not in headers\n        )\n        # If connection to a 1.1 client will be closed, inform client\n        if (\n            self._request_start_line.version == \"HTTP/1.1\"\n            and self._disconnect_on_finish\n        ):\n            headers[\"Connection\"] = \"close\"\n        # If a 1.0 client asked for keep-alive, add the header.\n        if (\n            self._request_start_line.version == \"HTTP/1.0\"\n            and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"\n        ):\n            headers[\"Connection\"] = \"Keep-Alive\"\n    \n    if self._chunking_output:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n    \n    if not self.is_client and (self._request_start_line.method == \"HEAD\" or cast(ResponseStartLine, start_line).code == 304):\n        self._expected_content_remaining = 0\n    elif \"Content-Length\" in headers:\n        self._expected_content_remaining = int(headers[\"Content-Length\"])\n    else:\n        self._expected_content_remaining = None\n    \n    header_lines = (f\"{n}: {v}\" for n, v in headers.get_all().items())\n    lines.extend(header_lines)\n    for line in lines:\n        if b\"\\n\" in line.encode():\n            raise ValueError(\"Newline in header: \" + repr(line))\n    \n    future = None\n    if self.stream.closed():\n        future = self._write_future = Future()\n        future.set_exception(iostream.StreamClosedError())\n    else:\n        future = self._write_future = Future()\n        data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n        if chunk:\n            data += self._format_chunk(chunk)\n        self._pending_write = self.stream.write(data)\n        self._pending_write.add_done_callback(self._on_write_complete)\n    \n    return future"
        }
    ]
}