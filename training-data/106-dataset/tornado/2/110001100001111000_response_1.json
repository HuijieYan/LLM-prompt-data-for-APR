{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n    self,\n    start_line: Union[RequestStartLine, ResponseStartLine],\n    headers: HTTPHeaders,\n    chunk: bytes = None,\n) -> \"Future[None]\":\n    from typing import Union\n    from tornado.httputil import RequestStartLine, ResponseStartLine, HTTPHeaders\n    from tornado.iostream import IOStream\n    from tornado.ioloop import IOLoop\n    from tornado.locks import Event, Condition\n    from typing import Tuple, List\n    lines = []\n    if self.is_client:\n        assert isinstance(start_line, RequestStartLine)\n        self._request_start_line = start_line\n        lines.append(b'%b %b HTTP/1.1' % (start_line.method, start_line.path))\n        self._set_content_length(self, start_line.method, headers)\n    else:\n        assert isinstance(start_line, ResponseStartLine)\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        lines.append(b'HTTP/1.1 %d %b' % (start_line.code, start_line.reason))\n        self._set_content_length(self, start_line.version, headers, start_line.code)\n    self._set_disconnect(self, start_line, headers)\n    self._set_keep_alive(self, start_line, headers)\n    if self._chunking_output:\n        self._set_chunking(self, headers)\n    if not self.is_client:\n        if self._request_start_line.method == \"HEAD\" or start_line.code == 304:\n            self._expected_content_remaining = 0\n        else:\n            self._expected_content_remaining = int(headers.get(\"Content-Length\", 0))\n    else:\n        self._expected_content_remaining = 0\n    header_lines = [b'%b: %b' % (n, v) for n, v in headers.get_all()]\n    for line in header_lines:\n        if b\"\\n\" in line:\n            raise ValueError(\"Newline in header: \" + repr(line))\n    if self.stream.closed():\n        future = self._write_future = Future()\n        future.set_exception(iostream.StreamClosedError())\n        future.exception()\n    else:\n        future = self._write_future = Future()\n        data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n        if chunk:\n            data += self._format_chunk(chunk)\n        self._pending_write = self.stream.write(data)\n        future_add_done_callback(self._pending_write, self._on_write_complete)\n    return future"
        }
    ]
}