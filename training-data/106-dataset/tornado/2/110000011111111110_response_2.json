{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n    self,\n    start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n    headers: httputil.HTTPHeaders,\n    chunk: bytes = None,\n) -> \"Future[None]\":\n    \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n    if isinstance(start_line, httputil.RequestStartLine):\n        lines = [\n            bytes(f\"{start_line.method} {start_line.path} {start_line.version}\", 'utf-8')\n        ]\n        self._request_start_line = start_line\n        # Client requests with a non-empty body must have either a Content-Length or a Transfer-Encoding.\n        if start_line.method in (\"POST\", \"PUT\", \"PATCH\") and \"Content-Length\" not in headers and \"Transfer-Encoding\" not in headers:\n            self._chunking_output = True\n        else:\n            self._chunking_output = False\n    else:\n        lines = [\n            bytes(f\"HTTP/1.1 {start_line.code} {start_line.reason}\", 'utf-8')\n        ]\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        \n        self._chunking_output = (self._request_start_line.version == \"HTTP/1.1\"\n            and start_line.code not in (204, 304)\n            and (start_line.code < 100 or start_line.code >= 200)\n            and \"Content-Length\" not in headers\n            and \"Transfer-Encoding\" not in headers)\n        \n        # If connection to a 1.1 client will be closed, inform client\n        if self._request_start_line.version == \"HTTP/1.1\" and self._disconnect_on_finish:\n            headers[\"Connection\"] = \"close\"\n        \n        # If a 1.0 client asked for keep-alive, add the header.\n        if (self._request_start_line.version == \"HTTP/1.0\" \n            and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"):\n            headers[\"Connection\"] = \"Keep-Alive\"\n\n    if self._chunking_output:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n\n    self._expected_content_remaining = 0 if self._request_start_line.method == \"HEAD\" or isinstance(start_line, httputil.ResponseStartLine) and start_line.code == 304 else int(headers.get(\"Content-Length\", 0))\n    \n    # Construct header lines\n    header_lines = [\n        bytes(f\"{n}: {v}\", 'utf-8') for n, v in headers.get_all()\n    ]\n    for line in header_lines:\n        if b\"\\n\" in line:\n            raise ValueError(\"Newline in header: \" + repr(line))\n    lines.extend(header_lines)\n    \n    future = self.stream.write(b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\")\n    self._pending_write = future\n    return future",
            "imports": [
                "from typing import Union, List",
                "import re"
            ]
        }
    ]
}