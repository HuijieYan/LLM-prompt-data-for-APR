{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n    self,\n    start_line: Union[tornado.httputil.RequestStartLine, tornado.httputil.ResponseStartLine],\n    headers: tornado.httputil.HTTPHeaders,\n    chunk: bytes = None,\n) -> Future[None]:\n    lines = []\n    if isinstance(start_line, tornado.httputil.RequestStartLine):\n        self._request_start_line = start_line\n        lines.append(f\"{start_line.method} {start_line.path} HTTP/1.1\")\n        self._chunking_output = start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n    elif isinstance(start_line, tornado.httputil.ResponseStartLine):\n        self._response_start_line = start_line\n        lines.append(f\"HTTP/1.1 {start_line.code} {start_line.reason}\")\n        self._chunking_output = start_line.code not in (204, 304) and start_line.code < 100 or start_line.code >= 200\n    else:\n        # Handle other cases for start_line if needed\n        pass\n\n    if self._chunking_output and \"Content-Length\" not in headers:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n\n    if \"Content-Length\" in headers:\n        self._expected_content_remaining = int(headers[\"Content-Length\"])\n    else:\n        self._expected_content_remaining = None\n\n    header_lines = (f\"{n}: {v}\" for n, v in headers.get_all())\n\n    data = '\\r\\n'.join(lines + list(header_lines)).encode('utf-8') + b\"\\r\\n\\r\\n\"\n\n    future = self._write_future = Future()\n    self._pending_write = self.stream.write(data)\n    future_add_done_callback(self._pending_write, self._on_write_complete)\n\n    return future",
            "import_list": [
                "from typing import Union",
                "import tornado.httputil",
                "from tornado.iostream import Future"
            ]
        }
    ]
}