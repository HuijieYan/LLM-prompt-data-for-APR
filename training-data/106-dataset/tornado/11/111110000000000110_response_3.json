{
    "tornado": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 525,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def _read_body(self, code, headers, delegate):\n    if \"Content-Length\" in headers and \"Transfer-Encoding\" in headers:\n        # Response cannot contain both Content-Length and Transfer-Encoding headers.\n        # http://tools.ietf.org/html/rfc7230#section-3.3.3\n        raise httputil.HTTPInputError(\"Response with both Transfer-Encoding and Content-Length\")\n\n    content_length = headers.get(\"Content-Length\")\n    if content_length:\n        content_length_list = content_length.split(',')\n        if len(content_length_list) > 1 and len(set(content_length_list)) != 1:\n            # Proxies sometimes cause Content-Length headers to get duplicated. \n            # If all the values are identical then we can use them, but if they differ it's an error.\n            raise httputil.HTTPInputError(\n                \"Multiple unequal Content-Lengths: %r\" % headers[\"Content-Length\"])\n\n        try:\n            content_length = int(content_length_list[0])\n        except ValueError:\n            # Handles non-integer Content-Length value.\n            raise httputil.HTTPInputError(\n                \"Only integer Content-Length is allowed: %s\" % headers[\"Content-Length\"])\n\n        if content_length > self._max_body_size:\n            raise httputil.HTTPInputError(\"Content-Length too long\")\n    else:\n        content_length = None\n\n    if code == 204:\n        # This response code is not allowed to have a non-empty body,\n        # and has an implicit length of zero instead of read-until-close.\n        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3\n        if headers.get(\"Transfer-Encoding\") or content_length not in (None, 0):\n            raise httputil.HTTPInputError(\"Response with code 204 should not have body\")\n        content_length = 0\n\n    if content_length is not None:\n        return self._read_fixed_body(content_length, delegate)\n    if headers.get(\"Transfer-Encoding\") == \"chunked\":\n        return self._read_chunked_body(delegate)\n    if self.is_client:\n        return self._read_body_until_close(delegate)\n    return None",
            "import_list": []
        }
    ]
}