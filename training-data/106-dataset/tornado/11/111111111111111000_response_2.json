{
    "tornado": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 525,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def _read_body(self, code, headers, delegate):\n        if \"Content-Length\" in headers:\n            if \"Transfer-Encoding\" in headers:\n                # Response cannot contain both Content-Length and\n                # Transfer-Encoding headers.\n                # http://tools.ietf.org/html/rfc7230#section-3.3.3\n                raise httputil.HTTPInputError(\n                    \"Response with both Transfer-Encoding and Content-Length\")\n            if \",\" in headers.get_list(\"Content-Length\"):\n                # Proxies sometimes cause Content-Length headers to get\n                # duplicated.  If all the values are identical then we can\n                # use them but if they differ it's an error.\n                if any(i != headers.get_list(\"Content-Length\")[0] for i in headers.get_list(\"Content-Length\")):\n                    raise httputil.HTTPInputError(\n                        \"Multiple unequal Content-Lengths: %r\" %\n                        headers.get_list(\"Content-Length\"))\n                content_length = int(headers.get_list(\"Content-Length\")[0])\n                if content_length > self._max_body_size:\n                    raise httputil.HTTPInputError(\"Content-Length too long\")\n            else:\n                try:\n                    content_length = int(headers.get(\"Content-Length\"))\n                    if content_length > self._max_body_size:\n                        raise httputil.HTTPInputError(\"Content-Length too long\")\n                except ValueError:\n                    # Handles non-integer Content-Length value.\n                    raise httputil.HTTPInputError(\n                        \"Only integer Content-Length is allowed: %s\" % headers.get(\"Content-Length\"))\n\n        else:\n            content_length = None\n\n        if code == 204:\n            # This response code is not allowed to have a non-empty body,\n            # and has an implicit length of zero instead of read-until-close.\n            # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3\n            if (\"Transfer-Encoding\" in headers or\n                    content_length not in (None, 0)):\n                raise httputil.HTTPInputError(\n                    \"Response with code %d should not have body\" % code)\n            content_length = 0\n\n        if content_length is not None:\n            return self._read_fixed_body(content_length, delegate)\n        if headers.get_list(\"Transfer-Encoding\") == [\"chunked\"]:\n            return self._read_chunked_body(delegate)\n        if self.is_client:\n            return self._read_body_until_close(delegate)\n        return None",
            "imports": []
        }
    ]
}