{
    "tornado": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 525,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def _read_body(self, code, headers, delegate):\n    if \"Content-Length\" in headers:\n        content_length = int(headers[\"Content-Length\"])\n        body = self.stream.read_bytes(content_length, partial=True)\n        delegate.data_received(body)\n    elif \"Transfer-Encoding\" in headers and headers[\"Transfer-Encoding\"] == \"chunked\":\n        while True:\n            line = self.stream.read_until(b\"\\r\\n\")\n            if line == b\"0\\r\\n\":\n                break\n            size = int(line, 16)\n            chunk = self.stream.read_bytes(size + 2, partial=True)  # +2 for \\r\\n\n            delegate.data_received(chunk[:-2])  # Remove the \\r\\n\n    else:\n        # Handle other cases like read-until-close\n        pass",
            "imports": []
        }
    ]
}