{
    "tornado": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 525,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def _read_body(self, code, headers, delegate):\n        if \"Content-Length\" in headers and \"Transfer-Encoding\" in headers:\n            raise httputil.HTTPInputError(\n                \"Response with both Transfer-Encoding and Content-Length\")\n        content_length = headers.get(\"Content-Length\")\n        transfer_encoding = headers.get(\"Transfer-Encoding\")\n\n        if content_length:\n            if \",\" in content_length:\n                pieces = [int(c) for c in content_length.split(\",\")]\n                if len(set(pieces)) > 1:\n                    raise httputil.HTTPInputError(\n                        \"Multiple unequal Content-Lengths: %r\" % content_length)\n                content_length = pieces[0]\n            else:\n                try:\n                    content_length = int(content_length)\n                except ValueError:\n                    raise httputil.HTTPInputError(\n                        \"Only integer Content-Length is allowed: %s\" % content_length)\n\n            if content_length > self._max_body_size:\n                raise httputil.HTTPInputError(\"Content-Length too long\")\n        else:\n            content_length = None\n\n        if code == 204 and (transfer_encoding or content_length != 0):\n            raise httputil.HTTPInputError(\n                \"Response with code %d should not have body\" % code)\n\n        if content_length is not None:\n            return self._read_fixed_body(content_length, delegate)\n        if transfer_encoding == \"chunked\":\n            return self._read_chunked_body(delegate)\n        if self.is_client:\n            return self._read_body_until_close(delegate)\n        return None",
            "import_list": []
        }
    ]
}