{
    "spacy:3": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/spacy_3/bin/wiki_entity_linking/wikipedia_processor.py": {
            "buggy_functions": [
                {
                    "function_name": "_process_wp_text",
                    "function_code": "def _process_wp_text(article_title, article_text, wp_to_id):\n    # ignore meta Wikipedia pages\n    if ns_regex.match(article_title):\n        return None, None\n\n    # remove the text tags\n    text_search = text_regex.search(article_text)\n    if text_search is None:\n        return None, None\n    text = text_search.group(0)\n\n    # stop processing if this is a redirect page\n    if text.startswith(\"#REDIRECT\"):\n        return None, None\n\n    # get the raw text without markup etc, keeping only interwiki links\n    clean_text, entities = _remove_links(_get_clean_wp_text(text), wp_to_id)\n    return clean_text, entities\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 282,
                    "end_line": 299,
                    "variables": {
                        "ns_regex.match": [
                            284
                        ],
                        "ns_regex": [
                            284
                        ],
                        "article_title": [
                            284
                        ],
                        "text_search": [
                            288,
                            289,
                            291
                        ],
                        "text_regex.search": [
                            288
                        ],
                        "text_regex": [
                            288
                        ],
                        "article_text": [
                            288
                        ],
                        "text": [
                            298,
                            291,
                            294
                        ],
                        "text_search.group": [
                            291
                        ],
                        "text.startswith": [
                            294
                        ],
                        "clean_text": [
                            298,
                            299
                        ],
                        "entities": [
                            298,
                            299
                        ],
                        "_remove_links": [
                            298
                        ],
                        "_get_clean_wp_text": [
                            298
                        ],
                        "wp_to_id": [
                            298
                        ]
                    },
                    "filtered_variables": {
                        "ns_regex.match": [
                            284
                        ],
                        "ns_regex": [
                            284
                        ],
                        "article_title": [
                            284
                        ],
                        "text_search": [
                            288,
                            289,
                            291
                        ],
                        "text_regex.search": [
                            288
                        ],
                        "text_regex": [
                            288
                        ],
                        "article_text": [
                            288
                        ],
                        "text": [
                            298,
                            291,
                            294
                        ],
                        "text_search.group": [
                            291
                        ],
                        "text.startswith": [
                            294
                        ],
                        "clean_text": [
                            298,
                            299
                        ],
                        "entities": [
                            298,
                            299
                        ],
                        "_remove_links": [
                            298
                        ],
                        "_get_clean_wp_text": [
                            298
                        ],
                        "wp_to_id": [
                            298
                        ]
                    },
                    "diff_line_number": 288,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "text_regex = re.compile(r\"(?<=<text xml:space=\\\"preserve\\\">).*(?=</text)\")\ninfo_regex = re.compile(r\"{[^{]*?}\")",
                    "start_line": 33,
                    "end_line": 34
                }
            ],
            "inscope_functions": [
                "def read_prior_probs(wikipedia_input, prior_prob_output, limit=None):\n    \"\"\"\n    Read the XML wikipedia data and parse out intra-wiki links to estimate prior probabilities.\n    The full file takes about 2-3h to parse 1100M lines.\n    It works relatively fast because it runs line by line, irrelevant of which article the intrawiki is from,\n    though dev test articles are excluded in order not to get an artificially strong baseline.\n    \"\"\"\n    cnt = 0\n    read_id = False\n    current_article_id = None\n    with bz2.open(wikipedia_input, mode=\"rb\") as file:\n        line = file.readline()\n        while line and (not limit or cnt < limit):\n            if cnt % 25000000 == 0 and cnt > 0:\n                logger.info(\"processed {} lines of Wikipedia XML dump\".format(cnt))\n            clean_line = line.strip().decode(\"utf-8\")\n\n            # we attempt at reading the article's ID (but not the revision or contributor ID)\n            if \"<revision>\" in clean_line or \"<contributor>\" in clean_line:\n                read_id = False\n            if \"<page>\" in clean_line:\n                read_id = True\n\n            if read_id:\n                ids = id_regex.search(clean_line)\n                if ids:\n                    current_article_id = ids[0]\n\n            # only processing prior probabilities from true training (non-dev) articles\n            if not is_dev(current_article_id):\n                aliases, entities, normalizations = get_wp_links(clean_line)\n                for alias, entity, norm in zip(aliases, entities, normalizations):\n                    _store_alias(\n                        alias, entity, normalize_alias=norm, normalize_entity=True\n                    )\n\n            line = file.readline()\n            cnt += 1\n        logger.info(\"processed {} lines of Wikipedia XML dump\".format(cnt))\n    logger.info(\"Finished. processed {} lines of Wikipedia XML dump\".format(cnt))\n\n    # write all aliases and their entities and count occurrences to file\n    with prior_prob_output.open(\"w\", encoding=\"utf8\") as outputfile:\n        outputfile.write(\"alias\" + \"|\" + \"count\" + \"|\" + \"entity\" + \"\\n\")\n        for alias, alias_dict in sorted(map_alias_to_link.items(), key=lambda x: x[0]):\n            s_dict = sorted(alias_dict.items(), key=lambda x: x[1], reverse=True)\n            for entity, count in s_dict:\n                outputfile.write(alias + \"|\" + str(count) + \"|\" + entity + \"\\n\")",
                "def _store_alias(alias, entity, normalize_alias=False, normalize_entity=True):\n    alias = alias.strip()\n    entity = entity.strip()\n\n    # remove everything after # as this is not part of the title but refers to a specific paragraph\n    if normalize_entity:\n        # wikipedia titles are always capitalized\n        entity = _capitalize_first(entity.split(\"#\")[0])\n    if normalize_alias:\n        alias = alias.split(\"#\")[0]\n\n    if alias and entity:\n        alias_dict = map_alias_to_link.get(alias, dict())\n        entity_count = alias_dict.get(entity, 0)\n        alias_dict[entity] = entity_count + 1\n        map_alias_to_link[alias] = alias_dict",
                "def get_wp_links(text):\n    aliases = []\n    entities = []\n    normalizations = []\n\n    matches = link_regex.findall(text)\n    for match in matches:\n        match = match[2:][:-2].replace(\"_\", \" \").strip()\n\n        if ns_regex.match(match):\n            pass  # ignore the entity if it points to a \"meta\" page\n\n        # this is a simple [[link]], with the alias the same as the mention\n        elif \"|\" not in match:\n            aliases.append(match)\n            entities.append(match)\n            normalizations.append(True)\n\n        # in wiki format, the link is written as [[entity|alias]]\n        else:\n            splits = match.split(\"|\")\n            entity = splits[0].strip()\n            alias = splits[1].strip()\n            # specific wiki format  [[alias (specification)|]]\n            if len(alias) == 0 and \"(\" in entity:\n                alias = entity.split(\"(\")[0]\n                aliases.append(alias)\n                entities.append(entity)\n                normalizations.append(False)\n            else:\n                aliases.append(alias)\n                entities.append(entity)\n                normalizations.append(False)\n\n    return aliases, entities, normalizations",
                "def _capitalize_first(text):\n    if not text:\n        return None\n    result = text[0].capitalize()\n    if len(result) > 0:\n        result += text[1:]\n    return result",
                "def create_training_and_desc(\n    wp_input, def_input, desc_output, training_output, parse_desc, limit=None\n):\n    wp_to_id = io.read_title_to_id(def_input)\n    _process_wikipedia_texts(\n        wp_input, wp_to_id, desc_output, training_output, parse_desc, limit\n    )",
                "def _process_wikipedia_texts(\n    wikipedia_input, wp_to_id, output, training_output, parse_descriptions, limit=None\n):\n    \"\"\"\n    Read the XML wikipedia data to parse out training data:\n    raw text data + positive instances\n    \"\"\"\n\n    read_ids = set()\n\n    with output.open(\"a\", encoding=\"utf8\") as descr_file, training_output.open(\n        \"w\", encoding=\"utf8\"\n    ) as entity_file:\n        if parse_descriptions:\n            _write_training_description(descr_file, \"WD_id\", \"description\")\n        with bz2.open(wikipedia_input, mode=\"rb\") as file:\n            article_count = 0\n            article_text = \"\"\n            article_title = None\n            article_id = None\n            reading_text = False\n            reading_revision = False\n\n            for line in file:\n                clean_line = line.strip().decode(\"utf-8\")\n\n                if clean_line == \"<revision>\":\n                    reading_revision = True\n                elif clean_line == \"</revision>\":\n                    reading_revision = False\n\n                # Start reading new page\n                if clean_line == \"<page>\":\n                    article_text = \"\"\n                    article_title = None\n                    article_id = None\n                # finished reading this page\n                elif clean_line == \"</page>\":\n                    if article_id:\n                        clean_text, entities = _process_wp_text(\n                            article_title, article_text, wp_to_id\n                        )\n                        if clean_text is not None and entities is not None:\n                            _write_training_entities(\n                                entity_file, article_id, clean_text, entities\n                            )\n\n                            if article_title in wp_to_id and parse_descriptions:\n                                description = \" \".join(\n                                    clean_text[:1000].split(\" \")[:-1]\n                                )\n                                _write_training_description(\n                                    descr_file, wp_to_id[article_title], description\n                                )\n                            article_count += 1\n                            if article_count % 10000 == 0 and article_count > 0:\n                                logger.info(\n                                    \"Processed {} articles\".format(article_count)\n                                )\n                            if limit and article_count >= limit:\n                                break\n                    article_text = \"\"\n                    article_title = None\n                    article_id = None\n                    reading_text = False\n                    reading_revision = False\n\n                # start reading text within a page\n                if \"<text\" in clean_line:\n                    reading_text = True\n\n                if reading_text:\n                    article_text += \" \" + clean_line\n\n                # stop reading text within a page (we assume a new page doesn't start on the same line)\n                if \"</text\" in clean_line:\n                    reading_text = False\n\n                # read the ID of this article (outside the revision portion of the document)\n                if not reading_revision:\n                    ids = id_regex.search(clean_line)\n                    if ids:\n                        article_id = ids[0]\n                        if article_id in read_ids:\n                            logger.info(\n                                \"Found duplicate article ID\", article_id, clean_line\n                            )  # This should never happen ...\n                        read_ids.add(article_id)\n\n                # read the title of this article (outside the revision portion of the document)\n                if not reading_revision:\n                    titles = title_regex.search(clean_line)\n                    if titles:\n                        article_title = titles[0].strip()\n    logger.info(\"Finished. Processed {} articles\".format(article_count))",
                "def _process_wp_text(article_title, article_text, wp_to_id):\n    # ignore meta Wikipedia pages\n    if ns_regex.match(article_title):\n        return None, None\n\n    # remove the text tags\n    text_search = text_regex.search(article_text)\n    if text_search is None:\n        return None, None\n    text = text_search.group(0)\n\n    # stop processing if this is a redirect page\n    if text.startswith(\"#REDIRECT\"):\n        return None, None\n\n    # get the raw text without markup etc, keeping only interwiki links\n    clean_text, entities = _remove_links(_get_clean_wp_text(text), wp_to_id)\n    return clean_text, entities",
                "def _get_clean_wp_text(article_text):\n    clean_text = article_text.strip()\n\n    # remove bolding & italic markup\n    clean_text = clean_text.replace(\"'''\", \"\")\n    clean_text = clean_text.replace(\"''\", \"\")\n\n    # remove nested {{info}} statements by removing the inner/smallest ones first and iterating\n    try_again = True\n    previous_length = len(clean_text)\n    while try_again:\n        clean_text = info_regex.sub(\n            \"\", clean_text\n        )  # non-greedy match excluding a nested {\n        if len(clean_text) < previous_length:\n            try_again = True\n        else:\n            try_again = False\n        previous_length = len(clean_text)\n\n    # remove HTML comments\n    clean_text = html_regex.sub(\"\", clean_text)\n\n    # remove Category and File statements\n    clean_text = category_regex.sub(\"\", clean_text)\n    clean_text = file_regex.sub(\"\", clean_text)\n\n    # remove multiple =\n    while \"==\" in clean_text:\n        clean_text = clean_text.replace(\"==\", \"=\")\n\n    clean_text = clean_text.replace(\". =\", \".\")\n    clean_text = clean_text.replace(\" = \", \". \")\n    clean_text = clean_text.replace(\"= \", \".\")\n    clean_text = clean_text.replace(\" =\", \"\")\n\n    # remove refs (non-greedy match)\n    clean_text = ref_regex.sub(\"\", clean_text)\n    clean_text = ref_2_regex.sub(\"\", clean_text)\n\n    # remove additional wikiformatting\n    clean_text = re.sub(r\"&lt;blockquote&gt;\", \"\", clean_text)\n    clean_text = re.sub(r\"&lt;/blockquote&gt;\", \"\", clean_text)\n\n    # change special characters back to normal ones\n    clean_text = clean_text.replace(r\"&lt;\", \"<\")\n    clean_text = clean_text.replace(r\"&gt;\", \">\")\n    clean_text = clean_text.replace(r\"&quot;\", '\"')\n    clean_text = clean_text.replace(r\"&amp;nbsp;\", \" \")\n    clean_text = clean_text.replace(r\"&amp;\", \"&\")\n\n    # remove multiple spaces\n    while \"  \" in clean_text:\n        clean_text = clean_text.replace(\"  \", \" \")\n\n    return clean_text.strip()",
                "def _remove_links(clean_text, wp_to_id):\n    # read the text char by char to get the right offsets for the interwiki links\n    entities = []\n    final_text = \"\"\n    open_read = 0\n    reading_text = True\n    reading_entity = False\n    reading_mention = False\n    reading_special_case = False\n    entity_buffer = \"\"\n    mention_buffer = \"\"\n    for index, letter in enumerate(clean_text):\n        if letter == \"[\":\n            open_read += 1\n        elif letter == \"]\":\n            open_read -= 1\n        elif letter == \"|\":\n            if reading_text:\n                final_text += letter\n            # switch from reading entity to mention in the [[entity|mention]] pattern\n            elif reading_entity:\n                reading_text = False\n                reading_entity = False\n                reading_mention = True\n            else:\n                reading_special_case = True\n        else:\n            if reading_entity:\n                entity_buffer += letter\n            elif reading_mention:\n                mention_buffer += letter\n            elif reading_text:\n                final_text += letter\n            else:\n                raise ValueError(\"Not sure at point\", clean_text[index - 2 : index + 2])\n\n        if open_read > 2:\n            reading_special_case = True\n\n        if open_read == 2 and reading_text:\n            reading_text = False\n            reading_entity = True\n            reading_mention = False\n\n        # we just finished reading an entity\n        if open_read == 0 and not reading_text:\n            if \"#\" in entity_buffer or entity_buffer.startswith(\":\"):\n                reading_special_case = True\n            # Ignore cases with nested structures like File: handles etc\n            if not reading_special_case:\n                if not mention_buffer:\n                    mention_buffer = entity_buffer\n                start = len(final_text)\n                end = start + len(mention_buffer)\n                qid = wp_to_id.get(entity_buffer, None)\n                if qid:\n                    entities.append((mention_buffer, qid, start, end))\n                final_text += mention_buffer\n\n            entity_buffer = \"\"\n            mention_buffer = \"\"\n\n            reading_text = True\n            reading_entity = False\n            reading_mention = False\n            reading_special_case = False\n    return final_text, entities",
                "def _write_training_description(outputfile, qid, description):\n    if description is not None:\n        line = str(qid) + \"|\" + description + \"\\n\"\n        outputfile.write(line)",
                "def _write_training_entities(outputfile, article_id, clean_text, entities):\n    entities_data = [\n        {\"alias\": ent[0], \"entity\": ent[1], \"start\": ent[2], \"end\": ent[3]}\n        for ent in entities\n    ]\n    line = (\n        json.dumps(\n            {\n                \"article_id\": article_id,\n                \"clean_text\": clean_text,\n                \"entities\": entities_data,\n            },\n            ensure_ascii=False,\n        )\n        + \"\\n\"\n    )\n    outputfile.write(line)",
                "def read_training_indices(entity_file_path):\n    \"\"\" This method creates two lists of indices into the training file: one with indices for the\n     training examples, and one for the dev examples.\"\"\"\n    train_indices = []\n    dev_indices = []\n\n    with entity_file_path.open(\"r\", encoding=\"utf8\") as file:\n        for i, line in enumerate(file):\n            example = json.loads(line)\n            article_id = example[\"article_id\"]\n            clean_text = example[\"clean_text\"]\n\n            if is_valid_article(clean_text):\n                if is_dev(article_id):\n                    dev_indices.append(i)\n                else:\n                    train_indices.append(i)\n\n    return train_indices, dev_indices",
                "def read_el_docs_golds(nlp, entity_file_path, dev, line_ids, kb, labels_discard=None):\n    \"\"\" This method provides training/dev examples that correspond to the entity annotations found by the nlp object.\n     For training, it will include both positive and negative examples by using the candidate generator from the kb.\n     For testing (kb=None), it will include all positive examples only.\"\"\"\n    if not labels_discard:\n        labels_discard = []\n\n    max_index = max(line_ids)\n\n    with entity_file_path.open(\"r\", encoding=\"utf8\") as _file:\n        line = _file.readline()\n        i = 0\n        while line and i < max_index:\n            if i in line_ids:\n                example = json.loads(line)\n                article_id = example[\"article_id\"]\n                clean_text = example[\"clean_text\"]\n                entities = example[\"entities\"]\n\n                if dev != is_dev(article_id) or not is_valid_article(clean_text):\n                    continue\n\n                doc = nlp(clean_text)\n                gold = _get_gold_parse(doc, entities, dev=dev, kb=kb, labels_discard=labels_discard)\n                if gold and len(gold.links) > 0:\n                    yield doc, gold\n            i += 1\n            line = _file.readline()",
                "def _get_gold_parse(doc, entities, dev, kb, labels_discard):\n    gold_entities = {}\n    tagged_ent_positions = {\n        (ent.start_char, ent.end_char): ent\n        for ent in doc.ents\n        if ent.label_ not in labels_discard\n    }\n\n    for entity in entities:\n        entity_id = entity[\"entity\"]\n        alias = entity[\"alias\"]\n        start = entity[\"start\"]\n        end = entity[\"end\"]\n\n        candidate_ids = []\n        if kb and not dev:\n            candidates = kb.get_candidates(alias)\n            candidate_ids = [cand.entity_ for cand in candidates]\n\n        tagged_ent = tagged_ent_positions.get((start, end), None)\n        if tagged_ent:\n            # TODO: check that alias == doc.text[start:end]\n            should_add_ent = (dev or entity_id in candidate_ids) and is_valid_sentence(\n                tagged_ent.sent.text\n            )\n\n            if should_add_ent:\n                value_by_id = {entity_id: 1.0}\n                if not dev:\n                    random.shuffle(candidate_ids)\n                    value_by_id.update(\n                        {kb_id: 0.0 for kb_id in candidate_ids if kb_id != entity_id}\n                    )\n                gold_entities[(start, end)] = value_by_id\n\n    return GoldParse(doc, links=gold_entities)",
                "def is_dev(article_id):\n    if not article_id:\n        return False\n    return article_id.endswith(\"3\")",
                "def is_valid_article(doc_text):\n    # custom length cut-off\n    return 10 < len(doc_text) < 30000",
                "def is_valid_sentence(sent_text):\n    if not 10 < len(sent_text) < 3000:\n        # custom length cut-off\n        return False\n\n    if sent_text.strip().startswith(\"*\") or sent_text.strip().startswith(\"#\"):\n        # remove 'enumeration' sentences (occurs often on Wikipedia)\n        return False\n\n    return True"
            ],
            "inscope_function_signatures": [
                "read_prior_probs(wikipedia_input, prior_prob_output, limit=None)",
                "_store_alias(alias, entity, normalize_alias=False, normalize_entity=True)",
                "get_wp_links(text)",
                "_capitalize_first(text)",
                "create_training_and_desc(wp_input, def_input, desc_output, training_output, parse_desc, limit=None)",
                "_process_wikipedia_texts(wikipedia_input, wp_to_id, output, training_output, parse_descriptions, limit=None)",
                "_process_wp_text(article_title, article_text, wp_to_id)",
                "_get_clean_wp_text(article_text)",
                "_remove_links(clean_text, wp_to_id)",
                "_write_training_description(outputfile, qid, description)",
                "_write_training_entities(outputfile, article_id, clean_text, entities)",
                "read_training_indices(entity_file_path)",
                "read_el_docs_golds(nlp, entity_file_path, dev, line_ids, kb, labels_discard=None)",
                "_get_gold_parse(doc, entities, dev, kb, labels_discard)",
                "is_dev(article_id)",
                "is_valid_article(doc_text)",
                "is_valid_sentence(sent_text)"
            ],
            "variables_in_file": {
                "ENTITY_FILE": [
                    25
                ],
                "map_alias_to_link": [
                    106,
                    27,
                    124,
                    127
                ],
                "dict": [
                    27,
                    124
                ],
                "logger": [
                    100,
                    101,
                    76,
                    269,
                    241,
                    279,
                    29
                ],
                "logging.getLogger": [
                    29
                ],
                "logging": [
                    29
                ],
                "__name__": [
                    29
                ],
                "title_regex": [
                    276,
                    31
                ],
                "re.compile": [
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    40,
                    47,
                    53,
                    59,
                    31
                ],
                "re": [
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    40,
                    47,
                    53,
                    343,
                    344,
                    59,
                    31
                ],
                "id_regex": [
                    32,
                    265,
                    86
                ],
                "text_regex": [
                    288,
                    33
                ],
                "info_regex": [
                    313,
                    34
                ],
                "html_regex": [
                    323,
                    35
                ],
                "ref_regex": [
                    339,
                    36
                ],
                "ref_2_regex": [
                    340,
                    37
                ],
                "link_regex": [
                    40,
                    135
                ],
                "ns_regex": [
                    43,
                    139,
                    46,
                    47,
                    284
                ],
                "ns": [
                    45,
                    46
                ],
                "WP_META_NAMESPACE": [
                    45
                ],
                "re.IGNORECASE": [
                    47
                ],
                "files": [
                    49,
                    51,
                    52,
                    53
                ],
                "f": [
                    50,
                    51
                ],
                "WP_FILE_NAMESPACE": [
                    50
                ],
                "len": [
                    320,
                    154,
                    551,
                    171,
                    555,
                    499,
                    52,
                    311,
                    412,
                    58,
                    316,
                    413
                ],
                "file_regex": [
                    53,
                    327
                ],
                "cats": [
                    57,
                    58,
                    59,
                    55
                ],
                "c": [
                    56,
                    57
                ],
                "WP_CATEGORY_NAMESPACE": [
                    56
                ],
                "category_regex": [
                    59,
                    326
                ],
                "cnt": [
                    99,
                    100,
                    69,
                    101,
                    74,
                    75,
                    76
                ],
                "read_id": [
                    81,
                    83,
                    85,
                    70
                ],
                "current_article_id": [
                    88,
                    91,
                    71
                ],
                "bz2.open": [
                    72,
                    200
                ],
                "bz2": [
                    72,
                    200
                ],
                "wikipedia_input": [
                    72,
                    200
                ],
                "file": [
                    98,
                    72,
                    73,
                    200,
                    460,
                    461,
                    208
                ],
                "line": [
                    98,
                    451,
                    485,
                    487,
                    73,
                    74,
                    489,
                    77,
                    461,
                    431,
                    208,
                    209,
                    432,
                    462,
                    502,
                    440
                ],
                "file.readline": [
                    73,
                    98
                ],
                "limit": [
                    74,
                    244,
                    181
                ],
                "logger.info": [
                    100,
                    101,
                    76,
                    269,
                    241,
                    279
                ],
                "format": [
                    100,
                    101,
                    76,
                    242,
                    279
                ],
                "clean_line": [
                    257,
                    260,
                    265,
                    77,
                    270,
                    80,
                    209,
                    82,
                    211,
                    276,
                    213,
                    86,
                    217,
                    92,
                    253,
                    222
                ],
                "decode": [
                    209,
                    77
                ],
                "line.strip": [
                    209,
                    77
                ],
                "ids": [
                    265,
                    266,
                    267,
                    86,
                    87,
                    88
                ],
                "id_regex.search": [
                    265,
                    86
                ],
                "is_dev": [
                    91,
                    467,
                    494
                ],
                "aliases": [
                    160,
                    131,
                    164,
                    92,
                    144,
                    156,
                    93
                ],
                "entities": [
                    513,
                    132,
                    145,
                    157,
                    416,
                    161,
                    164,
                    298,
                    299,
                    426,
                    438,
                    92,
                    93,
                    224,
                    227,
                    229,
                    362,
                    492,
                    498
                ],
                "normalizations": [
                    162,
                    164,
                    133,
                    146,
                    92,
                    93,
                    158
                ],
                "get_wp_links": [
                    92
                ],
                "alias": [
                    160,
                    515,
                    521,
                    106,
                    155,
                    109,
                    127,
                    113,
                    156,
                    152,
                    121,
                    154,
                    123,
                    124,
                    93,
                    95
                ],
                "entity": [
                    513,
                    514,
                    515,
                    516,
                    517,
                    151,
                    154,
                    155,
                    157,
                    161,
                    93,
                    95,
                    108,
                    109,
                    114,
                    119,
                    123,
                    125,
                    126
                ],
                "norm": [
                    93,
                    95
                ],
                "zip": [
                    93
                ],
                "_store_alias": [
                    94
                ],
                "prior_prob_output.open": [
                    104
                ],
                "prior_prob_output": [
                    104
                ],
                "outputfile": [
                    451,
                    104,
                    105,
                    109,
                    432
                ],
                "outputfile.write": [
                    432,
                    105,
                    451,
                    109
                ],
                "alias_dict": [
                    106,
                    107,
                    124,
                    125,
                    126,
                    127
                ],
                "sorted": [
                    106,
                    107
                ],
                "map_alias_to_link.items": [
                    106
                ],
                "x": [
                    106,
                    107
                ],
                "s_dict": [
                    107,
                    108
                ],
                "alias_dict.items": [
                    107
                ],
                "count": [
                    108,
                    109
                ],
                "str": [
                    109,
                    431
                ],
                "alias.strip": [
                    113
                ],
                "entity.strip": [
                    114
                ],
                "normalize_entity": [
                    117
                ],
                "_capitalize_first": [
                    119
                ],
                "entity.split": [
                    155,
                    119
                ],
                "normalize_alias": [
                    120
                ],
                "alias.split": [
                    121
                ],
                "map_alias_to_link.get": [
                    124
                ],
                "entity_count": [
                    125,
                    126
                ],
                "alias_dict.get": [
                    125
                ],
                "matches": [
                    136,
                    135
                ],
                "link_regex.findall": [
                    135
                ],
                "text": [
                    291,
                    294,
                    135,
                    168,
                    170,
                    298,
                    172
                ],
                "match": [
                    136,
                    137,
                    139,
                    143,
                    144,
                    145,
                    150
                ],
                "strip": [
                    152,
                    137,
                    278,
                    151
                ],
                "replace": [
                    137
                ],
                "ns_regex.match": [
                    139,
                    284
                ],
                "aliases.append": [
                    144,
                    156,
                    160
                ],
                "entities.append": [
                    416,
                    145,
                    161,
                    157
                ],
                "normalizations.append": [
                    162,
                    146,
                    158
                ],
                "splits": [
                    152,
                    150,
                    151
                ],
                "match.split": [
                    150
                ],
                "result": [
                    170,
                    171,
                    172,
                    173
                ],
                "capitalize": [
                    170
                ],
                "wp_to_id": [
                    225,
                    232,
                    298,
                    237,
                    179,
                    181,
                    414
                ],
                "io.read_title_to_id": [
                    179
                ],
                "io": [
                    179
                ],
                "def_input": [
                    179
                ],
                "_process_wikipedia_texts": [
                    180
                ],
                "wp_input": [
                    181
                ],
                "desc_output": [
                    181
                ],
                "training_output": [
                    195,
                    181
                ],
                "parse_desc": [
                    181
                ],
                "read_ids": [
                    272,
                    193,
                    268
                ],
                "set": [
                    193
                ],
                "output.open": [
                    195
                ],
                "output": [
                    195
                ],
                "descr_file": [
                    195,
                    237,
                    199
                ],
                "training_output.open": [
                    195
                ],
                "entity_file": [
                    229,
                    197
                ],
                "parse_descriptions": [
                    232,
                    198
                ],
                "_write_training_description": [
                    236,
                    199
                ],
                "article_count": [
                    201,
                    239,
                    240,
                    242,
                    244,
                    279
                ],
                "article_text": [
                    288,
                    225,
                    257,
                    202,
                    303,
                    246,
                    218
                ],
                "article_title": [
                    225,
                    232,
                    203,
                    237,
                    278,
                    247,
                    219,
                    284
                ],
                "article_id": [
                    544,
                    546,
                    229,
                    490,
                    267,
                    204,
                    268,
                    270,
                    463,
                    272,
                    494,
                    467,
                    248,
                    443,
                    220,
                    223
                ],
                "reading_text": [
                    256,
                    261,
                    422,
                    391,
                    377,
                    205,
                    365,
                    399,
                    400,
                    405,
                    249,
                    381,
                    254
                ],
                "reading_revision": [
                    264,
                    206,
                    275,
                    212,
                    214,
                    250
                ],
                "clean_text": [
                    394,
                    298,
                    299,
                    303,
                    306,
                    307,
                    311,
                    313,
                    314,
                    316,
                    444,
                    320,
                    323,
                    326,
                    327,
                    330,
                    331,
                    333,
                    334,
                    335,
                    336,
                    464,
                    466,
                    339,
                    340,
                    343,
                    344,
                    347,
                    348,
                    349,
                    350,
                    351,
                    224,
                    354,
                    227,
                    355,
                    229,
                    357,
                    234,
                    491,
                    494,
                    497,
                    371
                ],
                "_process_wp_text": [
                    224
                ],
                "_write_training_entities": [
                    228
                ],
                "description": [
                    233,
                    237,
                    430,
                    431
                ],
                "join": [
                    233
                ],
                "split": [
                    234
                ],
                "read_ids.add": [
                    272
                ],
                "titles": [
                    276,
                    277,
                    278
                ],
                "title_regex.search": [
                    276
                ],
                "text_search": [
                    288,
                    289,
                    291
                ],
                "text_regex.search": [
                    288
                ],
                "text_search.group": [
                    291
                ],
                "text.startswith": [
                    294
                ],
                "_remove_links": [
                    298
                ],
                "_get_clean_wp_text": [
                    298
                ],
                "article_text.strip": [
                    303
                ],
                "clean_text.replace": [
                    355,
                    331,
                    333,
                    334,
                    335,
                    336,
                    306,
                    307,
                    347,
                    348,
                    349,
                    350,
                    351
                ],
                "try_again": [
                    312,
                    317,
                    310,
                    319
                ],
                "previous_length": [
                    320,
                    316,
                    311
                ],
                "info_regex.sub": [
                    313
                ],
                "html_regex.sub": [
                    323
                ],
                "category_regex.sub": [
                    326
                ],
                "file_regex.sub": [
                    327
                ],
                "ref_regex.sub": [
                    339
                ],
                "ref_2_regex.sub": [
                    340
                ],
                "re.sub": [
                    344,
                    343
                ],
                "clean_text.strip": [
                    357
                ],
                "final_text": [
                    417,
                    392,
                    426,
                    363,
                    378,
                    412
                ],
                "open_read": [
                    396,
                    364,
                    399,
                    373,
                    405,
                    375
                ],
                "reading_entity": [
                    387,
                    423,
                    366,
                    401,
                    380,
                    382
                ],
                "reading_mention": [
                    389,
                    424,
                    367,
                    402,
                    383
                ],
                "reading_special_case": [
                    385,
                    425,
                    397,
                    368,
                    407,
                    409
                ],
                "entity_buffer": [
                    419,
                    388,
                    369,
                    406,
                    411,
                    414
                ],
                "mention_buffer": [
                    416,
                    417,
                    420,
                    390,
                    370,
                    410,
                    411,
                    413
                ],
                "index": [
                    394,
                    371
                ],
                "letter": [
                    388,
                    390,
                    392,
                    371,
                    372,
                    374,
                    376,
                    378
                ],
                "enumerate": [
                    371,
                    461
                ],
                "ValueError": [
                    394
                ],
                "entity_buffer.startswith": [
                    406
                ],
                "start": [
                    416,
                    516,
                    524,
                    538,
                    412,
                    413
                ],
                "end": [
                    416,
                    517,
                    524,
                    538,
                    413
                ],
                "qid": [
                    416,
                    431,
                    414,
                    415
                ],
                "wp_to_id.get": [
                    414
                ],
                "entities_data": [
                    436,
                    445
                ],
                "ent": [
                    437,
                    438,
                    508,
                    509,
                    510
                ],
                "json.dumps": [
                    441
                ],
                "json": [
                    441,
                    489,
                    462
                ],
                "train_indices": [
                    472,
                    457,
                    470
                ],
                "dev_indices": [
                    472,
                    458,
                    468
                ],
                "entity_file_path.open": [
                    460,
                    484
                ],
                "entity_file_path": [
                    460,
                    484
                ],
                "i": [
                    486,
                    487,
                    488,
                    461,
                    468,
                    501,
                    470
                ],
                "example": [
                    489,
                    490,
                    491,
                    492,
                    462,
                    463,
                    464
                ],
                "json.loads": [
                    489,
                    462
                ],
                "is_valid_article": [
                    466,
                    494
                ],
                "dev_indices.append": [
                    468
                ],
                "train_indices.append": [
                    470
                ],
                "labels_discard": [
                    480,
                    498,
                    510,
                    479
                ],
                "max_index": [
                    482,
                    487
                ],
                "max": [
                    482
                ],
                "line_ids": [
                    488,
                    482
                ],
                "_file": [
                    484,
                    485,
                    502
                ],
                "_file.readline": [
                    485,
                    502
                ],
                "dev": [
                    520,
                    494,
                    527,
                    498,
                    533
                ],
                "doc": [
                    497,
                    498,
                    500,
                    540,
                    509
                ],
                "nlp": [
                    497
                ],
                "gold": [
                    498,
                    499,
                    500
                ],
                "_get_gold_parse": [
                    498
                ],
                "kb": [
                    520,
                    521,
                    498
                ],
                "gold.links": [
                    499
                ],
                "gold_entities": [
                    506,
                    538,
                    540
                ],
                "tagged_ent_positions": [
                    507,
                    524
                ],
                "ent.start_char": [
                    508
                ],
                "ent.end_char": [
                    508
                ],
                "doc.ents": [
                    509
                ],
                "ent.label_": [
                    510
                ],
                "entity_id": [
                    536,
                    514,
                    532,
                    527
                ],
                "candidate_ids": [
                    519,
                    522,
                    527,
                    534,
                    536
                ],
                "candidates": [
                    521,
                    522
                ],
                "kb.get_candidates": [
                    521
                ],
                "cand.entity_": [
                    522
                ],
                "cand": [
                    522
                ],
                "tagged_ent": [
                    528,
                    524,
                    525
                ],
                "tagged_ent_positions.get": [
                    524
                ],
                "should_add_ent": [
                    531,
                    527
                ],
                "is_valid_sentence": [
                    527
                ],
                "tagged_ent.sent.text": [
                    528
                ],
                "tagged_ent.sent": [
                    528
                ],
                "value_by_id": [
                    538,
                    532,
                    535
                ],
                "random.shuffle": [
                    534
                ],
                "random": [
                    534
                ],
                "value_by_id.update": [
                    535
                ],
                "kb_id": [
                    536
                ],
                "GoldParse": [
                    540
                ],
                "article_id.endswith": [
                    546
                ],
                "doc_text": [
                    551
                ],
                "sent_text": [
                    555,
                    559
                ],
                "startswith": [
                    559
                ],
                "sent_text.strip": [
                    559
                ]
            },
            "filtered_variables_in_file": {
                "ENTITY_FILE": [
                    25
                ],
                "map_alias_to_link": [
                    106,
                    27,
                    124,
                    127
                ],
                "logger": [
                    100,
                    101,
                    76,
                    269,
                    241,
                    279,
                    29
                ],
                "logging.getLogger": [
                    29
                ],
                "logging": [
                    29
                ],
                "title_regex": [
                    276,
                    31
                ],
                "re.compile": [
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    40,
                    47,
                    53,
                    59,
                    31
                ],
                "re": [
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    40,
                    47,
                    53,
                    343,
                    344,
                    59,
                    31
                ],
                "id_regex": [
                    32,
                    265,
                    86
                ],
                "text_regex": [
                    288,
                    33
                ],
                "info_regex": [
                    313,
                    34
                ],
                "html_regex": [
                    323,
                    35
                ],
                "ref_regex": [
                    339,
                    36
                ],
                "ref_2_regex": [
                    340,
                    37
                ],
                "link_regex": [
                    40,
                    135
                ],
                "ns_regex": [
                    43,
                    139,
                    46,
                    47,
                    284
                ],
                "ns": [
                    45,
                    46
                ],
                "WP_META_NAMESPACE": [
                    45
                ],
                "re.IGNORECASE": [
                    47
                ],
                "files": [
                    49,
                    51,
                    52,
                    53
                ],
                "f": [
                    50,
                    51
                ],
                "WP_FILE_NAMESPACE": [
                    50
                ],
                "file_regex": [
                    53,
                    327
                ],
                "cats": [
                    57,
                    58,
                    59,
                    55
                ],
                "c": [
                    56,
                    57
                ],
                "WP_CATEGORY_NAMESPACE": [
                    56
                ],
                "category_regex": [
                    59,
                    326
                ],
                "cnt": [
                    99,
                    100,
                    69,
                    101,
                    74,
                    75,
                    76
                ],
                "read_id": [
                    81,
                    83,
                    85,
                    70
                ],
                "current_article_id": [
                    88,
                    91,
                    71
                ],
                "bz2.open": [
                    72,
                    200
                ],
                "bz2": [
                    72,
                    200
                ],
                "wikipedia_input": [
                    72,
                    200
                ],
                "file": [
                    98,
                    72,
                    73,
                    200,
                    460,
                    461,
                    208
                ],
                "line": [
                    98,
                    451,
                    485,
                    487,
                    73,
                    74,
                    489,
                    77,
                    461,
                    431,
                    208,
                    209,
                    432,
                    462,
                    502,
                    440
                ],
                "file.readline": [
                    73,
                    98
                ],
                "limit": [
                    74,
                    244,
                    181
                ],
                "logger.info": [
                    100,
                    101,
                    76,
                    269,
                    241,
                    279
                ],
                "clean_line": [
                    257,
                    260,
                    265,
                    77,
                    270,
                    80,
                    209,
                    82,
                    211,
                    276,
                    213,
                    86,
                    217,
                    92,
                    253,
                    222
                ],
                "decode": [
                    209,
                    77
                ],
                "line.strip": [
                    209,
                    77
                ],
                "ids": [
                    265,
                    266,
                    267,
                    86,
                    87,
                    88
                ],
                "id_regex.search": [
                    265,
                    86
                ],
                "is_dev": [
                    91,
                    467,
                    494
                ],
                "aliases": [
                    160,
                    131,
                    164,
                    92,
                    144,
                    156,
                    93
                ],
                "entities": [
                    513,
                    132,
                    145,
                    157,
                    416,
                    161,
                    164,
                    298,
                    299,
                    426,
                    438,
                    92,
                    93,
                    224,
                    227,
                    229,
                    362,
                    492,
                    498
                ],
                "normalizations": [
                    162,
                    164,
                    133,
                    146,
                    92,
                    93,
                    158
                ],
                "get_wp_links": [
                    92
                ],
                "alias": [
                    160,
                    515,
                    521,
                    106,
                    155,
                    109,
                    127,
                    113,
                    156,
                    152,
                    121,
                    154,
                    123,
                    124,
                    93,
                    95
                ],
                "entity": [
                    513,
                    514,
                    515,
                    516,
                    517,
                    151,
                    154,
                    155,
                    157,
                    161,
                    93,
                    95,
                    108,
                    109,
                    114,
                    119,
                    123,
                    125,
                    126
                ],
                "norm": [
                    93,
                    95
                ],
                "_store_alias": [
                    94
                ],
                "prior_prob_output.open": [
                    104
                ],
                "prior_prob_output": [
                    104
                ],
                "outputfile": [
                    451,
                    104,
                    105,
                    109,
                    432
                ],
                "outputfile.write": [
                    432,
                    105,
                    451,
                    109
                ],
                "alias_dict": [
                    106,
                    107,
                    124,
                    125,
                    126,
                    127
                ],
                "map_alias_to_link.items": [
                    106
                ],
                "x": [
                    106,
                    107
                ],
                "s_dict": [
                    107,
                    108
                ],
                "alias_dict.items": [
                    107
                ],
                "count": [
                    108,
                    109
                ],
                "alias.strip": [
                    113
                ],
                "entity.strip": [
                    114
                ],
                "normalize_entity": [
                    117
                ],
                "_capitalize_first": [
                    119
                ],
                "entity.split": [
                    155,
                    119
                ],
                "normalize_alias": [
                    120
                ],
                "alias.split": [
                    121
                ],
                "map_alias_to_link.get": [
                    124
                ],
                "entity_count": [
                    125,
                    126
                ],
                "alias_dict.get": [
                    125
                ],
                "matches": [
                    136,
                    135
                ],
                "link_regex.findall": [
                    135
                ],
                "text": [
                    291,
                    294,
                    135,
                    168,
                    170,
                    298,
                    172
                ],
                "match": [
                    136,
                    137,
                    139,
                    143,
                    144,
                    145,
                    150
                ],
                "strip": [
                    152,
                    137,
                    278,
                    151
                ],
                "replace": [
                    137
                ],
                "ns_regex.match": [
                    139,
                    284
                ],
                "aliases.append": [
                    144,
                    156,
                    160
                ],
                "entities.append": [
                    416,
                    145,
                    161,
                    157
                ],
                "normalizations.append": [
                    162,
                    146,
                    158
                ],
                "splits": [
                    152,
                    150,
                    151
                ],
                "match.split": [
                    150
                ],
                "result": [
                    170,
                    171,
                    172,
                    173
                ],
                "capitalize": [
                    170
                ],
                "wp_to_id": [
                    225,
                    232,
                    298,
                    237,
                    179,
                    181,
                    414
                ],
                "io.read_title_to_id": [
                    179
                ],
                "io": [
                    179
                ],
                "def_input": [
                    179
                ],
                "_process_wikipedia_texts": [
                    180
                ],
                "wp_input": [
                    181
                ],
                "desc_output": [
                    181
                ],
                "training_output": [
                    195,
                    181
                ],
                "parse_desc": [
                    181
                ],
                "read_ids": [
                    272,
                    193,
                    268
                ],
                "output.open": [
                    195
                ],
                "output": [
                    195
                ],
                "descr_file": [
                    195,
                    237,
                    199
                ],
                "training_output.open": [
                    195
                ],
                "entity_file": [
                    229,
                    197
                ],
                "parse_descriptions": [
                    232,
                    198
                ],
                "_write_training_description": [
                    236,
                    199
                ],
                "article_count": [
                    201,
                    239,
                    240,
                    242,
                    244,
                    279
                ],
                "article_text": [
                    288,
                    225,
                    257,
                    202,
                    303,
                    246,
                    218
                ],
                "article_title": [
                    225,
                    232,
                    203,
                    237,
                    278,
                    247,
                    219,
                    284
                ],
                "article_id": [
                    544,
                    546,
                    229,
                    490,
                    267,
                    204,
                    268,
                    270,
                    463,
                    272,
                    494,
                    467,
                    248,
                    443,
                    220,
                    223
                ],
                "reading_text": [
                    256,
                    261,
                    422,
                    391,
                    377,
                    205,
                    365,
                    399,
                    400,
                    405,
                    249,
                    381,
                    254
                ],
                "reading_revision": [
                    264,
                    206,
                    275,
                    212,
                    214,
                    250
                ],
                "clean_text": [
                    394,
                    298,
                    299,
                    303,
                    306,
                    307,
                    311,
                    313,
                    314,
                    316,
                    444,
                    320,
                    323,
                    326,
                    327,
                    330,
                    331,
                    333,
                    334,
                    335,
                    336,
                    464,
                    466,
                    339,
                    340,
                    343,
                    344,
                    347,
                    348,
                    349,
                    350,
                    351,
                    224,
                    354,
                    227,
                    355,
                    229,
                    357,
                    234,
                    491,
                    494,
                    497,
                    371
                ],
                "_process_wp_text": [
                    224
                ],
                "_write_training_entities": [
                    228
                ],
                "description": [
                    233,
                    237,
                    430,
                    431
                ],
                "join": [
                    233
                ],
                "split": [
                    234
                ],
                "read_ids.add": [
                    272
                ],
                "titles": [
                    276,
                    277,
                    278
                ],
                "title_regex.search": [
                    276
                ],
                "text_search": [
                    288,
                    289,
                    291
                ],
                "text_regex.search": [
                    288
                ],
                "text_search.group": [
                    291
                ],
                "text.startswith": [
                    294
                ],
                "_remove_links": [
                    298
                ],
                "_get_clean_wp_text": [
                    298
                ],
                "article_text.strip": [
                    303
                ],
                "clean_text.replace": [
                    355,
                    331,
                    333,
                    334,
                    335,
                    336,
                    306,
                    307,
                    347,
                    348,
                    349,
                    350,
                    351
                ],
                "try_again": [
                    312,
                    317,
                    310,
                    319
                ],
                "previous_length": [
                    320,
                    316,
                    311
                ],
                "info_regex.sub": [
                    313
                ],
                "html_regex.sub": [
                    323
                ],
                "category_regex.sub": [
                    326
                ],
                "file_regex.sub": [
                    327
                ],
                "ref_regex.sub": [
                    339
                ],
                "ref_2_regex.sub": [
                    340
                ],
                "re.sub": [
                    344,
                    343
                ],
                "clean_text.strip": [
                    357
                ],
                "final_text": [
                    417,
                    392,
                    426,
                    363,
                    378,
                    412
                ],
                "open_read": [
                    396,
                    364,
                    399,
                    373,
                    405,
                    375
                ],
                "reading_entity": [
                    387,
                    423,
                    366,
                    401,
                    380,
                    382
                ],
                "reading_mention": [
                    389,
                    424,
                    367,
                    402,
                    383
                ],
                "reading_special_case": [
                    385,
                    425,
                    397,
                    368,
                    407,
                    409
                ],
                "entity_buffer": [
                    419,
                    388,
                    369,
                    406,
                    411,
                    414
                ],
                "mention_buffer": [
                    416,
                    417,
                    420,
                    390,
                    370,
                    410,
                    411,
                    413
                ],
                "index": [
                    394,
                    371
                ],
                "letter": [
                    388,
                    390,
                    392,
                    371,
                    372,
                    374,
                    376,
                    378
                ],
                "entity_buffer.startswith": [
                    406
                ],
                "start": [
                    416,
                    516,
                    524,
                    538,
                    412,
                    413
                ],
                "end": [
                    416,
                    517,
                    524,
                    538,
                    413
                ],
                "qid": [
                    416,
                    431,
                    414,
                    415
                ],
                "wp_to_id.get": [
                    414
                ],
                "entities_data": [
                    436,
                    445
                ],
                "ent": [
                    437,
                    438,
                    508,
                    509,
                    510
                ],
                "json.dumps": [
                    441
                ],
                "json": [
                    441,
                    489,
                    462
                ],
                "train_indices": [
                    472,
                    457,
                    470
                ],
                "dev_indices": [
                    472,
                    458,
                    468
                ],
                "entity_file_path.open": [
                    460,
                    484
                ],
                "entity_file_path": [
                    460,
                    484
                ],
                "i": [
                    486,
                    487,
                    488,
                    461,
                    468,
                    501,
                    470
                ],
                "example": [
                    489,
                    490,
                    491,
                    492,
                    462,
                    463,
                    464
                ],
                "json.loads": [
                    489,
                    462
                ],
                "is_valid_article": [
                    466,
                    494
                ],
                "dev_indices.append": [
                    468
                ],
                "train_indices.append": [
                    470
                ],
                "labels_discard": [
                    480,
                    498,
                    510,
                    479
                ],
                "max_index": [
                    482,
                    487
                ],
                "line_ids": [
                    488,
                    482
                ],
                "_file": [
                    484,
                    485,
                    502
                ],
                "_file.readline": [
                    485,
                    502
                ],
                "dev": [
                    520,
                    494,
                    527,
                    498,
                    533
                ],
                "doc": [
                    497,
                    498,
                    500,
                    540,
                    509
                ],
                "nlp": [
                    497
                ],
                "gold": [
                    498,
                    499,
                    500
                ],
                "_get_gold_parse": [
                    498
                ],
                "kb": [
                    520,
                    521,
                    498
                ],
                "gold.links": [
                    499
                ],
                "gold_entities": [
                    506,
                    538,
                    540
                ],
                "tagged_ent_positions": [
                    507,
                    524
                ],
                "ent.start_char": [
                    508
                ],
                "ent.end_char": [
                    508
                ],
                "doc.ents": [
                    509
                ],
                "ent.label_": [
                    510
                ],
                "entity_id": [
                    536,
                    514,
                    532,
                    527
                ],
                "candidate_ids": [
                    519,
                    522,
                    527,
                    534,
                    536
                ],
                "candidates": [
                    521,
                    522
                ],
                "kb.get_candidates": [
                    521
                ],
                "cand.entity_": [
                    522
                ],
                "cand": [
                    522
                ],
                "tagged_ent": [
                    528,
                    524,
                    525
                ],
                "tagged_ent_positions.get": [
                    524
                ],
                "should_add_ent": [
                    531,
                    527
                ],
                "is_valid_sentence": [
                    527
                ],
                "tagged_ent.sent.text": [
                    528
                ],
                "tagged_ent.sent": [
                    528
                ],
                "value_by_id": [
                    538,
                    532,
                    535
                ],
                "random.shuffle": [
                    534
                ],
                "random": [
                    534
                ],
                "value_by_id.update": [
                    535
                ],
                "kb_id": [
                    536
                ],
                "GoldParse": [
                    540
                ],
                "article_id.endswith": [
                    546
                ],
                "doc_text": [
                    551
                ],
                "sent_text": [
                    555,
                    559
                ],
                "startswith": [
                    559
                ],
                "sent_text.strip": [
                    559
                ]
            }
        },
        "test_data": []
    }
}