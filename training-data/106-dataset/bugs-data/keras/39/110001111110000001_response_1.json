{
    "keras": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 306,
            "file_name": "/keras/utils/generic_utils.py",
            "replace_code": "def update(self, current, values=None, force=False, target=None):\n\n    \"\"\"Updates the progress bar.\n    \n    # Arguments\n        current: Index of current step.\n        values: List of tuples (name, value_for_last_step).\n            The progress bar will display averages for these values.\n        force: Whether to force visual progress update.\n        target: The target value.\n    \"\"\"\n    values = values or []\n    for k, v in values:\n        if k not in self.sum_values:\n            self.sum_values[k] = [v * (current - self.seen_so_far),\n                                  current - self.seen_so_far]\n            self.unique_values.append(k)\n        else:\n            self.sum_values[k][0] += v * (current - self.seen_so_far)\n            self.sum_values[k][1] += (current - self.seen_so_far)\n    self.seen_so_far = current\n    \n    now = time.time()\n    info = ' - %.0fs' % (now - self.start)\n    if self.verbose == 1:\n        if (not force and (now - self.last_update) < self.interval and\n                (current < target if target is not None else None)):\n            return\n    \n        prev_total_width = self.total_width\n        if self._dynamic_display:\n            sys.stdout.write('\\b' * prev_total_width)\n            sys.stdout.write('\\r')\n        else:\n            sys.stdout.write('\\n')\n    \n        if target is not None:\n            numdigits = int(np.floor(np.log10(target))) + 1\n            barstr = '%%%dd/%d [' % (numdigits, target)\n            bar = barstr % current\n            prog = float(current) / target\n            prog_width = int(self.width * prog)\n            if prog_width > 0:\n                bar += ('=' * (prog_width - 1))\n                if current < target:\n                    bar += '>'\n                else:\n                    bar += '='\n            bar += ('.' * (self.width - prog_width))\n            bar += ']'\n        else:\n            bar = '%7d/Unknown' % current\n    \n        self.total_width = len(bar)\n        sys.stdout.write(bar)\n    \n        if current:\n            time_per_unit = (now - self.start) / current\n        else:\n            time_per_unit = 0\n        if target is not None and current < target:\n            eta = time_per_unit * (target - current)\n            if eta > 3600:\n                eta_format = '%d:%02d:%02d' % (eta // 3600, (eta % 3600) // 60, eta % 60)\n            elif eta > 60:\n                eta_format = '%d:%02d' % (eta // 60, eta % 60)\n            else:\n                eta_format = '%ds' % eta\n    \n            info = ' - ETA: %s' % eta_format\n        else:\n            if time_per_unit >= 1:\n                info += ' %.0fs/step' % time_per_unit\n            elif time_per_unit >= 1e-3:\n                info += ' %.0fms/step' % (time_per_unit * 1e3)\n            else:\n                info += ' %.0fus/step' % (time_per_unit * 1e6)\n    \n        for k in self.unique_values:\n            info += ' - %s:' % k\n            if isinstance(self.sum_values[k], list):\n                avg = np.mean(\n                    self.sum_values[k][0] / max(1, self.sum_values[k][1]))\n                if abs(avg) > 1e-3:\n                    info += ' %.4f' % avg\n                else:\n                    info += ' %.4e' % avg\n            else:\n                info += ' %s' % self.sum_values[k]\n    \n        self.total_width += len(info)\n        if prev_total_width > self.total_width:\n            info += (' ' * (prev_total_width - self.total_width))\n    \n        if target is not None and current >= target:\n            info += '\\n'\n    \n        sys.stdout.write(info)\n        sys.stdout.flush()\n    \n    elif self.verbose == 2:\n        if target is None or current >= target:\n            for k in self.unique_values:\n                info += ' - %s:' % k\n                avg = np.mean(\n                    self.sum_values[k][0] / max(1, self.sum_values[k][1]))\n                if avg > 1e-3:\n                    info += ' %.4f' % avg\n                else:\n                    info += ' %.4e' % avg\n            info += '\\n'\n    \n            sys.stdout.write(info)\n            sys.stdout.flush()\n    \n    self.last_update = now"
        }
    ]
}