{
    "keras": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 306,
            "file_name": "keras/utils/generic_utils.py",
            "replace_code": "def update(self, current, values=None, force=False):\n    import numpy as np\n    import time\n    import sys\n    \"\"\"Updates the progress bar.\n    \n    # Arguments\n        current: Index of current step.\n        values: List of tuples (name, value_for_last_step).\n            The progress bar will display averages for these values.\n        force: Whether to force visual progress update.\n    \"\"\"\n    import numpy as np\n    import time\n    import sys\n    \n    values = values or []\n    for k, v in values:\n        if k not in self.sum_values:\n            self.sum_values[k] = [v * (current - self.seen_so_far),\n                                  current - self.seen_so_far]\n            self.unique_values.append(k)\n        else:\n            self.sum_values[k][0] += v * (current - self.seen_so_far)\n            self.sum_values[k][1] += (current - self.seen_so_far)\n    self.seen_so_far = current\n    \n    now = time.time()\n    info = ' - ETA: 0s' if current >= self.target else ''\n    info += ' %.0fms/step' % ((now - self.start) / current) if current > 0 else ''\n    \n    for k in self.unique_values:\n        info += ' - %s:' % k\n        if isinstance(self.sum_values[k], list):\n            avg = np.mean(self.sum_values[k][0] / max(1, self.sum_values[k][1]))\n            if avg >= 1e-3:\n                info += ' %.4f' % avg\n            else:\n                info += ' %.4e' % avg\n        else:\n            info += ' %s' % self.sum_values[k]\n    \n    bar = '%7d/%s [' % (current, self.target) if self.target else '%7d/Unknown' % current\n    \n    prog = float(current) / self.target if self.target else 0\n    prog_width = int(30 * prog)\n    if prog_width > 0:\n        bar += '=' * (prog_width - 1)\n        if current < self.target:\n            bar += '>'\n        else:\n            bar += '='\n    bar += '.' * (30 - prog_width)\n    bar += ']'\n    \n    self.total_width = len(bar) + len(info)\n    \n    if force or current >= self.target or (now - self.last_update) >= self.interval:\n        sys.stdout.write('\\r' + bar + info + ' ' * (self.total_width - len(bar + info)))\n        self.last_update = now\n    sys.stdout.flush()\n    if current >= self.target:\n        sys.stdout.write('\\n')"
        }
    ]
}