{
    "1.1.1": "def build(self, input_shape):\n    for cell in self.cells:\n        if isinstance(cell, Layer):\n            cell.build(input_shape)\n        if hasattr(cell.state_size, '__len__'):\n            output_dim = cell.state_size[0]\n        else:\n            output_dim = cell.state_size\n        input_shape = (input_shape[0], input_shape[1], output_dim)\n    self.built = True\n",
    "1.1.2": null,
    "1.2.1": "class StackedRNNCells(Layer)",
    "1.2.2": "Wrapper allowing a stack of RNN cells to behave as a single cell.\n\nUsed to implement efficient stacked RNNs.\n\n# Arguments\n    cells: List of RNN cell instances.\n\n# Examples\n\n```python\n    cells = [\n        keras.layers.LSTMCell(output_dim),\n        keras.layers.LSTMCell(output_dim),\n        keras.layers.LSTMCell(output_dim),\n    ]\n\n    inputs = keras.Input((timesteps, input_dim))\n    x = keras.layers.RNN(cells)(inputs)\n```",
    "1.2.3": [
        "state_size(self)",
        "build(self, input_shape)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_38/keras/layers/recurrent.py",
    "1.3.2": [
        "state_size(self)",
        "build(self, input_shape)",
        "build(self, input_shape)",
        "build(self, input_shape)",
        "build(self, input_shape)",
        "build(self, input_shape)"
    ],
    "1.4.1": null,
    "1.4.2": null,
    "2.1.1": null,
    "2.1.2": null,
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": null,
    "3.1.2": null
}