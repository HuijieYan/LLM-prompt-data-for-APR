{
    "keras": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 375,
            "file_name": "engine/training_utils.py",
            "replace_code": "def weighted_masked_objective(fn):\n    \n\n    if fn is None:\n        return None\n    \n    def weighted(y_true, y_pred, weights, mask=None):\n        \n        # score_array has ndim >= 2\n        score_array = fn(y_true, y_pred)\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in Theano\n            mask = K.cast(mask, K.floatx())\n            # mask should have the same shape as score_array\n            score_array = K.mean(score_array * mask, axis=-1)  # Updated this line\n            #  the loss per batch should be proportional\n            #  to the number of unmasked samples.\n            score_array /= K.mean(K.cast(K.not_equal(mask, 0), K.floatx()))  # Updated this line\n    \n        # apply sample weighting\n        if weights is not None:\n            if K.ndim(weights) < K.ndim(score_array):\n                weights = K.mean(weights, axis=-1, keepdims=True)\n            score_array = K.mean(score_array * weights, axis=-1)  # Updated this line\n            score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))  # Updated this line\n        return K.mean(score_array)\n    return weighted"
        }
    ]
}