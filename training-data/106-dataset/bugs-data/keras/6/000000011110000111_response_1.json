{
    "keras": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 375,
            "file_name": "engine/training_utils.py",
            "replace_code": "def weighted_masked_objective(fn):\n    \n    import numpy as np\n    import keras.backend as K\n    if fn is None:\n        return None\n    \n    def weighted(y_true, y_pred, weights, mask=None):\n        \n        # score_array has ndim >= 2\n        score_array = fn(y_true, y_pred)\n        \n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in Theano\n            mask = K.cast(mask, K.floatx())\n            # mask should have the same shape as score_array\n            score_array *= mask\n            #  the loss per batch should be proportional\n            #  to the number of unmasked samples.\n            score_array /= K.mean(mask)\n    \n        # apply sample weighting\n        if weights is not None:\n            # reduce score_array to same ndim as weight array\n            ndim = K.ndim(score_array)\n            weight_ndim = K.ndim(weights)\n            # Calculate the mean of the score_array\n            score_array_means = K.mean(score_array, axis=list(range(weight_ndim, ndim)))\n            score_array = K.expand_dims(score_array, axis=weight_ndim)\n            weights = K.expand_dims(weights, axis=-1)\n            # Applying the weights to the score_array\n            score_array *= weights\n            score_array /= K.mean(weights)\n            # Reduce the dimensions to 1\n            score_array = K.mean(score_array, axis=tuple(range(K.ndim(score_array) - 1)))\n    \n        return K.mean(score_array)\n    \n    return weighted"
        }
    ]
}