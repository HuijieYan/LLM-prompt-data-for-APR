{
    "1.1.1": "def weighted_masked_objective(fn):\n    \n    if fn is None:\n        return None\n\n    def weighted(y_true, y_pred, weights, mask=None):\n        \n        # score_array has ndim >= 2\n        score_array = fn(y_true, y_pred)\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in Theano\n            mask = K.cast(mask, K.floatx())\n            # mask should have the same shape as score_array\n            score_array *= mask\n            #  the loss per batch should be proportional\n            #  to the number of unmasked samples.\n            score_array /= K.mean(mask)\n\n        # apply sample weighting\n        if weights is not None:\n            # reduce score_array to same ndim as weight array\n            ndim = K.ndim(score_array)\n            weight_ndim = K.ndim(weights)\n            score_array = K.mean(score_array,\n                                 axis=list(range(weight_ndim, ndim)))\n            score_array *= weights\n            score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n        return K.mean(score_array)\n    return weighted\n",
    "1.1.2": "Adds support for masking and sample-weighting to an objective function.\n\nIt transforms an objective function `fn(y_true, y_pred)`\ninto a sample-weighted, cost-masked objective function\n`fn(y_true, y_pred, weights, mask)`.\n\n# Arguments\n    fn: The objective function to wrap,\n        with signature `fn(y_true, y_pred)`.\n\n# Returns\n    A function with signature `fn(y_true, y_pred, weights, mask)`.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_6/keras/engine/training_utils.py",
    "1.3.2": [
        "weighted(y_true, y_pred, weights, mask=None)"
    ],
    "1.4.1": [
        "def test_masking_is_all_zeros():\n    x = y = np.array([[[0], [0]]])\n    model = create_masking_model()\n    loss = model.train_on_batch(x, y)\n    assert loss == 0"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_6/tests/test_loss_masking.py"
    ],
    "2.1.1": [
        [
            "E       assert nan == 0\nE         +nan\nE         -0"
        ]
    ],
    "2.1.2": [
        [
            "def test_masking_is_all_zeros():\n        x = y = np.array([[[0], [0]]])\n        model = create_masking_model()\n        loss = model.train_on_batch(x, y)\n>       assert loss == 0",
            "\ntests/test_loss_masking.py:34: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {},
            {
                "weighted": "<function weighted_masked_objective.<locals>.weighted at 0x12cc65680>"
            }
        ]
    ],
    "2.1.4": [
        [
            {},
            {
                "weighted": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {},
            {
                "weighted": "<function weighted_masked_objective.<locals>.weighted at 0x12aa689e0>"
            }
        ]
    ],
    "2.1.6": [
        [
            {},
            {
                "weighted": "function"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}