{
    "1.1.1": "def to_categorical(y, num_classes=None):\n    \n    y = np.array(y, dtype='int')\n    input_shape = y.shape\n    y = y.ravel()\n    if not num_classes:\n        num_classes = np.max(y) + 1\n    n = y.shape[0]\n    categorical = np.zeros((n, num_classes))\n    categorical[np.arange(n), y] = 1\n    output_shape = input_shape + (num_classes,)\n    categorical = np.reshape(categorical, output_shape)\n    return categorical\n",
    "1.1.2": "Converts a class vector (integers) to binary class matrix.\n\nE.g. for use with categorical_crossentropy.\n\n# Arguments\n    y: class vector to be converted into a matrix\n        (integers from 0 to num_classes).\n    num_classes: total number of classes.\n\n# Returns\n    A binary matrix representation of the input.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/keras_43/keras/utils/np_utils.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_to_categorical():\n    num_classes = 5\n    shapes = [(3,), (4, 3), (5, 4, 3), (3, 1), (3, 2, 1)]\n    expected_shapes = [(3, num_classes),\n                       (4, 3, num_classes),\n                       (5, 4, 3, num_classes),\n                       (3, num_classes)]\n    labels = [np.random.randint(0, num_classes, shape) for shape in shapes]\n    one_hots = [to_categorical(label, num_classes) for label in labels]\n    for label, one_hot, expected_shape in zip(labels,\n                                              one_hots,\n                                              expected_shapes):\n        # Check shape\n        assert one_hot.shape == expected_shape\n        # Make sure there are only 0s and 1s\n        assert np.array_equal(one_hot, one_hot.astype(bool))\n        # Make sure there is exactly one 1 in a row\n        assert np.all(one_hot.sum(axis=-1) == 1)\n        # Get original labels back from one hots\n        assert np.all(np.argmax(one_hot, -1).reshape(label.shape) == label)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/keras_43/tests/keras/utils/np_utils_test.py"
    ],
    "2.1.1": [
        [
            "E           assert (3, 1, 5) == (3, 5)\nE             At index 1 diff: 1 != 5\nE             Left contains one more item: 5\nE             Full diff:\nE             - (3, 5)\nE             + (3, 1, 5)\nE             ?     +++"
        ]
    ],
    "2.1.2": [
        [
            "def test_to_categorical():\n        num_classes = 5\n        shapes = [(3,), (4, 3), (5, 4, 3), (3, 1), (3, 2, 1)]\n        expected_shapes = [(3, num_classes),\n                           (4, 3, num_classes),\n                           (5, 4, 3, num_classes),\n                           (3, num_classes)]\n        labels = [np.random.randint(0, num_classes, shape) for shape in shapes]\n        one_hots = [to_categorical(label, num_classes) for label in labels]\n        for label, one_hot, expected_shape in zip(labels,\n                                                  one_hots,\n                                                  expected_shapes):\n            # Check shape\n>           assert one_hot.shape == expected_shape",
            "\ntests/keras/utils/np_utils_test.py:21: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "y": "array([4, 3, 4])",
                "y.shape": "(3,)",
                "num_classes": "5"
            },
            {
                "input_shape": "(3,)",
                "n": "3",
                "categorical": "array([[0., 0., 0., 0., 1.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])",
                "output_shape": "(3, 5)"
            }
        ],
        [
            {
                "y": "array([[3, 4, 3],\n       [4, 3, 3],\n       [2, 4, 0],\n       [0, 3, 2]])",
                "y.shape": "(4, 3)",
                "num_classes": "5"
            },
            {
                "y": "array([3, 4, 3, 4, 3, 3, 2, 4, 0, 0, 3, 2])",
                "input_shape": "(4, 3)",
                "y.shape": "(12,)",
                "n": "12",
                "categorical": "array([[[0., 0., 0., 1., 0.],\n        [0., 0., 0., 0., 1.],\n        [0., 0., 0., 1., 0.]],\n\n       [[0., 0., 0., 0., 1.],\n        [0., 0., 0., 1., 0.],\n        [0., 0., 0., 1., 0.]],\n\n       [[0., 0., 1., 0., 0.],\n        [0., 0., 0., 0., 1.],\n        [1., 0., 0., 0., 0.]],\n\n       [[1., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0.],\n        [0., 0., 1., 0., 0.]]])",
                "output_shape": "(4, 3, 5)"
            }
        ],
        [
            {
                "y": "array([[[1, 3, 4],\n        [0, 2, 0],\n        [2, 1, 2],\n        [4, 3, 3]],\n\n       [[4, 4, 2],\n        [1, 2, 3],\n        [4, 0, 4],\n        [1, 3, 3]],\n\n       [[3, 0, 1],\n        [2, 3, 4],\n        [0, 2, 2],\n        [0, 1, 1]],\n\n       [[4, 2, 2],\n        [0, 1, 0],\n        [1, 4, 1],\n        [4, 3, 4]],\n\n       [[2, 3, 2],\n        [2, 1, 1],\n        [0, 1, 1],\n        [4, 3, 2]]])",
                "y.shape": "(5, 4, 3)",
                "num_classes": "5"
            },
            {
                "y": "array([1, 3, 4, 0, 2, 0, 2, 1, 2, 4, 3, 3, 4, 4, 2, 1, 2, 3, 4, 0, 4, 1,\n       3, 3, 3, 0, 1, 2, 3, 4, 0, 2, 2, 0, 1, 1, 4, 2, 2, 0, 1, 0, 1, 4,\n       1, 4, 3, 4, 2, 3, 2, 2, 1, 1, 0, 1, 1, 4, 3, 2])",
                "input_shape": "(5, 4, 3)",
                "y.shape": "(60,)",
                "n": "60",
                "categorical": "array of shape (5, 4, 3, 5)",
                "output_shape": "(5, 4, 3, 5)"
            }
        ],
        [
            {
                "y": "array([[3],\n       [4],\n       [3]])",
                "y.shape": "(3, 1)",
                "num_classes": "5"
            },
            {
                "y": "array([3, 4, 3])",
                "input_shape": "(3, 1)",
                "y.shape": "(3,)",
                "n": "3",
                "categorical": "array([[[0., 0., 0., 1., 0.]],\n\n       [[0., 0., 0., 0., 1.]],\n\n       [[0., 0., 0., 1., 0.]]])",
                "output_shape": "(3, 1, 5)"
            }
        ],
        [
            {
                "y": "array([[[0],\n        [4]],\n\n       [[3],\n        [1]],\n\n       [[0],\n        [2]]])",
                "y.shape": "(3, 2, 1)",
                "num_classes": "5"
            },
            {
                "y": "array([0, 4, 3, 1, 0, 2])",
                "input_shape": "(3, 2, 1)",
                "y.shape": "(6,)",
                "n": "6",
                "categorical": "array([[[[1., 0., 0., 0., 0.]],\n\n        [[0., 0., 0., 0., 1.]]],\n\n\n       [[[0., 0., 0., 1., 0.]],\n\n        [[0., 1., 0., 0., 0.]]],\n\n\n       [[[1., 0., 0., 0., 0.]],\n\n        [[0., 0., 1., 0., 0.]]]])",
                "output_shape": "(3, 2, 1, 5)"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "input_shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ],
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "y": "ndarray",
                "input_shape": "tuple",
                "y.shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ],
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "y": "ndarray",
                "input_shape": "tuple",
                "y.shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ],
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "y": "ndarray",
                "input_shape": "tuple",
                "y.shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ],
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "y": "ndarray",
                "input_shape": "tuple",
                "y.shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "y": "array([0, 2, 4])",
                "y.shape": "(3,)",
                "num_classes": "5"
            },
            {
                "input_shape": "(3,)",
                "n": "3",
                "categorical": "array([[1., 0., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 0., 1.]])",
                "output_shape": "(3, 5)"
            }
        ],
        [
            {
                "y": "array([[4, 4, 4],\n       [1, 4, 2],\n       [0, 3, 3],\n       [3, 0, 4]])",
                "y.shape": "(4, 3)",
                "num_classes": "5"
            },
            {
                "y": "array([4, 4, 4, 1, 4, 2, 0, 3, 3, 3, 0, 4])",
                "input_shape": "(4, 3)",
                "y.shape": "(12,)",
                "n": "12",
                "categorical": "array([[[0., 0., 0., 0., 1.],\n        [0., 0., 0., 0., 1.],\n        [0., 0., 0., 0., 1.]],\n\n       [[0., 1., 0., 0., 0.],\n        [0., 0., 0., 0., 1.],\n        [0., 0., 1., 0., 0.]],\n\n       [[1., 0., 0., 0., 0.],\n        [0., 0., 0., 1., 0.],\n        [0., 0., 0., 1., 0.]],\n\n       [[0., 0., 0., 1., 0.],\n        [1., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 1.]]])",
                "output_shape": "(4, 3, 5)"
            }
        ],
        [
            {
                "y": "array([[[2, 1, 4],\n        [2, 0, 3],\n        [4, 0, 2],\n        [4, 0, 4]],\n\n       [[2, 0, 4],\n        [3, 3, 4],\n        [2, 2, 2],\n        [4, 2, 0]],\n\n       [[0, 3, 0],\n        [3, 1, 1],\n        [2, 4, 2],\n        [4, 1, 0]],\n\n       [[1, 3, 2],\n        [0, 3, 1],\n        [4, 2, 4],\n        [0, 3, 3]],\n\n       [[2, 0, 1],\n        [0, 0, 4],\n        [3, 0, 3],\n        [0, 2, 4]]])",
                "y.shape": "(5, 4, 3)",
                "num_classes": "5"
            },
            {
                "y": "array([2, 1, 4, 2, 0, 3, 4, 0, 2, 4, 0, 4, 2, 0, 4, 3, 3, 4, 2, 2, 2, 4,\n       2, 0, 0, 3, 0, 3, 1, 1, 2, 4, 2, 4, 1, 0, 1, 3, 2, 0, 3, 1, 4, 2,\n       4, 0, 3, 3, 2, 0, 1, 0, 0, 4, 3, 0, 3, 0, 2, 4])",
                "input_shape": "(5, 4, 3)",
                "y.shape": "(60,)",
                "n": "60",
                "categorical": "array of shape (5, 4, 3, 5)",
                "output_shape": "(5, 4, 3, 5)"
            }
        ],
        [
            {
                "y": "array([[4],\n       [3],\n       [0]])",
                "y.shape": "(3, 1)",
                "num_classes": "5"
            },
            {
                "y": "array([4, 3, 0])",
                "input_shape": "(3,)",
                "y.shape": "(3,)",
                "n": "3",
                "categorical": "array([[0., 0., 0., 0., 1.],\n       [0., 0., 0., 1., 0.],\n       [1., 0., 0., 0., 0.]])",
                "output_shape": "(3, 5)"
            }
        ],
        [
            {
                "y": "array([[[1],\n        [1]],\n\n       [[4],\n        [2]],\n\n       [[4],\n        [1]]])",
                "y.shape": "(3, 2, 1)",
                "num_classes": "5"
            },
            {
                "y": "array([1, 1, 4, 2, 4, 1])",
                "input_shape": "(3, 2)",
                "y.shape": "(6,)",
                "n": "6",
                "categorical": "array([[[0., 1., 0., 0., 0.],\n        [0., 1., 0., 0., 0.]],\n\n       [[0., 0., 0., 0., 1.],\n        [0., 0., 1., 0., 0.]],\n\n       [[0., 0., 0., 0., 1.],\n        [0., 1., 0., 0., 0.]]])",
                "output_shape": "(3, 2, 5)"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "input_shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ],
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "y": "ndarray",
                "input_shape": "tuple",
                "y.shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ],
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "y": "ndarray",
                "input_shape": "tuple",
                "y.shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ],
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "y": "ndarray",
                "input_shape": "tuple",
                "y.shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ],
        [
            {
                "y": "ndarray",
                "y.shape": "tuple",
                "num_classes": "int"
            },
            {
                "y": "ndarray",
                "input_shape": "tuple",
                "y.shape": "tuple",
                "n": "int",
                "categorical": "ndarray",
                "output_shape": "tuple"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}