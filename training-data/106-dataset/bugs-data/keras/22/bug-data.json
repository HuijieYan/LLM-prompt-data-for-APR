{
    "keras:22": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_22/keras/engine/input_layer.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "@interfaces.legacy_input_support\ndef __init__(self, input_shape=None, batch_size=None,\n             batch_input_shape=None,\n             dtype=None, input_tensor=None, sparse=False, name=None):\n    if not name:\n        prefix = 'input'\n        name = prefix + '_' + str(K.get_uid(prefix))\n    super(InputLayer, self).__init__(dtype=dtype, name=name)\n\n    self.trainable = False\n    self.built = True\n    self.sparse = sparse\n\n    if input_shape and batch_input_shape:\n        raise ValueError('Only provide the input_shape OR '\n                         'batch_input_shape argument to '\n                         'InputLayer, not both at the same time.')\n    if input_tensor is not None and batch_input_shape is None:\n        # If input_tensor is set, and batch_input_shape is not set:\n        # Attempt automatic input shape inference.\n        try:\n            batch_input_shape = K.int_shape(input_tensor)\n        except TypeError:\n            if not input_shape and not batch_input_shape:\n                raise ValueError('InputLayer was provided '\n                                 'an input_tensor argument, '\n                                 'but its input shape cannot be '\n                                 'automatically inferred. '\n                                 'You should pass an input_shape or '\n                                 'batch_input_shape argument.')\n    if not batch_input_shape:\n        if not input_shape:\n            raise ValueError('An Input layer should be passed either '\n                             'a `batch_input_shape` or an `input_shape`.')\n        else:\n            batch_input_shape = (batch_size,) + tuple(input_shape)\n    else:\n        batch_input_shape = tuple(batch_input_shape)\n\n    if not dtype:\n        if input_tensor is None:\n            dtype = K.floatx()\n        else:\n            dtype = K.dtype(input_tensor)\n\n    self.batch_input_shape = batch_input_shape\n    self.dtype = dtype\n\n    if input_tensor is None:\n        self.is_placeholder = True\n        input_tensor = K.placeholder(shape=batch_input_shape,\n                                     dtype=dtype,\n                                     sparse=self.sparse,\n                                     name=self.name)\n    else:\n        self.is_placeholder = False\n        input_tensor._keras_shape = batch_input_shape\n    # Create an input node to add to self.outbound_node\n    # and set output_tensors' _keras_history.\n    input_tensor._uses_learning_phase = False\n    input_tensor._keras_history = (self, 0, 0)\n    Node(self,\n         inbound_layers=[],\n         node_indices=[],\n         tensor_indices=[],\n         input_tensors=[input_tensor],\n         output_tensors=[input_tensor],\n         input_masks=[None],\n         output_masks=[None],\n         input_shapes=[batch_input_shape],\n         output_shapes=[batch_input_shape])\n",
                    "decorators": [
                        "interfaces.legacy_input_support"
                    ],
                    "docstring": null,
                    "start_line": 33,
                    "end_line": 103,
                    "variables": {
                        "name": [
                            40,
                            37,
                            39
                        ],
                        "prefix": [
                            38,
                            39
                        ],
                        "str": [
                            39
                        ],
                        "K.get_uid": [
                            39
                        ],
                        "K": [
                            39,
                            74,
                            76,
                            83,
                            54
                        ],
                        "__init__": [
                            40
                        ],
                        "super": [
                            40
                        ],
                        "InputLayer": [
                            40
                        ],
                        "self": [
                            40,
                            42,
                            43,
                            44,
                            78,
                            79,
                            82,
                            85,
                            86,
                            88,
                            93,
                            94
                        ],
                        "dtype": [
                            40,
                            72,
                            74,
                            76,
                            79,
                            84
                        ],
                        "self.trainable": [
                            42
                        ],
                        "self.built": [
                            43
                        ],
                        "self.sparse": [
                            44,
                            85
                        ],
                        "sparse": [
                            44
                        ],
                        "input_shape": [
                            56,
                            64,
                            68,
                            46
                        ],
                        "batch_input_shape": [
                            68,
                            70,
                            102,
                            103,
                            46,
                            78,
                            50,
                            83,
                            54,
                            56,
                            89,
                            63
                        ],
                        "ValueError": [
                            65,
                            57,
                            47
                        ],
                        "input_tensor": [
                            98,
                            99,
                            73,
                            76,
                            81,
                            50,
                            83,
                            54,
                            89,
                            92,
                            93
                        ],
                        "K.int_shape": [
                            54
                        ],
                        "TypeError": [
                            55
                        ],
                        "batch_size": [
                            68
                        ],
                        "tuple": [
                            68,
                            70
                        ],
                        "K.floatx": [
                            74
                        ],
                        "K.dtype": [
                            76
                        ],
                        "self.batch_input_shape": [
                            78
                        ],
                        "self.dtype": [
                            79
                        ],
                        "self.is_placeholder": [
                            88,
                            82
                        ],
                        "K.placeholder": [
                            83
                        ],
                        "self.name": [
                            86
                        ],
                        "input_tensor._keras_shape": [
                            89
                        ],
                        "input_tensor._uses_learning_phase": [
                            92
                        ],
                        "input_tensor._keras_history": [
                            93
                        ],
                        "Node": [
                            94
                        ],
                        "interfaces.legacy_input_support": [
                            33
                        ],
                        "interfaces": [
                            33
                        ]
                    },
                    "filtered_variables": {
                        "name": [
                            40,
                            37,
                            39
                        ],
                        "prefix": [
                            38,
                            39
                        ],
                        "K.get_uid": [
                            39
                        ],
                        "K": [
                            39,
                            74,
                            76,
                            83,
                            54
                        ],
                        "__init__": [
                            40
                        ],
                        "InputLayer": [
                            40
                        ],
                        "self": [
                            40,
                            42,
                            43,
                            44,
                            78,
                            79,
                            82,
                            85,
                            86,
                            88,
                            93,
                            94
                        ],
                        "dtype": [
                            40,
                            72,
                            74,
                            76,
                            79,
                            84
                        ],
                        "self.trainable": [
                            42
                        ],
                        "self.built": [
                            43
                        ],
                        "self.sparse": [
                            44,
                            85
                        ],
                        "sparse": [
                            44
                        ],
                        "input_shape": [
                            56,
                            64,
                            68,
                            46
                        ],
                        "batch_input_shape": [
                            68,
                            70,
                            102,
                            103,
                            46,
                            78,
                            50,
                            83,
                            54,
                            56,
                            89,
                            63
                        ],
                        "input_tensor": [
                            98,
                            99,
                            73,
                            76,
                            81,
                            50,
                            83,
                            54,
                            89,
                            92,
                            93
                        ],
                        "K.int_shape": [
                            54
                        ],
                        "batch_size": [
                            68
                        ],
                        "K.floatx": [
                            74
                        ],
                        "K.dtype": [
                            76
                        ],
                        "self.batch_input_shape": [
                            78
                        ],
                        "self.dtype": [
                            79
                        ],
                        "self.is_placeholder": [
                            88,
                            82
                        ],
                        "K.placeholder": [
                            83
                        ],
                        "self.name": [
                            86
                        ],
                        "input_tensor._keras_shape": [
                            89
                        ],
                        "input_tensor._uses_learning_phase": [
                            92
                        ],
                        "input_tensor._keras_history": [
                            93
                        ],
                        "Node": [
                            94
                        ],
                        "interfaces.legacy_input_support": [
                            33
                        ],
                        "interfaces": [
                            33
                        ]
                    },
                    "diff_line_number": 44,
                    "class_data": {
                        "signature": "class InputLayer(Layer)",
                        "docstring": "Layer to be used as an entry point into a model.\n\nIt can either wrap an existing tensor (pass an `input_tensor` argument)\nor create its a placeholder tensor (pass arguments `input_shape`\nor `batch_input_shape` as well as `dtype`).\n\n# Arguments\n    input_shape: Shape tuple, not including the batch axis.\n    batch_size: Optional input batch size (integer or None).\n    batch_input_shape: Shape tuple, including the batch axis.\n    dtype: Datatype of the input.\n    input_tensor: Optional tensor to use as layer input\n        instead of creating a placeholder.\n    sparse: Boolean, whether the placeholder created\n        is meant to be sparse.\n    name: Name of the layer (string).",
                        "constructor_docstring": null,
                        "functions": [
                            "@interfaces.legacy_input_support\ndef __init__(self, input_shape=None, batch_size=None, batch_input_shape=None, dtype=None, input_tensor=None, sparse=False, name=None):\n    if not name:\n        prefix = 'input'\n        name = prefix + '_' + str(K.get_uid(prefix))\n    super(InputLayer, self).__init__(dtype=dtype, name=name)\n    self.trainable = False\n    self.built = True\n    self.sparse = sparse\n    if input_shape and batch_input_shape:\n        raise ValueError('Only provide the input_shape OR batch_input_shape argument to InputLayer, not both at the same time.')\n    if input_tensor is not None and batch_input_shape is None:\n        try:\n            batch_input_shape = K.int_shape(input_tensor)\n        except TypeError:\n            if not input_shape and (not batch_input_shape):\n                raise ValueError('InputLayer was provided an input_tensor argument, but its input shape cannot be automatically inferred. You should pass an input_shape or batch_input_shape argument.')\n    if not batch_input_shape:\n        if not input_shape:\n            raise ValueError('An Input layer should be passed either a `batch_input_shape` or an `input_shape`.')\n        else:\n            batch_input_shape = (batch_size,) + tuple(input_shape)\n    else:\n        batch_input_shape = tuple(batch_input_shape)\n    if not dtype:\n        if input_tensor is None:\n            dtype = K.floatx()\n        else:\n            dtype = K.dtype(input_tensor)\n    self.batch_input_shape = batch_input_shape\n    self.dtype = dtype\n    if input_tensor is None:\n        self.is_placeholder = True\n        input_tensor = K.placeholder(shape=batch_input_shape, dtype=dtype, sparse=self.sparse, name=self.name)\n    else:\n        self.is_placeholder = False\n        input_tensor._keras_shape = batch_input_shape\n    input_tensor._uses_learning_phase = False\n    input_tensor._keras_history = (self, 0, 0)\n    Node(self, inbound_layers=[], node_indices=[], tensor_indices=[], input_tensors=[input_tensor], output_tensors=[input_tensor], input_masks=[None], output_masks=[None], input_shapes=[batch_input_shape], output_shapes=[batch_input_shape])",
                            "def get_config(self):\n    config = {'batch_input_shape': self.batch_input_shape, 'dtype': self.dtype, 'sparse': self.sparse, 'name': self.name}\n    return config"
                        ],
                        "constructor_variables": [
                            "input_tensor",
                            "prefix",
                            "name",
                            "batch_input_shape",
                            "is_placeholder",
                            "dtype",
                            "trainable",
                            "built",
                            "sparse"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, input_shape=None, batch_size=None, batch_input_shape=None, dtype=None, input_tensor=None, sparse=False, name=None)",
                            "get_config(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "name": {
                                    "variable_value": "'dense_1_input'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.get_uid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "InputLayer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.input_layer.InputLayer object at 0x12301ec90>",
                                    "variable_type": "InputLayer",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "'float32'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.trainable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.built": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.sparse": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "input_shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_input_shape": {
                                    "variable_value": "(None, 4)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "input_tensor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.batch_input_shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.is_placeholder": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_tensor._keras_shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_tensor._uses_learning_phase": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_tensor._keras_history": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_input_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "name": {
                                    "variable_value": "'dense_1_input'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.get_uid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "InputLayer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.input_layer.InputLayer object at 0x129deed50>",
                                    "variable_type": "InputLayer",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "'float32'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "self.trainable": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.built": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.sparse": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.supports_masking": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_input_shape": {
                                    "variable_value": "(None, 4)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "input_tensor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.batch_input_shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.is_placeholder": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_tensor._keras_shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_tensor._uses_learning_phase": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_tensor._keras_history": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_input_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def Input(shape=None, batch_shape=None,\n          name=None, dtype=None, sparse=False,\n          tensor=None):\n    \"\"\"`Input()` is used to instantiate a Keras tensor.\n\n    A Keras tensor is a tensor object from the underlying backend\n    (Theano, TensorFlow or CNTK), which we augment with certain\n    attributes that allow us to build a Keras model\n    just by knowing the inputs and outputs of the model.\n\n    For instance, if a, b and c are Keras tensors,\n    it becomes possible to do:\n    `model = Model(input=[a, b], output=c)`\n\n    The added Keras attributes are:\n        `_keras_shape`: Integer shape tuple propagated\n            via Keras-side shape inference.\n        `_keras_history`: Last layer applied to the tensor.\n            the entire layer graph is retrievable from that layer,\n            recursively.\n\n    # Arguments\n        shape: A shape tuple (integer), not including the batch size.\n            For instance, `shape=(32,)` indicates that the expected input\n            will be batches of 32-dimensional vectors.\n        batch_shape: A shape tuple (integer), including the batch size.\n            For instance, `batch_shape=(10, 32)` indicates that\n            the expected input will be batches of 10 32-dimensional vectors.\n            `batch_shape=(None, 32)` indicates batches of an arbitrary number\n            of 32-dimensional vectors.\n        name: An optional name string for the layer.\n            Should be unique in a model (do not reuse the same name twice).\n            It will be autogenerated if it isn't provided.\n        dtype: The data type expected by the input, as a string\n            (`float32`, `float64`, `int32`...)\n        sparse: A boolean specifying whether the placeholder\n            to be created is sparse.\n        tensor: Optional existing tensor to wrap into the `Input` layer.\n            If set, the layer will not create a placeholder tensor.\n\n    # Returns\n        A tensor.\n\n    # Example\n\n    ```python\n    # this is a logistic regression in Keras\n    x = Input(shape=(32,))\n    y = Dense(16, activation='softmax')(x)\n    model = Model(x, y)\n    ```\n    \"\"\"\n    if not batch_shape and tensor is None:\n        assert shape is not None, ('Please provide to Input either a `shape`'\n                                   ' or a `batch_shape` argument. Note that '\n                                   '`shape` does not include the batch '\n                                   'dimension.')\n    if shape is not None and not batch_shape:\n        batch_shape = (None,) + tuple(shape)\n    if not dtype:\n        dtype = K.floatx()\n    input_layer = InputLayer(batch_input_shape=batch_shape,\n                             name=name, dtype=dtype,\n                             sparse=sparse,\n                             input_tensor=tensor)\n    # Return tensor including _keras_shape and _keras_history.\n    # Note that in this case train_output and test_output are the same pointer.\n    outputs = input_layer._inbound_nodes[0].output_tensors\n    return unpack_singleton(outputs)",
                "@interfaces.legacy_input_support\ndef __init__(self, input_shape=None, batch_size=None,\n             batch_input_shape=None,\n             dtype=None, input_tensor=None, sparse=False, name=None):\n    if not name:\n        prefix = 'input'\n        name = prefix + '_' + str(K.get_uid(prefix))\n    super(InputLayer, self).__init__(dtype=dtype, name=name)\n\n    self.trainable = False\n    self.built = True\n    self.sparse = sparse\n\n    if input_shape and batch_input_shape:\n        raise ValueError('Only provide the input_shape OR '\n                         'batch_input_shape argument to '\n                         'InputLayer, not both at the same time.')\n    if input_tensor is not None and batch_input_shape is None:\n        # If input_tensor is set, and batch_input_shape is not set:\n        # Attempt automatic input shape inference.\n        try:\n            batch_input_shape = K.int_shape(input_tensor)\n        except TypeError:\n            if not input_shape and not batch_input_shape:\n                raise ValueError('InputLayer was provided '\n                                 'an input_tensor argument, '\n                                 'but its input shape cannot be '\n                                 'automatically inferred. '\n                                 'You should pass an input_shape or '\n                                 'batch_input_shape argument.')\n    if not batch_input_shape:\n        if not input_shape:\n            raise ValueError('An Input layer should be passed either '\n                             'a `batch_input_shape` or an `input_shape`.')\n        else:\n            batch_input_shape = (batch_size,) + tuple(input_shape)\n    else:\n        batch_input_shape = tuple(batch_input_shape)\n\n    if not dtype:\n        if input_tensor is None:\n            dtype = K.floatx()\n        else:\n            dtype = K.dtype(input_tensor)\n\n    self.batch_input_shape = batch_input_shape\n    self.dtype = dtype\n\n    if input_tensor is None:\n        self.is_placeholder = True\n        input_tensor = K.placeholder(shape=batch_input_shape,\n                                     dtype=dtype,\n                                     sparse=self.sparse,\n                                     name=self.name)\n    else:\n        self.is_placeholder = False\n        input_tensor._keras_shape = batch_input_shape\n    # Create an input node to add to self.outbound_node\n    # and set output_tensors' _keras_history.\n    input_tensor._uses_learning_phase = False\n    input_tensor._keras_history = (self, 0, 0)\n    Node(self,\n         inbound_layers=[],\n         node_indices=[],\n         tensor_indices=[],\n         input_tensors=[input_tensor],\n         output_tensors=[input_tensor],\n         input_masks=[None],\n         output_masks=[None],\n         input_shapes=[batch_input_shape],\n         output_shapes=[batch_input_shape])",
                "def get_config(self):\n    config = {'batch_input_shape': self.batch_input_shape,\n              'dtype': self.dtype,\n              'sparse': self.sparse,\n              'name': self.name}\n    return config"
            ],
            "inscope_function_signatures": [
                "Input(shape=None, batch_shape=None, name=None, dtype=None, sparse=False, tensor=None)",
                "__init__(self, input_shape=None, batch_size=None, batch_input_shape=None, dtype=None, input_tensor=None, sparse=False, name=None)",
                "get_config(self)"
            ],
            "variables_in_file": {
                "Layer": [
                    14
                ],
                "name": [
                    40,
                    175,
                    37,
                    39
                ],
                "prefix": [
                    38,
                    39
                ],
                "str": [
                    39
                ],
                "K.get_uid": [
                    39
                ],
                "K": [
                    39,
                    74,
                    76,
                    173,
                    83,
                    54
                ],
                "__init__": [
                    40
                ],
                "super": [
                    40
                ],
                "InputLayer": [
                    40,
                    174
                ],
                "self": [
                    40,
                    42,
                    43,
                    44,
                    106,
                    78,
                    79,
                    107,
                    108,
                    82,
                    109,
                    85,
                    86,
                    88,
                    93,
                    94
                ],
                "dtype": [
                    40,
                    72,
                    74,
                    76,
                    172,
                    173,
                    79,
                    175,
                    84
                ],
                "self.trainable": [
                    42
                ],
                "self.built": [
                    43
                ],
                "self.sparse": [
                    108,
                    44,
                    85
                ],
                "sparse": [
                    176,
                    44
                ],
                "input_shape": [
                    56,
                    64,
                    68,
                    46
                ],
                "batch_input_shape": [
                    68,
                    70,
                    102,
                    103,
                    46,
                    78,
                    50,
                    83,
                    54,
                    56,
                    89,
                    63
                ],
                "ValueError": [
                    65,
                    57,
                    47
                ],
                "input_tensor": [
                    98,
                    99,
                    73,
                    76,
                    81,
                    50,
                    83,
                    54,
                    89,
                    92,
                    93
                ],
                "K.int_shape": [
                    54
                ],
                "TypeError": [
                    55
                ],
                "batch_size": [
                    68
                ],
                "tuple": [
                    171,
                    68,
                    70
                ],
                "K.floatx": [
                    74,
                    173
                ],
                "K.dtype": [
                    76
                ],
                "self.batch_input_shape": [
                    106,
                    78
                ],
                "self.dtype": [
                    107,
                    79
                ],
                "self.is_placeholder": [
                    88,
                    82
                ],
                "K.placeholder": [
                    83
                ],
                "self.name": [
                    109,
                    86
                ],
                "input_tensor._keras_shape": [
                    89
                ],
                "input_tensor._uses_learning_phase": [
                    92
                ],
                "input_tensor._keras_history": [
                    93
                ],
                "Node": [
                    94
                ],
                "interfaces.legacy_input_support": [
                    33
                ],
                "interfaces": [
                    33
                ],
                "config": [
                    106,
                    110
                ],
                "batch_shape": [
                    170,
                    171,
                    165,
                    174
                ],
                "tensor": [
                    177,
                    165
                ],
                "shape": [
                    170,
                    171,
                    166
                ],
                "input_layer": [
                    180,
                    174
                ],
                "outputs": [
                    180,
                    181
                ],
                "output_tensors": [
                    180
                ],
                "input_layer._inbound_nodes": [
                    180
                ],
                "unpack_singleton": [
                    181
                ]
            },
            "filtered_variables_in_file": {
                "Layer": [
                    14
                ],
                "name": [
                    40,
                    175,
                    37,
                    39
                ],
                "prefix": [
                    38,
                    39
                ],
                "K.get_uid": [
                    39
                ],
                "K": [
                    39,
                    74,
                    76,
                    173,
                    83,
                    54
                ],
                "__init__": [
                    40
                ],
                "InputLayer": [
                    40,
                    174
                ],
                "self": [
                    40,
                    42,
                    43,
                    44,
                    106,
                    78,
                    79,
                    107,
                    108,
                    82,
                    109,
                    85,
                    86,
                    88,
                    93,
                    94
                ],
                "dtype": [
                    40,
                    72,
                    74,
                    76,
                    172,
                    173,
                    79,
                    175,
                    84
                ],
                "self.trainable": [
                    42
                ],
                "self.built": [
                    43
                ],
                "self.sparse": [
                    108,
                    44,
                    85
                ],
                "sparse": [
                    176,
                    44
                ],
                "input_shape": [
                    56,
                    64,
                    68,
                    46
                ],
                "batch_input_shape": [
                    68,
                    70,
                    102,
                    103,
                    46,
                    78,
                    50,
                    83,
                    54,
                    56,
                    89,
                    63
                ],
                "input_tensor": [
                    98,
                    99,
                    73,
                    76,
                    81,
                    50,
                    83,
                    54,
                    89,
                    92,
                    93
                ],
                "K.int_shape": [
                    54
                ],
                "batch_size": [
                    68
                ],
                "K.floatx": [
                    74,
                    173
                ],
                "K.dtype": [
                    76
                ],
                "self.batch_input_shape": [
                    106,
                    78
                ],
                "self.dtype": [
                    107,
                    79
                ],
                "self.is_placeholder": [
                    88,
                    82
                ],
                "K.placeholder": [
                    83
                ],
                "self.name": [
                    109,
                    86
                ],
                "input_tensor._keras_shape": [
                    89
                ],
                "input_tensor._uses_learning_phase": [
                    92
                ],
                "input_tensor._keras_history": [
                    93
                ],
                "Node": [
                    94
                ],
                "interfaces.legacy_input_support": [
                    33
                ],
                "interfaces": [
                    33
                ],
                "config": [
                    106,
                    110
                ],
                "batch_shape": [
                    170,
                    171,
                    165,
                    174
                ],
                "tensor": [
                    177,
                    165
                ],
                "shape": [
                    170,
                    171,
                    166
                ],
                "input_layer": [
                    180,
                    174
                ],
                "outputs": [
                    180,
                    181
                ],
                "output_tensors": [
                    180
                ],
                "input_layer._inbound_nodes": [
                    180
                ],
                "unpack_singleton": [
                    181
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_22/tests/keras/layers/core_test.py",
                "test_function": "test_sequential_as_downstream_of_masking_layer",
                "test_function_code": "@keras_test\ndef test_sequential_as_downstream_of_masking_layer():\n\n    inputs = layers.Input(shape=(3, 4))\n    x = layers.Masking(mask_value=0., input_shape=(3, 4))(inputs)\n    s = Sequential()\n    s.add(layers.Dense(5, input_shape=(4,)))\n    s.add(layers.Activation('relu'))\n    x = layers.wrappers.TimeDistributed(s)(x)\n    model = Model(inputs=inputs, outputs=x)\n    model.compile(optimizer='rmsprop', loss='mse')\n    model_input = np.random.randint(low=1, high=5, size=(10, 3, 4))\n    for i in range(4):\n        model_input[i, i:, :] = 0.\n    model.fit(model_input,\n              np.random.random((10, 3, 5)), epochs=1, batch_size=6)\n\n    mask_outputs = [model.layers[1].compute_mask(model.layers[1].input)]\n    mask_outputs += [model.layers[2].compute_mask(model.layers[2].input, mask_outputs[-1])]\n    func = K.function([model.input], mask_outputs)\n    mask_outputs_val = func([model_input])\n    assert np.array_equal(mask_outputs_val[0], np.any(model_input, axis=-1))\n    assert np.array_equal(mask_outputs_val[1], np.any(model_input, axis=-1))",
                "test_error": "TypeError: Layer dense_1_input does not support masking, but was passed an input_mask: Tensor(\"time_distributed_1/Reshape_1:0\", shape=(?,), dtype=bool)",
                "full_test_error": "@keras_test\n    def test_sequential_as_downstream_of_masking_layer():\n    \n        inputs = layers.Input(shape=(3, 4))\n        x = layers.Masking(mask_value=0., input_shape=(3, 4))(inputs)\n        s = Sequential()\n        s.add(layers.Dense(5, input_shape=(4,)))\n        s.add(layers.Activation('relu'))\n>       x = layers.wrappers.TimeDistributed(s)(x)\n\ntests/keras/layers/core_test.py:355: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/engine/base_layer.py:457: in __call__\n    output = self.call(inputs, **kwargs)\nkeras/layers/wrappers.py:248: in call\n    y = self.layer.call(inputs, **kwargs)\nkeras/engine/network.py:570: in call\n    output_tensors, _, _ = self.run_internal_graph(inputs, masks)\nkeras/engine/network.py:726: in run_internal_graph\n    computed_mask)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.engine.input_layer.InputLayer object at 0x12ccf1990>\ninputs = <tf.Tensor 'time_distributed_1/Reshape:0' shape=(?, 4) dtype=float32>\nmask = <tf.Tensor 'time_distributed_1/Reshape_1:0' shape=(?,) dtype=bool>\n\n    def compute_mask(self, inputs, mask=None):\n        \"\"\"Computes an output mask tensor.\n    \n        # Arguments\n            inputs: Tensor or list of tensors.\n            mask: Tensor or list of tensors.\n    \n        # Returns\n            None or a tensor (or list of tensors,\n                one per output tensor of the layer).\n        \"\"\"\n        if not self.supports_masking:\n            if mask is not None:\n                if isinstance(mask, list):\n                    if any(m is not None for m in mask):\n                        raise TypeError('Layer ' + self.name +\n                                        ' does not support masking, '\n                                        'but was passed an input_mask: ' +\n                                        str(mask))\n                else:\n                    raise TypeError('Layer ' + self.name +\n                                    ' does not support masking, '\n                                    'but was passed an input_mask: ' +\n>                                   str(mask))\nE                   TypeError: Layer dense_1_input does not support masking, but was passed an input_mask: Tensor(\"time_distributed_1/Reshape_1:0\", shape=(?,), dtype=bool)\n\nkeras/engine/base_layer.py:616: TypeError",
                "traceback": "keras/engine/base_layer.py:457: in __call__\n    output = self.call(inputs, **kwargs)\nkeras/layers/wrappers.py:248: in call\n    y = self.layer.call(inputs, **kwargs)\nkeras/engine/network.py:570: in call\n    output_tensors, _, _ = self.run_internal_graph(inputs, masks)\nkeras/engine/network.py:726: in run_internal_graph\n    computed_mask)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.engine.input_layer.InputLayer object at 0x12ccf1990>\ninputs = <tf.Tensor 'time_distributed_1/Reshape:0' shape=(?, 4) dtype=float32>\nmask = <tf.Tensor 'time_distributed_1/Reshape_1:0' shape=(?,) dtype=bool>\n\n    def compute_mask(self, inputs, mask=None):\n        \"\"\"Computes an output mask tensor.\n    \n        # Arguments\n            inputs: Tensor or list of tensors.\n            mask: Tensor or list of tensors.\n    \n        # Returns\n            None or a tensor (or list of tensors,\n                one per output tensor of the layer).\n        \"\"\"\n        if not self.supports_masking:\n            if mask is not None:\n                if isinstance(mask, list):\n                    if any(m is not None for m in mask):\n                        raise TypeError('Layer ' + self.name +\n                                        ' does not support masking, '\n                                        'but was passed an input_mask: ' +\n                                        str(mask))\n                else:\n                    raise TypeError('Layer ' + self.name +\n                                    ' does not support masking, '\n                                    'but was passed an input_mask: ' +\n>                                   str(mask))\nE                   TypeError: Layer dense_1_input does not support masking, but was passed an input_mask: Tensor(\"time_distributed_1/Reshape_1:0\", shape=(?,), dtype=bool)\n\nkeras/engine/base_layer.py:616: TypeError",
                "test_function_decorators": [
                    "keras_test"
                ]
            }
        ]
    }
}