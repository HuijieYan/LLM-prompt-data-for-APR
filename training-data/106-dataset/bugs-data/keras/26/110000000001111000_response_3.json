{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n            go_backwards=False, mask=None, constants=None,\n            unroll=False):\n\n    import tensorflow as tf\n    from tensorflow.python.ops import tensor_array_ops, control_flow_ops\n    import numpy as np\n    error_message = \"mask must be provided if states is not None\"\n    assert not mask or len(initial_states) != 0, error_message\n    \n    inputs_shape = tf.shape(inputs)\n    \n    if len(inputs_shape) < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    if unroll:\n    \n        time_steps = inputs_shape[1]\n        input_ta = tensor_array_ops.TensorArray(size=time_steps,\n                                                dynamic_size=False,\n                                                dtype=inputs.dtype,\n                                                tensor_array_name='input_ta')\n        input_ta = input_ta.unstack(reverse(inputs, axis=1))\n    \n        if mask is not None:\n            if go_backwards:\n                mask = reverse(mask, axis=0)\n    \n            mask_ta = tensor_array_ops.TensorArray(size=time_steps,\n                                                dynamic_size=False,\n                                                dtype=tf.bool,\n                                                tensor_array_name='mask_ta')\n            mask_ta = mask_ta.unstack(mask)\n    \n            if go_backwards:\n                input_ta, mask_ta = reverse(input_ta, axis=0), reverse(mask_ta,\n                                                                   axis=0)\n    \n        if mask is not None:\n            outputs, _ = control_flow_ops.while_loop(\n                cond=lambda time, *_: time < time_steps,\n                body=_step_with_mask,\n                loop_vars=(time, mask_ta, input_ta, tf.zeros_like(initial_states)),\n                parallel_iterations=32,\n                back_prop=unroll)\n        else:\n            outputs, _ = control_flow_ops.while_loop(\n                cond=lambda time, *_: time < time_steps,\n                body=_step,\n                loop_vars=(time, input_ta, tf.zeros_like(initial_states)),\n                parallel_iterations=32,\n                back_prop=unroll)\n    \n    if mask is not None:\n        mask = tf.to_int32(reverse(mask, 0))\n    \n    states = initial_states\n    successive_outputs = []\n    time = tf.constant(0, dtype=tf.int32)\n    time_shape = 0\n    \n    def _step(time, input_ta_t, mask_ta_t, *states):\n        current_input = input_ta_t.read(time)\n        output, new_states = step_function(current_input, states + constants)\n        filtered_output = tf.where(tf.gather(mask_ta_t, time), output, tf.zeros_like(output))\n        if time_shape is None:\n            filtered_output.set_shape([None\n                                      if i is None else i.value\n                                      for i in filtered_output.get_shape()])\n        time_shape = np.inf\n        return (time + 1, input_ta_t, mask_ta_t) + tuple(new_states)\n    \n    def _step_with_mask(time, mask_ta, input_ta, *states):\n        return _step(time, input_ta, mask_ta, *states)\n    \n    return last_output, outputs, new_states"
        }
    ]
}