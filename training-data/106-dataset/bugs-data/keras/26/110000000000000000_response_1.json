{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n\n    \"\"\"Iterates over the time dimension of a tensor.\n    \n    # Arguments\n        step_function : RNN step function.\n            - Parameters:\n                inputs : tensor with the shape `(samples, ...)` (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                states : list of tensors.\n            - Returns:\n                outputs : tensor with the shape `(samples, output_dim)`\n                    (no time dimension).\n                new_states : list of tensors, same length and shapes\n                    as 'states'. The first state in the list must be the\n                    output tensor at the previous timestep.\n        inputs : tensor of temporal data of shape `(samples, time, ...)`\n            (at least 3D).\n        initial_states : tensor with the shape (samples, output_dim)\n            (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n        go_backwards : boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n        mask : binary tensor with the shape `(samples, time, 1)`,\n            with a zero for every element that is masked.\n        constants : a list of constant values passed at each step.\n        unroll : whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on the backend).\n        input_length : not relevant in the TensorFlow implementation.\n            Must be specified if using unrolling with Theano.\n    \n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n    \n            last_output : the latest output of the rnn, of the shape `(samples, ...)`\n            outputs : tensor with the shape `(samples, time, ...)` where each\n                entry `outputs[s, t]` is the output of the step function\n                at time `t` for sample `s`.\n            new_states : list of tensors, latest states returned by\n                the step function, of the shape `(samples, ...)`.\n    \n    # Raises\n        ValueError: if the input dimension is less than 3.\n        ValueError: if `unroll` is `True` but the input timestep is not a fixed number.\n        ValueError: if `mask` is provided (not `None`) but states are not provided\n            (`len(states)` == 0).\n    \"\"\"\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    # Transpose to time-major, i.e.\n    # from (batch, time, ...) to (time, batch, ...)\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n    \n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = expand_dims(mask, 1)\n        mask = tf.transpose(mask, axes)\n    \n    if constants is None:\n        constants = []\n    \n    global uses_learning_phase\n    uses_learning_phase = False\n    \n    if unroll:\n        if not inputs.get_shape()[0]:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n    \n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list.reverse()\n    \n        if mask is not None:\n            mask_list = tf.unstack(mask)\n            if go_backwards:\n                mask_list.reverse()\n    \n            for inp, mask_t in zip(input_list, mask_list):\n                output, new_states = step_function(inp, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n    \n                # tf.where needs its condition tensor to be the same shape as its two\n                # result tensors, but in our case the condition (mask) tensor is\n                # (nsamples, 1), and A and B are (nsamples, ndimensions).\n                # So we need to broadcast the mask to match the shape of A and B.\n                # That's what the tile call does, it just repeats the mask along its second dimension\n                # n times.\n                tiled_mask_t = tf.tile(mask_t, [1, tf.shape(output)[1]])\n                # Selects elements from input or based on condition\n                output = input.output = tf.where(tf.tile(mask_t, tf.shape(output)), output, prev_output)\n    \n                if not successive_outputs:\n                    prev_output = zeros_like(output)\n                else:\n                    prev_output = successive_outputs[-1]\n    \n                output = tf.where(tiled_mask_t, output, prev_output)\n    \n                return_states = []\n                for state, new_state in zip(states, new_states):\n                    # (see earlier comment for tile explanation)\n                    tiled_mask_t = tf.tile(mask_t, tf.shape(new_state))\n                    return_states.append(tf.where(tile_mask_t, new_state, state))\n                states = return_states\n                successive_outputs.append(output)\n                successive_states.append(states)\n    \n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n        else:\n            for inp in input_list:\n                output, states = step_function(inp, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                successive_outputs.append(output)\n                successive_states.append(states)\n    \n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n    \n    \n    \n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    \n    return last_output, outputs, new_states"
        }
    ]
}