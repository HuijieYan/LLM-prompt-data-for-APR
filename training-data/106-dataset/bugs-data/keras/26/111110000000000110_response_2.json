{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n\n    \"\"\"Iterates over the time dimension of a tensor.\n    \n    # Arguments\n        step_function: RNN step function.\n            Parameters:\n                inputs: tensor with shape `(samples, ...)` (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                states: list of tensors.\n            Returns:\n                outputs: tensor with shape `(samples, output_dim)`\n                    (no time dimension).\n                new_states: list of tensors, same length and shapes\n                    as 'states'. The first state in the list must be the\n                    output tensor at the previous timestep.\n        inputs: tensor of temporal data of shape `(samples, time, ...)`\n            (at least 3D).\n        initial_states: tensor with shape (samples, output_dim)\n            (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n        go_backwards: boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n        mask: binary tensor with shape `(samples, time, 1)`,\n            with a zero for every element that is masked.\n        constants: a list of constant values passed at each step.\n        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n        input_length: not relevant in the TensorFlow implementation.\n            Must be specified if using unrolling with Theano.\n    \n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n    \n            last_output: the latest output of the rnn, of shape `(samples, ...)`\n            outputs: tensor with shape `(samples, time, ...)` where each\n                entry `outputs[s, t]` is the output of the step function\n                at time `t` for sample `s`.\n            new_states: list of tensors, latest states returned by\n                the step function, of shape `(samples, ...)`.\n    \n    # Raises\n        ValueError: if input dimension is less than 3.\n        ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n        ValueError: if `mask` is provided (not `None`) but states is not provided\n            (`len(states)` == 0).\n    \"\"\"\n    if len(inputs.shape) < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    axis = 1\n    if go_backwards:\n        inputs = backend.reverse(inputs, axis)\n    \n    if mask is not None:\n        mask = math_ops.cast(mask, dtypes.bool)\n        if mask.shape.ndims is None:\n            mask = array_ops.expand_dims(mask, axis)\n            mask_right = True\n        else:\n            mask_right = mask.shape.ndims < inputs.shape.ndims\n            if mask_right:\n                mask = array_ops.reshape(\n                    mask, array_ops.concat(\n                        [array_ops.shape(mask), [-1]], 0))\n    \n    # Helper function for step calculation\n    def step(time, output_ta_t, *states):\n        \"\"\"RNN step function.\n    \n        # Arguments\n            time: Current timestep value.\n            output_ta_t: TensorArray.\n            *states: List of states.\n    \n        # Returns\n            Tuple: `(time + 1, output_ta_t) + tuple(new_states)`\"\"\"\n        current_input = gather(inputs, time)\n        if mask is not None:\n            current_mask = gather(mask, time)\n            (output, new_states) = step_function(\n                current_input, tuple(states) + tuple(constants))\n            output = array_ops.where(current_mask, output, array_ops.zeros_like(output))\n        else:\n            (output, new_states) = step_function(\n                current_input, tuple(states) + tuple(constants))\n    \n        return (time + 1, output_ta_t.write(time, output) ,) + tuple(new_states)\n    \n    # Create step output tensor array.    \n    output_ta = tensor_array_ops.TensorArray(      \n        dtype=inputs.dtype, size=array_ops.shape(inputs)[axis],\n        tensor_array_name='output_ta')\n    \n    final_outputs = control_flow_ops.while_loop(\n        cond=lambda time, *_: time < array_ops.shape(inputs)[axis],\n        body=step,\n        loop_vars=(\n            array_ops.constant(0, dtype=dtypes.int32),\n            output_ta) + tuple(initial_states),\n        parallel_iterations=32)\n    \n    last_time = final_outputs[0]\n    output_ta = final_outputs[1]\n    new_states = final_outputs[2:]\n    \n    # Unpack output tensor array.\n    outputs = output_ta.stack()\n    last_output = gather(outputs, last_time - 1)\n    \n    # Return everything\n    return (last_output, outputs, new_states)"
        }
    ]
}