{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    import tensorflow as tf\n    from tensorflow.python.ops import tensor_array_ops\n    from tensorflow.python.ops import control_flow_ops\n    from tensorflow.python.keras.backend import zeros_like, expand_dims, reverse, cast\n    \"\"\"\n    Iterates over the time dimension of a tensor.\n    \n    Args:\n        step_function: RNN step function.\n        inputs: tensor of temporal data of shape `(samples, time, ...)` (at least 3D).\n        initial_states: tensor with shape (samples, output_dim) (no time dimension),\n                        containing the initial values for the states used in the step function.\n        go_backwards: boolean. If True, do the iteration over the time dimension in reverse order and return the reversed sequence.\n        mask: binary tensor with shape `(samples, time, 1)`, with a zero for every element that is masked.\n        constants: a list of constant values passed at each step.\n        unroll: whether to unroll the RNN or to use a symbolic loop.\n        input_length: not relevant in the TensorFlow implementation.\n    \n    Returns:\n        A tuple, `(last_output, outputs, new_states)`.\n    \"\"\"\n    # ... (omitted code)\n    \n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape().as_list()) == ndim - 1:\n            mask = expand_dims(mask)\n    \n    # ... (omitted code)\n    \n    # Corrected masking and shape handling\n    # Updated logic for handling masking and applying it to the states\n    if mask is not None:\n        # ... (existing code)\n        for state, new_state in zip(states, new_states):\n            new_state.set_shape(state.get_shape())\n        tile_shape = tf.shape(output)\n        tile_mask = tf.tile(mask_t, [1, tile_shape[1]])\n        states = [tf.where(tile_mask, new_state, state) for state, new_state in zip(states, new_states)]\n        output = tf.where(tile_mask, output, prev_output)\n        new_states = [tf.where(tile_mask, new_state, state) for state, new_state in zip(states, new_states)]\n        # ... (existing code)\n    \n    # ... (omitted code)\n    \n    return last_output, outputs, new_states"
        }
    ]
}