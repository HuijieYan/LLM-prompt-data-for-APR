{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    import tensorflow as tf\n    from tensorflow.python.util import tf_inspect\n    \"\"\"Iterates over the time dimension of a tensor.\n    \n    # Arguments\n    ... (same as before)\n    \n    # Returns\n    ... (same as before)\n    \n    # Raises\n    ... (same as before)\n    \"\"\"\n    \n    # ... (previous implementation)\n    \n    def _step(time, output_ta_t, *states):\n        current_input = input_ta.read(time)\n        mask_t = mask_ta.read(time) if mask is not None else None\n        output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n    \n        # Check if the output uses learning phase\n        if getattr(output, '_uses_learning_phase', False):\n            global uses_learning_phase\n            uses_learning_phase = True\n    \n        if mask is not None:\n            tiled_mask_t = tf.tile(mask_t, [1, tf.shape(output)[1]])\n            condition = tf.math.is_true(tiled_mask_t)\n            output = tf.where(condition, output, output_ta_t.read(time - 1))\n    \n            new_states = [tf.where(tf.tile(mask_t, [1, tf.shape(new_state)[1]]), new_state, state) for state, new_state in zip(states, new_states)]\n    \n        output_ta_t = output_ta_t.write(time, output)\n        return (time + 1, output_ta_t) + new_states\n    \n    original_fn_args = tf_inspect.getfullargspec(step_function).args\n    rnn_fn_args = original_fn_args[:-1]  # Exclude the last argument (the constants)\n    \n    final_outputs = tf.while_loop(\n        cond=lambda time, *_: time < time_steps,\n        body=_step,\n        loop_vars=(time, output_ta) + states,\n        parallel_iterations=32,\n        swap_memory=True)\n    \n    last_time, output_ta, *new_states = final_outputs\n    outputs = output_ta.stack()\n    last_output = output_ta.read(last_time - 1)\n    \n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    \n    return last_output, outputs, new_states"
        }
    ]
}