{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n\n    ndim = len(inputs.get_shape().as_list())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    # Transpose to time-major, i.e.\n    # from (batch, time, ...) to (time, batch, ...)\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, perm=axes)\n    \n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape().as_list()) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=-1)\n        mask = tf.transpose(mask, perm=axes)\n    \n    if constants is None:\n        constants = []\n    \n    global uses_learning_phase\n    uses_learning_phase = False\n    \n    if unroll:\n      # rest of the code\n      # ...\n      pass\n    \n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, axis=[0])\n    \n        states = tuple(initial_states)\n    \n        time_steps = tf.shape(inputs)[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n        output_ta = tf.TensorArray(dtype=outputs.dtype, size=time_steps, tensor_array_name='output_ta')\n        input_ta = tf.TensorArray(dtype=inputs.dtype, size=time_steps, tensor_array_name='input_ta')\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype='int32', name='time')\n    \n        if mask is not None:\n            if not states:\n                raise ValueError('No initial states provided! When using masking in an RNN, you should provide initial states (and your step function should return as its first state at time `t` the output at time `t-1`).')\n            if go_backwards:\n                mask = tf.reverse(mask, axis=[0])\n    \n            mask_ta = tf.TensorArray(dtype=tf.bool, size=time_steps, tensor_array_name='mask_ta')\n            mask_ta = mask_ta.unstack(mask)\n    \n            def _step(time, output_ta_t, *states):\n              # rest of the code\n              #...\n              pass\n        else:\n          # rest of the code\n          # ...\n          pass"
        }
    ]
}