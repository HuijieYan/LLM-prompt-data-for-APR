{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states, go_backwards=False, mask=None, constants=None, unroll=False, input_length=None):\n\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, axes)\n    \n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=-1)\n        mask = tf.transpose(mask, axes)\n    \n    if constants is None:\n        constants = []\n    \n    if unroll:\n        if not inputs.get_shape()[0]:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n    \n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list = list(reversed(input_list))\n    \n        for inp in input_list:\n            output, new_states = step_function(inp, states + constants)\n            if getattr(output, '_uses_learning_phase', False):\n                uses_learning_phase = True\n            if mask is not None:\n                tiled_mask = tf.tile(mask, tf.stack([1, tf.shape(output)[1]]))\n                output = tf.where(tiled_mask, output, successive_outputs[-1] if successive_outputs else tf.zeros_like(output))\n                new_states = [tf.where(tiled_mask, new_states[i], state) for i, state in enumerate(states)]\n            successive_outputs.append(output)\n            successive_states.append(new_states)\n            states = new_states\n        last_output = successive_outputs[-1]  # The latest output of the rnn\n    \n        outputs = tf.stack(successive_outputs)\n        new_states = successive_states[-1]  # Latest states returned by the step function\n    \n    else:\n        states = tuple(initial_states)\n    \n        def rnn_step(time, output_ta, *states):\n            current_input = input_ta.read(time)\n            output, new_states = step_function(current_input, states + constants)\n    \n            if hasattr(output, '_uses_learning_phase') and output._uses_learning_phase:\n                global uses_learning_phase\n                uses_learning_phase = True\n    \n            new_states = [tf.convert_to_tensor(new_state) for new_state in new_states]\n            output_ta = output_ta.write(time, output)\n            return (time + 1, output_ta) + tuple(new_states)\n    \n        input_ta = tf.TensorArray(dtype=inputs.dtype, size=tf.shape(inputs)[0])\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype='int32')\n        output_ta = tf.TensorArray(size=tf.shape(inputs)[0], dtype=tf.float32)\n    \n        final_outputs = tf.while_loop(\n            cond=lambda time, *args: time < tf.shape(inputs)[0],\n            body=rnn_step,\n            loop_vars=(time, output_ta) + states\n        )\n    \n        last_time = final_outputs[0]\n        outputs = final_outputs[1].stack()\n        last_output = final_outputs[1].read(last_time - 1)\n        new_states = final_outputs[2:]\n    \n    # Transpose back to `(samples, time, ...)` from `(time, samples, ...)`\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, axes)\n    \n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states"
        }
    ]
}