{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 114,
            "file_name": "engine/sequential.py",
            "replace_code": "def add(self, layer):\n\n    \"\"\"Adds a layer instance on top of the layer stack.\n    \n        # Arguments\n            layer: layer instance.\n    \n        # Raises\n            TypeError: If `layer` is not a layer instance.\n            ValueError: In case the `layer` argument does not\n                know its input shape.\n            ValueError: In case the `layer` argument has\n                multiple output tensors, or is already connected\n                somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, keras.layers.Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    \n    if not self._layers:\n        if hasattr(layer, 'batch_input_shape'):\n            if hasattr(layer, '_batch_input_shape'):\n                batch_shape = layer._batch_input_shape\n            else:\n                batch_shape = layer.batch_input_shape\n            if hasattr(layer, '_dtype'):\n                dtype = layer._dtype\n            else:\n                dtype = layer.dtype\n                \n            # Instantiate the input layer.\n            x = keras.layers.Input(\n                        batch_shape=batch_shape,\n                        dtype=dtype,\n                        name=layer.name + '_input')\n    \n            # This will build the current layer and create the node connecting the current layer to the input layer we just created.\n            layer(x)\n        elif not self.inputs:\n            raise ValueError('The first layer of a Sequential model should have an output shape. ')\n    else:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n    \n        self._inbound_nodes[-1].output_tensors = [output_tensor]\n            \n    self.layers.append(layer)\n    if not self.inputs:\n        self.build(layer.output_shape) "
        }
    ]
}