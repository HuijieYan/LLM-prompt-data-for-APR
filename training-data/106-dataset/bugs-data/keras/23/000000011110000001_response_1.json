{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "engine/sequential.py",
            "replace_code": "def add(self, layer):\n    from tensorflow.keras.layers import InputLayer, Input\n    from tensorflow.keras import Model, Sequential\n    from tensorflow.python.keras.engine.network import get_source_inputs\n    from tensorflow.keras import Layer\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    \n    self.built = False\n    if not self._layers:\n        if isinstance(layer, InputLayer):\n            set_inputs = True\n            self.outputs = [layer.output]\n            self.inputs = get_source_inputs(self.outputs[0])\n            self.built = True\n        elif hasattr(layer, 'output'):\n            # For layers with a computed output shape, set them as built\n            set_inputs = True\n            self.outputs = [layer.output]\n            output_shape = layer.compute_output_shape(layer.input_shape)\n            if output_shape is None:\n                raise ValueError('The layer ' + layer.name + ' has unknown computed output shape.')\n            self.build(input_shape=output_shape)\n        else:\n            self._layers.append(layer)\n    else:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor.')\n        self.outputs = [output_tensor]\n    \n    if self.inputs:\n        self.build()\n    elif not set_inputs:\n        self._layers.append(layer)"
        }
    ]
}