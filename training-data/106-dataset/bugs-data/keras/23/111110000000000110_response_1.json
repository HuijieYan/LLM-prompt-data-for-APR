{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n\n    \"\"\"Adds a layer instance on top of the layer stack.\n    \n    # Arguments\n        layer: layer instance.\n    \n    # Raises\n        TypeError: If `layer` is not a layer instance.\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be '\n                        'an instance of class Layer. '\n                        'Found: ' + str(layer))\n    self.built = False\n    if not self._layers:\n        if hasattr(layer, 'batch_input_shape'):\n            batch_shape = layer.batch_input_shape\n            x = Input(batch_shape=batch_shape, name=layer.name + '_input')\n            layer(x)\n            self.inputs = [x]\n            self.outputs = [layer(x)]\n        else:\n            raise ValueError('The layer does not know its input shape')\n    else:\n        if len(layer.inbound_nodes[0].input_tensors) != 1:\n            raise TypeError('All layers in a Sequential model should '\n                            'have a single inbound tensor. ')\n        x = layer.inbound_nodes[0].input_tensors[0]\n        output_tensor = layer(x)\n        if len(layer.inbound_nodes[0].output_tensors) == 1:\n            self.outputs = [output_tensor]\n            self.build()\n        else:\n            raise ValueError('All layers in a Sequential model '\n                             'should have a single output tensor. ')\n    self._layers.append(layer)"
        }
    ]
}