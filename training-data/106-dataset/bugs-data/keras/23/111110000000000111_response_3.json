{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be '\n                        'an instance of class Layer. '\n                        'Found: ' + str(layer))\n    self.built = False\n    if not self._layers:\n        # First layer in model\n        if isinstance(layer, InputLayer):\n            raise ValueError('An InputLayer should not be added through `add`. Use `model(inputs=...)` or `model.add(layer)` instead.')\n        \n        # inference the expected input shape and dtype\n        if isinstance(layer, (Model, Sequential)):\n            if not layer.layers:\n                raise ValueError('Cannot add an empty model '\n                                 'to a `Sequential` model.')\n                \n            first_layer = layer.layers[0]\n            while isinstance(first_layer, (Model, Sequential)):\n                first_layer = first_layer.layers[0]\n            \n            input_shape = layer.input_shape\n            dtype = layer.input_dtype\n            \n        else:\n            input_shape = layer.input_shape\n            dtype = layer.input_dtype\n    \n        if input_shape:\n            self.inputs = [Input(shape=input_shape, dtype=dtype)]\n            x = self.inputs[0]\n            # Connect the layer to the input tensor\n            outputs = layer(x)\n            self.outputs = [outputs]\n        else:\n            raise ValueError('The first layer should specify `input_shape`, but it was not initialized.')\n    \n    else:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model '\n                            'should have a single output tensor. '\n                            'For multi-output layers, '\n                            'use the Functional API.')\n        self.outputs = [output_tensor]\n        outputs = self.outputs[0]\n        \n        # Propagate input and output structure from layer to model\n        self.inputs = network.get_source_inputs(outputs)\n    \n    # add the layer to the model\n    self._layers.append(layer)"
        }
    ]
}