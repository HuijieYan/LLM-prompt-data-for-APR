{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "engine/sequential.py",
            "replace_code": "def add(self, layer):\n\n    if isinstance(layer, Sequential):\n        if not layer.layers:\n            raise ValueError('Cannot add an empty model to a `Sequential` model.')\n        for sub_layer in layer.layers:\n            self.add(sub_layer)\n    elif isinstance(layer, Layer):\n        self.built = False\n        if self.outputs:\n            output_tensor = layer(self.outputs[0])\n            if isinstance(output_tensor, list):\n                raise TypeError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n            self.outputs = [output_tensor]\n        if self.inputs:\n            self.build()\n        else:\n            self._layers.append(layer)\n    else:\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))"
        }
    ]
}