{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ', layer)\n    \n    if self.outputs:\n        output_shape = self.outputs[0]._keras_shape\n        if len(output_shape) == 2:\n            input_shape = (output_shape[-1],)\n        else:\n            input_shape = output_shape[1:]\n    \n        x = Input(shape=input_shape)\n        layer(x)\n        self.inputs = network.get_source_inputs(x)\n    else:\n        if not self._layers:\n            set_inputs = False\n            first_layer = layer\n            if isinstance(layer, (Model, Sequential)):\n                if not layer.layers:\n                    raise ValueError('Cannot add an empty model to a `Sequential` model.')\n    \n                first_layer = layer.layers[0]\n                while isinstance(first_layer, (Model, Sequential)):\n                    first_layer = first_layer.layers[0]\n    \n            input_shape = first_layer.compute_output_shape((None,) + first_layer.output_shape[1:])\n    \n            x = Input(shape=input_shape[1:])\n            layer(x)\n            self.inputs = network.get_source_inputs(x)\n    \n    self.built = False\n    self._layers.append(layer)"
        }
    ]
}