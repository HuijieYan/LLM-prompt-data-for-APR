{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "engine/sequential.py",
            "replace_code": "def add(self, layer):\n\n    \"\"\"Adds a layer instance on top of the layer stack.\n    \n    # Arguments\n        layer: layer instance.\n    \n    # Raises\n        TypeError: If `layer` is not a layer instance.\n        ValueError: In case the `layer` argument does not know its input shape.\n        ValueError: In case the `layer` argument has multiple output tensors, or is already connected somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    \n    if len(self.outputs) > 0:\n        raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n    \n    if len(self._layers) == 0:\n        if not hasattr(layer, 'batch_input_shape'):\n            raise ValueError('The first layer added to a Sequential model must know its input shape. Found layer: ' + str(layer))\n        inputs = Input(batch_shape=layer.batch_input_shape)\n        layer(inputs)\n        self.outputs = [layer.outputs[0]]\n        self.inputs = [inputs]\n    else:\n        output = layer(self.outputs[0])\n        if isinstance(output, list):\n            raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [output]\n    \n    self.built = False\n    self._layers.append(layer)"
        }
    ]
}