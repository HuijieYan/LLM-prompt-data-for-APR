{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "/keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    \n    if hasattr(self, '_input_layers') and self.outputs:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [output_tensor]\n    elif hasattr(self, '_input_layers'):\n        set_inputs = False\n        if not self.outputs:\n            if not self.inputs:\n                if not hasattr(layer, 'batch_input_shape'):\n                    raise ValueError('The first layer in a Sequential model must have a defined input shape. Found: ' + str(layer))\n                # Create input layer if not already defined\n                if not self._layers:\n                    x = Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, name=layer.name + '_input')\n                    layer(x)\n                    self.inputs = [x]\n                    self.outputs = [layer(x)]\n                    set_inputs = True\n            else:\n                raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        if not set_inputs:\n            if len(layer._inbound_nodes[-1].output_tensors) != 1:\n                raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n    \n            self.outputs = [layer._inbound_nodes[-1].output_tensors[0]]\n            self.inputs = network.get_source_inputs(self.outputs[0])\n    else:\n        self._layers.append(layer)"
        }
    ]
}