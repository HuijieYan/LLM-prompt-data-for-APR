{
    "luigi": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "scheduler.py",
            "replace_code": "def set_status(self, task, new_status, config=None):\n    from enum import Enum\n    assert isinstance(new_status, Status)  # Ensure new_status is a Status enum value\n    \n    if new_status == Status.FAILED:\n        assert config is not None\n    \n    if new_status == Status.DISABLED and task.status == Status.RUNNING:\n        return\n    \n    if task.status == Status.DISABLED:\n        if new_status == Status.DONE:\n            self.re_enable(task)\n    \n        # don't allow workers to override a scheduler disable\n        elif task.scheduler_disable_time is not None:\n            return\n    \n    if new_status == Status.FAILED and task.can_disable():\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = Status.DISABLED\n            notifications.send_error_email(\n                'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                '{task} failed {failures} times in the last {window} seconds, so it is being '\n                'disabled for {persist} seconds'.format(\n                    failures=config.disable_failures,\n                    task=task.id,\n                    window=config.disable_window,\n                    persist=config.disable_persist,\n                ))\n    elif new_status == Status.DISABLED:\n        task.scheduler_disable_time = None\n    \n    self._status_tasks[task.status].pop(task.id)\n    self._status_tasks[new_status][task.id] = task\n    task.status = new_status"
        }
    ]
}