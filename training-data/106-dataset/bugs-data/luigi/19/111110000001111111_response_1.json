{
    "luigi": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "/luigi/scheduler.py",
            "replace_code": "def set_status(self, task, new_status, config=None):\n\n    if new_status == 'FAILED':\n        if config is None:\n            raise ValueError(\"Config must be provided for setting task status to FAILED\")\n    \n    if new_status == 'DISABLED' and task.status == 'RUNNING':\n        return\n    \n    if task.status == 'DISABLED':\n        if new_status == 'DONE':\n            self.re_enable(task)\n    \n    if new_status == 'FAILED' and task.can_disable():\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time() + config.disable_persist\n            new_status = 'DISABLED'\n            notifications.send_error_email(\n                f\"Luigi Scheduler: DISABLED {task.id} due to excessive failures\",\n                f\"{task.id} failed {config.disable_failures} times in the last {config.disable_window} seconds, so it is being disabled for {config.disable_persist} seconds\"\n            )\n    elif new_status == 'DISABLED':\n        task.scheduler_disable_time = 0\n    \n    self._status_tasks[task.status].pop(task.id)\n    self._status_tasks[new_status][task.id] = task\n    task.status = new_status"
        }
    ]
}