{
    "1.1.1": "def get_pending_tasks(self, state):\n    \n    if len(self.tasks) < state.num_pending_tasks():\n        return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                                self.tasks)\n    else:\n        return state.get_pending_tasks()\n",
    "1.1.2": "Get PENDING (and RUNNING) tasks for this worker.\n\nYou have to pass in the state for optimization reasons.",
    "1.2.1": "class Worker(object)",
    "1.2.2": "Structure for tracking worker activity and keeping their references.",
    "1.2.3": [
        "get_pending_tasks(self, state)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/luigi_10/luigi/scheduler.py",
    "1.3.2": [
        "get_pending_tasks(self, state)",
        "get_pending_tasks(self)",
        "num_pending_tasks(self)"
    ],
    "1.4.1": [
        "    def test_get_pending_tasks_with_many_done_tasks(self):\n        sch = luigi.scheduler.Scheduler()\n        sch.add_task(worker='NON_TRIVIAL', task_id='A', resources={'a': 1})\n        sch.add_task(worker='TRIVIAL', task_id='B', status='PENDING')\n        sch.add_task(worker='TRIVIAL', task_id='C', status='DONE')\n        sch.add_task(worker='TRIVIAL', task_id='D', status='DONE')\n\n        scheduler_state = sch._state\n        trivial_worker = scheduler_state.get_worker('TRIVIAL')\n        self.assertEqual({'B'}, self.get_pending_ids(trivial_worker, scheduler_state))\n\n        non_trivial_worker = scheduler_state.get_worker('NON_TRIVIAL')\n        self.assertEqual({'A'}, self.get_pending_ids(non_trivial_worker, scheduler_state))"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/luigi_10/test/scheduler_test.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Items in the second set but not the first:\nE       'A'"
        ]
    ],
    "2.1.2": [
        [
            "self = <scheduler_test.SchedulerWorkerTest testMethod=test_get_pending_tasks_with_many_done_tasks>\n\n    def test_get_pending_tasks_with_many_done_tasks(self):\n        sch = luigi.scheduler.Scheduler()\n        sch.add_task(worker='NON_TRIVIAL', task_id='A', resources={'a': 1})\n        sch.add_task(worker='TRIVIAL', task_id='B', status='PENDING')\n        sch.add_task(worker='TRIVIAL', task_id='C', status='DONE')\n        sch.add_task(worker='TRIVIAL', task_id='D', status='DONE')\n    \n        scheduler_state = sch._state\n        trivial_worker = scheduler_state.get_worker('TRIVIAL')\n>       self.assertEqual({'B'}, self.get_pending_ids(trivial_worker, scheduler_state))",
            "\ntest/scheduler_test.py:241: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.tasks": "array of shape 3",
                "self": "<luigi.scheduler.Worker object at 0x10bbc8040>",
                "state": "<luigi.scheduler.SimpleTaskState object at 0x10c325df0>"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "self.tasks": "set",
                "self": "Worker",
                "state": "SimpleTaskState"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "self.tasks": "array of shape 3",
                "self": "<luigi.scheduler.Worker object at 0x110cb8eb0>",
                "state": "<luigi.scheduler.SimpleTaskState object at 0x110cb8e50>",
                "self.id": "'TRIVIAL'"
            },
            {}
        ],
        [
            {
                "self.tasks": "array of shape 1",
                "self": "<luigi.scheduler.Worker object at 0x110ca3f40>",
                "state": "<luigi.scheduler.SimpleTaskState object at 0x110cb8e50>",
                "self.id": "'NON_TRIVIAL'"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "self.tasks": "set",
                "self": "Worker",
                "state": "SimpleTaskState",
                "self.id": "str"
            },
            {}
        ],
        [
            {
                "self.tasks": "set",
                "self": "Worker",
                "state": "SimpleTaskState",
                "self.id": "str"
            },
            {}
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}