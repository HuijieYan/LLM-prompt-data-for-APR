{
    "luigi": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "scheduler.py",
            "replace_code": "def set_status(self, task, new_status, config=None):\n    import time\n    FAILED = \"failed\"\n    DISABLED = \"disabled\"\n    \n    if new_status == FAILED:\n        if config is None:\n            raise ValueError(\"Config cannot be None for FAILED status\")\n    \n    if new_status == DISABLED and task.status == \"running\":\n        return\n    \n    if task.status == DISABLED:\n        if new_status == \"done\":\n            self.re_enable(task)\n        elif task.scheduler_disable_time is not None:  # don't allow workers to override a scheduler disable\n            return\n    \n    if new_status == FAILED and task.can_disable() and task.status != DISABLED:\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n            notifications.send_error_email(\n                f'Luigi Scheduler: DISABLED {task.id} due to excessive failures',\n                f'{task.id} failed {config.disable_failures} times in the last {config.disable_window} seconds, '\n                f'so it is being disabled for {config.disable_persist} seconds'\n            )\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = None\n    \n    if task.status in self._status_tasks:\n        self._status_tasks[task.status].pop(task.id)\n    self._status_tasks[new_status][task.id] = task\n    task.status = new_status"
        }
    ]
}