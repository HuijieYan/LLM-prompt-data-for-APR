{
    "1.1.1": "def get_work(self, worker, host=None, assistant=False, **kwargs):\n    # TODO: remove any expired nodes\n\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n    # resources.\n\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n\n    # Return remaining tasks that have no FAILED descendents\n    self.update(worker, {'host': host})\n    if assistant:\n        self.add_worker(worker, [('assistant', assistant)])\n    best_task = None\n    locally_pending_tasks = 0\n    running_tasks = []\n\n    used_resources = self._used_resources()\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n    greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                          for worker in self._state.get_active_workers())\n\n    tasks = list(self._state.get_pending_tasks())\n    tasks.sort(key=self._rank(), reverse=True)\n\n    for task in tasks:\n        in_workers = assistant or worker in task.workers\n        if task.status == 'RUNNING' and in_workers:\n            # Return a list of currently running tasks to the client,\n            # makes it easier to troubleshoot\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n\n        if task.status == PENDING and in_workers:\n            locally_pending_tasks += 1\n            if len(task.workers) == 1 and not assistant:\n                n_unique_pending += 1\n\n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems((task.resources or {})):\n                greedy_resources[resource] += amount\n\n        if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n            else:\n                workers = itertools.chain(task.workers, [worker]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n\n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n\n                        break\n\n    reply = {'n_pending_tasks': locally_pending_tasks,\n             'running_tasks': running_tasks,\n             'task_id': None,\n             'n_unique_pending': n_unique_pending}\n\n    if best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker\n        best_task.time_running = time.time()\n        self._update_task_history(best_task.id, RUNNING, host=host)\n\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n\n    return reply\n",
    "1.1.2": null,
    "1.2.1": "class CentralPlannerScheduler(Scheduler)",
    "1.2.2": "Async scheduler that can handle multiple workers, etc.\n\nCan be run locally or on a server (using RemoteScheduler + server.Server).",
    "1.2.3": [
        "update(self, worker_id, worker_reference=None)",
        "add_worker(self, worker, info, **kwargs)",
        "_has_resources(self, needed_resources, used_resources)",
        "_used_resources(self)",
        "_rank(self)",
        "_schedulable(self, task)",
        "_update_task_history(self, task_id, status, host=None)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/luigi_31/luigi/scheduler.py",
    "1.3.2": [
        "update(self, worker_reference)",
        "assistant(self)",
        "get_pending_tasks(self)",
        "set_status(self, task, new_status, config=None)",
        "get_active_workers(self, last_active_lt=None)",
        "get_worker(self, worker_id)",
        "update(self, worker_id, worker_reference=None)",
        "add_worker(self, worker, info, **kwargs)",
        "_has_resources(self, needed_resources, used_resources)",
        "_used_resources(self)",
        "_rank(self)",
        "_schedulable(self, task)",
        "_update_task_history(self, task_id, status, host=None)"
    ],
    "1.4.1": [
        "    def test_assistant_get_work_external_task(self):\n        self.sch.add_task('X', task_id='A', runnable=False)\n        self.assertTrue(self.sch.get_work('Y', assistant=True)['task_id'] is None)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/luigi_31/test/central_planner_test.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: False is not true"
        ]
    ],
    "2.1.2": [
        [
            "self = <central_planner_test.CentralPlannerTest testMethod=test_assistant_get_work_external_task>\n\n    def test_assistant_get_work_external_task(self):\n        self.sch.add_task('X', task_id='A', runnable=False)\n>       self.assertTrue(self.sch.get_work('Y', assistant=True)['task_id'] is None)",
            "\ntest/central_planner_test.py:193: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self": "<luigi.scheduler.CentralPlannerScheduler object at 0x105cc8cd0>",
                "worker": "'Y'",
                "assistant": "True",
                "self._state": "<luigi.scheduler.SimpleTaskState object at 0x105cc8760>",
                "self._config": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, disable_window=10, disable_failures=3, disable_persist=10, max_shown_tasks=100000, record_task_history=False)"
            },
            {
                "best_task": "Task({'id': 'A', 'stakeholders': {'X'}, 'workers': set(), 'deps': set(), 'status': 'RUNNING', 'time': 1702287747.126366, 'retry': None, 'remove': None, 'worker_running': 'Y', 'time_running': 1702287747.1274629, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 3, 'failures': <luigi.scheduler.Failures object at 0x105cc8be0>, 'scheduler_disable_time': None})",
                "locally_pending_tasks": "1",
                "running_tasks": "[]",
                "used_resources": "defaultdict(<class 'int'>, {})",
                "greedy_resources": "defaultdict(<class 'int'>, {})",
                "n_unique_pending": "0",
                "greedy_workers": "{'X': 1, 'Y': 1}",
                "tasks": "[Task({'id': 'A', 'stakeholders': {'X'}, 'workers': set(), 'deps': set(), 'status': 'RUNNING', 'time': 1702287747.126366, 'retry': None, 'remove': None, 'worker_running': 'Y', 'time_running': 1702287747.1274629, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 3, 'failures': <luigi.scheduler.Failures object at 0x105cc8be0>, 'scheduler_disable_time': None})]",
                "task": "Task({'id': 'A', 'stakeholders': {'X'}, 'workers': set(), 'deps': set(), 'status': 'RUNNING', 'time': 1702287747.126366, 'retry': None, 'remove': None, 'worker_running': 'Y', 'time_running': 1702287747.1274629, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 3, 'failures': <luigi.scheduler.Failures object at 0x105cc8be0>, 'scheduler_disable_time': None})",
                "in_workers": "True",
                "task.workers": "set()",
                "task.status": "'RUNNING'",
                "task.worker_running": "'Y'",
                "task.id": "'A'",
                "task.resources": "{}",
                "reply": "{'n_pending_tasks': 1, 'running_tasks': [], 'task_id': 'A', 'n_unique_pending': 0, 'task_family': '', 'task_module': None, 'task_params': {}}",
                "best_task.worker_running": "'Y'",
                "best_task.time_running": "1702287747.1274629",
                "best_task.id": "'A'",
                "best_task.family": "''",
                "best_task.params": "{}"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self": "CentralPlannerScheduler",
                "worker": "str",
                "assistant": "bool",
                "self._state": "SimpleTaskState",
                "self._config": "scheduler"
            },
            {
                "best_task": "Task",
                "locally_pending_tasks": "int",
                "running_tasks": "list",
                "used_resources": "defaultdict",
                "greedy_resources": "defaultdict",
                "n_unique_pending": "int",
                "greedy_workers": "dict",
                "tasks": "list",
                "task": "Task",
                "in_workers": "bool",
                "task.workers": "set",
                "task.status": "str",
                "task.worker_running": "str",
                "task.id": "str",
                "task.resources": "dict",
                "reply": "dict",
                "best_task.worker_running": "str",
                "best_task.time_running": "float",
                "best_task.id": "str",
                "best_task.family": "str",
                "best_task.params": "dict"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self": "<luigi.scheduler.CentralPlannerScheduler object at 0x10863c0a0>",
                "worker": "'Y'",
                "assistant": "True",
                "self._state": "<luigi.scheduler.SimpleTaskState object at 0x10863c0d0>",
                "self._config": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, disable_window=10, disable_failures=3, disable_persist=10, max_shown_tasks=100000, record_task_history=False)"
            },
            {
                "locally_pending_tasks": "0",
                "running_tasks": "[]",
                "used_resources": "defaultdict(<class 'int'>, {})",
                "greedy_resources": "defaultdict(<class 'int'>, {})",
                "n_unique_pending": "0",
                "greedy_workers": "{'X': 1, 'Y': 0}",
                "tasks": "[Task({'id': 'A', 'stakeholders': {'X'}, 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 1702287748.964899, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 3, 'failures': <luigi.scheduler.Failures object at 0x10863c1c0>, 'scheduler_disable_time': None})]",
                "task": "Task({'id': 'A', 'stakeholders': {'X'}, 'workers': set(), 'deps': set(), 'status': 'PENDING', 'time': 1702287748.964899, 'retry': None, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 3, 'failures': <luigi.scheduler.Failures object at 0x10863c1c0>, 'scheduler_disable_time': None})",
                "in_workers": "False",
                "task.workers": "set()",
                "task.status": "'PENDING'",
                "task.id": "'A'",
                "task.resources": "{}",
                "workers": "<itertools.chain object at 0x10863ca00>",
                "task_worker": "'Y'",
                "reply": "{'n_pending_tasks': 0, 'running_tasks': [], 'task_id': None, 'n_unique_pending': 0}"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self": "CentralPlannerScheduler",
                "worker": "str",
                "assistant": "bool",
                "self._state": "SimpleTaskState",
                "self._config": "scheduler"
            },
            {
                "locally_pending_tasks": "int",
                "running_tasks": "list",
                "used_resources": "defaultdict",
                "greedy_resources": "defaultdict",
                "n_unique_pending": "int",
                "greedy_workers": "dict",
                "tasks": "list",
                "task": "Task",
                "in_workers": "bool",
                "task.workers": "set",
                "task.status": "str",
                "task.id": "str",
                "task.resources": "dict",
                "workers": "chain",
                "task_worker": "str",
                "reply": "dict"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}