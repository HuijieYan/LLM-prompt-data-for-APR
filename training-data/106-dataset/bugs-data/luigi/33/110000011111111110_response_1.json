{
    "luigi": [
        {
            "bugID": 33,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 313,
            "file_name": "/luigi/task.py",
            "replace_code": "def get_param_values(cls, params, args, kwargs):\n\n    result = {}\n    \n    params_dict = dict(params)\n    \n    task_name = cls.task_family\n    \n    exc_desc = f'{task_name}[args={args}, kwargs={kwargs}]'\n    \n    positional_params = [(n, p) for n, p in params if p.significant]\n    \n    for i, arg in enumerate(args):\n        if i >= len(positional_params):\n            raise parameter.UnknownParameterException(f'{exc_desc}: takes at most {len(positional_params)} parameters ({len(args)} given)')\n        param_name, param_obj = positional_params[i]\n        result[param_name] = arg\n    \n    for param_name, arg in kwargs.items():\n        if param_name in result:\n            raise parameter.DuplicateParameterException(f'{exc_desc}: parameter {param_name} was already set as a positional parameter')\n        if param_name not in params_dict:\n            raise parameter.UnknownParameterException(f'{exc_desc}: unknown parameter {param_name}')\n        result[param_name] = arg\n    \n    for param_name, param_obj in params:\n        if param_name not in result:\n            if not param_obj.has_task_value(task_name, param_name):\n                raise parameter.MissingParameterException(f\"{exc_desc}: requires the '{param_name}' parameter to be set\")\n            result[param_name] = param_obj.task_value(task_name, param_name)\n    \n    def list_to_tuple(x):\n        \"\"\" Make tuples out of lists and sets to allow hashing \"\"\"\n        if isinstance(x, (list, set)):\n            return tuple(x)\n        else:\n            return x\n    \n    return [(param_name, list_to_tuple(result[param_name])) for param_name, param_obj in params]"
        }
    ]
}