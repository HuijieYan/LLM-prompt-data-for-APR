{
    "luigi": [
        {
            "bugID": 33,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 313,
            "file_name": "luigi/task.py",
            "replace_code": "def get_param_values(cls, params, args, kwargs):\n\n    result = []\n    \n    params_dict = dict(params)\n    task_name = cls.task_family()\n    \n    # Fill in the positional arguments\n    positional_params = [(n, p) for n, p in params if p.significant]\n    for i, arg in enumerate(args):\n        if i >= len(positional_params):\n            raise parameter.UnknownParameterException('{}: takes at most {} parameters ({} given)'.format(task_name, len(positional_params), len(args)))\n        param_name, param_obj = positional_params[i]\n        result.append((param_name, arg))\n    \n    # Then the optional arguments\n    for param_name, arg in six.iteritems(kwargs):\n        if param_name in params_dict:\n            raise parameter.DuplicateParameterException('{}: parameter {} was already set as a positional parameter'.format(task_name, param_name))\n        if param_name not in params_dict:\n            raise parameter.UnknownParameterException('{}: unknown parameter {}'.format(task_name, param_name))\n        result.append((param_name, arg))\n    \n    # Then use the defaults for anything not filled in\n    for param_name, param_obj in params:\n        if not any(param_name in t for t in result):\n            if not param_obj.has_task_value(task_name, param_name):\n                raise parameter.MissingParameterException(\"{}: requires the '{}' parameter to be set\".format(task_name, param_name))            \n            result.append((param_name, param_obj.task_value(task_name, param_name)))\n    \n    # Sort it by the correct order and make a list\n    def list_to_tuple(x):\n        \"\"\" Make tuples out of lists and sets to allow hashing \"\"\"\n        if isinstance(x, list) or isinstance(x, set):\n            return tuple(x)\n        else:\n            return x\n    \n    return [(param_name, list_to_tuple(param_value)) for param_name, param_value in result]"
        }
    ]
}