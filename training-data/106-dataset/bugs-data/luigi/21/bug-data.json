{
    "luigi:21": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_21/luigi/interface.py": {
            "buggy_functions": [
                {
                    "function_name": "run",
                    "function_code": "def run(cmdline_args=None, main_task_cls=None,\n        worker_scheduler_factory=None, use_dynamic_argparse=False, local_scheduler=False):\n    \"\"\"\n    Please dont use. Instead use `luigi` binary.\n\n    Run from cmdline using argparse.\n\n    :param cmdline_args:\n    :param main_task_cls:\n    :param worker_scheduler_factory:\n    :param use_dynamic_argparse:\n    :param local_scheduler:\n    \"\"\"\n    if use_dynamic_argparse:\n        interface = DynamicArgParseInterface()\n    else:\n        interface = ArgParseInterface()\n    if main_task_cls:\n        cmdline_args.insert(0, main_task_cls.task_family)\n    if local_scheduler:\n        cmdline_args.insert(0, '--local-scheduler')\n    tasks = interface.parse(cmdline_args)\n    return interface.run(tasks, worker_scheduler_factory)\n",
                    "decorators": [],
                    "docstring": "Please dont use. Instead use `luigi` binary.\n\nRun from cmdline using argparse.\n\n:param cmdline_args:\n:param main_task_cls:\n:param worker_scheduler_factory:\n:param use_dynamic_argparse:\n:param local_scheduler:",
                    "start_line": 327,
                    "variables": {
                        "use_dynamic_argparse": [
                            340
                        ],
                        "interface": [
                            349,
                            348,
                            341,
                            343
                        ],
                        "DynamicArgParseInterface": [
                            341
                        ],
                        "ArgParseInterface": [
                            343
                        ],
                        "main_task_cls": [
                            344,
                            345
                        ],
                        "cmdline_args.insert": [
                            345,
                            347
                        ],
                        "cmdline_args": [
                            345,
                            347,
                            348
                        ],
                        "main_task_cls.task_family": [
                            345
                        ],
                        "local_scheduler": [
                            346
                        ],
                        "tasks": [
                            348,
                            349
                        ],
                        "interface.parse": [
                            348
                        ],
                        "interface.run": [
                            349
                        ],
                        "worker_scheduler_factory": [
                            349
                        ]
                    },
                    "filtered_variables": {
                        "use_dynamic_argparse": [
                            340
                        ],
                        "interface": [
                            349,
                            348,
                            341,
                            343
                        ],
                        "DynamicArgParseInterface": [
                            341
                        ],
                        "ArgParseInterface": [
                            343
                        ],
                        "main_task_cls": [
                            344,
                            345
                        ],
                        "cmdline_args.insert": [
                            345,
                            347
                        ],
                        "cmdline_args": [
                            345,
                            347,
                            348
                        ],
                        "main_task_cls.task_family": [
                            345
                        ],
                        "local_scheduler": [
                            346
                        ],
                        "tasks": [
                            348,
                            349
                        ],
                        "interface.parse": [
                            348
                        ],
                        "interface.run": [
                            349
                        ],
                        "worker_scheduler_factory": [
                            349
                        ]
                    },
                    "diff_line_number": 339,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "use_dynamic_argparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "interface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DynamicArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "main_task_cls": {
                                    "variable_value": "<class 'interface_test.InterfaceTest.test_just_run_main_task_cls.<locals>.MyTestTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "cmdline_args.insert": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cmdline_args": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "main_task_cls.task_family": {
                                    "variable_value": "'MyTestTask'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "local_scheduler": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interface.parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interface.run": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker_scheduler_factory": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "cmdline_args": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sys.argv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_dynamic_argparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "interface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DynamicArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "main_task_cls": {
                                    "variable_value": "<class 'interface_test.InterfaceTest.test_just_run_main_task_cls.<locals>.MyTestTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "cmdline_args.insert": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "main_task_cls.task_family": {
                                    "variable_value": "'MyTestTask'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "local_scheduler": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interface.parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interface.run": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker_scheduler_factory": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "cmdline_args": {
                                    "variable_value": "['MyTestTask', '--no-lock', '--local-scheduler']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "sys.argv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_dynamic_argparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "interface": {
                                    "variable_value": "<luigi.interface.ArgParseInterface object at 0x1093e8640>",
                                    "variable_type": "ArgParseInterface",
                                    "variable_shape": null
                                },
                                "DynamicArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "main_task_cls": {
                                    "variable_value": "<class 'interface_test.InterfaceTest.test_just_run_main_task_cls.<locals>.MyTestTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "cmdline_args.insert": {
                                    "variable_value": "<built-in method insert of list object at 0x109333fc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "main_task_cls.task_family": {
                                    "variable_value": "'MyTestTask'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "local_scheduler": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": "[MyTestTask()]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "interface.parse": {
                                    "variable_value": "<bound method ArgParseInterface.parse of <luigi.interface.ArgParseInterface object at 0x1093e8640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interface.run": {
                                    "variable_value": "<function Interface.run at 0x1099faf70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "worker_scheduler_factory": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "cmdline_args": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sys.argv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_dynamic_argparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "interface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DynamicArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "main_task_cls": {
                                    "variable_value": "<class 'interface_test.InterfaceTest.test_just_run_main_task_cls.<locals>.MyOtherTestTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "cmdline_args.insert": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "main_task_cls.task_family": {
                                    "variable_value": "'MyOtherTestTask'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "local_scheduler": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interface.parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interface.run": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker_scheduler_factory": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "cmdline_args": {
                                    "variable_value": "['MyOtherTestTask', '--no-lock', '--my-param', 'my_value', '--local-scheduler']",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "sys.argv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_dynamic_argparse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "interface": {
                                    "variable_value": "<luigi.interface.ArgParseInterface object at 0x1093e8520>",
                                    "variable_type": "ArgParseInterface",
                                    "variable_shape": null
                                },
                                "DynamicArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ArgParseInterface": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "main_task_cls": {
                                    "variable_value": "<class 'interface_test.InterfaceTest.test_just_run_main_task_cls.<locals>.MyOtherTestTask'>",
                                    "variable_type": "Register",
                                    "variable_shape": null
                                },
                                "cmdline_args.insert": {
                                    "variable_value": "<built-in method insert of list object at 0x1093f4c00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "main_task_cls.task_family": {
                                    "variable_value": "'MyOtherTestTask'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "local_scheduler": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": "[MyOtherTestTask(my_param=my_value)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "interface.parse": {
                                    "variable_value": "<bound method ArgParseInterface.parse of <luigi.interface.ArgParseInterface object at 0x1093e8520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interface.run": {
                                    "variable_value": "<function Interface.run at 0x1099faf70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "worker_scheduler_factory": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def setup_interface_logging(conf_file=None):\n    # use a variable in the function object to determine if it has run before\n    if getattr(setup_interface_logging, \"has_run\", False):\n        return\n\n    if conf_file is None:\n        logger = logging.getLogger('luigi-interface')\n        logger.setLevel(logging.DEBUG)\n\n        stream_handler = logging.StreamHandler()\n        stream_handler.setLevel(logging.DEBUG)\n\n        formatter = logging.Formatter('%(levelname)s: %(message)s')\n        stream_handler.setFormatter(formatter)\n\n        logger.addHandler(stream_handler)\n    else:\n        logging.config.fileConfig(conf_file, disable_existing_loggers=False)\n\n    setup_interface_logging.has_run = True",
                "def _editdistance(a, b):\n    r0 = range(0, len(b) + 1)\n    r1 = [0] * (len(b) + 1)\n\n    for i in range(0, len(a)):\n        r1[0] = i + 1\n\n        for j in range(0, len(b)):\n            c = 0 if a[i] is b[j] else 1\n            r1[j + 1] = min(r1[j] + 1, r0[j + 1] + 1, r0[j] + c)\n\n        r0 = r1[:]\n\n    return r1[len(b)]",
                "def error_task_names(task_name, task_names):\n    weighted_tasks = [(_editdistance(task_name, task_name_2), task_name_2) for task_name_2 in task_names]\n    ordered_tasks = sorted(weighted_tasks, key=lambda pair: pair[0])\n    candidates = [task for (dist, task) in ordered_tasks if dist <= 5 and dist < len(task)]\n    display_string = \"\"\n    if candidates:\n        display_string = \"No task %s. Did you mean:\\n%s\" % (task_name, '\\n'.join(candidates))\n    else:\n        display_string = \"No task %s.\" % task_name\n\n    raise SystemExit(display_string)",
                "def add_task_parameters(parser, task_cls):\n    for param_name, param in task_cls.get_params():\n        param.add_to_cmdline_parser(parser, param_name, task_cls.task_family, glob=False)",
                "def get_global_parameters():\n    seen_params = set()\n    for task_name, is_without_section, param_name, param in Register.get_all_params():\n        if param in seen_params:\n            continue\n        seen_params.add(param)\n        yield task_name, is_without_section, param_name, param",
                "def add_global_parameters(parser):\n    for task_name, is_without_section, param_name, param in get_global_parameters():\n        param.add_to_cmdline_parser(parser, param_name, task_name, glob=True, is_without_section=is_without_section)",
                "def get_task_parameters(task_cls, args):\n    # Parse a str->str dict to the correct types\n    params = {}\n    for param_name, param in task_cls.get_params():\n        param.parse_from_args(param_name, task_cls.task_family, args, params)\n    return params",
                "def set_global_parameters(args):\n    # Note that this is not side effect free\n    for task_name, is_without_section, param_name, param in get_global_parameters():\n        param.set_global_from_args(param_name, task_name, args, is_without_section=is_without_section)",
                "def run(cmdline_args=None, main_task_cls=None,\n        worker_scheduler_factory=None, use_dynamic_argparse=False, local_scheduler=False):\n    \"\"\"\n    Please dont use. Instead use `luigi` binary.\n\n    Run from cmdline using argparse.\n\n    :param cmdline_args:\n    :param main_task_cls:\n    :param worker_scheduler_factory:\n    :param use_dynamic_argparse:\n    :param local_scheduler:\n    \"\"\"\n    if use_dynamic_argparse:\n        interface = DynamicArgParseInterface()\n    else:\n        interface = ArgParseInterface()\n    if main_task_cls:\n        cmdline_args.insert(0, main_task_cls.task_family)\n    if local_scheduler:\n        cmdline_args.insert(0, '--local-scheduler')\n    tasks = interface.parse(cmdline_args)\n    return interface.run(tasks, worker_scheduler_factory)",
                "def build(tasks, worker_scheduler_factory=None, **env_params):\n    \"\"\"\n    Run internally, bypassing the cmdline parsing.\n\n    Useful if you have some luigi code that you want to run internally.\n    Example:\n\n    .. code-block:: python\n\n        luigi.build([MyTask1(), MyTask2()], local_scheduler=True)\n\n    One notable difference is that `build` defaults to not using\n    the identical process lock. Otherwise, `build` would only be\n    callable once from each process.\n\n    :param tasks:\n    :param worker_scheduler_factory:\n    :param env_params:\n    :return:\n    \"\"\"\n    if \"no_lock\" not in env_params:\n        env_params[\"no_lock\"] = True\n\n    Interface.run(tasks, worker_scheduler_factory, override_defaults=env_params)",
                "def create_local_scheduler(self):\n    return scheduler.CentralPlannerScheduler(prune_on_get_work=True)",
                "def create_remote_scheduler(self, host, port):\n    return rpc.RemoteScheduler(host=host, port=port)",
                "def create_worker(self, scheduler, worker_processes, assistant=False):\n    return worker.Worker(\n        scheduler=scheduler, worker_processes=worker_processes, assistant=assistant)",
                "def parse(self):\n    raise NotImplementedError",
                "@staticmethod\ndef run(tasks, worker_scheduler_factory=None, override_defaults=None):\n    \"\"\"\n    :param tasks:\n    :param worker_scheduler_factory:\n    :param override_defaults:\n    :return: True if all tasks and their dependencies were successfully run (or already completed);\n             False if any error occurred.\n    \"\"\"\n\n    if worker_scheduler_factory is None:\n        worker_scheduler_factory = WorkerSchedulerFactory()\n    if override_defaults is None:\n        override_defaults = {}\n    env_params = core(**override_defaults)\n    # search for logging configuration path first on the command line, then\n    # in the application config file\n    logging_conf = env_params.logging_conf_file\n    if logging_conf is not None and not os.path.exists(logging_conf):\n        raise Exception(\n            \"Error: Unable to locate specified logging configuration file!\"\n        )\n\n    if not configuration.get_config().getboolean(\n            'core', 'no_configure_logging', False):\n        setup_interface_logging(logging_conf)\n\n    if (not env_params.no_lock and\n            not(lock.acquire_for(env_params.lock_pid_dir, env_params.lock_size))):\n        sys.exit(1)\n\n    if env_params.local_scheduler:\n        sch = worker_scheduler_factory.create_local_scheduler()\n    else:\n        sch = worker_scheduler_factory.create_remote_scheduler(\n            host=env_params.scheduler_host,\n            port=env_params.scheduler_port)\n\n    w = worker_scheduler_factory.create_worker(\n        scheduler=sch, worker_processes=env_params.workers, assistant=env_params.assistant)\n\n    success = True\n    for t in tasks:\n        success &= w.add(t, env_params.parallel_scheduling)\n    logger = logging.getLogger('luigi-interface')\n    logger.info('Done scheduling tasks')\n    if env_params.workers != 0:\n        success &= w.run()\n    w.stop()\n    return success",
                "def parse_task(self, cmdline_args=None):\n    if cmdline_args is None:\n        cmdline_args = sys.argv[1:]\n\n    parser = argparse.ArgumentParser()\n\n    add_global_parameters(parser)\n\n    task_names = Register.task_names()\n\n    # Parse global arguments and pull out the task name.\n    # We used to do this using subparsers+command, but some issues with\n    # argparse across different versions of Python (2.7.9) made it hard.\n    args, unknown = parser.parse_known_args(args=[a for a in cmdline_args if a != '--help'])\n    if len(unknown) == 0:\n        # In case it included a --help argument, run again\n        parser.parse_known_args(args=cmdline_args)\n        raise SystemExit('No task specified')\n\n    task_name = unknown[0]\n    if task_name not in task_names:\n        error_task_names(task_name, task_names)\n\n    task_cls = Register.get_task_cls(task_name)\n\n    # Add a subparser to parse task-specific arguments\n    subparsers = parser.add_subparsers(dest='command')\n    subparser = subparsers.add_parser(task_name)\n\n    # Add both task and global params here so that we can support both:\n    # test.py --global-param xyz Test --n 42\n    # test.py Test --n 42 --global-param xyz\n    add_global_parameters(subparser)\n    add_task_parameters(subparser, task_cls)\n\n    # Workaround for bug in argparse for Python 2.7.9\n    # See https://mail.python.org/pipermail/python-dev/2015-January/137699.html\n    subargs = parser.parse_args(args=cmdline_args)\n    for key, value in vars(subargs).items():\n        if value:  # Either True (for boolean args) or non-None (everything else)\n            setattr(args, key, value)\n\n    # Notice that this is not side effect free because it might set global params\n    set_global_parameters(args)\n    task_params = get_task_parameters(task_cls, args)\n\n    return [task_cls(**task_params)]",
                "def parse(self, cmdline_args=None):\n    return self.parse_task(cmdline_args)",
                "def parse(self, cmdline_args=None):\n    if cmdline_args is None:\n        cmdline_args = sys.argv[1:]\n\n    parser = argparse.ArgumentParser()\n\n    add_global_parameters(parser)\n\n    args, unknown = parser.parse_known_args(args=[a for a in cmdline_args if a != '--help'])\n    module = args.module\n\n    __import__(module)\n\n    return self.parse_task(cmdline_args)"
            ],
            "inscope_function_signatures": [
                "setup_interface_logging(conf_file=None)",
                "_editdistance(a, b)",
                "error_task_names(task_name, task_names)",
                "add_task_parameters(parser, task_cls)",
                "get_global_parameters()",
                "add_global_parameters(parser)",
                "get_task_parameters(task_cls, args)",
                "set_global_parameters(args)",
                "run(cmdline_args=None, main_task_cls=None, worker_scheduler_factory=None, use_dynamic_argparse=False, local_scheduler=False)",
                "build(tasks, worker_scheduler_factory=None, **env_params)",
                "create_local_scheduler(self)",
                "create_remote_scheduler(self, host, port)",
                "create_worker(self, scheduler, worker_processes, assistant=False)",
                "parse(self)",
                "run(tasks, worker_scheduler_factory=None, override_defaults=None)",
                "parse_task(self, cmdline_args=None)",
                "parse(self, cmdline_args=None)",
                "parse(self, cmdline_args=None)"
            ],
            "variables_in_file": {
                "getattr": [
                    40
                ],
                "setup_interface_logging": [
                    40,
                    57,
                    151
                ],
                "conf_file": [
                    43,
                    55
                ],
                "logger": [
                    170,
                    171,
                    44,
                    45,
                    53
                ],
                "logging.getLogger": [
                    170,
                    44
                ],
                "logging": [
                    170,
                    44,
                    45,
                    47,
                    48,
                    50,
                    55
                ],
                "logger.setLevel": [
                    45
                ],
                "logging.DEBUG": [
                    48,
                    45
                ],
                "stream_handler": [
                    48,
                    51,
                    53,
                    47
                ],
                "logging.StreamHandler": [
                    47
                ],
                "stream_handler.setLevel": [
                    48
                ],
                "formatter": [
                    50,
                    51
                ],
                "logging.Formatter": [
                    50
                ],
                "stream_handler.setFormatter": [
                    51
                ],
                "logger.addHandler": [
                    53
                ],
                "logging.config.fileConfig": [
                    55
                ],
                "logging.config": [
                    55
                ],
                "setup_interface_logging.has_run": [
                    57
                ],
                "task.Config": [
                    60
                ],
                "task": [
                    60,
                    198
                ],
                "use_cmdline_section": [
                    69
                ],
                "local_scheduler": [
                    346,
                    71
                ],
                "parameter.BoolParameter": [
                    103,
                    100,
                    85,
                    71
                ],
                "parameter": [
                    97,
                    100,
                    71,
                    103,
                    74,
                    78,
                    82,
                    85,
                    88,
                    91,
                    94
                ],
                "scheduler_host": [
                    74
                ],
                "parameter.Parameter": [
                    88,
                    97,
                    74,
                    94
                ],
                "dict": [
                    81,
                    77
                ],
                "scheduler_port": [
                    78
                ],
                "parameter.IntParameter": [
                    82,
                    91,
                    78
                ],
                "lock_size": [
                    82
                ],
                "no_lock": [
                    85
                ],
                "lock_pid_dir": [
                    88
                ],
                "os.path.join": [
                    89
                ],
                "os.path": [
                    144,
                    89
                ],
                "os": [
                    144,
                    89
                ],
                "tempfile.gettempdir": [
                    89
                ],
                "tempfile": [
                    89
                ],
                "workers": [
                    91
                ],
                "logging_conf_file": [
                    94
                ],
                "module": [
                    320,
                    97,
                    322
                ],
                "parallel_scheduling": [
                    100
                ],
                "assistant": [
                    118,
                    103
                ],
                "object": [
                    121,
                    108
                ],
                "scheduler.CentralPlannerScheduler": [
                    111
                ],
                "scheduler": [
                    118,
                    111
                ],
                "rpc.RemoteScheduler": [
                    114
                ],
                "rpc": [
                    114
                ],
                "host": [
                    114
                ],
                "port": [
                    114
                ],
                "worker.Worker": [
                    117
                ],
                "worker": [
                    117
                ],
                "worker_processes": [
                    118
                ],
                "NotImplementedError": [
                    124
                ],
                "worker_scheduler_factory": [
                    160,
                    164,
                    136,
                    137,
                    375,
                    349,
                    158
                ],
                "WorkerSchedulerFactory": [
                    137
                ],
                "override_defaults": [
                    138,
                    139,
                    140
                ],
                "env_params": [
                    161,
                    162,
                    165,
                    169,
                    140,
                    172,
                    143,
                    372,
                    373,
                    375,
                    153,
                    154,
                    157
                ],
                "core": [
                    140
                ],
                "logging_conf": [
                    144,
                    151,
                    143
                ],
                "env_params.logging_conf_file": [
                    143
                ],
                "os.path.exists": [
                    144
                ],
                "Exception": [
                    145
                ],
                "getboolean": [
                    149
                ],
                "configuration.get_config": [
                    149
                ],
                "configuration": [
                    149
                ],
                "env_params.no_lock": [
                    153
                ],
                "lock.acquire_for": [
                    154
                ],
                "lock": [
                    154
                ],
                "env_params.lock_pid_dir": [
                    154
                ],
                "env_params.lock_size": [
                    154
                ],
                "sys.exit": [
                    155
                ],
                "sys": [
                    248,
                    313,
                    155
                ],
                "env_params.local_scheduler": [
                    157
                ],
                "sch": [
                    160,
                    165,
                    158
                ],
                "worker_scheduler_factory.create_local_scheduler": [
                    158
                ],
                "worker_scheduler_factory.create_remote_scheduler": [
                    160
                ],
                "env_params.scheduler_host": [
                    161
                ],
                "env_params.scheduler_port": [
                    162
                ],
                "w": [
                    169,
                    164,
                    173,
                    174
                ],
                "worker_scheduler_factory.create_worker": [
                    164
                ],
                "env_params.workers": [
                    172,
                    165
                ],
                "env_params.assistant": [
                    165
                ],
                "success": [
                    169,
                    173,
                    175,
                    167
                ],
                "t": [
                    168,
                    169
                ],
                "tasks": [
                    168,
                    348,
                    349,
                    375
                ],
                "w.add": [
                    169
                ],
                "env_params.parallel_scheduling": [
                    169
                ],
                "logger.info": [
                    171
                ],
                "w.run": [
                    173
                ],
                "w.stop": [
                    174
                ],
                "staticmethod": [
                    126
                ],
                "r0": [
                    188,
                    180,
                    190
                ],
                "range": [
                    186,
                    180,
                    183
                ],
                "len": [
                    192,
                    260,
                    198,
                    180,
                    181,
                    183,
                    186
                ],
                "b": [
                    192,
                    180,
                    181,
                    186,
                    187
                ],
                "r1": [
                    192,
                    181,
                    184,
                    188,
                    190
                ],
                "i": [
                    184,
                    187,
                    183
                ],
                "a": [
                    259,
                    187,
                    319,
                    183
                ],
                "j": [
                    186,
                    187,
                    188
                ],
                "c": [
                    187,
                    188
                ],
                "min": [
                    188
                ],
                "weighted_tasks": [
                    196,
                    197
                ],
                "_editdistance": [
                    196
                ],
                "task_name": [
                    224,
                    196,
                    201,
                    265,
                    203,
                    266,
                    237,
                    238,
                    267,
                    269,
                    273,
                    215,
                    219,
                    223
                ],
                "task_name_2": [
                    196
                ],
                "task_names": [
                    266,
                    267,
                    196,
                    254
                ],
                "ordered_tasks": [
                    197,
                    198
                ],
                "sorted": [
                    197
                ],
                "pair": [
                    197
                ],
                "candidates": [
                    200,
                    201,
                    198
                ],
                "dist": [
                    198
                ],
                "display_string": [
                    201,
                    203,
                    205,
                    199
                ],
                "join": [
                    201
                ],
                "SystemExit": [
                    205,
                    263
                ],
                "param_name": [
                    224,
                    230,
                    231,
                    237,
                    238,
                    209,
                    210,
                    215,
                    219,
                    223
                ],
                "param": [
                    224,
                    230,
                    231,
                    237,
                    238,
                    209,
                    210,
                    215,
                    216,
                    218,
                    219,
                    223
                ],
                "task_cls.get_params": [
                    209,
                    230
                ],
                "task_cls": [
                    290,
                    292,
                    230,
                    231,
                    269,
                    209,
                    210,
                    279
                ],
                "param.add_to_cmdline_parser": [
                    224,
                    210
                ],
                "parser": [
                    224,
                    259,
                    262,
                    272,
                    315,
                    210,
                    250,
                    283,
                    252,
                    317,
                    319
                ],
                "task_cls.task_family": [
                    210,
                    231
                ],
                "seen_params": [
                    216,
                    218,
                    214
                ],
                "set": [
                    214
                ],
                "is_without_section": [
                    224,
                    237,
                    238,
                    215,
                    219,
                    223
                ],
                "Register.get_all_params": [
                    215
                ],
                "Register": [
                    269,
                    254,
                    215
                ],
                "seen_params.add": [
                    218
                ],
                "get_global_parameters": [
                    237,
                    223
                ],
                "params": [
                    232,
                    229,
                    231
                ],
                "param.parse_from_args": [
                    231
                ],
                "args": [
                    320,
                    289,
                    290,
                    259,
                    231,
                    238,
                    286,
                    319
                ],
                "param.set_global_from_args": [
                    238
                ],
                "Interface": [
                    241,
                    375
                ],
                "cmdline_args": [
                    312,
                    259,
                    324,
                    262,
                    295,
                    345,
                    347,
                    247,
                    248,
                    313,
                    283,
                    348,
                    319
                ],
                "sys.argv": [
                    248,
                    313
                ],
                "argparse.ArgumentParser": [
                    250,
                    315
                ],
                "argparse": [
                    250,
                    315
                ],
                "add_global_parameters": [
                    252,
                    317,
                    278
                ],
                "Register.task_names": [
                    254
                ],
                "unknown": [
                    265,
                    259,
                    260,
                    319
                ],
                "parser.parse_known_args": [
                    259,
                    262,
                    319
                ],
                "error_task_names": [
                    267
                ],
                "Register.get_task_cls": [
                    269
                ],
                "subparsers": [
                    272,
                    273
                ],
                "parser.add_subparsers": [
                    272
                ],
                "subparser": [
                    273,
                    278,
                    279
                ],
                "subparsers.add_parser": [
                    273
                ],
                "add_task_parameters": [
                    279
                ],
                "subargs": [
                    283,
                    284
                ],
                "parser.parse_args": [
                    283
                ],
                "key": [
                    284,
                    286
                ],
                "value": [
                    284,
                    285,
                    286
                ],
                "items": [
                    284
                ],
                "vars": [
                    284
                ],
                "setattr": [
                    286
                ],
                "set_global_parameters": [
                    289
                ],
                "task_params": [
                    290,
                    292
                ],
                "get_task_parameters": [
                    290
                ],
                "self.parse_task": [
                    324,
                    295
                ],
                "self": [
                    324,
                    295
                ],
                "ArgParseInterface": [
                    298,
                    343
                ],
                "args.module": [
                    320
                ],
                "__import__": [
                    322
                ],
                "use_dynamic_argparse": [
                    340
                ],
                "interface": [
                    349,
                    348,
                    341,
                    343
                ],
                "DynamicArgParseInterface": [
                    341
                ],
                "main_task_cls": [
                    344,
                    345
                ],
                "cmdline_args.insert": [
                    345,
                    347
                ],
                "main_task_cls.task_family": [
                    345
                ],
                "interface.parse": [
                    348
                ],
                "interface.run": [
                    349
                ],
                "Interface.run": [
                    375
                ]
            },
            "filtered_variables_in_file": {
                "setup_interface_logging": [
                    40,
                    57,
                    151
                ],
                "conf_file": [
                    43,
                    55
                ],
                "logger": [
                    170,
                    171,
                    44,
                    45,
                    53
                ],
                "logging.getLogger": [
                    170,
                    44
                ],
                "logging": [
                    170,
                    44,
                    45,
                    47,
                    48,
                    50,
                    55
                ],
                "logger.setLevel": [
                    45
                ],
                "logging.DEBUG": [
                    48,
                    45
                ],
                "stream_handler": [
                    48,
                    51,
                    53,
                    47
                ],
                "logging.StreamHandler": [
                    47
                ],
                "stream_handler.setLevel": [
                    48
                ],
                "formatter": [
                    50,
                    51
                ],
                "logging.Formatter": [
                    50
                ],
                "stream_handler.setFormatter": [
                    51
                ],
                "logger.addHandler": [
                    53
                ],
                "logging.config.fileConfig": [
                    55
                ],
                "logging.config": [
                    55
                ],
                "setup_interface_logging.has_run": [
                    57
                ],
                "task.Config": [
                    60
                ],
                "task": [
                    60,
                    198
                ],
                "use_cmdline_section": [
                    69
                ],
                "local_scheduler": [
                    346,
                    71
                ],
                "parameter.BoolParameter": [
                    103,
                    100,
                    85,
                    71
                ],
                "parameter": [
                    97,
                    100,
                    71,
                    103,
                    74,
                    78,
                    82,
                    85,
                    88,
                    91,
                    94
                ],
                "scheduler_host": [
                    74
                ],
                "parameter.Parameter": [
                    88,
                    97,
                    74,
                    94
                ],
                "scheduler_port": [
                    78
                ],
                "parameter.IntParameter": [
                    82,
                    91,
                    78
                ],
                "lock_size": [
                    82
                ],
                "no_lock": [
                    85
                ],
                "lock_pid_dir": [
                    88
                ],
                "os.path.join": [
                    89
                ],
                "os.path": [
                    144,
                    89
                ],
                "os": [
                    144,
                    89
                ],
                "tempfile.gettempdir": [
                    89
                ],
                "tempfile": [
                    89
                ],
                "workers": [
                    91
                ],
                "logging_conf_file": [
                    94
                ],
                "module": [
                    320,
                    97,
                    322
                ],
                "parallel_scheduling": [
                    100
                ],
                "assistant": [
                    118,
                    103
                ],
                "scheduler.CentralPlannerScheduler": [
                    111
                ],
                "scheduler": [
                    118,
                    111
                ],
                "rpc.RemoteScheduler": [
                    114
                ],
                "rpc": [
                    114
                ],
                "host": [
                    114
                ],
                "port": [
                    114
                ],
                "worker.Worker": [
                    117
                ],
                "worker": [
                    117
                ],
                "worker_processes": [
                    118
                ],
                "worker_scheduler_factory": [
                    160,
                    164,
                    136,
                    137,
                    375,
                    349,
                    158
                ],
                "WorkerSchedulerFactory": [
                    137
                ],
                "override_defaults": [
                    138,
                    139,
                    140
                ],
                "env_params": [
                    161,
                    162,
                    165,
                    169,
                    140,
                    172,
                    143,
                    372,
                    373,
                    375,
                    153,
                    154,
                    157
                ],
                "core": [
                    140
                ],
                "logging_conf": [
                    144,
                    151,
                    143
                ],
                "env_params.logging_conf_file": [
                    143
                ],
                "os.path.exists": [
                    144
                ],
                "getboolean": [
                    149
                ],
                "configuration.get_config": [
                    149
                ],
                "configuration": [
                    149
                ],
                "env_params.no_lock": [
                    153
                ],
                "lock.acquire_for": [
                    154
                ],
                "lock": [
                    154
                ],
                "env_params.lock_pid_dir": [
                    154
                ],
                "env_params.lock_size": [
                    154
                ],
                "sys.exit": [
                    155
                ],
                "sys": [
                    248,
                    313,
                    155
                ],
                "env_params.local_scheduler": [
                    157
                ],
                "sch": [
                    160,
                    165,
                    158
                ],
                "worker_scheduler_factory.create_local_scheduler": [
                    158
                ],
                "worker_scheduler_factory.create_remote_scheduler": [
                    160
                ],
                "env_params.scheduler_host": [
                    161
                ],
                "env_params.scheduler_port": [
                    162
                ],
                "w": [
                    169,
                    164,
                    173,
                    174
                ],
                "worker_scheduler_factory.create_worker": [
                    164
                ],
                "env_params.workers": [
                    172,
                    165
                ],
                "env_params.assistant": [
                    165
                ],
                "success": [
                    169,
                    173,
                    175,
                    167
                ],
                "t": [
                    168,
                    169
                ],
                "tasks": [
                    168,
                    348,
                    349,
                    375
                ],
                "w.add": [
                    169
                ],
                "env_params.parallel_scheduling": [
                    169
                ],
                "logger.info": [
                    171
                ],
                "w.run": [
                    173
                ],
                "w.stop": [
                    174
                ],
                "r0": [
                    188,
                    180,
                    190
                ],
                "b": [
                    192,
                    180,
                    181,
                    186,
                    187
                ],
                "r1": [
                    192,
                    181,
                    184,
                    188,
                    190
                ],
                "i": [
                    184,
                    187,
                    183
                ],
                "a": [
                    259,
                    187,
                    319,
                    183
                ],
                "j": [
                    186,
                    187,
                    188
                ],
                "c": [
                    187,
                    188
                ],
                "weighted_tasks": [
                    196,
                    197
                ],
                "_editdistance": [
                    196
                ],
                "task_name": [
                    224,
                    196,
                    201,
                    265,
                    203,
                    266,
                    237,
                    238,
                    267,
                    269,
                    273,
                    215,
                    219,
                    223
                ],
                "task_name_2": [
                    196
                ],
                "task_names": [
                    266,
                    267,
                    196,
                    254
                ],
                "ordered_tasks": [
                    197,
                    198
                ],
                "pair": [
                    197
                ],
                "candidates": [
                    200,
                    201,
                    198
                ],
                "dist": [
                    198
                ],
                "display_string": [
                    201,
                    203,
                    205,
                    199
                ],
                "join": [
                    201
                ],
                "param_name": [
                    224,
                    230,
                    231,
                    237,
                    238,
                    209,
                    210,
                    215,
                    219,
                    223
                ],
                "param": [
                    224,
                    230,
                    231,
                    237,
                    238,
                    209,
                    210,
                    215,
                    216,
                    218,
                    219,
                    223
                ],
                "task_cls.get_params": [
                    209,
                    230
                ],
                "task_cls": [
                    290,
                    292,
                    230,
                    231,
                    269,
                    209,
                    210,
                    279
                ],
                "param.add_to_cmdline_parser": [
                    224,
                    210
                ],
                "parser": [
                    224,
                    259,
                    262,
                    272,
                    315,
                    210,
                    250,
                    283,
                    252,
                    317,
                    319
                ],
                "task_cls.task_family": [
                    210,
                    231
                ],
                "seen_params": [
                    216,
                    218,
                    214
                ],
                "is_without_section": [
                    224,
                    237,
                    238,
                    215,
                    219,
                    223
                ],
                "Register.get_all_params": [
                    215
                ],
                "Register": [
                    269,
                    254,
                    215
                ],
                "seen_params.add": [
                    218
                ],
                "get_global_parameters": [
                    237,
                    223
                ],
                "params": [
                    232,
                    229,
                    231
                ],
                "param.parse_from_args": [
                    231
                ],
                "args": [
                    320,
                    289,
                    290,
                    259,
                    231,
                    238,
                    286,
                    319
                ],
                "param.set_global_from_args": [
                    238
                ],
                "Interface": [
                    241,
                    375
                ],
                "cmdline_args": [
                    312,
                    259,
                    324,
                    262,
                    295,
                    345,
                    347,
                    247,
                    248,
                    313,
                    283,
                    348,
                    319
                ],
                "sys.argv": [
                    248,
                    313
                ],
                "argparse.ArgumentParser": [
                    250,
                    315
                ],
                "argparse": [
                    250,
                    315
                ],
                "add_global_parameters": [
                    252,
                    317,
                    278
                ],
                "Register.task_names": [
                    254
                ],
                "unknown": [
                    265,
                    259,
                    260,
                    319
                ],
                "parser.parse_known_args": [
                    259,
                    262,
                    319
                ],
                "error_task_names": [
                    267
                ],
                "Register.get_task_cls": [
                    269
                ],
                "subparsers": [
                    272,
                    273
                ],
                "parser.add_subparsers": [
                    272
                ],
                "subparser": [
                    273,
                    278,
                    279
                ],
                "subparsers.add_parser": [
                    273
                ],
                "add_task_parameters": [
                    279
                ],
                "subargs": [
                    283,
                    284
                ],
                "parser.parse_args": [
                    283
                ],
                "key": [
                    284,
                    286
                ],
                "value": [
                    284,
                    285,
                    286
                ],
                "items": [
                    284
                ],
                "set_global_parameters": [
                    289
                ],
                "task_params": [
                    290,
                    292
                ],
                "get_task_parameters": [
                    290
                ],
                "self.parse_task": [
                    324,
                    295
                ],
                "self": [
                    324,
                    295
                ],
                "ArgParseInterface": [
                    298,
                    343
                ],
                "args.module": [
                    320
                ],
                "use_dynamic_argparse": [
                    340
                ],
                "interface": [
                    349,
                    348,
                    341,
                    343
                ],
                "DynamicArgParseInterface": [
                    341
                ],
                "main_task_cls": [
                    344,
                    345
                ],
                "cmdline_args.insert": [
                    345,
                    347
                ],
                "main_task_cls.task_family": [
                    345
                ],
                "interface.parse": [
                    348
                ],
                "interface.run": [
                    349
                ],
                "Interface.run": [
                    375
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/luigi_21/test/interface_test.py",
                "test_function": "test_just_run_main_task_cls",
                "test_function_code": "    def test_just_run_main_task_cls(self):\n        class MyTestTask(luigi.Task):\n            pass\n\n        class MyOtherTestTask(luigi.Task):\n            my_param = luigi.Parameter()\n\n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--local-scheduler']):\n            luigi.run(main_task_cls=MyTestTask)\n\n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--my-param', 'my_value', '--local-scheduler']):\n            luigi.run(main_task_cls=MyOtherTestTask)",
                "test_error": "AttributeError: 'NoneType' object has no attribute 'insert'",
                "full_test_error": "self = <interface_test.InterfaceTest testMethod=test_just_run_main_task_cls>\n\n    def test_just_run_main_task_cls(self):\n        class MyTestTask(luigi.Task):\n            pass\n    \n        class MyOtherTestTask(luigi.Task):\n            my_param = luigi.Parameter()\n    \n        with patch.object(sys, 'argv', ['my_module.py', '--no-lock', '--local-scheduler']):\n>           luigi.run(main_task_cls=MyTestTask)\n\ntest/interface_test.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncmdline_args = None\nmain_task_cls = <class 'interface_test.InterfaceTest.test_just_run_main_task_cls.<locals>.MyTestTask'>\nworker_scheduler_factory = None, use_dynamic_argparse = False\nlocal_scheduler = False\n\n    def run(cmdline_args=None, main_task_cls=None,\n            worker_scheduler_factory=None, use_dynamic_argparse=False, local_scheduler=False):\n        \"\"\"\n        Please dont use. Instead use `luigi` binary.\n    \n        Run from cmdline using argparse.\n    \n        :param cmdline_args:\n        :param main_task_cls:\n        :param worker_scheduler_factory:\n        :param use_dynamic_argparse:\n        :param local_scheduler:\n        \"\"\"\n        if use_dynamic_argparse:\n            interface = DynamicArgParseInterface()\n        else:\n            interface = ArgParseInterface()\n        if main_task_cls:\n>           cmdline_args.insert(0, main_task_cls.task_family)\nE           AttributeError: 'NoneType' object has no attribute 'insert'\n\nluigi/interface.py:345: AttributeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}