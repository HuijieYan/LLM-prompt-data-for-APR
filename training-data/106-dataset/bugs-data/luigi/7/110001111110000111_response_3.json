{
    "luigi": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 761,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def add_task(self, task_id=None, status='PENDING', runnable=True,\n             deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None,\n             assistant=False, tracking_url=None, worker=None, batchable=None,\n             batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    \n    # existing code here...\n    \n    if worker:\n        assert worker is not None\n        worker_id = worker\n        worker = self.get_worker(worker_id)\n        retry_policy = self._generate_retry_policy(retry_policy_dict)\n    \n        if worker.enabled:\n            _default_task = self._make_task(\n                task_id=task_id, status='PENDING', deps=deps, resources=resources,\n                priority=priority, family=family, module=module, params=params,\n            )\n        else:\n            _default_task = None\n    \n        task = self.get_task(task_id, setdefault=_default_task)\n    \n        if task and (task.status == 'RUNNING' or task.status == 'BATCH_RUNNING') and status != 'PENDING':\n            return\n    \n        # existing code here...\n    \n        if status in ['FAILED', 'SUSPENDED']:\n            if status == 'FAILED' and self._config.batch_emails:\n                batched_params, _ = self.get_batcher(worker_id, family)\n                if batched_params:\n                    unbatched_params = {\n                        param: value\n                        for param, value in task.params.items()\n                        if param not in batched_params\n                    }\n                else:\n                    unbatched_params = task.params\n    \n                # existing code here for email_batcher\n    \n        if deps is not None:\n            task.deps = set(deps)\n    \n        if new_deps is not None:\n            task.deps.update(new_deps)\n    \n        if resources is not None:\n            task.resources = resources\n    \n        if worker.enabled and not assistant:\n            task.stakeholders.add(worker_id)\n    \n        # existing code here...\n    \n        self._update_priority(task, priority, worker_id)"
        }
    ]
}