{
    "pandas:76": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_76/pandas/io/json/_json.py": {
            "buggy_functions": [
                {
                    "function_name": "_try_convert_data",
                    "function_code": "def _try_convert_data(self, name, data, use_dtypes=True, convert_dates=True):\n    \"\"\"\n    Try to parse a ndarray like into a column by inferring dtype.\n    \"\"\"\n\n    # don't try to coerce, unless a force conversion\n    if use_dtypes:\n        if not self.dtype:\n            return data, False\n        elif self.dtype is True:\n            pass\n        else:\n            # dtype to force\n            dtype = (\n                self.dtype.get(name) if isinstance(self.dtype, dict) else self.dtype\n            )\n            if dtype is not None:\n                try:\n                    dtype = np.dtype(dtype)\n                    return data.astype(dtype), True\n                except (TypeError, ValueError):\n                    return data, False\n\n    if convert_dates:\n        new_data, result = self._try_convert_to_date(data)\n        if result:\n            return new_data, True\n\n    result = False\n\n    if data.dtype == \"object\":\n\n        # try float\n        try:\n            data = data.astype(\"float64\")\n            result = True\n        except (TypeError, ValueError):\n            pass\n\n    if data.dtype.kind == \"f\":\n\n        if data.dtype != \"float64\":\n\n            # coerce floats to 64\n            try:\n                data = data.astype(\"float64\")\n                result = True\n            except (TypeError, ValueError):\n                pass\n\n    # don't coerce 0-len data\n    if len(data) and (data.dtype == \"float\" or data.dtype == \"object\"):\n\n        # coerce ints if we can\n        try:\n            new_data = data.astype(\"int64\")\n            if (new_data == data).all():\n                data = new_data\n                result = True\n        except (TypeError, ValueError):\n            pass\n\n    # coerce ints to 64\n    if data.dtype == \"int\":\n\n        # coerce floats to 64\n        try:\n            data = data.astype(\"int64\")\n            result = True\n        except (TypeError, ValueError):\n            pass\n\n    return data, result\n",
                    "decorators": [],
                    "docstring": "Try to parse a ndarray like into a column by inferring dtype.",
                    "start_line": 886,
                    "variables": {
                        "use_dtypes": [
                            892
                        ],
                        "self.dtype": [
                            900,
                            893,
                            895
                        ],
                        "self": [
                            900,
                            893,
                            910,
                            895
                        ],
                        "data": [
                            931,
                            905,
                            937,
                            907,
                            941,
                            910,
                            942,
                            943,
                            916,
                            949,
                            958,
                            920,
                            953,
                            925,
                            894,
                            927
                        ],
                        "dtype": [
                            904,
                            905,
                            899,
                            902
                        ],
                        "isinstance": [
                            900
                        ],
                        "dict": [
                            900
                        ],
                        "self.dtype.get": [
                            900
                        ],
                        "name": [
                            900
                        ],
                        "np.dtype": [
                            904
                        ],
                        "np": [
                            904
                        ],
                        "data.astype": [
                            931,
                            905,
                            941,
                            920,
                            953
                        ],
                        "TypeError": [
                            933,
                            906,
                            945,
                            922,
                            955
                        ],
                        "ValueError": [
                            933,
                            906,
                            945,
                            922,
                            955
                        ],
                        "convert_dates": [
                            909
                        ],
                        "new_data": [
                            941,
                            942,
                            910,
                            912,
                            943
                        ],
                        "result": [
                            932,
                            910,
                            911,
                            944,
                            914,
                            921,
                            954,
                            958
                        ],
                        "self._try_convert_to_date": [
                            910
                        ],
                        "data.dtype": [
                            937,
                            916,
                            949,
                            925,
                            927
                        ],
                        "data.dtype.kind": [
                            925
                        ],
                        "len": [
                            937
                        ],
                        "all": [
                            942
                        ]
                    },
                    "filtered_variables": {
                        "use_dtypes": [
                            892
                        ],
                        "self.dtype": [
                            900,
                            893,
                            895
                        ],
                        "self": [
                            900,
                            893,
                            910,
                            895
                        ],
                        "data": [
                            931,
                            905,
                            937,
                            907,
                            941,
                            910,
                            942,
                            943,
                            916,
                            949,
                            958,
                            920,
                            953,
                            925,
                            894,
                            927
                        ],
                        "dtype": [
                            904,
                            905,
                            899,
                            902
                        ],
                        "self.dtype.get": [
                            900
                        ],
                        "name": [
                            900
                        ],
                        "np.dtype": [
                            904
                        ],
                        "np": [
                            904
                        ],
                        "data.astype": [
                            931,
                            905,
                            941,
                            920,
                            953
                        ],
                        "convert_dates": [
                            909
                        ],
                        "new_data": [
                            941,
                            942,
                            910,
                            912,
                            943
                        ],
                        "result": [
                            932,
                            910,
                            911,
                            944,
                            914,
                            921,
                            954,
                            958
                        ],
                        "self._try_convert_to_date": [
                            910
                        ],
                        "data.dtype": [
                            937,
                            916,
                            949,
                            925,
                            927
                        ],
                        "data.dtype.kind": [
                            925
                        ]
                    },
                    "diff_line_number": 945,
                    "class_data": {
                        "signature": "class Parser()",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, json, orient, dtype=None, convert_axes=True, convert_dates=True, keep_default_dates=False, numpy=False, precise_float=False, date_unit=None):\n    self.json = json\n    if orient is None:\n        orient = self._default_orient\n    self.orient = orient\n    self.dtype = dtype\n    if orient == 'split':\n        numpy = False\n    if date_unit is not None:\n        date_unit = date_unit.lower()\n        if date_unit not in self._STAMP_UNITS:\n            raise ValueError(f'date_unit must be one of {self._STAMP_UNITS}')\n        self.min_stamp = self._MIN_STAMPS[date_unit]\n    else:\n        self.min_stamp = self._MIN_STAMPS['s']\n    self.numpy = numpy\n    self.precise_float = precise_float\n    self.convert_axes = convert_axes\n    self.convert_dates = convert_dates\n    self.date_unit = date_unit\n    self.keep_default_dates = keep_default_dates\n    self.obj = None",
                            "def check_keys_split(self, decoded):\n    \"\"\"\n    Checks that dict has only the appropriate keys for orient='split'.\n    \"\"\"\n    bad_keys = set(decoded.keys()).difference(set(self._split_keys))\n    if bad_keys:\n        bad_keys = ', '.join(bad_keys)\n        raise ValueError(f'JSON data had unexpected key(s): {bad_keys}')",
                            "def parse(self):\n    numpy = self.numpy\n    if numpy:\n        self._parse_numpy()\n    else:\n        self._parse_no_numpy()\n    if self.obj is None:\n        return None\n    if self.convert_axes:\n        self._convert_axes()\n    self._try_convert_types()\n    return self.obj",
                            "def _convert_axes(self):\n    \"\"\"\n    Try to convert axes.\n    \"\"\"\n    for axis in self.obj._AXIS_NUMBERS.keys():\n        new_axis, result = self._try_convert_data(axis, self.obj._get_axis(axis), use_dtypes=False, convert_dates=True)\n        if result:\n            setattr(self.obj, axis, new_axis)",
                            "def _try_convert_types(self):\n    raise AbstractMethodError(self)",
                            "def _try_convert_data(self, name, data, use_dtypes=True, convert_dates=True):\n    \"\"\"\n    Try to parse a ndarray like into a column by inferring dtype.\n    \"\"\"\n    if use_dtypes:\n        if not self.dtype:\n            return (data, False)\n        elif self.dtype is True:\n            pass\n        else:\n            dtype = self.dtype.get(name) if isinstance(self.dtype, dict) else self.dtype\n            if dtype is not None:\n                try:\n                    dtype = np.dtype(dtype)\n                    return (data.astype(dtype), True)\n                except (TypeError, ValueError):\n                    return (data, False)\n    if convert_dates:\n        new_data, result = self._try_convert_to_date(data)\n        if result:\n            return (new_data, True)\n    result = False\n    if data.dtype == 'object':\n        try:\n            data = data.astype('float64')\n            result = True\n        except (TypeError, ValueError):\n            pass\n    if data.dtype.kind == 'f':\n        if data.dtype != 'float64':\n            try:\n                data = data.astype('float64')\n                result = True\n            except (TypeError, ValueError):\n                pass\n    if len(data) and (data.dtype == 'float' or data.dtype == 'object'):\n        try:\n            new_data = data.astype('int64')\n            if (new_data == data).all():\n                data = new_data\n                result = True\n        except (TypeError, ValueError):\n            pass\n    if data.dtype == 'int':\n        try:\n            data = data.astype('int64')\n            result = True\n        except (TypeError, ValueError):\n            pass\n    return (data, result)",
                            "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    if not len(data):\n        return (data, False)\n    new_data = data\n    if new_data.dtype == 'object':\n        try:\n            new_data = data.astype('int64')\n        except (TypeError, ValueError, OverflowError):\n            pass\n    if issubclass(new_data.dtype.type, np.number):\n        in_range = isna(new_data.values) | (new_data > self.min_stamp) | (new_data.values == iNaT)\n        if not in_range.all():\n            return (data, False)\n    date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n    for date_unit in date_units:\n        try:\n            new_data = to_datetime(new_data, errors='raise', unit=date_unit)\n        except (ValueError, OverflowError):\n            continue\n        return (new_data, True)\n    return (data, False)",
                            "def _try_convert_dates(self):\n    raise AbstractMethodError(self)"
                        ],
                        "constructor_variables": [
                            "dtype",
                            "convert_dates",
                            "json",
                            "obj",
                            "min_stamp",
                            "convert_axes",
                            "precise_float",
                            "orient",
                            "numpy",
                            "keep_default_dates",
                            "date_unit"
                        ],
                        "class_level_variables": [
                            "_STAMP_UNITS",
                            "_MIN_STAMPS"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, json, orient, dtype=None, convert_axes=True, convert_dates=True, keep_default_dates=False, numpy=False, precise_float=False, date_unit=None)",
                            "check_keys_split(self, decoded)",
                            "parse(self)",
                            "_convert_axes(self)",
                            "_try_convert_types(self)",
                            "_try_convert_data(self, name, data, use_dtypes=True, convert_dates=True)",
                            "_try_convert_to_date(self, data)",
                            "_try_convert_dates(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "use_dtypes": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x11dc08e80>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "RangeIndex(start=0, stop=2, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "2"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method Index.astype of RangeIndex(start=0, stop=2, step=1)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x11dc08e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "use_dtypes": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x11dc08e80>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "RangeIndex(start=0, stop=2, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "2"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method Index.astype of RangeIndex(start=0, stop=2, step=1)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": "RangeIndex(start=0, stop=2, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "2"
                                },
                                "result": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x11dc08e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "use_dtypes": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x11dc08e80>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "Index(['col'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'columns'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method Index.astype of Index(['col'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x11dc08e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "use_dtypes": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x11dc08e80>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "Index(['col'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'columns'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method Index.astype of Index(['col'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": "Index(['col'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "result": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x11dc08e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "use_dtypes": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x1193a4cd0>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "RangeIndex(start=0, stop=2, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "2"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method Index.astype of RangeIndex(start=0, stop=2, step=1)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x1193a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "use_dtypes": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x1193a4cd0>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "RangeIndex(start=0, stop=2, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "2"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'index'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method Index.astype of RangeIndex(start=0, stop=2, step=1)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": "RangeIndex(start=0, stop=2, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "2"
                                },
                                "result": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x1193a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "use_dtypes": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x1193a4cd0>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "Index(['col'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'columns'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method Index.astype of Index(['col'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x1193a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "use_dtypes": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x1193a4cd0>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "Index(['col'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'columns'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method Index.astype of Index(['col'], dtype='object')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": "Index(['col'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "1"
                                },
                                "result": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x1193a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "use_dtypes": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x1193a4cd0>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "0    31900441201190696999\n1                    Text\nName: col, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "2"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'col'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0    31900441201190696999\n1                    Text\nName: col, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x1193a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "use_dtypes": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.dtype": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.io.json._json.FrameParser object at 0x1193a4cd0>",
                                    "variable_type": "FrameParser",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "0    31900441201190696999\n1                    Text\nName: col, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "2"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtype.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'col'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "np.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.astype": {
                                    "variable_value": "<bound method NDFrame.astype of 0    31900441201190696999\n1                    Text\nName: col, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "convert_dates": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._try_convert_to_date": {
                                    "variable_value": "<bound method Parser._try_convert_to_date of <pandas.io.json._json.FrameParser object at 0x1193a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "data.dtype.kind": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def to_json(\n    path_or_buf,\n    obj,\n    orient: Optional[str] = None,\n    date_format: str = \"epoch\",\n    double_precision: int = 10,\n    force_ascii: bool = True,\n    date_unit: str = \"ms\",\n    default_handler: Optional[Callable[[Any], JSONSerializable]] = None,\n    lines: bool = False,\n    compression: Optional[str] = \"infer\",\n    index: bool = True,\n    indent: int = 0,\n):\n\n    if not index and orient not in [\"split\", \"table\"]:\n        raise ValueError(\n            \"'index=False' is only valid when 'orient' is 'split' or 'table'\"\n        )\n\n    path_or_buf = stringify_path(path_or_buf)\n    if lines and orient != \"records\":\n        raise ValueError(\"'lines' keyword only valid when 'orient' is records\")\n\n    if orient == \"table\" and isinstance(obj, Series):\n        obj = obj.to_frame(name=obj.name or \"values\")\n\n    writer: Type[\"Writer\"]\n    if orient == \"table\" and isinstance(obj, DataFrame):\n        writer = JSONTableWriter\n    elif isinstance(obj, Series):\n        writer = SeriesWriter\n    elif isinstance(obj, DataFrame):\n        writer = FrameWriter\n    else:\n        raise NotImplementedError(\"'obj' should be a Series or a DataFrame\")\n\n    s = writer(\n        obj,\n        orient=orient,\n        date_format=date_format,\n        double_precision=double_precision,\n        ensure_ascii=force_ascii,\n        date_unit=date_unit,\n        default_handler=default_handler,\n        index=index,\n        indent=indent,\n    ).write()\n\n    if lines:\n        s = convert_to_line_delimits(s)\n\n    if isinstance(path_or_buf, str):\n        fh, handles = get_handle(path_or_buf, \"w\", compression=compression)\n        try:\n            fh.write(s)\n        finally:\n            fh.close()\n    elif path_or_buf is None:\n        return s\n    else:\n        path_or_buf.write(s)",
                "@deprecate_kwarg(old_arg_name=\"numpy\", new_arg_name=None)\ndef read_json(\n    path_or_buf=None,\n    orient=None,\n    typ=\"frame\",\n    dtype=None,\n    convert_axes=None,\n    convert_dates=True,\n    keep_default_dates=True,\n    numpy=False,\n    precise_float=False,\n    date_unit=None,\n    encoding=None,\n    lines=False,\n    chunksize=None,\n    compression=\"infer\",\n):\n    \"\"\"\n    Convert a JSON string to pandas object.\n\n    Parameters\n    ----------\n    path_or_buf : a valid JSON str, path object or file-like object\n        Any valid string path is acceptable. The string could be a URL. Valid\n        URL schemes include http, ftp, s3, and file. For file URLs, a host is\n        expected. A local file could be:\n        ``file://localhost/path/to/table.json``.\n\n        If you want to pass in a path object, pandas accepts any\n        ``os.PathLike``.\n\n        By file-like object, we refer to objects with a ``read()`` method,\n        such as a file handler (e.g. via builtin ``open`` function)\n        or ``StringIO``.\n    orient : str\n        Indication of expected JSON string format.\n        Compatible JSON strings can be produced by ``to_json()`` with a\n        corresponding orient value.\n        The set of possible orients is:\n\n        - ``'split'`` : dict like\n          ``{index -> [index], columns -> [columns], data -> [values]}``\n        - ``'records'`` : list like\n          ``[{column -> value}, ... , {column -> value}]``\n        - ``'index'`` : dict like ``{index -> {column -> value}}``\n        - ``'columns'`` : dict like ``{column -> {index -> value}}``\n        - ``'values'`` : just the values array\n\n        The allowed and default values depend on the value\n        of the `typ` parameter.\n\n        * when ``typ == 'series'``,\n\n          - allowed orients are ``{'split','records','index'}``\n          - default is ``'index'``\n          - The Series index must be unique for orient ``'index'``.\n\n        * when ``typ == 'frame'``,\n\n          - allowed orients are ``{'split','records','index',\n            'columns','values', 'table'}``\n          - default is ``'columns'``\n          - The DataFrame index must be unique for orients ``'index'`` and\n            ``'columns'``.\n          - The DataFrame columns must be unique for orients ``'index'``,\n            ``'columns'``, and ``'records'``.\n\n        .. versionadded:: 0.23.0\n           'table' as an allowed value for the ``orient`` argument\n\n    typ : {'frame', 'series'}, default 'frame'\n        The type of object to recover.\n\n    dtype : bool or dict, default None\n        If True, infer dtypes; if a dict of column to dtype, then use those;\n        if False, then don't infer dtypes at all, applies only to the data.\n\n        For all ``orient`` values except ``'table'``, default is True.\n\n        .. versionchanged:: 0.25.0\n\n           Not applicable for ``orient='table'``.\n\n    convert_axes : bool, default None\n        Try to convert the axes to the proper dtypes.\n\n        For all ``orient`` values except ``'table'``, default is True.\n\n        .. versionchanged:: 0.25.0\n\n           Not applicable for ``orient='table'``.\n\n    convert_dates : bool or list of str, default True\n        If True then default datelike columns may be converted (depending on\n        keep_default_dates).\n        If False, no dates will be converted.\n        If a list of column names, then those columns will be converted and\n        default datelike columns may also be converted (depending on\n        keep_default_dates).\n\n    keep_default_dates : bool, default True\n        If parsing dates (convert_dates is not False), then try to parse the\n        default datelike columns.\n        A column label is datelike if\n\n        * it ends with ``'_at'``,\n\n        * it ends with ``'_time'``,\n\n        * it begins with ``'timestamp'``,\n\n        * it is ``'modified'``, or\n\n        * it is ``'date'``.\n\n    numpy : bool, default False\n        Direct decoding to numpy arrays. Supports numeric data only, but\n        non-numeric column and index labels are supported. Note also that the\n        JSON ordering MUST be the same for each term if numpy=True.\n\n        .. deprecated:: 1.0.0\n\n    precise_float : bool, default False\n        Set to enable usage of higher precision (strtod) function when\n        decoding string to double values. Default (False) is to use fast but\n        less precise builtin functionality.\n\n    date_unit : str, default None\n        The timestamp unit to detect if converting dates. The default behaviour\n        is to try and detect the correct precision, but if this is not desired\n        then pass one of 's', 'ms', 'us' or 'ns' to force parsing only seconds,\n        milliseconds, microseconds or nanoseconds respectively.\n\n    encoding : str, default is 'utf-8'\n        The encoding to use to decode py3 bytes.\n\n    lines : bool, default False\n        Read the file as a json object per line.\n\n    chunksize : int, optional\n        Return JsonReader object for iteration.\n        See the `line-delimited json docs\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json>`_\n        for more information on ``chunksize``.\n        This can only be passed if `lines=True`.\n        If this is None, the file will be read into memory all at once.\n\n        .. versionadded:: 0.21.0\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        For on-the-fly decompression of on-disk data. If 'infer', then use\n        gzip, bz2, zip or xz if path_or_buf is a string ending in\n        '.gz', '.bz2', '.zip', or 'xz', respectively, and no decompression\n        otherwise. If using 'zip', the ZIP file must contain only one data\n        file to be read in. Set to None for no decompression.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    Series or DataFrame\n        The type returned depends on the value of `typ`.\n\n    See Also\n    --------\n    DataFrame.to_json : Convert a DataFrame to a JSON string.\n    Series.to_json : Convert a Series to a JSON string.\n\n    Notes\n    -----\n    Specific to ``orient='table'``, if a :class:`DataFrame` with a literal\n    :class:`Index` name of `index` gets written with :func:`to_json`, the\n    subsequent read operation will incorrectly set the :class:`Index` name to\n    ``None``. This is because `index` is also used by :func:`DataFrame.to_json`\n    to denote a missing :class:`Index` name, and the subsequent\n    :func:`read_json` operation cannot distinguish between the two. The same\n    limitation is encountered with a :class:`MultiIndex` and any names\n    beginning with ``'level_'``.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n    ...                   index=['row 1', 'row 2'],\n    ...                   columns=['col 1', 'col 2'])\n\n    Encoding/decoding a Dataframe using ``'split'`` formatted JSON:\n\n    >>> df.to_json(orient='split')\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n    >>> pd.read_json(_, orient='split')\n          col 1 col 2\n    row 1     a     b\n    row 2     c     d\n\n    Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n    >>> df.to_json(orient='index')\n    '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n    >>> pd.read_json(_, orient='index')\n          col 1 col 2\n    row 1     a     b\n    row 2     c     d\n\n    Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n    Note that index labels are not preserved with this encoding.\n\n    >>> df.to_json(orient='records')\n    '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n    >>> pd.read_json(_, orient='records')\n      col 1 col 2\n    0     a     b\n    1     c     d\n\n    Encoding with Table Schema\n\n    >>> df.to_json(orient='table')\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                    \"primaryKey\": \"index\",\n                    \"pandas_version\": \"0.20.0\"},\n        \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n    \"\"\"\n\n    if orient == \"table\" and dtype:\n        raise ValueError(\"cannot pass both dtype and orient='table'\")\n    if orient == \"table\" and convert_axes:\n        raise ValueError(\"cannot pass both convert_axes and orient='table'\")\n\n    if dtype is None and orient != \"table\":\n        dtype = True\n    if convert_axes is None and orient != \"table\":\n        convert_axes = True\n    if encoding is None:\n        encoding = \"utf-8\"\n\n    compression = infer_compression(path_or_buf, compression)\n    filepath_or_buffer, _, compression, should_close = get_filepath_or_buffer(\n        path_or_buf, encoding=encoding, compression=compression\n    )\n\n    json_reader = JsonReader(\n        filepath_or_buffer,\n        orient=orient,\n        typ=typ,\n        dtype=dtype,\n        convert_axes=convert_axes,\n        convert_dates=convert_dates,\n        keep_default_dates=keep_default_dates,\n        numpy=numpy,\n        precise_float=precise_float,\n        date_unit=date_unit,\n        encoding=encoding,\n        lines=lines,\n        chunksize=chunksize,\n        compression=compression,\n    )\n\n    if chunksize:\n        return json_reader\n\n    result = json_reader.read()\n    if should_close:\n        filepath_or_buffer.close()\n\n    return result",
                "def __init__(\n    self,\n    obj,\n    orient: Optional[str],\n    date_format: str,\n    double_precision: int,\n    ensure_ascii: bool,\n    date_unit: str,\n    index: bool,\n    default_handler: Optional[Callable[[Any], JSONSerializable]] = None,\n    indent: int = 0,\n):\n    self.obj = obj\n\n    if orient is None:\n        orient = self._default_orient  # type: ignore\n\n    self.orient = orient\n    self.date_format = date_format\n    self.double_precision = double_precision\n    self.ensure_ascii = ensure_ascii\n    self.date_unit = date_unit\n    self.default_handler = default_handler\n    self.index = index\n    self.indent = indent\n\n    self.is_copy = None\n    self._format_axes()",
                "def _format_axes(self):\n    raise AbstractMethodError(self)",
                "def write(self):\n    return self._write(\n        self.obj,\n        self.orient,\n        self.double_precision,\n        self.ensure_ascii,\n        self.date_unit,\n        self.date_format == \"iso\",\n        self.default_handler,\n        self.indent,\n    )",
                "def _write(\n    self,\n    obj,\n    orient: Optional[str],\n    double_precision: int,\n    ensure_ascii: bool,\n    date_unit: str,\n    iso_dates: bool,\n    default_handler: Optional[Callable[[Any], JSONSerializable]],\n    indent: int,\n):\n    return dumps(\n        obj,\n        orient=orient,\n        double_precision=double_precision,\n        ensure_ascii=ensure_ascii,\n        date_unit=date_unit,\n        iso_dates=iso_dates,\n        default_handler=default_handler,\n        indent=indent,\n    )",
                "def _format_axes(self):\n    if not self.obj.index.is_unique and self.orient == \"index\":\n        raise ValueError(f\"Series index must be unique for orient='{self.orient}'\")",
                "def _write(\n    self,\n    obj,\n    orient: Optional[str],\n    double_precision: int,\n    ensure_ascii: bool,\n    date_unit: str,\n    iso_dates: bool,\n    default_handler: Optional[Callable[[Any], JSONSerializable]],\n    indent: int,\n):\n    if not self.index and orient == \"split\":\n        obj = {\"name\": obj.name, \"data\": obj.values}\n    return super()._write(\n        obj,\n        orient,\n        double_precision,\n        ensure_ascii,\n        date_unit,\n        iso_dates,\n        default_handler,\n        indent,\n    )",
                "def _format_axes(self):\n    \"\"\"\n    Try to format axes if they are datelike.\n    \"\"\"\n    if not self.obj.index.is_unique and self.orient in (\"index\", \"columns\"):\n        raise ValueError(\n            f\"DataFrame index must be unique for orient='{self.orient}'.\"\n        )\n    if not self.obj.columns.is_unique and self.orient in (\n        \"index\",\n        \"columns\",\n        \"records\",\n    ):\n        raise ValueError(\n            f\"DataFrame columns must be unique for orient='{self.orient}'.\"\n        )",
                "def _write(\n    self,\n    obj,\n    orient: Optional[str],\n    double_precision: int,\n    ensure_ascii: bool,\n    date_unit: str,\n    iso_dates: bool,\n    default_handler: Optional[Callable[[Any], JSONSerializable]],\n    indent: int,\n):\n    if not self.index and orient == \"split\":\n        obj = obj.to_dict(orient=\"split\")\n        del obj[\"index\"]\n    return super()._write(\n        obj,\n        orient,\n        double_precision,\n        ensure_ascii,\n        date_unit,\n        iso_dates,\n        default_handler,\n        indent,\n    )",
                "def __init__(\n    self,\n    obj,\n    orient: Optional[str],\n    date_format: str,\n    double_precision: int,\n    ensure_ascii: bool,\n    date_unit: str,\n    index: bool,\n    default_handler: Optional[Callable[[Any], JSONSerializable]] = None,\n    indent: int = 0,\n):\n    \"\"\"\n    Adds a `schema` attribute with the Table Schema, resets\n    the index (can't do in caller, because the schema inference needs\n    to know what the index is, forces orient to records, and forces\n    date_format to 'iso'.\n    \"\"\"\n\n    super().__init__(\n        obj,\n        orient,\n        date_format,\n        double_precision,\n        ensure_ascii,\n        date_unit,\n        index,\n        default_handler=default_handler,\n        indent=indent,\n    )\n\n    if date_format != \"iso\":\n        msg = (\n            \"Trying to write with `orient='table'` and \"\n            f\"`date_format='{date_format}'`. Table Schema requires dates \"\n            \"to be formatted with `date_format='iso'`\"\n        )\n        raise ValueError(msg)\n\n    self.schema = build_table_schema(obj, index=self.index)\n\n    # NotImplemented on a column MultiIndex\n    if obj.ndim == 2 and isinstance(obj.columns, MultiIndex):\n        raise NotImplementedError(\"orient='table' is not supported for MultiIndex\")\n\n    # TODO: Do this timedelta properly in objToJSON.c See GH #15137\n    if (\n        (obj.ndim == 1)\n        and (obj.name in set(obj.index.names))\n        or len(obj.columns & obj.index.names)\n    ):\n        msg = \"Overlapping names between the index and columns\"\n        raise ValueError(msg)\n\n    obj = obj.copy()\n    timedeltas = obj.select_dtypes(include=[\"timedelta\"]).columns\n    if len(timedeltas):\n        obj[timedeltas] = obj[timedeltas].applymap(lambda x: x.isoformat())\n    # Convert PeriodIndex to datetimes before serializing\n    if is_period_dtype(obj.index):\n        obj.index = obj.index.to_timestamp()\n\n    # exclude index from obj if index=False\n    if not self.index:\n        self.obj = obj.reset_index(drop=True)\n    else:\n        self.obj = obj.reset_index(drop=False)\n    self.date_format = \"iso\"\n    self.orient = \"records\"\n    self.index = index",
                "def _write(\n    self,\n    obj,\n    orient,\n    double_precision,\n    ensure_ascii,\n    date_unit,\n    iso_dates,\n    default_handler,\n    indent,\n):\n    table_obj = {\"schema\": self.schema, \"data\": obj}\n    serialized = super()._write(\n        table_obj,\n        orient,\n        double_precision,\n        ensure_ascii,\n        date_unit,\n        iso_dates,\n        default_handler,\n        indent,\n    )\n\n    return serialized",
                "def __init__(\n    self,\n    filepath_or_buffer,\n    orient,\n    typ,\n    dtype,\n    convert_axes,\n    convert_dates,\n    keep_default_dates,\n    numpy,\n    precise_float,\n    date_unit,\n    encoding,\n    lines,\n    chunksize,\n    compression,\n):\n\n    self.path_or_buf = filepath_or_buffer\n    self.orient = orient\n    self.typ = typ\n    self.dtype = dtype\n    self.convert_axes = convert_axes\n    self.convert_dates = convert_dates\n    self.keep_default_dates = keep_default_dates\n    self.numpy = numpy\n    self.precise_float = precise_float\n    self.date_unit = date_unit\n    self.encoding = encoding\n    self.compression = compression\n    self.lines = lines\n    self.chunksize = chunksize\n    self.nrows_seen = 0\n    self.should_close = False\n\n    if self.chunksize is not None:\n        self.chunksize = _validate_integer(\"chunksize\", self.chunksize, 1)\n        if not self.lines:\n            raise ValueError(\"chunksize can only be passed if lines=True\")\n\n    data = self._get_data_from_filepath(filepath_or_buffer)\n    self.data = self._preprocess_data(data)",
                "def _preprocess_data(self, data):\n    \"\"\"\n    At this point, the data either has a `read` attribute (e.g. a file\n    object or a StringIO) or is a string that is a JSON document.\n\n    If self.chunksize, we prepare the data for the `__next__` method.\n    Otherwise, we read it into memory for the `read` method.\n    \"\"\"\n    if hasattr(data, \"read\") and not self.chunksize:\n        data = data.read()\n    if not hasattr(data, \"read\") and self.chunksize:\n        data = StringIO(data)\n\n    return data",
                "def _get_data_from_filepath(self, filepath_or_buffer):\n    \"\"\"\n    The function read_json accepts three input types:\n        1. filepath (string-like)\n        2. file-like object (e.g. open file object, StringIO)\n        3. JSON string\n\n    This method turns (1) into (2) to simplify the rest of the processing.\n    It returns input types (2) and (3) unchanged.\n    \"\"\"\n    data = filepath_or_buffer\n\n    exists = False\n    if isinstance(data, str):\n        try:\n            exists = os.path.exists(filepath_or_buffer)\n        # gh-5874: if the filepath is too long will raise here\n        except (TypeError, ValueError):\n            pass\n\n    if exists or self.compression is not None:\n        data, _ = get_handle(\n            filepath_or_buffer,\n            \"r\",\n            encoding=self.encoding,\n            compression=self.compression,\n        )\n        self.should_close = True\n        self.open_stream = data\n\n    return data",
                "def _combine_lines(self, lines) -> str:\n    \"\"\"\n    Combines a list of JSON objects into one JSON object.\n    \"\"\"\n    lines = filter(None, map(lambda x: x.strip(), lines))\n    return \"[\" + \",\".join(lines) + \"]\"",
                "def read(self):\n    \"\"\"\n    Read the whole JSON input into a pandas object.\n    \"\"\"\n    if self.lines and self.chunksize:\n        obj = concat(self)\n    elif self.lines:\n        data = ensure_str(self.data)\n        obj = self._get_object_parser(self._combine_lines(data.split(\"\\n\")))\n    else:\n        obj = self._get_object_parser(self.data)\n    self.close()\n    return obj",
                "def _get_object_parser(self, json):\n    \"\"\"\n    Parses a json document into a pandas object.\n    \"\"\"\n    typ = self.typ\n    dtype = self.dtype\n    kwargs = {\n        \"orient\": self.orient,\n        \"dtype\": self.dtype,\n        \"convert_axes\": self.convert_axes,\n        \"convert_dates\": self.convert_dates,\n        \"keep_default_dates\": self.keep_default_dates,\n        \"numpy\": self.numpy,\n        \"precise_float\": self.precise_float,\n        \"date_unit\": self.date_unit,\n    }\n    obj = None\n    if typ == \"frame\":\n        obj = FrameParser(json, **kwargs).parse()\n\n    if typ == \"series\" or obj is None:\n        if not isinstance(dtype, bool):\n            kwargs[\"dtype\"] = dtype\n        obj = SeriesParser(json, **kwargs).parse()\n\n    return obj",
                "def close(self):\n    \"\"\"\n    If we opened a stream earlier, in _get_data_from_filepath, we should\n    close it.\n\n    If an open stream or file was passed, we leave it open.\n    \"\"\"\n    if self.should_close:\n        try:\n            self.open_stream.close()\n        except (IOError, AttributeError):\n            pass",
                "def __next__(self):\n    lines = list(islice(self.data, self.chunksize))\n    if lines:\n        lines_json = self._combine_lines(lines)\n        obj = self._get_object_parser(lines_json)\n\n        # Make sure that the returned objects have the right index.\n        obj.index = range(self.nrows_seen, self.nrows_seen + len(obj))\n        self.nrows_seen += len(obj)\n\n        return obj\n\n    self.close()\n    raise StopIteration",
                "def __init__(\n    self,\n    json,\n    orient,\n    dtype=None,\n    convert_axes=True,\n    convert_dates=True,\n    keep_default_dates=False,\n    numpy=False,\n    precise_float=False,\n    date_unit=None,\n):\n    self.json = json\n\n    if orient is None:\n        orient = self._default_orient\n    self.orient = orient\n\n    self.dtype = dtype\n\n    if orient == \"split\":\n        numpy = False\n\n    if date_unit is not None:\n        date_unit = date_unit.lower()\n        if date_unit not in self._STAMP_UNITS:\n            raise ValueError(f\"date_unit must be one of {self._STAMP_UNITS}\")\n        self.min_stamp = self._MIN_STAMPS[date_unit]\n    else:\n        self.min_stamp = self._MIN_STAMPS[\"s\"]\n\n    self.numpy = numpy\n    self.precise_float = precise_float\n    self.convert_axes = convert_axes\n    self.convert_dates = convert_dates\n    self.date_unit = date_unit\n    self.keep_default_dates = keep_default_dates\n    self.obj = None",
                "def check_keys_split(self, decoded):\n    \"\"\"\n    Checks that dict has only the appropriate keys for orient='split'.\n    \"\"\"\n    bad_keys = set(decoded.keys()).difference(set(self._split_keys))\n    if bad_keys:\n        bad_keys = \", \".join(bad_keys)\n        raise ValueError(f\"JSON data had unexpected key(s): {bad_keys}\")",
                "def parse(self):\n\n    # try numpy\n    numpy = self.numpy\n    if numpy:\n        self._parse_numpy()\n\n    else:\n        self._parse_no_numpy()\n\n    if self.obj is None:\n        return None\n    if self.convert_axes:\n        self._convert_axes()\n    self._try_convert_types()\n    return self.obj",
                "def _convert_axes(self):\n    \"\"\"\n    Try to convert axes.\n    \"\"\"\n    for axis in self.obj._AXIS_NUMBERS.keys():\n        new_axis, result = self._try_convert_data(\n            axis, self.obj._get_axis(axis), use_dtypes=False, convert_dates=True\n        )\n        if result:\n            setattr(self.obj, axis, new_axis)",
                "def _try_convert_types(self):\n    raise AbstractMethodError(self)",
                "def _try_convert_data(self, name, data, use_dtypes=True, convert_dates=True):\n    \"\"\"\n    Try to parse a ndarray like into a column by inferring dtype.\n    \"\"\"\n\n    # don't try to coerce, unless a force conversion\n    if use_dtypes:\n        if not self.dtype:\n            return data, False\n        elif self.dtype is True:\n            pass\n        else:\n            # dtype to force\n            dtype = (\n                self.dtype.get(name) if isinstance(self.dtype, dict) else self.dtype\n            )\n            if dtype is not None:\n                try:\n                    dtype = np.dtype(dtype)\n                    return data.astype(dtype), True\n                except (TypeError, ValueError):\n                    return data, False\n\n    if convert_dates:\n        new_data, result = self._try_convert_to_date(data)\n        if result:\n            return new_data, True\n\n    result = False\n\n    if data.dtype == \"object\":\n\n        # try float\n        try:\n            data = data.astype(\"float64\")\n            result = True\n        except (TypeError, ValueError):\n            pass\n\n    if data.dtype.kind == \"f\":\n\n        if data.dtype != \"float64\":\n\n            # coerce floats to 64\n            try:\n                data = data.astype(\"float64\")\n                result = True\n            except (TypeError, ValueError):\n                pass\n\n    # don't coerce 0-len data\n    if len(data) and (data.dtype == \"float\" or data.dtype == \"object\"):\n\n        # coerce ints if we can\n        try:\n            new_data = data.astype(\"int64\")\n            if (new_data == data).all():\n                data = new_data\n                result = True\n        except (TypeError, ValueError):\n            pass\n\n    # coerce ints to 64\n    if data.dtype == \"int\":\n\n        # coerce floats to 64\n        try:\n            data = data.astype(\"int64\")\n            result = True\n        except (TypeError, ValueError):\n            pass\n\n    return data, result",
                "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if new_data.dtype == \"object\":\n        try:\n            new_data = data.astype(\"int64\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    # ignore numbers that are out of range\n    if issubclass(new_data.dtype.type, np.number):\n        in_range = (\n            isna(new_data.values)\n            | (new_data > self.min_stamp)\n            | (new_data.values == iNaT)\n        )\n        if not in_range.all():\n            return data, False\n\n    date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n    for date_unit in date_units:\n        try:\n            new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n        except (ValueError, OverflowError):\n            continue\n        return new_data, True\n    return data, False",
                "def _try_convert_dates(self):\n    raise AbstractMethodError(self)",
                "def _parse_no_numpy(self):\n    data = loads(self.json, precise_float=self.precise_float)\n\n    if self.orient == \"split\":\n        decoded = {str(k): v for k, v in data.items()}\n        self.check_keys_split(decoded)\n        self.obj = create_series_with_explicit_dtype(**decoded)\n    else:\n        self.obj = create_series_with_explicit_dtype(data, dtype_if_empty=object)",
                "def _parse_numpy(self):\n    load_kwargs = {\n        \"dtype\": None,\n        \"numpy\": True,\n        \"precise_float\": self.precise_float,\n    }\n    if self.orient in [\"columns\", \"index\"]:\n        load_kwargs[\"labelled\"] = True\n    loads_ = functools.partial(loads, **load_kwargs)\n    data = loads_(self.json)\n\n    if self.orient == \"split\":\n        decoded = {str(k): v for k, v in data.items()}\n        self.check_keys_split(decoded)\n        self.obj = create_series_with_explicit_dtype(**decoded)\n    elif self.orient in [\"columns\", \"index\"]:\n        self.obj = create_series_with_explicit_dtype(*data, dtype_if_empty=object)\n    else:\n        self.obj = create_series_with_explicit_dtype(data, dtype_if_empty=object)",
                "def _try_convert_types(self):\n    if self.obj is None:\n        return\n    obj, result = self._try_convert_data(\n        \"data\", self.obj, convert_dates=self.convert_dates\n    )\n    if result:\n        self.obj = obj",
                "def _parse_numpy(self):\n\n    json = self.json\n    orient = self.orient\n\n    if orient == \"columns\":\n        args = loads(\n            json,\n            dtype=None,\n            numpy=True,\n            labelled=True,\n            precise_float=self.precise_float,\n        )\n        if len(args):\n            args = (args[0].T, args[2], args[1])\n        self.obj = DataFrame(*args)\n    elif orient == \"split\":\n        decoded = loads(\n            json, dtype=None, numpy=True, precise_float=self.precise_float\n        )\n        decoded = {str(k): v for k, v in decoded.items()}\n        self.check_keys_split(decoded)\n        self.obj = DataFrame(**decoded)\n    elif orient == \"values\":\n        self.obj = DataFrame(\n            loads(json, dtype=None, numpy=True, precise_float=self.precise_float)\n        )\n    else:\n        self.obj = DataFrame(\n            *loads(\n                json,\n                dtype=None,\n                numpy=True,\n                labelled=True,\n                precise_float=self.precise_float,\n            )\n        )",
                "def _parse_no_numpy(self):\n\n    json = self.json\n    orient = self.orient\n\n    if orient == \"columns\":\n        self.obj = DataFrame(\n            loads(json, precise_float=self.precise_float), dtype=None\n        )\n    elif orient == \"split\":\n        decoded = {\n            str(k): v\n            for k, v in loads(json, precise_float=self.precise_float).items()\n        }\n        self.check_keys_split(decoded)\n        self.obj = DataFrame(dtype=None, **decoded)\n    elif orient == \"index\":\n        self.obj = DataFrame.from_dict(\n            loads(json, precise_float=self.precise_float),\n            dtype=None,\n            orient=\"index\",\n        )\n    elif orient == \"table\":\n        self.obj = parse_table_schema(json, precise_float=self.precise_float)\n    else:\n        self.obj = DataFrame(\n            loads(json, precise_float=self.precise_float), dtype=None\n        )",
                "def _process_converter(self, f, filt=None):\n    \"\"\"\n    Take a conversion function and possibly recreate the frame.\n    \"\"\"\n\n    if filt is None:\n        filt = lambda col, c: True\n\n    needs_new_obj = False\n    new_obj = dict()\n    for i, (col, c) in enumerate(self.obj.items()):\n        if filt(col, c):\n            new_data, result = f(col, c)\n            if result:\n                c = new_data\n                needs_new_obj = True\n        new_obj[i] = c\n\n    if needs_new_obj:\n\n        # possibly handle dup columns\n        new_obj = DataFrame(new_obj, index=self.obj.index)\n        new_obj.columns = self.obj.columns\n        self.obj = new_obj",
                "def _try_convert_types(self):\n    if self.obj is None:\n        return\n    if self.convert_dates:\n        self._try_convert_dates()\n\n    self._process_converter(\n        lambda col, c: self._try_convert_data(col, c, convert_dates=False)\n    )",
                "def _try_convert_dates(self):\n    if self.obj is None:\n        return\n\n    # our columns to parse\n    convert_dates = self.convert_dates\n    if convert_dates is True:\n        convert_dates = []\n    convert_dates = set(convert_dates)\n\n    def is_ok(col) -> bool:\n        \"\"\"\n        Return if this col is ok to try for a date parse.\n        \"\"\"\n        if not isinstance(col, str):\n            return False\n\n        col_lower = col.lower()\n        if (\n            col_lower.endswith(\"_at\")\n            or col_lower.endswith(\"_time\")\n            or col_lower == \"modified\"\n            or col_lower == \"date\"\n            or col_lower == \"datetime\"\n            or col_lower.startswith(\"timestamp\")\n        ):\n            return True\n        return False\n\n    self._process_converter(\n        lambda col, c: self._try_convert_to_date(c),\n        lambda col, c: (\n            (self.keep_default_dates and is_ok(col)) or col in convert_dates\n        ),\n    )",
                "def is_ok(col) -> bool:\n    \"\"\"\n    Return if this col is ok to try for a date parse.\n    \"\"\"\n    if not isinstance(col, str):\n        return False\n\n    col_lower = col.lower()\n    if (\n        col_lower.endswith(\"_at\")\n        or col_lower.endswith(\"_time\")\n        or col_lower == \"modified\"\n        or col_lower == \"date\"\n        or col_lower == \"datetime\"\n        or col_lower.startswith(\"timestamp\")\n    ):\n        return True\n    return False"
            ],
            "inscope_function_signatures": [
                "to_json(path_or_buf, obj, orient: Optional[str]=None, date_format: str='epoch', double_precision: int=10, force_ascii: bool=True, date_unit: str='ms', default_handler: Optional[Callable[[Any], JSONSerializable]]=None, lines: bool=False, compression: Optional[str]='infer', index: bool=True, indent: int=0)",
                "read_json(path_or_buf=None, orient=None, typ='frame', dtype=None, convert_axes=None, convert_dates=True, keep_default_dates=True, numpy=False, precise_float=False, date_unit=None, encoding=None, lines=False, chunksize=None, compression='infer')",
                "__init__(self, obj, orient: Optional[str], date_format: str, double_precision: int, ensure_ascii: bool, date_unit: str, index: bool, default_handler: Optional[Callable[[Any], JSONSerializable]]=None, indent: int=0)",
                "_format_axes(self)",
                "write(self)",
                "_write(self, obj, orient: Optional[str], double_precision: int, ensure_ascii: bool, date_unit: str, iso_dates: bool, default_handler: Optional[Callable[[Any], JSONSerializable]], indent: int)",
                "_format_axes(self)",
                "_write(self, obj, orient: Optional[str], double_precision: int, ensure_ascii: bool, date_unit: str, iso_dates: bool, default_handler: Optional[Callable[[Any], JSONSerializable]], indent: int)",
                "_format_axes(self)",
                "_write(self, obj, orient: Optional[str], double_precision: int, ensure_ascii: bool, date_unit: str, iso_dates: bool, default_handler: Optional[Callable[[Any], JSONSerializable]], indent: int)",
                "__init__(self, obj, orient: Optional[str], date_format: str, double_precision: int, ensure_ascii: bool, date_unit: str, index: bool, default_handler: Optional[Callable[[Any], JSONSerializable]]=None, indent: int=0)",
                "_write(self, obj, orient, double_precision, ensure_ascii, date_unit, iso_dates, default_handler, indent)",
                "__init__(self, filepath_or_buffer, orient, typ, dtype, convert_axes, convert_dates, keep_default_dates, numpy, precise_float, date_unit, encoding, lines, chunksize, compression)",
                "_preprocess_data(self, data)",
                "_get_data_from_filepath(self, filepath_or_buffer)",
                "_combine_lines(self, lines) -> str",
                "read(self)",
                "_get_object_parser(self, json)",
                "close(self)",
                "__next__(self)",
                "__init__(self, json, orient, dtype=None, convert_axes=True, convert_dates=True, keep_default_dates=False, numpy=False, precise_float=False, date_unit=None)",
                "check_keys_split(self, decoded)",
                "parse(self)",
                "_convert_axes(self)",
                "_try_convert_types(self)",
                "_try_convert_data(self, name, data, use_dtypes=True, convert_dates=True)",
                "_try_convert_to_date(self, data)",
                "_try_convert_dates(self)",
                "_parse_no_numpy(self)",
                "_parse_numpy(self)",
                "_try_convert_types(self)",
                "_parse_numpy(self)",
                "_parse_no_numpy(self)",
                "_process_converter(self, f, filt=None)",
                "_try_convert_types(self)",
                "_try_convert_dates(self)",
                "is_ok(col) -> bool"
            ],
            "variables_in_file": {
                "loads": [
                    32,
                    1024,
                    1056,
                    1095,
                    1067,
                    1100,
                    1007,
                    1106,
                    1075,
                    1079,
                    1114
                ],
                "json.loads": [
                    32
                ],
                "json": [
                    32,
                    33,
                    1057,
                    1090,
                    1095,
                    1068,
                    1052,
                    1100,
                    1106,
                    819,
                    1075,
                    1111,
                    759,
                    1080,
                    1114,
                    764
                ],
                "dumps": [
                    33,
                    159
                ],
                "json.dumps": [
                    33
                ],
                "TABLE_SCHEMA_VERSION": [
                    35
                ],
                "Optional": [
                    226,
                    261,
                    231,
                    42,
                    107,
                    47,
                    49,
                    113,
                    181,
                    151,
                    186,
                    156,
                    255
                ],
                "str": [
                    256,
                    259,
                    1028,
                    1166,
                    151,
                    154,
                    42,
                    43,
                    46,
                    1070,
                    49,
                    181,
                    184,
                    701,
                    1099,
                    720,
                    91,
                    226,
                    229,
                    107,
                    108,
                    111,
                    1010,
                    255
                ],
                "int": [
                    257,
                    227,
                    262,
                    232,
                    44,
                    109,
                    114,
                    51,
                    182,
                    152,
                    187,
                    157
                ],
                "bool": [
                    258,
                    185,
                    228,
                    260,
                    230,
                    1162,
                    45,
                    110,
                    48,
                    112,
                    50,
                    183,
                    153,
                    762,
                    155
                ],
                "Callable": [
                    261,
                    231,
                    47,
                    113,
                    186,
                    156
                ],
                "Any": [
                    261,
                    231,
                    47,
                    113,
                    186,
                    156
                ],
                "JSONSerializable": [
                    261,
                    231,
                    47,
                    113,
                    186,
                    156
                ],
                "index": [
                    321,
                    84,
                    278,
                    54,
                    127
                ],
                "orient": [
                    649,
                    273,
                    1053,
                    1055,
                    161,
                    1066,
                    1073,
                    821,
                    54,
                    822,
                    823,
                    827,
                    60,
                    189,
                    63,
                    193,
                    577,
                    67,
                    579,
                    1091,
                    582,
                    1093,
                    584,
                    1097,
                    78,
                    1104,
                    337,
                    596,
                    1110,
                    234,
                    239,
                    118,
                    119,
                    121
                ],
                "ValueError": [
                    906,
                    922,
                    668,
                    289,
                    933,
                    176,
                    304,
                    945,
                    55,
                    955,
                    61,
                    705,
                    578,
                    833,
                    580,
                    976,
                    211,
                    853,
                    219,
                    993
                ],
                "path_or_buf": [
                    97,
                    100,
                    59,
                    589,
                    591,
                    91,
                    92
                ],
                "stringify_path": [
                    59
                ],
                "lines": [
                    782,
                    783,
                    784,
                    660,
                    724,
                    725,
                    88,
                    60,
                    606
                ],
                "isinstance": [
                    67,
                    900,
                    69,
                    294,
                    71,
                    1166,
                    762,
                    91,
                    701,
                    63
                ],
                "obj": [
                    1039,
                    272,
                    785,
                    1043,
                    788,
                    789,
                    791,
                    160,
                    291,
                    294,
                    299,
                    300,
                    301,
                    306,
                    307,
                    309,
                    311,
                    312,
                    316,
                    190,
                    63,
                    64,
                    192,
                    318,
                    67,
                    69,
                    71,
                    77,
                    334,
                    732,
                    735,
                    737,
                    739,
                    235,
                    236,
                    238,
                    116,
                    757,
                    759,
                    761,
                    764,
                    766
                ],
                "Series": [
                    69,
                    63
                ],
                "obj.to_frame": [
                    64
                ],
                "obj.name": [
                    64,
                    300,
                    190
                ],
                "writer": [
                    66,
                    68,
                    70,
                    72,
                    76
                ],
                "Type": [
                    66
                ],
                "DataFrame": [
                    67,
                    1094,
                    71,
                    1065,
                    1103,
                    1072,
                    1105,
                    1074,
                    1138,
                    1078,
                    1113
                ],
                "JSONTableWriter": [
                    68
                ],
                "SeriesWriter": [
                    70
                ],
                "FrameWriter": [
                    72,
                    249
                ],
                "NotImplementedError": [
                    74,
                    295
                ],
                "s": [
                    98,
                    100,
                    76,
                    89,
                    94
                ],
                "write": [
                    76
                ],
                "date_format": [
                    79,
                    274,
                    122,
                    283,
                    286
                ],
                "double_precision": [
                    194,
                    162,
                    80,
                    240,
                    338,
                    275,
                    123
                ],
                "force_ascii": [
                    81
                ],
                "date_unit": [
                    832,
                    992,
                    834,
                    196,
                    164,
                    842,
                    657,
                    242,
                    82,
                    340,
                    277,
                    990,
                    604,
                    125,
                    830,
                    831
                ],
                "default_handler": [
                    166,
                    198,
                    83,
                    244,
                    342,
                    279,
                    126
                ],
                "indent": [
                    128,
                    199,
                    167,
                    245,
                    85,
                    343,
                    280
                ],
                "convert_to_line_delimits": [
                    89
                ],
                "fh": [
                    96,
                    92,
                    94
                ],
                "handles": [
                    92
                ],
                "get_handle": [
                    92,
                    709
                ],
                "compression": [
                    608,
                    589,
                    590,
                    591,
                    659,
                    92
                ],
                "fh.write": [
                    94
                ],
                "fh.close": [
                    96
                ],
                "path_or_buf.write": [
                    100
                ],
                "self.obj": [
                    1153,
                    1030,
                    1032,
                    138,
                    1034,
                    1037,
                    1040,
                    1043,
                    1065,
                    175,
                    1072,
                    1074,
                    1078,
                    316,
                    318,
                    1094,
                    844,
                    1103,
                    1105,
                    210,
                    1143,
                    214,
                    1111,
                    1113,
                    865,
                    870,
                    1127,
                    876,
                    878,
                    881,
                    1138,
                    1139,
                    116,
                    1012,
                    1014,
                    1140
                ],
                "self": [
                    1025,
                    1027,
                    1029,
                    1030,
                    1031,
                    1032,
                    1034,
                    1037,
                    1039,
                    1040,
                    1043,
                    1052,
                    1053,
                    1061,
                    1065,
                    1068,
                    1071,
                    1072,
                    1074,
                    1075,
                    1078,
                    1084,
                    1090,
                    1091,
                    1094,
                    1095,
                    1100,
                    1102,
                    1103,
                    1105,
                    1106,
                    1111,
                    1113,
                    1114,
                    1127,
                    1138,
                    1139,
                    116,
                    1140,
                    119,
                    1143,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    1145,
                    130,
                    131,
                    1148,
                    1149,
                    134,
                    1146,
                    648,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    649,
                    650,
                    651,
                    652,
                    653,
                    654,
                    655,
                    656,
                    657,
                    658,
                    659,
                    660,
                    661,
                    662,
                    663,
                    665,
                    666,
                    667,
                    670,
                    671,
                    1181,
                    1182,
                    1184,
                    681,
                    1153,
                    683,
                    175,
                    176,
                    189,
                    1157,
                    708,
                    712,
                    713,
                    715,
                    716,
                    210,
                    212,
                    214,
                    731,
                    220,
                    732,
                    733,
                    734,
                    735,
                    737,
                    738,
                    745,
                    234,
                    746,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    755,
                    775,
                    777,
                    782,
                    784,
                    785,
                    788,
                    789,
                    793,
                    291,
                    819,
                    822,
                    823,
                    825,
                    315,
                    316,
                    318,
                    319,
                    320,
                    321,
                    832,
                    833,
                    834,
                    836,
                    838,
                    839,
                    840,
                    841,
                    842,
                    843,
                    844,
                    334,
                    850,
                    858,
                    860,
                    863,
                    865,
                    867,
                    868,
                    869,
                    870,
                    876,
                    877,
                    878,
                    881,
                    884,
                    893,
                    895,
                    900,
                    910,
                    983,
                    989,
                    999,
                    1007,
                    1009,
                    1011,
                    1012,
                    1014,
                    1020,
                    1022
                ],
                "self._default_orient": [
                    822,
                    119
                ],
                "self.orient": [
                    320,
                    1027,
                    1091,
                    1031,
                    649,
                    139,
                    748,
                    175,
                    176,
                    1009,
                    210,
                    212,
                    214,
                    823,
                    121,
                    220,
                    1053,
                    1022
                ],
                "self.date_format": [
                    122,
                    319,
                    143
                ],
                "self.double_precision": [
                    123,
                    140
                ],
                "self.ensure_ascii": [
                    124,
                    141
                ],
                "ensure_ascii": [
                    163,
                    195,
                    241,
                    339,
                    276,
                    124
                ],
                "self.date_unit": [
                    842,
                    142,
                    989,
                    657,
                    755,
                    125
                ],
                "self.default_handler": [
                    144,
                    126
                ],
                "self.index": [
                    321,
                    291,
                    234,
                    315,
                    189,
                    127
                ],
                "self.indent": [
                    128,
                    145
                ],
                "self.is_copy": [
                    130
                ],
                "self._format_axes": [
                    131
                ],
                "AbstractMethodError": [
                    884,
                    134,
                    999
                ],
                "self._write": [
                    137
                ],
                "iso_dates": [
                    197,
                    243,
                    341,
                    165
                ],
                "Writer": [
                    171,
                    203
                ],
                "_default_orient": [
                    1003,
                    204,
                    172,
                    1047,
                    250
                ],
                "self.obj.index.is_unique": [
                    210,
                    175
                ],
                "self.obj.index": [
                    210,
                    1138,
                    175
                ],
                "obj.values": [
                    190
                ],
                "_write": [
                    237,
                    335,
                    191
                ],
                "super": [
                    271,
                    237,
                    335,
                    191
                ],
                "self.obj.columns.is_unique": [
                    214
                ],
                "self.obj.columns": [
                    1139,
                    214
                ],
                "obj.to_dict": [
                    235
                ],
                "__init__": [
                    271
                ],
                "msg": [
                    304,
                    289,
                    284,
                    303
                ],
                "self.schema": [
                    291,
                    334
                ],
                "build_table_schema": [
                    291
                ],
                "obj.ndim": [
                    299,
                    294
                ],
                "obj.columns": [
                    301,
                    294
                ],
                "MultiIndex": [
                    294
                ],
                "set": [
                    1160,
                    850,
                    300
                ],
                "obj.index.names": [
                    300,
                    301
                ],
                "obj.index": [
                    300,
                    301,
                    788,
                    311,
                    312
                ],
                "len": [
                    1063,
                    937,
                    969,
                    301,
                    788,
                    789,
                    308
                ],
                "obj.copy": [
                    306
                ],
                "timedeltas": [
                    307,
                    308,
                    309
                ],
                "columns": [
                    307
                ],
                "obj.select_dtypes": [
                    307
                ],
                "applymap": [
                    309
                ],
                "x.isoformat": [
                    309
                ],
                "x": [
                    724,
                    309
                ],
                "is_period_dtype": [
                    311
                ],
                "obj.index.to_timestamp": [
                    312
                ],
                "obj.reset_index": [
                    316,
                    318
                ],
                "table_obj": [
                    336,
                    334
                ],
                "serialized": [
                    346,
                    335
                ],
                "dtype": [
                    577,
                    899,
                    582,
                    583,
                    902,
                    904,
                    746,
                    651,
                    905,
                    598,
                    825,
                    762,
                    763
                ],
                "convert_axes": [
                    579,
                    584,
                    585,
                    840,
                    652,
                    599
                ],
                "encoding": [
                    586,
                    587,
                    591,
                    658,
                    605
                ],
                "infer_compression": [
                    589
                ],
                "filepath_or_buffer": [
                    710,
                    616,
                    648,
                    590,
                    595,
                    698,
                    670,
                    703
                ],
                "_": [
                    709,
                    590
                ],
                "should_close": [
                    590,
                    615
                ],
                "get_filepath_or_buffer": [
                    590
                ],
                "json_reader": [
                    594,
                    612,
                    614
                ],
                "JsonReader": [
                    594
                ],
                "typ": [
                    745,
                    650,
                    597,
                    758,
                    761
                ],
                "convert_dates": [
                    1184,
                    1157,
                    1158,
                    1159,
                    1160,
                    841,
                    653,
                    909,
                    600
                ],
                "keep_default_dates": [
                    601,
                    843,
                    654
                ],
                "numpy": [
                    838,
                    655,
                    602,
                    859,
                    828,
                    858
                ],
                "precise_float": [
                    656,
                    603,
                    839
                ],
                "chunksize": [
                    611,
                    661,
                    607
                ],
                "result": [
                    932,
                    614,
                    1129,
                    618,
                    1130,
                    877,
                    910,
                    911,
                    880,
                    944,
                    914,
                    1039,
                    1042,
                    921,
                    954,
                    958
                ],
                "json_reader.read": [
                    614
                ],
                "filepath_or_buffer.close": [
                    616
                ],
                "deprecate_kwarg": [
                    349
                ],
                "abc.Iterator": [
                    621
                ],
                "abc": [
                    621
                ],
                "self.path_or_buf": [
                    648
                ],
                "self.typ": [
                    745,
                    650
                ],
                "self.dtype": [
                    900,
                    746,
                    651,
                    749,
                    825,
                    893,
                    895
                ],
                "self.convert_axes": [
                    840,
                    867,
                    652,
                    750
                ],
                "self.convert_dates": [
                    1157,
                    841,
                    653,
                    751,
                    1040,
                    1145
                ],
                "self.keep_default_dates": [
                    752,
                    1184,
                    843,
                    654
                ],
                "self.numpy": [
                    753,
                    858,
                    838,
                    655
                ],
                "self.precise_float": [
                    1061,
                    839,
                    1095,
                    1068,
                    1100,
                    1084,
                    1007,
                    656,
                    754,
                    1075,
                    1106,
                    1111,
                    1114,
                    1020
                ],
                "self.encoding": [
                    712,
                    658
                ],
                "self.compression": [
                    713,
                    659,
                    708
                ],
                "self.lines": [
                    667,
                    660,
                    733,
                    731
                ],
                "self.chunksize": [
                    681,
                    683,
                    782,
                    661,
                    665,
                    666,
                    731
                ],
                "self.nrows_seen": [
                    788,
                    789,
                    662
                ],
                "self.should_close": [
                    715,
                    775,
                    663
                ],
                "_validate_integer": [
                    666
                ],
                "data": [
                    1025,
                    1028,
                    1032,
                    905,
                    1034,
                    907,
                    910,
                    916,
                    920,
                    925,
                    670,
                    671,
                    927,
                    931,
                    681,
                    682,
                    683,
                    684,
                    937,
                    686,
                    941,
                    942,
                    943,
                    949,
                    953,
                    698,
                    701,
                    958,
                    709,
                    969,
                    970,
                    716,
                    972,
                    718,
                    975,
                    987,
                    734,
                    735,
                    996,
                    1007,
                    1010,
                    1014,
                    894
                ],
                "self._get_data_from_filepath": [
                    670
                ],
                "self.data": [
                    737,
                    782,
                    734,
                    671
                ],
                "self._preprocess_data": [
                    671
                ],
                "hasattr": [
                    681,
                    683
                ],
                "data.read": [
                    682
                ],
                "StringIO": [
                    684
                ],
                "exists": [
                    708,
                    700,
                    703
                ],
                "os.path.exists": [
                    703
                ],
                "os.path": [
                    703
                ],
                "os": [
                    703
                ],
                "TypeError": [
                    705,
                    933,
                    906,
                    976,
                    945,
                    922,
                    955
                ],
                "self.open_stream": [
                    777,
                    716
                ],
                "filter": [
                    724
                ],
                "map": [
                    724
                ],
                "x.strip": [
                    724
                ],
                "join": [
                    852,
                    725
                ],
                "concat": [
                    732
                ],
                "ensure_str": [
                    734
                ],
                "self._get_object_parser": [
                    737,
                    785,
                    735
                ],
                "self._combine_lines": [
                    784,
                    735
                ],
                "data.split": [
                    735
                ],
                "self.close": [
                    793,
                    738
                ],
                "kwargs": [
                    747,
                    763,
                    764,
                    759
                ],
                "parse": [
                    764,
                    759
                ],
                "FrameParser": [
                    759
                ],
                "SeriesParser": [
                    764
                ],
                "self.open_stream.close": [
                    777
                ],
                "IOError": [
                    778
                ],
                "AttributeError": [
                    778
                ],
                "list": [
                    782
                ],
                "islice": [
                    782
                ],
                "lines_json": [
                    784,
                    785
                ],
                "range": [
                    788
                ],
                "StopIteration": [
                    794
                ],
                "_STAMP_UNITS": [
                    799
                ],
                "_MIN_STAMPS": [
                    800
                ],
                "self.json": [
                    1025,
                    1090,
                    1007,
                    819,
                    1052
                ],
                "date_unit.lower": [
                    831
                ],
                "self._STAMP_UNITS": [
                    832,
                    833,
                    989
                ],
                "self.min_stamp": [
                    834,
                    836,
                    983
                ],
                "self._MIN_STAMPS": [
                    834,
                    836
                ],
                "bad_keys": [
                    850,
                    851,
                    852,
                    853
                ],
                "difference": [
                    850
                ],
                "decoded.keys": [
                    850
                ],
                "decoded": [
                    1028,
                    1029,
                    1030,
                    1098,
                    1067,
                    1070,
                    1071,
                    1072,
                    1102,
                    850,
                    1010,
                    1012,
                    1011,
                    1103
                ],
                "self._split_keys": [
                    850
                ],
                "self._parse_numpy": [
                    860
                ],
                "self._parse_no_numpy": [
                    863
                ],
                "self._convert_axes": [
                    868
                ],
                "self._try_convert_types": [
                    869
                ],
                "axis": [
                    881,
                    876,
                    878
                ],
                "self.obj._AXIS_NUMBERS.keys": [
                    876
                ],
                "self.obj._AXIS_NUMBERS": [
                    876
                ],
                "new_axis": [
                    881,
                    877
                ],
                "self._try_convert_data": [
                    1149,
                    877,
                    1039
                ],
                "self.obj._get_axis": [
                    878
                ],
                "setattr": [
                    881
                ],
                "use_dtypes": [
                    892
                ],
                "dict": [
                    900,
                    1126
                ],
                "self.dtype.get": [
                    900
                ],
                "name": [
                    900
                ],
                "np.dtype": [
                    904
                ],
                "np": [
                    904,
                    980
                ],
                "data.astype": [
                    931,
                    905,
                    941,
                    975,
                    920,
                    953
                ],
                "new_data": [
                    992,
                    995,
                    1129,
                    1131,
                    972,
                    941,
                    942,
                    910,
                    912,
                    943,
                    973,
                    975,
                    980,
                    982,
                    983,
                    984
                ],
                "self._try_convert_to_date": [
                    1182,
                    910
                ],
                "data.dtype": [
                    937,
                    916,
                    949,
                    925,
                    927
                ],
                "data.dtype.kind": [
                    925
                ],
                "all": [
                    942
                ],
                "new_data.dtype": [
                    980,
                    973
                ],
                "OverflowError": [
                    976,
                    993
                ],
                "issubclass": [
                    980
                ],
                "new_data.dtype.type": [
                    980
                ],
                "np.number": [
                    980
                ],
                "in_range": [
                    986,
                    981
                ],
                "isna": [
                    982
                ],
                "new_data.values": [
                    984,
                    982
                ],
                "iNaT": [
                    984
                ],
                "in_range.all": [
                    986
                ],
                "date_units": [
                    989,
                    990
                ],
                "to_datetime": [
                    992
                ],
                "Parser": [
                    1002,
                    1046
                ],
                "_split_keys": [
                    1048,
                    1004
                ],
                "k": [
                    1028,
                    1099,
                    1100,
                    1070,
                    1010
                ],
                "v": [
                    1028,
                    1099,
                    1100,
                    1070,
                    1010
                ],
                "data.items": [
                    1010,
                    1028
                ],
                "self.check_keys_split": [
                    1011,
                    1029,
                    1102,
                    1071
                ],
                "create_series_with_explicit_dtype": [
                    1030,
                    1032,
                    1034,
                    1012,
                    1014
                ],
                "object": [
                    1032,
                    1034,
                    1014
                ],
                "load_kwargs": [
                    1024,
                    1017,
                    1023
                ],
                "loads_": [
                    1024,
                    1025
                ],
                "functools.partial": [
                    1024
                ],
                "functools": [
                    1024
                ],
                "args": [
                    1056,
                    1065,
                    1064,
                    1063
                ],
                "T": [
                    1064
                ],
                "decoded.items": [
                    1070
                ],
                "items": [
                    1100
                ],
                "DataFrame.from_dict": [
                    1105
                ],
                "parse_table_schema": [
                    1111
                ],
                "filt": [
                    1128,
                    1122,
                    1123
                ],
                "needs_new_obj": [
                    1132,
                    1125,
                    1135
                ],
                "new_obj": [
                    1126,
                    1133,
                    1138,
                    1139,
                    1140
                ],
                "i": [
                    1133,
                    1127
                ],
                "col": [
                    1184,
                    1127,
                    1128,
                    1129,
                    1166,
                    1169,
                    1149
                ],
                "c": [
                    1127,
                    1128,
                    1129,
                    1131,
                    1133,
                    1149,
                    1182
                ],
                "enumerate": [
                    1127
                ],
                "self.obj.items": [
                    1127
                ],
                "f": [
                    1129
                ],
                "new_obj.columns": [
                    1139
                ],
                "self._try_convert_dates": [
                    1146
                ],
                "self._process_converter": [
                    1148,
                    1181
                ],
                "col_lower": [
                    1169,
                    1171,
                    1172,
                    1173,
                    1174,
                    1175,
                    1176
                ],
                "col.lower": [
                    1169
                ],
                "col_lower.endswith": [
                    1171,
                    1172
                ],
                "col_lower.startswith": [
                    1176
                ],
                "is_ok": [
                    1184
                ]
            },
            "filtered_variables_in_file": {
                "loads": [
                    32,
                    1024,
                    1056,
                    1095,
                    1067,
                    1100,
                    1007,
                    1106,
                    1075,
                    1079,
                    1114
                ],
                "json.loads": [
                    32
                ],
                "json": [
                    32,
                    33,
                    1057,
                    1090,
                    1095,
                    1068,
                    1052,
                    1100,
                    1106,
                    819,
                    1075,
                    1111,
                    759,
                    1080,
                    1114,
                    764
                ],
                "dumps": [
                    33,
                    159
                ],
                "json.dumps": [
                    33
                ],
                "TABLE_SCHEMA_VERSION": [
                    35
                ],
                "Optional": [
                    226,
                    261,
                    231,
                    42,
                    107,
                    47,
                    49,
                    113,
                    181,
                    151,
                    186,
                    156,
                    255
                ],
                "Callable": [
                    261,
                    231,
                    47,
                    113,
                    186,
                    156
                ],
                "Any": [
                    261,
                    231,
                    47,
                    113,
                    186,
                    156
                ],
                "JSONSerializable": [
                    261,
                    231,
                    47,
                    113,
                    186,
                    156
                ],
                "index": [
                    321,
                    84,
                    278,
                    54,
                    127
                ],
                "orient": [
                    649,
                    273,
                    1053,
                    1055,
                    161,
                    1066,
                    1073,
                    821,
                    54,
                    822,
                    823,
                    827,
                    60,
                    189,
                    63,
                    193,
                    577,
                    67,
                    579,
                    1091,
                    582,
                    1093,
                    584,
                    1097,
                    78,
                    1104,
                    337,
                    596,
                    1110,
                    234,
                    239,
                    118,
                    119,
                    121
                ],
                "path_or_buf": [
                    97,
                    100,
                    59,
                    589,
                    591,
                    91,
                    92
                ],
                "stringify_path": [
                    59
                ],
                "lines": [
                    782,
                    783,
                    784,
                    660,
                    724,
                    725,
                    88,
                    60,
                    606
                ],
                "obj": [
                    1039,
                    272,
                    785,
                    1043,
                    788,
                    789,
                    791,
                    160,
                    291,
                    294,
                    299,
                    300,
                    301,
                    306,
                    307,
                    309,
                    311,
                    312,
                    316,
                    190,
                    63,
                    64,
                    192,
                    318,
                    67,
                    69,
                    71,
                    77,
                    334,
                    732,
                    735,
                    737,
                    739,
                    235,
                    236,
                    238,
                    116,
                    757,
                    759,
                    761,
                    764,
                    766
                ],
                "Series": [
                    69,
                    63
                ],
                "obj.to_frame": [
                    64
                ],
                "obj.name": [
                    64,
                    300,
                    190
                ],
                "writer": [
                    66,
                    68,
                    70,
                    72,
                    76
                ],
                "Type": [
                    66
                ],
                "DataFrame": [
                    67,
                    1094,
                    71,
                    1065,
                    1103,
                    1072,
                    1105,
                    1074,
                    1138,
                    1078,
                    1113
                ],
                "JSONTableWriter": [
                    68
                ],
                "SeriesWriter": [
                    70
                ],
                "FrameWriter": [
                    72,
                    249
                ],
                "s": [
                    98,
                    100,
                    76,
                    89,
                    94
                ],
                "write": [
                    76
                ],
                "date_format": [
                    79,
                    274,
                    122,
                    283,
                    286
                ],
                "double_precision": [
                    194,
                    162,
                    80,
                    240,
                    338,
                    275,
                    123
                ],
                "force_ascii": [
                    81
                ],
                "date_unit": [
                    832,
                    992,
                    834,
                    196,
                    164,
                    842,
                    657,
                    242,
                    82,
                    340,
                    277,
                    990,
                    604,
                    125,
                    830,
                    831
                ],
                "default_handler": [
                    166,
                    198,
                    83,
                    244,
                    342,
                    279,
                    126
                ],
                "indent": [
                    128,
                    199,
                    167,
                    245,
                    85,
                    343,
                    280
                ],
                "convert_to_line_delimits": [
                    89
                ],
                "fh": [
                    96,
                    92,
                    94
                ],
                "handles": [
                    92
                ],
                "get_handle": [
                    92,
                    709
                ],
                "compression": [
                    608,
                    589,
                    590,
                    591,
                    659,
                    92
                ],
                "fh.write": [
                    94
                ],
                "fh.close": [
                    96
                ],
                "path_or_buf.write": [
                    100
                ],
                "self.obj": [
                    1153,
                    1030,
                    1032,
                    138,
                    1034,
                    1037,
                    1040,
                    1043,
                    1065,
                    175,
                    1072,
                    1074,
                    1078,
                    316,
                    318,
                    1094,
                    844,
                    1103,
                    1105,
                    210,
                    1143,
                    214,
                    1111,
                    1113,
                    865,
                    870,
                    1127,
                    876,
                    878,
                    881,
                    1138,
                    1139,
                    116,
                    1012,
                    1014,
                    1140
                ],
                "self": [
                    1025,
                    1027,
                    1029,
                    1030,
                    1031,
                    1032,
                    1034,
                    1037,
                    1039,
                    1040,
                    1043,
                    1052,
                    1053,
                    1061,
                    1065,
                    1068,
                    1071,
                    1072,
                    1074,
                    1075,
                    1078,
                    1084,
                    1090,
                    1091,
                    1094,
                    1095,
                    1100,
                    1102,
                    1103,
                    1105,
                    1106,
                    1111,
                    1113,
                    1114,
                    1127,
                    1138,
                    1139,
                    116,
                    1140,
                    119,
                    1143,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    1145,
                    130,
                    131,
                    1148,
                    1149,
                    134,
                    1146,
                    648,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    649,
                    650,
                    651,
                    652,
                    653,
                    654,
                    655,
                    656,
                    657,
                    658,
                    659,
                    660,
                    661,
                    662,
                    663,
                    665,
                    666,
                    667,
                    670,
                    671,
                    1181,
                    1182,
                    1184,
                    681,
                    1153,
                    683,
                    175,
                    176,
                    189,
                    1157,
                    708,
                    712,
                    713,
                    715,
                    716,
                    210,
                    212,
                    214,
                    731,
                    220,
                    732,
                    733,
                    734,
                    735,
                    737,
                    738,
                    745,
                    234,
                    746,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    755,
                    775,
                    777,
                    782,
                    784,
                    785,
                    788,
                    789,
                    793,
                    291,
                    819,
                    822,
                    823,
                    825,
                    315,
                    316,
                    318,
                    319,
                    320,
                    321,
                    832,
                    833,
                    834,
                    836,
                    838,
                    839,
                    840,
                    841,
                    842,
                    843,
                    844,
                    334,
                    850,
                    858,
                    860,
                    863,
                    865,
                    867,
                    868,
                    869,
                    870,
                    876,
                    877,
                    878,
                    881,
                    884,
                    893,
                    895,
                    900,
                    910,
                    983,
                    989,
                    999,
                    1007,
                    1009,
                    1011,
                    1012,
                    1014,
                    1020,
                    1022
                ],
                "self._default_orient": [
                    822,
                    119
                ],
                "self.orient": [
                    320,
                    1027,
                    1091,
                    1031,
                    649,
                    139,
                    748,
                    175,
                    176,
                    1009,
                    210,
                    212,
                    214,
                    823,
                    121,
                    220,
                    1053,
                    1022
                ],
                "self.date_format": [
                    122,
                    319,
                    143
                ],
                "self.double_precision": [
                    123,
                    140
                ],
                "self.ensure_ascii": [
                    124,
                    141
                ],
                "ensure_ascii": [
                    163,
                    195,
                    241,
                    339,
                    276,
                    124
                ],
                "self.date_unit": [
                    842,
                    142,
                    989,
                    657,
                    755,
                    125
                ],
                "self.default_handler": [
                    144,
                    126
                ],
                "self.index": [
                    321,
                    291,
                    234,
                    315,
                    189,
                    127
                ],
                "self.indent": [
                    128,
                    145
                ],
                "self.is_copy": [
                    130
                ],
                "self._format_axes": [
                    131
                ],
                "AbstractMethodError": [
                    884,
                    134,
                    999
                ],
                "self._write": [
                    137
                ],
                "iso_dates": [
                    197,
                    243,
                    341,
                    165
                ],
                "Writer": [
                    171,
                    203
                ],
                "_default_orient": [
                    1003,
                    204,
                    172,
                    1047,
                    250
                ],
                "self.obj.index.is_unique": [
                    210,
                    175
                ],
                "self.obj.index": [
                    210,
                    1138,
                    175
                ],
                "obj.values": [
                    190
                ],
                "_write": [
                    237,
                    335,
                    191
                ],
                "self.obj.columns.is_unique": [
                    214
                ],
                "self.obj.columns": [
                    1139,
                    214
                ],
                "obj.to_dict": [
                    235
                ],
                "__init__": [
                    271
                ],
                "msg": [
                    304,
                    289,
                    284,
                    303
                ],
                "self.schema": [
                    291,
                    334
                ],
                "build_table_schema": [
                    291
                ],
                "obj.ndim": [
                    299,
                    294
                ],
                "obj.columns": [
                    301,
                    294
                ],
                "MultiIndex": [
                    294
                ],
                "obj.index.names": [
                    300,
                    301
                ],
                "obj.index": [
                    300,
                    301,
                    788,
                    311,
                    312
                ],
                "obj.copy": [
                    306
                ],
                "timedeltas": [
                    307,
                    308,
                    309
                ],
                "columns": [
                    307
                ],
                "obj.select_dtypes": [
                    307
                ],
                "applymap": [
                    309
                ],
                "x.isoformat": [
                    309
                ],
                "x": [
                    724,
                    309
                ],
                "is_period_dtype": [
                    311
                ],
                "obj.index.to_timestamp": [
                    312
                ],
                "obj.reset_index": [
                    316,
                    318
                ],
                "table_obj": [
                    336,
                    334
                ],
                "serialized": [
                    346,
                    335
                ],
                "dtype": [
                    577,
                    899,
                    582,
                    583,
                    902,
                    904,
                    746,
                    651,
                    905,
                    598,
                    825,
                    762,
                    763
                ],
                "convert_axes": [
                    579,
                    584,
                    585,
                    840,
                    652,
                    599
                ],
                "encoding": [
                    586,
                    587,
                    591,
                    658,
                    605
                ],
                "infer_compression": [
                    589
                ],
                "filepath_or_buffer": [
                    710,
                    616,
                    648,
                    590,
                    595,
                    698,
                    670,
                    703
                ],
                "_": [
                    709,
                    590
                ],
                "should_close": [
                    590,
                    615
                ],
                "get_filepath_or_buffer": [
                    590
                ],
                "json_reader": [
                    594,
                    612,
                    614
                ],
                "JsonReader": [
                    594
                ],
                "typ": [
                    745,
                    650,
                    597,
                    758,
                    761
                ],
                "convert_dates": [
                    1184,
                    1157,
                    1158,
                    1159,
                    1160,
                    841,
                    653,
                    909,
                    600
                ],
                "keep_default_dates": [
                    601,
                    843,
                    654
                ],
                "numpy": [
                    838,
                    655,
                    602,
                    859,
                    828,
                    858
                ],
                "precise_float": [
                    656,
                    603,
                    839
                ],
                "chunksize": [
                    611,
                    661,
                    607
                ],
                "result": [
                    932,
                    614,
                    1129,
                    618,
                    1130,
                    877,
                    910,
                    911,
                    880,
                    944,
                    914,
                    1039,
                    1042,
                    921,
                    954,
                    958
                ],
                "json_reader.read": [
                    614
                ],
                "filepath_or_buffer.close": [
                    616
                ],
                "deprecate_kwarg": [
                    349
                ],
                "abc.Iterator": [
                    621
                ],
                "abc": [
                    621
                ],
                "self.path_or_buf": [
                    648
                ],
                "self.typ": [
                    745,
                    650
                ],
                "self.dtype": [
                    900,
                    746,
                    651,
                    749,
                    825,
                    893,
                    895
                ],
                "self.convert_axes": [
                    840,
                    867,
                    652,
                    750
                ],
                "self.convert_dates": [
                    1157,
                    841,
                    653,
                    751,
                    1040,
                    1145
                ],
                "self.keep_default_dates": [
                    752,
                    1184,
                    843,
                    654
                ],
                "self.numpy": [
                    753,
                    858,
                    838,
                    655
                ],
                "self.precise_float": [
                    1061,
                    839,
                    1095,
                    1068,
                    1100,
                    1084,
                    1007,
                    656,
                    754,
                    1075,
                    1106,
                    1111,
                    1114,
                    1020
                ],
                "self.encoding": [
                    712,
                    658
                ],
                "self.compression": [
                    713,
                    659,
                    708
                ],
                "self.lines": [
                    667,
                    660,
                    733,
                    731
                ],
                "self.chunksize": [
                    681,
                    683,
                    782,
                    661,
                    665,
                    666,
                    731
                ],
                "self.nrows_seen": [
                    788,
                    789,
                    662
                ],
                "self.should_close": [
                    715,
                    775,
                    663
                ],
                "_validate_integer": [
                    666
                ],
                "data": [
                    1025,
                    1028,
                    1032,
                    905,
                    1034,
                    907,
                    910,
                    916,
                    920,
                    925,
                    670,
                    671,
                    927,
                    931,
                    681,
                    682,
                    683,
                    684,
                    937,
                    686,
                    941,
                    942,
                    943,
                    949,
                    953,
                    698,
                    701,
                    958,
                    709,
                    969,
                    970,
                    716,
                    972,
                    718,
                    975,
                    987,
                    734,
                    735,
                    996,
                    1007,
                    1010,
                    1014,
                    894
                ],
                "self._get_data_from_filepath": [
                    670
                ],
                "self.data": [
                    737,
                    782,
                    734,
                    671
                ],
                "self._preprocess_data": [
                    671
                ],
                "data.read": [
                    682
                ],
                "StringIO": [
                    684
                ],
                "exists": [
                    708,
                    700,
                    703
                ],
                "os.path.exists": [
                    703
                ],
                "os.path": [
                    703
                ],
                "os": [
                    703
                ],
                "self.open_stream": [
                    777,
                    716
                ],
                "x.strip": [
                    724
                ],
                "join": [
                    852,
                    725
                ],
                "concat": [
                    732
                ],
                "ensure_str": [
                    734
                ],
                "self._get_object_parser": [
                    737,
                    785,
                    735
                ],
                "self._combine_lines": [
                    784,
                    735
                ],
                "data.split": [
                    735
                ],
                "self.close": [
                    793,
                    738
                ],
                "kwargs": [
                    747,
                    763,
                    764,
                    759
                ],
                "parse": [
                    764,
                    759
                ],
                "FrameParser": [
                    759
                ],
                "SeriesParser": [
                    764
                ],
                "self.open_stream.close": [
                    777
                ],
                "islice": [
                    782
                ],
                "lines_json": [
                    784,
                    785
                ],
                "_STAMP_UNITS": [
                    799
                ],
                "_MIN_STAMPS": [
                    800
                ],
                "self.json": [
                    1025,
                    1090,
                    1007,
                    819,
                    1052
                ],
                "date_unit.lower": [
                    831
                ],
                "self._STAMP_UNITS": [
                    832,
                    833,
                    989
                ],
                "self.min_stamp": [
                    834,
                    836,
                    983
                ],
                "self._MIN_STAMPS": [
                    834,
                    836
                ],
                "bad_keys": [
                    850,
                    851,
                    852,
                    853
                ],
                "difference": [
                    850
                ],
                "decoded.keys": [
                    850
                ],
                "decoded": [
                    1028,
                    1029,
                    1030,
                    1098,
                    1067,
                    1070,
                    1071,
                    1072,
                    1102,
                    850,
                    1010,
                    1012,
                    1011,
                    1103
                ],
                "self._split_keys": [
                    850
                ],
                "self._parse_numpy": [
                    860
                ],
                "self._parse_no_numpy": [
                    863
                ],
                "self._convert_axes": [
                    868
                ],
                "self._try_convert_types": [
                    869
                ],
                "axis": [
                    881,
                    876,
                    878
                ],
                "self.obj._AXIS_NUMBERS.keys": [
                    876
                ],
                "self.obj._AXIS_NUMBERS": [
                    876
                ],
                "new_axis": [
                    881,
                    877
                ],
                "self._try_convert_data": [
                    1149,
                    877,
                    1039
                ],
                "self.obj._get_axis": [
                    878
                ],
                "use_dtypes": [
                    892
                ],
                "self.dtype.get": [
                    900
                ],
                "name": [
                    900
                ],
                "np.dtype": [
                    904
                ],
                "np": [
                    904,
                    980
                ],
                "data.astype": [
                    931,
                    905,
                    941,
                    975,
                    920,
                    953
                ],
                "new_data": [
                    992,
                    995,
                    1129,
                    1131,
                    972,
                    941,
                    942,
                    910,
                    912,
                    943,
                    973,
                    975,
                    980,
                    982,
                    983,
                    984
                ],
                "self._try_convert_to_date": [
                    1182,
                    910
                ],
                "data.dtype": [
                    937,
                    916,
                    949,
                    925,
                    927
                ],
                "data.dtype.kind": [
                    925
                ],
                "new_data.dtype": [
                    980,
                    973
                ],
                "new_data.dtype.type": [
                    980
                ],
                "np.number": [
                    980
                ],
                "in_range": [
                    986,
                    981
                ],
                "isna": [
                    982
                ],
                "new_data.values": [
                    984,
                    982
                ],
                "iNaT": [
                    984
                ],
                "in_range.all": [
                    986
                ],
                "date_units": [
                    989,
                    990
                ],
                "to_datetime": [
                    992
                ],
                "Parser": [
                    1002,
                    1046
                ],
                "_split_keys": [
                    1048,
                    1004
                ],
                "k": [
                    1028,
                    1099,
                    1100,
                    1070,
                    1010
                ],
                "v": [
                    1028,
                    1099,
                    1100,
                    1070,
                    1010
                ],
                "data.items": [
                    1010,
                    1028
                ],
                "self.check_keys_split": [
                    1011,
                    1029,
                    1102,
                    1071
                ],
                "create_series_with_explicit_dtype": [
                    1030,
                    1032,
                    1034,
                    1012,
                    1014
                ],
                "load_kwargs": [
                    1024,
                    1017,
                    1023
                ],
                "loads_": [
                    1024,
                    1025
                ],
                "functools.partial": [
                    1024
                ],
                "functools": [
                    1024
                ],
                "args": [
                    1056,
                    1065,
                    1064,
                    1063
                ],
                "T": [
                    1064
                ],
                "decoded.items": [
                    1070
                ],
                "items": [
                    1100
                ],
                "DataFrame.from_dict": [
                    1105
                ],
                "parse_table_schema": [
                    1111
                ],
                "filt": [
                    1128,
                    1122,
                    1123
                ],
                "needs_new_obj": [
                    1132,
                    1125,
                    1135
                ],
                "new_obj": [
                    1126,
                    1133,
                    1138,
                    1139,
                    1140
                ],
                "i": [
                    1133,
                    1127
                ],
                "col": [
                    1184,
                    1127,
                    1128,
                    1129,
                    1166,
                    1169,
                    1149
                ],
                "c": [
                    1127,
                    1128,
                    1129,
                    1131,
                    1133,
                    1149,
                    1182
                ],
                "self.obj.items": [
                    1127
                ],
                "f": [
                    1129
                ],
                "new_obj.columns": [
                    1139
                ],
                "self._try_convert_dates": [
                    1146
                ],
                "self._process_converter": [
                    1148,
                    1181
                ],
                "col_lower": [
                    1169,
                    1171,
                    1172,
                    1173,
                    1174,
                    1175,
                    1176
                ],
                "col.lower": [
                    1169
                ],
                "col_lower.endswith": [
                    1171,
                    1172
                ],
                "col_lower.startswith": [
                    1176
                ],
                "is_ok": [
                    1184
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_76/pandas/tests/io/json/test_pandas.py",
                "test_function": "test_frame_int_overflow",
                "test_function_code": "    def test_frame_int_overflow(self):\n        # GH 30320\n        encoded_json = json.dumps([{\"col\": \"31900441201190696999\"}, {\"col\": \"Text\"}])\n        expected = DataFrame({\"col\": [\"31900441201190696999\", \"Text\"]})\n        result = read_json(encoded_json)\n        tm.assert_frame_equal(result, expected)",
                "test_error": "OverflowError: Python int too large to convert to C long",
                "full_test_error": "self = <pandas.tests.io.json.test_pandas.TestPandasContainer object at 0x115c58e50>\n\n    def test_frame_int_overflow(self):\n        # GH 30320\n        encoded_json = json.dumps([{\"col\": \"31900441201190696999\"}, {\"col\": \"Text\"}])\n        expected = DataFrame({\"col\": [\"31900441201190696999\", \"Text\"]})\n>       result = read_json(encoded_json)\n\npandas/tests/io/json/test_pandas.py:1648: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/util/_decorators.py:214: in wrapper\n    return func(*args, **kwargs)\npandas/io/json/_json.py:614: in read_json\n    result = json_reader.read()\npandas/io/json/_json.py:737: in read\n    obj = self._get_object_parser(self.data)\npandas/io/json/_json.py:759: in _get_object_parser\n    obj = FrameParser(json, **kwargs).parse()\npandas/io/json/_json.py:869: in parse\n    self._try_convert_types()\npandas/io/json/_json.py:1148: in _try_convert_types\n    self._process_converter(\npandas/io/json/_json.py:1129: in _process_converter\n    new_data, result = f(col, c)\npandas/io/json/_json.py:1149: in <lambda>\n    lambda col, c: self._try_convert_data(col, c, convert_dates=False)\npandas/io/json/_json.py:941: in _try_convert_data\n    new_data = data.astype(\"int64\")\npandas/core/generic.py:5510: in astype\n    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:559: in astype\n    return self.apply(\"astype\", dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:419: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:629: in astype\n    values = astype_nansafe(vals1d, dtype, copy=True)\npandas/core/dtypes/cast.py:874: in astype_nansafe\n    return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   result[i] = val\nE   OverflowError: Python int too large to convert to C long\n\npandas/_libs/lib.pyx:560: OverflowError",
                "traceback": "pandas/util/_decorators.py:214: in wrapper\n    return func(*args, **kwargs)\npandas/io/json/_json.py:614: in read_json\n    result = json_reader.read()\npandas/io/json/_json.py:737: in read\n    obj = self._get_object_parser(self.data)\npandas/io/json/_json.py:759: in _get_object_parser\n    obj = FrameParser(json, **kwargs).parse()\npandas/io/json/_json.py:869: in parse\n    self._try_convert_types()\npandas/io/json/_json.py:1148: in _try_convert_types\n    self._process_converter(\npandas/io/json/_json.py:1129: in _process_converter\n    new_data, result = f(col, c)\npandas/io/json/_json.py:1149: in <lambda>\n    lambda col, c: self._try_convert_data(col, c, convert_dates=False)\npandas/io/json/_json.py:941: in _try_convert_data\n    new_data = data.astype(\"int64\")\npandas/core/generic.py:5510: in astype\n    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:559: in astype\n    return self.apply(\"astype\", dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:419: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:629: in astype\n    values = astype_nansafe(vals1d, dtype, copy=True)\npandas/core/dtypes/cast.py:874: in astype_nansafe\n    return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   result[i] = val\nE   OverflowError: Python int too large to convert to C long\n\npandas/_libs/lib.pyx:560: OverflowError",
                "test_function_decorators": []
            }
        ]
    }
}