{
    "pandas": [
        {
            "bugID": 76,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 886,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_data(self, name, data, use_dtypes=True, convert_dates=True):\n    import numpy as np\n    if use_dtypes:\n        if isinstance(self.dtype, dict):\n            dtype = self.dtype.get(name)\n        else:\n            dtype = self.dtype\n        \n        if dtype is not None:\n            try:\n                dtype = np.dtype(dtype)\n                return data.astype(dtype), True\n            except (TypeError, ValueError):\n                pass\n    \n    if convert_dates:\n        new_data, result = self._try_convert_to_date(data)\n        if result:\n            return new_data, True\n    \n    if data.dtype == \"object\":\n        try:\n            data = data.astype(\"float64\")\n            return data, True\n        except (TypeError, ValueError):\n            pass\n    \n    if data.dtype.kind == \"f\":\n        if data.dtype != \"float64\":\n            try:\n                data = data.astype(\"float64\")\n                return data, True\n            except (TypeError, ValueError):\n                pass\n    \n    if len(data) and (data.dtype == \"float\" or data.dtype == \"object\"):\n        try:\n            new_data = data.astype(\"int64\")\n            if (new_data == data).all():\n                return new_data, True\n        except (TypeError, ValueError):\n            pass\n    \n    if data.dtype == \"int\":\n        try:\n            data = data.astype(\"int64\")\n            return data, True\n        except (TypeError, ValueError):\n            pass\n    \n    return data, False"
        }
    ]
}