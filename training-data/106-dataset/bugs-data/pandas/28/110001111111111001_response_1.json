{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2273,
            "file_name": "core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    from pandas import Series, DataFrame, Index\n    from pandas import Series, DataFrame, Index\n    \n    if isinstance(others, Series):\n        return [others]\n    elif isinstance(others, Index):\n        return [Series(others._values, index=others)]\n    elif isinstance(others, DataFrame):\n        return [others[x] for x in others]\n    elif isinstance(others, np.ndarray) and others.ndim == 2:\n        others = DataFrame(others, index=self._orig.index)\n        return [others[x] for x in others]\n    elif isinstance(others, (list, tuple)):\n        others = list(others)  # ensure iterators do not get read twice etc\n        los = []\n        for x in others:\n            if isinstance(x, (Series, Index)) or (isinstance(x, np.ndarray) and x.ndim == 1):\n                los.append(x)\n            elif isinstance(x, str):\n                los.append(Series(others, index=self._orig.index))\n            else:\n                raise TypeError(\"Invalid type in the input list\")\n        return los\n    else:\n        raise TypeError(\"Invalid type for others\")"
        }
    ]
}