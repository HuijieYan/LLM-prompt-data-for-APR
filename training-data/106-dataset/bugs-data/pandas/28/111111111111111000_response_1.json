{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 2273,
            "file_name": "core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    from pandas import Series, DataFrame, Index\n    import numpy as np\n    \"\"\"\n    Auxiliary function for :meth:`str.cat`. Turn potentially mixed input\n    into a list of Series (elements without an index must match the length\n    of the calling Series/Index).\n    \n    Parameters\n    ----------\n    others : Series, DataFrame, np.ndarray, list-like or list-like of\n        Objects that are either Series, Index or np.ndarray (1-dim).\n    \n    Returns\n    -------\n    list of Series\n        Others transformed into list of Series.\n    \"\"\"\n    from pandas import Series, DataFrame, Index\n    import numpy as np\n    \n    # self._orig is either Series or Index\n    idx = self._orig if isinstance(self._orig, Index) else self._orig.index\n    \n    # Ensure `others` are always a list\n    if not isinstance(others, (list, np.ndarray)):\n        others = [others]\n    \n    result = []\n    \n    for other in others:\n        if isinstance(other, Series):\n            result.append(other)\n        elif isinstance(other, Index):\n            result.append(Series(other._values, index=other))\n        elif isinstance(other, DataFrame):\n            for col in other:\n                result.append(other[col])\n        elif isinstance(other, np.ndarray) and other.ndim == 1:\n            result.append(DataFrame(other, index=idx).iloc[:, 0])\n        elif is_list_like(other, allow_sets=False):\n    \n            if all(isinstance(x, (Series, Index)) or (isinstance(x, np.ndarray) and x.ndim == 1) for x in other):\n                result.extend(self._get_series_list(other))\n            elif all(not is_list_like(x) for x in other):\n                result.append(Series(other, index=idx))\n            else:\n                raise TypeError(\"all elements of 'others' must be either Series, Index, DataFrame or np.ndarray (1-dim)\")\n        else:\n            raise TypeError(\"all elements of 'others' must be either Series, Index, DataFrame or np.ndarray (1-dim)\")\n    \n    return result"
        }
    ]
}