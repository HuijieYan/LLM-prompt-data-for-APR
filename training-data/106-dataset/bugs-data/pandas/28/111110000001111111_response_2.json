{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2273,
            "file_name": "pandas/core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    from pandas import Series, DataFrame\n    from pandas import Series, DataFrame\n    \n    # self._orig is either Series or Index\n    idx = self._orig if isinstance(self._orig, ABCIndexClass) else self._orig.index\n    \n    if isinstance(others, ABCSeries):\n        return [others]\n    elif isinstance(others, ABCIndexClass):\n        return [Series(others, index=idx)]\n    elif isinstance(others, ABCDataFrame):\n        return [others[x] for x in others]\n    elif isinstance(others, np.ndarray) and others.ndim == 1:\n        return [Series(others, index=idx)]\n    elif is_list_like(others, allow_sets=False):\n        others = list(others)\n    \n        # handle other list-like input data types\n        los = []\n        for x in others:\n            if isinstance(x, (ABCSeries, ABCIndexClass)):\n                los.append(Series(x, index=idx))\n            elif isinstance(x, np.ndarray) and x.ndim == 1:\n                los.append(Series(x, index=idx))\n            elif isinstance(x, str):\n                los.append(Series(x, index=idx))\n        return los\n    \n    raise TypeError(\n        \"others must be Series, Index, DataFrame, np.ndarray or list-like \"\n        \"(either containing only strings or containing only objects of type Series/Index/np.ndarray[1-dim])\"\n    )"
        }
    ]
}