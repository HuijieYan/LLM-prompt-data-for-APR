{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2273,
            "file_name": "pandas/core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    from pandas import Series, DataFrame\n    from pandas import Series, DataFrame\n    \n    if isinstance(others, Series):  # Handle as Series\n        return [others]\n    elif isinstance(others, Index):  # Handle as Index\n        return [Series(others._values, index=others)]\n    elif isinstance(others, DataFrame):  # Handle as DataFrame\n        return [others[x] for x in others]\n    elif isinstance(others, np.ndarray) and others.ndim == 2:  # Handle as 2D ndarray\n        others = DataFrame(others, index=self._orig.index)\n        return [others[x] for x in others]\n    elif isinstance(others, (list, tuple, np.ndarray)) and all(isinstance(x, (Series, Index)) or (isinstance(x, np.ndarray) and x.ndim == 1) for x in others):  # Handle as list-like\n        los = []\n        for item in others:\n            los += self._get_series_list(item)\n        return los\n    elif isinstance(others, (list, tuple)) and all(not isinstance(x, (list, tuple)) for x in others):  # Handle as list-like containing only strings\n        return [Series(others, index=self._orig.index)]\n    else:\n        raise TypeError(\"others must be Series, Index, DataFrame, np.ndarrary or list-like (either containing only strings or containing only objects of type Series/Index/np.ndarray[1-dim])\")"
        }
    ]
}