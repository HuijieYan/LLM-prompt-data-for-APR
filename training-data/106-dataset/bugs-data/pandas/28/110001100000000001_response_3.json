{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2273,
            "file_name": "pandas/core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    from pandas import Series, DataFrame\n    from pandas import Series, DataFrame\n    # base case - if others is a Series, return it in a list\n    if isinstance(others, ABCSeries):\n        return [others]\n    # if others is an Index, convert it to a Series and return it in a list\n    elif isinstance(others, ABCIndexClass):\n        return [Series(others._values, index=others)]\n    # if others is a DataFrame, return its columns as a list of Series\n    elif isinstance(others, ABCDataFrame):\n        return [others[x] for x in others]\n    # if others is a 2D numpy array, convert it to a DataFrame and return its columns as a list of Series\n    elif isinstance(others, np.ndarray) and others.ndim == 2:\n        others = DataFrame(others, index=self._orig.index)\n        return [others[x] for x in others]\n    # if others is a list-like object\n    elif is_list_like(others, allow_sets=False):\n        others = list(others)  # ensure iterators do not get read twice etc\n        los = []\n        # iterate through list and append each element\n        for x in others:\n            if isinstance(x, (ABCSeries, ABCIndexClass)) or (isinstance(x, np.ndarray) and x.ndim == 1):\n                los.append(x)\n            elif not is_list_like(x):  # just strings\n                los.append(Series(x, index=self._orig.index))\n            else:\n                raise TypeError(\"Invalid type in the list 'others'\")\n        return los\n    else:\n        raise TypeError(\n            \"others must be Series, Index, DataFrame, np.ndarray or list-like \"\n            \"(containing only strings or objects of type Series/Index/np.ndarray[1-dim])\"\n        )"
        }
    ]
}