{
    "1.1.1": "def append(self, to_append, ignore_index=False, verify_integrity=False):\n    \n    from pandas.core.reshape.concat import concat\n\n    if isinstance(to_append, (list, tuple)):\n        to_concat = [self] + to_append\n    else:\n        to_concat = [self, to_append]\n    return concat(\n        to_concat, ignore_index=ignore_index, verify_integrity=verify_integrity\n    )\n",
    "1.1.2": "Concatenate two or more Series.\n\nParameters\n----------\nto_append : Series or list/tuple of Series\n    Series to append with self.\nignore_index : bool, default False\n    If True, do not use the index labels.\nverify_integrity : bool, default False\n    If True, raise Exception on creating index with duplicates.\n\nReturns\n-------\nSeries\n    Concatenated Series.\n\nSee Also\n--------\nconcat : General function to concatenate DataFrame or Series objects.\n\nNotes\n-----\nIteratively appending to a Series can be more computationally intensive\nthan a single concatenate. A better solution is to append values to a\nlist and then concatenate the list with the original Series all at\nonce.\n\nExamples\n--------\n>>> s1 = pd.Series([1, 2, 3])\n>>> s2 = pd.Series([4, 5, 6])\n>>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])\n>>> s1.append(s2)\n0    1\n1    2\n2    3\n0    4\n1    5\n2    6\ndtype: int64\n\n>>> s1.append(s3)\n0    1\n1    2\n2    3\n3    4\n4    5\n5    6\ndtype: int64\n\nWith `ignore_index` set to True:\n\n>>> s1.append(s2, ignore_index=True)\n0    1\n1    2\n2    3\n3    4\n4    5\n5    6\ndtype: int64\n\nWith `verify_integrity` set to True:\n\n>>> s1.append(s2, verify_integrity=True)\nTraceback (most recent call last):\n...\nValueError: Indexes have overlapping values: [0, 1, 2]",
    "1.2.1": "class Series(base.IndexOpsMixin, generic.NDFrame)",
    "1.2.2": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, *, **) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, argument order is maintained for Python 3.6\n       and later.\n\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index\n    sequence are used, the index will override the keys found in the\n    dict.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\ncopy : bool, default False\n    Copy input data.",
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_152/pandas/core/series.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_append_tuples(self):\n        # GH 28410\n        s = pd.Series([1, 2, 3])\n        list_input = [s, s]\n        tuple_input = (s, s)\n\n        expected = s.append(list_input)\n        result = s.append(tuple_input)\n\n        tm.assert_series_equal(expected, result)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_152/pandas/tests/series/test_combine_concat.py"
    ],
    "2.1.1": [
        [
            "E           TypeError: can only concatenate list (not \"tuple\") to list"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.series.test_combine_concat.TestSeriesCombine object at 0x1231044c0>\n\n    def test_append_tuples(self):\n        # GH 28410\n        s = pd.Series([1, 2, 3])\n        list_input = [s, s]\n        tuple_input = (s, s)\n    \n        expected = s.append(list_input)\n>       result = s.append(tuple_input)\n\npandas/tests/series/test_combine_concat.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = 0    1\n1    2\n2    3\ndtype: int64\nto_append = (0    1\n1    2\n2    3\ndtype: int64, 0    1\n1    2\n2    3\ndtype: int64)\nignore_index = False, verify_integrity = False\n\n    def append(self, to_append, ignore_index=False, verify_integrity=False):\n        \"\"\"\n        Concatenate two or more Series.\n    \n        Parameters\n        ----------\n        to_append : Series or list/tuple of Series\n            Series to append with self.\n        ignore_index : bool, default False\n            If True, do not use the index labels.\n        verify_integrity : bool, default False\n            If True, raise Exception on creating index with duplicates.\n    \n        Returns\n        -------\n        Series\n            Concatenated Series.\n    \n        See Also\n        --------\n        concat : General function to concatenate DataFrame or Series objects.\n    \n        Notes\n        -----\n        Iteratively appending to a Series can be more computationally intensive\n        than a single concatenate. A better solution is to append values to a\n        list and then concatenate the list with the original Series all at\n        once.\n    \n        Examples\n        --------\n        >>> s1 = pd.Series([1, 2, 3])\n        >>> s2 = pd.Series([4, 5, 6])\n        >>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])\n        >>> s1.append(s2)\n        0    1\n        1    2\n        2    3\n        0    4\n        1    5\n        2    6\n        dtype: int64\n    \n        >>> s1.append(s3)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n    \n        With `ignore_index` set to True:\n    \n        >>> s1.append(s2, ignore_index=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n    \n        With `verify_integrity` set to True:\n    \n        >>> s1.append(s2, verify_integrity=True)\n        Traceback (most recent call last):\n        ...\n        ValueError: Indexes have overlapping values: [0, 1, 2]\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n    \n        if isinstance(to_append, (list, tuple)):\n>           to_concat = [self] + to_append",
            "\npandas/core/series.py:2733: TypeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "Series.append raises TypeError with tuple of Series\n"
    ],
    "3.1.2": [
        "mypy error:\n\npandas\\core\\series.py:2733:25: error: Unsupported operand types for + (\"List[Any]\" and \"Tuple[Any, ...]\")\npandas\\core\\series.py:2733:25: note: Right operand is of type \"Union[List[Any], Tuple[Any, ...]]\"\nCode Sample, a copy-pastable example if possible\n>>> import pandas as pd\n>>> pd.__version__\n'0.25.0+332.g261c3a667'\n>>>\n>>> ser = pd.Series([1,2,3])\n>>>\n>>> ser\n0    1\n1    2\n2    3\ndtype: int64\n>>>\n>>> ser.append(ser)\n0    1\n1    2\n2    3\n0    1\n1    2\n2    3\ndtype: int64\n>>>\n>>> ser.append([ser,ser])\n0    1\n1    2\n2    3\n0    1\n1    2\n2    3\n0    1\n1    2\n2    3\ndtype: int64\n>>>\n>>> ser.append((ser,ser))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Users\\simon\\OneDrive\\code\\pandas-simonjayhawkins\\pandas\\core\\series.py\", line 2733, in append\n    to_concat = [self] + to_append\nTypeError: can only concatenate list (not \"tuple\") to list\nProblem description\nThe docstring for Series.append states to_append : Series or list/tuple of Series. Appending a tuple of Series raises TypeError: can only concatenate list (not \"tuple\") to list\n"
    ]
}