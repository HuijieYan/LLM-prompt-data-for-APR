{
    "pandas:74": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_74/pandas/core/indexes/timedeltas.py": {
            "buggy_functions": [
                {
                    "function_name": "__new__",
                    "function_code": "def __new__(\n    cls,\n    data=None,\n    unit=None,\n    freq=None,\n    closed=None,\n    dtype=_TD_DTYPE,\n    copy=False,\n    name=None,\n):\n    name = maybe_extract_name(name, data, cls)\n\n    if is_scalar(data):\n        raise TypeError(\n            f\"{cls.__name__}() must be called with a \"\n            f\"collection of some kind, {repr(data)} was passed\"\n        )\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not \"\n            \"represent unambiguous timedelta values durations.\"\n        )\n\n    if isinstance(data, TimedeltaArray):\n        if copy:\n            data = data.copy()\n        return cls._simple_new(data, name=name, freq=freq)\n\n    if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n        if copy:\n            return data.copy()\n        else:\n            return data._shallow_copy()\n\n    # - Cases checked above all return/raise before reaching here - #\n\n    tdarr = TimedeltaArray._from_sequence(\n        data, freq=freq, unit=unit, dtype=dtype, copy=copy\n    )\n    return cls._simple_new(tdarr, name=name)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 142,
                    "variables": {
                        "_TD_DTYPE": [
                            148
                        ],
                        "name": [
                            152,
                            169,
                            171,
                            182
                        ],
                        "maybe_extract_name": [
                            152
                        ],
                        "data": [
                            166,
                            168,
                            169,
                            171,
                            173,
                            175,
                            180,
                            152,
                            154,
                            157
                        ],
                        "cls": [
                            152,
                            169,
                            156,
                            182
                        ],
                        "is_scalar": [
                            154
                        ],
                        "TypeError": [
                            155
                        ],
                        "cls.__name__": [
                            156
                        ],
                        "repr": [
                            157
                        ],
                        "unit": [
                            160,
                            180
                        ],
                        "ValueError": [
                            161
                        ],
                        "isinstance": [
                            171,
                            166
                        ],
                        "TimedeltaArray": [
                            179,
                            166
                        ],
                        "copy": [
                            180,
                            172,
                            167
                        ],
                        "data.copy": [
                            168,
                            173
                        ],
                        "cls._simple_new": [
                            169,
                            182
                        ],
                        "freq": [
                            169,
                            171,
                            180
                        ],
                        "TimedeltaIndex": [
                            171
                        ],
                        "data._shallow_copy": [
                            175
                        ],
                        "tdarr": [
                            179,
                            182
                        ],
                        "TimedeltaArray._from_sequence": [
                            179
                        ],
                        "dtype": [
                            180
                        ]
                    },
                    "filtered_variables": {
                        "_TD_DTYPE": [
                            148
                        ],
                        "name": [
                            152,
                            169,
                            171,
                            182
                        ],
                        "maybe_extract_name": [
                            152
                        ],
                        "data": [
                            166,
                            168,
                            169,
                            171,
                            173,
                            175,
                            180,
                            152,
                            154,
                            157
                        ],
                        "cls": [
                            152,
                            169,
                            156,
                            182
                        ],
                        "is_scalar": [
                            154
                        ],
                        "cls.__name__": [
                            156
                        ],
                        "unit": [
                            160,
                            180
                        ],
                        "TimedeltaArray": [
                            179,
                            166
                        ],
                        "copy": [
                            180,
                            172,
                            167
                        ],
                        "data.copy": [
                            168,
                            173
                        ],
                        "cls._simple_new": [
                            169,
                            182
                        ],
                        "freq": [
                            169,
                            171,
                            180
                        ],
                        "TimedeltaIndex": [
                            171
                        ],
                        "data._shallow_copy": [
                            175
                        ],
                        "tdarr": [
                            179,
                            182
                        ],
                        "TimedeltaArray._from_sequence": [
                            179
                        ],
                        "dtype": [
                            180
                        ]
                    },
                    "diff_line_number": 166,
                    "class_data": {
                        "signature": "class TimedeltaIndex(DatetimeTimedeltaMixin, dtl.TimelikeOps, TimedeltaDelegateMixin)",
                        "docstring": "Immutable ndarray of timedelta64 data, represented internally as int64, and\nwhich can be boxed to timedelta objects.\n\nParameters\n----------\ndata  : array-like (1-dimensional), optional\n    Optional timedelta-like data to construct index with.\nunit : unit of the arg (D,h,m,s,ms,us,ns) denote the unit, optional\n    Which is an integer/float number.\nfreq : str or pandas offset object, optional\n    One of pandas date offset strings or corresponding objects. The string\n    'infer' can be passed in order to set the frequency of the index as the\n    inferred frequency upon creation.\ncopy  : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\n\nAttributes\n----------\ndays\nseconds\nmicroseconds\nnanoseconds\ncomponents\ninferred_freq\n\nMethods\n-------\nto_pytimedelta\nto_series\nround\nfloor\nceil\nto_frame\nmean\n\nSee Also\n--------\nIndex : The base pandas Index type.\nTimedelta : Represents a duration between two dates or times.\nDatetimeIndex : Index of datetime64 data.\nPeriodIndex : Index of Period data.\ntimedelta_range : Create a fixed-frequency TimedeltaIndex.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None):\n    name = maybe_extract_name(name, data, cls)\n    if is_scalar(data):\n        raise TypeError(f'{cls.__name__}() must be called with a collection of some kind, {repr(data)} was passed')\n    if unit in {'Y', 'y', 'M'}:\n        raise ValueError(\"Units 'M' and 'Y' are no longer supported, as they do not represent unambiguous timedelta values durations.\")\n    if isinstance(data, TimedeltaArray):\n        if copy:\n            data = data.copy()\n        return cls._simple_new(data, name=name, freq=freq)\n    if isinstance(data, TimedeltaIndex) and freq is None and (name is None):\n        if copy:\n            return data.copy()\n        else:\n            return data._shallow_copy()\n    tdarr = TimedeltaArray._from_sequence(data, freq=freq, unit=unit, dtype=dtype, copy=copy)\n    return cls._simple_new(tdarr, name=name)",
                            "@classmethod\ndef _simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE):\n    if not isinstance(values, TimedeltaArray):\n        values = TimedeltaArray._simple_new(values, dtype=dtype, freq=freq)\n    elif freq is None:\n        freq = values.freq\n    assert isinstance(values, TimedeltaArray), type(values)\n    assert dtype == _TD_DTYPE, dtype\n    assert values.dtype == 'm8[ns]', values.dtype\n    tdarr = TimedeltaArray._simple_new(values._data, freq=freq)\n    result = object.__new__(cls)\n    result._data = tdarr\n    result._name = name\n    result._index_data = tdarr._data\n    result._reset_identity()\n    return result",
                            "@property\ndef _formatter_func(self):\n    from pandas.io.formats.format import _get_format_timedelta64\n    return _get_format_timedelta64(self, box=True)",
                            "@Appender(_index_shared_docs['astype'])\ndef astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if is_timedelta64_dtype(dtype) and (not is_timedelta64_ns_dtype(dtype)):\n        result = self._data.astype(dtype, copy=copy)\n        if self.hasnans:\n            return Index(result, name=self.name)\n        return Index(result.astype('i8'), name=self.name)\n    return DatetimeIndexOpsMixin.astype(self, dtype, copy=copy)",
                            "def _maybe_promote(self, other):\n    if other.inferred_type == 'timedelta':\n        other = TimedeltaIndex(other)\n    return (self, other)",
                            "def get_value(self, series, key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing\n    \"\"\"\n    if is_integer(key):\n        loc = key\n    else:\n        loc = self.get_loc(key)\n    return self._get_values_for_loc(series, loc)",
                            "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location for requested label\n\n    Returns\n    -------\n    loc : int, slice, or ndarray[int]\n    \"\"\"\n    if not is_scalar(key):\n        raise InvalidIndexError(key)\n    if is_valid_nat_for_dtype(key, self.dtype):\n        key = NaT\n    elif isinstance(key, str):\n        try:\n            key = Timedelta(key)\n        except ValueError:\n            raise KeyError(key)\n    elif isinstance(key, self._data._recognized_scalars) or key is NaT:\n        key = Timedelta(key)\n    else:\n        raise KeyError(key)\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n    return Index.get_loc(self, key, method, tolerance)",
                            "def _maybe_cast_slice_bound(self, label, side, kind):\n    \"\"\"\n    If label is a string, cast it to timedelta according to resolution.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    label : object\n    \"\"\"\n    assert kind in ['loc', 'getitem', None]\n    if isinstance(label, str):\n        parsed = Timedelta(label)\n        lbound = parsed.round(parsed.resolution_string)\n        if side == 'left':\n            return lbound\n        else:\n            return lbound + to_offset(parsed.resolution_string) - Timedelta(1, 'ns')\n    elif is_integer(label) or is_float(label):\n        self._invalid_indexer('slice', label)\n    return label",
                            "def _get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True):\n    assert isinstance(key, str), type(key)\n    raise NotImplementedError",
                            "def is_type_compatible(self, typ) -> bool:\n    return typ == self.inferred_type or typ == 'timedelta'",
                            "@property\ndef inferred_type(self) -> str:\n    return 'timedelta64'"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_typ",
                            "_engine_type",
                            "_comparables",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_infer_as_myclass"
                        ],
                        "class_decorators": [
                            "inherit_names(['_bool_ops', '_object_ops', '_field_ops', '_datetimelike_ops', '_datetimelike_methods', '_other_ops'], TimedeltaArray)",
                            "delegate_names(TimedeltaArray, TimedeltaDelegateMixin._delegated_properties, typ='property')",
                            "delegate_names(TimedeltaArray, TimedeltaDelegateMixin._delegated_methods, typ='method', overwrite=True)"
                        ],
                        "function_signatures": [
                            "__new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None)",
                            "_simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE)",
                            "_formatter_func(self)",
                            "astype(self, dtype, copy=True)",
                            "_maybe_promote(self, other)",
                            "get_value(self, series, key)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "_maybe_cast_slice_bound(self, label, side, kind)",
                            "_get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True)",
                            "is_type_compatible(self, typ) -> bool",
                            "inferred_type(self) -> str"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "_TD_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "maybe_extract_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "<TimedeltaArray>\n['00:00:01', '00:00:02', '00:00:03', '00:00:04', '00:00:05', '00:00:06',\n '00:00:07', '00:00:08', '00:00:09', '00:00:10', '00:00:11', '00:00:12',\n '00:00:13', '00:00:14', '00:00:15', '00:00:16', '00:00:17', '00:00:18',\n '00:00:19', '00:00:20', '00:00:21', '00:00:22', '00:00:23', '00:00:24',\n '00:00:25', '00:00:26', '00:00:27', '00:00:28', '00:00:29', '00:00:30',\n '00:00:31', '00:00:32', '00:00:33', '00:00:34', '00:00:35', '00:00:36',\n '00:00:37', '00:00:38', '00:00:39', '00:00:40', '00:00:41', '00:00:42',\n '00:00:43', '00:00:44', '00:00:45', '00:00:46', '00:00:47', '00:00:48',\n '00:00:49', '00:00:50', '00:00:51', '00:00:52', '00:00:53', '00:00:54',\n '00:00:55', '00:00:56', '00:00:57', '00:00:58', '00:00:59', '00:01:00',\n '00:01:01', '00:01:02', '00:01:03', '00:01:04', '00:01:05', '00:01:06',\n '00:01:07', '00:01:08', '00:01:09', '00:01:10', '00:01:11', '00:01:12',\n '00:01:13', '00:01:14', '00:01:15', '00:01:16', '00:01:17', '00:01:18',\n '00:01:19', '00:01:20', '00:01:21', '00:01:22', '00:01:23', '00:01:24',\n '00:01:25', '00:01:26', '00:01:27', '00:01:28', '00:01:29', '00:01:30',\n '00:01:31', '00:01:32', '00:01:33', '00:01:34', '00:01:35', '00:01:36',\n '00:01:37', '00:01:38', '00:01:39', '00:01:40']\nLength: 100, dtype: timedelta64[ns]",
                                    "variable_type": "TimedeltaArray",
                                    "variable_shape": "100"
                                },
                                "cls": {
                                    "variable_value": "<class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10c947e50>"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls.__name__": {
                                    "variable_value": "'TimedeltaIndex'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "TimedeltaArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "data.copy": {
                                    "variable_value": "<bound method DatetimeLikeArrayMixin.copy of <TimedeltaArray>\n['00:00:01', '00:00:02', '00:00:03', '00:00:04', '00:00:05', '00:00:06',\n '00:00:07', '00:00:08', '00:00:09', '00:00:10', '00:00:11', '00:00:12',\n '00:00:13', '00:00:14', '00:00:15', '00:00:16', '00:00:17', '00:00:18',\n '00:00:19', '00:00:20', '00:00:21', '00:00:22', '00:00:23', '00:00:24',\n '00:00:25', '00:00:26', '00:00:27', '00:00:28', '00:00:29', '00:00:30',\n '00:00:31', '00:00:32', '00:00:33', '00:00:34', '00:00:35', '00:00:36',\n '00:00:37', '00:00:38', '00:00:39', '00:00:40', '00:00:41', '00:00:42',\n '00:00:43', '00:00:44', '00:00:45', '00:00:46', '00:00:47', '00:00:48',\n '00:00:49', '00:00:50', '00:00:51', '00:00:52', '00:00:53', '00:00:54',\n '00:00:55', '00:00:56', '00:00:57', '00:00:58', '00:00:59', '00:01:00',\n '00:01:01', '00:01:02', '00:01:03', '00:01:04', '00:01:05', '00:01:06',\n '00:01:07', '00:01:08', '00:01:09', '00:01:10', '00:01:11', '00:01:12',\n '00:01:13', '00:01:14', '00:01:15', '00:01:16', '00:01:17', '00:01:18',\n '00:01:19', '00:01:20', '00:01:21', '00:01:22', '00:01:23', '00:01:24',\n '00:01:25', '00:01:26', '00:01:27', '00:01:28', '00:01:29', '00:01:30',\n '00:01:31', '00:01:32', '00:01:33', '00:01:34', '00:01:35', '00:01:36',\n '00:01:37', '00:01:38', '00:01:39', '00:01:40']\nLength: 100, dtype: timedelta64[ns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cls._simple_new": {
                                    "variable_value": "<bound method TimedeltaIndex._simple_new of <class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "TimedeltaIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data._shallow_copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tdarr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TimedeltaArray._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "dtype('<m8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "_TD_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "maybe_extract_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "<TimedeltaArray>\n['00:00:01', '00:00:02', '00:00:03', '00:00:04', '00:00:05', '00:00:06',\n '00:00:07', '00:00:08', '00:00:09', '00:00:10', '00:00:11', '00:00:12',\n '00:00:13', '00:00:14', '00:00:15', '00:00:16', '00:00:17', '00:00:18',\n '00:00:19', '00:00:20', '00:00:21', '00:00:22', '00:00:23', '00:00:24',\n '00:00:25', '00:00:26', '00:00:27', '00:00:28', '00:00:29', '00:00:30',\n '00:00:31', '00:00:32', '00:00:33', '00:00:34', '00:00:35', '00:00:36',\n '00:00:37', '00:00:38', '00:00:39', '00:00:40', '00:00:41', '00:00:42',\n '00:00:43', '00:00:44', '00:00:45', '00:00:46', '00:00:47', '00:00:48',\n '00:00:49', '00:00:50', '00:00:51', '00:00:52', '00:00:53', '00:00:54',\n '00:00:55', '00:00:56', '00:00:57', '00:00:58', '00:00:59', '00:01:00',\n '00:01:01', '00:01:02', '00:01:03', '00:01:04', '00:01:05', '00:01:06',\n '00:01:07', '00:01:08', '00:01:09', '00:01:10', '00:01:11', '00:01:12',\n '00:01:13', '00:01:14', '00:01:15', '00:01:16', '00:01:17', '00:01:18',\n '00:01:19', '00:01:20', '00:01:21', '00:01:22', '00:01:23', '00:01:24',\n '00:01:25', '00:01:26', '00:01:27', '00:01:28', '00:01:29', '00:01:30',\n '00:01:31', '00:01:32', '00:01:33', '00:01:34', '00:01:35', '00:01:36',\n '00:01:37', '00:01:38', '00:01:39', '00:01:40']\nLength: 100, dtype: timedelta64[ns]",
                                    "variable_type": "TimedeltaArray",
                                    "variable_shape": "100"
                                },
                                "cls": {
                                    "variable_value": "<class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10c947e50>"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls.__name__": {
                                    "variable_value": "'TimedeltaIndex'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "TimedeltaArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "data.copy": {
                                    "variable_value": "<bound method DatetimeLikeArrayMixin.copy of <TimedeltaArray>\n['00:00:01', '00:00:02', '00:00:03', '00:00:04', '00:00:05', '00:00:06',\n '00:00:07', '00:00:08', '00:00:09', '00:00:10', '00:00:11', '00:00:12',\n '00:00:13', '00:00:14', '00:00:15', '00:00:16', '00:00:17', '00:00:18',\n '00:00:19', '00:00:20', '00:00:21', '00:00:22', '00:00:23', '00:00:24',\n '00:00:25', '00:00:26', '00:00:27', '00:00:28', '00:00:29', '00:00:30',\n '00:00:31', '00:00:32', '00:00:33', '00:00:34', '00:00:35', '00:00:36',\n '00:00:37', '00:00:38', '00:00:39', '00:00:40', '00:00:41', '00:00:42',\n '00:00:43', '00:00:44', '00:00:45', '00:00:46', '00:00:47', '00:00:48',\n '00:00:49', '00:00:50', '00:00:51', '00:00:52', '00:00:53', '00:00:54',\n '00:00:55', '00:00:56', '00:00:57', '00:00:58', '00:00:59', '00:01:00',\n '00:01:01', '00:01:02', '00:01:03', '00:01:04', '00:01:05', '00:01:06',\n '00:01:07', '00:01:08', '00:01:09', '00:01:10', '00:01:11', '00:01:12',\n '00:01:13', '00:01:14', '00:01:15', '00:01:16', '00:01:17', '00:01:18',\n '00:01:19', '00:01:20', '00:01:21', '00:01:22', '00:01:23', '00:01:24',\n '00:01:25', '00:01:26', '00:01:27', '00:01:28', '00:01:29', '00:01:30',\n '00:01:31', '00:01:32', '00:01:33', '00:01:34', '00:01:35', '00:01:36',\n '00:01:37', '00:01:38', '00:01:39', '00:01:40']\nLength: 100, dtype: timedelta64[ns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cls._simple_new": {
                                    "variable_value": "<bound method TimedeltaIndex._simple_new of <class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "TimedeltaIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data._shallow_copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tdarr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TimedeltaArray._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "dtype('<m8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "_TD_DTYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "maybe_extract_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "<TimedeltaArray>\n['00:00:01', '00:00:02', '00:00:03', '00:00:04', '00:00:05', '00:00:06',\n '00:00:07', '00:00:08', '00:00:09', '00:00:10', '00:00:11', '00:00:12',\n '00:00:13', '00:00:14', '00:00:15', '00:00:16', '00:00:17', '00:00:18',\n '00:00:19', '00:00:20', '00:00:21', '00:00:22', '00:00:23', '00:00:24',\n '00:00:25', '00:00:26', '00:00:27', '00:00:28', '00:00:29', '00:00:30',\n '00:00:31', '00:00:32', '00:00:33', '00:00:34', '00:00:35', '00:00:36',\n '00:00:37', '00:00:38', '00:00:39', '00:00:40', '00:00:41', '00:00:42',\n '00:00:43', '00:00:44', '00:00:45', '00:00:46', '00:00:47', '00:00:48',\n '00:00:49', '00:00:50', '00:00:51', '00:00:52', '00:00:53', '00:00:54',\n '00:00:55', '00:00:56', '00:00:57', '00:00:58', '00:00:59', '00:01:00',\n '00:01:01', '00:01:02', '00:01:03', '00:01:04', '00:01:05', '00:01:06',\n '00:01:07', '00:01:08', '00:01:09', '00:01:10', '00:01:11', '00:01:12',\n '00:01:13', '00:01:14', '00:01:15', '00:01:16', '00:01:17', '00:01:18',\n '00:01:19', '00:01:20', '00:01:21', '00:01:22', '00:01:23', '00:01:24',\n '00:01:25', '00:01:26', '00:01:27', '00:01:28', '00:01:29', '00:01:30',\n '00:01:31', '00:01:32', '00:01:33', '00:01:34', '00:01:35', '00:01:36',\n '00:01:37', '00:01:38', '00:01:39', '00:01:40']\nLength: 100, dtype: timedelta64[ns]",
                                    "variable_type": "TimedeltaArray",
                                    "variable_shape": "100"
                                },
                                "cls": {
                                    "variable_value": "<class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10da31f90>"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls.__name__": {
                                    "variable_value": "'TimedeltaIndex'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "TimedeltaArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "freq": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "data.copy": {
                                    "variable_value": "<bound method DatetimeLikeArrayMixin.copy of <TimedeltaArray>\n['00:00:01', '00:00:02', '00:00:03', '00:00:04', '00:00:05', '00:00:06',\n '00:00:07', '00:00:08', '00:00:09', '00:00:10', '00:00:11', '00:00:12',\n '00:00:13', '00:00:14', '00:00:15', '00:00:16', '00:00:17', '00:00:18',\n '00:00:19', '00:00:20', '00:00:21', '00:00:22', '00:00:23', '00:00:24',\n '00:00:25', '00:00:26', '00:00:27', '00:00:28', '00:00:29', '00:00:30',\n '00:00:31', '00:00:32', '00:00:33', '00:00:34', '00:00:35', '00:00:36',\n '00:00:37', '00:00:38', '00:00:39', '00:00:40', '00:00:41', '00:00:42',\n '00:00:43', '00:00:44', '00:00:45', '00:00:46', '00:00:47', '00:00:48',\n '00:00:49', '00:00:50', '00:00:51', '00:00:52', '00:00:53', '00:00:54',\n '00:00:55', '00:00:56', '00:00:57', '00:00:58', '00:00:59', '00:01:00',\n '00:01:01', '00:01:02', '00:01:03', '00:01:04', '00:01:05', '00:01:06',\n '00:01:07', '00:01:08', '00:01:09', '00:01:10', '00:01:11', '00:01:12',\n '00:01:13', '00:01:14', '00:01:15', '00:01:16', '00:01:17', '00:01:18',\n '00:01:19', '00:01:20', '00:01:21', '00:01:22', '00:01:23', '00:01:24',\n '00:01:25', '00:01:26', '00:01:27', '00:01:28', '00:01:29', '00:01:30',\n '00:01:31', '00:01:32', '00:01:33', '00:01:34', '00:01:35', '00:01:36',\n '00:01:37', '00:01:38', '00:01:39', '00:01:40']\nLength: 100, dtype: timedelta64[ns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cls._simple_new": {
                                    "variable_value": "<bound method TimedeltaIndex._simple_new of <class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "TimedeltaIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data._shallow_copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tdarr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TimedeltaArray._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "dtype('<m8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def timedelta_range(\n    start=None, end=None, periods=None, freq=None, name=None, closed=None\n) -> TimedeltaIndex:\n    \"\"\"\n    Return a fixed frequency TimedeltaIndex, with day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or timedelta-like, default None\n        Left bound for generating timedeltas.\n    end : str or timedelta-like, default None\n        Right bound for generating timedeltas.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'.\n    name : str, default None\n        Name of the resulting TimedeltaIndex.\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n\n    Returns\n    -------\n    rng : TimedeltaIndex\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``TimedeltaIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.timedelta_range(start='1 day', periods=4)\n    TimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``closed`` parameter specifies which endpoint is included.  The default\n    behavior is to include both endpoints.\n\n    >>> pd.timedelta_range(start='1 day', periods=4, closed='right')\n    TimedeltaIndex(['2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``freq`` parameter specifies the frequency of the TimedeltaIndex.\n    Only fixed frequencies can be passed, non-fixed frequencies such as\n    'M' (month end) will raise.\n\n    >>> pd.timedelta_range(start='1 day', end='2 days', freq='6H')\n    TimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',\n                    '1 days 18:00:00', '2 days 00:00:00'],\n                   dtype='timedelta64[ns]', freq='6H')\n\n    Specify ``start``, ``end``, and ``periods``; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.timedelta_range(start='1 day', end='5 days', periods=4)\n    TimedeltaIndex(['1 days 00:00:00', '2 days 08:00:00', '3 days 16:00:00',\n                '5 days 00:00:00'],\n               dtype='timedelta64[ns]', freq=None)\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    freq, freq_infer = dtl.maybe_infer_freq(freq)\n    tdarr = TimedeltaArray._generate_range(start, end, periods, freq, closed=closed)\n    return TimedeltaIndex._simple_new(tdarr, name=name)",
                "def __new__(\n    cls,\n    data=None,\n    unit=None,\n    freq=None,\n    closed=None,\n    dtype=_TD_DTYPE,\n    copy=False,\n    name=None,\n):\n    name = maybe_extract_name(name, data, cls)\n\n    if is_scalar(data):\n        raise TypeError(\n            f\"{cls.__name__}() must be called with a \"\n            f\"collection of some kind, {repr(data)} was passed\"\n        )\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not \"\n            \"represent unambiguous timedelta values durations.\"\n        )\n\n    if isinstance(data, TimedeltaArray):\n        if copy:\n            data = data.copy()\n        return cls._simple_new(data, name=name, freq=freq)\n\n    if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n        if copy:\n            return data.copy()\n        else:\n            return data._shallow_copy()\n\n    # - Cases checked above all return/raise before reaching here - #\n\n    tdarr = TimedeltaArray._from_sequence(\n        data, freq=freq, unit=unit, dtype=dtype, copy=copy\n    )\n    return cls._simple_new(tdarr, name=name)",
                "@classmethod\ndef _simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE):\n    # `dtype` is passed by _shallow_copy in corner cases, should always\n    #  be timedelta64[ns] if present\n\n    if not isinstance(values, TimedeltaArray):\n        values = TimedeltaArray._simple_new(values, dtype=dtype, freq=freq)\n    else:\n        if freq is None:\n            freq = values.freq\n    assert isinstance(values, TimedeltaArray), type(values)\n    assert dtype == _TD_DTYPE, dtype\n    assert values.dtype == \"m8[ns]\", values.dtype\n\n    tdarr = TimedeltaArray._simple_new(values._data, freq=freq)\n    result = object.__new__(cls)\n    result._data = tdarr\n    result._name = name\n    # For groupby perf. See note in indexes/base about _index_data\n    result._index_data = tdarr._data\n\n    result._reset_identity()\n    return result",
                "@property\ndef _formatter_func(self):\n    from pandas.io.formats.format import _get_format_timedelta64\n\n    return _get_format_timedelta64(self, box=True)",
                "@Appender(_index_shared_docs[\"astype\"])\ndef astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n        # Have to repeat the check for 'timedelta64' (not ns) dtype\n        #  so that we can return a numeric index, since pandas will return\n        #  a TimedeltaIndex when dtype='timedelta'\n        result = self._data.astype(dtype, copy=copy)\n        if self.hasnans:\n            return Index(result, name=self.name)\n        return Index(result.astype(\"i8\"), name=self.name)\n    return DatetimeIndexOpsMixin.astype(self, dtype, copy=copy)",
                "def _maybe_promote(self, other):\n    if other.inferred_type == \"timedelta\":\n        other = TimedeltaIndex(other)\n    return self, other",
                "def get_value(self, series, key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing\n    \"\"\"\n    if is_integer(key):\n        loc = key\n    else:\n        loc = self.get_loc(key)\n    return self._get_values_for_loc(series, loc)",
                "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location for requested label\n\n    Returns\n    -------\n    loc : int, slice, or ndarray[int]\n    \"\"\"\n    if not is_scalar(key):\n        raise InvalidIndexError(key)\n\n    if is_valid_nat_for_dtype(key, self.dtype):\n        key = NaT\n\n    elif isinstance(key, str):\n        try:\n            key = Timedelta(key)\n        except ValueError:\n            raise KeyError(key)\n\n    elif isinstance(key, self._data._recognized_scalars) or key is NaT:\n        key = Timedelta(key)\n\n    else:\n        raise KeyError(key)\n\n    if tolerance is not None:\n        # try converting tolerance now, so errors don't get swallowed by\n        # the try/except clauses below\n        tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n    return Index.get_loc(self, key, method, tolerance)",
                "def _maybe_cast_slice_bound(self, label, side, kind):\n    \"\"\"\n    If label is a string, cast it to timedelta according to resolution.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    label : object\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\", None]\n\n    if isinstance(label, str):\n        parsed = Timedelta(label)\n        lbound = parsed.round(parsed.resolution_string)\n        if side == \"left\":\n            return lbound\n        else:\n            return lbound + to_offset(parsed.resolution_string) - Timedelta(1, \"ns\")\n    elif is_integer(label) or is_float(label):\n        self._invalid_indexer(\"slice\", label)\n\n    return label",
                "def _get_string_slice(self, key: str, use_lhs: bool = True, use_rhs: bool = True):\n    # TODO: Check for non-True use_lhs/use_rhs\n    assert isinstance(key, str), type(key)\n    # given a key, try to figure out a location for a partial slice\n    raise NotImplementedError",
                "def is_type_compatible(self, typ) -> bool:\n    return typ == self.inferred_type or typ == \"timedelta\"",
                "@property\ndef inferred_type(self) -> str:\n    return \"timedelta64\""
            ],
            "inscope_function_signatures": [
                "timedelta_range(start=None, end=None, periods=None, freq=None, name=None, closed=None) -> TimedeltaIndex",
                "__new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None)",
                "_simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE)",
                "_formatter_func(self)",
                "astype(self, dtype, copy=True)",
                "_maybe_promote(self, other)",
                "get_value(self, series, key)",
                "get_loc(self, key, method=None, tolerance=None)",
                "_maybe_cast_slice_bound(self, label, side, kind)",
                "_get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True)",
                "is_type_compatible(self, typ) -> bool",
                "inferred_type(self) -> str"
            ],
            "variables_in_file": {
                "DatetimelikeDelegateMixin": [
                    39
                ],
                "_raw_properties": [
                    44,
                    47
                ],
                "_raw_methods": [
                    50,
                    45
                ],
                "_delegated_properties": [
                    47
                ],
                "TimedeltaArray._datetimelike_ops": [
                    47
                ],
                "TimedeltaArray": [
                    64,
                    194,
                    67,
                    166,
                    198,
                    70,
                    398,
                    47,
                    49,
                    179,
                    189,
                    190
                ],
                "list": [
                    50,
                    47
                ],
                "_delegated_methods": [
                    48
                ],
                "TimedeltaArray._datetimelike_methods": [
                    49
                ],
                "DatetimeTimedeltaMixin": [
                    76
                ],
                "dtl.TimelikeOps": [
                    76
                ],
                "dtl": [
                    76,
                    397
                ],
                "TimedeltaDelegateMixin": [
                    67,
                    76,
                    71
                ],
                "_typ": [
                    130
                ],
                "_engine_type": [
                    132
                ],
                "libindex.TimedeltaEngine": [
                    132
                ],
                "libindex": [
                    132
                ],
                "_comparables": [
                    134
                ],
                "_attributes": [
                    135
                ],
                "_is_numeric_dtype": [
                    136
                ],
                "_infer_as_myclass": [
                    137
                ],
                "_TD_DTYPE": [
                    185,
                    195,
                    148
                ],
                "name": [
                    169,
                    201,
                    171,
                    399,
                    182,
                    152
                ],
                "maybe_extract_name": [
                    152
                ],
                "data": [
                    166,
                    168,
                    169,
                    171,
                    173,
                    175,
                    180,
                    152,
                    154,
                    157
                ],
                "cls": [
                    199,
                    169,
                    182,
                    152,
                    156
                ],
                "is_scalar": [
                    256,
                    154
                ],
                "TypeError": [
                    155
                ],
                "cls.__name__": [
                    156
                ],
                "repr": [
                    157
                ],
                "unit": [
                    160,
                    180
                ],
                "ValueError": [
                    161,
                    265
                ],
                "isinstance": [
                    194,
                    166,
                    262,
                    297,
                    171,
                    268,
                    311,
                    189
                ],
                "copy": [
                    226,
                    230,
                    167,
                    172,
                    180
                ],
                "data.copy": [
                    168,
                    173
                ],
                "cls._simple_new": [
                    169,
                    182
                ],
                "freq": [
                    192,
                    193,
                    198,
                    169,
                    394,
                    171,
                    395,
                    397,
                    398,
                    180,
                    190
                ],
                "TimedeltaIndex": [
                    323,
                    328,
                    234,
                    171,
                    399
                ],
                "data._shallow_copy": [
                    175
                ],
                "tdarr": [
                    198,
                    200,
                    203,
                    398,
                    399,
                    179,
                    182
                ],
                "TimedeltaArray._from_sequence": [
                    179
                ],
                "dtype": [
                    226,
                    195,
                    230,
                    180,
                    190,
                    221,
                    222
                ],
                "values": [
                    193,
                    194,
                    196,
                    198,
                    189,
                    190
                ],
                "TimedeltaArray._simple_new": [
                    198,
                    190
                ],
                "values.freq": [
                    193
                ],
                "type": [
                    194,
                    311
                ],
                "values.dtype": [
                    196
                ],
                "values._data": [
                    198
                ],
                "result": [
                    226,
                    228,
                    229,
                    199,
                    200,
                    201,
                    203,
                    205,
                    206
                ],
                "object.__new__": [
                    199
                ],
                "object": [
                    199
                ],
                "result._data": [
                    200
                ],
                "result._name": [
                    201
                ],
                "result._index_data": [
                    203
                ],
                "tdarr._data": [
                    203
                ],
                "result._reset_identity": [
                    205
                ],
                "classmethod": [
                    184
                ],
                "_get_format_timedelta64": [
                    215
                ],
                "self": [
                    226,
                    227,
                    228,
                    229,
                    230,
                    259,
                    235,
                    268,
                    305,
                    245,
                    246,
                    215,
                    277,
                    316,
                    279
                ],
                "property": [
                    211,
                    318
                ],
                "pandas_dtype": [
                    221
                ],
                "is_timedelta64_dtype": [
                    222
                ],
                "is_timedelta64_ns_dtype": [
                    222
                ],
                "self._data.astype": [
                    226
                ],
                "self._data": [
                    226,
                    268
                ],
                "self.hasnans": [
                    227
                ],
                "Index": [
                    228,
                    229,
                    279
                ],
                "self.name": [
                    228,
                    229
                ],
                "result.astype": [
                    229
                ],
                "DatetimeIndexOpsMixin.astype": [
                    230
                ],
                "DatetimeIndexOpsMixin": [
                    230
                ],
                "Appender": [
                    219
                ],
                "_index_shared_docs": [
                    219
                ],
                "other.inferred_type": [
                    233
                ],
                "other": [
                    233,
                    234,
                    235
                ],
                "is_integer": [
                    304,
                    242
                ],
                "key": [
                    256,
                    257,
                    259,
                    260,
                    262,
                    264,
                    266,
                    268,
                    269,
                    272,
                    242,
                    243,
                    245,
                    277,
                    279,
                    311
                ],
                "loc": [
                    243,
                    245,
                    246
                ],
                "self.get_loc": [
                    245
                ],
                "self._get_values_for_loc": [
                    246
                ],
                "series": [
                    246
                ],
                "InvalidIndexError": [
                    257
                ],
                "is_valid_nat_for_dtype": [
                    259
                ],
                "self.dtype": [
                    259
                ],
                "NaT": [
                    260,
                    268
                ],
                "str": [
                    262,
                    297,
                    309,
                    311,
                    319
                ],
                "Timedelta": [
                    264,
                    298,
                    269,
                    303
                ],
                "KeyError": [
                    272,
                    266
                ],
                "self._data._recognized_scalars": [
                    268
                ],
                "tolerance": [
                    274,
                    277,
                    279
                ],
                "self._convert_tolerance": [
                    277
                ],
                "np.asarray": [
                    277
                ],
                "np": [
                    277
                ],
                "Index.get_loc": [
                    279
                ],
                "method": [
                    279
                ],
                "kind": [
                    295
                ],
                "label": [
                    297,
                    298,
                    304,
                    305,
                    307
                ],
                "parsed": [
                    298,
                    299,
                    303
                ],
                "lbound": [
                    299,
                    301,
                    303
                ],
                "parsed.round": [
                    299
                ],
                "parsed.resolution_string": [
                    299,
                    303
                ],
                "side": [
                    300
                ],
                "to_offset": [
                    303
                ],
                "is_float": [
                    304
                ],
                "self._invalid_indexer": [
                    305
                ],
                "bool": [
                    315,
                    309
                ],
                "NotImplementedError": [
                    313
                ],
                "typ": [
                    316
                ],
                "self.inferred_type": [
                    316
                ],
                "inherit_names": [
                    55
                ],
                "delegate_names": [
                    66,
                    69
                ],
                "TimedeltaDelegateMixin._delegated_properties": [
                    67
                ],
                "TimedeltaDelegateMixin._delegated_methods": [
                    71
                ],
                "TimedeltaIndex._add_logical_methods_disabled": [
                    323
                ],
                "com.any_none": [
                    394
                ],
                "com": [
                    394
                ],
                "periods": [
                    394,
                    398
                ],
                "start": [
                    394,
                    398
                ],
                "end": [
                    394,
                    398
                ],
                "freq_infer": [
                    397
                ],
                "dtl.maybe_infer_freq": [
                    397
                ],
                "TimedeltaArray._generate_range": [
                    398
                ],
                "closed": [
                    398
                ],
                "TimedeltaIndex._simple_new": [
                    399
                ]
            },
            "filtered_variables_in_file": {
                "DatetimelikeDelegateMixin": [
                    39
                ],
                "_raw_properties": [
                    44,
                    47
                ],
                "_raw_methods": [
                    50,
                    45
                ],
                "_delegated_properties": [
                    47
                ],
                "TimedeltaArray._datetimelike_ops": [
                    47
                ],
                "TimedeltaArray": [
                    64,
                    194,
                    67,
                    166,
                    198,
                    70,
                    398,
                    47,
                    49,
                    179,
                    189,
                    190
                ],
                "_delegated_methods": [
                    48
                ],
                "TimedeltaArray._datetimelike_methods": [
                    49
                ],
                "DatetimeTimedeltaMixin": [
                    76
                ],
                "dtl.TimelikeOps": [
                    76
                ],
                "dtl": [
                    76,
                    397
                ],
                "TimedeltaDelegateMixin": [
                    67,
                    76,
                    71
                ],
                "_typ": [
                    130
                ],
                "_engine_type": [
                    132
                ],
                "libindex.TimedeltaEngine": [
                    132
                ],
                "libindex": [
                    132
                ],
                "_comparables": [
                    134
                ],
                "_attributes": [
                    135
                ],
                "_is_numeric_dtype": [
                    136
                ],
                "_infer_as_myclass": [
                    137
                ],
                "_TD_DTYPE": [
                    185,
                    195,
                    148
                ],
                "name": [
                    169,
                    201,
                    171,
                    399,
                    182,
                    152
                ],
                "maybe_extract_name": [
                    152
                ],
                "data": [
                    166,
                    168,
                    169,
                    171,
                    173,
                    175,
                    180,
                    152,
                    154,
                    157
                ],
                "cls": [
                    199,
                    169,
                    182,
                    152,
                    156
                ],
                "is_scalar": [
                    256,
                    154
                ],
                "cls.__name__": [
                    156
                ],
                "unit": [
                    160,
                    180
                ],
                "copy": [
                    226,
                    230,
                    167,
                    172,
                    180
                ],
                "data.copy": [
                    168,
                    173
                ],
                "cls._simple_new": [
                    169,
                    182
                ],
                "freq": [
                    192,
                    193,
                    198,
                    169,
                    394,
                    171,
                    395,
                    397,
                    398,
                    180,
                    190
                ],
                "TimedeltaIndex": [
                    323,
                    328,
                    234,
                    171,
                    399
                ],
                "data._shallow_copy": [
                    175
                ],
                "tdarr": [
                    198,
                    200,
                    203,
                    398,
                    399,
                    179,
                    182
                ],
                "TimedeltaArray._from_sequence": [
                    179
                ],
                "dtype": [
                    226,
                    195,
                    230,
                    180,
                    190,
                    221,
                    222
                ],
                "values": [
                    193,
                    194,
                    196,
                    198,
                    189,
                    190
                ],
                "TimedeltaArray._simple_new": [
                    198,
                    190
                ],
                "values.freq": [
                    193
                ],
                "values.dtype": [
                    196
                ],
                "values._data": [
                    198
                ],
                "result": [
                    226,
                    228,
                    229,
                    199,
                    200,
                    201,
                    203,
                    205,
                    206
                ],
                "object.__new__": [
                    199
                ],
                "result._data": [
                    200
                ],
                "result._name": [
                    201
                ],
                "result._index_data": [
                    203
                ],
                "tdarr._data": [
                    203
                ],
                "result._reset_identity": [
                    205
                ],
                "_get_format_timedelta64": [
                    215
                ],
                "self": [
                    226,
                    227,
                    228,
                    229,
                    230,
                    259,
                    235,
                    268,
                    305,
                    245,
                    246,
                    215,
                    277,
                    316,
                    279
                ],
                "pandas_dtype": [
                    221
                ],
                "is_timedelta64_dtype": [
                    222
                ],
                "is_timedelta64_ns_dtype": [
                    222
                ],
                "self._data.astype": [
                    226
                ],
                "self._data": [
                    226,
                    268
                ],
                "self.hasnans": [
                    227
                ],
                "Index": [
                    228,
                    229,
                    279
                ],
                "self.name": [
                    228,
                    229
                ],
                "result.astype": [
                    229
                ],
                "DatetimeIndexOpsMixin.astype": [
                    230
                ],
                "DatetimeIndexOpsMixin": [
                    230
                ],
                "Appender": [
                    219
                ],
                "_index_shared_docs": [
                    219
                ],
                "other.inferred_type": [
                    233
                ],
                "other": [
                    233,
                    234,
                    235
                ],
                "is_integer": [
                    304,
                    242
                ],
                "key": [
                    256,
                    257,
                    259,
                    260,
                    262,
                    264,
                    266,
                    268,
                    269,
                    272,
                    242,
                    243,
                    245,
                    277,
                    279,
                    311
                ],
                "loc": [
                    243,
                    245,
                    246
                ],
                "self.get_loc": [
                    245
                ],
                "self._get_values_for_loc": [
                    246
                ],
                "series": [
                    246
                ],
                "InvalidIndexError": [
                    257
                ],
                "is_valid_nat_for_dtype": [
                    259
                ],
                "self.dtype": [
                    259
                ],
                "NaT": [
                    260,
                    268
                ],
                "Timedelta": [
                    264,
                    298,
                    269,
                    303
                ],
                "self._data._recognized_scalars": [
                    268
                ],
                "tolerance": [
                    274,
                    277,
                    279
                ],
                "self._convert_tolerance": [
                    277
                ],
                "np.asarray": [
                    277
                ],
                "np": [
                    277
                ],
                "Index.get_loc": [
                    279
                ],
                "method": [
                    279
                ],
                "kind": [
                    295
                ],
                "label": [
                    297,
                    298,
                    304,
                    305,
                    307
                ],
                "parsed": [
                    298,
                    299,
                    303
                ],
                "lbound": [
                    299,
                    301,
                    303
                ],
                "parsed.round": [
                    299
                ],
                "parsed.resolution_string": [
                    299,
                    303
                ],
                "side": [
                    300
                ],
                "to_offset": [
                    303
                ],
                "is_float": [
                    304
                ],
                "self._invalid_indexer": [
                    305
                ],
                "typ": [
                    316
                ],
                "self.inferred_type": [
                    316
                ],
                "inherit_names": [
                    55
                ],
                "delegate_names": [
                    66,
                    69
                ],
                "TimedeltaDelegateMixin._delegated_properties": [
                    67
                ],
                "TimedeltaDelegateMixin._delegated_methods": [
                    71
                ],
                "TimedeltaIndex._add_logical_methods_disabled": [
                    323
                ],
                "com.any_none": [
                    394
                ],
                "com": [
                    394
                ],
                "periods": [
                    394,
                    398
                ],
                "start": [
                    394,
                    398
                ],
                "end": [
                    394,
                    398
                ],
                "freq_infer": [
                    397
                ],
                "dtl.maybe_infer_freq": [
                    397
                ],
                "TimedeltaArray._generate_range": [
                    398
                ],
                "closed": [
                    398
                ],
                "TimedeltaIndex._simple_new": [
                    399
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_74/pandas/tests/indexes/timedeltas/test_constructors.py",
                "test_function": "test_infer_from_tdi_mismatch",
                "test_function_code": "    def test_infer_from_tdi_mismatch(self):\n        # GH#23539\n        # fast-path for invalidating a frequency if the passed data already\n        #  has one and it does not match the `freq` input\n        tdi = pd.timedelta_range(\"1 second\", periods=100, freq=\"1s\")\n\n        msg = (\n            \"Inferred frequency .* from passed values does \"\n            \"not conform to passed frequency\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaIndex(tdi, freq=\"D\")\n\n        with pytest.raises(ValueError, match=msg):\n            # GH#23789\n            TimedeltaArray(tdi, freq=\"D\")\n\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaIndex(tdi._data, freq=\"D\")\n\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaArray(tdi._data, freq=\"D\")",
                "test_error": "Failed: DID NOT RAISE <class 'ValueError'>",
                "full_test_error": "self = <pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex object at 0x113ac5340>\n\n    def test_infer_from_tdi_mismatch(self):\n        # GH#23539\n        # fast-path for invalidating a frequency if the passed data already\n        #  has one and it does not match the `freq` input\n        tdi = pd.timedelta_range(\"1 second\", periods=100, freq=\"1s\")\n    \n        msg = (\n            \"Inferred frequency .* from passed values does \"\n            \"not conform to passed frequency\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaIndex(tdi, freq=\"D\")\n    \n        with pytest.raises(ValueError, match=msg):\n            # GH#23789\n            TimedeltaArray(tdi, freq=\"D\")\n    \n        with pytest.raises(ValueError, match=msg):\n>           TimedeltaIndex(tdi._data, freq=\"D\")\nE           Failed: DID NOT RAISE <class 'ValueError'>\n\npandas/tests/indexes/timedeltas/test_constructors.py:51: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}