{
    "pandas": [
        {
            "bugID": 74,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 142,
            "file_name": "core/indexes/timedeltas.py",
            "replace_code": "def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=None,\n        closed=None,\n        dtype=None,  # Removed the default value for dtype\n        copy=False,\n        name=None,\n):\n\n    name = maybe_extract_name(name, data, cls)\n    \n    if data is None:\n        raise ValueError(f\"{cls.__name__}() must be called with data\")\n    \n    if is_scalar(data):\n        raise TypeError(\n            f\"{cls.__name__}() must be called with a \"\n            f\"collection of some kind, {repr(data)} was passed\"\n        )\n    \n    if unit and unit in {\"Y\", \"y\", \"M\"}:  # Changed if statement condition\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not \"\n            \"represent unambiguous timedelta values durations.\"\n        )\n    \n    if isinstance(data, TimedeltaArray):\n        if copy:\n            data = data.copy()\n        return cls._simple_new(data, name=name, freq=freq)\n    \n    if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n        if copy:\n            return data.copy()\n        else:\n            return data._shallow_copy()\n    \n    # - Cases checked above all return/raise before reaching here - #\n    \n    tdarr = TimedeltaArray._from_sequence(\n        data, freq=freq, unit=unit, dtype=dtype, copy=copy\n    )\n    return cls._simple_new(tdarr, name=name)"
        }
    ]
}