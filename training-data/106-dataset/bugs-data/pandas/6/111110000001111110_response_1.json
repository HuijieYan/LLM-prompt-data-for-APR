{
    "pandas": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 601,
            "file_name": "core/groupby/grouper.py",
            "replace_code": "def get_grouper(\n    obj: FrameOrSeries,\n    key=NoDefault,\n    axis: int = 0,\n    level=NoDefault,\n    sort: bool = True,\n    observed: bool = False,\n    mutated: bool = False,\n    validate: bool = True,\n    dropna: bool = True,\n) -> \"Tuple[ops.BaseGrouper, List[Hashable], FrameOrSeries]\":\n    from pandas.core.base import ops, NoDefault\n    import pandas._libs.tslibs as tslib\n    \"\"\"\n    Create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n    \n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n    \n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n    \n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n    \n    If observed & we have a categorical grouper, only show the observed\n    values.\n    \n    If validate, then check for key/level overlaps.\n    \n    \"\"\"\n    group_axis = obj._get_axis(axis)\n    \n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not NoDefault:\n        if isinstance(group_axis, tslib.PeriodIndex):\n            if tslib.is_list_like(level) and len(level) == 1:\n                level = level[0]\n    \n            if key is NoDefault and isinstance(level, str):\n                # Get the level values from group_axis\n                key = group_axis.get_level_values(level)\n                level = NoDefault\n    \n    # a passed-in Grouper, directly convert\n    if isinstance(key, ops.Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is NoDefault:\n            return grouper, [], obj\n        else:\n            return grouper, [key.key], obj\n    \n    # already have a BaseGrouper, just return it\n    elif isinstance(key, ops.BaseGrouper):\n        return key, [], obj\n    \n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n    \n    # what are we after, exactly?\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, ops.Grouper) for g in keys)\n    any_arraylike = any(isinstance(g, (list, tuple, FrameOrSeries, tslib.Index, np.ndarray)) for g in keys)"
        }
    ]
}