{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1302,
            "file_name": "/pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n\n    if is_datetime64_any_dtype(self.dtype) and is_timedelta64_dtype(other.dtype):\n        return -other + self  # Performing arithmetic operation between datetime64 and timedelta64\n    elif is_datetime64_any_dtype(self.dtype) and is_datetime64_any_dtype(other.dtype):\n        return other - self  # Performing arithmetic operation between two datetime64 values\n    elif is_period_dtype(self.dtype) and is_timedelta64_dtype(other.dtype):\n        raise TypeError(\"cannot subtract {cls} from {dtype}\".format(cls=type(self).__name__, dtype=other.dtype))\n    elif is_timedelta64_dtype(self.dtype) and is_timedelta64_dtype(other.dtype):\n        return -other + self  # Performing arithmetic operation between two timedelta64 values\n    else:\n        raise TypeError(\"cannot subtract {cls} from {typ}\".format(cls=type(other).__name__, typ=type(self).__name__))"
        }
    ]
}