{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1302,
            "file_name": "core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n\n    if not hasattr(other, \"dtype\"):\n        raise TypeError(\"unsupported operand type(s) for -: 'DatetimeArray' and '{}'\".format(type(other).__name__))\n    \n    if is_datetime64_any_dtype(other.dtype) and is_timedelta64_dtype(self.dtype):\n        # Perform subtraction for datetime64 and timedelta64\n        return other - self\n    elif is_datetime64_any_dtype(self.dtype) and is_datetime64_any_dtype(other.dtype):\n        # Perform subtraction for datetime64 and datetime64\n        return other - self\n    elif is_timedelta64_dtype(self.dtype) and is_timedelta64_dtype(other.dtype):\n        # Perform subtraction for timedelta64 and timedelta64\n        return other - self\n    else:\n        raise TypeError(\"unsupported operand type(s) for -: '{}' and '{}'\".format(type(self).__name__, type(other).__name__))"
        }
    ]
}