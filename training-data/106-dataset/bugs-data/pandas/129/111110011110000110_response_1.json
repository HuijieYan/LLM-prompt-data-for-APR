{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1302,
            "file_name": "core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    from pandas.core.arrays import DatetimeArray\n    if is_datetime64_any_dtype(other) and is_timedelta64_dtype(self.dtype):\n        if not isinstance(other, (DatetimeIndex, Timestamp)):\n            from pandas.core.arrays import DatetimeArray\n    \n            other = DatetimeArray(other)\n        return other - self\n    elif is_datetime64_any_dtype(self.dtype):\n        if hasattr(other, \"dtype\") and not is_datetime_like(other):\n            raise TypeError(\n                f\"cannot subtract {type(self).__name__} from {type(other).__name__}\"\n            )\n        elif isinstance(other, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n            raise TypeError(\n                f\"cannot subtract {type(self).__name__} from {self._string_data.__class__.__name__}\"\n            )\n    elif is_integer_dtype(self.dtype) and not is_integer_dtype(other):\n        if is_timedelta64_dtype(self.dtype):\n            self = TimedeltaArray(self)\n            return self - other\n        if not is_integer_dtype(other.dtype):\n            return self._time_shift(other)\n        else:\n            other = TimestampArray(other).view(\"int64\")\n            return self - other\n    else:\n        self = DatetimeArray(self)\n        return self - other"
        }
    ]
}