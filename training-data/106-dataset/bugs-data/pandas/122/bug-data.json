{
    "pandas:122": {
        "/Volumes/SSD2T/bgp_envs/repos/pandas_122/pandas/core/internals/managers.py": {
            "buggy_functions": [
                {
                    "function_name": "equals",
                    "function_code": "def equals(self, other):\n    self_axes, other_axes = self.axes, other.axes\n    if len(self_axes) != len(other_axes):\n        return False\n    if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes)):\n        return False\n    self._consolidate_inplace()\n    other._consolidate_inplace()\n    if len(self.blocks) != len(other.blocks):\n        return False\n\n    # canonicalize block order, using a tuple combining the type\n    # name and then mgr_locs because there might be unconsolidated\n    # blocks (say, Categorical) which can only be distinguished by\n    # the iteration order\n    def canonicalize(block):\n        return (block.dtype.name, block.mgr_locs.as_array.tolist())\n\n    self_blocks = sorted(self.blocks, key=canonicalize)\n    other_blocks = sorted(other.blocks, key=canonicalize)\n    return all(\n        block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1386,
                    "end_line": 1408,
                    "variables": {
                        "self_axes": [
                            1387,
                            1388,
                            1390
                        ],
                        "other_axes": [
                            1387,
                            1388,
                            1390
                        ],
                        "self.axes": [
                            1387
                        ],
                        "self": [
                            1392,
                            1394,
                            1387,
                            1404
                        ],
                        "other.axes": [
                            1387
                        ],
                        "other": [
                            1393,
                            1394,
                            1387,
                            1405
                        ],
                        "len": [
                            1394,
                            1388
                        ],
                        "all": [
                            1406,
                            1390
                        ],
                        "ax1.equals": [
                            1390
                        ],
                        "ax1": [
                            1390
                        ],
                        "ax2": [
                            1390
                        ],
                        "zip": [
                            1390,
                            1407
                        ],
                        "self._consolidate_inplace": [
                            1392
                        ],
                        "other._consolidate_inplace": [
                            1393
                        ],
                        "self.blocks": [
                            1394,
                            1404
                        ],
                        "other.blocks": [
                            1394,
                            1405
                        ],
                        "block.dtype.name": [
                            1402
                        ],
                        "block.dtype": [
                            1402
                        ],
                        "block": [
                            1402,
                            1407
                        ],
                        "block.mgr_locs.as_array.tolist": [
                            1402
                        ],
                        "block.mgr_locs.as_array": [
                            1402
                        ],
                        "block.mgr_locs": [
                            1402
                        ],
                        "self_blocks": [
                            1404,
                            1407
                        ],
                        "sorted": [
                            1404,
                            1405
                        ],
                        "canonicalize": [
                            1404,
                            1405
                        ],
                        "other_blocks": [
                            1405,
                            1407
                        ],
                        "block.equals": [
                            1407
                        ],
                        "oblock": [
                            1407
                        ]
                    },
                    "filtered_variables": {
                        "self_axes": [
                            1387,
                            1388,
                            1390
                        ],
                        "other_axes": [
                            1387,
                            1388,
                            1390
                        ],
                        "self.axes": [
                            1387
                        ],
                        "self": [
                            1392,
                            1394,
                            1387,
                            1404
                        ],
                        "other.axes": [
                            1387
                        ],
                        "other": [
                            1393,
                            1394,
                            1387,
                            1405
                        ],
                        "ax1.equals": [
                            1390
                        ],
                        "ax1": [
                            1390
                        ],
                        "ax2": [
                            1390
                        ],
                        "self._consolidate_inplace": [
                            1392
                        ],
                        "other._consolidate_inplace": [
                            1393
                        ],
                        "self.blocks": [
                            1394,
                            1404
                        ],
                        "other.blocks": [
                            1394,
                            1405
                        ],
                        "block.dtype.name": [
                            1402
                        ],
                        "block.dtype": [
                            1402
                        ],
                        "block": [
                            1402,
                            1407
                        ],
                        "block.mgr_locs.as_array.tolist": [
                            1402
                        ],
                        "block.mgr_locs.as_array": [
                            1402
                        ],
                        "block.mgr_locs": [
                            1402
                        ],
                        "self_blocks": [
                            1404,
                            1407
                        ],
                        "canonicalize": [
                            1404,
                            1405
                        ],
                        "other_blocks": [
                            1405,
                            1407
                        ],
                        "block.equals": [
                            1407
                        ],
                        "oblock": [
                            1407
                        ]
                    },
                    "diff_line_number": 1397,
                    "class_data": {
                        "signature": "class BlockManager(PandasObject)",
                        "docstring": "Core internal data structure to implement DataFrame, Series, etc.\n\nManage a bunch of labeled 2D mixed-type ndarrays. Essentially it's a\nlightweight blocked set of labeled data to be manipulated by the DataFrame\npublic API class\n\nAttributes\n----------\nshape\nndim\naxes\nvalues\nitems\n\nMethods\n-------\nset_axis(axis, new_labels)\ncopy(deep=True)\n\nget_dtype_counts\nget_ftype_counts\nget_dtypes\nget_ftypes\n\napply(func, axes, block_filter_fn)\n\nget_bool_data\nget_numeric_data\n\nget_slice(slice_like, axis)\nget(label)\niget(loc)\n\ntake(indexer, axis)\nreindex_axis(new_labels, axis)\nreindex_indexer(new_labels, indexer, axis)\n\ndelete(label)\ninsert(loc, label, value)\nset(label, value)\n\nParameters\n----------\n\n\nNotes\n-----\nThis is *not* a public API class",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True):\n    self.axes = [ensure_index(ax) for ax in axes]\n    self.blocks = tuple(blocks)\n    for block in blocks:\n        if self.ndim != block.ndim:\n            raise AssertionError('Number of Block dimensions ({block}) must equal number of axes ({self})'.format(block=block.ndim, self=self.ndim))\n    if do_integrity_check:\n        self._verify_integrity()\n    self._consolidate_check()\n    self._rebuild_blknos_and_blklocs()",
                            "def make_empty(self, axes=None):\n    \"\"\" return an empty BlockManager with the items axis of len 0 \"\"\"\n    if axes is None:\n        axes = [ensure_index([])] + [ensure_index(a) for a in self.axes[1:]]\n    if self.ndim == 1:\n        blocks = np.array([], dtype=self.array_dtype)\n    else:\n        blocks = []\n    return self.__class__(blocks, axes)",
                            "def __nonzero__(self):\n    return True",
                            "@property\ndef shape(self):\n    return tuple((len(ax) for ax in self.axes))",
                            "@property\ndef ndim(self) -> int:\n    return len(self.axes)",
                            "def set_axis(self, axis, new_labels):\n    new_labels = ensure_index(new_labels)\n    old_len = len(self.axes[axis])\n    new_len = len(new_labels)\n    if new_len != old_len:\n        raise ValueError('Length mismatch: Expected axis has {old} elements, new values have {new} elements'.format(old=old_len, new=new_len))\n    self.axes[axis] = new_labels",
                            "def rename_axis(self, mapper, axis, copy=True, level=None):\n    \"\"\"\n    Rename one of axes.\n\n    Parameters\n    ----------\n    mapper : unary callable\n    axis : int\n    copy : boolean, default True\n    level : int, default None\n    \"\"\"\n    obj = self.copy(deep=copy)\n    obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))\n    return obj",
                            "@property\ndef _is_single_block(self):\n    if self.ndim == 1:\n        return True\n    if len(self.blocks) != 1:\n        return False\n    blk = self.blocks[0]\n    return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(0, len(self), 1)",
                            "def _rebuild_blknos_and_blklocs(self):\n    \"\"\"\n    Update mgr._blknos / mgr._blklocs.\n    \"\"\"\n    new_blknos = np.empty(self.shape[0], dtype=np.int64)\n    new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n    new_blknos.fill(-1)\n    new_blklocs.fill(-1)\n    for blkno, blk in enumerate(self.blocks):\n        rl = blk.mgr_locs\n        new_blknos[rl.indexer] = blkno\n        new_blklocs[rl.indexer] = np.arange(len(rl))\n    if (new_blknos == -1).any():\n        raise AssertionError('Gaps in blk ref_locs')\n    self._blknos = new_blknos\n    self._blklocs = new_blklocs",
                            "@property\ndef items(self):\n    return self.axes[0]",
                            "def _get_counts(self, f):\n    \"\"\" return a dict of the counts of the function in BlockManager \"\"\"\n    self._consolidate_inplace()\n    counts = dict()\n    for b in self.blocks:\n        v = f(b)\n        counts[v] = counts.get(v, 0) + b.shape[0]\n    return counts",
                            "def get_dtype_counts(self):\n    return self._get_counts(lambda b: b.dtype.name)",
                            "def get_ftype_counts(self):\n    return self._get_counts(lambda b: b.ftype)",
                            "def get_dtypes(self):\n    dtypes = np.array([blk.dtype for blk in self.blocks])\n    return algos.take_1d(dtypes, self._blknos, allow_fill=False)",
                            "def get_ftypes(self):\n    ftypes = np.array([blk.ftype for blk in self.blocks])\n    return algos.take_1d(ftypes, self._blknos, allow_fill=False)",
                            "def __getstate__(self):\n    block_values = [b.values for b in self.blocks]\n    block_items = [self.items[b.mgr_locs.indexer] for b in self.blocks]\n    axes_array = list(self.axes)\n    extra_state = {'0.14.1': {'axes': axes_array, 'blocks': [dict(values=b.values, mgr_locs=b.mgr_locs.indexer) for b in self.blocks]}}\n    return (axes_array, block_values, block_items, extra_state)",
                            "def __setstate__(self, state):\n\n    def unpickle_block(values, mgr_locs):\n        return make_block(values, placement=mgr_locs)\n    if isinstance(state, tuple) and len(state) >= 4 and ('0.14.1' in state[3]):\n        state = state[3]['0.14.1']\n        self.axes = [ensure_index(ax) for ax in state['axes']]\n        self.blocks = tuple((unpickle_block(b['values'], b['mgr_locs']) for b in state['blocks']))\n    else:\n        ax_arrays, bvalues, bitems = state[:3]\n        self.axes = [ensure_index(ax) for ax in ax_arrays]\n        if len(bitems) == 1 and self.axes[0].equals(bitems[0]):\n            all_mgr_locs = [slice(0, len(bitems[0]))]\n        else:\n            all_mgr_locs = [self.axes[0].get_indexer(blk_items) for blk_items in bitems]\n        self.blocks = tuple((unpickle_block(values, mgr_locs) for values, mgr_locs in zip(bvalues, all_mgr_locs)))\n    self._post_setstate()",
                            "def _post_setstate(self):\n    self._is_consolidated = False\n    self._known_consolidated = False\n    self._rebuild_blknos_and_blklocs()",
                            "def __len__(self) -> int:\n    return len(self.items)",
                            "def __repr__(self) -> str:\n    output = pprint_thing(self.__class__.__name__)\n    for i, ax in enumerate(self.axes):\n        if i == 0:\n            output += '\\nItems: {ax}'.format(ax=ax)\n        else:\n            output += '\\nAxis {i}: {ax}'.format(i=i, ax=ax)\n    for block in self.blocks:\n        output += '\\n{block}'.format(block=pprint_thing(block))\n    return output",
                            "def _verify_integrity(self):\n    mgr_shape = self.shape\n    tot_items = sum((len(x.mgr_locs) for x in self.blocks))\n    for block in self.blocks:\n        if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n            construction_error(tot_items, block.shape[1:], self.axes)\n    if len(self.items) != tot_items:\n        raise AssertionError('Number of manager items must equal union of block items\\n# manager items: {0}, # tot_items: {1}'.format(len(self.items), tot_items))",
                            "def apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs):\n    \"\"\"\n    iterate over the blocks, collect and create a new block manager\n\n    Parameters\n    ----------\n    f : the callable or function name to operate on at the block level\n    axes : optional (if not supplied, use self.axes)\n    filter : list, if supplied, only call the block if the filter is in\n             the block\n    do_integrity_check : boolean, default False. Do the block manager\n        integrity check\n    consolidate: boolean, default True. Join together blocks having same\n        dtype\n\n    Returns\n    -------\n    Block Manager (new object)\n\n    \"\"\"\n    result_blocks = []\n    if filter is not None:\n        filter_locs = set(self.items.get_indexer_for(filter))\n        if len(filter_locs) == len(self.items):\n            filter = None\n        else:\n            kwargs['filter'] = filter_locs\n    if consolidate:\n        self._consolidate_inplace()\n    if f == 'where':\n        align_copy = True\n        if kwargs.get('align', True):\n            align_keys = ['other', 'cond']\n        else:\n            align_keys = ['cond']\n    elif f == 'putmask':\n        align_copy = False\n        if kwargs.get('align', True):\n            align_keys = ['new', 'mask']\n        else:\n            align_keys = ['mask']\n    elif f == 'fillna':\n        align_copy = False\n        align_keys = ['value']\n    else:\n        align_keys = []\n    aligned_args = {k: kwargs[k] for k in align_keys if not isinstance(kwargs[k], ABCExtensionArray) and hasattr(kwargs[k], 'values')}\n    for b in self.blocks:\n        if filter is not None:\n            if not b.mgr_locs.isin(filter_locs).any():\n                result_blocks.append(b)\n                continue\n        if aligned_args:\n            b_items = self.items[b.mgr_locs.indexer]\n            for k, obj in aligned_args.items():\n                axis = obj._info_axis_number\n                kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n        applied = getattr(b, f)(**kwargs)\n        result_blocks = _extend_blocks(applied, result_blocks)\n    if len(result_blocks) == 0:\n        return self.make_empty(axes or self.axes)\n    bm = self.__class__(result_blocks, axes or self.axes, do_integrity_check=do_integrity_check)\n    bm._consolidate_inplace()\n    return bm",
                            "def quantile(self, axis=0, consolidate=True, transposed=False, interpolation='linear', qs=None, numeric_only=None):\n    \"\"\"\n    Iterate over blocks applying quantile reduction.\n    This routine is intended for reduction type operations and\n    will do inference on the generated blocks.\n\n    Parameters\n    ----------\n    axis: reduction axis, default 0\n    consolidate: boolean, default True. Join together blocks having same\n        dtype\n    transposed: boolean, default False\n        we are holding transposed data\n    interpolation : type of interpolation, default 'linear'\n    qs : a scalar or list of the quantiles to be computed\n    numeric_only : ignored\n\n    Returns\n    -------\n    Block Manager (new object)\n    \"\"\"\n    assert self.ndim >= 2\n    if consolidate:\n        self._consolidate_inplace()\n\n    def get_axe(block, qs, axes):\n        from pandas import Float64Index\n        if is_list_like(qs):\n            ax = Float64Index(qs)\n        else:\n            ax = axes[0]\n        return ax\n    axes, blocks = ([], [])\n    for b in self.blocks:\n        block = b.quantile(axis=axis, qs=qs, interpolation=interpolation)\n        axe = get_axe(b, qs, axes=self.axes)\n        axes.append(axe)\n        blocks.append(block)\n    ndim = {b.ndim for b in blocks}\n    assert 0 not in ndim, ndim\n    if 2 in ndim:\n        new_axes = list(self.axes)\n        if len(blocks) > 1:\n            new_axes[1] = axes[0]\n            for b, sb in zip(blocks, self.blocks):\n                b.mgr_locs = sb.mgr_locs\n        else:\n            new_axes[axis] = Index(np.concatenate([ax.values for ax in axes]))\n        if transposed:\n            new_axes = new_axes[::-1]\n            blocks = [b.make_block(b.values.T, placement=np.arange(b.shape[1])) for b in blocks]\n        return self.__class__(blocks, new_axes)\n    values = concat_compat([b.values for b in blocks])\n    if len(self.blocks) > 1:\n        indexer = np.empty(len(self.axes[0]), dtype=np.intp)\n        i = 0\n        for b in self.blocks:\n            for j in b.mgr_locs:\n                indexer[j] = i\n                i = i + 1\n        values = values.take(indexer)\n    return SingleBlockManager([make_block(values, ndim=1, placement=np.arange(len(values)))], axes[0])",
                            "def isna(self, func, **kwargs):\n    return self.apply('apply', func=func, **kwargs)",
                            "def where(self, **kwargs):\n    return self.apply('where', **kwargs)",
                            "def setitem(self, **kwargs):\n    return self.apply('setitem', **kwargs)",
                            "def putmask(self, **kwargs):\n    return self.apply('putmask', **kwargs)",
                            "def diff(self, **kwargs):\n    return self.apply('diff', **kwargs)",
                            "def interpolate(self, **kwargs):\n    return self.apply('interpolate', **kwargs)",
                            "def shift(self, **kwargs):\n    return self.apply('shift', **kwargs)",
                            "def fillna(self, **kwargs):\n    return self.apply('fillna', **kwargs)",
                            "def downcast(self, **kwargs):\n    return self.apply('downcast', **kwargs)",
                            "def astype(self, dtype, **kwargs):\n    return self.apply('astype', dtype=dtype, **kwargs)",
                            "def convert(self, **kwargs):\n    return self.apply('convert', **kwargs)",
                            "def replace(self, value, **kwargs):\n    assert np.ndim(value) == 0, value\n    return self.apply('replace', value=value, **kwargs)",
                            "def replace_list(self, src_list, dest_list, inplace=False, regex=False):\n    \"\"\" do a list replace \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    values = self.as_array()\n\n    def comp(s, regex=False):\n        \"\"\"\n        Generate a bool array by perform an equality check, or perform\n        an element-wise regular expression matching\n        \"\"\"\n        if isna(s):\n            return isna(values)\n        if isinstance(s, (Timedelta, Timestamp)) and getattr(s, 'tz', None) is None:\n            return _compare_or_regex_search(maybe_convert_objects(values), s.asm8, regex)\n        return _compare_or_regex_search(values, s, regex)\n    masks = [comp(s, regex) for i, s in enumerate(src_list)]\n    result_blocks = []\n    src_len = len(src_list) - 1\n    for blk in self.blocks:\n        rb = [blk if inplace else blk.copy()]\n        for i, (s, d) in enumerate(zip(src_list, dest_list)):\n            new_rb = []\n            for b in rb:\n                m = masks[i][b.mgr_locs.indexer]\n                convert = i == src_len\n                result = b._replace_coerce(mask=m, to_replace=s, value=d, inplace=inplace, convert=convert, regex=regex)\n                if m.any():\n                    new_rb = _extend_blocks(result, new_rb)\n                else:\n                    new_rb.append(b)\n            rb = new_rb\n        result_blocks.extend(rb)\n    bm = self.__class__(result_blocks, self.axes)\n    bm._consolidate_inplace()\n    return bm",
                            "def is_consolidated(self):\n    \"\"\"\n    Return True if more than one block with the same dtype\n    \"\"\"\n    if not self._known_consolidated:\n        self._consolidate_check()\n    return self._is_consolidated",
                            "def _consolidate_check(self):\n    ftypes = [blk.ftype for blk in self.blocks]\n    self._is_consolidated = len(ftypes) == len(set(ftypes))\n    self._known_consolidated = True",
                            "@property\ndef is_mixed_type(self):\n    self._consolidate_inplace()\n    return len(self.blocks) > 1",
                            "@property\ndef is_numeric_mixed_type(self):\n    self._consolidate_inplace()\n    return all((block.is_numeric for block in self.blocks))",
                            "@property\ndef is_datelike_mixed_type(self):\n    self._consolidate_inplace()\n    return any((block.is_datelike for block in self.blocks))",
                            "@property\ndef any_extension_types(self):\n    \"\"\"Whether any of the blocks in this manager are extension blocks\"\"\"\n    return any((block.is_extension for block in self.blocks))",
                            "@property\ndef is_view(self):\n    \"\"\" return a boolean if we are a single block and are a view \"\"\"\n    if len(self.blocks) == 1:\n        return self.blocks[0].is_view\n    return False",
                            "def get_bool_data(self, copy=False):\n    \"\"\"\n    Parameters\n    ----------\n    copy : boolean, default False\n        Whether to copy the blocks\n    \"\"\"\n    self._consolidate_inplace()\n    return self.combine([b for b in self.blocks if b.is_bool], copy)",
                            "def get_numeric_data(self, copy=False):\n    \"\"\"\n    Parameters\n    ----------\n    copy : boolean, default False\n        Whether to copy the blocks\n    \"\"\"\n    self._consolidate_inplace()\n    return self.combine([b for b in self.blocks if b.is_numeric], copy)",
                            "def combine(self, blocks, copy=True):\n    \"\"\" return a new manager with the blocks \"\"\"\n    if len(blocks) == 0:\n        return self.make_empty()\n    indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks]))\n    inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n    new_blocks = []\n    for b in blocks:\n        b = b.copy(deep=copy)\n        b.mgr_locs = algos.take_1d(inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False)\n        new_blocks.append(b)\n    axes = list(self.axes)\n    axes[0] = self.items.take(indexer)\n    return self.__class__(new_blocks, axes, do_integrity_check=False)",
                            "def get_slice(self, slobj, axis=0):\n    if axis >= self.ndim:\n        raise IndexError('Requested axis not found in manager')\n    if axis == 0:\n        new_blocks = self._slice_take_blocks_ax0(slobj)\n    else:\n        slicer = [slice(None)] * (axis + 1)\n        slicer[axis] = slobj\n        slicer = tuple(slicer)\n        new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n    new_axes = list(self.axes)\n    new_axes[axis] = new_axes[axis][slobj]\n    bm = self.__class__(new_blocks, new_axes, do_integrity_check=False)\n    bm._consolidate_inplace()\n    return bm",
                            "def __contains__(self, item):\n    return item in self.items",
                            "@property\ndef nblocks(self):\n    return len(self.blocks)",
                            "def copy(self, deep=True):\n    \"\"\"\n    Make deep or shallow copy of BlockManager\n\n    Parameters\n    ----------\n    deep : boolean o rstring, default True\n        If False, return shallow copy (do not copy data)\n        If 'all', copy data and a deep copy of the index\n\n    Returns\n    -------\n    copy : BlockManager\n    \"\"\"\n    if deep:\n        if deep == 'all':\n            copy = lambda ax: ax.copy(deep=True)\n        else:\n            copy = lambda ax: ax.view()\n        new_axes = [copy(ax) for ax in self.axes]\n    else:\n        new_axes = list(self.axes)\n    return self.apply('copy', axes=new_axes, deep=deep, do_integrity_check=False)",
                            "def as_array(self, transpose=False, items=None):\n    \"\"\"Convert the blockmanager data into an numpy array.\n\n    Parameters\n    ----------\n    transpose : boolean, default False\n        If True, transpose the return array\n    items : list of strings or None\n        Names of block items that will be included in the returned\n        array. ``None`` means that all block items will be used\n\n    Returns\n    -------\n    arr : ndarray\n    \"\"\"\n    if len(self.blocks) == 0:\n        arr = np.empty(self.shape, dtype=float)\n        return arr.transpose() if transpose else arr\n    if items is not None:\n        mgr = self.reindex_axis(items, axis=0)\n    else:\n        mgr = self\n    if self._is_single_block and mgr.blocks[0].is_datetimetz:\n        arr = mgr.blocks[0].get_values(dtype=object)\n    elif self._is_single_block or not self.is_mixed_type:\n        arr = np.asarray(mgr.blocks[0].get_values())\n    else:\n        arr = mgr._interleave()\n    return arr.transpose() if transpose else arr",
                            "def _interleave(self):\n    \"\"\"\n    Return ndarray from blocks with specified item order\n    Items must be contained in the blocks\n    \"\"\"\n    dtype = _interleaved_dtype(self.blocks)\n    if is_sparse(dtype):\n        dtype = dtype.subtype\n    elif is_extension_array_dtype(dtype):\n        dtype = 'object'\n    result = np.empty(self.shape, dtype=dtype)\n    itemmask = np.zeros(self.shape[0])\n    for blk in self.blocks:\n        rl = blk.mgr_locs\n        result[rl.indexer] = blk.get_values(dtype)\n        itemmask[rl.indexer] = 1\n    if not itemmask.all():\n        raise AssertionError('Some items were not contained in blocks')\n    return result",
                            "def to_dict(self, copy=True):\n    \"\"\"\n    Return a dict of str(dtype) -> BlockManager\n\n    Parameters\n    ----------\n    copy : boolean, default True\n\n    Returns\n    -------\n    values : a dict of dtype -> BlockManager\n\n    Notes\n    -----\n    This consolidates based on str(dtype)\n    \"\"\"\n    self._consolidate_inplace()\n    bd = {}\n    for b in self.blocks:\n        bd.setdefault(str(b.dtype), []).append(b)\n    return {dtype: self.combine(blocks, copy=copy) for dtype, blocks in bd.items()}",
                            "def fast_xs(self, loc):\n    \"\"\"\n    get a cross sectional for a given location in the\n    items ; handle dups\n\n    return the result, is *could* be a view in the case of a\n    single block\n    \"\"\"\n    if len(self.blocks) == 1:\n        return self.blocks[0].iget((slice(None), loc))\n    items = self.items\n    if not items.is_unique:\n        result = self._interleave()\n        if self.ndim == 2:\n            result = result.T\n        return result[loc]\n    dtype = _interleaved_dtype(self.blocks)\n    n = len(items)\n    if is_extension_array_dtype(dtype):\n        result = np.empty(n, dtype=object)\n    else:\n        result = np.empty(n, dtype=dtype)\n    for blk in self.blocks:\n        for i, rl in enumerate(blk.mgr_locs):\n            result[rl] = blk.iget((i, loc))\n    if is_extension_array_dtype(dtype):\n        result = dtype.construct_array_type()._from_sequence(result, dtype=dtype)\n    return result",
                            "def consolidate(self):\n    \"\"\"\n    Join together blocks having same dtype\n\n    Returns\n    -------\n    y : BlockManager\n    \"\"\"\n    if self.is_consolidated():\n        return self\n    bm = self.__class__(self.blocks, self.axes)\n    bm._is_consolidated = False\n    bm._consolidate_inplace()\n    return bm",
                            "def _consolidate_inplace(self):\n    if not self.is_consolidated():\n        self.blocks = tuple(_consolidate(self.blocks))\n        self._is_consolidated = True\n        self._known_consolidated = True\n        self._rebuild_blknos_and_blklocs()",
                            "def get(self, item):\n    \"\"\"\n    Return values for selected item (ndarray or BlockManager).\n    \"\"\"\n    if self.items.is_unique:\n        if not isna(item):\n            loc = self.items.get_loc(item)\n        else:\n            indexer = np.arange(len(self.items))[isna(self.items)]\n            if not is_scalar(indexer):\n                if len(indexer) == 1:\n                    loc = indexer.item()\n                else:\n                    raise ValueError('cannot label index with a null key')\n        return self.iget(loc)\n    else:\n        if isna(item):\n            raise TypeError('cannot label index with a null key')\n        indexer = self.items.get_indexer_for([item])\n        return self.reindex_indexer(new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True)",
                            "def iget(self, i):\n    \"\"\"\n    Return the data as a SingleBlockManager if possible\n\n    Otherwise return as a ndarray\n    \"\"\"\n    block = self.blocks[self._blknos[i]]\n    values = block.iget(self._blklocs[i])\n    return SingleBlockManager([block.make_block_same_class(values, placement=slice(0, len(values)), ndim=1)], self.axes[1])",
                            "def delete(self, item):\n    \"\"\"\n    Delete selected item (items if non-unique) in-place.\n    \"\"\"\n    indexer = self.items.get_loc(item)\n    is_deleted = np.zeros(self.shape[0], dtype=np.bool_)\n    is_deleted[indexer] = True\n    ref_loc_offset = -is_deleted.cumsum()\n    is_blk_deleted = [False] * len(self.blocks)\n    if isinstance(indexer, int):\n        affected_start = indexer\n    else:\n        affected_start = is_deleted.nonzero()[0][0]\n    for blkno, _ in _fast_count_smallints(self._blknos[affected_start:]):\n        blk = self.blocks[blkno]\n        bml = blk.mgr_locs\n        blk_del = is_deleted[bml.indexer].nonzero()[0]\n        if len(blk_del) == len(bml):\n            is_blk_deleted[blkno] = True\n            continue\n        elif len(blk_del) != 0:\n            blk.delete(blk_del)\n            bml = blk.mgr_locs\n        blk.mgr_locs = bml.add(ref_loc_offset[bml.indexer])\n    self.axes[0] = self.items[~is_deleted]\n    self.blocks = tuple((b for blkno, b in enumerate(self.blocks) if not is_blk_deleted[blkno]))\n    self._shape = None\n    self._rebuild_blknos_and_blklocs()",
                            "def set(self, item, value):\n    \"\"\"\n    Set new item in-place. Does not consolidate. Adds new Block if not\n    contained in the current set of items\n    \"\"\"\n    value_is_extension_type = is_extension_array_dtype(value)\n    if value_is_extension_type:\n\n        def value_getitem(placement):\n            return value\n    else:\n        if value.ndim == self.ndim - 1:\n            value = _safe_reshape(value, (1,) + value.shape)\n\n            def value_getitem(placement):\n                return value\n        else:\n\n            def value_getitem(placement):\n                return value[placement.indexer]\n        if value.shape[1:] != self.shape[1:]:\n            raise AssertionError('Shape of new values must be compatible with manager shape')\n    try:\n        loc = self.items.get_loc(item)\n    except KeyError:\n        self.insert(len(self.items), item, value)\n        return\n    if isinstance(loc, int):\n        loc = [loc]\n    blknos = self._blknos[loc]\n    blklocs = self._blklocs[loc].copy()\n    unfit_mgr_locs = []\n    unfit_val_locs = []\n    removed_blknos = []\n    for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n        blk = self.blocks[blkno]\n        blk_locs = blklocs[val_locs.indexer]\n        if blk.should_store(value):\n            blk.set(blk_locs, value_getitem(val_locs))\n        else:\n            unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n            unfit_val_locs.append(val_locs)\n            if len(val_locs) == len(blk.mgr_locs):\n                removed_blknos.append(blkno)\n            else:\n                self._blklocs[blk.mgr_locs.indexer] = -1\n                blk.delete(blk_locs)\n                self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n    if len(removed_blknos):\n        is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n        is_deleted[removed_blknos] = True\n        new_blknos = np.empty(self.nblocks, dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n        self._blknos = algos.take_1d(new_blknos, self._blknos, axis=0, allow_fill=False)\n        self.blocks = tuple((blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)))\n    if unfit_val_locs:\n        unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n        unfit_count = len(unfit_mgr_locs)\n        new_blocks = []\n        if value_is_extension_type:\n            new_blocks.extend((make_block(values=value.copy(), ndim=self.ndim, placement=slice(mgr_loc, mgr_loc + 1)) for mgr_loc in unfit_mgr_locs))\n            self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n            self._blklocs[unfit_mgr_locs] = 0\n        else:\n            unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n            new_blocks.append(make_block(values=value_getitem(unfit_val_items), ndim=self.ndim, placement=unfit_mgr_locs))\n            self._blknos[unfit_mgr_locs] = len(self.blocks)\n            self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n        self.blocks += tuple(new_blocks)\n        self._known_consolidated = False",
                            "def insert(self, loc: int, item, value, allow_duplicates: bool=False):\n    \"\"\"\n    Insert item at selected position.\n\n    Parameters\n    ----------\n    loc : int\n    item : hashable\n    value : array_like\n    allow_duplicates: bool\n        If False, trying to insert non-unique item will raise\n\n    \"\"\"\n    if not allow_duplicates and item in self.items:\n        raise ValueError('cannot insert {}, already exists'.format(item))\n    if not isinstance(loc, int):\n        raise TypeError('loc must be int')\n    new_axis = self.items.insert(loc, item)\n    block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n    for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n        blk = self.blocks[blkno]\n        if count == len(blk.mgr_locs):\n            blk.mgr_locs = blk.mgr_locs.add(1)\n        else:\n            new_mgr_locs = blk.mgr_locs.as_array.copy()\n            new_mgr_locs[new_mgr_locs >= loc] += 1\n            blk.mgr_locs = new_mgr_locs\n    if loc == self._blklocs.shape[0]:\n        self._blklocs = np.append(self._blklocs, 0)\n        self._blknos = np.append(self._blknos, len(self.blocks))\n    else:\n        self._blklocs = np.insert(self._blklocs, loc, 0)\n        self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n    self.axes[0] = new_axis\n    self.blocks += (block,)\n    self._shape = None\n    self._known_consolidated = False\n    if len(self.blocks) > 100:\n        self._consolidate_inplace()",
                            "def reindex_axis(self, new_index, axis, method=None, limit=None, fill_value=None, copy=True):\n    \"\"\"\n    Conform block manager to new index.\n    \"\"\"\n    new_index = ensure_index(new_index)\n    new_index, indexer = self.axes[axis].reindex(new_index, method=method, limit=limit)\n    return self.reindex_indexer(new_index, indexer, axis=axis, fill_value=fill_value, copy=copy)",
                            "def reindex_indexer(self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True):\n    \"\"\"\n    Parameters\n    ----------\n    new_axis : Index\n    indexer : ndarray of int64 or None\n    axis : int\n    fill_value : object\n    allow_dups : bool\n\n    pandas-indexer with -1's only.\n    \"\"\"\n    if indexer is None:\n        if new_axis is self.axes[axis] and (not copy):\n            return self\n        result = self.copy(deep=copy)\n        result.axes = list(self.axes)\n        result.axes[axis] = new_axis\n        return result\n    self._consolidate_inplace()\n    if not allow_dups:\n        self.axes[axis]._can_reindex(indexer)\n    if axis >= self.ndim:\n        raise IndexError('Requested axis not found in manager')\n    if axis == 0:\n        new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(fill_value,))\n    else:\n        new_blocks = [blk.take_nd(indexer, axis=axis, fill_tuple=(fill_value if fill_value is not None else blk.fill_value,)) for blk in self.blocks]\n    new_axes = list(self.axes)\n    new_axes[axis] = new_axis\n    return self.__class__(new_blocks, new_axes)",
                            "def _slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None):\n    \"\"\"\n    Slice/take blocks along axis=0.\n\n    Overloaded for SingleBlock\n\n    Returns\n    -------\n    new_blocks : list of Block\n    \"\"\"\n    allow_fill = fill_tuple is not None\n    sl_type, slobj, sllen = _preprocess_slice_or_indexer(slice_or_indexer, self.shape[0], allow_fill=allow_fill)\n    if self._is_single_block:\n        blk = self.blocks[0]\n        if sl_type in ('slice', 'mask'):\n            return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n        elif not allow_fill or self.ndim == 1:\n            if allow_fill and fill_tuple[0] is None:\n                _, fill_value = maybe_promote(blk.dtype)\n                fill_tuple = (fill_value,)\n            return [blk.take_nd(slobj, axis=0, new_mgr_locs=slice(0, sllen), fill_tuple=fill_tuple)]\n    if sl_type in ('slice', 'mask'):\n        blknos = self._blknos[slobj]\n        blklocs = self._blklocs[slobj]\n    else:\n        blknos = algos.take_1d(self._blknos, slobj, fill_value=-1, allow_fill=allow_fill)\n        blklocs = algos.take_1d(self._blklocs, slobj, fill_value=-1, allow_fill=allow_fill)\n    blocks = []\n    for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n        if blkno == -1:\n            fill_value = fill_tuple[0]\n            blocks.append(self._make_na_block(placement=mgr_locs, fill_value=fill_value))\n        else:\n            blk = self.blocks[blkno]\n            if not blk._can_consolidate:\n                for mgr_loc in mgr_locs:\n                    newblk = blk.copy(deep=True)\n                    newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                    blocks.append(newblk)\n            else:\n                blocks.append(blk.take_nd(blklocs[mgr_locs.indexer], axis=0, new_mgr_locs=mgr_locs, fill_tuple=None))\n    return blocks",
                            "def _make_na_block(self, placement, fill_value=None):\n    if fill_value is None:\n        fill_value = np.nan\n    block_shape = list(self.shape)\n    block_shape[0] = len(placement)\n    dtype, fill_value = infer_dtype_from_scalar(fill_value)\n    block_values = np.empty(block_shape, dtype=dtype)\n    block_values.fill(fill_value)\n    return make_block(block_values, placement=placement)",
                            "def take(self, indexer, axis=1, verify=True, convert=True):\n    \"\"\"\n    Take items along any axis.\n    \"\"\"\n    self._consolidate_inplace()\n    indexer = np.arange(indexer.start, indexer.stop, indexer.step, dtype='int64') if isinstance(indexer, slice) else np.asanyarray(indexer, dtype='int64')\n    n = self.shape[axis]\n    if convert:\n        indexer = maybe_convert_indices(indexer, n)\n    if verify:\n        if ((indexer == -1) | (indexer >= n)).any():\n            raise Exception('Indices must be nonzero and less than the axis length')\n    new_labels = self.axes[axis].take(indexer)\n    return self.reindex_indexer(new_axis=new_labels, indexer=indexer, axis=axis, allow_dups=True)",
                            "def equals(self, other):\n    self_axes, other_axes = (self.axes, other.axes)\n    if len(self_axes) != len(other_axes):\n        return False\n    if not all((ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes))):\n        return False\n    self._consolidate_inplace()\n    other._consolidate_inplace()\n    if len(self.blocks) != len(other.blocks):\n        return False\n\n    def canonicalize(block):\n        return (block.dtype.name, block.mgr_locs.as_array.tolist())\n    self_blocks = sorted(self.blocks, key=canonicalize)\n    other_blocks = sorted(other.blocks, key=canonicalize)\n    return all((block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)))",
                            "def unstack(self, unstacker_func, fill_value):\n    \"\"\"Return a blockmanager with all blocks unstacked.\n\n    Parameters\n    ----------\n    unstacker_func : callable\n        A (partially-applied) ``pd.core.reshape._Unstacker`` class.\n    fill_value : Any\n        fill_value for newly introduced missing values.\n\n    Returns\n    -------\n    unstacked : BlockManager\n    \"\"\"\n    n_rows = self.shape[-1]\n    dummy = unstacker_func(np.empty((0, 0)), value_columns=self.items)\n    new_columns = dummy.get_new_columns()\n    new_index = dummy.get_new_index()\n    new_blocks = []\n    columns_mask = []\n    for blk in self.blocks:\n        blocks, mask = blk._unstack(partial(unstacker_func, value_columns=self.items[blk.mgr_locs.indexer]), new_columns, n_rows, fill_value)\n        new_blocks.extend(blocks)\n        columns_mask.extend(mask)\n    new_columns = new_columns[columns_mask]\n    bm = BlockManager(new_blocks, [new_columns, new_index])\n    return bm",
                            "def unpickle_block(values, mgr_locs):\n    return make_block(values, placement=mgr_locs)",
                            "def get_axe(block, qs, axes):\n    from pandas import Float64Index\n    if is_list_like(qs):\n        ax = Float64Index(qs)\n    else:\n        ax = axes[0]\n    return ax",
                            "def comp(s, regex=False):\n    \"\"\"\n    Generate a bool array by perform an equality check, or perform\n    an element-wise regular expression matching\n    \"\"\"\n    if isna(s):\n        return isna(values)\n    if isinstance(s, (Timedelta, Timestamp)) and getattr(s, 'tz', None) is None:\n        return _compare_or_regex_search(maybe_convert_objects(values), s.asm8, regex)\n    return _compare_or_regex_search(values, s, regex)",
                            "def canonicalize(block):\n    return (block.dtype.name, block.mgr_locs.as_array.tolist())",
                            "def value_getitem(placement):\n    return value",
                            "def value_getitem(placement):\n    return value",
                            "def value_getitem(placement):\n    return value[placement.indexer]"
                        ],
                        "constructor_variables": [
                            "axes",
                            "blocks"
                        ],
                        "class_level_variables": [
                            "__slots__",
                            "__bool__"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
                            "make_empty(self, axes=None)",
                            "__nonzero__(self)",
                            "shape(self)",
                            "ndim(self) -> int",
                            "set_axis(self, axis, new_labels)",
                            "rename_axis(self, mapper, axis, copy=True, level=None)",
                            "_is_single_block(self)",
                            "_rebuild_blknos_and_blklocs(self)",
                            "items(self)",
                            "_get_counts(self, f)",
                            "get_dtype_counts(self)",
                            "get_ftype_counts(self)",
                            "get_dtypes(self)",
                            "get_ftypes(self)",
                            "__getstate__(self)",
                            "__setstate__(self, state)",
                            "_post_setstate(self)",
                            "__len__(self) -> int",
                            "__repr__(self) -> str",
                            "_verify_integrity(self)",
                            "apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs)",
                            "quantile(self, axis=0, consolidate=True, transposed=False, interpolation='linear', qs=None, numeric_only=None)",
                            "isna(self, func, **kwargs)",
                            "where(self, **kwargs)",
                            "setitem(self, **kwargs)",
                            "putmask(self, **kwargs)",
                            "diff(self, **kwargs)",
                            "interpolate(self, **kwargs)",
                            "shift(self, **kwargs)",
                            "fillna(self, **kwargs)",
                            "downcast(self, **kwargs)",
                            "astype(self, dtype, **kwargs)",
                            "convert(self, **kwargs)",
                            "replace(self, value, **kwargs)",
                            "replace_list(self, src_list, dest_list, inplace=False, regex=False)",
                            "is_consolidated(self)",
                            "_consolidate_check(self)",
                            "is_mixed_type(self)",
                            "is_numeric_mixed_type(self)",
                            "is_datelike_mixed_type(self)",
                            "any_extension_types(self)",
                            "is_view(self)",
                            "get_bool_data(self, copy=False)",
                            "get_numeric_data(self, copy=False)",
                            "combine(self, blocks, copy=True)",
                            "get_slice(self, slobj, axis=0)",
                            "__contains__(self, item)",
                            "nblocks(self)",
                            "copy(self, deep=True)",
                            "as_array(self, transpose=False, items=None)",
                            "_interleave(self)",
                            "to_dict(self, copy=True)",
                            "fast_xs(self, loc)",
                            "consolidate(self)",
                            "_consolidate_inplace(self)",
                            "get(self, item)",
                            "iget(self, i)",
                            "delete(self, item)",
                            "set(self, item, value)",
                            "insert(self, loc: int, item, value, allow_duplicates: bool=False)",
                            "reindex_axis(self, new_index, axis, method=None, limit=None, fill_value=None, copy=True)",
                            "reindex_indexer(self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True)",
                            "_slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None)",
                            "_make_na_block(self, placement, fill_value=None)",
                            "take(self, indexer, axis=1, verify=True, convert=True)",
                            "equals(self, other)",
                            "unstack(self, unstacker_func, fill_value)",
                            "unpickle_block(values, mgr_locs)",
                            "get_axe(block, qs, axes)",
                            "comp(s, regex=False)",
                            "canonicalize(block)",
                            "value_getitem(placement)",
                            "value_getitem(placement)",
                            "value_getitem(placement)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "block": {
                                    "variable_value": "IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64",
                                    "variable_type": "IntBlock",
                                    "variable_shape": "(1, 2)"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x113f72430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": "<bound method Block.equals of IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "block": {
                                    "variable_value": "ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "(1, 2)"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(1, 2, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x113f72430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": "<bound method Block.equals of ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "block": {
                                    "variable_value": "IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64",
                                    "variable_type": "IntBlock",
                                    "variable_shape": "(1, 2)"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(1, 2, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x113f72430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": "<bound method Block.equals of IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "block": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "(1, 2)"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x113f72430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": "<bound method Block.equals of ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x113f72430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": "[IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": "IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64",
                                    "variable_type": "IntBlock",
                                    "variable_shape": "(1, 2)"
                                },
                                "block.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x116c714c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": "<bound method Block.equals of IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(1, 2, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": "ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "(1, 2)"
                                },
                                "block.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x116c714c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": "<bound method Block.equals of ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(1, 2, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": "IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64",
                                    "variable_type": "IntBlock",
                                    "variable_shape": "(1, 2)"
                                },
                                "block.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "self_blocks": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x116c714c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": "<bound method Block.equals of IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "(1, 2)"
                                },
                                "block.dtype.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "self_blocks": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x116c714c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": "<bound method Block.equals of ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canonicalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other_axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "other.axes": {
                                    "variable_value": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "(2, 2)"
                                },
                                "ax1.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ax2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "other.blocks": {
                                    "variable_value": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "block.mgr_locs.as_array.tolist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_blocks": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "canonicalize": {
                                    "variable_value": "<function BlockManager.equals.<locals>.canonicalize at 0x116c714c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "other_blocks": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object, IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "block.equals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "oblock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def create_block_manager_from_blocks(blocks, axes):\n    try:\n        if len(blocks) == 1 and not isinstance(blocks[0], Block):\n            # if blocks[0] is of length 0, return empty blocks\n            if not len(blocks[0]):\n                blocks = []\n            else:\n                # It's OK if a single block is passed as values, its placement\n                # is basically \"all items\", but if there're many, don't bother\n                # converting, it's an error anyway.\n                blocks = [\n                    make_block(values=blocks[0], placement=slice(0, len(axes[0])))\n                ]\n\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n\n    except ValueError as e:\n        blocks = [getattr(b, \"values\", b) for b in blocks]\n        tot_items = sum(b.shape[0] for b in blocks)\n        construction_error(tot_items, blocks[0].shape[1:], axes, e)",
                "def create_block_manager_from_arrays(arrays, names, axes):\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        construction_error(len(arrays), arrays[0].shape, axes, e)",
                "def construction_error(tot_items, block_shape, axes, e=None):\n    \"\"\" raise a helpful message about our construction \"\"\"\n    passed = tuple(map(int, [tot_items] + list(block_shape)))\n    # Correcting the user facing error message during dataframe construction\n    if len(passed) <= 2:\n        passed = passed[::-1]\n\n    implied = tuple(len(ax) for ax in axes)\n    # Correcting the user facing error message during dataframe construction\n    if len(implied) <= 2:\n        implied = implied[::-1]\n\n    if passed == implied and e is not None:\n        raise e\n    if block_shape[0] == 0:\n        raise ValueError(\"Empty data passed with indices specified.\")\n    raise ValueError(\n        \"Shape of passed values is {0}, indices imply {1}\".format(passed, implied)\n    )",
                "def form_blocks(arrays, names, axes):\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict = defaultdict(list)\n    extra_locs = []\n\n    names_idx = ensure_index(names)\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], _NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=[i])\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=[i])\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
                "def _simple_blockify(tuples, dtype):\n    \"\"\" return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
                "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
                "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
                "def _interleaved_dtype(\n    blocks: List[Block],\n) -> Optional[Union[np.dtype, ExtensionDtype]]:\n    \"\"\"Find the common dtype for `blocks`.\n\n    Parameters\n    ----------\n    blocks : List[Block]\n\n    Returns\n    -------\n    dtype : Optional[Union[np.dtype, ExtensionDtype]]\n        None is returned when `blocks` is empty.\n    \"\"\"\n    if not len(blocks):\n        return None\n\n    return find_common_type([b.dtype for b in blocks])",
                "def _consolidate(blocks):\n    \"\"\"\n    Merge blocks having same dtype, exclude non-consolidating blocks\n    \"\"\"\n\n    # sort by _can_consolidate, dtype\n    gkey = lambda x: x._consolidate_key\n    grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)\n\n    new_blocks = []\n    for (_can_consolidate, dtype), group_blocks in grouper:\n        merged_blocks = _merge_blocks(\n            list(group_blocks), dtype=dtype, _can_consolidate=_can_consolidate\n        )\n        new_blocks = _extend_blocks(merged_blocks, new_blocks)\n    return new_blocks",
                "def _compare_or_regex_search(a, b, regex=False):\n    \"\"\"\n    Compare two array_like inputs of the same shape or two scalar values\n\n    Calls operator.eq or re.search, depending on regex argument. If regex is\n    True, perform an element-wise regex matching.\n\n    Parameters\n    ----------\n    a : array_like or scalar\n    b : array_like or scalar\n    regex : bool, default False\n\n    Returns\n    -------\n    mask : array_like of bool\n    \"\"\"\n    if not regex:\n        op = lambda x: operator.eq(x, b)\n    else:\n        op = np.vectorize(\n            lambda x: bool(re.search(b, x)) if isinstance(x, str) else False\n        )\n\n    is_a_array = isinstance(a, np.ndarray)\n    is_b_array = isinstance(b, np.ndarray)\n\n    result = op(a)\n\n    if is_scalar(result) and (is_a_array or is_b_array):\n        type_names = [type(a).__name__, type(b).__name__]\n\n        if is_a_array:\n            type_names[0] = \"ndarray(dtype={dtype})\".format(dtype=a.dtype)\n\n        if is_b_array:\n            type_names[1] = \"ndarray(dtype={dtype})\".format(dtype=b.dtype)\n\n        raise TypeError(\n            \"Cannot compare types {a!r} and {b!r}\".format(\n                a=type_names[0], b=type_names[1]\n            )\n        )\n    return result",
                "def _transform_index(index, func, level=None):\n    \"\"\"\n    Apply function to all values found in index.\n\n    This includes transforming multiindex entries separately.\n    Only apply function to one level of the MultiIndex if level is specified.\n\n    \"\"\"\n    if isinstance(index, MultiIndex):\n        if level is not None:\n            items = [\n                tuple(func(y) if i == level else y for i, y in enumerate(x))\n                for x in index\n            ]\n        else:\n            items = [tuple(func(y) for y in x) for x in index]\n        return MultiIndex.from_tuples(items, names=index.names)\n    else:\n        items = [func(x) for x in index]\n        return Index(items, name=index.name, tupleize_cols=False)",
                "def _fast_count_smallints(arr):\n    \"\"\"Faster version of set(arr) for sequences of small numbers.\"\"\"\n    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]",
                "def _preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill):\n    if isinstance(slice_or_indexer, slice):\n        return (\n            \"slice\",\n            slice_or_indexer,\n            libinternals.slice_len(slice_or_indexer, length),\n        )\n    elif (\n        isinstance(slice_or_indexer, np.ndarray) and slice_or_indexer.dtype == np.bool_\n    ):\n        return \"mask\", slice_or_indexer, slice_or_indexer.sum()\n    else:\n        indexer = np.asanyarray(slice_or_indexer, dtype=np.int64)\n        if not allow_fill:\n            indexer = maybe_convert_indices(indexer, length)\n        return \"fancy\", indexer, len(indexer)",
                "def concatenate_block_managers(mgrs_indexers, axes, concat_axis, copy):\n    \"\"\"\n    Concatenate block managers into one.\n\n    Parameters\n    ----------\n    mgrs_indexers : list of (BlockManager, {axis: indexer,...}) tuples\n    axes : list of Index\n    concat_axis : int\n    copy : bool\n\n    \"\"\"\n    concat_plans = [\n        get_mgr_concatenation_plan(mgr, indexers) for mgr, indexers in mgrs_indexers\n    ]\n    concat_plan = combine_concat_plans(concat_plans, concat_axis)\n    blocks = []\n\n    for placement, join_units in concat_plan:\n\n        if len(join_units) == 1 and not join_units[0].indexers:\n            b = join_units[0].block\n            values = b.values\n            if copy:\n                values = values.copy()\n            else:\n                values = values.view()\n            b = b.make_block_same_class(values, placement=placement)\n        elif is_uniform_join_units(join_units):\n            b = join_units[0].block.concat_same_type(\n                [ju.block for ju in join_units], placement=placement\n            )\n        else:\n            b = make_block(\n                concatenate_join_units(join_units, concat_axis, copy=copy),\n                placement=placement,\n            )\n        blocks.append(b)\n\n    return BlockManager(blocks, axes)",
                "def __init__(\n    self,\n    blocks: Sequence[Block],\n    axes: Sequence[Index],\n    do_integrity_check: bool = True,\n):\n    self.axes = [ensure_index(ax) for ax in axes]\n    self.blocks = tuple(blocks)  # type: Tuple[Block, ...]\n\n    for block in blocks:\n        if self.ndim != block.ndim:\n            raise AssertionError(\n                \"Number of Block dimensions ({block}) must equal \"\n                \"number of axes ({self})\".format(block=block.ndim, self=self.ndim)\n            )\n\n    if do_integrity_check:\n        self._verify_integrity()\n\n    self._consolidate_check()\n\n    self._rebuild_blknos_and_blklocs()",
                "def make_empty(self, axes=None):\n    \"\"\" return an empty BlockManager with the items axis of len 0 \"\"\"\n    if axes is None:\n        axes = [ensure_index([])] + [ensure_index(a) for a in self.axes[1:]]\n\n    # preserve dtype if possible\n    if self.ndim == 1:\n        blocks = np.array([], dtype=self.array_dtype)\n    else:\n        blocks = []\n    return self.__class__(blocks, axes)",
                "def __nonzero__(self):\n    return True",
                "@property\ndef shape(self):\n    return tuple(len(ax) for ax in self.axes)",
                "@property\ndef ndim(self) -> int:\n    return len(self.axes)",
                "def set_axis(self, axis, new_labels):\n    new_labels = ensure_index(new_labels)\n    old_len = len(self.axes[axis])\n    new_len = len(new_labels)\n\n    if new_len != old_len:\n        raise ValueError(\n            \"Length mismatch: Expected axis has {old} elements, new \"\n            \"values have {new} elements\".format(old=old_len, new=new_len)\n        )\n\n    self.axes[axis] = new_labels",
                "def rename_axis(self, mapper, axis, copy=True, level=None):\n    \"\"\"\n    Rename one of axes.\n\n    Parameters\n    ----------\n    mapper : unary callable\n    axis : int\n    copy : boolean, default True\n    level : int, default None\n    \"\"\"\n    obj = self.copy(deep=copy)\n    obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))\n    return obj",
                "@property\ndef _is_single_block(self):\n    if self.ndim == 1:\n        return True\n\n    if len(self.blocks) != 1:\n        return False\n\n    blk = self.blocks[0]\n    return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n        0, len(self), 1\n    )",
                "def _rebuild_blknos_and_blklocs(self):\n    \"\"\"\n    Update mgr._blknos / mgr._blklocs.\n    \"\"\"\n    new_blknos = np.empty(self.shape[0], dtype=np.int64)\n    new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n    new_blknos.fill(-1)\n    new_blklocs.fill(-1)\n\n    for blkno, blk in enumerate(self.blocks):\n        rl = blk.mgr_locs\n        new_blknos[rl.indexer] = blkno\n        new_blklocs[rl.indexer] = np.arange(len(rl))\n\n    if (new_blknos == -1).any():\n        raise AssertionError(\"Gaps in blk ref_locs\")\n\n    self._blknos = new_blknos\n    self._blklocs = new_blklocs",
                "@property\ndef items(self):\n    return self.axes[0]",
                "def _get_counts(self, f):\n    \"\"\" return a dict of the counts of the function in BlockManager \"\"\"\n    self._consolidate_inplace()\n    counts = dict()\n    for b in self.blocks:\n        v = f(b)\n        counts[v] = counts.get(v, 0) + b.shape[0]\n    return counts",
                "def get_dtype_counts(self):\n    return self._get_counts(lambda b: b.dtype.name)",
                "def get_ftype_counts(self):\n    return self._get_counts(lambda b: b.ftype)",
                "def get_dtypes(self):\n    dtypes = np.array([blk.dtype for blk in self.blocks])\n    return algos.take_1d(dtypes, self._blknos, allow_fill=False)",
                "def get_ftypes(self):\n    ftypes = np.array([blk.ftype for blk in self.blocks])\n    return algos.take_1d(ftypes, self._blknos, allow_fill=False)",
                "def __getstate__(self):\n    block_values = [b.values for b in self.blocks]\n    block_items = [self.items[b.mgr_locs.indexer] for b in self.blocks]\n    axes_array = list(self.axes)\n\n    extra_state = {\n        \"0.14.1\": {\n            \"axes\": axes_array,\n            \"blocks\": [\n                dict(values=b.values, mgr_locs=b.mgr_locs.indexer)\n                for b in self.blocks\n            ],\n        }\n    }\n\n    # First three elements of the state are to maintain forward\n    # compatibility with 0.13.1.\n    return axes_array, block_values, block_items, extra_state",
                "def __setstate__(self, state):\n    def unpickle_block(values, mgr_locs):\n        return make_block(values, placement=mgr_locs)\n\n    if isinstance(state, tuple) and len(state) >= 4 and \"0.14.1\" in state[3]:\n        state = state[3][\"0.14.1\"]\n        self.axes = [ensure_index(ax) for ax in state[\"axes\"]]\n        self.blocks = tuple(\n            unpickle_block(b[\"values\"], b[\"mgr_locs\"]) for b in state[\"blocks\"]\n        )\n    else:\n        # discard anything after 3rd, support beta pickling format for a\n        # little while longer\n        ax_arrays, bvalues, bitems = state[:3]\n\n        self.axes = [ensure_index(ax) for ax in ax_arrays]\n\n        if len(bitems) == 1 and self.axes[0].equals(bitems[0]):\n            # This is a workaround for pre-0.14.1 pickles that didn't\n            # support unpickling multi-block frames/panels with non-unique\n            # columns/items, because given a manager with items [\"a\", \"b\",\n            # \"a\"] there's no way of knowing which block's \"a\" is where.\n            #\n            # Single-block case can be supported under the assumption that\n            # block items corresponded to manager items 1-to-1.\n            all_mgr_locs = [slice(0, len(bitems[0]))]\n        else:\n            all_mgr_locs = [\n                self.axes[0].get_indexer(blk_items) for blk_items in bitems\n            ]\n\n        self.blocks = tuple(\n            unpickle_block(values, mgr_locs)\n            for values, mgr_locs in zip(bvalues, all_mgr_locs)\n        )\n\n    self._post_setstate()",
                "def _post_setstate(self):\n    self._is_consolidated = False\n    self._known_consolidated = False\n    self._rebuild_blknos_and_blklocs()",
                "def __len__(self) -> int:\n    return len(self.items)",
                "def __repr__(self) -> str:\n    output = pprint_thing(self.__class__.__name__)\n    for i, ax in enumerate(self.axes):\n        if i == 0:\n            output += \"\\nItems: {ax}\".format(ax=ax)\n        else:\n            output += \"\\nAxis {i}: {ax}\".format(i=i, ax=ax)\n\n    for block in self.blocks:\n        output += \"\\n{block}\".format(block=pprint_thing(block))\n    return output",
                "def _verify_integrity(self):\n    mgr_shape = self.shape\n    tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n    for block in self.blocks:\n        if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n            construction_error(tot_items, block.shape[1:], self.axes)\n    if len(self.items) != tot_items:\n        raise AssertionError(\n            \"Number of manager items must equal union of \"\n            \"block items\\n# manager items: {0}, # \"\n            \"tot_items: {1}\".format(len(self.items), tot_items)\n        )",
                "def apply(\n    self,\n    f,\n    axes=None,\n    filter=None,\n    do_integrity_check=False,\n    consolidate=True,\n    **kwargs,\n):\n    \"\"\"\n    iterate over the blocks, collect and create a new block manager\n\n    Parameters\n    ----------\n    f : the callable or function name to operate on at the block level\n    axes : optional (if not supplied, use self.axes)\n    filter : list, if supplied, only call the block if the filter is in\n             the block\n    do_integrity_check : boolean, default False. Do the block manager\n        integrity check\n    consolidate: boolean, default True. Join together blocks having same\n        dtype\n\n    Returns\n    -------\n    Block Manager (new object)\n\n    \"\"\"\n\n    result_blocks = []\n\n    # filter kwarg is used in replace-* family of methods\n    if filter is not None:\n        filter_locs = set(self.items.get_indexer_for(filter))\n        if len(filter_locs) == len(self.items):\n            # All items are included, as if there were no filtering\n            filter = None\n        else:\n            kwargs[\"filter\"] = filter_locs\n\n    if consolidate:\n        self._consolidate_inplace()\n\n    if f == \"where\":\n        align_copy = True\n        if kwargs.get(\"align\", True):\n            align_keys = [\"other\", \"cond\"]\n        else:\n            align_keys = [\"cond\"]\n    elif f == \"putmask\":\n        align_copy = False\n        if kwargs.get(\"align\", True):\n            align_keys = [\"new\", \"mask\"]\n        else:\n            align_keys = [\"mask\"]\n    elif f == \"fillna\":\n        # fillna internally does putmask, maybe it's better to do this\n        # at mgr, not block level?\n        align_copy = False\n        align_keys = [\"value\"]\n    else:\n        align_keys = []\n\n    # TODO(EA): may interfere with ExtensionBlock.setitem for blocks\n    # with a .values attribute.\n    aligned_args = {\n        k: kwargs[k]\n        for k in align_keys\n        if not isinstance(kwargs[k], ABCExtensionArray)\n        and hasattr(kwargs[k], \"values\")\n    }\n\n    for b in self.blocks:\n        if filter is not None:\n            if not b.mgr_locs.isin(filter_locs).any():\n                result_blocks.append(b)\n                continue\n\n        if aligned_args:\n            b_items = self.items[b.mgr_locs.indexer]\n\n            for k, obj in aligned_args.items():\n                axis = obj._info_axis_number\n                kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n        applied = getattr(b, f)(**kwargs)\n        result_blocks = _extend_blocks(applied, result_blocks)\n\n    if len(result_blocks) == 0:\n        return self.make_empty(axes or self.axes)\n    bm = self.__class__(\n        result_blocks, axes or self.axes, do_integrity_check=do_integrity_check\n    )\n    bm._consolidate_inplace()\n    return bm",
                "def quantile(\n    self,\n    axis=0,\n    consolidate=True,\n    transposed=False,\n    interpolation=\"linear\",\n    qs=None,\n    numeric_only=None,\n):\n    \"\"\"\n    Iterate over blocks applying quantile reduction.\n    This routine is intended for reduction type operations and\n    will do inference on the generated blocks.\n\n    Parameters\n    ----------\n    axis: reduction axis, default 0\n    consolidate: boolean, default True. Join together blocks having same\n        dtype\n    transposed: boolean, default False\n        we are holding transposed data\n    interpolation : type of interpolation, default 'linear'\n    qs : a scalar or list of the quantiles to be computed\n    numeric_only : ignored\n\n    Returns\n    -------\n    Block Manager (new object)\n    \"\"\"\n\n    # Series dispatches to DataFrame for quantile, which allows us to\n    #  simplify some of the code here and in the blocks\n    assert self.ndim >= 2\n\n    if consolidate:\n        self._consolidate_inplace()\n\n    def get_axe(block, qs, axes):\n        # Because Series dispatches to DataFrame, we will always have\n        #  block.ndim == 2\n        from pandas import Float64Index\n\n        if is_list_like(qs):\n            ax = Float64Index(qs)\n        else:\n            ax = axes[0]\n        return ax\n\n    axes, blocks = [], []\n    for b in self.blocks:\n        block = b.quantile(axis=axis, qs=qs, interpolation=interpolation)\n\n        axe = get_axe(b, qs, axes=self.axes)\n\n        axes.append(axe)\n        blocks.append(block)\n\n    # note that some DatetimeTZ, Categorical are always ndim==1\n    ndim = {b.ndim for b in blocks}\n    assert 0 not in ndim, ndim\n\n    if 2 in ndim:\n\n        new_axes = list(self.axes)\n\n        # multiple blocks that are reduced\n        if len(blocks) > 1:\n            new_axes[1] = axes[0]\n\n            # reset the placement to the original\n            for b, sb in zip(blocks, self.blocks):\n                b.mgr_locs = sb.mgr_locs\n\n        else:\n            new_axes[axis] = Index(np.concatenate([ax.values for ax in axes]))\n\n        if transposed:\n            new_axes = new_axes[::-1]\n            blocks = [\n                b.make_block(b.values.T, placement=np.arange(b.shape[1]))\n                for b in blocks\n            ]\n\n        return self.__class__(blocks, new_axes)\n\n    # single block, i.e. ndim == {1}\n    values = concat_compat([b.values for b in blocks])\n\n    # compute the orderings of our original data\n    if len(self.blocks) > 1:\n\n        indexer = np.empty(len(self.axes[0]), dtype=np.intp)\n        i = 0\n        for b in self.blocks:\n            for j in b.mgr_locs:\n                indexer[j] = i\n                i = i + 1\n\n        values = values.take(indexer)\n\n    return SingleBlockManager(\n        [make_block(values, ndim=1, placement=np.arange(len(values)))], axes[0]\n    )",
                "def isna(self, func, **kwargs):\n    return self.apply(\"apply\", func=func, **kwargs)",
                "def where(self, **kwargs):\n    return self.apply(\"where\", **kwargs)",
                "def setitem(self, **kwargs):\n    return self.apply(\"setitem\", **kwargs)",
                "def putmask(self, **kwargs):\n    return self.apply(\"putmask\", **kwargs)",
                "def diff(self, **kwargs):\n    return self.apply(\"diff\", **kwargs)",
                "def interpolate(self, **kwargs):\n    return self.apply(\"interpolate\", **kwargs)",
                "def shift(self, **kwargs):\n    return self.apply(\"shift\", **kwargs)",
                "def fillna(self, **kwargs):\n    return self.apply(\"fillna\", **kwargs)",
                "def downcast(self, **kwargs):\n    return self.apply(\"downcast\", **kwargs)",
                "def astype(self, dtype, **kwargs):\n    return self.apply(\"astype\", dtype=dtype, **kwargs)",
                "def convert(self, **kwargs):\n    return self.apply(\"convert\", **kwargs)",
                "def replace(self, value, **kwargs):\n    assert np.ndim(value) == 0, value\n    return self.apply(\"replace\", value=value, **kwargs)",
                "def replace_list(self, src_list, dest_list, inplace=False, regex=False):\n    \"\"\" do a list replace \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # figure out our mask a-priori to avoid repeated replacements\n    values = self.as_array()\n\n    def comp(s, regex=False):\n        \"\"\"\n        Generate a bool array by perform an equality check, or perform\n        an element-wise regular expression matching\n        \"\"\"\n        if isna(s):\n            return isna(values)\n        if isinstance(s, (Timedelta, Timestamp)) and getattr(s, \"tz\", None) is None:\n\n            return _compare_or_regex_search(\n                maybe_convert_objects(values), s.asm8, regex\n            )\n        return _compare_or_regex_search(values, s, regex)\n\n    masks = [comp(s, regex) for i, s in enumerate(src_list)]\n\n    result_blocks = []\n    src_len = len(src_list) - 1\n    for blk in self.blocks:\n\n        # its possible to get multiple result blocks here\n        # replace ALWAYS will return a list\n        rb = [blk if inplace else blk.copy()]\n        for i, (s, d) in enumerate(zip(src_list, dest_list)):\n            # TODO: assert/validate that `d` is always a scalar?\n            new_rb = []\n            for b in rb:\n                m = masks[i][b.mgr_locs.indexer]\n                convert = i == src_len\n                result = b._replace_coerce(\n                    mask=m,\n                    to_replace=s,\n                    value=d,\n                    inplace=inplace,\n                    convert=convert,\n                    regex=regex,\n                )\n                if m.any():\n                    new_rb = _extend_blocks(result, new_rb)\n                else:\n                    new_rb.append(b)\n            rb = new_rb\n        result_blocks.extend(rb)\n\n    bm = self.__class__(result_blocks, self.axes)\n    bm._consolidate_inplace()\n    return bm",
                "def is_consolidated(self):\n    \"\"\"\n    Return True if more than one block with the same dtype\n    \"\"\"\n    if not self._known_consolidated:\n        self._consolidate_check()\n    return self._is_consolidated",
                "def _consolidate_check(self):\n    ftypes = [blk.ftype for blk in self.blocks]\n    self._is_consolidated = len(ftypes) == len(set(ftypes))\n    self._known_consolidated = True",
                "@property\ndef is_mixed_type(self):\n    # Warning, consolidation needs to get checked upstairs\n    self._consolidate_inplace()\n    return len(self.blocks) > 1",
                "@property\ndef is_numeric_mixed_type(self):\n    # Warning, consolidation needs to get checked upstairs\n    self._consolidate_inplace()\n    return all(block.is_numeric for block in self.blocks)",
                "@property\ndef is_datelike_mixed_type(self):\n    # Warning, consolidation needs to get checked upstairs\n    self._consolidate_inplace()\n    return any(block.is_datelike for block in self.blocks)",
                "@property\ndef any_extension_types(self):\n    \"\"\"Whether any of the blocks in this manager are extension blocks\"\"\"\n    return any(block.is_extension for block in self.blocks)",
                "@property\ndef is_view(self):\n    \"\"\" return a boolean if we are a single block and are a view \"\"\"\n    if len(self.blocks) == 1:\n        return self.blocks[0].is_view\n\n    # It is technically possible to figure out which blocks are views\n    # e.g. [ b.values.base is not None for b in self.blocks ]\n    # but then we have the case of possibly some blocks being a view\n    # and some blocks not. setting in theory is possible on the non-view\n    # blocks w/o causing a SettingWithCopy raise/warn. But this is a bit\n    # complicated\n\n    return False",
                "def get_bool_data(self, copy=False):\n    \"\"\"\n    Parameters\n    ----------\n    copy : boolean, default False\n        Whether to copy the blocks\n    \"\"\"\n    self._consolidate_inplace()\n    return self.combine([b for b in self.blocks if b.is_bool], copy)",
                "def get_numeric_data(self, copy=False):\n    \"\"\"\n    Parameters\n    ----------\n    copy : boolean, default False\n        Whether to copy the blocks\n    \"\"\"\n    self._consolidate_inplace()\n    return self.combine([b for b in self.blocks if b.is_numeric], copy)",
                "def combine(self, blocks, copy=True):\n    \"\"\" return a new manager with the blocks \"\"\"\n    if len(blocks) == 0:\n        return self.make_empty()\n\n    # FIXME: optimization potential\n    indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks]))\n    inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n\n    new_blocks = []\n    for b in blocks:\n        b = b.copy(deep=copy)\n        b.mgr_locs = algos.take_1d(\n            inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False\n        )\n        new_blocks.append(b)\n\n    axes = list(self.axes)\n    axes[0] = self.items.take(indexer)\n\n    return self.__class__(new_blocks, axes, do_integrity_check=False)",
                "def get_slice(self, slobj, axis=0):\n    if axis >= self.ndim:\n        raise IndexError(\"Requested axis not found in manager\")\n\n    if axis == 0:\n        new_blocks = self._slice_take_blocks_ax0(slobj)\n    else:\n        slicer = [slice(None)] * (axis + 1)\n        slicer[axis] = slobj\n        slicer = tuple(slicer)\n        new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n\n    new_axes = list(self.axes)\n    new_axes[axis] = new_axes[axis][slobj]\n\n    bm = self.__class__(new_blocks, new_axes, do_integrity_check=False)\n    bm._consolidate_inplace()\n    return bm",
                "def __contains__(self, item):\n    return item in self.items",
                "@property\ndef nblocks(self):\n    return len(self.blocks)",
                "def copy(self, deep=True):\n    \"\"\"\n    Make deep or shallow copy of BlockManager\n\n    Parameters\n    ----------\n    deep : boolean o rstring, default True\n        If False, return shallow copy (do not copy data)\n        If 'all', copy data and a deep copy of the index\n\n    Returns\n    -------\n    copy : BlockManager\n    \"\"\"\n    # this preserves the notion of view copying of axes\n    if deep:\n        if deep == \"all\":\n            copy = lambda ax: ax.copy(deep=True)\n        else:\n            copy = lambda ax: ax.view()\n        new_axes = [copy(ax) for ax in self.axes]\n    else:\n        new_axes = list(self.axes)\n    return self.apply(\"copy\", axes=new_axes, deep=deep, do_integrity_check=False)",
                "def as_array(self, transpose=False, items=None):\n    \"\"\"Convert the blockmanager data into an numpy array.\n\n    Parameters\n    ----------\n    transpose : boolean, default False\n        If True, transpose the return array\n    items : list of strings or None\n        Names of block items that will be included in the returned\n        array. ``None`` means that all block items will be used\n\n    Returns\n    -------\n    arr : ndarray\n    \"\"\"\n    if len(self.blocks) == 0:\n        arr = np.empty(self.shape, dtype=float)\n        return arr.transpose() if transpose else arr\n\n    if items is not None:\n        mgr = self.reindex_axis(items, axis=0)\n    else:\n        mgr = self\n\n    if self._is_single_block and mgr.blocks[0].is_datetimetz:\n        # TODO(Block.get_values): Make DatetimeTZBlock.get_values\n        # always be object dtype. Some callers seem to want the\n        # DatetimeArray (previously DTI)\n        arr = mgr.blocks[0].get_values(dtype=object)\n    elif self._is_single_block or not self.is_mixed_type:\n        arr = np.asarray(mgr.blocks[0].get_values())\n    else:\n        arr = mgr._interleave()\n\n    return arr.transpose() if transpose else arr",
                "def _interleave(self):\n    \"\"\"\n    Return ndarray from blocks with specified item order\n    Items must be contained in the blocks\n    \"\"\"\n    dtype = _interleaved_dtype(self.blocks)\n\n    # TODO: https://github.com/pandas-dev/pandas/issues/22791\n    # Give EAs some input on what happens here. Sparse needs this.\n    if is_sparse(dtype):\n        dtype = dtype.subtype\n    elif is_extension_array_dtype(dtype):\n        dtype = \"object\"\n\n    result = np.empty(self.shape, dtype=dtype)\n\n    itemmask = np.zeros(self.shape[0])\n\n    for blk in self.blocks:\n        rl = blk.mgr_locs\n        result[rl.indexer] = blk.get_values(dtype)\n        itemmask[rl.indexer] = 1\n\n    if not itemmask.all():\n        raise AssertionError(\"Some items were not contained in blocks\")\n\n    return result",
                "def to_dict(self, copy=True):\n    \"\"\"\n    Return a dict of str(dtype) -> BlockManager\n\n    Parameters\n    ----------\n    copy : boolean, default True\n\n    Returns\n    -------\n    values : a dict of dtype -> BlockManager\n\n    Notes\n    -----\n    This consolidates based on str(dtype)\n    \"\"\"\n    self._consolidate_inplace()\n\n    bd = {}\n    for b in self.blocks:\n        bd.setdefault(str(b.dtype), []).append(b)\n\n    return {dtype: self.combine(blocks, copy=copy) for dtype, blocks in bd.items()}",
                "def fast_xs(self, loc):\n    \"\"\"\n    get a cross sectional for a given location in the\n    items ; handle dups\n\n    return the result, is *could* be a view in the case of a\n    single block\n    \"\"\"\n    if len(self.blocks) == 1:\n        return self.blocks[0].iget((slice(None), loc))\n\n    items = self.items\n\n    # non-unique (GH4726)\n    if not items.is_unique:\n        result = self._interleave()\n        if self.ndim == 2:\n            result = result.T\n        return result[loc]\n\n    # unique\n    dtype = _interleaved_dtype(self.blocks)\n\n    n = len(items)\n    if is_extension_array_dtype(dtype):\n        # we'll eventually construct an ExtensionArray.\n        result = np.empty(n, dtype=object)\n    else:\n        result = np.empty(n, dtype=dtype)\n\n    for blk in self.blocks:\n        # Such assignment may incorrectly coerce NaT to None\n        # result[blk.mgr_locs] = blk._slice((slice(None), loc))\n        for i, rl in enumerate(blk.mgr_locs):\n            result[rl] = blk.iget((i, loc))\n\n    if is_extension_array_dtype(dtype):\n        result = dtype.construct_array_type()._from_sequence(result, dtype=dtype)\n\n    return result",
                "def consolidate(self):\n    \"\"\"\n    Join together blocks having same dtype\n\n    Returns\n    -------\n    y : BlockManager\n    \"\"\"\n    if self.is_consolidated():\n        return self\n\n    bm = self.__class__(self.blocks, self.axes)\n    bm._is_consolidated = False\n    bm._consolidate_inplace()\n    return bm",
                "def _consolidate_inplace(self):\n    if not self.is_consolidated():\n        self.blocks = tuple(_consolidate(self.blocks))\n        self._is_consolidated = True\n        self._known_consolidated = True\n        self._rebuild_blknos_and_blklocs()",
                "def get(self, item):\n    \"\"\"\n    Return values for selected item (ndarray or BlockManager).\n    \"\"\"\n    if self.items.is_unique:\n\n        if not isna(item):\n            loc = self.items.get_loc(item)\n        else:\n            indexer = np.arange(len(self.items))[isna(self.items)]\n\n            # allow a single nan location indexer\n            if not is_scalar(indexer):\n                if len(indexer) == 1:\n                    loc = indexer.item()\n                else:\n                    raise ValueError(\"cannot label index with a null key\")\n\n        return self.iget(loc)\n    else:\n\n        if isna(item):\n            raise TypeError(\"cannot label index with a null key\")\n\n        indexer = self.items.get_indexer_for([item])\n        return self.reindex_indexer(\n            new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True\n        )",
                "def iget(self, i):\n    \"\"\"\n    Return the data as a SingleBlockManager if possible\n\n    Otherwise return as a ndarray\n    \"\"\"\n    block = self.blocks[self._blknos[i]]\n    values = block.iget(self._blklocs[i])\n\n    # shortcut for select a single-dim from a 2-dim BM\n    return SingleBlockManager(\n        [\n            block.make_block_same_class(\n                values, placement=slice(0, len(values)), ndim=1\n            )\n        ],\n        self.axes[1],\n    )",
                "def delete(self, item):\n    \"\"\"\n    Delete selected item (items if non-unique) in-place.\n    \"\"\"\n    indexer = self.items.get_loc(item)\n\n    is_deleted = np.zeros(self.shape[0], dtype=np.bool_)\n    is_deleted[indexer] = True\n    ref_loc_offset = -is_deleted.cumsum()\n\n    is_blk_deleted = [False] * len(self.blocks)\n\n    if isinstance(indexer, int):\n        affected_start = indexer\n    else:\n        affected_start = is_deleted.nonzero()[0][0]\n\n    for blkno, _ in _fast_count_smallints(self._blknos[affected_start:]):\n        blk = self.blocks[blkno]\n        bml = blk.mgr_locs\n        blk_del = is_deleted[bml.indexer].nonzero()[0]\n\n        if len(blk_del) == len(bml):\n            is_blk_deleted[blkno] = True\n            continue\n        elif len(blk_del) != 0:\n            blk.delete(blk_del)\n            bml = blk.mgr_locs\n\n        blk.mgr_locs = bml.add(ref_loc_offset[bml.indexer])\n\n    # FIXME: use Index.delete as soon as it uses fastpath=True\n    self.axes[0] = self.items[~is_deleted]\n    self.blocks = tuple(\n        b for blkno, b in enumerate(self.blocks) if not is_blk_deleted[blkno]\n    )\n    self._shape = None\n    self._rebuild_blknos_and_blklocs()",
                "def set(self, item, value):\n    \"\"\"\n    Set new item in-place. Does not consolidate. Adds new Block if not\n    contained in the current set of items\n    \"\"\"\n    # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n    #        can prob also fix the various if tests for sparse/categorical\n\n    value_is_extension_type = is_extension_array_dtype(value)\n\n    # categorical/sparse/datetimetz\n    if value_is_extension_type:\n\n        def value_getitem(placement):\n            return value\n\n    else:\n        if value.ndim == self.ndim - 1:\n            value = _safe_reshape(value, (1,) + value.shape)\n\n            def value_getitem(placement):\n                return value\n\n        else:\n\n            def value_getitem(placement):\n                return value[placement.indexer]\n\n        if value.shape[1:] != self.shape[1:]:\n            raise AssertionError(\n                \"Shape of new values must be compatible with manager shape\"\n            )\n\n    try:\n        loc = self.items.get_loc(item)\n    except KeyError:\n        # This item wasn't present, just insert at end\n        self.insert(len(self.items), item, value)\n        return\n\n    if isinstance(loc, int):\n        loc = [loc]\n\n    blknos = self._blknos[loc]\n    blklocs = self._blklocs[loc].copy()\n\n    unfit_mgr_locs = []\n    unfit_val_locs = []\n    removed_blknos = []\n    for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n        blk = self.blocks[blkno]\n        blk_locs = blklocs[val_locs.indexer]\n        if blk.should_store(value):\n            blk.set(blk_locs, value_getitem(val_locs))\n        else:\n            unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n            unfit_val_locs.append(val_locs)\n\n            # If all block items are unfit, schedule the block for removal.\n            if len(val_locs) == len(blk.mgr_locs):\n                removed_blknos.append(blkno)\n            else:\n                self._blklocs[blk.mgr_locs.indexer] = -1\n                blk.delete(blk_locs)\n                self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n    if len(removed_blknos):\n        # Remove blocks & update blknos accordingly\n        is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n        is_deleted[removed_blknos] = True\n\n        new_blknos = np.empty(self.nblocks, dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n        self._blknos = algos.take_1d(\n            new_blknos, self._blknos, axis=0, allow_fill=False\n        )\n        self.blocks = tuple(\n            blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n        )\n\n    if unfit_val_locs:\n        unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n        unfit_count = len(unfit_mgr_locs)\n\n        new_blocks = []\n        if value_is_extension_type:\n            # This code (ab-)uses the fact that sparse blocks contain only\n            # one item.\n            new_blocks.extend(\n                make_block(\n                    values=value.copy(),\n                    ndim=self.ndim,\n                    placement=slice(mgr_loc, mgr_loc + 1),\n                )\n                for mgr_loc in unfit_mgr_locs\n            )\n\n            self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n            self._blklocs[unfit_mgr_locs] = 0\n\n        else:\n            # unfit_val_locs contains BlockPlacement objects\n            unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n            new_blocks.append(\n                make_block(\n                    values=value_getitem(unfit_val_items),\n                    ndim=self.ndim,\n                    placement=unfit_mgr_locs,\n                )\n            )\n\n            self._blknos[unfit_mgr_locs] = len(self.blocks)\n            self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n        self.blocks += tuple(new_blocks)\n\n        # Newly created block's dtype may already be present.\n        self._known_consolidated = False",
                "def insert(self, loc: int, item, value, allow_duplicates: bool = False):\n    \"\"\"\n    Insert item at selected position.\n\n    Parameters\n    ----------\n    loc : int\n    item : hashable\n    value : array_like\n    allow_duplicates: bool\n        If False, trying to insert non-unique item will raise\n\n    \"\"\"\n    if not allow_duplicates and item in self.items:\n        # Should this be a different kind of error??\n        raise ValueError(\"cannot insert {}, already exists\".format(item))\n\n    if not isinstance(loc, int):\n        raise TypeError(\"loc must be int\")\n\n    # insert to the axis; this could possibly raise a TypeError\n    new_axis = self.items.insert(loc, item)\n\n    block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n\n    for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n        blk = self.blocks[blkno]\n        if count == len(blk.mgr_locs):\n            blk.mgr_locs = blk.mgr_locs.add(1)\n        else:\n            new_mgr_locs = blk.mgr_locs.as_array.copy()\n            new_mgr_locs[new_mgr_locs >= loc] += 1\n            blk.mgr_locs = new_mgr_locs\n\n    if loc == self._blklocs.shape[0]:\n        # np.append is a lot faster, let's use it if we can.\n        self._blklocs = np.append(self._blklocs, 0)\n        self._blknos = np.append(self._blknos, len(self.blocks))\n    else:\n        self._blklocs = np.insert(self._blklocs, loc, 0)\n        self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n\n    self.axes[0] = new_axis\n    self.blocks += (block,)\n    self._shape = None\n\n    self._known_consolidated = False\n\n    if len(self.blocks) > 100:\n        self._consolidate_inplace()",
                "def reindex_axis(\n    self, new_index, axis, method=None, limit=None, fill_value=None, copy=True\n):\n    \"\"\"\n    Conform block manager to new index.\n    \"\"\"\n    new_index = ensure_index(new_index)\n    new_index, indexer = self.axes[axis].reindex(\n        new_index, method=method, limit=limit\n    )\n\n    return self.reindex_indexer(\n        new_index, indexer, axis=axis, fill_value=fill_value, copy=copy\n    )",
                "def reindex_indexer(\n    self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True\n):\n    \"\"\"\n    Parameters\n    ----------\n    new_axis : Index\n    indexer : ndarray of int64 or None\n    axis : int\n    fill_value : object\n    allow_dups : bool\n\n    pandas-indexer with -1's only.\n    \"\"\"\n    if indexer is None:\n        if new_axis is self.axes[axis] and not copy:\n            return self\n\n        result = self.copy(deep=copy)\n        result.axes = list(self.axes)\n        result.axes[axis] = new_axis\n        return result\n\n    self._consolidate_inplace()\n\n    # some axes don't allow reindexing with dups\n    if not allow_dups:\n        self.axes[axis]._can_reindex(indexer)\n\n    if axis >= self.ndim:\n        raise IndexError(\"Requested axis not found in manager\")\n\n    if axis == 0:\n        new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(fill_value,))\n    else:\n        new_blocks = [\n            blk.take_nd(\n                indexer,\n                axis=axis,\n                fill_tuple=(\n                    fill_value if fill_value is not None else blk.fill_value,\n                ),\n            )\n            for blk in self.blocks\n        ]\n\n    new_axes = list(self.axes)\n    new_axes[axis] = new_axis\n    return self.__class__(new_blocks, new_axes)",
                "def _slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None):\n    \"\"\"\n    Slice/take blocks along axis=0.\n\n    Overloaded for SingleBlock\n\n    Returns\n    -------\n    new_blocks : list of Block\n    \"\"\"\n\n    allow_fill = fill_tuple is not None\n\n    sl_type, slobj, sllen = _preprocess_slice_or_indexer(\n        slice_or_indexer, self.shape[0], allow_fill=allow_fill\n    )\n\n    if self._is_single_block:\n        blk = self.blocks[0]\n\n        if sl_type in (\"slice\", \"mask\"):\n            return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n        elif not allow_fill or self.ndim == 1:\n            if allow_fill and fill_tuple[0] is None:\n                _, fill_value = maybe_promote(blk.dtype)\n                fill_tuple = (fill_value,)\n\n            return [\n                blk.take_nd(\n                    slobj,\n                    axis=0,\n                    new_mgr_locs=slice(0, sllen),\n                    fill_tuple=fill_tuple,\n                )\n            ]\n\n    if sl_type in (\"slice\", \"mask\"):\n        blknos = self._blknos[slobj]\n        blklocs = self._blklocs[slobj]\n    else:\n        blknos = algos.take_1d(\n            self._blknos, slobj, fill_value=-1, allow_fill=allow_fill\n        )\n        blklocs = algos.take_1d(\n            self._blklocs, slobj, fill_value=-1, allow_fill=allow_fill\n        )\n\n    # When filling blknos, make sure blknos is updated before appending to\n    # blocks list, that way new blkno is exactly len(blocks).\n    #\n    # FIXME: mgr_groupby_blknos must return mgr_locs in ascending order,\n    # pytables serialization will break otherwise.\n    blocks = []\n    for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n        if blkno == -1:\n            # If we've got here, fill_tuple was not None.\n            fill_value = fill_tuple[0]\n\n            blocks.append(\n                self._make_na_block(placement=mgr_locs, fill_value=fill_value)\n            )\n        else:\n            blk = self.blocks[blkno]\n\n            # Otherwise, slicing along items axis is necessary.\n            if not blk._can_consolidate:\n                # A non-consolidatable block, it's easy, because there's\n                # only one item and each mgr loc is a copy of that single\n                # item.\n                for mgr_loc in mgr_locs:\n                    newblk = blk.copy(deep=True)\n                    newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                    blocks.append(newblk)\n\n            else:\n                blocks.append(\n                    blk.take_nd(\n                        blklocs[mgr_locs.indexer],\n                        axis=0,\n                        new_mgr_locs=mgr_locs,\n                        fill_tuple=None,\n                    )\n                )\n\n    return blocks",
                "def _make_na_block(self, placement, fill_value=None):\n    # TODO: infer dtypes other than float64 from fill_value\n\n    if fill_value is None:\n        fill_value = np.nan\n    block_shape = list(self.shape)\n    block_shape[0] = len(placement)\n\n    dtype, fill_value = infer_dtype_from_scalar(fill_value)\n    block_values = np.empty(block_shape, dtype=dtype)\n    block_values.fill(fill_value)\n    return make_block(block_values, placement=placement)",
                "def take(self, indexer, axis=1, verify=True, convert=True):\n    \"\"\"\n    Take items along any axis.\n    \"\"\"\n    self._consolidate_inplace()\n    indexer = (\n        np.arange(indexer.start, indexer.stop, indexer.step, dtype=\"int64\")\n        if isinstance(indexer, slice)\n        else np.asanyarray(indexer, dtype=\"int64\")\n    )\n\n    n = self.shape[axis]\n    if convert:\n        indexer = maybe_convert_indices(indexer, n)\n\n    if verify:\n        if ((indexer == -1) | (indexer >= n)).any():\n            raise Exception(\"Indices must be nonzero and less than the axis length\")\n\n    new_labels = self.axes[axis].take(indexer)\n    return self.reindex_indexer(\n        new_axis=new_labels, indexer=indexer, axis=axis, allow_dups=True\n    )",
                "def equals(self, other):\n    self_axes, other_axes = self.axes, other.axes\n    if len(self_axes) != len(other_axes):\n        return False\n    if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes)):\n        return False\n    self._consolidate_inplace()\n    other._consolidate_inplace()\n    if len(self.blocks) != len(other.blocks):\n        return False\n\n    # canonicalize block order, using a tuple combining the type\n    # name and then mgr_locs because there might be unconsolidated\n    # blocks (say, Categorical) which can only be distinguished by\n    # the iteration order\n    def canonicalize(block):\n        return (block.dtype.name, block.mgr_locs.as_array.tolist())\n\n    self_blocks = sorted(self.blocks, key=canonicalize)\n    other_blocks = sorted(other.blocks, key=canonicalize)\n    return all(\n        block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)\n    )",
                "def unstack(self, unstacker_func, fill_value):\n    \"\"\"Return a blockmanager with all blocks unstacked.\n\n    Parameters\n    ----------\n    unstacker_func : callable\n        A (partially-applied) ``pd.core.reshape._Unstacker`` class.\n    fill_value : Any\n        fill_value for newly introduced missing values.\n\n    Returns\n    -------\n    unstacked : BlockManager\n    \"\"\"\n    n_rows = self.shape[-1]\n    dummy = unstacker_func(np.empty((0, 0)), value_columns=self.items)\n    new_columns = dummy.get_new_columns()\n    new_index = dummy.get_new_index()\n    new_blocks = []\n    columns_mask = []\n\n    for blk in self.blocks:\n        blocks, mask = blk._unstack(\n            partial(unstacker_func, value_columns=self.items[blk.mgr_locs.indexer]),\n            new_columns,\n            n_rows,\n            fill_value,\n        )\n\n        new_blocks.extend(blocks)\n        columns_mask.extend(mask)\n\n    new_columns = new_columns[columns_mask]\n\n    bm = BlockManager(new_blocks, [new_columns, new_index])\n    return bm",
                "def __init__(\n    self,\n    block: Block,\n    axis: Union[Index, List[Index]],\n    do_integrity_check: bool = False,\n    fastpath: bool = False,\n):\n    if isinstance(axis, list):\n        if len(axis) != 1:\n            raise ValueError(\n                \"cannot create SingleBlockManager with more than 1 axis\"\n            )\n        axis = axis[0]\n\n    # passed from constructor, single block, single axis\n    if fastpath:\n        self.axes = [axis]\n        if isinstance(block, list):\n\n            # empty block\n            if len(block) == 0:\n                block = [np.array([])]\n            elif len(block) != 1:\n                raise ValueError(\n                    \"Cannot create SingleBlockManager with more than 1 block\"\n                )\n            block = block[0]\n    else:\n        self.axes = [ensure_index(axis)]\n\n        # create the block here\n        if isinstance(block, list):\n\n            # provide consolidation to the interleaved_dtype\n            if len(block) > 1:\n                dtype = _interleaved_dtype(block)\n                block = [b.astype(dtype) for b in block]\n                block = _consolidate(block)\n\n            if len(block) != 1:\n                raise ValueError(\n                    \"Cannot create SingleBlockManager with more than 1 block\"\n                )\n            block = block[0]\n\n    if not isinstance(block, Block):\n        block = make_block(block, placement=slice(0, len(axis)), ndim=1)\n\n    self.blocks = tuple([block])",
                "def _post_setstate(self):\n    pass",
                "@property\ndef _block(self):\n    return self.blocks[0]",
                "@property\ndef _values(self):\n    return self._block.values",
                "@property\ndef _blknos(self):\n    \"\"\" compat with BlockManager \"\"\"\n    return None",
                "@property\ndef _blklocs(self):\n    \"\"\" compat with BlockManager \"\"\"\n    return None",
                "def get_slice(self, slobj, axis=0):\n    if axis >= self.ndim:\n        raise IndexError(\"Requested axis not found in manager\")\n\n    return self.__class__(\n        self._block._slice(slobj), self.index[slobj], fastpath=True\n    )",
                "@property\ndef index(self):\n    return self.axes[0]",
                "def convert(self, **kwargs):\n    \"\"\" convert the whole block as one \"\"\"\n    return self.apply(\"convert\", **kwargs)",
                "@property\ndef dtype(self):\n    return self._block.dtype",
                "@property\ndef array_dtype(self):\n    return self._block.array_dtype",
                "@property\ndef ftype(self):\n    return self._block.ftype",
                "def get_dtype_counts(self):\n    return {self.dtype.name: 1}",
                "def get_ftype_counts(self):\n    return {self.ftype: 1}",
                "def get_dtypes(self):\n    return np.array([self._block.dtype])",
                "def get_ftypes(self):\n    return np.array([self._block.ftype])",
                "def external_values(self):\n    return self._block.external_values()",
                "def internal_values(self):\n    return self._block.internal_values()",
                "def get_values(self):\n    \"\"\" return a dense type view \"\"\"\n    return np.array(self._block.to_dense(), copy=False)",
                "@property\ndef _can_hold_na(self):\n    return self._block._can_hold_na",
                "def is_consolidated(self):\n    return True",
                "def _consolidate_check(self):\n    pass",
                "def _consolidate_inplace(self):\n    pass",
                "def delete(self, item):\n    \"\"\"\n    Delete single item from SingleBlockManager.\n\n    Ensures that self.blocks doesn't become empty.\n    \"\"\"\n    loc = self.items.get_loc(item)\n    self._block.delete(loc)\n    self.axes[0] = self.axes[0].delete(loc)",
                "def fast_xs(self, loc):\n    \"\"\"\n    fast path for getting a cross-section\n    return a view of the data\n    \"\"\"\n    return self._block.values[loc]",
                "def concat(self, to_concat, new_axis):\n    \"\"\"\n    Concatenate a list of SingleBlockManagers into a single\n    SingleBlockManager.\n\n    Used for pd.concat of Series objects with axis=0.\n\n    Parameters\n    ----------\n    to_concat : list of SingleBlockManagers\n    new_axis : Index of the result\n\n    Returns\n    -------\n    SingleBlockManager\n\n    \"\"\"\n    non_empties = [x for x in to_concat if len(x) > 0]\n\n    # check if all series are of the same block type:\n    if len(non_empties) > 0:\n        blocks = [obj.blocks[0] for obj in non_empties]\n        if len({b.dtype for b in blocks}) == 1:\n            new_block = blocks[0].concat_same_type(blocks)\n        else:\n            values = [x.values for x in blocks]\n            values = concat_compat(values)\n            new_block = make_block(values, placement=slice(0, len(values), 1))\n    else:\n        values = [x._block.values for x in to_concat]\n        values = concat_compat(values)\n        new_block = make_block(values, placement=slice(0, len(values), 1))\n\n    mgr = SingleBlockManager(new_block, new_axis)\n    return mgr",
                "def _asarray_compat(x):\n    if isinstance(x, ABCSeries):\n        return x._values\n    else:\n        return np.asarray(x)",
                "def _shape_compat(x):\n    if isinstance(x, ABCSeries):\n        return (len(x),)\n    else:\n        return x.shape",
                "def unpickle_block(values, mgr_locs):\n    return make_block(values, placement=mgr_locs)",
                "def get_axe(block, qs, axes):\n    # Because Series dispatches to DataFrame, we will always have\n    #  block.ndim == 2\n    from pandas import Float64Index\n\n    if is_list_like(qs):\n        ax = Float64Index(qs)\n    else:\n        ax = axes[0]\n    return ax",
                "def comp(s, regex=False):\n    \"\"\"\n    Generate a bool array by perform an equality check, or perform\n    an element-wise regular expression matching\n    \"\"\"\n    if isna(s):\n        return isna(values)\n    if isinstance(s, (Timedelta, Timestamp)) and getattr(s, \"tz\", None) is None:\n\n        return _compare_or_regex_search(\n            maybe_convert_objects(values), s.asm8, regex\n        )\n    return _compare_or_regex_search(values, s, regex)",
                "def canonicalize(block):\n    return (block.dtype.name, block.mgr_locs.as_array.tolist())",
                "def value_getitem(placement):\n    return value",
                "def value_getitem(placement):\n    return value",
                "def value_getitem(placement):\n    return value[placement.indexer]"
            ],
            "inscope_function_signatures": [
                "create_block_manager_from_blocks(blocks, axes)",
                "create_block_manager_from_arrays(arrays, names, axes)",
                "construction_error(tot_items, block_shape, axes, e=None)",
                "form_blocks(arrays, names, axes)",
                "_simple_blockify(tuples, dtype)",
                "_multi_blockify(tuples, dtype=None)",
                "_stack_arrays(tuples, dtype)",
                "_interleaved_dtype(blocks: List[Block]) -> Optional[Union[np.dtype, ExtensionDtype]]",
                "_consolidate(blocks)",
                "_compare_or_regex_search(a, b, regex=False)",
                "_transform_index(index, func, level=None)",
                "_fast_count_smallints(arr)",
                "_preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill)",
                "concatenate_block_managers(mgrs_indexers, axes, concat_axis, copy)",
                "__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
                "make_empty(self, axes=None)",
                "__nonzero__(self)",
                "shape(self)",
                "ndim(self) -> int",
                "set_axis(self, axis, new_labels)",
                "rename_axis(self, mapper, axis, copy=True, level=None)",
                "_is_single_block(self)",
                "_rebuild_blknos_and_blklocs(self)",
                "items(self)",
                "_get_counts(self, f)",
                "get_dtype_counts(self)",
                "get_ftype_counts(self)",
                "get_dtypes(self)",
                "get_ftypes(self)",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "_post_setstate(self)",
                "__len__(self) -> int",
                "__repr__(self) -> str",
                "_verify_integrity(self)",
                "apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs)",
                "quantile(self, axis=0, consolidate=True, transposed=False, interpolation='linear', qs=None, numeric_only=None)",
                "isna(self, func, **kwargs)",
                "where(self, **kwargs)",
                "setitem(self, **kwargs)",
                "putmask(self, **kwargs)",
                "diff(self, **kwargs)",
                "interpolate(self, **kwargs)",
                "shift(self, **kwargs)",
                "fillna(self, **kwargs)",
                "downcast(self, **kwargs)",
                "astype(self, dtype, **kwargs)",
                "convert(self, **kwargs)",
                "replace(self, value, **kwargs)",
                "replace_list(self, src_list, dest_list, inplace=False, regex=False)",
                "is_consolidated(self)",
                "_consolidate_check(self)",
                "is_mixed_type(self)",
                "is_numeric_mixed_type(self)",
                "is_datelike_mixed_type(self)",
                "any_extension_types(self)",
                "is_view(self)",
                "get_bool_data(self, copy=False)",
                "get_numeric_data(self, copy=False)",
                "combine(self, blocks, copy=True)",
                "get_slice(self, slobj, axis=0)",
                "__contains__(self, item)",
                "nblocks(self)",
                "copy(self, deep=True)",
                "as_array(self, transpose=False, items=None)",
                "_interleave(self)",
                "to_dict(self, copy=True)",
                "fast_xs(self, loc)",
                "consolidate(self)",
                "_consolidate_inplace(self)",
                "get(self, item)",
                "iget(self, i)",
                "delete(self, item)",
                "set(self, item, value)",
                "insert(self, loc: int, item, value, allow_duplicates: bool=False)",
                "reindex_axis(self, new_index, axis, method=None, limit=None, fill_value=None, copy=True)",
                "reindex_indexer(self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True)",
                "_slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None)",
                "_make_na_block(self, placement, fill_value=None)",
                "take(self, indexer, axis=1, verify=True, convert=True)",
                "equals(self, other)",
                "unstack(self, unstacker_func, fill_value)",
                "__init__(self, block: Block, axis: Union[Index, List[Index]], do_integrity_check: bool=False, fastpath: bool=False)",
                "_post_setstate(self)",
                "_block(self)",
                "_values(self)",
                "_blknos(self)",
                "_blklocs(self)",
                "get_slice(self, slobj, axis=0)",
                "index(self)",
                "convert(self, **kwargs)",
                "dtype(self)",
                "array_dtype(self)",
                "ftype(self)",
                "get_dtype_counts(self)",
                "get_ftype_counts(self)",
                "get_dtypes(self)",
                "get_ftypes(self)",
                "external_values(self)",
                "internal_values(self)",
                "get_values(self)",
                "_can_hold_na(self)",
                "is_consolidated(self)",
                "_consolidate_check(self)",
                "_consolidate_inplace(self)",
                "delete(self, item)",
                "fast_xs(self, loc)",
                "concat(self, to_concat, new_axis)",
                "_asarray_compat(x)",
                "_shape_compat(x)",
                "unpickle_block(values, mgr_locs)",
                "get_axe(block, qs, axes)",
                "comp(s, regex=False)",
                "canonicalize(block)",
                "value_getitem(placement)",
                "value_getitem(placement)",
                "value_getitem(placement)"
            ],
            "variables_in_file": {
                "PandasObject": [
                    60
                ],
                "__slots__": [
                    112,
                    1454
                ],
                "Sequence": [
                    125,
                    126
                ],
                "Block": [
                    1863,
                    1458,
                    1650,
                    125,
                    1501
                ],
                "Index": [
                    520,
                    1459,
                    1965,
                    126
                ],
                "bool": [
                    1921,
                    1460,
                    1461,
                    1147,
                    127
                ],
                "self.axes": [
                    129,
                    1537,
                    263,
                    782,
                    784,
                    149,
                    537,
                    285,
                    927,
                    1189,
                    166,
                    294,
                    296,
                    170,
                    174,
                    307,
                    1205,
                    439,
                    183,
                    441,
                    1598,
                    1472,
                    197,
                    327,
                    1228,
                    1484,
                    1232,
                    342,
                    984,
                    1240,
                    731,
                    1381,
                    235,
                    748,
                    1259,
                    1387,
                    498,
                    1019,
                    509,
                    639
                ],
                "self": [
                    1024,
                    1537,
                    516,
                    1541,
                    1545,
                    1549,
                    529,
                    1021,
                    1043,
                    1553,
                    1556,
                    535,
                    1531,
                    537,
                    1559,
                    539,
                    1532,
                    1562,
                    1054,
                    1565,
                    1568,
                    1571,
                    1060,
                    551,
                    1063,
                    1575,
                    554,
                    1579,
                    557,
                    1069,
                    1070,
                    560,
                    563,
                    1076,
                    566,
                    569,
                    572,
                    1596,
                    1597,
                    575,
                    1088,
                    1598,
                    578,
                    1090,
                    581,
                    1094,
                    1605,
                    585,
                    1097,
                    1099,
                    1100,
                    1101,
                    1103,
                    1104,
                    593,
                    1118,
                    1124,
                    613,
                    1125,
                    1134,
                    1139,
                    1140,
                    1142,
                    1145,
                    639,
                    129,
                    130,
                    133,
                    647,
                    136,
                    648,
                    649,
                    1160,
                    140,
                    652,
                    142,
                    653,
                    144,
                    654,
                    1168,
                    659,
                    660,
                    149,
                    1170,
                    1172,
                    152,
                    153,
                    665,
                    666,
                    156,
                    1173,
                    1181,
                    671,
                    672,
                    1183,
                    1184,
                    1186,
                    1187,
                    677,
                    166,
                    1189,
                    1190,
                    1191,
                    170,
                    682,
                    683,
                    1193,
                    174,
                    1195,
                    1196,
                    1205,
                    183,
                    1209,
                    701,
                    702,
                    196,
                    197,
                    711,
                    712,
                    202,
                    1228,
                    205,
                    717,
                    1229,
                    208,
                    721,
                    210,
                    1231,
                    1232,
                    1236,
                    1240,
                    217,
                    218,
                    731,
                    732,
                    1242,
                    222,
                    734,
                    1246,
                    737,
                    741,
                    230,
                    231,
                    1256,
                    746,
                    235,
                    748,
                    1259,
                    1261,
                    239,
                    751,
                    241,
                    756,
                    247,
                    760,
                    250,
                    253,
                    254,
                    1277,
                    1280,
                    257,
                    258,
                    1281,
                    261,
                    262,
                    263,
                    1285,
                    270,
                    782,
                    784,
                    785,
                    1300,
                    1301,
                    1304,
                    1307,
                    285,
                    286,
                    802,
                    803,
                    294,
                    807,
                    296,
                    809,
                    1322,
                    811,
                    1325,
                    816,
                    307,
                    310,
                    315,
                    828,
                    318,
                    319,
                    320,
                    323,
                    837,
                    326,
                    327,
                    839,
                    841,
                    1354,
                    333,
                    338,
                    339,
                    340,
                    342,
                    343,
                    1366,
                    347,
                    1373,
                    867,
                    1381,
                    870,
                    1382,
                    873,
                    1387,
                    1392,
                    1394,
                    883,
                    884,
                    886,
                    890,
                    891,
                    1404,
                    383,
                    384,
                    896,
                    391,
                    905,
                    1424,
                    1425,
                    1431,
                    1433,
                    924,
                    925,
                    927,
                    933,
                    422,
                    934,
                    935,
                    936,
                    937,
                    429,
                    943,
                    946,
                    948,
                    439,
                    440,
                    441,
                    957,
                    1472,
                    963,
                    964,
                    965,
                    1484,
                    974,
                    975,
                    984,
                    478,
                    991,
                    1504,
                    481,
                    993,
                    997,
                    1511,
                    1515,
                    1004,
                    1005,
                    495,
                    498,
                    1528,
                    1019,
                    1020,
                    509,
                    1023
                ],
                "ensure_index": [
                    129,
                    294,
                    1484,
                    173,
                    1713,
                    1204,
                    149,
                    285
                ],
                "ax": [
                    129,
                    294,
                    166,
                    327,
                    329,
                    489,
                    331,
                    491,
                    492,
                    520,
                    779,
                    781,
                    782,
                    1690,
                    285
                ],
                "axes": [
                    1792,
                    129,
                    513,
                    1669,
                    520,
                    1675,
                    1676,
                    1680,
                    148,
                    149,
                    1690,
                    156,
                    547,
                    1714,
                    1717,
                    1718,
                    439,
                    441,
                    731,
                    732,
                    734,
                    491,
                    494,
                    2032,
                    500,
                    1659,
                    1662
                ],
                "self.blocks": [
                    896,
                    257,
                    130,
                    1281,
                    516,
                    261,
                    262,
                    905,
                    652,
                    270,
                    1021,
                    660,
                    1173,
                    535,
                    1404,
                    1431,
                    666,
                    539,
                    286,
                    927,
                    672,
                    1184,
                    802,
                    1187,
                    677,
                    422,
                    934,
                    1190,
                    682,
                    683,
                    1195,
                    1325,
                    1076,
                    310,
                    828,
                    702,
                    712,
                    841,
                    205,
                    333,
                    974,
                    208,
                    1103,
                    1104,
                    339,
                    340,
                    222,
                    1504,
                    1124,
                    613,
                    870,
                    997,
                    1256,
                    1511,
                    746,
                    1005,
                    495,
                    241,
                    1394,
                    883,
                    884,
                    1139,
                    1142,
                    760,
                    1020,
                    253
                ],
                "tuple": [
                    1504,
                    1792,
                    130,
                    1957,
                    166,
                    934,
                    745,
                    1961,
                    1103,
                    1685,
                    310,
                    1142,
                    1690,
                    283,
                    1020,
                    286
                ],
                "blocks": [
                    512,
                    130,
                    1667,
                    132,
                    516,
                    1668,
                    1669,
                    1799,
                    1801,
                    1675,
                    524,
                    1676,
                    526,
                    529,
                    532,
                    1432,
                    153,
                    155,
                    156,
                    1439,
                    1315,
                    1321,
                    1335,
                    1338,
                    1347,
                    1731,
                    1734,
                    1738,
                    716,
                    1742,
                    720,
                    1746,
                    724,
                    1876,
                    1750,
                    1879,
                    2009,
                    1628,
                    1629,
                    1630,
                    1757,
                    1632,
                    1761,
                    1889,
                    1765,
                    873,
                    1772,
                    494,
                    2030,
                    2032,
                    1650,
                    1652,
                    501,
                    1653,
                    1781,
                    504,
                    1658,
                    1659,
                    1789,
                    1662
                ],
                "block": [
                    132,
                    133,
                    136,
                    1170,
                    1814,
                    1815,
                    666,
                    672,
                    677,
                    1190,
                    1829,
                    1830,
                    1473,
                    1476,
                    1477,
                    1478,
                    1482,
                    333,
                    334,
                    974,
                    975,
                    1487,
                    1490,
                    1491,
                    340,
                    341,
                    342,
                    980,
                    1492,
                    1493,
                    1495,
                    1499,
                    1501,
                    1502,
                    2014,
                    1504,
                    2022,
                    496,
                    501,
                    1402,
                    1407
                ],
                "self.ndim": [
                    737,
                    133,
                    1285,
                    136,
                    1528,
                    202,
                    1134,
                    1170,
                    1043,
                    152,
                    1118,
                    1242,
                    891,
                    478
                ],
                "block.ndim": [
                    136,
                    133
                ],
                "AssertionError": [
                    228,
                    134,
                    847,
                    344,
                    1055
                ],
                "format": [
                    1700,
                    135,
                    329,
                    1162,
                    331,
                    1933,
                    334,
                    1936,
                    179,
                    1939,
                    345
                ],
                "do_integrity_check": [
                    441,
                    139
                ],
                "self._verify_integrity": [
                    140
                ],
                "self._consolidate_check": [
                    648,
                    142
                ],
                "self._rebuild_blknos_and_blklocs": [
                    144,
                    937,
                    320,
                    1024
                ],
                "a": [
                    1924,
                    1927,
                    1930,
                    1933,
                    149
                ],
                "np.array": [
                    257,
                    1565,
                    1477,
                    1575,
                    153,
                    1562,
                    253
                ],
                "np": [
                    1920,
                    257,
                    1795,
                    1796,
                    901,
                    1924,
                    903,
                    520,
                    1925,
                    525,
                    1425,
                    537,
                    153,
                    1562,
                    1565,
                    1183,
                    1184,
                    1186,
                    547,
                    803,
                    1187,
                    1575,
                    817,
                    1842,
                    1715,
                    948,
                    1970,
                    1972,
                    1855,
                    1983,
                    1090,
                    1987,
                    837,
                    1094,
                    839,
                    584,
                    1097,
                    1353,
                    1099,
                    1477,
                    1864,
                    1358,
                    720,
                    1108,
                    1368,
                    217,
                    218,
                    1370,
                    1760,
                    225,
                    993,
                    1124,
                    1764,
                    1140,
                    253
                ],
                "self.array_dtype": [
                    153
                ],
                "self.__class__": [
                    326,
                    1261,
                    751,
                    529,
                    440,
                    927,
                    1531,
                    156,
                    734,
                    639
                ],
                "__bool__": [
                    162
                ],
                "__nonzero__": [
                    162
                ],
                "len": [
                    512,
                    535,
                    537,
                    547,
                    1063,
                    1085,
                    1090,
                    1092,
                    1099,
                    1109,
                    1624,
                    1627,
                    1629,
                    1634,
                    612,
                    1124,
                    1638,
                    1650,
                    1139,
                    1652,
                    1659,
                    653,
                    1680,
                    660,
                    1174,
                    1687,
                    1690,
                    1692,
                    1184,
                    1187,
                    166,
                    170,
                    682,
                    1195,
                    174,
                    175,
                    1715,
                    1732,
                    1736,
                    716,
                    205,
                    1740,
                    1744,
                    210,
                    1748,
                    1752,
                    1759,
                    225,
                    1763,
                    1767,
                    1774,
                    1783,
                    760,
                    1791,
                    1792,
                    283,
                    802,
                    296,
                    304,
                    1846,
                    1853,
                    323,
                    1355,
                    339,
                    1876,
                    343,
                    347,
                    1388,
                    1394,
                    883,
                    384,
                    898,
                    948,
                    438,
                    952,
                    1464,
                    1476,
                    1478,
                    1990,
                    1490,
                    981,
                    1495,
                    2013,
                    1502,
                    997,
                    1009,
                    1012
                ],
                "property": [
                    1543,
                    1547,
                    1551,
                    656,
                    662,
                    668,
                    674,
                    164,
                    679,
                    168,
                    1577,
                    200,
                    1509,
                    233,
                    1513,
                    1517,
                    1522,
                    758,
                    1535
                ],
                "int": [
                    322,
                    999,
                    169,
                    1066,
                    1164,
                    1685,
                    1147
                ],
                "new_labels": [
                    1381,
                    1383,
                    173,
                    175,
                    183
                ],
                "old_len": [
                    177,
                    180,
                    174
                ],
                "axis": [
                    520,
                    174,
                    432,
                    433,
                    1205,
                    183,
                    1463,
                    1464,
                    1210,
                    1468,
                    1472,
                    197,
                    1228,
                    1484,
                    1233,
                    1240,
                    1242,
                    1245,
                    1373,
                    1502,
                    737,
                    1251,
                    740,
                    1381,
                    743,
                    744,
                    1383,
                    1260,
                    749,
                    496,
                    1528
                ],
                "new_len": [
                    177,
                    180,
                    175
                ],
                "ValueError": [
                    1666,
                    1698,
                    1699,
                    1479,
                    1162,
                    1679,
                    178,
                    1496,
                    1465,
                    955
                ],
                "obj": [
                    196,
                    197,
                    198,
                    431,
                    432,
                    433,
                    1628
                ],
                "self.copy": [
                    196,
                    1231
                ],
                "copy": [
                    2016,
                    196,
                    712,
                    873,
                    779,
                    1228,
                    781,
                    782,
                    1070,
                    1231,
                    2027,
                    725,
                    1210,
                    702
                ],
                "obj.set_axis": [
                    197
                ],
                "_transform_index": [
                    197
                ],
                "mapper": [
                    197
                ],
                "level": [
                    1955,
                    197,
                    1957
                ],
                "blk": [
                    257,
                    1281,
                    1284,
                    1287,
                    905,
                    1291,
                    652,
                    908,
                    909,
                    1173,
                    1174,
                    1175,
                    1431,
                    1177,
                    1432,
                    1179,
                    1433,
                    1325,
                    1328,
                    1076,
                    1333,
                    1078,
                    1079,
                    1081,
                    1339,
                    1085,
                    1088,
                    1089,
                    1090,
                    841,
                    842,
                    843,
                    208,
                    209,
                    1104,
                    222,
                    223,
                    1249,
                    613,
                    1253,
                    1256,
                    617,
                    746,
                    1005,
                    1006,
                    1013,
                    1014,
                    1016,
                    253
                ],
                "blk.mgr_locs.is_slice_like": [
                    209
                ],
                "blk.mgr_locs": [
                    1088,
                    1090,
                    1177,
                    842,
                    1433,
                    908,
                    1006,
                    209,
                    1014,
                    1174,
                    1016,
                    1081,
                    1175,
                    1179,
                    1085,
                    223
                ],
                "blk.mgr_locs.as_slice": [
                    209
                ],
                "slice": [
                    1634,
                    1284,
                    1638,
                    743,
                    1294,
                    304,
                    209,
                    1170,
                    884,
                    981,
                    1334,
                    1976,
                    1369,
                    1659,
                    1502,
                    1119
                ],
                "new_blknos": [
                    224,
                    227,
                    230,
                    1097,
                    1098,
                    1099,
                    1101,
                    217,
                    219
                ],
                "np.empty": [
                    803,
                    1795,
                    837,
                    901,
                    903,
                    1097,
                    537,
                    1358,
                    1425,
                    217,
                    218,
                    1855
                ],
                "self.shape": [
                    993,
                    803,
                    837,
                    839,
                    1354,
                    1424,
                    721,
                    338,
                    217,
                    218,
                    1373,
                    1277,
                    1054
                ],
                "np.int64": [
                    1097,
                    217,
                    218,
                    1987
                ],
                "new_blklocs": [
                    225,
                    218,
                    220,
                    231
                ],
                "new_blknos.fill": [
                    1098,
                    219
                ],
                "new_blklocs.fill": [
                    220
                ],
                "blkno": [
                    224,
                    1316,
                    1317,
                    1004,
                    1005,
                    1325,
                    1010,
                    1075,
                    1076,
                    1172,
                    1173,
                    1086,
                    1021,
                    222
                ],
                "enumerate": [
                    1856,
                    609,
                    1957,
                    327,
                    618,
                    908,
                    1104,
                    1720,
                    1021,
                    222
                ],
                "rl": [
                    224,
                    225,
                    842,
                    843,
                    844,
                    908,
                    909,
                    223
                ],
                "rl.indexer": [
                    224,
                    225,
                    843,
                    844
                ],
                "np.arange": [
                    225,
                    1090,
                    547,
                    1124,
                    1099,
                    525,
                    1715,
                    948,
                    1140,
                    1368
                ],
                "any": [
                    672,
                    1378,
                    227,
                    677,
                    424
                ],
                "self._blknos": [
                    1184,
                    258,
                    1187,
                    1124,
                    230,
                    1004,
                    1069,
                    974,
                    1100,
                    1101,
                    1139,
                    1172,
                    1300,
                    1304,
                    254
                ],
                "self._blklocs": [
                    1088,
                    1090,
                    1186,
                    1125,
                    231,
                    1070,
                    975,
                    1140,
                    1301,
                    1307,
                    1181,
                    1183
                ],
                "self._consolidate_inplace": [
                    481,
                    867,
                    391,
                    711,
                    1196,
                    239,
                    1392,
                    659,
                    1236,
                    1366,
                    665,
                    701,
                    671
                ],
                "counts": [
                    240,
                    1970,
                    243,
                    244,
                    1971,
                    1972
                ],
                "dict": [
                    240,
                    269
                ],
                "b": [
                    1921,
                    1667,
                    516,
                    261,
                    262,
                    517,
                    1668,
                    1925,
                    1930,
                    269,
                    270,
                    525,
                    526,
                    1936,
                    532,
                    539,
                    540,
                    287,
                    422,
                    424,
                    425,
                    429,
                    435,
                    702,
                    712,
                    720,
                    724,
                    725,
                    726,
                    727,
                    1492,
                    729,
                    1879,
                    1629,
                    2014,
                    2015,
                    2020,
                    870,
                    871,
                    2022,
                    2026,
                    621,
                    622,
                    495,
                    496,
                    241,
                    242,
                    243,
                    498,
                    624,
                    2030,
                    247,
                    504,
                    250,
                    635,
                    1021,
                    1918
                ],
                "v": [
                    1728,
                    1729,
                    242,
                    243,
                    1726
                ],
                "f": [
                    393,
                    399,
                    242,
                    435,
                    405
                ],
                "counts.get": [
                    243
                ],
                "b.shape": [
                    243,
                    1668,
                    525
                ],
                "self._get_counts": [
                    250,
                    247
                ],
                "b.dtype.name": [
                    247
                ],
                "b.dtype": [
                    871,
                    1936,
                    1879,
                    247,
                    1629
                ],
                "b.ftype": [
                    250
                ],
                "dtypes": [
                    253,
                    254
                ],
                "blk.dtype": [
                    253,
                    1287
                ],
                "algos.take_1d": [
                    258,
                    1100,
                    726,
                    1303,
                    1306,
                    254
                ],
                "algos": [
                    258,
                    1100,
                    726,
                    1303,
                    1306,
                    254
                ],
                "ftypes": [
                    257,
                    258,
                    652,
                    653
                ],
                "blk.ftype": [
                    257,
                    652
                ],
                "block_values": [
                    1795,
                    1796,
                    261,
                    1798,
                    1358,
                    1359,
                    1360,
                    277
                ],
                "b.values": [
                    261,
                    269,
                    525,
                    532,
                    2015
                ],
                "block_items": [
                    277,
                    262
                ],
                "self.items": [
                    384,
                    262,
                    1160,
                    1168,
                    1425,
                    1433,
                    1060,
                    1063,
                    429,
                    943,
                    946,
                    948,
                    1596,
                    323,
                    963,
                    965,
                    343,
                    347,
                    732,
                    991,
                    756,
                    886,
                    1019,
                    383
                ],
                "b.mgr_locs.indexer": [
                    622,
                    269,
                    262,
                    429
                ],
                "b.mgr_locs": [
                    517,
                    262,
                    424,
                    269,
                    429,
                    622,
                    720,
                    726,
                    727,
                    540
                ],
                "axes_array": [
                    267,
                    277,
                    263
                ],
                "list": [
                    1473,
                    1827,
                    1894,
                    263,
                    1354,
                    1259,
                    748,
                    1710,
                    1487,
                    784,
                    1232,
                    1685,
                    1463,
                    731,
                    509
                ],
                "extra_state": [
                    265,
                    277
                ],
                "make_block": [
                    1634,
                    547,
                    1829,
                    1638,
                    1798,
                    1769,
                    2026,
                    1132,
                    1360,
                    1777,
                    1170,
                    1785,
                    1814,
                    281,
                    1754,
                    1659,
                    1116,
                    1502
                ],
                "values": [
                    1808,
                    1811,
                    532,
                    1812,
                    1814,
                    281,
                    544,
                    547,
                    1827,
                    1829,
                    311,
                    312,
                    975,
                    593,
                    981,
                    601,
                    605,
                    607,
                    1632,
                    1633,
                    1634,
                    2015,
                    1636,
                    1637,
                    1638,
                    2017,
                    2019,
                    2020
                ],
                "mgr_locs": [
                    1316,
                    1322,
                    1332,
                    311,
                    312,
                    281,
                    1340,
                    1342
                ],
                "isinstance": [
                    1921,
                    1924,
                    1925,
                    1164,
                    283,
                    418,
                    1954,
                    1066,
                    1839,
                    1845,
                    1463,
                    1976,
                    1983,
                    1473,
                    1487,
                    1369,
                    602,
                    1501,
                    999,
                    1650
                ],
                "state": [
                    292,
                    283,
                    284,
                    285,
                    287
                ],
                "unpickle_block": [
                    311,
                    287
                ],
                "ax_arrays": [
                    292,
                    294
                ],
                "bvalues": [
                    312,
                    292
                ],
                "bitems": [
                    296,
                    304,
                    307,
                    292
                ],
                "equals": [
                    296
                ],
                "all_mgr_locs": [
                    304,
                    306,
                    312
                ],
                "get_indexer": [
                    307
                ],
                "blk_items": [
                    307
                ],
                "zip": [
                    516,
                    618,
                    1390,
                    312,
                    1850,
                    1407
                ],
                "self._post_setstate": [
                    315
                ],
                "self._is_consolidated": [
                    649,
                    653,
                    318,
                    935
                ],
                "self._known_consolidated": [
                    647,
                    936,
                    1193,
                    654,
                    1145,
                    319
                ],
                "output": [
                    326,
                    329,
                    331,
                    334,
                    335
                ],
                "pprint_thing": [
                    334,
                    326
                ],
                "self.__class__.__name__": [
                    326
                ],
                "i": [
                    908,
                    909,
                    538,
                    541,
                    542,
                    1957,
                    1720,
                    1722,
                    1856,
                    1729,
                    1857,
                    327,
                    328,
                    331,
                    974,
                    975,
                    1104,
                    1754,
                    1755,
                    609,
                    1769,
                    618,
                    1770,
                    622,
                    623,
                    1777,
                    1778,
                    1785,
                    1786
                ],
                "str": [
                    1921,
                    325,
                    871
                ],
                "mgr_shape": [
                    338,
                    341
                ],
                "tot_items": [
                    1668,
                    1669,
                    339,
                    1685,
                    342,
                    343,
                    347
                ],
                "sum": [
                    339,
                    1668
                ],
                "x.mgr_locs": [
                    339
                ],
                "x": [
                    1792,
                    1921,
                    1822,
                    1957,
                    1958,
                    1961,
                    1964,
                    1839,
                    1840,
                    1842,
                    1845,
                    1846,
                    1848,
                    339,
                    1624,
                    1632,
                    1888,
                    1636,
                    1918
                ],
                "block._verify_integrity": [
                    341
                ],
                "block.shape": [
                    341,
                    342
                ],
                "construction_error": [
                    1680,
                    1669,
                    342
                ],
                "result_blocks": [
                    611,
                    425,
                    436,
                    438,
                    441,
                    379,
                    637,
                    639
                ],
                "filter": [
                    423,
                    386,
                    382,
                    383
                ],
                "filter_locs": [
                    384,
                    388,
                    424,
                    383
                ],
                "set": [
                    1104,
                    653,
                    383
                ],
                "self.items.get_indexer_for": [
                    963,
                    383
                ],
                "kwargs": [
                    388,
                    1541,
                    395,
                    401,
                    416,
                    418,
                    419,
                    551,
                    554,
                    557,
                    560,
                    433,
                    435,
                    563,
                    566,
                    569,
                    572,
                    575,
                    578,
                    581,
                    585
                ],
                "consolidate": [
                    480,
                    390
                ],
                "align_copy": [
                    400,
                    433,
                    394,
                    408
                ],
                "kwargs.get": [
                    401,
                    395
                ],
                "align_keys": [
                    417,
                    396,
                    398,
                    402,
                    404,
                    409,
                    411
                ],
                "aligned_args": [
                    431,
                    428,
                    415
                ],
                "k": [
                    416,
                    417,
                    418,
                    419,
                    1729,
                    431,
                    433,
                    1725
                ],
                "ABCExtensionArray": [
                    418
                ],
                "hasattr": [
                    419
                ],
                "b.mgr_locs.isin": [
                    424
                ],
                "result_blocks.append": [
                    425
                ],
                "b_items": [
                    433,
                    429
                ],
                "aligned_args.items": [
                    431
                ],
                "obj._info_axis_number": [
                    432
                ],
                "obj.reindex": [
                    433
                ],
                "applied": [
                    435,
                    436
                ],
                "getattr": [
                    602,
                    435,
                    1667
                ],
                "_extend_blocks": [
                    1896,
                    633,
                    436
                ],
                "self.make_empty": [
                    717,
                    439
                ],
                "bm": [
                    640,
                    641,
                    928,
                    929,
                    930,
                    1444,
                    1445,
                    751,
                    752,
                    753,
                    440,
                    927,
                    443,
                    444,
                    639
                ],
                "bm._consolidate_inplace": [
                    640,
                    752,
                    443,
                    929
                ],
                "is_list_like": [
                    488
                ],
                "qs": [
                    488,
                    489,
                    498,
                    496
                ],
                "Float64Index": [
                    489
                ],
                "b.quantile": [
                    496
                ],
                "interpolation": [
                    496
                ],
                "axe": [
                    498,
                    500
                ],
                "get_axe": [
                    498
                ],
                "axes.append": [
                    500
                ],
                "blocks.append": [
                    1799,
                    1321,
                    2030,
                    501,
                    1335,
                    1338
                ],
                "ndim": [
                    504,
                    505,
                    507,
                    1451
                ],
                "b.ndim": [
                    504
                ],
                "new_axes": [
                    513,
                    520,
                    523,
                    748,
                    749,
                    782,
                    751,
                    784,
                    529,
                    785,
                    1259,
                    1260,
                    1261,
                    509
                ],
                "sb": [
                    516,
                    517
                ],
                "sb.mgr_locs": [
                    517
                ],
                "np.concatenate": [
                    520,
                    1108,
                    720
                ],
                "ax.values": [
                    520
                ],
                "transposed": [
                    522
                ],
                "b.make_block": [
                    525
                ],
                "b.values.T": [
                    525
                ],
                "concat_compat": [
                    1633,
                    532,
                    1637
                ],
                "indexer": [
                    537,
                    541,
                    544,
                    948,
                    1205,
                    951,
                    952,
                    953,
                    1210,
                    963,
                    1987,
                    965,
                    1989,
                    1990,
                    1227,
                    720,
                    721,
                    1367,
                    1240,
                    1369,
                    1368,
                    1370,
                    732,
                    1246,
                    991,
                    1375,
                    994,
                    1250,
                    1378,
                    1381,
                    999,
                    1000,
                    1383
                ],
                "np.intp": [
                    537
                ],
                "j": [
                    540,
                    541
                ],
                "values.take": [
                    544
                ],
                "SingleBlockManager": [
                    1640,
                    978,
                    546
                ],
                "self.apply": [
                    578,
                    581,
                    1541,
                    551,
                    585,
                    554,
                    557,
                    560,
                    785,
                    563,
                    566,
                    569,
                    572,
                    575
                ],
                "func": [
                    1961,
                    1964,
                    1957,
                    551
                ],
                "dtype": [
                    896,
                    899,
                    903,
                    911,
                    912,
                    1808,
                    1811,
                    1812,
                    1822,
                    1825,
                    1827,
                    828,
                    1855,
                    832,
                    833,
                    578,
                    834,
                    835,
                    837,
                    843,
                    1357,
                    1358,
                    1491,
                    1492,
                    1892,
                    1894,
                    873
                ],
                "np.ndim": [
                    584
                ],
                "value": [
                    1063,
                    584,
                    585,
                    1034,
                    1040,
                    1170,
                    1043,
                    1044,
                    1078,
                    1047,
                    1052,
                    1117,
                    1054
                ],
                "inplace": [
                    617,
                    628,
                    590
                ],
                "validate_bool_kwarg": [
                    590
                ],
                "self.as_array": [
                    593
                ],
                "isna": [
                    960,
                    945,
                    948,
                    600,
                    601
                ],
                "s": [
                    609,
                    618,
                    626,
                    600,
                    602,
                    605,
                    607
                ],
                "Timedelta": [
                    602
                ],
                "Timestamp": [
                    602
                ],
                "_compare_or_regex_search": [
                    604,
                    607
                ],
                "maybe_convert_objects": [
                    605
                ],
                "s.asm8": [
                    605
                ],
                "regex": [
                    609,
                    605,
                    630,
                    1917,
                    607
                ],
                "masks": [
                    609,
                    622
                ],
                "comp": [
                    609
                ],
                "src_list": [
                    609,
                    618,
                    612
                ],
                "src_len": [
                    612,
                    623
                ],
                "rb": [
                    617,
                    637,
                    636,
                    621
                ],
                "blk.copy": [
                    617,
                    1333
                ],
                "d": [
                    618,
                    627
                ],
                "dest_list": [
                    618
                ],
                "new_rb": [
                    636,
                    633,
                    635,
                    620
                ],
                "m": [
                    632,
                    625,
                    622
                ],
                "convert": [
                    629,
                    1374,
                    623
                ],
                "result": [
                    901,
                    903,
                    1927,
                    1929,
                    909,
                    912,
                    914,
                    1943,
                    837,
                    843,
                    1231,
                    1232,
                    849,
                    1233,
                    1234,
                    624,
                    633,
                    890,
                    892,
                    893
                ],
                "b._replace_coerce": [
                    624
                ],
                "m.any": [
                    632
                ],
                "new_rb.append": [
                    635
                ],
                "result_blocks.extend": [
                    637
                ],
                "all": [
                    666,
                    1406,
                    1390
                ],
                "block.is_numeric": [
                    666
                ],
                "block.is_datelike": [
                    672
                ],
                "block.is_extension": [
                    677
                ],
                "is_view": [
                    683
                ],
                "self.combine": [
                    712,
                    873,
                    702
                ],
                "b.is_bool": [
                    702
                ],
                "b.is_numeric": [
                    712
                ],
                "np.sort": [
                    720
                ],
                "b.mgr_locs.as_array": [
                    720,
                    727
                ],
                "inv_indexer": [
                    721,
                    727
                ],
                "lib.get_reverse_indexer": [
                    721
                ],
                "lib": [
                    721
                ],
                "new_blocks": [
                    1428,
                    1439,
                    1824,
                    1444,
                    1830,
                    1832,
                    723,
                    1111,
                    729,
                    1115,
                    1246,
                    734,
                    1248,
                    1891,
                    741,
                    1896,
                    1897,
                    746,
                    1131,
                    1261,
                    751,
                    1142
                ],
                "b.copy": [
                    725
                ],
                "new_blocks.append": [
                    729,
                    1131,
                    1830
                ],
                "self.items.take": [
                    732
                ],
                "IndexError": [
                    1529,
                    738,
                    1243
                ],
                "self._slice_take_blocks_ax0": [
                    741,
                    1246
                ],
                "slobj": [
                    1284,
                    741,
                    744,
                    1292,
                    749,
                    1532,
                    1300,
                    1301,
                    1304,
                    1307,
                    1276
                ],
                "slicer": [
                    744,
                    745,
                    746,
                    743
                ],
                "blk.getitem_block": [
                    746,
                    1284
                ],
                "item": [
                    960,
                    963,
                    1060,
                    1063,
                    1160,
                    1162,
                    1168,
                    945,
                    946,
                    756,
                    1596,
                    991
                ],
                "deep": [
                    777,
                    778,
                    785
                ],
                "ax.copy": [
                    779
                ],
                "ax.view": [
                    781
                ],
                "arr": [
                    1856,
                    1857,
                    803,
                    804,
                    815,
                    817,
                    1970,
                    819,
                    821
                ],
                "float": [
                    803
                ],
                "transpose": [
                    804,
                    821
                ],
                "arr.transpose": [
                    804,
                    821
                ],
                "items": [
                    898,
                    1956,
                    806,
                    807,
                    1961,
                    1962,
                    1964,
                    1965,
                    886,
                    889
                ],
                "mgr": [
                    1664,
                    807,
                    1640,
                    809,
                    1641,
                    811,
                    1676,
                    1677,
                    1678,
                    815,
                    817,
                    819,
                    2006,
                    1662,
                    1663
                ],
                "self.reindex_axis": [
                    807
                ],
                "self._is_single_block": [
                    816,
                    1280,
                    811
                ],
                "is_datetimetz": [
                    811
                ],
                "mgr.blocks": [
                    817,
                    811,
                    815
                ],
                "get_values": [
                    817,
                    815
                ],
                "object": [
                    1795,
                    901,
                    815
                ],
                "self.is_mixed_type": [
                    816
                ],
                "np.asarray": [
                    817,
                    1842
                ],
                "mgr._interleave": [
                    819
                ],
                "_interleaved_dtype": [
                    896,
                    1491,
                    828
                ],
                "is_sparse": [
                    832
                ],
                "dtype.subtype": [
                    833
                ],
                "is_extension_array_dtype": [
                    1034,
                    834,
                    899,
                    911
                ],
                "itemmask": [
                    844,
                    846,
                    839
                ],
                "np.zeros": [
                    993,
                    1094,
                    839
                ],
                "blk.get_values": [
                    843
                ],
                "itemmask.all": [
                    846
                ],
                "bd": [
                    873,
                    869,
                    871
                ],
                "append": [
                    1129,
                    1729,
                    871
                ],
                "bd.setdefault": [
                    871
                ],
                "bd.items": [
                    873
                ],
                "iget": [
                    884
                ],
                "loc": [
                    1164,
                    909,
                    1168,
                    1170,
                    1172,
                    1178,
                    1181,
                    1186,
                    1187,
                    1060,
                    1066,
                    1067,
                    1069,
                    1070,
                    946,
                    953,
                    1596,
                    957,
                    1597,
                    1598,
                    1605,
                    884,
                    893
                ],
                "items.is_unique": [
                    889
                ],
                "self._interleave": [
                    890
                ],
                "result.T": [
                    892
                ],
                "n": [
                    898,
                    1378,
                    901,
                    903,
                    1373,
                    1375
                ],
                "blk.iget": [
                    909
                ],
                "_from_sequence": [
                    912
                ],
                "dtype.construct_array_type": [
                    912
                ],
                "self.is_consolidated": [
                    924,
                    933
                ],
                "bm._is_consolidated": [
                    928
                ],
                "_consolidate": [
                    1493,
                    934
                ],
                "self.items.is_unique": [
                    943
                ],
                "self.items.get_loc": [
                    946,
                    1060,
                    1596,
                    991
                ],
                "is_scalar": [
                    1929,
                    951
                ],
                "indexer.item": [
                    953
                ],
                "self.iget": [
                    957
                ],
                "TypeError": [
                    961,
                    1938,
                    1165
                ],
                "self.reindex_indexer": [
                    1209,
                    964,
                    1382
                ],
                "block.iget": [
                    975
                ],
                "block.make_block_same_class": [
                    980
                ],
                "is_deleted": [
                    993,
                    994,
                    995,
                    1094,
                    1095,
                    1002,
                    1099,
                    1007,
                    1019
                ],
                "np.bool_": [
                    1760,
                    993,
                    1094,
                    1983
                ],
                "ref_loc_offset": [
                    1016,
                    995
                ],
                "is_deleted.cumsum": [
                    995
                ],
                "is_blk_deleted": [
                    1021,
                    1010,
                    997
                ],
                "affected_start": [
                    1000,
                    1002,
                    1004
                ],
                "is_deleted.nonzero": [
                    1002
                ],
                "_": [
                    1287,
                    1770,
                    1004,
                    1778,
                    1786,
                    1755
                ],
                "_fast_count_smallints": [
                    1172,
                    1004
                ],
                "bml": [
                    1006,
                    1007,
                    1009,
                    1014,
                    1016
                ],
                "blk_del": [
                    1009,
                    1012,
                    1013,
                    1007
                ],
                "nonzero": [
                    1007
                ],
                "bml.indexer": [
                    1016,
                    1007
                ],
                "blk.delete": [
                    1089,
                    1013
                ],
                "bml.add": [
                    1016
                ],
                "self._shape": [
                    1191,
                    1023
                ],
                "value_is_extension_type": [
                    1112,
                    1034,
                    1037
                ],
                "value.ndim": [
                    1043
                ],
                "_safe_reshape": [
                    1044
                ],
                "value.shape": [
                    1044,
                    1054
                ],
                "placement.indexer": [
                    1052
                ],
                "placement": [
                    1827,
                    1859,
                    1829,
                    2020,
                    2023,
                    1355,
                    2028,
                    1360,
                    1808,
                    1814,
                    1850,
                    2011,
                    1052
                ],
                "KeyError": [
                    1061
                ],
                "self.insert": [
                    1063
                ],
                "blknos": [
                    1316,
                    1069,
                    1075,
                    1300,
                    1303
                ],
                "blklocs": [
                    1070,
                    1301,
                    1077,
                    1306,
                    1340
                ],
                "unfit_mgr_locs": [
                    1121,
                    1124,
                    1125,
                    1135,
                    1072,
                    1139,
                    1108,
                    1109,
                    1140,
                    1081
                ],
                "unfit_val_locs": [
                    1073,
                    1082,
                    1107,
                    1129
                ],
                "removed_blknos": [
                    1092,
                    1095,
                    1099,
                    1104,
                    1074,
                    1086
                ],
                "val_locs": [
                    1075,
                    1077,
                    1079,
                    1082,
                    1085
                ],
                "libinternals.get_blkno_placements": [
                    1075,
                    1316
                ],
                "libinternals": [
                    1980,
                    1075,
                    1316
                ],
                "blk_locs": [
                    1089,
                    1081,
                    1077,
                    1079
                ],
                "val_locs.indexer": [
                    1077
                ],
                "blk.should_store": [
                    1078
                ],
                "blk.set": [
                    1079
                ],
                "value_getitem": [
                    1133,
                    1079
                ],
                "unfit_mgr_locs.append": [
                    1081
                ],
                "blk.mgr_locs.as_array": [
                    1081,
                    1177
                ],
                "unfit_val_locs.append": [
                    1082
                ],
                "removed_blknos.append": [
                    1086
                ],
                "blk.mgr_locs.indexer": [
                    1088,
                    1433,
                    1090
                ],
                "self.nblocks": [
                    1097,
                    1099,
                    1094
                ],
                "unfit_count": [
                    1140,
                    1124,
                    1109
                ],
                "new_blocks.extend": [
                    1115,
                    1439
                ],
                "value.copy": [
                    1117
                ],
                "mgr_loc": [
                    1121,
                    1332,
                    1334,
                    1119
                ],
                "unfit_val_items": [
                    1129,
                    1133
                ],
                "allow_duplicates": [
                    1160
                ],
                "new_axis": [
                    1189,
                    1640,
                    1228,
                    1260,
                    1168,
                    1233
                ],
                "self.items.insert": [
                    1168
                ],
                "count": [
                    1172,
                    1174
                ],
                "blk.mgr_locs.add": [
                    1175
                ],
                "new_mgr_locs": [
                    1177,
                    1178,
                    1179
                ],
                "blk.mgr_locs.as_array.copy": [
                    1177
                ],
                "self._blklocs.shape": [
                    1181
                ],
                "np.append": [
                    1184,
                    1183
                ],
                "np.insert": [
                    1186,
                    1187
                ],
                "new_index": [
                    1444,
                    1427,
                    1204,
                    1205,
                    1206,
                    1210
                ],
                "reindex": [
                    1205
                ],
                "method": [
                    1206
                ],
                "limit": [
                    1206
                ],
                "fill_value": [
                    1253,
                    1287,
                    1288,
                    1319,
                    1322,
                    1352,
                    1353,
                    1357,
                    1359,
                    1210,
                    1436,
                    1246
                ],
                "result.axes": [
                    1232,
                    1233
                ],
                "allow_dups": [
                    1239
                ],
                "_can_reindex": [
                    1240
                ],
                "blk.take_nd": [
                    1249,
                    1291,
                    1339
                ],
                "blk.fill_value": [
                    1253
                ],
                "allow_fill": [
                    1988,
                    1285,
                    1286,
                    1304,
                    1274,
                    1307,
                    1277
                ],
                "fill_tuple": [
                    1286,
                    1319,
                    1288,
                    1295,
                    1274
                ],
                "sl_type": [
                    1299,
                    1283,
                    1276
                ],
                "sllen": [
                    1276,
                    1284,
                    1294
                ],
                "_preprocess_slice_or_indexer": [
                    1276
                ],
                "slice_or_indexer": [
                    1985,
                    1987,
                    1976,
                    1979,
                    1980,
                    1277,
                    1983
                ],
                "maybe_promote": [
                    1287
                ],
                "self._make_na_block": [
                    1322
                ],
                "blk._can_consolidate": [
                    1328
                ],
                "newblk": [
                    1333,
                    1334,
                    1335
                ],
                "newblk.mgr_locs": [
                    1334
                ],
                "mgr_locs.indexer": [
                    1340
                ],
                "np.nan": [
                    1353,
                    1796
                ],
                "block_shape": [
                    1697,
                    1354,
                    1355,
                    1358,
                    1685
                ],
                "infer_dtype_from_scalar": [
                    1357
                ],
                "block_values.fill": [
                    1796,
                    1359
                ],
                "indexer.start": [
                    1368
                ],
                "indexer.stop": [
                    1368
                ],
                "indexer.step": [
                    1368
                ],
                "np.asanyarray": [
                    1370,
                    1987
                ],
                "maybe_convert_indices": [
                    1989,
                    1375
                ],
                "verify": [
                    1377
                ],
                "Exception": [
                    1379
                ],
                "take": [
                    1381
                ],
                "self_axes": [
                    1387,
                    1388,
                    1390
                ],
                "other_axes": [
                    1387,
                    1388,
                    1390
                ],
                "other.axes": [
                    1387
                ],
                "other": [
                    1393,
                    1394,
                    1387,
                    1405
                ],
                "ax1.equals": [
                    1390
                ],
                "ax1": [
                    1390
                ],
                "ax2": [
                    1390
                ],
                "other._consolidate_inplace": [
                    1393
                ],
                "other.blocks": [
                    1394,
                    1405
                ],
                "block.dtype.name": [
                    1402
                ],
                "block.dtype": [
                    1402
                ],
                "block.mgr_locs.as_array.tolist": [
                    1402
                ],
                "block.mgr_locs.as_array": [
                    1402
                ],
                "block.mgr_locs": [
                    1402
                ],
                "self_blocks": [
                    1404,
                    1407
                ],
                "sorted": [
                    1889,
                    1404,
                    1405
                ],
                "canonicalize": [
                    1404,
                    1405
                ],
                "other_blocks": [
                    1405,
                    1407
                ],
                "block.equals": [
                    1407
                ],
                "oblock": [
                    1407
                ],
                "n_rows": [
                    1424,
                    1435
                ],
                "dummy": [
                    1425,
                    1426,
                    1427
                ],
                "unstacker_func": [
                    1425,
                    1433
                ],
                "new_columns": [
                    1442,
                    1426,
                    1444,
                    1434
                ],
                "dummy.get_new_columns": [
                    1426
                ],
                "dummy.get_new_index": [
                    1427
                ],
                "columns_mask": [
                    1440,
                    1442,
                    1429
                ],
                "mask": [
                    1432,
                    1440
                ],
                "blk._unstack": [
                    1432
                ],
                "partial": [
                    1433
                ],
                "columns_mask.extend": [
                    1440
                ],
                "BlockManager": [
                    1444,
                    1448,
                    1676,
                    2032,
                    1662
                ],
                "_is_consolidated": [
                    1452
                ],
                "_known_consolidated": [
                    1453
                ],
                "Union": [
                    1864,
                    1459
                ],
                "List": [
                    1459,
                    1863
                ],
                "fastpath": [
                    1471
                ],
                "b.astype": [
                    1492
                ],
                "self._block.values": [
                    1515,
                    1605
                ],
                "self._block": [
                    1568,
                    1571,
                    1597,
                    1605,
                    1575,
                    1545,
                    1515,
                    1579,
                    1549,
                    1553,
                    1562,
                    1532,
                    1565
                ],
                "self._block._slice": [
                    1532
                ],
                "self.index": [
                    1532
                ],
                "self._block.dtype": [
                    1545,
                    1562
                ],
                "self._block.array_dtype": [
                    1549
                ],
                "self._block.ftype": [
                    1553,
                    1565
                ],
                "self.dtype.name": [
                    1556
                ],
                "self.dtype": [
                    1556
                ],
                "self.ftype": [
                    1559
                ],
                "self._block.external_values": [
                    1568
                ],
                "self._block.internal_values": [
                    1571
                ],
                "self._block.to_dense": [
                    1575
                ],
                "self._block._can_hold_na": [
                    1579
                ],
                "self._block.delete": [
                    1597
                ],
                "delete": [
                    1598
                ],
                "non_empties": [
                    1624,
                    1627,
                    1628
                ],
                "to_concat": [
                    1624,
                    1636
                ],
                "obj.blocks": [
                    1628
                ],
                "new_block": [
                    1640,
                    1634,
                    1638,
                    1630
                ],
                "concat_same_type": [
                    1630
                ],
                "x.values": [
                    1632
                ],
                "x._block.values": [
                    1636
                ],
                "x._block": [
                    1636
                ],
                "mgr._consolidate_inplace": [
                    1677,
                    1663
                ],
                "shape": [
                    1792,
                    1795,
                    1669,
                    1680,
                    1853,
                    1855
                ],
                "e": [
                    1680,
                    1669,
                    1696,
                    1695
                ],
                "form_blocks": [
                    1675
                ],
                "arrays": [
                    1856,
                    1675,
                    1680,
                    1850,
                    1852,
                    1853,
                    1726
                ],
                "names": [
                    1713,
                    1850,
                    1675,
                    1725
                ],
                "passed": [
                    1700,
                    1685,
                    1687,
                    1688,
                    1695
                ],
                "map": [
                    1685
                ],
                "implied": [
                    1700,
                    1690,
                    1692,
                    1693,
                    1695
                ],
                "items_dict": [
                    1710,
                    1729,
                    1732,
                    1733,
                    1736,
                    1737,
                    1740,
                    1741,
                    1744,
                    1745,
                    1748,
                    1749,
                    1752,
                    1755,
                    1759,
                    1760,
                    1763,
                    1764,
                    1767,
                    1770,
                    1774,
                    1778,
                    1783,
                    1786
                ],
                "defaultdict": [
                    1710
                ],
                "extra_locs": [
                    1792,
                    1798,
                    1711,
                    1722,
                    1791
                ],
                "names_idx": [
                    1713,
                    1714,
                    1715,
                    1717,
                    1718
                ],
                "names_idx.equals": [
                    1714
                ],
                "names_indexer": [
                    1720,
                    1715,
                    1718
                ],
                "is_unique": [
                    1717
                ],
                "names_idx.intersection": [
                    1717
                ],
                "names_idx.get_indexer_for": [
                    1718
                ],
                "name_idx": [
                    1720,
                    1721,
                    1725,
                    1726
                ],
                "extra_locs.append": [
                    1722
                ],
                "block_type": [
                    1728,
                    1729
                ],
                "get_block_type": [
                    1728
                ],
                "block_type.__name__": [
                    1729
                ],
                "float_blocks": [
                    1733,
                    1734
                ],
                "_multi_blockify": [
                    1741,
                    1737,
                    1745,
                    1733
                ],
                "blocks.extend": [
                    1761,
                    1765,
                    1734,
                    1789,
                    1738,
                    1772,
                    1742,
                    1746,
                    1781,
                    1750,
                    1757
                ],
                "complex_blocks": [
                    1737,
                    1738
                ],
                "timedelta_blocks": [
                    1741,
                    1742
                ],
                "int_blocks": [
                    1745,
                    1746
                ],
                "datetime_blocks": [
                    1749,
                    1750
                ],
                "_simple_blockify": [
                    1760,
                    1764,
                    1749
                ],
                "_NS_DTYPE": [
                    1749
                ],
                "dttz_blocks": [
                    1753,
                    1757
                ],
                "array": [
                    1786,
                    1769,
                    1770,
                    1777,
                    1778,
                    1785,
                    1754,
                    1755
                ],
                "DatetimeTZBlock": [
                    1754
                ],
                "bool_blocks": [
                    1760,
                    1761
                ],
                "object_blocks": [
                    1764,
                    1765
                ],
                "np.object_": [
                    1764
                ],
                "cat_blocks": [
                    1768,
                    1772
                ],
                "CategoricalBlock": [
                    1769
                ],
                "external_blocks": [
                    1776,
                    1789,
                    1784,
                    1781
                ],
                "ExtensionBlock": [
                    1777
                ],
                "ObjectValuesExtensionBlock": [
                    1785
                ],
                "na_block": [
                    1798,
                    1799
                ],
                "_stack_arrays": [
                    1808,
                    1827
                ],
                "tuples": [
                    1808,
                    1850,
                    1822
                ],
                "values.dtype": [
                    1811
                ],
                "values.astype": [
                    1812
                ],
                "grouper": [
                    1825,
                    1892,
                    1822,
                    1889
                ],
                "itertools.groupby": [
                    1889,
                    1822
                ],
                "itertools": [
                    1889,
                    1822
                ],
                "tup_block": [
                    1825,
                    1827
                ],
                "ABCSeries": [
                    1845,
                    1839
                ],
                "x._values": [
                    1840
                ],
                "x.shape": [
                    1848
                ],
                "first": [
                    1852,
                    1853
                ],
                "_shape_compat": [
                    1853
                ],
                "stacked": [
                    1857,
                    1859,
                    1855
                ],
                "_asarray_compat": [
                    1857
                ],
                "find_common_type": [
                    1879
                ],
                "Optional": [
                    1864
                ],
                "np.dtype": [
                    1864
                ],
                "ExtensionDtype": [
                    1864
                ],
                "gkey": [
                    1888,
                    1889
                ],
                "x._consolidate_key": [
                    1888
                ],
                "_can_consolidate": [
                    1892,
                    1894
                ],
                "group_blocks": [
                    1892,
                    1894
                ],
                "merged_blocks": [
                    1896,
                    1893
                ],
                "_merge_blocks": [
                    1893
                ],
                "op": [
                    1920,
                    1918,
                    1927
                ],
                "operator.eq": [
                    1918
                ],
                "operator": [
                    1918
                ],
                "np.vectorize": [
                    1920
                ],
                "re.search": [
                    1921
                ],
                "re": [
                    1921
                ],
                "is_a_array": [
                    1929,
                    1924,
                    1932
                ],
                "np.ndarray": [
                    1924,
                    1925,
                    1983
                ],
                "is_b_array": [
                    1929,
                    1925,
                    1935
                ],
                "type_names": [
                    1936,
                    1930,
                    1940,
                    1933
                ],
                "__name__": [
                    1930
                ],
                "type": [
                    1930
                ],
                "a.dtype": [
                    1933
                ],
                "index": [
                    1954,
                    1958,
                    1961,
                    1962,
                    1964,
                    1965
                ],
                "MultiIndex": [
                    1962,
                    1954
                ],
                "y": [
                    1961,
                    1957
                ],
                "MultiIndex.from_tuples": [
                    1962
                ],
                "index.names": [
                    1962
                ],
                "index.name": [
                    1965
                ],
                "np.bincount": [
                    1970
                ],
                "arr.astype": [
                    1970
                ],
                "np.int_": [
                    1970
                ],
                "nz": [
                    1971,
                    1972
                ],
                "counts.nonzero": [
                    1971
                ],
                "np.c_": [
                    1972
                ],
                "libinternals.slice_len": [
                    1980
                ],
                "length": [
                    1980,
                    1989
                ],
                "slice_or_indexer.dtype": [
                    1983
                ],
                "slice_or_indexer.sum": [
                    1985
                ],
                "concat_plans": [
                    2008,
                    2005
                ],
                "get_mgr_concatenation_plan": [
                    2006
                ],
                "indexers": [
                    2013,
                    2006
                ],
                "mgrs_indexers": [
                    2006
                ],
                "concat_plan": [
                    2008,
                    2011
                ],
                "combine_concat_plans": [
                    2008
                ],
                "concat_axis": [
                    2008,
                    2027
                ],
                "join_units": [
                    2021,
                    2022,
                    2023,
                    2027,
                    2011,
                    2013,
                    2014
                ],
                "values.copy": [
                    2017
                ],
                "values.view": [
                    2019
                ],
                "b.make_block_same_class": [
                    2020
                ],
                "is_uniform_join_units": [
                    2021
                ],
                "block.concat_same_type": [
                    2022
                ],
                "ju.block": [
                    2023
                ],
                "ju": [
                    2023
                ],
                "concatenate_join_units": [
                    2027
                ]
            },
            "filtered_variables_in_file": {
                "PandasObject": [
                    60
                ],
                "__slots__": [
                    112,
                    1454
                ],
                "Sequence": [
                    125,
                    126
                ],
                "Block": [
                    1863,
                    1458,
                    1650,
                    125,
                    1501
                ],
                "Index": [
                    520,
                    1459,
                    1965,
                    126
                ],
                "self.axes": [
                    129,
                    1537,
                    263,
                    782,
                    784,
                    149,
                    537,
                    285,
                    927,
                    1189,
                    166,
                    294,
                    296,
                    170,
                    174,
                    307,
                    1205,
                    439,
                    183,
                    441,
                    1598,
                    1472,
                    197,
                    327,
                    1228,
                    1484,
                    1232,
                    342,
                    984,
                    1240,
                    731,
                    1381,
                    235,
                    748,
                    1259,
                    1387,
                    498,
                    1019,
                    509,
                    639
                ],
                "self": [
                    1024,
                    1537,
                    516,
                    1541,
                    1545,
                    1549,
                    529,
                    1021,
                    1043,
                    1553,
                    1556,
                    535,
                    1531,
                    537,
                    1559,
                    539,
                    1532,
                    1562,
                    1054,
                    1565,
                    1568,
                    1571,
                    1060,
                    551,
                    1063,
                    1575,
                    554,
                    1579,
                    557,
                    1069,
                    1070,
                    560,
                    563,
                    1076,
                    566,
                    569,
                    572,
                    1596,
                    1597,
                    575,
                    1088,
                    1598,
                    578,
                    1090,
                    581,
                    1094,
                    1605,
                    585,
                    1097,
                    1099,
                    1100,
                    1101,
                    1103,
                    1104,
                    593,
                    1118,
                    1124,
                    613,
                    1125,
                    1134,
                    1139,
                    1140,
                    1142,
                    1145,
                    639,
                    129,
                    130,
                    133,
                    647,
                    136,
                    648,
                    649,
                    1160,
                    140,
                    652,
                    142,
                    653,
                    144,
                    654,
                    1168,
                    659,
                    660,
                    149,
                    1170,
                    1172,
                    152,
                    153,
                    665,
                    666,
                    156,
                    1173,
                    1181,
                    671,
                    672,
                    1183,
                    1184,
                    1186,
                    1187,
                    677,
                    166,
                    1189,
                    1190,
                    1191,
                    170,
                    682,
                    683,
                    1193,
                    174,
                    1195,
                    1196,
                    1205,
                    183,
                    1209,
                    701,
                    702,
                    196,
                    197,
                    711,
                    712,
                    202,
                    1228,
                    205,
                    717,
                    1229,
                    208,
                    721,
                    210,
                    1231,
                    1232,
                    1236,
                    1240,
                    217,
                    218,
                    731,
                    732,
                    1242,
                    222,
                    734,
                    1246,
                    737,
                    741,
                    230,
                    231,
                    1256,
                    746,
                    235,
                    748,
                    1259,
                    1261,
                    239,
                    751,
                    241,
                    756,
                    247,
                    760,
                    250,
                    253,
                    254,
                    1277,
                    1280,
                    257,
                    258,
                    1281,
                    261,
                    262,
                    263,
                    1285,
                    270,
                    782,
                    784,
                    785,
                    1300,
                    1301,
                    1304,
                    1307,
                    285,
                    286,
                    802,
                    803,
                    294,
                    807,
                    296,
                    809,
                    1322,
                    811,
                    1325,
                    816,
                    307,
                    310,
                    315,
                    828,
                    318,
                    319,
                    320,
                    323,
                    837,
                    326,
                    327,
                    839,
                    841,
                    1354,
                    333,
                    338,
                    339,
                    340,
                    342,
                    343,
                    1366,
                    347,
                    1373,
                    867,
                    1381,
                    870,
                    1382,
                    873,
                    1387,
                    1392,
                    1394,
                    883,
                    884,
                    886,
                    890,
                    891,
                    1404,
                    383,
                    384,
                    896,
                    391,
                    905,
                    1424,
                    1425,
                    1431,
                    1433,
                    924,
                    925,
                    927,
                    933,
                    422,
                    934,
                    935,
                    936,
                    937,
                    429,
                    943,
                    946,
                    948,
                    439,
                    440,
                    441,
                    957,
                    1472,
                    963,
                    964,
                    965,
                    1484,
                    974,
                    975,
                    984,
                    478,
                    991,
                    1504,
                    481,
                    993,
                    997,
                    1511,
                    1515,
                    1004,
                    1005,
                    495,
                    498,
                    1528,
                    1019,
                    1020,
                    509,
                    1023
                ],
                "ensure_index": [
                    129,
                    294,
                    1484,
                    173,
                    1713,
                    1204,
                    149,
                    285
                ],
                "ax": [
                    129,
                    294,
                    166,
                    327,
                    329,
                    489,
                    331,
                    491,
                    492,
                    520,
                    779,
                    781,
                    782,
                    1690,
                    285
                ],
                "axes": [
                    1792,
                    129,
                    513,
                    1669,
                    520,
                    1675,
                    1676,
                    1680,
                    148,
                    149,
                    1690,
                    156,
                    547,
                    1714,
                    1717,
                    1718,
                    439,
                    441,
                    731,
                    732,
                    734,
                    491,
                    494,
                    2032,
                    500,
                    1659,
                    1662
                ],
                "self.blocks": [
                    896,
                    257,
                    130,
                    1281,
                    516,
                    261,
                    262,
                    905,
                    652,
                    270,
                    1021,
                    660,
                    1173,
                    535,
                    1404,
                    1431,
                    666,
                    539,
                    286,
                    927,
                    672,
                    1184,
                    802,
                    1187,
                    677,
                    422,
                    934,
                    1190,
                    682,
                    683,
                    1195,
                    1325,
                    1076,
                    310,
                    828,
                    702,
                    712,
                    841,
                    205,
                    333,
                    974,
                    208,
                    1103,
                    1104,
                    339,
                    340,
                    222,
                    1504,
                    1124,
                    613,
                    870,
                    997,
                    1256,
                    1511,
                    746,
                    1005,
                    495,
                    241,
                    1394,
                    883,
                    884,
                    1139,
                    1142,
                    760,
                    1020,
                    253
                ],
                "blocks": [
                    512,
                    130,
                    1667,
                    132,
                    516,
                    1668,
                    1669,
                    1799,
                    1801,
                    1675,
                    524,
                    1676,
                    526,
                    529,
                    532,
                    1432,
                    153,
                    155,
                    156,
                    1439,
                    1315,
                    1321,
                    1335,
                    1338,
                    1347,
                    1731,
                    1734,
                    1738,
                    716,
                    1742,
                    720,
                    1746,
                    724,
                    1876,
                    1750,
                    1879,
                    2009,
                    1628,
                    1629,
                    1630,
                    1757,
                    1632,
                    1761,
                    1889,
                    1765,
                    873,
                    1772,
                    494,
                    2030,
                    2032,
                    1650,
                    1652,
                    501,
                    1653,
                    1781,
                    504,
                    1658,
                    1659,
                    1789,
                    1662
                ],
                "block": [
                    132,
                    133,
                    136,
                    1170,
                    1814,
                    1815,
                    666,
                    672,
                    677,
                    1190,
                    1829,
                    1830,
                    1473,
                    1476,
                    1477,
                    1478,
                    1482,
                    333,
                    334,
                    974,
                    975,
                    1487,
                    1490,
                    1491,
                    340,
                    341,
                    342,
                    980,
                    1492,
                    1493,
                    1495,
                    1499,
                    1501,
                    1502,
                    2014,
                    1504,
                    2022,
                    496,
                    501,
                    1402,
                    1407
                ],
                "self.ndim": [
                    737,
                    133,
                    1285,
                    136,
                    1528,
                    202,
                    1134,
                    1170,
                    1043,
                    152,
                    1118,
                    1242,
                    891,
                    478
                ],
                "block.ndim": [
                    136,
                    133
                ],
                "do_integrity_check": [
                    441,
                    139
                ],
                "self._verify_integrity": [
                    140
                ],
                "self._consolidate_check": [
                    648,
                    142
                ],
                "self._rebuild_blknos_and_blklocs": [
                    144,
                    937,
                    320,
                    1024
                ],
                "a": [
                    1924,
                    1927,
                    1930,
                    1933,
                    149
                ],
                "np.array": [
                    257,
                    1565,
                    1477,
                    1575,
                    153,
                    1562,
                    253
                ],
                "np": [
                    1920,
                    257,
                    1795,
                    1796,
                    901,
                    1924,
                    903,
                    520,
                    1925,
                    525,
                    1425,
                    537,
                    153,
                    1562,
                    1565,
                    1183,
                    1184,
                    1186,
                    547,
                    803,
                    1187,
                    1575,
                    817,
                    1842,
                    1715,
                    948,
                    1970,
                    1972,
                    1855,
                    1983,
                    1090,
                    1987,
                    837,
                    1094,
                    839,
                    584,
                    1097,
                    1353,
                    1099,
                    1477,
                    1864,
                    1358,
                    720,
                    1108,
                    1368,
                    217,
                    218,
                    1370,
                    1760,
                    225,
                    993,
                    1124,
                    1764,
                    1140,
                    253
                ],
                "self.array_dtype": [
                    153
                ],
                "self.__class__": [
                    326,
                    1261,
                    751,
                    529,
                    440,
                    927,
                    1531,
                    156,
                    734,
                    639
                ],
                "__bool__": [
                    162
                ],
                "__nonzero__": [
                    162
                ],
                "new_labels": [
                    1381,
                    1383,
                    173,
                    175,
                    183
                ],
                "old_len": [
                    177,
                    180,
                    174
                ],
                "axis": [
                    520,
                    174,
                    432,
                    433,
                    1205,
                    183,
                    1463,
                    1464,
                    1210,
                    1468,
                    1472,
                    197,
                    1228,
                    1484,
                    1233,
                    1240,
                    1242,
                    1245,
                    1373,
                    1502,
                    737,
                    1251,
                    740,
                    1381,
                    743,
                    744,
                    1383,
                    1260,
                    749,
                    496,
                    1528
                ],
                "new_len": [
                    177,
                    180,
                    175
                ],
                "obj": [
                    196,
                    197,
                    198,
                    431,
                    432,
                    433,
                    1628
                ],
                "self.copy": [
                    196,
                    1231
                ],
                "copy": [
                    2016,
                    196,
                    712,
                    873,
                    779,
                    1228,
                    781,
                    782,
                    1070,
                    1231,
                    2027,
                    725,
                    1210,
                    702
                ],
                "obj.set_axis": [
                    197
                ],
                "_transform_index": [
                    197
                ],
                "mapper": [
                    197
                ],
                "level": [
                    1955,
                    197,
                    1957
                ],
                "blk": [
                    257,
                    1281,
                    1284,
                    1287,
                    905,
                    1291,
                    652,
                    908,
                    909,
                    1173,
                    1174,
                    1175,
                    1431,
                    1177,
                    1432,
                    1179,
                    1433,
                    1325,
                    1328,
                    1076,
                    1333,
                    1078,
                    1079,
                    1081,
                    1339,
                    1085,
                    1088,
                    1089,
                    1090,
                    841,
                    842,
                    843,
                    208,
                    209,
                    1104,
                    222,
                    223,
                    1249,
                    613,
                    1253,
                    1256,
                    617,
                    746,
                    1005,
                    1006,
                    1013,
                    1014,
                    1016,
                    253
                ],
                "blk.mgr_locs.is_slice_like": [
                    209
                ],
                "blk.mgr_locs": [
                    1088,
                    1090,
                    1177,
                    842,
                    1433,
                    908,
                    1006,
                    209,
                    1014,
                    1174,
                    1016,
                    1081,
                    1175,
                    1179,
                    1085,
                    223
                ],
                "blk.mgr_locs.as_slice": [
                    209
                ],
                "new_blknos": [
                    224,
                    227,
                    230,
                    1097,
                    1098,
                    1099,
                    1101,
                    217,
                    219
                ],
                "np.empty": [
                    803,
                    1795,
                    837,
                    901,
                    903,
                    1097,
                    537,
                    1358,
                    1425,
                    217,
                    218,
                    1855
                ],
                "self.shape": [
                    993,
                    803,
                    837,
                    839,
                    1354,
                    1424,
                    721,
                    338,
                    217,
                    218,
                    1373,
                    1277,
                    1054
                ],
                "np.int64": [
                    1097,
                    217,
                    218,
                    1987
                ],
                "new_blklocs": [
                    225,
                    218,
                    220,
                    231
                ],
                "new_blknos.fill": [
                    1098,
                    219
                ],
                "new_blklocs.fill": [
                    220
                ],
                "blkno": [
                    224,
                    1316,
                    1317,
                    1004,
                    1005,
                    1325,
                    1010,
                    1075,
                    1076,
                    1172,
                    1173,
                    1086,
                    1021,
                    222
                ],
                "rl": [
                    224,
                    225,
                    842,
                    843,
                    844,
                    908,
                    909,
                    223
                ],
                "rl.indexer": [
                    224,
                    225,
                    843,
                    844
                ],
                "np.arange": [
                    225,
                    1090,
                    547,
                    1124,
                    1099,
                    525,
                    1715,
                    948,
                    1140,
                    1368
                ],
                "self._blknos": [
                    1184,
                    258,
                    1187,
                    1124,
                    230,
                    1004,
                    1069,
                    974,
                    1100,
                    1101,
                    1139,
                    1172,
                    1300,
                    1304,
                    254
                ],
                "self._blklocs": [
                    1088,
                    1090,
                    1186,
                    1125,
                    231,
                    1070,
                    975,
                    1140,
                    1301,
                    1307,
                    1181,
                    1183
                ],
                "self._consolidate_inplace": [
                    481,
                    867,
                    391,
                    711,
                    1196,
                    239,
                    1392,
                    659,
                    1236,
                    1366,
                    665,
                    701,
                    671
                ],
                "counts": [
                    240,
                    1970,
                    243,
                    244,
                    1971,
                    1972
                ],
                "b": [
                    1921,
                    1667,
                    516,
                    261,
                    262,
                    517,
                    1668,
                    1925,
                    1930,
                    269,
                    270,
                    525,
                    526,
                    1936,
                    532,
                    539,
                    540,
                    287,
                    422,
                    424,
                    425,
                    429,
                    435,
                    702,
                    712,
                    720,
                    724,
                    725,
                    726,
                    727,
                    1492,
                    729,
                    1879,
                    1629,
                    2014,
                    2015,
                    2020,
                    870,
                    871,
                    2022,
                    2026,
                    621,
                    622,
                    495,
                    496,
                    241,
                    242,
                    243,
                    498,
                    624,
                    2030,
                    247,
                    504,
                    250,
                    635,
                    1021,
                    1918
                ],
                "v": [
                    1728,
                    1729,
                    242,
                    243,
                    1726
                ],
                "f": [
                    393,
                    399,
                    242,
                    435,
                    405
                ],
                "counts.get": [
                    243
                ],
                "b.shape": [
                    243,
                    1668,
                    525
                ],
                "self._get_counts": [
                    250,
                    247
                ],
                "b.dtype.name": [
                    247
                ],
                "b.dtype": [
                    871,
                    1936,
                    1879,
                    247,
                    1629
                ],
                "b.ftype": [
                    250
                ],
                "dtypes": [
                    253,
                    254
                ],
                "blk.dtype": [
                    253,
                    1287
                ],
                "algos.take_1d": [
                    258,
                    1100,
                    726,
                    1303,
                    1306,
                    254
                ],
                "algos": [
                    258,
                    1100,
                    726,
                    1303,
                    1306,
                    254
                ],
                "ftypes": [
                    257,
                    258,
                    652,
                    653
                ],
                "blk.ftype": [
                    257,
                    652
                ],
                "block_values": [
                    1795,
                    1796,
                    261,
                    1798,
                    1358,
                    1359,
                    1360,
                    277
                ],
                "b.values": [
                    261,
                    269,
                    525,
                    532,
                    2015
                ],
                "block_items": [
                    277,
                    262
                ],
                "self.items": [
                    384,
                    262,
                    1160,
                    1168,
                    1425,
                    1433,
                    1060,
                    1063,
                    429,
                    943,
                    946,
                    948,
                    1596,
                    323,
                    963,
                    965,
                    343,
                    347,
                    732,
                    991,
                    756,
                    886,
                    1019,
                    383
                ],
                "b.mgr_locs.indexer": [
                    622,
                    269,
                    262,
                    429
                ],
                "b.mgr_locs": [
                    517,
                    262,
                    424,
                    269,
                    429,
                    622,
                    720,
                    726,
                    727,
                    540
                ],
                "axes_array": [
                    267,
                    277,
                    263
                ],
                "extra_state": [
                    265,
                    277
                ],
                "make_block": [
                    1634,
                    547,
                    1829,
                    1638,
                    1798,
                    1769,
                    2026,
                    1132,
                    1360,
                    1777,
                    1170,
                    1785,
                    1814,
                    281,
                    1754,
                    1659,
                    1116,
                    1502
                ],
                "values": [
                    1808,
                    1811,
                    532,
                    1812,
                    1814,
                    281,
                    544,
                    547,
                    1827,
                    1829,
                    311,
                    312,
                    975,
                    593,
                    981,
                    601,
                    605,
                    607,
                    1632,
                    1633,
                    1634,
                    2015,
                    1636,
                    1637,
                    1638,
                    2017,
                    2019,
                    2020
                ],
                "mgr_locs": [
                    1316,
                    1322,
                    1332,
                    311,
                    312,
                    281,
                    1340,
                    1342
                ],
                "state": [
                    292,
                    283,
                    284,
                    285,
                    287
                ],
                "unpickle_block": [
                    311,
                    287
                ],
                "ax_arrays": [
                    292,
                    294
                ],
                "bvalues": [
                    312,
                    292
                ],
                "bitems": [
                    296,
                    304,
                    307,
                    292
                ],
                "equals": [
                    296
                ],
                "all_mgr_locs": [
                    304,
                    306,
                    312
                ],
                "get_indexer": [
                    307
                ],
                "blk_items": [
                    307
                ],
                "self._post_setstate": [
                    315
                ],
                "self._is_consolidated": [
                    649,
                    653,
                    318,
                    935
                ],
                "self._known_consolidated": [
                    647,
                    936,
                    1193,
                    654,
                    1145,
                    319
                ],
                "output": [
                    326,
                    329,
                    331,
                    334,
                    335
                ],
                "pprint_thing": [
                    334,
                    326
                ],
                "self.__class__.__name__": [
                    326
                ],
                "i": [
                    908,
                    909,
                    538,
                    541,
                    542,
                    1957,
                    1720,
                    1722,
                    1856,
                    1729,
                    1857,
                    327,
                    328,
                    331,
                    974,
                    975,
                    1104,
                    1754,
                    1755,
                    609,
                    1769,
                    618,
                    1770,
                    622,
                    623,
                    1777,
                    1778,
                    1785,
                    1786
                ],
                "mgr_shape": [
                    338,
                    341
                ],
                "tot_items": [
                    1668,
                    1669,
                    339,
                    1685,
                    342,
                    343,
                    347
                ],
                "x.mgr_locs": [
                    339
                ],
                "x": [
                    1792,
                    1921,
                    1822,
                    1957,
                    1958,
                    1961,
                    1964,
                    1839,
                    1840,
                    1842,
                    1845,
                    1846,
                    1848,
                    339,
                    1624,
                    1632,
                    1888,
                    1636,
                    1918
                ],
                "block._verify_integrity": [
                    341
                ],
                "block.shape": [
                    341,
                    342
                ],
                "construction_error": [
                    1680,
                    1669,
                    342
                ],
                "result_blocks": [
                    611,
                    425,
                    436,
                    438,
                    441,
                    379,
                    637,
                    639
                ],
                "filter_locs": [
                    384,
                    388,
                    424,
                    383
                ],
                "self.items.get_indexer_for": [
                    963,
                    383
                ],
                "kwargs": [
                    388,
                    1541,
                    395,
                    401,
                    416,
                    418,
                    419,
                    551,
                    554,
                    557,
                    560,
                    433,
                    435,
                    563,
                    566,
                    569,
                    572,
                    575,
                    578,
                    581,
                    585
                ],
                "consolidate": [
                    480,
                    390
                ],
                "align_copy": [
                    400,
                    433,
                    394,
                    408
                ],
                "kwargs.get": [
                    401,
                    395
                ],
                "align_keys": [
                    417,
                    396,
                    398,
                    402,
                    404,
                    409,
                    411
                ],
                "aligned_args": [
                    431,
                    428,
                    415
                ],
                "k": [
                    416,
                    417,
                    418,
                    419,
                    1729,
                    431,
                    433,
                    1725
                ],
                "ABCExtensionArray": [
                    418
                ],
                "b.mgr_locs.isin": [
                    424
                ],
                "result_blocks.append": [
                    425
                ],
                "b_items": [
                    433,
                    429
                ],
                "aligned_args.items": [
                    431
                ],
                "obj._info_axis_number": [
                    432
                ],
                "obj.reindex": [
                    433
                ],
                "applied": [
                    435,
                    436
                ],
                "_extend_blocks": [
                    1896,
                    633,
                    436
                ],
                "self.make_empty": [
                    717,
                    439
                ],
                "bm": [
                    640,
                    641,
                    928,
                    929,
                    930,
                    1444,
                    1445,
                    751,
                    752,
                    753,
                    440,
                    927,
                    443,
                    444,
                    639
                ],
                "bm._consolidate_inplace": [
                    640,
                    752,
                    443,
                    929
                ],
                "is_list_like": [
                    488
                ],
                "qs": [
                    488,
                    489,
                    498,
                    496
                ],
                "Float64Index": [
                    489
                ],
                "b.quantile": [
                    496
                ],
                "interpolation": [
                    496
                ],
                "axe": [
                    498,
                    500
                ],
                "get_axe": [
                    498
                ],
                "axes.append": [
                    500
                ],
                "blocks.append": [
                    1799,
                    1321,
                    2030,
                    501,
                    1335,
                    1338
                ],
                "ndim": [
                    504,
                    505,
                    507,
                    1451
                ],
                "b.ndim": [
                    504
                ],
                "new_axes": [
                    513,
                    520,
                    523,
                    748,
                    749,
                    782,
                    751,
                    784,
                    529,
                    785,
                    1259,
                    1260,
                    1261,
                    509
                ],
                "sb": [
                    516,
                    517
                ],
                "sb.mgr_locs": [
                    517
                ],
                "np.concatenate": [
                    520,
                    1108,
                    720
                ],
                "ax.values": [
                    520
                ],
                "transposed": [
                    522
                ],
                "b.make_block": [
                    525
                ],
                "b.values.T": [
                    525
                ],
                "concat_compat": [
                    1633,
                    532,
                    1637
                ],
                "indexer": [
                    537,
                    541,
                    544,
                    948,
                    1205,
                    951,
                    952,
                    953,
                    1210,
                    963,
                    1987,
                    965,
                    1989,
                    1990,
                    1227,
                    720,
                    721,
                    1367,
                    1240,
                    1369,
                    1368,
                    1370,
                    732,
                    1246,
                    991,
                    1375,
                    994,
                    1250,
                    1378,
                    1381,
                    999,
                    1000,
                    1383
                ],
                "np.intp": [
                    537
                ],
                "j": [
                    540,
                    541
                ],
                "values.take": [
                    544
                ],
                "SingleBlockManager": [
                    1640,
                    978,
                    546
                ],
                "self.apply": [
                    578,
                    581,
                    1541,
                    551,
                    585,
                    554,
                    557,
                    560,
                    785,
                    563,
                    566,
                    569,
                    572,
                    575
                ],
                "func": [
                    1961,
                    1964,
                    1957,
                    551
                ],
                "dtype": [
                    896,
                    899,
                    903,
                    911,
                    912,
                    1808,
                    1811,
                    1812,
                    1822,
                    1825,
                    1827,
                    828,
                    1855,
                    832,
                    833,
                    578,
                    834,
                    835,
                    837,
                    843,
                    1357,
                    1358,
                    1491,
                    1492,
                    1892,
                    1894,
                    873
                ],
                "np.ndim": [
                    584
                ],
                "value": [
                    1063,
                    584,
                    585,
                    1034,
                    1040,
                    1170,
                    1043,
                    1044,
                    1078,
                    1047,
                    1052,
                    1117,
                    1054
                ],
                "inplace": [
                    617,
                    628,
                    590
                ],
                "validate_bool_kwarg": [
                    590
                ],
                "self.as_array": [
                    593
                ],
                "isna": [
                    960,
                    945,
                    948,
                    600,
                    601
                ],
                "s": [
                    609,
                    618,
                    626,
                    600,
                    602,
                    605,
                    607
                ],
                "Timedelta": [
                    602
                ],
                "Timestamp": [
                    602
                ],
                "_compare_or_regex_search": [
                    604,
                    607
                ],
                "maybe_convert_objects": [
                    605
                ],
                "s.asm8": [
                    605
                ],
                "regex": [
                    609,
                    605,
                    630,
                    1917,
                    607
                ],
                "masks": [
                    609,
                    622
                ],
                "comp": [
                    609
                ],
                "src_list": [
                    609,
                    618,
                    612
                ],
                "src_len": [
                    612,
                    623
                ],
                "rb": [
                    617,
                    637,
                    636,
                    621
                ],
                "blk.copy": [
                    617,
                    1333
                ],
                "d": [
                    618,
                    627
                ],
                "dest_list": [
                    618
                ],
                "new_rb": [
                    636,
                    633,
                    635,
                    620
                ],
                "m": [
                    632,
                    625,
                    622
                ],
                "convert": [
                    629,
                    1374,
                    623
                ],
                "result": [
                    901,
                    903,
                    1927,
                    1929,
                    909,
                    912,
                    914,
                    1943,
                    837,
                    843,
                    1231,
                    1232,
                    849,
                    1233,
                    1234,
                    624,
                    633,
                    890,
                    892,
                    893
                ],
                "b._replace_coerce": [
                    624
                ],
                "m.any": [
                    632
                ],
                "new_rb.append": [
                    635
                ],
                "result_blocks.extend": [
                    637
                ],
                "block.is_numeric": [
                    666
                ],
                "block.is_datelike": [
                    672
                ],
                "block.is_extension": [
                    677
                ],
                "is_view": [
                    683
                ],
                "self.combine": [
                    712,
                    873,
                    702
                ],
                "b.is_bool": [
                    702
                ],
                "b.is_numeric": [
                    712
                ],
                "np.sort": [
                    720
                ],
                "b.mgr_locs.as_array": [
                    720,
                    727
                ],
                "inv_indexer": [
                    721,
                    727
                ],
                "lib.get_reverse_indexer": [
                    721
                ],
                "lib": [
                    721
                ],
                "new_blocks": [
                    1428,
                    1439,
                    1824,
                    1444,
                    1830,
                    1832,
                    723,
                    1111,
                    729,
                    1115,
                    1246,
                    734,
                    1248,
                    1891,
                    741,
                    1896,
                    1897,
                    746,
                    1131,
                    1261,
                    751,
                    1142
                ],
                "b.copy": [
                    725
                ],
                "new_blocks.append": [
                    729,
                    1131,
                    1830
                ],
                "self.items.take": [
                    732
                ],
                "self._slice_take_blocks_ax0": [
                    741,
                    1246
                ],
                "slobj": [
                    1284,
                    741,
                    744,
                    1292,
                    749,
                    1532,
                    1300,
                    1301,
                    1304,
                    1307,
                    1276
                ],
                "slicer": [
                    744,
                    745,
                    746,
                    743
                ],
                "blk.getitem_block": [
                    746,
                    1284
                ],
                "item": [
                    960,
                    963,
                    1060,
                    1063,
                    1160,
                    1162,
                    1168,
                    945,
                    946,
                    756,
                    1596,
                    991
                ],
                "deep": [
                    777,
                    778,
                    785
                ],
                "ax.copy": [
                    779
                ],
                "ax.view": [
                    781
                ],
                "arr": [
                    1856,
                    1857,
                    803,
                    804,
                    815,
                    817,
                    1970,
                    819,
                    821
                ],
                "transpose": [
                    804,
                    821
                ],
                "arr.transpose": [
                    804,
                    821
                ],
                "items": [
                    898,
                    1956,
                    806,
                    807,
                    1961,
                    1962,
                    1964,
                    1965,
                    886,
                    889
                ],
                "mgr": [
                    1664,
                    807,
                    1640,
                    809,
                    1641,
                    811,
                    1676,
                    1677,
                    1678,
                    815,
                    817,
                    819,
                    2006,
                    1662,
                    1663
                ],
                "self.reindex_axis": [
                    807
                ],
                "self._is_single_block": [
                    816,
                    1280,
                    811
                ],
                "is_datetimetz": [
                    811
                ],
                "mgr.blocks": [
                    817,
                    811,
                    815
                ],
                "get_values": [
                    817,
                    815
                ],
                "self.is_mixed_type": [
                    816
                ],
                "np.asarray": [
                    817,
                    1842
                ],
                "mgr._interleave": [
                    819
                ],
                "_interleaved_dtype": [
                    896,
                    1491,
                    828
                ],
                "is_sparse": [
                    832
                ],
                "dtype.subtype": [
                    833
                ],
                "is_extension_array_dtype": [
                    1034,
                    834,
                    899,
                    911
                ],
                "itemmask": [
                    844,
                    846,
                    839
                ],
                "np.zeros": [
                    993,
                    1094,
                    839
                ],
                "blk.get_values": [
                    843
                ],
                "itemmask.all": [
                    846
                ],
                "bd": [
                    873,
                    869,
                    871
                ],
                "append": [
                    1129,
                    1729,
                    871
                ],
                "bd.setdefault": [
                    871
                ],
                "bd.items": [
                    873
                ],
                "iget": [
                    884
                ],
                "loc": [
                    1164,
                    909,
                    1168,
                    1170,
                    1172,
                    1178,
                    1181,
                    1186,
                    1187,
                    1060,
                    1066,
                    1067,
                    1069,
                    1070,
                    946,
                    953,
                    1596,
                    957,
                    1597,
                    1598,
                    1605,
                    884,
                    893
                ],
                "items.is_unique": [
                    889
                ],
                "self._interleave": [
                    890
                ],
                "result.T": [
                    892
                ],
                "n": [
                    898,
                    1378,
                    901,
                    903,
                    1373,
                    1375
                ],
                "blk.iget": [
                    909
                ],
                "_from_sequence": [
                    912
                ],
                "dtype.construct_array_type": [
                    912
                ],
                "self.is_consolidated": [
                    924,
                    933
                ],
                "bm._is_consolidated": [
                    928
                ],
                "_consolidate": [
                    1493,
                    934
                ],
                "self.items.is_unique": [
                    943
                ],
                "self.items.get_loc": [
                    946,
                    1060,
                    1596,
                    991
                ],
                "is_scalar": [
                    1929,
                    951
                ],
                "indexer.item": [
                    953
                ],
                "self.iget": [
                    957
                ],
                "self.reindex_indexer": [
                    1209,
                    964,
                    1382
                ],
                "block.iget": [
                    975
                ],
                "block.make_block_same_class": [
                    980
                ],
                "is_deleted": [
                    993,
                    994,
                    995,
                    1094,
                    1095,
                    1002,
                    1099,
                    1007,
                    1019
                ],
                "np.bool_": [
                    1760,
                    993,
                    1094,
                    1983
                ],
                "ref_loc_offset": [
                    1016,
                    995
                ],
                "is_deleted.cumsum": [
                    995
                ],
                "is_blk_deleted": [
                    1021,
                    1010,
                    997
                ],
                "affected_start": [
                    1000,
                    1002,
                    1004
                ],
                "is_deleted.nonzero": [
                    1002
                ],
                "_": [
                    1287,
                    1770,
                    1004,
                    1778,
                    1786,
                    1755
                ],
                "_fast_count_smallints": [
                    1172,
                    1004
                ],
                "bml": [
                    1006,
                    1007,
                    1009,
                    1014,
                    1016
                ],
                "blk_del": [
                    1009,
                    1012,
                    1013,
                    1007
                ],
                "nonzero": [
                    1007
                ],
                "bml.indexer": [
                    1016,
                    1007
                ],
                "blk.delete": [
                    1089,
                    1013
                ],
                "bml.add": [
                    1016
                ],
                "self._shape": [
                    1191,
                    1023
                ],
                "value_is_extension_type": [
                    1112,
                    1034,
                    1037
                ],
                "value.ndim": [
                    1043
                ],
                "_safe_reshape": [
                    1044
                ],
                "value.shape": [
                    1044,
                    1054
                ],
                "placement.indexer": [
                    1052
                ],
                "placement": [
                    1827,
                    1859,
                    1829,
                    2020,
                    2023,
                    1355,
                    2028,
                    1360,
                    1808,
                    1814,
                    1850,
                    2011,
                    1052
                ],
                "self.insert": [
                    1063
                ],
                "blknos": [
                    1316,
                    1069,
                    1075,
                    1300,
                    1303
                ],
                "blklocs": [
                    1070,
                    1301,
                    1077,
                    1306,
                    1340
                ],
                "unfit_mgr_locs": [
                    1121,
                    1124,
                    1125,
                    1135,
                    1072,
                    1139,
                    1108,
                    1109,
                    1140,
                    1081
                ],
                "unfit_val_locs": [
                    1073,
                    1082,
                    1107,
                    1129
                ],
                "removed_blknos": [
                    1092,
                    1095,
                    1099,
                    1104,
                    1074,
                    1086
                ],
                "val_locs": [
                    1075,
                    1077,
                    1079,
                    1082,
                    1085
                ],
                "libinternals.get_blkno_placements": [
                    1075,
                    1316
                ],
                "libinternals": [
                    1980,
                    1075,
                    1316
                ],
                "blk_locs": [
                    1089,
                    1081,
                    1077,
                    1079
                ],
                "val_locs.indexer": [
                    1077
                ],
                "blk.should_store": [
                    1078
                ],
                "blk.set": [
                    1079
                ],
                "value_getitem": [
                    1133,
                    1079
                ],
                "unfit_mgr_locs.append": [
                    1081
                ],
                "blk.mgr_locs.as_array": [
                    1081,
                    1177
                ],
                "unfit_val_locs.append": [
                    1082
                ],
                "removed_blknos.append": [
                    1086
                ],
                "blk.mgr_locs.indexer": [
                    1088,
                    1433,
                    1090
                ],
                "self.nblocks": [
                    1097,
                    1099,
                    1094
                ],
                "unfit_count": [
                    1140,
                    1124,
                    1109
                ],
                "new_blocks.extend": [
                    1115,
                    1439
                ],
                "value.copy": [
                    1117
                ],
                "mgr_loc": [
                    1121,
                    1332,
                    1334,
                    1119
                ],
                "unfit_val_items": [
                    1129,
                    1133
                ],
                "allow_duplicates": [
                    1160
                ],
                "new_axis": [
                    1189,
                    1640,
                    1228,
                    1260,
                    1168,
                    1233
                ],
                "self.items.insert": [
                    1168
                ],
                "count": [
                    1172,
                    1174
                ],
                "blk.mgr_locs.add": [
                    1175
                ],
                "new_mgr_locs": [
                    1177,
                    1178,
                    1179
                ],
                "blk.mgr_locs.as_array.copy": [
                    1177
                ],
                "self._blklocs.shape": [
                    1181
                ],
                "np.append": [
                    1184,
                    1183
                ],
                "np.insert": [
                    1186,
                    1187
                ],
                "new_index": [
                    1444,
                    1427,
                    1204,
                    1205,
                    1206,
                    1210
                ],
                "reindex": [
                    1205
                ],
                "method": [
                    1206
                ],
                "limit": [
                    1206
                ],
                "fill_value": [
                    1253,
                    1287,
                    1288,
                    1319,
                    1322,
                    1352,
                    1353,
                    1357,
                    1359,
                    1210,
                    1436,
                    1246
                ],
                "result.axes": [
                    1232,
                    1233
                ],
                "allow_dups": [
                    1239
                ],
                "_can_reindex": [
                    1240
                ],
                "blk.take_nd": [
                    1249,
                    1291,
                    1339
                ],
                "blk.fill_value": [
                    1253
                ],
                "allow_fill": [
                    1988,
                    1285,
                    1286,
                    1304,
                    1274,
                    1307,
                    1277
                ],
                "fill_tuple": [
                    1286,
                    1319,
                    1288,
                    1295,
                    1274
                ],
                "sl_type": [
                    1299,
                    1283,
                    1276
                ],
                "sllen": [
                    1276,
                    1284,
                    1294
                ],
                "_preprocess_slice_or_indexer": [
                    1276
                ],
                "slice_or_indexer": [
                    1985,
                    1987,
                    1976,
                    1979,
                    1980,
                    1277,
                    1983
                ],
                "maybe_promote": [
                    1287
                ],
                "self._make_na_block": [
                    1322
                ],
                "blk._can_consolidate": [
                    1328
                ],
                "newblk": [
                    1333,
                    1334,
                    1335
                ],
                "newblk.mgr_locs": [
                    1334
                ],
                "mgr_locs.indexer": [
                    1340
                ],
                "np.nan": [
                    1353,
                    1796
                ],
                "block_shape": [
                    1697,
                    1354,
                    1355,
                    1358,
                    1685
                ],
                "infer_dtype_from_scalar": [
                    1357
                ],
                "block_values.fill": [
                    1796,
                    1359
                ],
                "indexer.start": [
                    1368
                ],
                "indexer.stop": [
                    1368
                ],
                "indexer.step": [
                    1368
                ],
                "np.asanyarray": [
                    1370,
                    1987
                ],
                "maybe_convert_indices": [
                    1989,
                    1375
                ],
                "verify": [
                    1377
                ],
                "take": [
                    1381
                ],
                "self_axes": [
                    1387,
                    1388,
                    1390
                ],
                "other_axes": [
                    1387,
                    1388,
                    1390
                ],
                "other.axes": [
                    1387
                ],
                "other": [
                    1393,
                    1394,
                    1387,
                    1405
                ],
                "ax1.equals": [
                    1390
                ],
                "ax1": [
                    1390
                ],
                "ax2": [
                    1390
                ],
                "other._consolidate_inplace": [
                    1393
                ],
                "other.blocks": [
                    1394,
                    1405
                ],
                "block.dtype.name": [
                    1402
                ],
                "block.dtype": [
                    1402
                ],
                "block.mgr_locs.as_array.tolist": [
                    1402
                ],
                "block.mgr_locs.as_array": [
                    1402
                ],
                "block.mgr_locs": [
                    1402
                ],
                "self_blocks": [
                    1404,
                    1407
                ],
                "canonicalize": [
                    1404,
                    1405
                ],
                "other_blocks": [
                    1405,
                    1407
                ],
                "block.equals": [
                    1407
                ],
                "oblock": [
                    1407
                ],
                "n_rows": [
                    1424,
                    1435
                ],
                "dummy": [
                    1425,
                    1426,
                    1427
                ],
                "unstacker_func": [
                    1425,
                    1433
                ],
                "new_columns": [
                    1442,
                    1426,
                    1444,
                    1434
                ],
                "dummy.get_new_columns": [
                    1426
                ],
                "dummy.get_new_index": [
                    1427
                ],
                "columns_mask": [
                    1440,
                    1442,
                    1429
                ],
                "mask": [
                    1432,
                    1440
                ],
                "blk._unstack": [
                    1432
                ],
                "partial": [
                    1433
                ],
                "columns_mask.extend": [
                    1440
                ],
                "BlockManager": [
                    1444,
                    1448,
                    1676,
                    2032,
                    1662
                ],
                "_is_consolidated": [
                    1452
                ],
                "_known_consolidated": [
                    1453
                ],
                "Union": [
                    1864,
                    1459
                ],
                "List": [
                    1459,
                    1863
                ],
                "fastpath": [
                    1471
                ],
                "b.astype": [
                    1492
                ],
                "self._block.values": [
                    1515,
                    1605
                ],
                "self._block": [
                    1568,
                    1571,
                    1597,
                    1605,
                    1575,
                    1545,
                    1515,
                    1579,
                    1549,
                    1553,
                    1562,
                    1532,
                    1565
                ],
                "self._block._slice": [
                    1532
                ],
                "self.index": [
                    1532
                ],
                "self._block.dtype": [
                    1545,
                    1562
                ],
                "self._block.array_dtype": [
                    1549
                ],
                "self._block.ftype": [
                    1553,
                    1565
                ],
                "self.dtype.name": [
                    1556
                ],
                "self.dtype": [
                    1556
                ],
                "self.ftype": [
                    1559
                ],
                "self._block.external_values": [
                    1568
                ],
                "self._block.internal_values": [
                    1571
                ],
                "self._block.to_dense": [
                    1575
                ],
                "self._block._can_hold_na": [
                    1579
                ],
                "self._block.delete": [
                    1597
                ],
                "delete": [
                    1598
                ],
                "non_empties": [
                    1624,
                    1627,
                    1628
                ],
                "to_concat": [
                    1624,
                    1636
                ],
                "obj.blocks": [
                    1628
                ],
                "new_block": [
                    1640,
                    1634,
                    1638,
                    1630
                ],
                "concat_same_type": [
                    1630
                ],
                "x.values": [
                    1632
                ],
                "x._block.values": [
                    1636
                ],
                "x._block": [
                    1636
                ],
                "mgr._consolidate_inplace": [
                    1677,
                    1663
                ],
                "shape": [
                    1792,
                    1795,
                    1669,
                    1680,
                    1853,
                    1855
                ],
                "e": [
                    1680,
                    1669,
                    1696,
                    1695
                ],
                "form_blocks": [
                    1675
                ],
                "arrays": [
                    1856,
                    1675,
                    1680,
                    1850,
                    1852,
                    1853,
                    1726
                ],
                "names": [
                    1713,
                    1850,
                    1675,
                    1725
                ],
                "passed": [
                    1700,
                    1685,
                    1687,
                    1688,
                    1695
                ],
                "implied": [
                    1700,
                    1690,
                    1692,
                    1693,
                    1695
                ],
                "items_dict": [
                    1710,
                    1729,
                    1732,
                    1733,
                    1736,
                    1737,
                    1740,
                    1741,
                    1744,
                    1745,
                    1748,
                    1749,
                    1752,
                    1755,
                    1759,
                    1760,
                    1763,
                    1764,
                    1767,
                    1770,
                    1774,
                    1778,
                    1783,
                    1786
                ],
                "defaultdict": [
                    1710
                ],
                "extra_locs": [
                    1792,
                    1798,
                    1711,
                    1722,
                    1791
                ],
                "names_idx": [
                    1713,
                    1714,
                    1715,
                    1717,
                    1718
                ],
                "names_idx.equals": [
                    1714
                ],
                "names_indexer": [
                    1720,
                    1715,
                    1718
                ],
                "is_unique": [
                    1717
                ],
                "names_idx.intersection": [
                    1717
                ],
                "names_idx.get_indexer_for": [
                    1718
                ],
                "name_idx": [
                    1720,
                    1721,
                    1725,
                    1726
                ],
                "extra_locs.append": [
                    1722
                ],
                "block_type": [
                    1728,
                    1729
                ],
                "get_block_type": [
                    1728
                ],
                "block_type.__name__": [
                    1729
                ],
                "float_blocks": [
                    1733,
                    1734
                ],
                "_multi_blockify": [
                    1741,
                    1737,
                    1745,
                    1733
                ],
                "blocks.extend": [
                    1761,
                    1765,
                    1734,
                    1789,
                    1738,
                    1772,
                    1742,
                    1746,
                    1781,
                    1750,
                    1757
                ],
                "complex_blocks": [
                    1737,
                    1738
                ],
                "timedelta_blocks": [
                    1741,
                    1742
                ],
                "int_blocks": [
                    1745,
                    1746
                ],
                "datetime_blocks": [
                    1749,
                    1750
                ],
                "_simple_blockify": [
                    1760,
                    1764,
                    1749
                ],
                "_NS_DTYPE": [
                    1749
                ],
                "dttz_blocks": [
                    1753,
                    1757
                ],
                "array": [
                    1786,
                    1769,
                    1770,
                    1777,
                    1778,
                    1785,
                    1754,
                    1755
                ],
                "DatetimeTZBlock": [
                    1754
                ],
                "bool_blocks": [
                    1760,
                    1761
                ],
                "object_blocks": [
                    1764,
                    1765
                ],
                "np.object_": [
                    1764
                ],
                "cat_blocks": [
                    1768,
                    1772
                ],
                "CategoricalBlock": [
                    1769
                ],
                "external_blocks": [
                    1776,
                    1789,
                    1784,
                    1781
                ],
                "ExtensionBlock": [
                    1777
                ],
                "ObjectValuesExtensionBlock": [
                    1785
                ],
                "na_block": [
                    1798,
                    1799
                ],
                "_stack_arrays": [
                    1808,
                    1827
                ],
                "tuples": [
                    1808,
                    1850,
                    1822
                ],
                "values.dtype": [
                    1811
                ],
                "values.astype": [
                    1812
                ],
                "grouper": [
                    1825,
                    1892,
                    1822,
                    1889
                ],
                "itertools.groupby": [
                    1889,
                    1822
                ],
                "itertools": [
                    1889,
                    1822
                ],
                "tup_block": [
                    1825,
                    1827
                ],
                "ABCSeries": [
                    1845,
                    1839
                ],
                "x._values": [
                    1840
                ],
                "x.shape": [
                    1848
                ],
                "first": [
                    1852,
                    1853
                ],
                "_shape_compat": [
                    1853
                ],
                "stacked": [
                    1857,
                    1859,
                    1855
                ],
                "_asarray_compat": [
                    1857
                ],
                "find_common_type": [
                    1879
                ],
                "Optional": [
                    1864
                ],
                "np.dtype": [
                    1864
                ],
                "ExtensionDtype": [
                    1864
                ],
                "gkey": [
                    1888,
                    1889
                ],
                "x._consolidate_key": [
                    1888
                ],
                "_can_consolidate": [
                    1892,
                    1894
                ],
                "group_blocks": [
                    1892,
                    1894
                ],
                "merged_blocks": [
                    1896,
                    1893
                ],
                "_merge_blocks": [
                    1893
                ],
                "op": [
                    1920,
                    1918,
                    1927
                ],
                "operator.eq": [
                    1918
                ],
                "operator": [
                    1918
                ],
                "np.vectorize": [
                    1920
                ],
                "re.search": [
                    1921
                ],
                "re": [
                    1921
                ],
                "is_a_array": [
                    1929,
                    1924,
                    1932
                ],
                "np.ndarray": [
                    1924,
                    1925,
                    1983
                ],
                "is_b_array": [
                    1929,
                    1925,
                    1935
                ],
                "type_names": [
                    1936,
                    1930,
                    1940,
                    1933
                ],
                "a.dtype": [
                    1933
                ],
                "index": [
                    1954,
                    1958,
                    1961,
                    1962,
                    1964,
                    1965
                ],
                "MultiIndex": [
                    1962,
                    1954
                ],
                "y": [
                    1961,
                    1957
                ],
                "MultiIndex.from_tuples": [
                    1962
                ],
                "index.names": [
                    1962
                ],
                "index.name": [
                    1965
                ],
                "np.bincount": [
                    1970
                ],
                "arr.astype": [
                    1970
                ],
                "np.int_": [
                    1970
                ],
                "nz": [
                    1971,
                    1972
                ],
                "counts.nonzero": [
                    1971
                ],
                "np.c_": [
                    1972
                ],
                "libinternals.slice_len": [
                    1980
                ],
                "length": [
                    1980,
                    1989
                ],
                "slice_or_indexer.dtype": [
                    1983
                ],
                "slice_or_indexer.sum": [
                    1985
                ],
                "concat_plans": [
                    2008,
                    2005
                ],
                "get_mgr_concatenation_plan": [
                    2006
                ],
                "indexers": [
                    2013,
                    2006
                ],
                "mgrs_indexers": [
                    2006
                ],
                "concat_plan": [
                    2008,
                    2011
                ],
                "combine_concat_plans": [
                    2008
                ],
                "concat_axis": [
                    2008,
                    2027
                ],
                "join_units": [
                    2021,
                    2022,
                    2023,
                    2027,
                    2011,
                    2013,
                    2014
                ],
                "values.copy": [
                    2017
                ],
                "values.view": [
                    2019
                ],
                "b.make_block_same_class": [
                    2020
                ],
                "is_uniform_join_units": [
                    2021
                ],
                "block.concat_same_type": [
                    2022
                ],
                "ju.block": [
                    2023
                ],
                "ju": [
                    2023
                ],
                "concatenate_join_units": [
                    2027
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_122/pandas/tests/internals/test_internals.py",
                "test_function": "test_dataframe_not_equal",
                "test_function_code": "def test_dataframe_not_equal():\n    # see GH28839\n    df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [\"s\", \"d\"]})\n    df2 = pd.DataFrame({\"a\": [\"s\", \"d\"], \"b\": [1, 2]})\n    assert df1.equals(df2) is False",
                "test_error": "assert True is False  +  where True = <bound method NDFrame.equals of    a  b\\n0  1  s\\n1  2  d>(   a  b\\n0  s  1\\n1  d  2)  +    where <bound method NDFrame.equals of    a  b\\n0  1  s\\n1  2  d> =    a  b\\n0  1  s\\n1  2  d.equals",
                "full_test_error": "def test_dataframe_not_equal():\n        # see GH28839\n        df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [\"s\", \"d\"]})\n        df2 = pd.DataFrame({\"a\": [\"s\", \"d\"], \"b\": [1, 2]})\n>       assert df1.equals(df2) is False\nE       assert True is False\nE        +  where True = <bound method NDFrame.equals of    a  b\\n0  1  s\\n1  2  d>(   a  b\\n0  s  1\\n1  d  2)\nE        +    where <bound method NDFrame.equals of    a  b\\n0  1  s\\n1  2  d> =    a  b\\n0  1  s\\n1  2  d.equals\n\npandas/tests/internals/test_internals.py:1306: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}