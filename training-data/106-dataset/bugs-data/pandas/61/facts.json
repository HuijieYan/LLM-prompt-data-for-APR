{
    "1.1.1": "def _get_with(self, key):\n    # other: fancy integer or otherwise\n    if isinstance(key, slice):\n        return self._slice(key)\n    elif isinstance(key, ABCDataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not \"\n            \"supported, use the appropriate DataFrame column\"\n        )\n    elif isinstance(key, tuple):\n        try:\n            return self._get_values_tuple(key)\n        except ValueError:\n            # if we don't have a MultiIndex, we may still be able to handle\n            #  a 1-tuple.  see test_1tuple_without_multiindex\n            if len(key) == 1:\n                key = key[0]\n                if isinstance(key, slice):\n                    return self._get_values(key)\n            raise\n\n    if not isinstance(key, (list, np.ndarray, Series, Index)):\n        key = list(key)\n\n    if isinstance(key, Index):\n        key_type = key.inferred_type\n    else:\n        key_type = lib.infer_dtype(key, skipna=False)\n\n    # Note: The key_type == \"boolean\" case should be caught by the\n    #  com.is_bool_indexer check in __getitem__\n    if key_type == \"integer\":\n        if self.index.is_integer() or self.index.is_floating():\n            return self.loc[key]\n        elif isinstance(self.index, IntervalIndex):\n            indexer = self.index.get_indexer_for(key)\n            return self.iloc[indexer]\n        else:\n            return self._get_values(key)\n\n    if isinstance(key, (list, tuple)):\n        # TODO: de-dup with tuple case handled above?\n        # handle the dup indexing case GH#4246\n        if len(key) == 1 and isinstance(key[0], slice):\n            # [slice(0, 5, None)] will break if you convert to ndarray,\n            # e.g. as requested by np.median\n            # FIXME: hack\n            return self._get_values(key)\n\n        return self.loc[key]\n\n    return self.reindex(key)\n",
    "1.1.2": null,
    "1.2.1": "class Series(base.IndexOpsMixin, generic.NDFrame)",
    "1.2.2": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, *, **) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, argument order is maintained for Python 3.6\n       and later.\n\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index\n    sequence are used, the index will override the keys found in the\n    dict.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : str, optional\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data.",
    "1.2.3": [
        "_slice(self, slobj: slice, axis: int=0, kind: str='getitem') -> 'Series'",
        "_get_values_tuple(self, key)",
        "_get_values(self, indexer)",
        "reindex(self, index=None, **kwargs)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_61/pandas/core/series.py",
    "1.3.2": [
        "_slice(self, slobj: slice, axis: int=0, kind: str='getitem') -> 'Series'",
        "_get_values_tuple(self, key)",
        "_get_values(self, indexer)",
        "reindex(self, index=None, **kwargs)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_61/pandas/tests/indexing/test_indexing.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_61/pandas/tests/indexing/test_indexing.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_61/pandas/tests/indexing/test_indexing.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_61/pandas/tests/indexing/test_indexing.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_61/pandas/tests/indexing/test_indexing.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_61/pandas/tests/indexing/test_indexing.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_61/pandas/tests/indexing/test_indexing.py"
    ],
    "2.1.1": [
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x11830bb50>\nindex = Index(['mcrxJ5jher', 'ZobuJqD8F9', 'uc5SHpNVye', 'GSo0ukE5uP', 'kVBRI64YM4'], dtype='object')\nobj = mcrxJ5jher    0\nZobuJqD8F9    1\nuc5SHpNVye    2\nGSo0ukE5uP    3\nkVBRI64YM4    4\ndtype: int64\nidxr = mcrxJ5jher    0\nZobuJqD8F9    1\nuc5SHpNVye    2\nGSo0ukE5uP    3\nkVBRI64YM4    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x1182b6700>\nindex = Index(['\u05d8\u05e8\u05e51\u05db\u05da6\u05d0\u05d8\u05dc', '\u05de\u05da\u05e9\u05da\u05d2\u05df9\u05e18\u05e6', '761\u05e3\u05e30\u05de\u05d7\u05d3\u05dc', '\u05d5\u05de34\u05df\u05d8\u05d4\u05d9\u05e7\u05d5', '\u05d4\u05da\u05e4\u05d6\u05d3\u05dd2\u05d5\u05d8\u05dd'], dtype='object')\nobj = \u05d8\u05e8\u05e51\u05db\u05da6\u05d0\u05d8\u05dc    0\n\u05de\u05da\u05e9\u05da\u05d2\u05df9\u05e18\u05e6    1\n761\u05e3\u05e30\u05de\u05d7\u05d3\u05dc    2\n\u05d5\u05de34\u05df\u05d8\u05d4\u05d9\u05e7\u05d5    3\n\u05d4\u05da\u05e4\u05d6\u05d3\u05dd2\u05d5\u05d8\u05dd    4\ndtype: int64\nidxr = \u05d8\u05e8\u05e51\u05db\u05da6\u05d0\u05d8\u05dc    0\n\u05de\u05da\u05e9\u05da\u05d2\u05df9\u05e18\u05e6    1\n761\u05e3\u05e30\u05de\u05d7\u05d3\u05dc    2\n\u05d5\u05de34\u05df\u05d8\u05d4\u05d9\u05e7\u05d5    3\n\u05d4\u05da\u05e4\u05d6\u05d3\u05dd2\u05d5\u05d8\u05dd    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x1182d2e20>\nindex = DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n               '2000-01-07'],\n              dtype='datetime64[ns]', freq='B')\nobj = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x1182bc640>\nindex = PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n             '2000-01-07'],\n            dtype='period[B]', freq='B')\nobj = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x118388940>\nindex = TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')\nobj = 1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64\nidxr = 1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x1181bb550>\nindex = Index([False, True, False, False, False], dtype='object')\nobj = False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64\nidxr = False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x118311730>\nindex = CategoricalIndex(['n9pK', 'klcA', 'KM0w', 'n9pK', 'klcA'], categories=['n9pK', 'klcA', 'KM0w'], ordered=False, dtype='category')\nobj = n9pK    0\nklcA    1\nKM0w    2\nn9pK    3\nklcA    4\ndtype: int64\nidxr = n9pK    0\nklcA    1\nKM0w    2\nn9pK    3\nklcA    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ]
    ],
    "2.1.3": [
        [
            {
                "key": "array([[[3, 0],\n        [1, 0]],\n\n       [[2, 0],\n        [1, 1]]])",
                "self._slice": "<bound method Series._slice of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                "self._get_values_tuple": "<bound method Series._get_values_tuple of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self._get_values": "<bound method Series._get_values of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self.index": "Int64Index([0, 1, 2, 3, 4], dtype='int64')",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x117abd310>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x117abd310>",
                "self.reindex": "<bound method Series.reindex of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>"
            },
            {
                "key_type": "'integer'",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x11791e590>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x11791e590>"
            }
        ],
        [
            {
                "key": "array([[[2, 2],\n        [2, 4]],\n\n       [[4, 4],\n        [2, 3]]])",
                "self._slice": "<bound method Series._slice of -1.681016e+06    0\n-5.094113e+05    1\n 2.106357e+05    2\n 1.045438e+06    3\n 3.192422e+06    4\ndtype: int64>",
                "self": "-1.681016e+06    0\n-5.094113e+05    1\n 2.106357e+05    2\n 1.045438e+06    3\n 3.192422e+06    4\ndtype: int64",
                "self._get_values_tuple": "<bound method Series._get_values_tuple of -1.681016e+06    0\n-5.094113e+05    1\n 2.106357e+05    2\n 1.045438e+06    3\n 3.192422e+06    4\ndtype: int64>",
                "self._get_values": "<bound method Series._get_values of -1.681016e+06    0\n-5.094113e+05    1\n 2.106357e+05    2\n 1.045438e+06    3\n 3.192422e+06    4\ndtype: int64>",
                "self.index": "Float64Index([-1681016.4970115083, -509411.34216958896,  210635.66690965652,\n               1045437.7395340342,  3192421.5786565403],\n             dtype='float64')",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x117938630>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x117938630>",
                "self.reindex": "<bound method Series.reindex of -1.681016e+06    0\n-5.094113e+05    1\n 2.106357e+05    2\n 1.045438e+06    3\n 3.192422e+06    4\ndtype: int64>"
            },
            {
                "key_type": "'integer'",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x1179381d0>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1179381d0>"
            }
        ],
        [
            {
                "key": "array([[[2, 0],\n        [3, 2]],\n\n       [[4, 3],\n        [0, 4]]])",
                "self._slice": "<bound method Series._slice of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                "self._get_values_tuple": "<bound method Series._get_values_tuple of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self._get_values": "<bound method Series._get_values of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self.index": "RangeIndex(start=0, stop=5, step=1)",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x117d20630>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x117d20630>",
                "self.reindex": "<bound method Series.reindex of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>"
            },
            {
                "key_type": "'integer'",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x1179383b0>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1179383b0>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "key": "ndarray",
                "self._slice": "method",
                "self": "Series",
                "self._get_values_tuple": "method",
                "self._get_values": "method",
                "self.index": "Int64Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer",
                "self.reindex": "method"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self._slice": "method",
                "self": "Series",
                "self._get_values_tuple": "method",
                "self._get_values": "method",
                "self.index": "Float64Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer",
                "self.reindex": "method"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self._slice": "method",
                "self": "Series",
                "self._get_values_tuple": "method",
                "self._get_values": "method",
                "self.index": "RangeIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer",
                "self.reindex": "method"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "key": "array([[[3, 3],\n        [3, 2]],\n\n       [[3, 3],\n        [4, 3]]])",
                "self._slice": "<bound method Series._slice of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                "self._get_values_tuple": "<bound method Series._get_values_tuple of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self._get_values": "<bound method Series._get_values of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self.index": "Int64Index([0, 1, 2, 3, 4], dtype='int64')",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x1192219f0>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1192219f0>",
                "self.reindex": "<bound method Series.reindex of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>"
            },
            {
                "key_type": "'integer'",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x119221360>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x119221360>"
            }
        ],
        [
            {
                "key": "array([[[2, 0],\n        [0, 3]],\n\n       [[2, 4],\n        [1, 1]]])",
                "self._slice": "<bound method Series._slice of -3.020385    0\n 0.439110    1\n 0.676973    2\n 4.147244    3\n 5.197256    4\ndtype: int64>",
                "self": "-3.020385    0\n 0.439110    1\n 0.676973    2\n 4.147244    3\n 5.197256    4\ndtype: int64",
                "self._get_values_tuple": "<bound method Series._get_values_tuple of -3.020385    0\n 0.439110    1\n 0.676973    2\n 4.147244    3\n 5.197256    4\ndtype: int64>",
                "self._get_values": "<bound method Series._get_values of -3.020385    0\n 0.439110    1\n 0.676973    2\n 4.147244    3\n 5.197256    4\ndtype: int64>",
                "self.index": "Float64Index([ -3.020385389821074, 0.43910964368116145,  0.6769733244731024,\n                4.147244309776257,   5.197255846001651],\n             dtype='float64')",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x1192357c0>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x1192357c0>",
                "self.reindex": "<bound method Series.reindex of -3.020385    0\n 0.439110    1\n 0.676973    2\n 4.147244    3\n 5.197256    4\ndtype: int64>"
            },
            {
                "key_type": "'integer'",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x119221540>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x119221540>"
            }
        ],
        [
            {
                "key": "array([[[1, 2],\n        [1, 0]],\n\n       [[2, 0],\n        [0, 2]]])",
                "self._slice": "<bound method Series._slice of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                "self._get_values_tuple": "<bound method Series._get_values_tuple of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self._get_values": "<bound method Series._get_values of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>",
                "self.index": "RangeIndex(start=0, stop=5, step=1)",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x11920a040>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x11920a040>",
                "self.reindex": "<bound method Series.reindex of 0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64>"
            },
            {
                "key_type": "'integer'",
                "self.loc": "<pandas.core.indexing._LocIndexer object at 0x119245720>",
                "self.iloc": "<pandas.core.indexing._iLocIndexer object at 0x119245720>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "key": "ndarray",
                "self._slice": "method",
                "self": "Series",
                "self._get_values_tuple": "method",
                "self._get_values": "method",
                "self.index": "Int64Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer",
                "self.reindex": "method"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self._slice": "method",
                "self": "Series",
                "self._get_values_tuple": "method",
                "self._get_values": "method",
                "self.index": "Float64Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer",
                "self.reindex": "method"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self._slice": "method",
                "self": "Series",
                "self._get_values_tuple": "method",
                "self._get_values": "method",
                "self.index": "RangeIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer",
                "self.reindex": "method"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}