{
    "pandas": [
        {
            "bugID": 128,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 352,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def read_json(\n    path_or_buf=None,\n    orient=None,\n    typ='frame',\n    dtype=True,\n    convert_axes=True,\n    convert_dates=True,\n    keep_default_dates=True,\n    numpy=False,\n    precise_float=False,\n    date_unit=None,\n    encoding=None,\n    lines=False,\n    chunksize=None,\n    compression='infer',\n):\n    import os\n    import pandas.compat as compat\n    from pandas.io.json import json\n    \"\"\"\n    Convert a JSON string to pandas object.\n    \n    Parameters\n    ----------\n    path_or_buf : a valid JSON str, path object or file-like object\n        Any valid string path is acceptable. The string could be a URL. Valid\n        URL schemes include http, ftp, s3, and file. For file URLs, a host is\n        expected. A local file could be:\n        ``file://localhost/path/to/table.json``.\n    \n        If you want to pass in a path object, pandas accepts any\n        ``os.PathLike``.\n    \n        By file-like object, we refer to objects with a ``read()`` method,\n        such as a file handler (e.g. via builtin ``open`` function)\n        or ``StringIO``.\n    orient : str\n        Indication of expected JSON string format.\n        Compatible JSON strings can be produced by ``to_json()`` with a\n        corresponding orient value.\n        The set of possible orients is:\n    \n        - ``'split'`` : dict like\n          ``{index -> [index], columns -> [columns], data -> [values]}``\n        - ``'records'`` : list like\n          ``[{column -> value}, ... , {column -> value}]``\n        - ``'index'`` : dict like ``{index -> {column -> value}}``\n        - ``'columns'`` : dict like ``{column -> {index -> value}}``\n        - ``'values'`` : just the values array\n    \n        The allowed and default values depend on the value\n        of the `typ` parameter.\n    \n        * when ``typ == 'series'``,\n          - allowed orients are ``{'split','records','index'}``\n          - default is ``'index'``\n          - The Series index must be unique for orient ``'index'``.\n    \n        * when ``typ == 'frame'``,\n          - allowed orients are ``{'split','records','index',\n            'columns','values', 'table'}``\n          - default is ``'columns'``\n          - The DataFrame index must be unique for orients ``'index'`` and\n            ``'columns'``.\n          - The DataFrame columns must be unique for orients ``'index'``,\n            ``'columns'``, and ``'records'``.\n    \n        .. versionadded:: 0.23.0\n           'table' as an allowed value for the ``orient`` argument\n    typ : {'frame', 'series'}, default 'frame'\n        The type of object to recover.\n    dtype : bool or dict, default True\n        If True, infer dtypes; if a dict of column to dtype, then use those;\n        if False, then don't infer dtypes at all, applies only to the data.\n    \n        For all ``orient`` values except ``'table'``, default is True.\n    \n        .. versionchanged:: 0.25.0\n    \n           Not applicable for ``orient='table'``.\n    convert_axes : bool, default True\n        Try to convert the axes to the proper dtypes.\n    \n        For all ``orient`` values except ``'table'``, default is True.\n    \n        .. versionchanged:: 0.25.0\n    \n           Not applicable for ``orient='table'``.\n    convert_dates : bool or list of str, default True\n        List of columns to parse for dates. If True, then try to parse\n        datelike columns. A column label is datelike if\n    \n        * it ends with ``'_at'``,\n        * it ends with ``'_time'``,\n        * it begins with ``'timestamp'``,\n        * it is ``'modified'``, or\n        * it is ``'date'``.\n    \n    keep_default_dates : bool, default True\n        If parsing dates, then parse the default datelike columns.\n    numpy : bool, default False\n        Direct decoding to numpy arrays. Supports numeric data only, but\n        non-numeric column and index labels are supported. Note also that the\n        JSON ordering MUST be the same for each term if numpy=True.\n    precise_float : bool, default False\n        Set to enable usage of higher precision (strtod) function when\n        decoding string to double values. Default (False) is to use fast but\n        less precise builtin functionality.\n    date_unit : str, default None\n        The timestamp unit to detect if converting dates. The default behaviour\n        is to try and detect the correct precision, but if this is not desired\n        then pass one of 's', 'ms', 'us' or 'ns' to force parsing only seconds,\n        milliseconds, microseconds or nanoseconds respectively.\n    encoding : str, default 'utf-8'\n        The encoding to use to decode py3 bytes.\n    lines : bool, default False\n        Read the file as a json object per line.\n    chunksize : int, optional\n        Return JsonReader object for iteration.\n        See the `line-delimited json docs\n        <http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json>`_\n        for more information on ``chunksize``.\n        This can only be passed if `lines=True`.\n        If this is None, the file will be read into memory all at once.\n    \n        .. versionadded:: 0.21.0\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        For on-the-fly decompression of on-disk data. If 'infer', then use\n        gzip, bz2, zip or xz if path_or_buf is a string ending in\n        '.gz', '.bz2', '.zip', or 'xz', respectively, and no decompression\n        otherwise. If using 'zip', the ZIP file must contain only one data\n        file to be read in. Set to None for no decompression.\n    \n        .. versionadded:: 0.21.0\n    Returns\n    -------\n    Series or DataFrame\n        The type returned depends on the value of `typ`.\n    \n    See Also\n    --------\n    DataFrame.to_json : Convert a DataFrame to a JSON string.\n    Series.to_json : Convert a Series to a JSON string.\n    \"\"\""
        }
    ]
}