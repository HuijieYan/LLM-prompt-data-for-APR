{
    "pandas": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 72,
            "file_name": "/pandas/core/ops/methods.py",
            "replace_code": "def add_special_arithmetic_methods(cls):\n\n    \"\"\"\n    Adds the full suite of special arithmetic methods (``__add__``,\n    ``__sub__``, etc.) to the class.\n    \n    Parameters\n    ----------\n    cls : class\n        special methods will be defined and pinned to this class\n    \"\"\"\n    _, _, arith_method, comp_method, bool_method = _get_method_wrappers(cls)\n    new_methods = _create_methods(\n        cls, arith_method, comp_method, bool_method, special=True\n    )\n    \n    def _wrap_inplace_method(method):\n        \"\"\"\n        return an inplace wrapper for this method\n        \"\"\"\n    \n        def f(self, other):\n            result = method(self, other)\n    \n            # Ensure that inplace modifications are applied correctly\n            inplace_result = result if isinstance(result, (pd.DataFrame, pd.Series)) else self\n            inplace_result._data = result.reindex_like(self, copy=False)._data\n            return inplace_result\n    \n        name = method.__name__.strip(\"__\")\n        f.__name__ = f\"__i{name}__\"\n        return f\n    \n    inplace_methods = [\n        \"__iadd__\", \"__isub__\", \"__imul__\", \"__itruediv__\",\n        \"__ifloordiv__\", \"__imod__\", \"__ipow__\", \"__iand__\",\n        \"__ior__\", \"__ixor__\"\n    ]\n    \n    for method_name in inplace_methods:\n        new_methods[method_name] = _wrap_inplace_method(new_methods[method_name])\n    \n    _add_methods(cls, new_methods=new_methods)"
        }
    ]
}