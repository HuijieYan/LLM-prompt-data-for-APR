{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n\n    data: BlockManager = self._get_data_to_aggregate()\n    \n    if numeric_only:\n        data = data.convert(astype='Int64', copy=False)\n    \n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        if pd.api.types.is_integer_dtype(block.dtype.type):\n            result = block.group_manager(block.values)\n            if isinstance(result, pd.DataFrame):\n                result = result._blocks_transformed_to_dtypes().values\n            # logic for downcast_result\n            result = maybe_downcast_numeric(result, 'integer')\n            agg_block: Block = block.make_block(result)\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n    \n    if not (agg_blocks):\n        raise DataError(\"No numeric types to aggregate\")\n    \n    # copy-pasting the remaining part of the original function \n    # with unchanged functionality but cleaner and optimized code\n    return agg_blocks, data.items.take(np.sort(np.concatenate(new_items)))"
        }
    ]
}