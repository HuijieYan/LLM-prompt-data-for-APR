{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 999,
            "file_name": "core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n\n    data: BlockManager = self.obj._data\n    if numeric_only:\n        data = data.convert_dtypes()\n        data = data.select_dtypes(include=[\"int\", \"float\"], allow_narrow=True)\n    \n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    \n    if how == \"ohlc\":\n        deleted_items: List[np.ndarray] = []\n    else:\n        deleted_items = None\n        split_items: List[np.ndarray] = []\n    \n    for indexer in range(len(data.blocks)):\n        result = pd.DataFrame()\n        for locs in data.blocks[indexer].mgr_locs.as_array:\n            obj = self.obj.copy().iloc[locs, :]\n            if obj.shape[1] == 1:\n                obj = obj.stack(dropna=False)\n    \n            s = obj.groupby(level=self.grouper.names[0])\n            agg_result = s.aggregate(alt)\n            if isinstance(agg_result, pd.DataFrame):\n                split_items.append(locs)\n                agg_result = agg_result.transpose().to_numpy()\n            result = pd.concat([result, agg_result])\n    \n        result_values = result.values\n        if result_values.size == 0:\n            result_values = np.array([np.nan])\n    \n        agg_block = pd.blocks.make_block(\n            values=result_values, placement=pd.block.mgr_locs,\n        )\n    \n        new_items.append(pd.block.mgr_locs.as_array)\n        agg_blocks.append(agg_block)\n    \n    return agg_blocks, agg_items"
        }
    ]
}