{
    "pandas": [
        {
            "bugID": 140,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1895,
            "file_name": "core/groupby/generic.py",
            "replace_code": "def _recast_datetimelike_result(result: DataFrame) -> DataFrame:\n\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n    \n    Parameters\n    ----------\n    result : DataFrame\n    \n    Returns\n    -------\n    DataFrame\n    \n    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    result_copy = result.copy()  # Make a copy of the input DataFrame\n    result_copy_obj_cols = [\n        idx for idx in range(len(result_copy.columns)) if pd.api.types.is_object_dtype(result_copy.dtypes[idx])\n    ]  # Find the columns with object dtype\n    \n    # Loop through the object columns and convert the values\n    for n in result_copy_obj_cols:\n        converted = pd.to_numeric(result_copy.iloc[:, n], errors='coerce')  # Convert the values to numeric\n        result_copy.iloc[:, n] = converted  # Assign the converted values back to the DataFrame\n    \n    return result_copy  # Return the modified DataFrame"
        }
    ]
}