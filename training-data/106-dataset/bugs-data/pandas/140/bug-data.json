{
    "pandas:140": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_140/pandas/core/groupby/generic.py": {
            "buggy_functions": [
                {
                    "function_name": "_recast_datetimelike_result",
                    "function_code": "def _recast_datetimelike_result(result: DataFrame) -> DataFrame:\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n\n    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    result = result.copy()\n\n    obj_cols = [\n        idx for idx in range(len(result.columns)) if is_object_dtype(result.dtypes[idx])\n    ]\n\n    # See GH#26285\n    for n in obj_cols:\n        converted = maybe_convert_objects(\n            result.iloc[:, n].values, convert_numeric=False\n        )\n\n        result.iloc[:, n] = converted\n    return result\n",
                    "decorators": [],
                    "docstring": "If we have date/time like in the original, then coerce dates\nas we are stacking can easily have object dtypes here.\n\nParameters\n----------\nresult : DataFrame\n\nReturns\n-------\nDataFrame\n\nNotes\n-----\n- Assumes Groupby._selected_obj has ndim==2 and at least one\ndatetimelike column",
                    "start_line": 1895,
                    "variables": {
                        "DataFrame": [
                            1895
                        ],
                        "result": [
                            1922,
                            1925,
                            1926,
                            1913,
                            1916
                        ],
                        "result.copy": [
                            1913
                        ],
                        "obj_cols": [
                            1920,
                            1915
                        ],
                        "idx": [
                            1916
                        ],
                        "range": [
                            1916
                        ],
                        "len": [
                            1916
                        ],
                        "result.columns": [
                            1916
                        ],
                        "is_object_dtype": [
                            1916
                        ],
                        "result.dtypes": [
                            1916
                        ],
                        "n": [
                            1920,
                            1922,
                            1925
                        ],
                        "converted": [
                            1921,
                            1925
                        ],
                        "maybe_convert_objects": [
                            1921
                        ],
                        "values": [
                            1922
                        ],
                        "result.iloc": [
                            1922,
                            1925
                        ]
                    },
                    "filtered_variables": {
                        "DataFrame": [
                            1895
                        ],
                        "result": [
                            1922,
                            1925,
                            1926,
                            1913,
                            1916
                        ],
                        "result.copy": [
                            1913
                        ],
                        "obj_cols": [
                            1920,
                            1915
                        ],
                        "idx": [
                            1916
                        ],
                        "result.columns": [
                            1916
                        ],
                        "is_object_dtype": [
                            1916
                        ],
                        "result.dtypes": [
                            1916
                        ],
                        "n": [
                            1920,
                            1922,
                            1925
                        ],
                        "converted": [
                            1921,
                            1925
                        ],
                        "maybe_convert_objects": [
                            1921
                        ],
                        "values": [
                            1922
                        ],
                        "result.iloc": [
                            1922,
                            1925
                        ]
                    },
                    "diff_line_number": 1916,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "       42\na        \nfoo  spam",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "result.copy": {
                                    "variable_value": "<bound method NDFrame.copy of        42\na        \nfoo  spam>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "obj_cols": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Int64Index([42], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": "42    object\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "converted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x11d2c47c0>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "       42\na        \nfoo  spam",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "result.copy": {
                                    "variable_value": "<bound method NDFrame.copy of        42\na        \nfoo  spam>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "obj_cols": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Int64Index([42], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": "42    object\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "converted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x119ffa540>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                }
                            },
                            {
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "       42\na        \nfoo  spam",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "result.copy": {
                                    "variable_value": "<bound method NDFrame.copy of        42\na        \nfoo  spam>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "obj_cols": {
                                    "variable_value": "[0]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Int64Index([42], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "is_object_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": "42    object\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "n": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "converted": {
                                    "variable_value": "array(['spam'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x119ffa9a0>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def generate_property(name: str, klass: Type[FrameOrSeries]):\n    \"\"\"\n    Create a property for a GroupBy subclass to dispatch to DataFrame/Series.\n\n    Parameters\n    ----------\n    name : str\n    klass : {DataFrame, Series}\n\n    Returns\n    -------\n    property\n    \"\"\"\n\n    def prop(self):\n        return self._make_wrapper(name)\n\n    parent_method = getattr(klass, name)\n    prop.__doc__ = parent_method.__doc__ or \"\"\n    prop.__name__ = name\n    return property(prop)",
                "def pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[str]):\n    \"\"\"\n    Create GroupBy member defs for DataFrame/Series names in a whitelist.\n\n    Parameters\n    ----------\n    klass : DataFrame or Series class\n        class where members are defined.\n    whitelist : frozenset[str]\n        Set of names of klass methods to be constructed\n\n    Returns\n    -------\n    class decorator\n\n    Notes\n    -----\n    Since we don't want to override methods explicitly defined in the\n    base class, any such name is skipped.\n    \"\"\"\n\n    def pinner(cls):\n        for name in whitelist:\n            if hasattr(cls, name):\n                # don't override anything that was explicitly defined\n                #  in the base class\n                continue\n\n            prop = generate_property(name, klass)\n            setattr(cls, name, prop)\n\n        return cls\n\n    return pinner",
                "def _is_multi_agg_with_relabel(**kwargs):\n    \"\"\"\n    Check whether kwargs passed to .agg look like multi-agg with relabeling.\n\n    Parameters\n    ----------\n    **kwargs : dict\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> _is_multi_agg_with_relabel(a='max')\n    False\n    >>> _is_multi_agg_with_relabel(a_max=('a', 'max'),\n    ...                            a_min=('a', 'min'))\n    True\n    >>> _is_multi_agg_with_relabel()\n    False\n    \"\"\"\n    return all(isinstance(v, tuple) and len(v) == 2 for v in kwargs.values()) and kwargs",
                "def _normalize_keyword_aggregation(kwargs):\n    \"\"\"\n    Normalize user-provided \"named aggregation\" kwargs.\n\n    Transforms from the new ``Dict[str, NamedAgg]`` style kwargs\n    to the old OrderedDict[str, List[scalar]]].\n\n    Parameters\n    ----------\n    kwargs : dict\n\n    Returns\n    -------\n    aggspec : dict\n        The transformed kwargs.\n    columns : List[str]\n        The user-provided keys.\n    col_idx_order : List[int]\n        List of columns indices.\n\n    Examples\n    --------\n    >>> _normalize_keyword_aggregation({'output': ('input', 'sum')})\n    (OrderedDict([('input', ['sum'])]), ('output',), [('input', 'sum')])\n    \"\"\"\n    if not PY36:\n        kwargs = OrderedDict(sorted(kwargs.items()))\n\n    # Normalize the aggregation functions as Dict[column, List[func]],\n    # process normally, then fixup the names.\n    # TODO(Py35): When we drop python 3.5, change this to\n    # defaultdict(list)\n    # TODO: aggspec type: typing.OrderedDict[str, List[AggScalar]]\n    # May be hitting https://github.com/python/mypy/issues/5958\n    # saying it doesn't have an attribute __name__\n    aggspec = OrderedDict()\n    order = []\n    columns, pairs = list(zip(*kwargs.items()))\n\n    for name, (column, aggfunc) in zip(columns, pairs):\n        if column in aggspec:\n            aggspec[column].append(aggfunc)\n        else:\n            aggspec[column] = [aggfunc]\n        order.append((column, com.get_callable_name(aggfunc) or aggfunc))\n\n    # uniquify aggfunc name if duplicated in order list\n    uniquified_order = _make_unique(order)\n\n    # GH 25719, due to aggspec will change the order of assigned columns in aggregation\n    # uniquified_aggspec will store uniquified order list and will compare it with order\n    # based on index\n    aggspec_order = [\n        (column, com.get_callable_name(aggfunc) or aggfunc)\n        for column, aggfuncs in aggspec.items()\n        for aggfunc in aggfuncs\n    ]\n    uniquified_aggspec = _make_unique(aggspec_order)\n\n    # get the new indice of columns by comparison\n    col_idx_order = Index(uniquified_aggspec).get_indexer(uniquified_order)\n    return aggspec, columns, col_idx_order",
                "def _make_unique(seq):\n    \"\"\"Uniquify aggfunc name of the pairs in the order list\n\n    Examples:\n    --------\n    >>> _make_unique([('a', '<lambda>'), ('a', '<lambda>'), ('b', '<lambda>')])\n    [('a', '<lambda>_0'), ('a', '<lambda>_1'), ('b', '<lambda>')]\n    \"\"\"\n    return [\n        (pair[0], \"_\".join([pair[1], str(seq[:i].count(pair))]))\n        if seq.count(pair) > 1\n        else pair\n        for i, pair in enumerate(seq)\n    ]",
                "def _managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]:\n    \"\"\"\n    Possibly mangle a list of aggfuncs.\n\n    Parameters\n    ----------\n    aggfuncs : Sequence\n\n    Returns\n    -------\n    mangled: list-like\n        A new AggSpec sequence, where lambdas have been converted\n        to have unique names.\n\n    Notes\n    -----\n    If just one aggfunc is passed, the name will not be mangled.\n    \"\"\"\n    if len(aggfuncs) <= 1:\n        # don't mangle for .agg([lambda x: .])\n        return aggfuncs\n    i = 0\n    mangled_aggfuncs = []\n    for aggfunc in aggfuncs:\n        if com.get_callable_name(aggfunc) == \"<lambda>\":\n            aggfunc = functools.partial(aggfunc)\n            aggfunc.__name__ = \"<lambda_{}>\".format(i)\n            i += 1\n        mangled_aggfuncs.append(aggfunc)\n\n    return mangled_aggfuncs",
                "def _maybe_mangle_lambdas(agg_spec: Any) -> Any:\n    \"\"\"\n    Make new lambdas with unique names.\n\n    Parameters\n    ----------\n    agg_spec : Any\n        An argument to NDFrameGroupBy.agg.\n        Non-dict-like `agg_spec` are pass through as is.\n        For dict-like `agg_spec` a new spec is returned\n        with name-mangled lambdas.\n\n    Returns\n    -------\n    mangled : Any\n        Same type as the input.\n\n    Examples\n    --------\n    >>> _maybe_mangle_lambdas('sum')\n    'sum'\n\n    >>> _maybe_mangle_lambdas([lambda: 1, lambda: 2])  # doctest: +SKIP\n    [<function __main__.<lambda_0>,\n     <function pandas...._make_lambda.<locals>.f(*args, **kwargs)>]\n    \"\"\"\n    is_dict = is_dict_like(agg_spec)\n    if not (is_dict or is_list_like(agg_spec)):\n        return agg_spec\n    mangled_aggspec = type(agg_spec)()  # dict or OrderdDict\n\n    if is_dict:\n        for key, aggfuncs in agg_spec.items():\n            if is_list_like(aggfuncs) and not is_dict_like(aggfuncs):\n                mangled_aggfuncs = _managle_lambda_list(aggfuncs)\n            else:\n                mangled_aggfuncs = aggfuncs\n\n            mangled_aggspec[key] = mangled_aggfuncs\n    else:\n        mangled_aggspec = _managle_lambda_list(agg_spec)\n\n    return mangled_aggspec",
                "def _recast_datetimelike_result(result: DataFrame) -> DataFrame:\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n\n    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    result = result.copy()\n\n    obj_cols = [\n        idx for idx in range(len(result.columns)) if is_object_dtype(result.dtypes[idx])\n    ]\n\n    # See GH#26285\n    for n in obj_cols:\n        converted = maybe_convert_objects(\n            result.iloc[:, n].values, convert_numeric=False\n        )\n\n        result.iloc[:, n] = converted\n    return result",
                "def prop(self):\n    return self._make_wrapper(name)",
                "def pinner(cls):\n    for name in whitelist:\n        if hasattr(cls, name):\n            # don't override anything that was explicitly defined\n            #  in the base class\n            continue\n\n        prop = generate_property(name, klass)\n        setattr(cls, name, prop)\n\n    return cls",
                "def _iterate_slices(self):\n    if self.axis == 0:\n        # kludge\n        if self._selection is None:\n            slice_axis = self.obj.columns\n        else:\n            slice_axis = self._selection_list\n        slicer = lambda x: self.obj[x]\n    else:\n        slice_axis = self.obj.index\n        slicer = self.obj.xs\n\n    for val in slice_axis:\n        if val in self.exclusions:\n            continue\n        yield val, slicer(val)",
                "def _cython_agg_general(self, how, alt=None, numeric_only=True, min_count=-1):\n    new_items, new_blocks = self._cython_agg_blocks(\n        how, alt=alt, numeric_only=numeric_only, min_count=min_count\n    )\n    return self._wrap_agged_blocks(new_items, new_blocks)",
                "def _cython_agg_blocks(self, how, alt=None, numeric_only=True, min_count=-1):\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data, agg_axis = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    new_blocks = []\n    new_items = []\n    deleted_items = []\n    no_result = object()\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=agg_axis, min_count=min_count\n            )\n        except NotImplementedError:\n            # generally if we have numeric_only=False\n            # and non-applicable functions\n            # try to python agg\n\n            if alt is None:\n                # we cannot perform the operation\n                # in an alternate way, exclude the block\n                deleted_items.append(locs)\n                continue\n\n            # call our grouper again with only this block\n            obj = self.obj[data.items[locs]]\n            s = groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                # we may have an exception in trying to aggregate\n                # continue and exclude the block\n                deleted_items.append(locs)\n                continue\n        finally:\n            if result is not no_result:\n                # see if we can cast the block back to the original dtype\n                result = maybe_downcast_numeric(result, block.dtype)\n                newb = block.make_block(result)\n\n        new_items.append(locs)\n        new_blocks.append(newb)\n\n    if len(new_blocks) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # reset the locs in the blocks to correspond to our\n    # current ordering\n    indexer = np.concatenate(new_items)\n    new_items = data.items.take(np.sort(indexer))\n\n    if len(deleted_items):\n\n        # we need to adjust the indexer to account for the\n        # items we have removed\n        # really should be done in internals :<\n\n        deleted = np.concatenate(deleted_items)\n        ai = np.arange(len(data))\n        mask = np.zeros(len(data))\n        mask[deleted] = 1\n        indexer = (ai - mask.cumsum())[indexer]\n\n    offset = 0\n    for b in new_blocks:\n        loc = len(b.mgr_locs)\n        b.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    return new_items, new_blocks",
                "def aggregate(self, func, *args, **kwargs):\n    _level = kwargs.pop(\"_level\", None)\n\n    relabeling = func is None and _is_multi_agg_with_relabel(**kwargs)\n    if relabeling:\n        func, columns, order = _normalize_keyword_aggregation(kwargs)\n\n        kwargs = {}\n    elif func is None:\n        # nicer error message\n        raise TypeError(\"Must provide 'func' or tuples of '(column, aggfunc).\")\n\n    func = _maybe_mangle_lambdas(func)\n\n    result, how = self._aggregate(func, _level=_level, *args, **kwargs)\n    if how is None:\n        return result\n\n    if result is None:\n\n        # grouper specific aggregations\n        if self.grouper.nkeys > 1:\n            return self._python_agg_general(func, *args, **kwargs)\n        elif args or kwargs:\n            result = self._aggregate_generic(func, *args, **kwargs)\n        else:\n\n            # try to treat as if we are passing a list\n            try:\n                result = self._aggregate_multiple_funcs(\n                    [func], _level=_level, _axis=self.axis\n                )\n            except Exception:\n                result = self._aggregate_generic(func)\n            else:\n                result.columns = Index(\n                    result.columns.levels[0], name=self._selected_obj.columns.name\n                )\n\n    if not self.as_index:\n        self._insert_inaxis_grouper_inplace(result)\n        result.index = np.arange(len(result))\n\n    if relabeling:\n\n        # used reordered index of columns\n        result = result.iloc[:, order]\n        result.columns = columns\n\n    return result._convert(datetime=True)",
                "def _aggregate_generic(self, func, *args, **kwargs):\n    if self.grouper.nkeys != 1:\n        raise AssertionError(\"Number of keys must be 1\")\n\n    axis = self.axis\n    obj = self._obj_with_exclusions\n\n    result = OrderedDict()\n    if axis != obj._info_axis_number:\n        try:\n            for name, data in self:\n                result[name] = self._try_cast(func(data, *args, **kwargs), data)\n        except Exception:\n            return self._aggregate_item_by_item(func, *args, **kwargs)\n    else:\n        for name in self.indices:\n            try:\n                data = self.get_group(name, obj=obj)\n                result[name] = self._try_cast(func(data, *args, **kwargs), data)\n            except Exception:\n                wrapper = lambda x: func(x, *args, **kwargs)\n                result[name] = data.apply(wrapper, axis=axis)\n\n    return self._wrap_generic_output(result, obj)",
                "def _wrap_aggregated_output(self, output, names=None):\n    raise AbstractMethodError(self)",
                "def _aggregate_item_by_item(self, func, *args, **kwargs):\n    # only for axis==0\n\n    obj = self._obj_with_exclusions\n    result = OrderedDict()\n    cannot_agg = []\n    errors = None\n    for item in obj:\n        data = obj[item]\n        colg = SeriesGroupBy(data, selection=item, grouper=self.grouper)\n\n        try:\n            cast = self._transform_should_cast(func)\n\n            result[item] = colg.aggregate(func, *args, **kwargs)\n            if cast:\n                result[item] = self._try_cast(result[item], data)\n\n        except ValueError as err:\n            if \"Must produce aggregated value\" in str(err):\n                # raised in _aggregate_named, handle at higher level\n                #  see test_apply_with_mutated_index\n                raise\n            cannot_agg.append(item)\n            continue\n        except TypeError as e:\n            cannot_agg.append(item)\n            errors = e\n            continue\n\n    result_columns = obj.columns\n    if cannot_agg:\n        result_columns = result_columns.drop(cannot_agg)\n\n        # GH6337\n        if not len(result_columns) and errors is not None:\n            raise errors\n\n    return DataFrame(result, columns=result_columns)",
                "def _decide_output_index(self, output, labels):\n    if len(output) == len(labels):\n        output_keys = labels\n    else:\n        output_keys = sorted(output)\n        try:\n            output_keys.sort()\n        except TypeError:\n            pass\n\n        if isinstance(labels, MultiIndex):\n            output_keys = MultiIndex.from_tuples(output_keys, names=labels.names)\n\n    return output_keys",
                "def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n    if len(keys) == 0:\n        return DataFrame(index=keys)\n\n    key_names = self.grouper.names\n\n    # GH12824.\n    def first_not_none(values):\n        try:\n            return next(com.not_none(*values))\n        except StopIteration:\n            return None\n\n    v = first_not_none(values)\n\n    if v is None:\n        # GH9684. If all values are None, then this will throw an error.\n        # We'd prefer it return an empty dataframe.\n        return DataFrame()\n    elif isinstance(v, DataFrame):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    elif self.grouper.groupings is not None:\n        if len(self.grouper.groupings) > 1:\n            key_index = self.grouper.result_index\n\n        else:\n            ping = self.grouper.groupings[0]\n            if len(keys) == ping.ngroups:\n                key_index = ping.group_index\n                key_index.name = key_names[0]\n\n                key_lookup = Index(keys)\n                indexer = key_lookup.get_indexer(key_index)\n\n                # reorder the values\n                values = [values[i] for i in indexer]\n            else:\n\n                key_index = Index(keys, name=key_names[0])\n\n            # don't use the key indexer\n            if not self.as_index:\n                key_index = None\n\n        # make Nones an empty object\n        v = first_not_none(values)\n        if v is None:\n            return DataFrame()\n        elif isinstance(v, NDFrame):\n            values = [\n                x if x is not None else v._constructor(**v._construct_axes_dict())\n                for x in values\n            ]\n\n        v = values[0]\n\n        if isinstance(v, (np.ndarray, Index, Series)):\n            if isinstance(v, Series):\n                applied_index = self._selected_obj._get_axis(self.axis)\n                all_indexed_same = _all_indexes_same([x.index for x in values])\n                singular_series = len(values) == 1 and applied_index.nlevels == 1\n\n                # GH3596\n                # provide a reduction (Frame -> Series) if groups are\n                # unique\n                if self.squeeze:\n                    # assign the name to this series\n                    if singular_series:\n                        values[0].name = keys[0]\n\n                        # GH2893\n                        # we have series in the values array, we want to\n                        # produce a series:\n                        # if any of the sub-series are not indexed the same\n                        # OR we don't have a multi-index and we have only a\n                        # single values\n                        return self._concat_objects(\n                            keys, values, not_indexed_same=not_indexed_same\n                        )\n\n                    # still a series\n                    # path added as of GH 5545\n                    elif all_indexed_same:\n                        from pandas.core.reshape.concat import concat\n\n                        return concat(values)\n\n                if not all_indexed_same:\n                    # GH 8467\n                    return self._concat_objects(keys, values, not_indexed_same=True)\n\n            try:\n                if self.axis == 0:\n                    # GH6124 if the list of Series have a consistent name,\n                    # then propagate that name to the result.\n                    index = v.index.copy()\n                    if index.name is None:\n                        # Only propagate the series name to the result\n                        # if all series have a consistent name.  If the\n                        # series do not have a consistent name, do\n                        # nothing.\n                        names = {v.name for v in values}\n                        if len(names) == 1:\n                            index.name = list(names)[0]\n\n                    # normally use vstack as its faster than concat\n                    # and if we have mi-columns\n                    if (\n                        isinstance(v.index, MultiIndex)\n                        or key_index is None\n                        or isinstance(key_index, MultiIndex)\n                    ):\n                        stacked_values = np.vstack([np.asarray(v) for v in values])\n                        result = DataFrame(\n                            stacked_values, index=key_index, columns=index\n                        )\n                    else:\n                        # GH5788 instead of stacking; concat gets the\n                        # dtypes correct\n                        from pandas.core.reshape.concat import concat\n\n                        result = concat(\n                            values,\n                            keys=key_index,\n                            names=key_index.names,\n                            axis=self.axis,\n                        ).unstack()\n                        result.columns = index\n                else:\n                    stacked_values = np.vstack([np.asarray(v) for v in values])\n                    result = DataFrame(\n                        stacked_values.T, index=v.index, columns=key_index\n                    )\n\n            except (ValueError, AttributeError):\n                # GH1738: values is list of arrays of unequal lengths fall\n                # through to the outer else caluse\n                return Series(values, index=key_index, name=self._selection_name)\n\n            # if we have date/time like in the original, then coerce dates\n            # as we are stacking can easily have object dtypes here\n            so = self._selected_obj\n            if so.ndim == 2 and so.dtypes.apply(is_datetimelike).any():\n                result = _recast_datetimelike_result(result)\n            else:\n                result = result._convert(datetime=True)\n\n            return self._reindex_output(result)\n\n        # values are not series or array-like but scalars\n        else:\n            # only coerce dates if we find at least 1 datetime\n            coerce = any(isinstance(x, Timestamp) for x in values)\n            # self._selection_name not passed through to Series as the\n            # result should not take the name of original selection\n            # of columns\n            return Series(values, index=key_index)._convert(\n                datetime=True, coerce=coerce\n            )\n\n    else:\n        # Handle cases like BinGrouper\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)",
                "def _transform_general(self, func, *args, **kwargs):\n    from pandas.core.reshape.concat import concat\n\n    applied = []\n    obj = self._obj_with_exclusions\n    gen = self.grouper.get_iterator(obj, axis=self.axis)\n    fast_path, slow_path = self._define_paths(func, *args, **kwargs)\n\n    path = None\n    for name, group in gen:\n        object.__setattr__(group, \"name\", name)\n\n        if path is None:\n            # Try slow path and fast path.\n            try:\n                path, res = self._choose_path(fast_path, slow_path, group)\n            except TypeError:\n                return self._transform_item_by_item(obj, fast_path)\n            except ValueError:\n                msg = \"transform must return a scalar value for each group\"\n                raise ValueError(msg)\n        else:\n            res = path(group)\n\n        if isinstance(res, Series):\n\n            # we need to broadcast across the\n            # other dimension; this will preserve dtypes\n            # GH14457\n            if not np.prod(group.shape):\n                continue\n            elif res.index.is_(obj.index):\n                r = concat([res] * len(group.columns), axis=1)\n                r.columns = group.columns\n                r.index = group.index\n            else:\n                r = DataFrame(\n                    np.concatenate([res.values] * len(group.index)).reshape(\n                        group.shape\n                    ),\n                    columns=group.columns,\n                    index=group.index,\n                )\n\n            applied.append(r)\n        else:\n            applied.append(res)\n\n    concat_index = obj.columns if self.axis == 0 else obj.index\n    other_axis = 1 if self.axis == 0 else 0  # switches between 0 & 1\n    concatenated = concat(applied, axis=self.axis, verify_integrity=False)\n    concatenated = concatenated.reindex(concat_index, axis=other_axis, copy=False)\n    return self._set_result_index_ordered(concatenated)",
                "@Substitution(klass=\"DataFrame\", selected=\"\")\n@Appender(_transform_template)\ndef transform(self, func, *args, **kwargs):\n\n    # optimized transforms\n    func = self._get_cython_func(func) or func\n\n    if isinstance(func, str):\n        if not (func in base.transform_kernel_whitelist):\n            msg = \"'{func}' is not a valid function name for transform(name)\"\n            raise ValueError(msg.format(func=func))\n        if func in base.cythonized_kernels:\n            # cythonized transformation or canned \"reduction+broadcast\"\n            return getattr(self, func)(*args, **kwargs)\n        else:\n            # If func is a reduction, we need to broadcast the\n            # result to the whole group. Compute func result\n            # and deal with possible broadcasting below.\n            result = getattr(self, func)(*args, **kwargs)\n    else:\n        return self._transform_general(func, *args, **kwargs)\n\n    # a reduction transform\n    if not isinstance(result, DataFrame):\n        return self._transform_general(func, *args, **kwargs)\n\n    obj = self._obj_with_exclusions\n\n    # nuisance columns\n    if not result.columns.equals(obj.columns):\n        return self._transform_general(func, *args, **kwargs)\n\n    return self._transform_fast(result, obj, func)",
                "def _transform_fast(self, result, obj, func_nm):\n    \"\"\"\n    Fast transform path for aggregations\n    \"\"\"\n    # if there were groups with no observations (Categorical only?)\n    # try casting data to original dtype\n    cast = self._transform_should_cast(func_nm)\n\n    # for each col, reshape to to size of original frame\n    # by take operation\n    ids, _, ngroup = self.grouper.group_info\n    output = []\n    for i, _ in enumerate(result.columns):\n        res = algorithms.take_1d(result.iloc[:, i].values, ids)\n        if cast:\n            res = self._try_cast(res, obj.iloc[:, i])\n        output.append(res)\n\n    return DataFrame._from_arrays(output, columns=result.columns, index=obj.index)",
                "def _define_paths(self, func, *args, **kwargs):\n    if isinstance(func, str):\n        fast_path = lambda group: getattr(group, func)(*args, **kwargs)\n        slow_path = lambda group: group.apply(\n            lambda x: getattr(x, func)(*args, **kwargs), axis=self.axis\n        )\n    else:\n        fast_path = lambda group: func(group, *args, **kwargs)\n        slow_path = lambda group: group.apply(\n            lambda x: func(x, *args, **kwargs), axis=self.axis\n        )\n    return fast_path, slow_path",
                "def _choose_path(self, fast_path, slow_path, group):\n    path = slow_path\n    res = slow_path(group)\n\n    # if we make it here, test if we can use the fast path\n    try:\n        res_fast = fast_path(group)\n    except Exception:\n        # Hard to know ex-ante what exceptions `fast_path` might raise\n        return path, res\n\n    # verify fast path does not change columns (and names), otherwise\n    # its results cannot be joined with those of the slow path\n    if not isinstance(res_fast, DataFrame):\n        return path, res\n\n    if not res_fast.columns.equals(group.columns):\n        return path, res\n\n    if res_fast.equals(res):\n        path = fast_path\n\n    return path, res",
                "def _transform_item_by_item(self, obj, wrapper):\n    # iterate through columns\n    output = {}\n    inds = []\n    for i, col in enumerate(obj):\n        try:\n            output[col] = self[col].transform(wrapper)\n            inds.append(i)\n        except Exception:\n            pass\n\n    if len(output) == 0:\n        raise TypeError(\"Transform function invalid for data types\")\n\n    columns = obj.columns\n    if len(output) < len(obj.columns):\n        columns = columns.take(inds)\n\n    return DataFrame(output, index=obj.index, columns=columns)",
                "def filter(self, func, dropna=True, *args, **kwargs):\n    \"\"\"\n    Return a copy of a DataFrame excluding elements from groups that\n    do not satisfy the boolean criterion specified by func.\n\n    Parameters\n    ----------\n    f : function\n        Function to apply to each subframe. Should return True or False.\n    dropna : Drop groups that do not pass the filter. True by default;\n        If False, groups that evaluate False are filled with NaNs.\n\n    Returns\n    -------\n    filtered : DataFrame\n\n    Notes\n    -----\n    Each subframe is endowed the attribute 'name' in case you need to know\n    which group you are working on.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n    ...                           'foo', 'bar'],\n    ...                    'B' : [1, 2, 3, 4, 5, 6],\n    ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n    >>> grouped = df.groupby('A')\n    >>> grouped.filter(lambda x: x['B'].mean() > 3.)\n         A  B    C\n    1  bar  2  5.0\n    3  bar  4  1.0\n    5  bar  6  9.0\n    \"\"\"\n\n    indices = []\n\n    obj = self._selected_obj\n    gen = self.grouper.get_iterator(obj, axis=self.axis)\n\n    for name, group in gen:\n        object.__setattr__(group, \"name\", name)\n\n        res = func(group, *args, **kwargs)\n\n        try:\n            res = res.squeeze()\n        except AttributeError:  # allow e.g., scalars and frames to pass\n            pass\n\n        # interpret the result of the filter\n        if is_bool(res) or (is_scalar(res) and isna(res)):\n            if res and notna(res):\n                indices.append(self._get_index(name))\n        else:\n            # non scalars aren't allowed\n            raise TypeError(\n                \"filter function returned a %s, \"\n                \"but expected a scalar bool\" % type(res).__name__\n            )\n\n    return self._apply_filter(indices, dropna)",
                "@property\ndef _selection_name(self):\n    \"\"\"\n    since we are a series, we by definition only have\n    a single name, but may be the result of a selection or\n    the name of our object\n    \"\"\"\n    if self._selection is None:\n        return self.obj.name\n    else:\n        return self._selection",
                "@Appender(\n    _apply_docs[\"template\"].format(\n        input=\"series\", examples=_apply_docs[\"series_examples\"]\n    )\n)\ndef apply(self, func, *args, **kwargs):\n    return super().apply(func, *args, **kwargs)",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func=None, *args, **kwargs):\n    _level = kwargs.pop(\"_level\", None)\n\n    relabeling = func is None\n    columns = None\n    no_arg_message = \"Must provide 'func' or named aggregation **kwargs.\"\n    if relabeling:\n        columns = list(kwargs)\n        if not PY36:\n            # sort for 3.5 and earlier\n            columns = list(sorted(columns))\n\n        func = [kwargs[col] for col in columns]\n        kwargs = {}\n        if not columns:\n            raise TypeError(no_arg_message)\n\n    if isinstance(func, str):\n        return getattr(self, func)(*args, **kwargs)\n\n    if isinstance(func, abc.Iterable):\n        # Catch instances of lists / tuples\n        # but not the class list / tuple itself.\n        func = _maybe_mangle_lambdas(func)\n        ret = self._aggregate_multiple_funcs(func, (_level or 0) + 1)\n        if relabeling:\n            ret.columns = columns\n    else:\n        cyfunc = self._get_cython_func(func)\n        if cyfunc and not args and not kwargs:\n            return getattr(self, cyfunc)()\n\n        if self.grouper.nkeys > 1:\n            return self._python_agg_general(func, *args, **kwargs)\n\n        try:\n            return self._python_agg_general(func, *args, **kwargs)\n        except Exception:\n            result = self._aggregate_named(func, *args, **kwargs)\n\n        index = Index(sorted(result), name=self.grouper.names[0])\n        ret = Series(result, index=index)\n\n    if not self.as_index:  # pragma: no cover\n        print(\"Warning, ignoring as_index=True\")\n\n    # _level handled at higher\n    if not _level and isinstance(ret, dict):\n        from pandas import concat\n\n        ret = concat(ret, axis=1)\n    return ret",
                "def _aggregate_multiple_funcs(self, arg, _level):\n    if isinstance(arg, dict):\n\n        # show the deprecation, but only if we\n        # have not shown a higher level one\n        # GH 15931\n        if isinstance(self._selected_obj, Series) and _level <= 1:\n            msg = dedent(\n                \"\"\"\\\n            using a dict on a Series for aggregation\n            is deprecated and will be removed in a future version. Use \\\n            named aggregation instead.\n\n                >>> grouper.agg(name_1=func_1, name_2=func_2)\n            \"\"\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=3)\n\n        columns = list(arg.keys())\n        arg = arg.items()\n    elif any(isinstance(x, (tuple, list)) for x in arg):\n        arg = [(x, x) if not isinstance(x, (tuple, list)) else x for x in arg]\n\n        # indicated column order\n        columns = next(zip(*arg))\n    else:\n        # list of functions / function names\n        columns = []\n        for f in arg:\n            columns.append(com.get_callable_name(f) or f)\n\n        arg = zip(columns, arg)\n\n    results = OrderedDict()\n    for name, func in arg:\n        obj = self\n        if name in results:\n            raise SpecificationError(\n                \"Function names must be unique, found multiple named \"\n                \"{}\".format(name)\n            )\n\n        # reset the cache so that we\n        # only include the named selection\n        if name in self._selected_obj:\n            obj = copy.copy(obj)\n            obj._reset_cache()\n            obj._selection = name\n        results[name] = obj.aggregate(func)\n\n    if any(isinstance(x, DataFrame) for x in results.values()):\n        # let higher level handle\n        if _level:\n            return results\n\n    return DataFrame(results, columns=columns)",
                "def _wrap_output(self, output, index, names=None):\n    \"\"\" common agg/transform wrapping logic \"\"\"\n    output = output[self._selection_name]\n\n    if names is not None:\n        return DataFrame(output, index=index, columns=names)\n    else:\n        name = self._selection_name\n        if name is None:\n            name = self._selected_obj.name\n        return Series(output, index=index, name=name)",
                "def _wrap_aggregated_output(self, output, names=None):\n    result = self._wrap_output(\n        output=output, index=self.grouper.result_index, names=names\n    )\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _wrap_transformed_output(self, output, names=None):\n    return self._wrap_output(output=output, index=self.obj.index, names=names)",
                "def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n    if len(keys) == 0:\n        # GH #6265\n        return Series([], name=self._selection_name, index=keys)\n\n    def _get_index():\n        if self.grouper.nkeys > 1:\n            index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n        else:\n            index = Index(keys, name=self.grouper.names[0])\n        return index\n\n    if isinstance(values[0], dict):\n        # GH #823 #24880\n        index = _get_index()\n        result = self._reindex_output(DataFrame(values, index=index))\n        # if self.observed is False,\n        # keep all-NaN rows created while re-indexing\n        result = result.stack(dropna=self.observed)\n        result.name = self._selection_name\n        return result\n\n    if isinstance(values[0], Series):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    elif isinstance(values[0], DataFrame):\n        # possible that Series -> DataFrame by applied function\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    else:\n        # GH #6265 #24880\n        result = Series(data=values, index=_get_index(), name=self._selection_name)\n        return self._reindex_output(result)",
                "def _aggregate_named(self, func, *args, **kwargs):\n    result = OrderedDict()\n\n    for name, group in self:\n        group.name = name\n        output = func(group, *args, **kwargs)\n        if isinstance(output, (Series, Index, np.ndarray)):\n            raise ValueError(\"Must produce aggregated value\")\n        result[name] = self._try_cast(output, group)\n\n    return result",
                "@Substitution(klass=\"Series\", selected=\"A.\")\n@Appender(_transform_template)\ndef transform(self, func, *args, **kwargs):\n    func = self._get_cython_func(func) or func\n\n    if isinstance(func, str):\n        if not (func in base.transform_kernel_whitelist):\n            msg = \"'{func}' is not a valid function name for transform(name)\"\n            raise ValueError(msg.format(func=func))\n        if func in base.cythonized_kernels:\n            # cythonized transform or canned \"agg+broadcast\"\n            return getattr(self, func)(*args, **kwargs)\n        else:\n            # If func is a reduction, we need to broadcast the\n            # result to the whole group. Compute func result\n            # and deal with possible broadcasting below.\n            return self._transform_fast(\n                lambda: getattr(self, func)(*args, **kwargs), func\n            )\n\n    # reg transform\n    klass = self._selected_obj.__class__\n    results = []\n    wrapper = lambda x: func(x, *args, **kwargs)\n    for name, group in self:\n        object.__setattr__(group, \"name\", name)\n        res = wrapper(group)\n\n        if isinstance(res, (ABCDataFrame, ABCSeries)):\n            res = res._values\n\n        indexer = self._get_index(name)\n        s = klass(res, indexer)\n        results.append(s)\n\n    # check for empty \"results\" to avoid concat ValueError\n    if results:\n        from pandas.core.reshape.concat import concat\n\n        result = concat(results).sort_index()\n    else:\n        result = Series()\n\n    # we will only try to coerce the result type if\n    # we have a numeric dtype, as these are *always* udfs\n    # the cython take a different path (and casting)\n    dtype = self._selected_obj.dtype\n    if is_numeric_dtype(dtype):\n        result = maybe_downcast_to_dtype(result, dtype)\n\n    result.name = self._selected_obj.name\n    result.index = self._selected_obj.index\n    return result",
                "def _transform_fast(self, func, func_nm):\n    \"\"\"\n    fast version of transform, only applicable to\n    builtin/cythonizable functions\n    \"\"\"\n    if isinstance(func, str):\n        func = getattr(self, func)\n\n    ids, _, ngroup = self.grouper.group_info\n    cast = self._transform_should_cast(func_nm)\n    out = algorithms.take_1d(func()._values, ids)\n    if cast:\n        out = self._try_cast(out, self.obj)\n    return Series(out, index=self.obj.index, name=self.obj.name)",
                "def filter(self, func, dropna=True, *args, **kwargs):  # noqa\n    \"\"\"\n    Return a copy of a Series excluding elements from groups that\n    do not satisfy the boolean criterion specified by func.\n\n    Parameters\n    ----------\n    func : function\n        To apply to each group. Should return True or False.\n    dropna : Drop groups that do not pass the filter. True by default;\n        if False, groups that evaluate False are filled with NaNs.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n    ...                           'foo', 'bar'],\n    ...                    'B' : [1, 2, 3, 4, 5, 6],\n    ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n    >>> grouped = df.groupby('A')\n    >>> df.groupby('A').B.filter(lambda x: x.mean() > 3.)\n    1    2\n    3    4\n    5    6\n    Name: B, dtype: int64\n\n    Returns\n    -------\n    filtered : Series\n    \"\"\"\n    if isinstance(func, str):\n        wrapper = lambda x: getattr(x, func)(*args, **kwargs)\n    else:\n        wrapper = lambda x: func(x, *args, **kwargs)\n\n    # Interpret np.nan as False.\n    def true_and_notna(x, *args, **kwargs):\n        b = wrapper(x, *args, **kwargs)\n        return b and notna(b)\n\n    try:\n        indices = [\n            self._get_index(name) for name, group in self if true_and_notna(group)\n        ]\n    except ValueError:\n        raise TypeError(\"the filter must return a boolean result\")\n    except TypeError:\n        raise TypeError(\"the filter must return a boolean result\")\n\n    filtered = self._apply_filter(indices, dropna)\n    return filtered",
                "def nunique(self, dropna=True):\n    \"\"\"\n    Return number of unique elements in the group.\n\n    Returns\n    -------\n    Series\n        Number of unique values within each group.\n    \"\"\"\n    ids, _, _ = self.grouper.group_info\n\n    val = self.obj._internal_get_values()\n\n    # GH 27951\n    # temporary fix while we wait for NumPy bug 12629 to be fixed\n    val[isna(val)] = np.datetime64(\"NaT\")\n\n    try:\n        sorter = np.lexsort((val, ids))\n    except TypeError:  # catches object dtypes\n        msg = \"val.dtype must be object, got {}\".format(val.dtype)\n        assert val.dtype == object, msg\n        val, _ = algorithms.factorize(val, sort=False)\n        sorter = np.lexsort((val, ids))\n        _isna = lambda a: a == -1\n    else:\n        _isna = isna\n\n    ids, val = ids[sorter], val[sorter]\n\n    # group boundaries are where group ids change\n    # unique observations are where sorted values change\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n    inc = np.r_[1, val[1:] != val[:-1]]\n\n    # 1st item of each group is a new unique observation\n    mask = _isna(val)\n    if dropna:\n        inc[idx] = 1\n        inc[mask] = 0\n    else:\n        inc[mask & np.r_[False, mask[:-1]]] = 0\n        inc[idx] = 1\n\n    out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n    if len(ids):\n        # NaN/NaT group exists if the head of ids is -1,\n        # so remove it from res and exclude its index from idx\n        if ids[0] == -1:\n            res = out[1:]\n            idx = idx[np.flatnonzero(idx)]\n        else:\n            res = out\n    else:\n        res = out[1:]\n    ri = self.grouper.result_index\n\n    # we might have duplications among the bins\n    if len(res) != len(ri):\n        res, out = np.zeros(len(ri), dtype=out.dtype), res\n        res[ids[idx]] = out\n\n    return Series(res, index=ri, name=self._selection_name)",
                "@Appender(Series.describe.__doc__)\ndef describe(self, **kwargs):\n    result = self.apply(lambda x: x.describe(**kwargs))\n    if self.axis == 1:\n        return result.T\n    return result.unstack()",
                "def value_counts(\n    self, normalize=False, sort=True, ascending=False, bins=None, dropna=True\n):\n\n    from pandas.core.reshape.tile import cut\n    from pandas.core.reshape.merge import _get_join_indexers\n\n    if bins is not None and not np.iterable(bins):\n        # scalar bins cannot be done at top level\n        # in a backward compatible way\n        return self.apply(\n            Series.value_counts,\n            normalize=normalize,\n            sort=sort,\n            ascending=ascending,\n            bins=bins,\n        )\n\n    ids, _, _ = self.grouper.group_info\n    val = self.obj._internal_get_values()\n\n    # groupby removes null keys from groupings\n    mask = ids != -1\n    ids, val = ids[mask], val[mask]\n\n    if bins is None:\n        lab, lev = algorithms.factorize(val, sort=True)\n        llab = lambda lab, inc: lab[inc]\n    else:\n\n        # lab is a Categorical with categories an IntervalIndex\n        lab = cut(Series(val), bins, include_lowest=True)\n        lev = lab.cat.categories\n        lab = lev.take(lab.cat.codes)\n        llab = lambda lab, inc: lab[inc]._multiindex.codes[-1]\n\n    if is_interval_dtype(lab):\n        # TODO: should we do this inside II?\n        sorter = np.lexsort((lab.left, lab.right, ids))\n    else:\n        sorter = np.lexsort((lab, ids))\n\n    ids, lab = ids[sorter], lab[sorter]\n\n    # group boundaries are where group ids change\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n\n    # new values are where sorted labels change\n    lchanges = llab(lab, slice(1, None)) != llab(lab, slice(None, -1))\n    inc = np.r_[True, lchanges]\n    inc[idx] = True  # group boundaries are also new values\n    out = np.diff(np.nonzero(np.r_[inc, True])[0])  # value counts\n\n    # num. of times each group should be repeated\n    rep = partial(np.repeat, repeats=np.add.reduceat(inc, idx))\n\n    # multi-index components\n    labels = list(map(rep, self.grouper.recons_labels)) + [llab(lab, inc)]\n    levels = [ping.group_index for ping in self.grouper.groupings] + [lev]\n    names = self.grouper.names + [self._selection_name]\n\n    if dropna:\n        mask = labels[-1] != -1\n        if mask.all():\n            dropna = False\n        else:\n            out, labels = out[mask], [label[mask] for label in labels]\n\n    if normalize:\n        out = out.astype(\"float\")\n        d = np.diff(np.r_[idx, len(ids)])\n        if dropna:\n            m = ids[lab == -1]\n            np.add.at(d, m, -1)\n            acc = rep(d)[mask]\n        else:\n            acc = rep(d)\n        out /= acc\n\n    if sort and bins is None:\n        cat = ids[inc][mask] if dropna else ids[inc]\n        sorter = np.lexsort((out if ascending else -out, cat))\n        out, labels[-1] = out[sorter], labels[-1][sorter]\n\n    if bins is None:\n        mi = MultiIndex(\n            levels=levels, codes=labels, names=names, verify_integrity=False\n        )\n\n        if is_integer_dtype(out):\n            out = ensure_int64(out)\n        return Series(out, index=mi, name=self._selection_name)\n\n    # for compat. with libgroupby.value_counts need to ensure every\n    # bin is present at every index level, null filled with zeros\n    diff = np.zeros(len(out), dtype=\"bool\")\n    for lab in labels[:-1]:\n        diff |= np.r_[True, lab[1:] != lab[:-1]]\n\n    ncat, nbin = diff.sum(), len(levels[-1])\n\n    left = [np.repeat(np.arange(ncat), nbin), np.tile(np.arange(nbin), ncat)]\n\n    right = [diff.cumsum() - 1, labels[-1]]\n\n    _, idx = _get_join_indexers(left, right, sort=False, how=\"left\")\n    out = np.where(idx != -1, out[idx], 0)\n\n    if sort:\n        sorter = np.lexsort((out if ascending else -out, left[0]))\n        out, left[-1] = out[sorter], left[-1][sorter]\n\n    # build the multi-index w/ full levels\n    codes = list(map(lambda lab: np.repeat(lab[diff], nbin), labels[:-1]))\n    codes.append(left[-1])\n\n    mi = MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)\n\n    if is_integer_dtype(out):\n        out = ensure_int64(out)\n    return Series(out, index=mi, name=self._selection_name)",
                "def count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series\n        Count of values within each group.\n    \"\"\"\n    ids, _, ngroups = self.grouper.group_info\n    val = self.obj._internal_get_values()\n\n    mask = (ids != -1) & ~isna(val)\n    ids = ensure_platform_int(ids)\n    minlength = ngroups or 0\n    out = np.bincount(ids[mask], minlength=minlength)\n\n    return Series(\n        out,\n        index=self.grouper.result_index,\n        name=self._selection_name,\n        dtype=\"int64\",\n    )",
                "def _apply_to_column_groupbys(self, func):\n    \"\"\" return a pass thru \"\"\"\n    return func(self)",
                "def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n    \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n    # TODO: Remove this conditional when #23918 is fixed\n    if freq:\n        return self.apply(\n            lambda x: x.pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n        )\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.labels)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n\n    return (filled / shifted) - 1",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"DataFrame\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func=None, *args, **kwargs):\n    return super().aggregate(func, *args, **kwargs)",
                "def _gotitem(self, key, ndim, subset=None):\n    \"\"\"\n    sub-classes to define\n    return a sliced object\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n\n    if ndim == 2:\n        if subset is None:\n            subset = self.obj\n        return DataFrameGroupBy(\n            subset,\n            self.grouper,\n            selection=key,\n            grouper=self.grouper,\n            exclusions=self.exclusions,\n            as_index=self.as_index,\n            observed=self.observed,\n        )\n    elif ndim == 1:\n        if subset is None:\n            subset = self.obj[key]\n        return SeriesGroupBy(\n            subset, selection=key, grouper=self.grouper, observed=self.observed\n        )\n\n    raise AssertionError(\"invalid ndim for _gotitem\")",
                "def _wrap_generic_output(self, result, obj):\n    result_index = self.grouper.levels[0]\n\n    if self.axis == 0:\n        return DataFrame(result, index=obj.columns, columns=result_index).T\n    else:\n        return DataFrame(result, index=obj.index, columns=result_index)",
                "def _get_data_to_aggregate(self):\n    obj = self._obj_with_exclusions\n    if self.axis == 1:\n        return obj.T._data, 1\n    else:\n        return obj._data, 1",
                "def _insert_inaxis_grouper_inplace(self, result):\n    # zip in reverse so we can always insert at loc 0\n    izip = zip(\n        *map(\n            reversed,\n            (\n                self.grouper.names,\n                self.grouper.get_group_levels(),\n                [grp.in_axis for grp in self.grouper.groupings],\n            ),\n        )\n    )\n\n    for name, lev, in_axis in izip:\n        if in_axis:\n            result.insert(0, name, lev)",
                "def _wrap_aggregated_output(self, output, names=None):\n    agg_axis = 0 if self.axis == 1 else 1\n    agg_labels = self._obj_with_exclusions._get_axis(agg_axis)\n\n    output_keys = self._decide_output_index(output, agg_labels)\n\n    if not self.as_index:\n        result = DataFrame(output, columns=output_keys)\n        self._insert_inaxis_grouper_inplace(result)\n        result = result._consolidate()\n    else:\n        index = self.grouper.result_index\n        result = DataFrame(output, index=index, columns=output_keys)\n\n    if self.axis == 1:\n        result = result.T\n\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _wrap_transformed_output(self, output, names=None):\n    return DataFrame(output, index=self.obj.index)",
                "def _wrap_agged_blocks(self, items, blocks):\n    if not self.as_index:\n        index = np.arange(blocks[0].values.shape[-1])\n        mgr = BlockManager(blocks, [items, index])\n        result = DataFrame(mgr)\n\n        self._insert_inaxis_grouper_inplace(result)\n        result = result._consolidate()\n    else:\n        index = self.grouper.result_index\n        mgr = BlockManager(blocks, [items, index])\n        result = DataFrame(mgr)\n\n    if self.axis == 1:\n        result = result.T\n\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _iterate_column_groupbys(self):\n    for i, colname in enumerate(self._selected_obj.columns):\n        yield colname, SeriesGroupBy(\n            self._selected_obj.iloc[:, i],\n            selection=colname,\n            grouper=self.grouper,\n            exclusions=self.exclusions,\n        )",
                "def _apply_to_column_groupbys(self, func):\n    from pandas.core.reshape.concat import concat\n\n    return concat(\n        (func(col_groupby) for _, col_groupby in self._iterate_column_groupbys()),\n        keys=self._selected_obj.columns,\n        axis=1,\n    )",
                "def count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    DataFrame\n        Count of values within each group.\n    \"\"\"\n    data, _ = self._get_data_to_aggregate()\n    ids, _, ngroups = self.grouper.group_info\n    mask = ids != -1\n\n    val = (\n        (mask & ~_isna_ndarraylike(np.atleast_2d(blk.get_values())))\n        for blk in data.blocks\n    )\n    loc = (blk.mgr_locs for blk in data.blocks)\n\n    counter = partial(lib.count_level_2d, labels=ids, max_bin=ngroups, axis=1)\n    blk = map(make_block, map(counter, val), loc)\n\n    return self._wrap_agged_blocks(data.items, list(blk))",
                "def nunique(self, dropna=True):\n    \"\"\"\n    Return DataFrame with number of distinct observations per group for\n    each column.\n\n    .. versionadded:: 0.20.0\n\n    Parameters\n    ----------\n    dropna : boolean, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    nunique: DataFrame\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'id': ['spam', 'egg', 'egg', 'spam',\n    ...                           'ham', 'ham'],\n    ...                    'value1': [1, 5, 5, 2, 5, 5],\n    ...                    'value2': list('abbaxy')})\n    >>> df\n         id  value1 value2\n    0  spam       1      a\n    1   egg       5      b\n    2   egg       5      b\n    3  spam       2      a\n    4   ham       5      x\n    5   ham       5      y\n\n    >>> df.groupby('id').nunique()\n        id  value1  value2\n    id\n    egg    1       1       1\n    ham    1       1       2\n    spam   1       2       1\n\n    Check for rows with the same id but conflicting values:\n\n    >>> df.groupby('id').filter(lambda g: (g.nunique() > 1).any())\n         id  value1 value2\n    0  spam       1      a\n    3  spam       2      a\n    4   ham       5      x\n    5   ham       5      y\n    \"\"\"\n\n    obj = self._selected_obj\n\n    def groupby_series(obj, col=None):\n        return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(\n            dropna=dropna\n        )\n\n    if isinstance(obj, Series):\n        results = groupby_series(obj)\n    else:\n        from pandas.core.reshape.concat import concat\n\n        results = [groupby_series(obj[col], col) for col in obj.columns]\n        results = concat(results, axis=1)\n        results.columns.names = obj.columns.names\n\n    if not self.as_index:\n        results.index = ibase.default_index(len(results))\n    return results",
                "def first_not_none(values):\n    try:\n        return next(com.not_none(*values))\n    except StopIteration:\n        return None",
                "def _get_index():\n    if self.grouper.nkeys > 1:\n        index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n    else:\n        index = Index(keys, name=self.grouper.names[0])\n    return index",
                "def true_and_notna(x, *args, **kwargs):\n    b = wrapper(x, *args, **kwargs)\n    return b and notna(b)",
                "def groupby_series(obj, col=None):\n    return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(\n        dropna=dropna\n    )"
            ],
            "inscope_function_signatures": [
                "generate_property(name: str, klass: Type[FrameOrSeries])",
                "pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[str])",
                "_is_multi_agg_with_relabel(**kwargs)",
                "_normalize_keyword_aggregation(kwargs)",
                "_make_unique(seq)",
                "_managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]",
                "_maybe_mangle_lambdas(agg_spec: Any) -> Any",
                "_recast_datetimelike_result(result: DataFrame) -> DataFrame",
                "prop(self)",
                "pinner(cls)",
                "_iterate_slices(self)",
                "_cython_agg_general(self, how, alt=None, numeric_only=True, min_count=-1)",
                "_cython_agg_blocks(self, how, alt=None, numeric_only=True, min_count=-1)",
                "aggregate(self, func, *args, **kwargs)",
                "_aggregate_generic(self, func, *args, **kwargs)",
                "_wrap_aggregated_output(self, output, names=None)",
                "_aggregate_item_by_item(self, func, *args, **kwargs)",
                "_decide_output_index(self, output, labels)",
                "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                "_transform_general(self, func, *args, **kwargs)",
                "transform(self, func, *args, **kwargs)",
                "_transform_fast(self, result, obj, func_nm)",
                "_define_paths(self, func, *args, **kwargs)",
                "_choose_path(self, fast_path, slow_path, group)",
                "_transform_item_by_item(self, obj, wrapper)",
                "filter(self, func, dropna=True, *args, **kwargs)",
                "_selection_name(self)",
                "apply(self, func, *args, **kwargs)",
                "aggregate(self, func=None, *args, **kwargs)",
                "_aggregate_multiple_funcs(self, arg, _level)",
                "_wrap_output(self, output, index, names=None)",
                "_wrap_aggregated_output(self, output, names=None)",
                "_wrap_transformed_output(self, output, names=None)",
                "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                "_aggregate_named(self, func, *args, **kwargs)",
                "transform(self, func, *args, **kwargs)",
                "_transform_fast(self, func, func_nm)",
                "filter(self, func, dropna=True, *args, **kwargs)",
                "nunique(self, dropna=True)",
                "describe(self, **kwargs)",
                "value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True)",
                "count(self)",
                "_apply_to_column_groupbys(self, func)",
                "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None)",
                "aggregate(self, func=None, *args, **kwargs)",
                "_gotitem(self, key, ndim, subset=None)",
                "_wrap_generic_output(self, result, obj)",
                "_get_data_to_aggregate(self)",
                "_insert_inaxis_grouper_inplace(self, result)",
                "_wrap_aggregated_output(self, output, names=None)",
                "_wrap_transformed_output(self, output, names=None)",
                "_wrap_agged_blocks(self, items, blocks)",
                "_iterate_column_groupbys(self)",
                "_apply_to_column_groupbys(self, func)",
                "count(self)",
                "nunique(self, dropna=True)",
                "first_not_none(values)",
                "_get_index()",
                "true_and_notna(x, *args, **kwargs)",
                "groupby_series(obj, col=None)"
            ],
            "variables_in_file": {
                "NamedAgg": [
                    64
                ],
                "namedtuple": [
                    64
                ],
                "AggScalar": [
                    66
                ],
                "Union": [
                    66
                ],
                "str": [
                    96,
                    66,
                    866,
                    1124,
                    646,
                    1031,
                    73,
                    1803,
                    337,
                    598,
                    1085
                ],
                "Callable": [
                    66
                ],
                "Any": [
                    1817,
                    66,
                    1850
                ],
                "ScalarResult": [
                    70
                ],
                "typing.TypeVar": [
                    70
                ],
                "typing": [
                    70
                ],
                "Type": [
                    96,
                    73
                ],
                "FrameOrSeries": [
                    96,
                    73
                ],
                "self._make_wrapper": [
                    88
                ],
                "self": [
                    514,
                    1029,
                    1541,
                    1542,
                    520,
                    1543,
                    1037,
                    1529,
                    1553,
                    1042,
                    1043,
                    1554,
                    1556,
                    1022,
                    535,
                    1047,
                    1558,
                    1050,
                    1560,
                    1563,
                    541,
                    542,
                    543,
                    1566,
                    1057,
                    1569,
                    1572,
                    1575,
                    552,
                    554,
                    1580,
                    1583,
                    1072,
                    1587,
                    1076,
                    1077,
                    1590,
                    1593,
                    1595,
                    1597,
                    1086,
                    1598,
                    1088,
                    1089,
                    1092,
                    1093,
                    1605,
                    1606,
                    585,
                    586,
                    587,
                    589,
                    1619,
                    596,
                    1620,
                    88,
                    604,
                    1632,
                    609,
                    611,
                    615,
                    617,
                    621,
                    623,
                    1136,
                    631,
                    1143,
                    635,
                    640,
                    1155,
                    1157,
                    134,
                    136,
                    137,
                    649,
                    139,
                    140,
                    142,
                    143,
                    654,
                    146,
                    1682,
                    1685,
                    151,
                    154,
                    162,
                    1698,
                    176,
                    688,
                    1201,
                    1208,
                    1212,
                    1213,
                    191,
                    192,
                    194,
                    1227,
                    1235,
                    1236,
                    739,
                    740,
                    755,
                    1274,
                    251,
                    763,
                    1275,
                    1276,
                    258,
                    259,
                    261,
                    777,
                    266,
                    267,
                    778,
                    780,
                    270,
                    273,
                    276,
                    277,
                    1308,
                    291,
                    294,
                    295,
                    300,
                    301,
                    303,
                    305,
                    307,
                    308,
                    313,
                    1337,
                    316,
                    321,
                    1348,
                    1349,
                    327,
                    330,
                    334,
                    1358,
                    1359,
                    1365,
                    1371,
                    1376,
                    1377,
                    867,
                    873,
                    877,
                    879,
                    881,
                    882,
                    885,
                    887,
                    377,
                    889,
                    892,
                    393,
                    394,
                    395,
                    396,
                    910,
                    399,
                    414,
                    939,
                    431,
                    948,
                    438,
                    449,
                    963,
                    968,
                    970,
                    462,
                    974,
                    975,
                    465,
                    977,
                    980,
                    985,
                    988,
                    989,
                    1501,
                    991,
                    1504,
                    1506,
                    1507,
                    1508,
                    997,
                    1509,
                    1000,
                    1001,
                    1513,
                    1515,
                    1005,
                    1008,
                    1521,
                    498,
                    1011,
                    1012,
                    1523,
                    1017,
                    1530,
                    510
                ],
                "name": [
                    1548,
                    1550,
                    1050,
                    1051,
                    1057,
                    546,
                    547,
                    938,
                    300,
                    301,
                    940,
                    943,
                    305,
                    307,
                    308,
                    948,
                    311,
                    951,
                    441,
                    952,
                    968,
                    969,
                    970,
                    971,
                    88,
                    90,
                    92,
                    742,
                    743,
                    1769,
                    1136,
                    755,
                    118,
                    119,
                    1017,
                    1018,
                    124,
                    125,
                    1022
                ],
                "parent_method": [
                    90,
                    91
                ],
                "getattr": [
                    1376,
                    609,
                    867,
                    1125,
                    647,
                    649,
                    1037,
                    879,
                    1043,
                    90,
                    604,
                    1086
                ],
                "klass": [
                    90,
                    124,
                    1058,
                    1047
                ],
                "prop.__doc__": [
                    91
                ],
                "prop": [
                    92,
                    93,
                    91,
                    124,
                    125
                ],
                "parent_method.__doc__": [
                    91
                ],
                "prop.__name__": [
                    92
                ],
                "property": [
                    770,
                    93
                ],
                "FrozenSet": [
                    96
                ],
                "whitelist": [
                    118
                ],
                "hasattr": [
                    119
                ],
                "cls": [
                    127,
                    125,
                    119
                ],
                "generate_property": [
                    124
                ],
                "setattr": [
                    125
                ],
                "pinner": [
                    129
                ],
                "GroupBy": [
                    132,
                    767
                ],
                "self.axis": [
                    134,
                    649,
                    267,
                    654,
                    1553,
                    1566,
                    542,
                    294,
                    431,
                    1587,
                    1213,
                    194,
                    585,
                    586,
                    587,
                    465,
                    740,
                    498,
                    1523,
                    1530
                ],
                "self._selection": [
                    136,
                    777,
                    780
                ],
                "slice_axis": [
                    137,
                    145,
                    139,
                    142
                ],
                "self.obj.columns": [
                    137
                ],
                "self.obj": [
                    1092,
                    1093,
                    1157,
                    1349,
                    1572,
                    137,
                    778,
                    1513,
                    140,
                    142,
                    143,
                    980,
                    1236,
                    1501,
                    191
                ],
                "self._selection_list": [
                    139
                ],
                "slicer": [
                    148,
                    140,
                    143
                ],
                "x": [
                    194,
                    1125,
                    423,
                    424,
                    649,
                    1127,
                    1131,
                    140,
                    525,
                    654,
                    432,
                    1212,
                    310,
                    1372,
                    1049,
                    954,
                    924,
                    925
                ],
                "self.obj.index": [
                    1572,
                    980,
                    1093,
                    142
                ],
                "self.obj.xs": [
                    143
                ],
                "val": [
                    1157,
                    1161,
                    1164,
                    1166,
                    1167,
                    1168,
                    145,
                    146,
                    1169,
                    148,
                    1174,
                    1179,
                    1182,
                    1349,
                    1351,
                    1236,
                    1623,
                    1240,
                    1243,
                    1630,
                    1248
                ],
                "self.exclusions": [
                    146,
                    1507,
                    1598
                ],
                "new_items": [
                    215,
                    168,
                    235,
                    206,
                    214,
                    151,
                    154
                ],
                "new_blocks": [
                    230,
                    167,
                    235,
                    207,
                    209,
                    151,
                    154
                ],
                "self._cython_agg_blocks": [
                    151
                ],
                "how": [
                    152,
                    177,
                    251,
                    252
                ],
                "alt": [
                    152,
                    194,
                    184
                ],
                "numeric_only": [
                    152,
                    164
                ],
                "min_count": [
                    152,
                    177
                ],
                "self._wrap_agged_blocks": [
                    1632,
                    154
                ],
                "_block_agg_axis": [
                    1388,
                    156
                ],
                "data": [
                    162,
                    165,
                    171,
                    300,
                    301,
                    307,
                    308,
                    311,
                    191,
                    326,
                    327,
                    334,
                    1619,
                    215,
                    1625,
                    1627,
                    224,
                    225,
                    1632
                ],
                "agg_axis": [
                    177,
                    162,
                    1554,
                    1553
                ],
                "self._get_data_to_aggregate": [
                    162,
                    1619
                ],
                "data.get_numeric_data": [
                    165
                ],
                "deleted_items": [
                    198,
                    169,
                    217,
                    187,
                    223
                ],
                "no_result": [
                    201,
                    170,
                    173
                ],
                "object": [
                    547,
                    743,
                    170,
                    1167,
                    1051
                ],
                "block": [
                    171,
                    204,
                    203,
                    174,
                    177
                ],
                "data.blocks": [
                    1625,
                    1627,
                    171
                ],
                "result": [
                    1024,
                    516,
                    518,
                    520,
                    1550,
                    1559,
                    1560,
                    1561,
                    1564,
                    1567,
                    1569,
                    1065,
                    1578,
                    1067,
                    1580,
                    1581,
                    1585,
                    1074,
                    1076,
                    1077,
                    1078,
                    1588,
                    1590,
                    609,
                    614,
                    620,
                    623,
                    637,
                    638,
                    643,
                    173,
                    176,
                    1212,
                    1214,
                    1215,
                    194,
                    201,
                    203,
                    204,
                    251,
                    253,
                    255,
                    261,
                    266,
                    270,
                    272,
                    273,
                    277,
                    278,
                    283,
                    284,
                    286,
                    297,
                    301,
                    308,
                    311,
                    313,
                    322,
                    332,
                    334,
                    356,
                    887,
                    889,
                    890,
                    1913,
                    1916,
                    1922,
                    1925,
                    1926,
                    974,
                    977,
                    503,
                    997,
                    486,
                    1000,
                    1001,
                    1002,
                    494,
                    1011,
                    500,
                    1012,
                    1524,
                    1015,
                    1526,
                    1022
                ],
                "locs": [
                    198,
                    206,
                    174,
                    187,
                    191
                ],
                "block.mgr_locs.as_array": [
                    174
                ],
                "block.mgr_locs": [
                    174
                ],
                "_": [
                    1088,
                    1155,
                    1348,
                    1605,
                    1322,
                    176,
                    1168,
                    1235,
                    1619,
                    1620,
                    635,
                    637
                ],
                "self.grouper.aggregate": [
                    176
                ],
                "self.grouper": [
                    258,
                    1155,
                    1541,
                    1542,
                    1543,
                    394,
                    395,
                    396,
                    399,
                    1275,
                    1685,
                    1563,
                    542,
                    291,
                    1583,
                    176,
                    1201,
                    1597,
                    192,
                    1088,
                    1348,
                    327,
                    1358,
                    975,
                    1235,
                    1620,
                    988,
                    989,
                    991,
                    1504,
                    1377,
                    1506,
                    740,
                    377,
                    1515,
                    881,
                    1521,
                    889,
                    1274,
                    635,
                    1276
                ],
                "block.values": [
                    177
                ],
                "NotImplementedError": [
                    179
                ],
                "deleted_items.append": [
                    187,
                    198
                ],
                "obj": [
                    640,
                    643,
                    1682,
                    1685,
                    1689,
                    1690,
                    541,
                    542,
                    1694,
                    1696,
                    295,
                    298,
                    554,
                    939,
                    686,
                    307,
                    949,
                    950,
                    951,
                    568,
                    313,
                    696,
                    697,
                    700,
                    952,
                    191,
                    192,
                    321,
                    325,
                    326,
                    585,
                    348,
                    739,
                    740,
                    617,
                    620,
                    623,
                    1524,
                    1526,
                    1529,
                    1531,
                    1533
                ],
                "data.items": [
                    1632,
                    215,
                    191
                ],
                "s": [
                    192,
                    194,
                    1059,
                    1058
                ],
                "groupby": [
                    192
                ],
                "s.aggregate": [
                    194
                ],
                "TypeError": [
                    864,
                    195,
                    553,
                    365,
                    1165,
                    1139,
                    1140,
                    1141,
                    694,
                    343,
                    758,
                    247
                ],
                "maybe_downcast_numeric": [
                    203
                ],
                "block.dtype": [
                    203
                ],
                "newb": [
                    204,
                    207
                ],
                "block.make_block": [
                    204
                ],
                "new_items.append": [
                    206
                ],
                "new_blocks.append": [
                    207
                ],
                "len": [
                    1287,
                    395,
                    400,
                    278,
                    1312,
                    1699,
                    1316,
                    1191,
                    1835,
                    433,
                    1204,
                    693,
                    1205,
                    569,
                    697,
                    574,
                    1727,
                    209,
                    983,
                    217,
                    475,
                    224,
                    225,
                    353,
                    231,
                    359,
                    374,
                    1916
                ],
                "DataError": [
                    210
                ],
                "indexer": [
                    1057,
                    1058,
                    227,
                    232,
                    405,
                    214,
                    215,
                    408
                ],
                "np.concatenate": [
                    574,
                    214,
                    223
                ],
                "np": [
                    1287,
                    1161,
                    1290,
                    1164,
                    1169,
                    1298,
                    278,
                    1178,
                    1179,
                    1312,
                    1314,
                    1187,
                    1190,
                    1318,
                    1576,
                    1323,
                    1196,
                    429,
                    1326,
                    1330,
                    1205,
                    566,
                    574,
                    1224,
                    1354,
                    214,
                    215,
                    1624,
                    223,
                    224,
                    225,
                    485,
                    1255,
                    1257,
                    1262,
                    1266,
                    1268,
                    502,
                    1271,
                    1020
                ],
                "data.items.take": [
                    215
                ],
                "np.sort": [
                    215
                ],
                "deleted": [
                    226,
                    223
                ],
                "ai": [
                    224,
                    227
                ],
                "np.arange": [
                    224,
                    1318,
                    1576,
                    278
                ],
                "mask": [
                    1280,
                    225,
                    226,
                    227,
                    1185,
                    1187,
                    1283,
                    1351,
                    1354,
                    1291,
                    1624,
                    1297,
                    1621,
                    1239,
                    1240,
                    1182,
                    1279
                ],
                "np.zeros": [
                    1312,
                    225,
                    1205
                ],
                "mask.cumsum": [
                    227
                ],
                "offset": [
                    232,
                    233,
                    229
                ],
                "b": [
                    230,
                    231,
                    232,
                    1131,
                    1132
                ],
                "loc": [
                    231,
                    232,
                    233,
                    1627,
                    1630
                ],
                "b.mgr_locs": [
                    232,
                    231
                ],
                "_level": [
                    896,
                    873,
                    267,
                    238,
                    910,
                    850,
                    251,
                    956
                ],
                "kwargs.pop": [
                    850,
                    238
                ],
                "kwargs": [
                    259,
                    260,
                    261,
                    647,
                    1019,
                    649,
                    652,
                    1037,
                    654,
                    1043,
                    1049,
                    543,
                    301,
                    303,
                    308,
                    310,
                    1212,
                    1727,
                    839,
                    1481,
                    332,
                    850,
                    856,
                    604,
                    861,
                    862,
                    1756,
                    609,
                    611,
                    867,
                    1125,
                    615,
                    1127,
                    745,
                    1767,
                    1131,
                    621,
                    238,
                    878,
                    240,
                    242,
                    882,
                    244,
                    885,
                    887,
                    251
                ],
                "relabeling": [
                    874,
                    240,
                    241,
                    852,
                    855,
                    280
                ],
                "func": [
                    259,
                    261,
                    646,
                    647,
                    1019,
                    649,
                    1029,
                    267,
                    652,
                    1031,
                    270,
                    654,
                    1032,
                    1034,
                    1035,
                    1037,
                    1043,
                    1049,
                    543,
                    938,
                    301,
                    303,
                    308,
                    310,
                    952,
                    1085,
                    1086,
                    1090,
                    1605,
                    839,
                    1481,
                    330,
                    332,
                    596,
                    852,
                    598,
                    599,
                    1365,
                    601,
                    602,
                    604,
                    861,
                    609,
                    866,
                    611,
                    867,
                    869,
                    1124,
                    615,
                    872,
                    745,
                    873,
                    1125,
                    1127,
                    621,
                    877,
                    623,
                    240,
                    242,
                    882,
                    245,
                    885,
                    887,
                    249,
                    251
                ],
                "_is_multi_agg_with_relabel": [
                    240
                ],
                "columns": [
                    922,
                    284,
                    928,
                    931,
                    933,
                    935,
                    696,
                    698,
                    700,
                    959,
                    853,
                    856,
                    859,
                    861,
                    863,
                    1767,
                    1769,
                    875,
                    242,
                    1791
                ],
                "order": [
                    1766,
                    1774,
                    1777,
                    242,
                    283
                ],
                "_normalize_keyword_aggregation": [
                    242
                ],
                "_maybe_mangle_lambdas": [
                    872,
                    249
                ],
                "self._aggregate": [
                    251
                ],
                "args": [
                    259,
                    260,
                    261,
                    647,
                    1019,
                    649,
                    652,
                    1037,
                    654,
                    1043,
                    1049,
                    543,
                    301,
                    303,
                    308,
                    310,
                    839,
                    1481,
                    332,
                    604,
                    609,
                    611,
                    867,
                    1125,
                    615,
                    1127,
                    745,
                    1131,
                    621,
                    878,
                    882,
                    885,
                    887,
                    251
                ],
                "self.grouper.nkeys": [
                    881,
                    258,
                    291,
                    988
                ],
                "self._python_agg_general": [
                    882,
                    259,
                    885
                ],
                "self._aggregate_generic": [
                    261,
                    270
                ],
                "self._aggregate_multiple_funcs": [
                    873,
                    266
                ],
                "Exception": [
                    269,
                    302,
                    690,
                    309,
                    886,
                    665
                ],
                "result.columns": [
                    643,
                    1916,
                    620,
                    272,
                    273,
                    500,
                    284,
                    637
                ],
                "Index": [
                    429,
                    272,
                    404,
                    889,
                    411,
                    1020,
                    1790,
                    991
                ],
                "result.columns.levels": [
                    273
                ],
                "self._selected_obj.columns.name": [
                    273
                ],
                "self._selected_obj.columns": [
                    273,
                    1606,
                    1593
                ],
                "self._selected_obj": [
                    514,
                    739,
                    1606,
                    970,
                    910,
                    431,
                    1072,
                    273,
                    1682,
                    948,
                    1076,
                    1077,
                    1047,
                    1593,
                    1595
                ],
                "self.as_index": [
                    1698,
                    1508,
                    1575,
                    276,
                    1558,
                    892,
                    414
                ],
                "self._insert_inaxis_grouper_inplace": [
                    1560,
                    1580,
                    277
                ],
                "result.index": [
                    1077,
                    278
                ],
                "result.iloc": [
                    1922,
                    283,
                    1925,
                    638
                ],
                "result._convert": [
                    286,
                    518
                ],
                "agg": [
                    288,
                    1483,
                    902
                ],
                "aggregate": [
                    288,
                    1481,
                    1483,
                    902
                ],
                "AssertionError": [
                    292,
                    1518
                ],
                "axis": [
                    298,
                    294,
                    311
                ],
                "self._obj_with_exclusions": [
                    321,
                    295,
                    617,
                    1554,
                    1529,
                    541
                ],
                "OrderedDict": [
                    322,
                    1765,
                    297,
                    937,
                    1015,
                    1756
                ],
                "obj._info_axis_number": [
                    298
                ],
                "self._try_cast": [
                    640,
                    1092,
                    301,
                    334,
                    308,
                    1022
                ],
                "self._aggregate_item_by_item": [
                    303
                ],
                "self.indices": [
                    305
                ],
                "self.get_group": [
                    307
                ],
                "wrapper": [
                    1125,
                    1127,
                    1131,
                    688,
                    310,
                    311,
                    1049,
                    1052
                ],
                "data.apply": [
                    311
                ],
                "self._wrap_generic_output": [
                    313
                ],
                "AbstractMethodError": [
                    316
                ],
                "cannot_agg": [
                    323,
                    341,
                    344,
                    349,
                    350
                ],
                "errors": [
                    345,
                    354,
                    324,
                    353
                ],
                "item": [
                    325,
                    326,
                    327,
                    332,
                    334,
                    341,
                    344
                ],
                "colg": [
                    332,
                    327
                ],
                "SeriesGroupBy": [
                    1514,
                    1594,
                    1685,
                    327
                ],
                "cast": [
                    1089,
                    1091,
                    330,
                    333,
                    631,
                    639
                ],
                "self._transform_should_cast": [
                    1089,
                    330,
                    631
                ],
                "colg.aggregate": [
                    332
                ],
                "ValueError": [
                    1034,
                    555,
                    557,
                    336,
                    1138,
                    601,
                    507,
                    1021
                ],
                "err": [
                    337
                ],
                "cannot_agg.append": [
                    344,
                    341
                ],
                "e": [
                    345
                ],
                "result_columns": [
                    356,
                    353,
                    348,
                    350
                ],
                "obj.columns": [
                    1696,
                    585,
                    620,
                    1524,
                    696,
                    697,
                    348,
                    1694
                ],
                "result_columns.drop": [
                    350
                ],
                "DataFrame": [
                    643,
                    391,
                    392,
                    1559,
                    1564,
                    671,
                    420,
                    1572,
                    1578,
                    1585,
                    954,
                    700,
                    573,
                    959,
                    966,
                    375,
                    356,
                    997,
                    486,
                    614,
                    1383,
                    1895,
                    1006,
                    1524,
                    1526,
                    503
                ],
                "output": [
                    636,
                    641,
                    643,
                    1556,
                    1559,
                    1564,
                    1572,
                    684,
                    688,
                    693,
                    697,
                    700,
                    963,
                    966,
                    971,
                    975,
                    980,
                    359,
                    362,
                    1019,
                    1020,
                    1022
                ],
                "labels": [
                    1313,
                    1283,
                    359,
                    360,
                    1320,
                    368,
                    369,
                    1330,
                    1299,
                    1303,
                    1274,
                    1279
                ],
                "output_keys": [
                    360,
                    362,
                    364,
                    369,
                    371,
                    1556,
                    1559,
                    1564
                ],
                "sorted": [
                    889,
                    362,
                    859,
                    1756
                ],
                "output_keys.sort": [
                    364
                ],
                "isinstance": [
                    896,
                    646,
                    1031,
                    392,
                    905,
                    525,
                    910,
                    1689,
                    924,
                    925,
                    1054,
                    671,
                    421,
                    429,
                    430,
                    561,
                    954,
                    1085,
                    1727,
                    598,
                    481,
                    866,
                    483,
                    994,
                    869,
                    614,
                    1124,
                    1004,
                    1006,
                    368,
                    1020
                ],
                "MultiIndex": [
                    481,
                    483,
                    368,
                    369,
                    1333,
                    1302,
                    989
                ],
                "MultiIndex.from_tuples": [
                    369,
                    989
                ],
                "labels.names": [
                    369
                ],
                "keys": [
                    450,
                    535,
                    393,
                    1005,
                    462,
                    400,
                    1008,
                    983,
                    404,
                    374,
                    375,
                    441,
                    411,
                    985,
                    989,
                    991
                ],
                "key_names": [
                    377,
                    402,
                    411
                ],
                "self.grouper.names": [
                    1541,
                    377,
                    1276,
                    989,
                    889,
                    991
                ],
                "next": [
                    928,
                    382
                ],
                "com.not_none": [
                    382
                ],
                "com": [
                    933,
                    1774,
                    1841,
                    1783,
                    382
                ],
                "values": [
                    386,
                    382,
                    1922,
                    393,
                    638,
                    525,
                    529,
                    535,
                    408,
                    418,
                    422,
                    424,
                    1576,
                    427,
                    432,
                    433,
                    441,
                    450,
                    458,
                    462,
                    474,
                    994,
                    485,
                    997,
                    1004,
                    1005,
                    1006,
                    495,
                    1008,
                    1011,
                    502,
                    510
                ],
                "StopIteration": [
                    383
                ],
                "v": [
                    481,
                    418,
                    386,
                    419,
                    388,
                    421,
                    423,
                    392,
                    485,
                    427,
                    429,
                    430,
                    468,
                    502,
                    504,
                    474,
                    1727
                ],
                "first_not_none": [
                    418,
                    386
                ],
                "self._concat_objects": [
                    449,
                    393,
                    1005,
                    462,
                    1008,
                    535
                ],
                "not_indexed_same": [
                    450,
                    393,
                    1005,
                    1008,
                    535
                ],
                "self.grouper.groupings": [
                    1543,
                    394,
                    395,
                    399,
                    1275
                ],
                "key_index": [
                    482,
                    483,
                    487,
                    396,
                    496,
                    401,
                    402,
                    497,
                    529,
                    405,
                    504,
                    411,
                    510,
                    415
                ],
                "self.grouper.result_index": [
                    396,
                    1358,
                    975,
                    1583,
                    1201,
                    1563
                ],
                "ping": [
                    400,
                    401,
                    1275,
                    399
                ],
                "ping.ngroups": [
                    400
                ],
                "ping.group_index": [
                    401,
                    1275
                ],
                "key_index.name": [
                    402
                ],
                "key_lookup": [
                    404,
                    405
                ],
                "key_lookup.get_indexer": [
                    405
                ],
                "i": [
                    640,
                    1803,
                    686,
                    1806,
                    1838,
                    689,
                    1843,
                    1844,
                    408,
                    1593,
                    1595,
                    637,
                    638
                ],
                "NDFrame": [
                    421
                ],
                "v._constructor": [
                    423
                ],
                "v._construct_axes_dict": [
                    423
                ],
                "np.ndarray": [
                    1020,
                    429
                ],
                "Series": [
                    910,
                    766,
                    529,
                    1689,
                    1308,
                    1067,
                    429,
                    430,
                    561,
                    1208,
                    1337,
                    1210,
                    1093,
                    971,
                    1228,
                    1356,
                    985,
                    1248,
                    1004,
                    1011,
                    890,
                    1020,
                    510
                ],
                "applied_index": [
                    433,
                    431
                ],
                "self._selected_obj._get_axis": [
                    431
                ],
                "all_indexed_same": [
                    432,
                    460,
                    455
                ],
                "_all_indexes_same": [
                    432
                ],
                "x.index": [
                    432
                ],
                "singular_series": [
                    440,
                    433
                ],
                "applied_index.nlevels": [
                    433
                ],
                "self.squeeze": [
                    438
                ],
                "concat": [
                    899,
                    1604,
                    1065,
                    458,
                    587,
                    494,
                    569,
                    1695
                ],
                "index": [
                    1563,
                    1564,
                    1576,
                    1577,
                    1583,
                    1584,
                    966,
                    971,
                    468,
                    469,
                    476,
                    989,
                    991,
                    992,
                    996,
                    997,
                    487,
                    500,
                    889,
                    890
                ],
                "v.index.copy": [
                    468
                ],
                "v.index": [
                    504,
                    481,
                    468
                ],
                "index.name": [
                    476,
                    469
                ],
                "names": [
                    965,
                    966,
                    975,
                    980,
                    1276,
                    1333,
                    1303,
                    474,
                    475,
                    476
                ],
                "v.name": [
                    474
                ],
                "list": [
                    1632,
                    1767,
                    476,
                    1274,
                    1330,
                    856,
                    922,
                    859,
                    924,
                    925
                ],
                "stacked_values": [
                    504,
                    485,
                    502,
                    487
                ],
                "np.vstack": [
                    485,
                    502
                ],
                "np.asarray": [
                    485,
                    502
                ],
                "unstack": [
                    494
                ],
                "key_index.names": [
                    497
                ],
                "stacked_values.T": [
                    504
                ],
                "AttributeError": [
                    507,
                    749
                ],
                "self._selection_name": [
                    963,
                    1337,
                    968,
                    1001,
                    1359,
                    1011,
                    1308,
                    1208,
                    985,
                    1276,
                    510
                ],
                "so": [
                    514,
                    515
                ],
                "so.ndim": [
                    515
                ],
                "any": [
                    954,
                    515,
                    924,
                    525
                ],
                "so.dtypes.apply": [
                    515
                ],
                "so.dtypes": [
                    515
                ],
                "is_datetimelike": [
                    515
                ],
                "_recast_datetimelike_result": [
                    516
                ],
                "self._reindex_output": [
                    1569,
                    997,
                    520,
                    977,
                    1012,
                    1590
                ],
                "coerce": [
                    530,
                    525
                ],
                "Timestamp": [
                    525
                ],
                "_convert": [
                    529,
                    977,
                    1590,
                    1569
                ],
                "applied": [
                    587,
                    540,
                    581,
                    583
                ],
                "gen": [
                    546,
                    740,
                    542,
                    742
                ],
                "self.grouper.get_iterator": [
                    740,
                    542
                ],
                "fast_path": [
                    678,
                    647,
                    552,
                    554,
                    652,
                    656,
                    664,
                    543
                ],
                "slow_path": [
                    552,
                    648,
                    653,
                    656,
                    659,
                    660,
                    543
                ],
                "self._define_paths": [
                    543
                ],
                "path": [
                    672,
                    545,
                    675,
                    549,
                    678,
                    552,
                    680,
                    559,
                    659,
                    667
                ],
                "group": [
                    647,
                    648,
                    652,
                    653,
                    660,
                    664,
                    1050,
                    1051,
                    1052,
                    546,
                    547,
                    674,
                    552,
                    559,
                    566,
                    569,
                    570,
                    571,
                    574,
                    575,
                    577,
                    578,
                    742,
                    743,
                    745,
                    1136,
                    1017,
                    1018,
                    1019,
                    1022
                ],
                "object.__setattr__": [
                    1051,
                    547,
                    743
                ],
                "res": [
                    640,
                    641,
                    660,
                    667,
                    1052,
                    1054,
                    1055,
                    672,
                    1058,
                    675,
                    677,
                    552,
                    680,
                    1195,
                    1198,
                    559,
                    1200,
                    561,
                    1204,
                    1205,
                    1206,
                    568,
                    569,
                    1208,
                    574,
                    583,
                    745,
                    748,
                    753,
                    754,
                    760,
                    638
                ],
                "self._choose_path": [
                    552
                ],
                "self._transform_item_by_item": [
                    554
                ],
                "msg": [
                    1033,
                    1034,
                    556,
                    557,
                    1166,
                    911,
                    1167,
                    920,
                    600,
                    601
                ],
                "np.prod": [
                    566
                ],
                "group.shape": [
                    566,
                    575
                ],
                "res.index.is_": [
                    568
                ],
                "res.index": [
                    568
                ],
                "obj.index": [
                    643,
                    585,
                    1526,
                    568,
                    700
                ],
                "r": [
                    581,
                    569,
                    570,
                    571,
                    573
                ],
                "group.columns": [
                    577,
                    569,
                    570,
                    674
                ],
                "r.columns": [
                    570
                ],
                "r.index": [
                    571
                ],
                "group.index": [
                    578,
                    571,
                    574
                ],
                "reshape": [
                    574
                ],
                "res.values": [
                    574
                ],
                "applied.append": [
                    581,
                    583
                ],
                "concat_index": [
                    585,
                    588
                ],
                "other_axis": [
                    586,
                    588
                ],
                "concatenated": [
                    587,
                    588,
                    589
                ],
                "concatenated.reindex": [
                    588
                ],
                "self._set_result_index_ordered": [
                    589
                ],
                "self._get_cython_func": [
                    1029,
                    596,
                    877
                ],
                "base.transform_kernel_whitelist": [
                    1032,
                    599
                ],
                "base": [
                    768,
                    1383,
                    1032,
                    1386,
                    1035,
                    599,
                    602,
                    766
                ],
                "msg.format": [
                    601,
                    1034
                ],
                "base.cythonized_kernels": [
                    602,
                    1035
                ],
                "self._transform_general": [
                    611,
                    621,
                    615
                ],
                "result.columns.equals": [
                    620
                ],
                "self._transform_fast": [
                    1042,
                    623
                ],
                "Substitution": [
                    1472,
                    841,
                    1026,
                    591
                ],
                "Appender": [
                    833,
                    1027,
                    1479,
                    592,
                    848,
                    1210
                ],
                "_transform_template": [
                    592,
                    1027
                ],
                "func_nm": [
                    1089,
                    631
                ],
                "ids": [
                    1155,
                    1287,
                    1289,
                    1164,
                    1169,
                    1297,
                    1174,
                    1178,
                    1191,
                    1194,
                    1206,
                    1088,
                    1090,
                    1348,
                    1351,
                    1352,
                    1354,
                    1235,
                    1620,
                    1621,
                    1239,
                    1240,
                    1629,
                    1255,
                    1257,
                    1259,
                    1262,
                    635,
                    638
                ],
                "ngroup": [
                    1088,
                    635
                ],
                "self.grouper.group_info": [
                    1088,
                    1155,
                    1348,
                    1235,
                    1620,
                    635
                ],
                "enumerate": [
                    1593,
                    637,
                    686,
                    1806
                ],
                "algorithms.take_1d": [
                    1090,
                    638
                ],
                "algorithms": [
                    1168,
                    1090,
                    1243,
                    638
                ],
                "obj.iloc": [
                    640
                ],
                "output.append": [
                    641
                ],
                "DataFrame._from_arrays": [
                    643
                ],
                "group.apply": [
                    648,
                    653
                ],
                "res_fast": [
                    664,
                    674,
                    677,
                    671
                ],
                "res_fast.columns.equals": [
                    674
                ],
                "res_fast.columns": [
                    674
                ],
                "res_fast.equals": [
                    677
                ],
                "inds": [
                    689,
                    698,
                    685
                ],
                "col": [
                    686,
                    688,
                    1685,
                    861,
                    1694
                ],
                "transform": [
                    688
                ],
                "inds.append": [
                    689
                ],
                "columns.take": [
                    698
                ],
                "indices": [
                    737,
                    1135,
                    755,
                    1143,
                    763
                ],
                "res.squeeze": [
                    748
                ],
                "is_bool": [
                    753
                ],
                "is_scalar": [
                    753
                ],
                "isna": [
                    753,
                    1161,
                    1172,
                    1351
                ],
                "notna": [
                    754,
                    1132
                ],
                "indices.append": [
                    755
                ],
                "self._get_index": [
                    1136,
                    1057,
                    755
                ],
                "__name__": [
                    760
                ],
                "type": [
                    760,
                    1879
                ],
                "self._apply_filter": [
                    763,
                    1143
                ],
                "dropna": [
                    1281,
                    1288,
                    1297,
                    1686,
                    1143,
                    763,
                    1278,
                    1183
                ],
                "_apply_whitelist": [
                    768,
                    1386
                ],
                "base.series_apply_whitelist": [
                    768,
                    766
                ],
                "self.obj.name": [
                    778,
                    1093
                ],
                "_agg_see_also_doc": [
                    1473,
                    842,
                    1390,
                    782
                ],
                "dedent": [
                    1400,
                    1390,
                    782,
                    911,
                    792
                ],
                "_agg_examples_doc": [
                    792,
                    1474,
                    843,
                    1400
                ],
                "apply": [
                    839
                ],
                "super": [
                    1481,
                    839
                ],
                "format": [
                    1843,
                    834,
                    1166,
                    942
                ],
                "_apply_docs": [
                    834,
                    835
                ],
                "no_arg_message": [
                    864,
                    854
                ],
                "PY36": [
                    857,
                    1755
                ],
                "abc.Iterable": [
                    869
                ],
                "abc": [
                    869
                ],
                "ret": [
                    896,
                    899,
                    900,
                    873,
                    875,
                    890
                ],
                "ret.columns": [
                    875
                ],
                "cyfunc": [
                    877,
                    878,
                    879
                ],
                "self._aggregate_named": [
                    887
                ],
                "print": [
                    893
                ],
                "dict": [
                    896,
                    905,
                    994
                ],
                "_shared_docs": [
                    848,
                    1479
                ],
                "arg": [
                    928,
                    932,
                    935,
                    905,
                    938,
                    922,
                    923,
                    924,
                    925
                ],
                "warnings.warn": [
                    920
                ],
                "warnings": [
                    920
                ],
                "FutureWarning": [
                    920
                ],
                "arg.keys": [
                    922
                ],
                "arg.items": [
                    923
                ],
                "tuple": [
                    924,
                    925,
                    1727
                ],
                "zip": [
                    928,
                    1537,
                    1767,
                    935,
                    1769
                ],
                "f": [
                    932,
                    933
                ],
                "columns.append": [
                    933
                ],
                "com.get_callable_name": [
                    1841,
                    933,
                    1774,
                    1783
                ],
                "results": [
                    1696,
                    1059,
                    1699,
                    1700,
                    1062,
                    937,
                    1065,
                    940,
                    1695,
                    1690,
                    952,
                    1048,
                    954,
                    957,
                    1694,
                    959
                ],
                "SpecificationError": [
                    941
                ],
                "copy.copy": [
                    949
                ],
                "copy": [
                    949
                ],
                "obj._reset_cache": [
                    950
                ],
                "obj._selection": [
                    951
                ],
                "obj.aggregate": [
                    952
                ],
                "results.values": [
                    954
                ],
                "self._selected_obj.name": [
                    970,
                    1076
                ],
                "self._wrap_output": [
                    980,
                    974
                ],
                "_get_index": [
                    1011,
                    996
                ],
                "result.stack": [
                    1000
                ],
                "self.observed": [
                    1000,
                    1515,
                    1509
                ],
                "result.name": [
                    1001,
                    1076
                ],
                "group.name": [
                    1018
                ],
                "self._selected_obj.__class__": [
                    1047
                ],
                "ABCDataFrame": [
                    1054
                ],
                "ABCSeries": [
                    1054
                ],
                "res._values": [
                    1055
                ],
                "results.append": [
                    1059
                ],
                "sort_index": [
                    1065
                ],
                "dtype": [
                    1072,
                    1073,
                    1074
                ],
                "self._selected_obj.dtype": [
                    1072
                ],
                "is_numeric_dtype": [
                    1073
                ],
                "maybe_downcast_to_dtype": [
                    1074
                ],
                "self._selected_obj.index": [
                    1077
                ],
                "out": [
                    1283,
                    1286,
                    1294,
                    1298,
                    1299,
                    1306,
                    1307,
                    1308,
                    1312,
                    1190,
                    1195,
                    1323,
                    1198,
                    1326,
                    1200,
                    1327,
                    1205,
                    1206,
                    1335,
                    1336,
                    1337,
                    1090,
                    1092,
                    1093,
                    1354,
                    1357,
                    1268
                ],
                "_values": [
                    1090
                ],
                "true_and_notna": [
                    1136
                ],
                "filtered": [
                    1144,
                    1143
                ],
                "self.obj._internal_get_values": [
                    1236,
                    1157,
                    1349
                ],
                "np.datetime64": [
                    1161
                ],
                "sorter": [
                    1255,
                    1257,
                    1259,
                    1164,
                    1326,
                    1327,
                    1169,
                    1298,
                    1299,
                    1174
                ],
                "np.lexsort": [
                    1255,
                    1257,
                    1164,
                    1326,
                    1169,
                    1298
                ],
                "val.dtype": [
                    1166,
                    1167
                ],
                "algorithms.factorize": [
                    1168,
                    1243
                ],
                "_isna": [
                    1170,
                    1172,
                    1182
                ],
                "a": [
                    1170
                ],
                "idx": [
                    1184,
                    1188,
                    1190,
                    1287,
                    1322,
                    1323,
                    1196,
                    1262,
                    1267,
                    1206,
                    1271,
                    1178,
                    1916
                ],
                "np.r_": [
                    1314,
                    1187,
                    1287,
                    1262,
                    1266,
                    1268,
                    1178,
                    1179
                ],
                "np.nonzero": [
                    1178,
                    1268,
                    1262
                ],
                "inc": [
                    1184,
                    1185,
                    1187,
                    1188,
                    1251,
                    1190,
                    1297,
                    1266,
                    1267,
                    1268,
                    1271,
                    1274,
                    1179,
                    1244
                ],
                "astype": [
                    1190
                ],
                "np.add.reduceat": [
                    1190,
                    1271
                ],
                "np.add": [
                    1290,
                    1190,
                    1271
                ],
                "np.flatnonzero": [
                    1196
                ],
                "ri": [
                    1208,
                    1201,
                    1204,
                    1205
                ],
                "out.dtype": [
                    1205
                ],
                "self.apply": [
                    1371,
                    1227,
                    1212
                ],
                "x.describe": [
                    1212
                ],
                "result.T": [
                    1588,
                    1214,
                    1567
                ],
                "result.unstack": [
                    1215
                ],
                "Series.describe.__doc__": [
                    1210
                ],
                "Series.describe": [
                    1210
                ],
                "bins": [
                    1248,
                    1224,
                    1296,
                    1232,
                    1301,
                    1242
                ],
                "np.iterable": [
                    1224
                ],
                "Series.value_counts": [
                    1228
                ],
                "normalize": [
                    1285,
                    1229
                ],
                "sort": [
                    1296,
                    1325,
                    1230
                ],
                "ascending": [
                    1298,
                    1326,
                    1231
                ],
                "lab": [
                    1248,
                    1249,
                    1250,
                    1251,
                    1313,
                    1253,
                    1314,
                    1255,
                    1257,
                    1289,
                    1259,
                    1265,
                    1330,
                    1274,
                    1243,
                    1244
                ],
                "lev": [
                    1249,
                    1250,
                    1548,
                    1550,
                    1275,
                    1243
                ],
                "llab": [
                    1265,
                    1274,
                    1251,
                    1244
                ],
                "cut": [
                    1248
                ],
                "lab.cat.categories": [
                    1249
                ],
                "lab.cat": [
                    1249,
                    1250
                ],
                "lev.take": [
                    1250
                ],
                "lab.cat.codes": [
                    1250
                ],
                "_multiindex.codes": [
                    1251
                ],
                "_multiindex": [
                    1251
                ],
                "is_interval_dtype": [
                    1253
                ],
                "lab.left": [
                    1255
                ],
                "lab.right": [
                    1255
                ],
                "lchanges": [
                    1265,
                    1266
                ],
                "slice": [
                    1265
                ],
                "np.diff": [
                    1268,
                    1287
                ],
                "rep": [
                    1274,
                    1291,
                    1293,
                    1271
                ],
                "partial": [
                    1629,
                    1271
                ],
                "np.repeat": [
                    1330,
                    1318,
                    1271
                ],
                "map": [
                    1274,
                    1538,
                    1330,
                    1630
                ],
                "self.grouper.recons_labels": [
                    1274
                ],
                "levels": [
                    1275,
                    1316,
                    1333,
                    1303
                ],
                "mask.all": [
                    1280
                ],
                "label": [
                    1283
                ],
                "out.astype": [
                    1286
                ],
                "d": [
                    1290,
                    1291,
                    1293,
                    1287
                ],
                "m": [
                    1289,
                    1290
                ],
                "np.add.at": [
                    1290
                ],
                "acc": [
                    1291,
                    1293,
                    1294
                ],
                "cat": [
                    1297,
                    1298
                ],
                "mi": [
                    1337,
                    1308,
                    1333,
                    1302
                ],
                "is_integer_dtype": [
                    1306,
                    1335
                ],
                "ensure_int64": [
                    1336,
                    1307
                ],
                "diff": [
                    1312,
                    1314,
                    1316,
                    1320,
                    1330
                ],
                "ncat": [
                    1316,
                    1318
                ],
                "nbin": [
                    1330,
                    1316,
                    1318
                ],
                "diff.sum": [
                    1316
                ],
                "left": [
                    1318,
                    1322,
                    1326,
                    1327,
                    1331
                ],
                "np.tile": [
                    1318
                ],
                "right": [
                    1320,
                    1322
                ],
                "diff.cumsum": [
                    1320
                ],
                "_get_join_indexers": [
                    1322
                ],
                "np.where": [
                    1323
                ],
                "codes": [
                    1330,
                    1331,
                    1333
                ],
                "codes.append": [
                    1331
                ],
                "ngroups": [
                    1353,
                    1348,
                    1629,
                    1620
                ],
                "ensure_platform_int": [
                    1352
                ],
                "minlength": [
                    1353,
                    1354
                ],
                "np.bincount": [
                    1354
                ],
                "freq": [
                    1370,
                    1373,
                    1378
                ],
                "x.pct_change": [
                    1372
                ],
                "periods": [
                    1378,
                    1373
                ],
                "fill_method": [
                    1376,
                    1373
                ],
                "limit": [
                    1376,
                    1373
                ],
                "filled": [
                    1376,
                    1377,
                    1380
                ],
                "fill_grp": [
                    1377,
                    1378
                ],
                "filled.groupby": [
                    1377
                ],
                "self.grouper.labels": [
                    1377
                ],
                "shifted": [
                    1378,
                    1380
                ],
                "fill_grp.shift": [
                    1378
                ],
                "pin_whitelisted_properties": [
                    766,
                    1383
                ],
                "NDFrameGroupBy": [
                    1384
                ],
                "base.dataframe_apply_whitelist": [
                    1386,
                    1383
                ],
                "ndim": [
                    1499,
                    1511
                ],
                "subset": [
                    1512,
                    1513,
                    1515,
                    1500,
                    1501,
                    1503
                ],
                "DataFrameGroupBy": [
                    1502
                ],
                "key": [
                    1888,
                    1505,
                    1513,
                    1515,
                    1882
                ],
                "result_index": [
                    1521,
                    1524,
                    1526
                ],
                "self.grouper.levels": [
                    1521
                ],
                "T": [
                    1524
                ],
                "obj.T._data": [
                    1531
                ],
                "obj.T": [
                    1531
                ],
                "obj._data": [
                    1533
                ],
                "izip": [
                    1537,
                    1548
                ],
                "reversed": [
                    1539
                ],
                "self.grouper.get_group_levels": [
                    1542
                ],
                "grp.in_axis": [
                    1543
                ],
                "grp": [
                    1543
                ],
                "in_axis": [
                    1548,
                    1549
                ],
                "result.insert": [
                    1550
                ],
                "agg_labels": [
                    1554,
                    1556
                ],
                "self._obj_with_exclusions._get_axis": [
                    1554
                ],
                "self._decide_output_index": [
                    1556
                ],
                "result._consolidate": [
                    1561,
                    1581
                ],
                "values.shape": [
                    1576
                ],
                "blocks": [
                    1576,
                    1577,
                    1584
                ],
                "mgr": [
                    1584,
                    1577,
                    1578,
                    1585
                ],
                "BlockManager": [
                    1584,
                    1577
                ],
                "items": [
                    1584,
                    1577
                ],
                "colname": [
                    1593,
                    1594,
                    1596
                ],
                "self._selected_obj.iloc": [
                    1595
                ],
                "col_groupby": [
                    1605
                ],
                "self._iterate_column_groupbys": [
                    1605
                ],
                "_isna_ndarraylike": [
                    1624
                ],
                "np.atleast_2d": [
                    1624
                ],
                "blk.get_values": [
                    1624
                ],
                "blk": [
                    1632,
                    1624,
                    1625,
                    1627,
                    1630
                ],
                "blk.mgr_locs": [
                    1627
                ],
                "counter": [
                    1629,
                    1630
                ],
                "lib.count_level_2d": [
                    1629
                ],
                "lib": [
                    1629
                ],
                "make_block": [
                    1630
                ],
                "nunique": [
                    1685
                ],
                "groupby_series": [
                    1690,
                    1694
                ],
                "results.columns.names": [
                    1696
                ],
                "results.columns": [
                    1696
                ],
                "obj.columns.names": [
                    1696
                ],
                "results.index": [
                    1699
                ],
                "ibase.default_index": [
                    1699
                ],
                "ibase": [
                    1699
                ],
                "boxplot": [
                    1702
                ],
                "boxplot_frame_groupby": [
                    1702
                ],
                "all": [
                    1727
                ],
                "kwargs.values": [
                    1727
                ],
                "kwargs.items": [
                    1756,
                    1767
                ],
                "aggspec": [
                    1765,
                    1770,
                    1771,
                    1773,
                    1784,
                    1791
                ],
                "pairs": [
                    1769,
                    1767
                ],
                "column": [
                    1769,
                    1770,
                    1771,
                    1773,
                    1774,
                    1783,
                    1784
                ],
                "aggfunc": [
                    1769,
                    1771,
                    1773,
                    1774,
                    1840,
                    1841,
                    1842,
                    1843,
                    1845,
                    1783,
                    1785
                ],
                "append": [
                    1771
                ],
                "order.append": [
                    1774
                ],
                "uniquified_order": [
                    1777,
                    1790
                ],
                "_make_unique": [
                    1777,
                    1787
                ],
                "aggspec_order": [
                    1787,
                    1782
                ],
                "aggfuncs": [
                    1835,
                    1837,
                    1840,
                    1784,
                    1785,
                    1882,
                    1883,
                    1884,
                    1886
                ],
                "aggspec.items": [
                    1784
                ],
                "uniquified_aggspec": [
                    1787,
                    1790
                ],
                "col_idx_order": [
                    1790,
                    1791
                ],
                "get_indexer": [
                    1790
                ],
                "seq.count": [
                    1804
                ],
                "seq": [
                    1803,
                    1804,
                    1806
                ],
                "pair": [
                    1803,
                    1804,
                    1805,
                    1806
                ],
                "join": [
                    1803
                ],
                "count": [
                    1803
                ],
                "Sequence": [
                    1817
                ],
                "mangled_aggfuncs": [
                    1888,
                    1839,
                    1845,
                    1847,
                    1884,
                    1886
                ],
                "functools.partial": [
                    1842
                ],
                "functools": [
                    1842
                ],
                "aggfunc.__name__": [
                    1843
                ],
                "mangled_aggfuncs.append": [
                    1845
                ],
                "is_dict": [
                    1881,
                    1876,
                    1877
                ],
                "is_dict_like": [
                    1883,
                    1876
                ],
                "agg_spec": [
                    1890,
                    1876,
                    1877,
                    1878,
                    1879,
                    1882
                ],
                "is_list_like": [
                    1883,
                    1877
                ],
                "mangled_aggspec": [
                    1888,
                    1890,
                    1892,
                    1879
                ],
                "agg_spec.items": [
                    1882
                ],
                "_managle_lambda_list": [
                    1890,
                    1884
                ],
                "result.copy": [
                    1913
                ],
                "obj_cols": [
                    1920,
                    1915
                ],
                "range": [
                    1916
                ],
                "is_object_dtype": [
                    1916
                ],
                "result.dtypes": [
                    1916
                ],
                "n": [
                    1920,
                    1922,
                    1925
                ],
                "converted": [
                    1921,
                    1925
                ],
                "maybe_convert_objects": [
                    1921
                ]
            },
            "filtered_variables_in_file": {
                "NamedAgg": [
                    64
                ],
                "namedtuple": [
                    64
                ],
                "AggScalar": [
                    66
                ],
                "Union": [
                    66
                ],
                "Callable": [
                    66
                ],
                "Any": [
                    1817,
                    66,
                    1850
                ],
                "ScalarResult": [
                    70
                ],
                "typing.TypeVar": [
                    70
                ],
                "typing": [
                    70
                ],
                "Type": [
                    96,
                    73
                ],
                "FrameOrSeries": [
                    96,
                    73
                ],
                "self._make_wrapper": [
                    88
                ],
                "self": [
                    514,
                    1029,
                    1541,
                    1542,
                    520,
                    1543,
                    1037,
                    1529,
                    1553,
                    1042,
                    1043,
                    1554,
                    1556,
                    1022,
                    535,
                    1047,
                    1558,
                    1050,
                    1560,
                    1563,
                    541,
                    542,
                    543,
                    1566,
                    1057,
                    1569,
                    1572,
                    1575,
                    552,
                    554,
                    1580,
                    1583,
                    1072,
                    1587,
                    1076,
                    1077,
                    1590,
                    1593,
                    1595,
                    1597,
                    1086,
                    1598,
                    1088,
                    1089,
                    1092,
                    1093,
                    1605,
                    1606,
                    585,
                    586,
                    587,
                    589,
                    1619,
                    596,
                    1620,
                    88,
                    604,
                    1632,
                    609,
                    611,
                    615,
                    617,
                    621,
                    623,
                    1136,
                    631,
                    1143,
                    635,
                    640,
                    1155,
                    1157,
                    134,
                    136,
                    137,
                    649,
                    139,
                    140,
                    142,
                    143,
                    654,
                    146,
                    1682,
                    1685,
                    151,
                    154,
                    162,
                    1698,
                    176,
                    688,
                    1201,
                    1208,
                    1212,
                    1213,
                    191,
                    192,
                    194,
                    1227,
                    1235,
                    1236,
                    739,
                    740,
                    755,
                    1274,
                    251,
                    763,
                    1275,
                    1276,
                    258,
                    259,
                    261,
                    777,
                    266,
                    267,
                    778,
                    780,
                    270,
                    273,
                    276,
                    277,
                    1308,
                    291,
                    294,
                    295,
                    300,
                    301,
                    303,
                    305,
                    307,
                    308,
                    313,
                    1337,
                    316,
                    321,
                    1348,
                    1349,
                    327,
                    330,
                    334,
                    1358,
                    1359,
                    1365,
                    1371,
                    1376,
                    1377,
                    867,
                    873,
                    877,
                    879,
                    881,
                    882,
                    885,
                    887,
                    377,
                    889,
                    892,
                    393,
                    394,
                    395,
                    396,
                    910,
                    399,
                    414,
                    939,
                    431,
                    948,
                    438,
                    449,
                    963,
                    968,
                    970,
                    462,
                    974,
                    975,
                    465,
                    977,
                    980,
                    985,
                    988,
                    989,
                    1501,
                    991,
                    1504,
                    1506,
                    1507,
                    1508,
                    997,
                    1509,
                    1000,
                    1001,
                    1513,
                    1515,
                    1005,
                    1008,
                    1521,
                    498,
                    1011,
                    1012,
                    1523,
                    1017,
                    1530,
                    510
                ],
                "name": [
                    1548,
                    1550,
                    1050,
                    1051,
                    1057,
                    546,
                    547,
                    938,
                    300,
                    301,
                    940,
                    943,
                    305,
                    307,
                    308,
                    948,
                    311,
                    951,
                    441,
                    952,
                    968,
                    969,
                    970,
                    971,
                    88,
                    90,
                    92,
                    742,
                    743,
                    1769,
                    1136,
                    755,
                    118,
                    119,
                    1017,
                    1018,
                    124,
                    125,
                    1022
                ],
                "parent_method": [
                    90,
                    91
                ],
                "klass": [
                    90,
                    124,
                    1058,
                    1047
                ],
                "prop.__doc__": [
                    91
                ],
                "prop": [
                    92,
                    93,
                    91,
                    124,
                    125
                ],
                "parent_method.__doc__": [
                    91
                ],
                "prop.__name__": [
                    92
                ],
                "FrozenSet": [
                    96
                ],
                "whitelist": [
                    118
                ],
                "cls": [
                    127,
                    125,
                    119
                ],
                "generate_property": [
                    124
                ],
                "pinner": [
                    129
                ],
                "GroupBy": [
                    132,
                    767
                ],
                "self.axis": [
                    134,
                    649,
                    267,
                    654,
                    1553,
                    1566,
                    542,
                    294,
                    431,
                    1587,
                    1213,
                    194,
                    585,
                    586,
                    587,
                    465,
                    740,
                    498,
                    1523,
                    1530
                ],
                "self._selection": [
                    136,
                    777,
                    780
                ],
                "slice_axis": [
                    137,
                    145,
                    139,
                    142
                ],
                "self.obj.columns": [
                    137
                ],
                "self.obj": [
                    1092,
                    1093,
                    1157,
                    1349,
                    1572,
                    137,
                    778,
                    1513,
                    140,
                    142,
                    143,
                    980,
                    1236,
                    1501,
                    191
                ],
                "self._selection_list": [
                    139
                ],
                "slicer": [
                    148,
                    140,
                    143
                ],
                "x": [
                    194,
                    1125,
                    423,
                    424,
                    649,
                    1127,
                    1131,
                    140,
                    525,
                    654,
                    432,
                    1212,
                    310,
                    1372,
                    1049,
                    954,
                    924,
                    925
                ],
                "self.obj.index": [
                    1572,
                    980,
                    1093,
                    142
                ],
                "self.obj.xs": [
                    143
                ],
                "val": [
                    1157,
                    1161,
                    1164,
                    1166,
                    1167,
                    1168,
                    145,
                    146,
                    1169,
                    148,
                    1174,
                    1179,
                    1182,
                    1349,
                    1351,
                    1236,
                    1623,
                    1240,
                    1243,
                    1630,
                    1248
                ],
                "self.exclusions": [
                    146,
                    1507,
                    1598
                ],
                "new_items": [
                    215,
                    168,
                    235,
                    206,
                    214,
                    151,
                    154
                ],
                "new_blocks": [
                    230,
                    167,
                    235,
                    207,
                    209,
                    151,
                    154
                ],
                "self._cython_agg_blocks": [
                    151
                ],
                "how": [
                    152,
                    177,
                    251,
                    252
                ],
                "alt": [
                    152,
                    194,
                    184
                ],
                "numeric_only": [
                    152,
                    164
                ],
                "min_count": [
                    152,
                    177
                ],
                "self._wrap_agged_blocks": [
                    1632,
                    154
                ],
                "_block_agg_axis": [
                    1388,
                    156
                ],
                "data": [
                    162,
                    165,
                    171,
                    300,
                    301,
                    307,
                    308,
                    311,
                    191,
                    326,
                    327,
                    334,
                    1619,
                    215,
                    1625,
                    1627,
                    224,
                    225,
                    1632
                ],
                "agg_axis": [
                    177,
                    162,
                    1554,
                    1553
                ],
                "self._get_data_to_aggregate": [
                    162,
                    1619
                ],
                "data.get_numeric_data": [
                    165
                ],
                "deleted_items": [
                    198,
                    169,
                    217,
                    187,
                    223
                ],
                "no_result": [
                    201,
                    170,
                    173
                ],
                "block": [
                    171,
                    204,
                    203,
                    174,
                    177
                ],
                "data.blocks": [
                    1625,
                    1627,
                    171
                ],
                "result": [
                    1024,
                    516,
                    518,
                    520,
                    1550,
                    1559,
                    1560,
                    1561,
                    1564,
                    1567,
                    1569,
                    1065,
                    1578,
                    1067,
                    1580,
                    1581,
                    1585,
                    1074,
                    1076,
                    1077,
                    1078,
                    1588,
                    1590,
                    609,
                    614,
                    620,
                    623,
                    637,
                    638,
                    643,
                    173,
                    176,
                    1212,
                    1214,
                    1215,
                    194,
                    201,
                    203,
                    204,
                    251,
                    253,
                    255,
                    261,
                    266,
                    270,
                    272,
                    273,
                    277,
                    278,
                    283,
                    284,
                    286,
                    297,
                    301,
                    308,
                    311,
                    313,
                    322,
                    332,
                    334,
                    356,
                    887,
                    889,
                    890,
                    1913,
                    1916,
                    1922,
                    1925,
                    1926,
                    974,
                    977,
                    503,
                    997,
                    486,
                    1000,
                    1001,
                    1002,
                    494,
                    1011,
                    500,
                    1012,
                    1524,
                    1015,
                    1526,
                    1022
                ],
                "locs": [
                    198,
                    206,
                    174,
                    187,
                    191
                ],
                "block.mgr_locs.as_array": [
                    174
                ],
                "block.mgr_locs": [
                    174
                ],
                "_": [
                    1088,
                    1155,
                    1348,
                    1605,
                    1322,
                    176,
                    1168,
                    1235,
                    1619,
                    1620,
                    635,
                    637
                ],
                "self.grouper.aggregate": [
                    176
                ],
                "self.grouper": [
                    258,
                    1155,
                    1541,
                    1542,
                    1543,
                    394,
                    395,
                    396,
                    399,
                    1275,
                    1685,
                    1563,
                    542,
                    291,
                    1583,
                    176,
                    1201,
                    1597,
                    192,
                    1088,
                    1348,
                    327,
                    1358,
                    975,
                    1235,
                    1620,
                    988,
                    989,
                    991,
                    1504,
                    1377,
                    1506,
                    740,
                    377,
                    1515,
                    881,
                    1521,
                    889,
                    1274,
                    635,
                    1276
                ],
                "block.values": [
                    177
                ],
                "deleted_items.append": [
                    187,
                    198
                ],
                "obj": [
                    640,
                    643,
                    1682,
                    1685,
                    1689,
                    1690,
                    541,
                    542,
                    1694,
                    1696,
                    295,
                    298,
                    554,
                    939,
                    686,
                    307,
                    949,
                    950,
                    951,
                    568,
                    313,
                    696,
                    697,
                    700,
                    952,
                    191,
                    192,
                    321,
                    325,
                    326,
                    585,
                    348,
                    739,
                    740,
                    617,
                    620,
                    623,
                    1524,
                    1526,
                    1529,
                    1531,
                    1533
                ],
                "data.items": [
                    1632,
                    215,
                    191
                ],
                "s": [
                    192,
                    194,
                    1059,
                    1058
                ],
                "groupby": [
                    192
                ],
                "s.aggregate": [
                    194
                ],
                "maybe_downcast_numeric": [
                    203
                ],
                "block.dtype": [
                    203
                ],
                "newb": [
                    204,
                    207
                ],
                "block.make_block": [
                    204
                ],
                "new_items.append": [
                    206
                ],
                "new_blocks.append": [
                    207
                ],
                "DataError": [
                    210
                ],
                "indexer": [
                    1057,
                    1058,
                    227,
                    232,
                    405,
                    214,
                    215,
                    408
                ],
                "np.concatenate": [
                    574,
                    214,
                    223
                ],
                "np": [
                    1287,
                    1161,
                    1290,
                    1164,
                    1169,
                    1298,
                    278,
                    1178,
                    1179,
                    1312,
                    1314,
                    1187,
                    1190,
                    1318,
                    1576,
                    1323,
                    1196,
                    429,
                    1326,
                    1330,
                    1205,
                    566,
                    574,
                    1224,
                    1354,
                    214,
                    215,
                    1624,
                    223,
                    224,
                    225,
                    485,
                    1255,
                    1257,
                    1262,
                    1266,
                    1268,
                    502,
                    1271,
                    1020
                ],
                "data.items.take": [
                    215
                ],
                "np.sort": [
                    215
                ],
                "deleted": [
                    226,
                    223
                ],
                "ai": [
                    224,
                    227
                ],
                "np.arange": [
                    224,
                    1318,
                    1576,
                    278
                ],
                "mask": [
                    1280,
                    225,
                    226,
                    227,
                    1185,
                    1187,
                    1283,
                    1351,
                    1354,
                    1291,
                    1624,
                    1297,
                    1621,
                    1239,
                    1240,
                    1182,
                    1279
                ],
                "np.zeros": [
                    1312,
                    225,
                    1205
                ],
                "mask.cumsum": [
                    227
                ],
                "offset": [
                    232,
                    233,
                    229
                ],
                "b": [
                    230,
                    231,
                    232,
                    1131,
                    1132
                ],
                "loc": [
                    231,
                    232,
                    233,
                    1627,
                    1630
                ],
                "b.mgr_locs": [
                    232,
                    231
                ],
                "_level": [
                    896,
                    873,
                    267,
                    238,
                    910,
                    850,
                    251,
                    956
                ],
                "kwargs.pop": [
                    850,
                    238
                ],
                "kwargs": [
                    259,
                    260,
                    261,
                    647,
                    1019,
                    649,
                    652,
                    1037,
                    654,
                    1043,
                    1049,
                    543,
                    301,
                    303,
                    308,
                    310,
                    1212,
                    1727,
                    839,
                    1481,
                    332,
                    850,
                    856,
                    604,
                    861,
                    862,
                    1756,
                    609,
                    611,
                    867,
                    1125,
                    615,
                    1127,
                    745,
                    1767,
                    1131,
                    621,
                    238,
                    878,
                    240,
                    242,
                    882,
                    244,
                    885,
                    887,
                    251
                ],
                "relabeling": [
                    874,
                    240,
                    241,
                    852,
                    855,
                    280
                ],
                "func": [
                    259,
                    261,
                    646,
                    647,
                    1019,
                    649,
                    1029,
                    267,
                    652,
                    1031,
                    270,
                    654,
                    1032,
                    1034,
                    1035,
                    1037,
                    1043,
                    1049,
                    543,
                    938,
                    301,
                    303,
                    308,
                    310,
                    952,
                    1085,
                    1086,
                    1090,
                    1605,
                    839,
                    1481,
                    330,
                    332,
                    596,
                    852,
                    598,
                    599,
                    1365,
                    601,
                    602,
                    604,
                    861,
                    609,
                    866,
                    611,
                    867,
                    869,
                    1124,
                    615,
                    872,
                    745,
                    873,
                    1125,
                    1127,
                    621,
                    877,
                    623,
                    240,
                    242,
                    882,
                    245,
                    885,
                    887,
                    249,
                    251
                ],
                "_is_multi_agg_with_relabel": [
                    240
                ],
                "columns": [
                    922,
                    284,
                    928,
                    931,
                    933,
                    935,
                    696,
                    698,
                    700,
                    959,
                    853,
                    856,
                    859,
                    861,
                    863,
                    1767,
                    1769,
                    875,
                    242,
                    1791
                ],
                "order": [
                    1766,
                    1774,
                    1777,
                    242,
                    283
                ],
                "_normalize_keyword_aggregation": [
                    242
                ],
                "_maybe_mangle_lambdas": [
                    872,
                    249
                ],
                "self._aggregate": [
                    251
                ],
                "args": [
                    259,
                    260,
                    261,
                    647,
                    1019,
                    649,
                    652,
                    1037,
                    654,
                    1043,
                    1049,
                    543,
                    301,
                    303,
                    308,
                    310,
                    839,
                    1481,
                    332,
                    604,
                    609,
                    611,
                    867,
                    1125,
                    615,
                    1127,
                    745,
                    1131,
                    621,
                    878,
                    882,
                    885,
                    887,
                    251
                ],
                "self.grouper.nkeys": [
                    881,
                    258,
                    291,
                    988
                ],
                "self._python_agg_general": [
                    882,
                    259,
                    885
                ],
                "self._aggregate_generic": [
                    261,
                    270
                ],
                "self._aggregate_multiple_funcs": [
                    873,
                    266
                ],
                "result.columns": [
                    643,
                    1916,
                    620,
                    272,
                    273,
                    500,
                    284,
                    637
                ],
                "Index": [
                    429,
                    272,
                    404,
                    889,
                    411,
                    1020,
                    1790,
                    991
                ],
                "result.columns.levels": [
                    273
                ],
                "self._selected_obj.columns.name": [
                    273
                ],
                "self._selected_obj.columns": [
                    273,
                    1606,
                    1593
                ],
                "self._selected_obj": [
                    514,
                    739,
                    1606,
                    970,
                    910,
                    431,
                    1072,
                    273,
                    1682,
                    948,
                    1076,
                    1077,
                    1047,
                    1593,
                    1595
                ],
                "self.as_index": [
                    1698,
                    1508,
                    1575,
                    276,
                    1558,
                    892,
                    414
                ],
                "self._insert_inaxis_grouper_inplace": [
                    1560,
                    1580,
                    277
                ],
                "result.index": [
                    1077,
                    278
                ],
                "result.iloc": [
                    1922,
                    283,
                    1925,
                    638
                ],
                "result._convert": [
                    286,
                    518
                ],
                "agg": [
                    288,
                    1483,
                    902
                ],
                "aggregate": [
                    288,
                    1481,
                    1483,
                    902
                ],
                "axis": [
                    298,
                    294,
                    311
                ],
                "self._obj_with_exclusions": [
                    321,
                    295,
                    617,
                    1554,
                    1529,
                    541
                ],
                "OrderedDict": [
                    322,
                    1765,
                    297,
                    937,
                    1015,
                    1756
                ],
                "obj._info_axis_number": [
                    298
                ],
                "self._try_cast": [
                    640,
                    1092,
                    301,
                    334,
                    308,
                    1022
                ],
                "self._aggregate_item_by_item": [
                    303
                ],
                "self.indices": [
                    305
                ],
                "self.get_group": [
                    307
                ],
                "wrapper": [
                    1125,
                    1127,
                    1131,
                    688,
                    310,
                    311,
                    1049,
                    1052
                ],
                "data.apply": [
                    311
                ],
                "self._wrap_generic_output": [
                    313
                ],
                "AbstractMethodError": [
                    316
                ],
                "cannot_agg": [
                    323,
                    341,
                    344,
                    349,
                    350
                ],
                "errors": [
                    345,
                    354,
                    324,
                    353
                ],
                "item": [
                    325,
                    326,
                    327,
                    332,
                    334,
                    341,
                    344
                ],
                "colg": [
                    332,
                    327
                ],
                "SeriesGroupBy": [
                    1514,
                    1594,
                    1685,
                    327
                ],
                "cast": [
                    1089,
                    1091,
                    330,
                    333,
                    631,
                    639
                ],
                "self._transform_should_cast": [
                    1089,
                    330,
                    631
                ],
                "colg.aggregate": [
                    332
                ],
                "err": [
                    337
                ],
                "cannot_agg.append": [
                    344,
                    341
                ],
                "e": [
                    345
                ],
                "result_columns": [
                    356,
                    353,
                    348,
                    350
                ],
                "obj.columns": [
                    1696,
                    585,
                    620,
                    1524,
                    696,
                    697,
                    348,
                    1694
                ],
                "result_columns.drop": [
                    350
                ],
                "DataFrame": [
                    643,
                    391,
                    392,
                    1559,
                    1564,
                    671,
                    420,
                    1572,
                    1578,
                    1585,
                    954,
                    700,
                    573,
                    959,
                    966,
                    375,
                    356,
                    997,
                    486,
                    614,
                    1383,
                    1895,
                    1006,
                    1524,
                    1526,
                    503
                ],
                "output": [
                    636,
                    641,
                    643,
                    1556,
                    1559,
                    1564,
                    1572,
                    684,
                    688,
                    693,
                    697,
                    700,
                    963,
                    966,
                    971,
                    975,
                    980,
                    359,
                    362,
                    1019,
                    1020,
                    1022
                ],
                "labels": [
                    1313,
                    1283,
                    359,
                    360,
                    1320,
                    368,
                    369,
                    1330,
                    1299,
                    1303,
                    1274,
                    1279
                ],
                "output_keys": [
                    360,
                    362,
                    364,
                    369,
                    371,
                    1556,
                    1559,
                    1564
                ],
                "output_keys.sort": [
                    364
                ],
                "MultiIndex": [
                    481,
                    483,
                    368,
                    369,
                    1333,
                    1302,
                    989
                ],
                "MultiIndex.from_tuples": [
                    369,
                    989
                ],
                "labels.names": [
                    369
                ],
                "keys": [
                    450,
                    535,
                    393,
                    1005,
                    462,
                    400,
                    1008,
                    983,
                    404,
                    374,
                    375,
                    441,
                    411,
                    985,
                    989,
                    991
                ],
                "key_names": [
                    377,
                    402,
                    411
                ],
                "self.grouper.names": [
                    1541,
                    377,
                    1276,
                    989,
                    889,
                    991
                ],
                "com.not_none": [
                    382
                ],
                "com": [
                    933,
                    1774,
                    1841,
                    1783,
                    382
                ],
                "values": [
                    386,
                    382,
                    1922,
                    393,
                    638,
                    525,
                    529,
                    535,
                    408,
                    418,
                    422,
                    424,
                    1576,
                    427,
                    432,
                    433,
                    441,
                    450,
                    458,
                    462,
                    474,
                    994,
                    485,
                    997,
                    1004,
                    1005,
                    1006,
                    495,
                    1008,
                    1011,
                    502,
                    510
                ],
                "v": [
                    481,
                    418,
                    386,
                    419,
                    388,
                    421,
                    423,
                    392,
                    485,
                    427,
                    429,
                    430,
                    468,
                    502,
                    504,
                    474,
                    1727
                ],
                "first_not_none": [
                    418,
                    386
                ],
                "self._concat_objects": [
                    449,
                    393,
                    1005,
                    462,
                    1008,
                    535
                ],
                "not_indexed_same": [
                    450,
                    393,
                    1005,
                    1008,
                    535
                ],
                "self.grouper.groupings": [
                    1543,
                    394,
                    395,
                    399,
                    1275
                ],
                "key_index": [
                    482,
                    483,
                    487,
                    396,
                    496,
                    401,
                    402,
                    497,
                    529,
                    405,
                    504,
                    411,
                    510,
                    415
                ],
                "self.grouper.result_index": [
                    396,
                    1358,
                    975,
                    1583,
                    1201,
                    1563
                ],
                "ping": [
                    400,
                    401,
                    1275,
                    399
                ],
                "ping.ngroups": [
                    400
                ],
                "ping.group_index": [
                    401,
                    1275
                ],
                "key_index.name": [
                    402
                ],
                "key_lookup": [
                    404,
                    405
                ],
                "key_lookup.get_indexer": [
                    405
                ],
                "i": [
                    640,
                    1803,
                    686,
                    1806,
                    1838,
                    689,
                    1843,
                    1844,
                    408,
                    1593,
                    1595,
                    637,
                    638
                ],
                "NDFrame": [
                    421
                ],
                "v._constructor": [
                    423
                ],
                "v._construct_axes_dict": [
                    423
                ],
                "np.ndarray": [
                    1020,
                    429
                ],
                "Series": [
                    910,
                    766,
                    529,
                    1689,
                    1308,
                    1067,
                    429,
                    430,
                    561,
                    1208,
                    1337,
                    1210,
                    1093,
                    971,
                    1228,
                    1356,
                    985,
                    1248,
                    1004,
                    1011,
                    890,
                    1020,
                    510
                ],
                "applied_index": [
                    433,
                    431
                ],
                "self._selected_obj._get_axis": [
                    431
                ],
                "all_indexed_same": [
                    432,
                    460,
                    455
                ],
                "_all_indexes_same": [
                    432
                ],
                "x.index": [
                    432
                ],
                "singular_series": [
                    440,
                    433
                ],
                "applied_index.nlevels": [
                    433
                ],
                "self.squeeze": [
                    438
                ],
                "concat": [
                    899,
                    1604,
                    1065,
                    458,
                    587,
                    494,
                    569,
                    1695
                ],
                "index": [
                    1563,
                    1564,
                    1576,
                    1577,
                    1583,
                    1584,
                    966,
                    971,
                    468,
                    469,
                    476,
                    989,
                    991,
                    992,
                    996,
                    997,
                    487,
                    500,
                    889,
                    890
                ],
                "v.index.copy": [
                    468
                ],
                "v.index": [
                    504,
                    481,
                    468
                ],
                "index.name": [
                    476,
                    469
                ],
                "names": [
                    965,
                    966,
                    975,
                    980,
                    1276,
                    1333,
                    1303,
                    474,
                    475,
                    476
                ],
                "v.name": [
                    474
                ],
                "stacked_values": [
                    504,
                    485,
                    502,
                    487
                ],
                "np.vstack": [
                    485,
                    502
                ],
                "np.asarray": [
                    485,
                    502
                ],
                "unstack": [
                    494
                ],
                "key_index.names": [
                    497
                ],
                "stacked_values.T": [
                    504
                ],
                "self._selection_name": [
                    963,
                    1337,
                    968,
                    1001,
                    1359,
                    1011,
                    1308,
                    1208,
                    985,
                    1276,
                    510
                ],
                "so": [
                    514,
                    515
                ],
                "so.ndim": [
                    515
                ],
                "so.dtypes.apply": [
                    515
                ],
                "so.dtypes": [
                    515
                ],
                "is_datetimelike": [
                    515
                ],
                "_recast_datetimelike_result": [
                    516
                ],
                "self._reindex_output": [
                    1569,
                    997,
                    520,
                    977,
                    1012,
                    1590
                ],
                "coerce": [
                    530,
                    525
                ],
                "Timestamp": [
                    525
                ],
                "_convert": [
                    529,
                    977,
                    1590,
                    1569
                ],
                "applied": [
                    587,
                    540,
                    581,
                    583
                ],
                "gen": [
                    546,
                    740,
                    542,
                    742
                ],
                "self.grouper.get_iterator": [
                    740,
                    542
                ],
                "fast_path": [
                    678,
                    647,
                    552,
                    554,
                    652,
                    656,
                    664,
                    543
                ],
                "slow_path": [
                    552,
                    648,
                    653,
                    656,
                    659,
                    660,
                    543
                ],
                "self._define_paths": [
                    543
                ],
                "path": [
                    672,
                    545,
                    675,
                    549,
                    678,
                    552,
                    680,
                    559,
                    659,
                    667
                ],
                "group": [
                    647,
                    648,
                    652,
                    653,
                    660,
                    664,
                    1050,
                    1051,
                    1052,
                    546,
                    547,
                    674,
                    552,
                    559,
                    566,
                    569,
                    570,
                    571,
                    574,
                    575,
                    577,
                    578,
                    742,
                    743,
                    745,
                    1136,
                    1017,
                    1018,
                    1019,
                    1022
                ],
                "object.__setattr__": [
                    1051,
                    547,
                    743
                ],
                "res": [
                    640,
                    641,
                    660,
                    667,
                    1052,
                    1054,
                    1055,
                    672,
                    1058,
                    675,
                    677,
                    552,
                    680,
                    1195,
                    1198,
                    559,
                    1200,
                    561,
                    1204,
                    1205,
                    1206,
                    568,
                    569,
                    1208,
                    574,
                    583,
                    745,
                    748,
                    753,
                    754,
                    760,
                    638
                ],
                "self._choose_path": [
                    552
                ],
                "self._transform_item_by_item": [
                    554
                ],
                "msg": [
                    1033,
                    1034,
                    556,
                    557,
                    1166,
                    911,
                    1167,
                    920,
                    600,
                    601
                ],
                "np.prod": [
                    566
                ],
                "group.shape": [
                    566,
                    575
                ],
                "res.index.is_": [
                    568
                ],
                "res.index": [
                    568
                ],
                "obj.index": [
                    643,
                    585,
                    1526,
                    568,
                    700
                ],
                "r": [
                    581,
                    569,
                    570,
                    571,
                    573
                ],
                "group.columns": [
                    577,
                    569,
                    570,
                    674
                ],
                "r.columns": [
                    570
                ],
                "r.index": [
                    571
                ],
                "group.index": [
                    578,
                    571,
                    574
                ],
                "reshape": [
                    574
                ],
                "res.values": [
                    574
                ],
                "applied.append": [
                    581,
                    583
                ],
                "concat_index": [
                    585,
                    588
                ],
                "other_axis": [
                    586,
                    588
                ],
                "concatenated": [
                    587,
                    588,
                    589
                ],
                "concatenated.reindex": [
                    588
                ],
                "self._set_result_index_ordered": [
                    589
                ],
                "self._get_cython_func": [
                    1029,
                    596,
                    877
                ],
                "base.transform_kernel_whitelist": [
                    1032,
                    599
                ],
                "base": [
                    768,
                    1383,
                    1032,
                    1386,
                    1035,
                    599,
                    602,
                    766
                ],
                "msg.format": [
                    601,
                    1034
                ],
                "base.cythonized_kernels": [
                    602,
                    1035
                ],
                "self._transform_general": [
                    611,
                    621,
                    615
                ],
                "result.columns.equals": [
                    620
                ],
                "self._transform_fast": [
                    1042,
                    623
                ],
                "Substitution": [
                    1472,
                    841,
                    1026,
                    591
                ],
                "Appender": [
                    833,
                    1027,
                    1479,
                    592,
                    848,
                    1210
                ],
                "_transform_template": [
                    592,
                    1027
                ],
                "func_nm": [
                    1089,
                    631
                ],
                "ids": [
                    1155,
                    1287,
                    1289,
                    1164,
                    1169,
                    1297,
                    1174,
                    1178,
                    1191,
                    1194,
                    1206,
                    1088,
                    1090,
                    1348,
                    1351,
                    1352,
                    1354,
                    1235,
                    1620,
                    1621,
                    1239,
                    1240,
                    1629,
                    1255,
                    1257,
                    1259,
                    1262,
                    635,
                    638
                ],
                "ngroup": [
                    1088,
                    635
                ],
                "self.grouper.group_info": [
                    1088,
                    1155,
                    1348,
                    1235,
                    1620,
                    635
                ],
                "algorithms.take_1d": [
                    1090,
                    638
                ],
                "algorithms": [
                    1168,
                    1090,
                    1243,
                    638
                ],
                "obj.iloc": [
                    640
                ],
                "output.append": [
                    641
                ],
                "DataFrame._from_arrays": [
                    643
                ],
                "group.apply": [
                    648,
                    653
                ],
                "res_fast": [
                    664,
                    674,
                    677,
                    671
                ],
                "res_fast.columns.equals": [
                    674
                ],
                "res_fast.columns": [
                    674
                ],
                "res_fast.equals": [
                    677
                ],
                "inds": [
                    689,
                    698,
                    685
                ],
                "col": [
                    686,
                    688,
                    1685,
                    861,
                    1694
                ],
                "transform": [
                    688
                ],
                "inds.append": [
                    689
                ],
                "columns.take": [
                    698
                ],
                "indices": [
                    737,
                    1135,
                    755,
                    1143,
                    763
                ],
                "res.squeeze": [
                    748
                ],
                "is_bool": [
                    753
                ],
                "is_scalar": [
                    753
                ],
                "isna": [
                    753,
                    1161,
                    1172,
                    1351
                ],
                "notna": [
                    754,
                    1132
                ],
                "indices.append": [
                    755
                ],
                "self._get_index": [
                    1136,
                    1057,
                    755
                ],
                "self._apply_filter": [
                    763,
                    1143
                ],
                "dropna": [
                    1281,
                    1288,
                    1297,
                    1686,
                    1143,
                    763,
                    1278,
                    1183
                ],
                "_apply_whitelist": [
                    768,
                    1386
                ],
                "base.series_apply_whitelist": [
                    768,
                    766
                ],
                "self.obj.name": [
                    778,
                    1093
                ],
                "_agg_see_also_doc": [
                    1473,
                    842,
                    1390,
                    782
                ],
                "dedent": [
                    1400,
                    1390,
                    782,
                    911,
                    792
                ],
                "_agg_examples_doc": [
                    792,
                    1474,
                    843,
                    1400
                ],
                "apply": [
                    839
                ],
                "_apply_docs": [
                    834,
                    835
                ],
                "no_arg_message": [
                    864,
                    854
                ],
                "PY36": [
                    857,
                    1755
                ],
                "abc.Iterable": [
                    869
                ],
                "abc": [
                    869
                ],
                "ret": [
                    896,
                    899,
                    900,
                    873,
                    875,
                    890
                ],
                "ret.columns": [
                    875
                ],
                "cyfunc": [
                    877,
                    878,
                    879
                ],
                "self._aggregate_named": [
                    887
                ],
                "_shared_docs": [
                    848,
                    1479
                ],
                "arg": [
                    928,
                    932,
                    935,
                    905,
                    938,
                    922,
                    923,
                    924,
                    925
                ],
                "warnings.warn": [
                    920
                ],
                "warnings": [
                    920
                ],
                "arg.keys": [
                    922
                ],
                "arg.items": [
                    923
                ],
                "f": [
                    932,
                    933
                ],
                "columns.append": [
                    933
                ],
                "com.get_callable_name": [
                    1841,
                    933,
                    1774,
                    1783
                ],
                "results": [
                    1696,
                    1059,
                    1699,
                    1700,
                    1062,
                    937,
                    1065,
                    940,
                    1695,
                    1690,
                    952,
                    1048,
                    954,
                    957,
                    1694,
                    959
                ],
                "SpecificationError": [
                    941
                ],
                "copy.copy": [
                    949
                ],
                "copy": [
                    949
                ],
                "obj._reset_cache": [
                    950
                ],
                "obj._selection": [
                    951
                ],
                "obj.aggregate": [
                    952
                ],
                "results.values": [
                    954
                ],
                "self._selected_obj.name": [
                    970,
                    1076
                ],
                "self._wrap_output": [
                    980,
                    974
                ],
                "_get_index": [
                    1011,
                    996
                ],
                "result.stack": [
                    1000
                ],
                "self.observed": [
                    1000,
                    1515,
                    1509
                ],
                "result.name": [
                    1001,
                    1076
                ],
                "group.name": [
                    1018
                ],
                "self._selected_obj.__class__": [
                    1047
                ],
                "ABCDataFrame": [
                    1054
                ],
                "ABCSeries": [
                    1054
                ],
                "res._values": [
                    1055
                ],
                "results.append": [
                    1059
                ],
                "sort_index": [
                    1065
                ],
                "dtype": [
                    1072,
                    1073,
                    1074
                ],
                "self._selected_obj.dtype": [
                    1072
                ],
                "is_numeric_dtype": [
                    1073
                ],
                "maybe_downcast_to_dtype": [
                    1074
                ],
                "self._selected_obj.index": [
                    1077
                ],
                "out": [
                    1283,
                    1286,
                    1294,
                    1298,
                    1299,
                    1306,
                    1307,
                    1308,
                    1312,
                    1190,
                    1195,
                    1323,
                    1198,
                    1326,
                    1200,
                    1327,
                    1205,
                    1206,
                    1335,
                    1336,
                    1337,
                    1090,
                    1092,
                    1093,
                    1354,
                    1357,
                    1268
                ],
                "_values": [
                    1090
                ],
                "true_and_notna": [
                    1136
                ],
                "filtered": [
                    1144,
                    1143
                ],
                "self.obj._internal_get_values": [
                    1236,
                    1157,
                    1349
                ],
                "np.datetime64": [
                    1161
                ],
                "sorter": [
                    1255,
                    1257,
                    1259,
                    1164,
                    1326,
                    1327,
                    1169,
                    1298,
                    1299,
                    1174
                ],
                "np.lexsort": [
                    1255,
                    1257,
                    1164,
                    1326,
                    1169,
                    1298
                ],
                "val.dtype": [
                    1166,
                    1167
                ],
                "algorithms.factorize": [
                    1168,
                    1243
                ],
                "_isna": [
                    1170,
                    1172,
                    1182
                ],
                "a": [
                    1170
                ],
                "idx": [
                    1184,
                    1188,
                    1190,
                    1287,
                    1322,
                    1323,
                    1196,
                    1262,
                    1267,
                    1206,
                    1271,
                    1178,
                    1916
                ],
                "np.r_": [
                    1314,
                    1187,
                    1287,
                    1262,
                    1266,
                    1268,
                    1178,
                    1179
                ],
                "np.nonzero": [
                    1178,
                    1268,
                    1262
                ],
                "inc": [
                    1184,
                    1185,
                    1187,
                    1188,
                    1251,
                    1190,
                    1297,
                    1266,
                    1267,
                    1268,
                    1271,
                    1274,
                    1179,
                    1244
                ],
                "astype": [
                    1190
                ],
                "np.add.reduceat": [
                    1190,
                    1271
                ],
                "np.add": [
                    1290,
                    1190,
                    1271
                ],
                "np.flatnonzero": [
                    1196
                ],
                "ri": [
                    1208,
                    1201,
                    1204,
                    1205
                ],
                "out.dtype": [
                    1205
                ],
                "self.apply": [
                    1371,
                    1227,
                    1212
                ],
                "x.describe": [
                    1212
                ],
                "result.T": [
                    1588,
                    1214,
                    1567
                ],
                "result.unstack": [
                    1215
                ],
                "Series.describe.__doc__": [
                    1210
                ],
                "Series.describe": [
                    1210
                ],
                "bins": [
                    1248,
                    1224,
                    1296,
                    1232,
                    1301,
                    1242
                ],
                "np.iterable": [
                    1224
                ],
                "Series.value_counts": [
                    1228
                ],
                "normalize": [
                    1285,
                    1229
                ],
                "sort": [
                    1296,
                    1325,
                    1230
                ],
                "ascending": [
                    1298,
                    1326,
                    1231
                ],
                "lab": [
                    1248,
                    1249,
                    1250,
                    1251,
                    1313,
                    1253,
                    1314,
                    1255,
                    1257,
                    1289,
                    1259,
                    1265,
                    1330,
                    1274,
                    1243,
                    1244
                ],
                "lev": [
                    1249,
                    1250,
                    1548,
                    1550,
                    1275,
                    1243
                ],
                "llab": [
                    1265,
                    1274,
                    1251,
                    1244
                ],
                "cut": [
                    1248
                ],
                "lab.cat.categories": [
                    1249
                ],
                "lab.cat": [
                    1249,
                    1250
                ],
                "lev.take": [
                    1250
                ],
                "lab.cat.codes": [
                    1250
                ],
                "_multiindex.codes": [
                    1251
                ],
                "_multiindex": [
                    1251
                ],
                "is_interval_dtype": [
                    1253
                ],
                "lab.left": [
                    1255
                ],
                "lab.right": [
                    1255
                ],
                "lchanges": [
                    1265,
                    1266
                ],
                "np.diff": [
                    1268,
                    1287
                ],
                "rep": [
                    1274,
                    1291,
                    1293,
                    1271
                ],
                "partial": [
                    1629,
                    1271
                ],
                "np.repeat": [
                    1330,
                    1318,
                    1271
                ],
                "self.grouper.recons_labels": [
                    1274
                ],
                "levels": [
                    1275,
                    1316,
                    1333,
                    1303
                ],
                "mask.all": [
                    1280
                ],
                "label": [
                    1283
                ],
                "out.astype": [
                    1286
                ],
                "d": [
                    1290,
                    1291,
                    1293,
                    1287
                ],
                "m": [
                    1289,
                    1290
                ],
                "np.add.at": [
                    1290
                ],
                "acc": [
                    1291,
                    1293,
                    1294
                ],
                "cat": [
                    1297,
                    1298
                ],
                "mi": [
                    1337,
                    1308,
                    1333,
                    1302
                ],
                "is_integer_dtype": [
                    1306,
                    1335
                ],
                "ensure_int64": [
                    1336,
                    1307
                ],
                "diff": [
                    1312,
                    1314,
                    1316,
                    1320,
                    1330
                ],
                "ncat": [
                    1316,
                    1318
                ],
                "nbin": [
                    1330,
                    1316,
                    1318
                ],
                "diff.sum": [
                    1316
                ],
                "left": [
                    1318,
                    1322,
                    1326,
                    1327,
                    1331
                ],
                "np.tile": [
                    1318
                ],
                "right": [
                    1320,
                    1322
                ],
                "diff.cumsum": [
                    1320
                ],
                "_get_join_indexers": [
                    1322
                ],
                "np.where": [
                    1323
                ],
                "codes": [
                    1330,
                    1331,
                    1333
                ],
                "codes.append": [
                    1331
                ],
                "ngroups": [
                    1353,
                    1348,
                    1629,
                    1620
                ],
                "ensure_platform_int": [
                    1352
                ],
                "minlength": [
                    1353,
                    1354
                ],
                "np.bincount": [
                    1354
                ],
                "freq": [
                    1370,
                    1373,
                    1378
                ],
                "x.pct_change": [
                    1372
                ],
                "periods": [
                    1378,
                    1373
                ],
                "fill_method": [
                    1376,
                    1373
                ],
                "limit": [
                    1376,
                    1373
                ],
                "filled": [
                    1376,
                    1377,
                    1380
                ],
                "fill_grp": [
                    1377,
                    1378
                ],
                "filled.groupby": [
                    1377
                ],
                "self.grouper.labels": [
                    1377
                ],
                "shifted": [
                    1378,
                    1380
                ],
                "fill_grp.shift": [
                    1378
                ],
                "pin_whitelisted_properties": [
                    766,
                    1383
                ],
                "NDFrameGroupBy": [
                    1384
                ],
                "base.dataframe_apply_whitelist": [
                    1386,
                    1383
                ],
                "ndim": [
                    1499,
                    1511
                ],
                "subset": [
                    1512,
                    1513,
                    1515,
                    1500,
                    1501,
                    1503
                ],
                "DataFrameGroupBy": [
                    1502
                ],
                "key": [
                    1888,
                    1505,
                    1513,
                    1515,
                    1882
                ],
                "result_index": [
                    1521,
                    1524,
                    1526
                ],
                "self.grouper.levels": [
                    1521
                ],
                "T": [
                    1524
                ],
                "obj.T._data": [
                    1531
                ],
                "obj.T": [
                    1531
                ],
                "obj._data": [
                    1533
                ],
                "izip": [
                    1537,
                    1548
                ],
                "self.grouper.get_group_levels": [
                    1542
                ],
                "grp.in_axis": [
                    1543
                ],
                "grp": [
                    1543
                ],
                "in_axis": [
                    1548,
                    1549
                ],
                "result.insert": [
                    1550
                ],
                "agg_labels": [
                    1554,
                    1556
                ],
                "self._obj_with_exclusions._get_axis": [
                    1554
                ],
                "self._decide_output_index": [
                    1556
                ],
                "result._consolidate": [
                    1561,
                    1581
                ],
                "values.shape": [
                    1576
                ],
                "blocks": [
                    1576,
                    1577,
                    1584
                ],
                "mgr": [
                    1584,
                    1577,
                    1578,
                    1585
                ],
                "BlockManager": [
                    1584,
                    1577
                ],
                "items": [
                    1584,
                    1577
                ],
                "colname": [
                    1593,
                    1594,
                    1596
                ],
                "self._selected_obj.iloc": [
                    1595
                ],
                "col_groupby": [
                    1605
                ],
                "self._iterate_column_groupbys": [
                    1605
                ],
                "_isna_ndarraylike": [
                    1624
                ],
                "np.atleast_2d": [
                    1624
                ],
                "blk.get_values": [
                    1624
                ],
                "blk": [
                    1632,
                    1624,
                    1625,
                    1627,
                    1630
                ],
                "blk.mgr_locs": [
                    1627
                ],
                "counter": [
                    1629,
                    1630
                ],
                "lib.count_level_2d": [
                    1629
                ],
                "lib": [
                    1629
                ],
                "make_block": [
                    1630
                ],
                "nunique": [
                    1685
                ],
                "groupby_series": [
                    1690,
                    1694
                ],
                "results.columns.names": [
                    1696
                ],
                "results.columns": [
                    1696
                ],
                "obj.columns.names": [
                    1696
                ],
                "results.index": [
                    1699
                ],
                "ibase.default_index": [
                    1699
                ],
                "ibase": [
                    1699
                ],
                "boxplot": [
                    1702
                ],
                "boxplot_frame_groupby": [
                    1702
                ],
                "kwargs.values": [
                    1727
                ],
                "kwargs.items": [
                    1756,
                    1767
                ],
                "aggspec": [
                    1765,
                    1770,
                    1771,
                    1773,
                    1784,
                    1791
                ],
                "pairs": [
                    1769,
                    1767
                ],
                "column": [
                    1769,
                    1770,
                    1771,
                    1773,
                    1774,
                    1783,
                    1784
                ],
                "aggfunc": [
                    1769,
                    1771,
                    1773,
                    1774,
                    1840,
                    1841,
                    1842,
                    1843,
                    1845,
                    1783,
                    1785
                ],
                "append": [
                    1771
                ],
                "order.append": [
                    1774
                ],
                "uniquified_order": [
                    1777,
                    1790
                ],
                "_make_unique": [
                    1777,
                    1787
                ],
                "aggspec_order": [
                    1787,
                    1782
                ],
                "aggfuncs": [
                    1835,
                    1837,
                    1840,
                    1784,
                    1785,
                    1882,
                    1883,
                    1884,
                    1886
                ],
                "aggspec.items": [
                    1784
                ],
                "uniquified_aggspec": [
                    1787,
                    1790
                ],
                "col_idx_order": [
                    1790,
                    1791
                ],
                "get_indexer": [
                    1790
                ],
                "seq.count": [
                    1804
                ],
                "seq": [
                    1803,
                    1804,
                    1806
                ],
                "pair": [
                    1803,
                    1804,
                    1805,
                    1806
                ],
                "join": [
                    1803
                ],
                "count": [
                    1803
                ],
                "Sequence": [
                    1817
                ],
                "mangled_aggfuncs": [
                    1888,
                    1839,
                    1845,
                    1847,
                    1884,
                    1886
                ],
                "functools.partial": [
                    1842
                ],
                "functools": [
                    1842
                ],
                "aggfunc.__name__": [
                    1843
                ],
                "mangled_aggfuncs.append": [
                    1845
                ],
                "is_dict": [
                    1881,
                    1876,
                    1877
                ],
                "is_dict_like": [
                    1883,
                    1876
                ],
                "agg_spec": [
                    1890,
                    1876,
                    1877,
                    1878,
                    1879,
                    1882
                ],
                "is_list_like": [
                    1883,
                    1877
                ],
                "mangled_aggspec": [
                    1888,
                    1890,
                    1892,
                    1879
                ],
                "agg_spec.items": [
                    1882
                ],
                "_managle_lambda_list": [
                    1890,
                    1884
                ],
                "result.copy": [
                    1913
                ],
                "obj_cols": [
                    1920,
                    1915
                ],
                "is_object_dtype": [
                    1916
                ],
                "result.dtypes": [
                    1916
                ],
                "n": [
                    1920,
                    1922,
                    1925
                ],
                "converted": [
                    1921,
                    1925
                ],
                "maybe_convert_objects": [
                    1921
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_140/pandas/tests/groupby/test_apply.py",
                "test_function": "test_apply_datetime_issue",
                "test_function_code": "@pytest.mark.parametrize(\n    \"group_column_dtlike\",\n    [datetime.today(), datetime.today().date(), datetime.today().time()],\n)\ndef test_apply_datetime_issue(group_column_dtlike):\n    # GH-28247\n    # groupby-apply throws an error if one of the columns in the DataFrame\n    #   is a datetime object and the column labels are different from\n    #   standard int values in range(len(num_columns))\n\n    df = pd.DataFrame({\"a\": [\"foo\"], \"b\": [group_column_dtlike]})\n    result = df.groupby(\"a\").apply(lambda x: pd.Series([\"spam\"], index=[42]))\n\n    expected = pd.DataFrame(\n        [\"spam\"], Index([\"foo\"], dtype=\"object\", name=\"a\"), columns=[42]\n    )\n    tm.assert_frame_equal(result, expected)",
                "test_error": "KeyError: 0",
                "full_test_error": "group_column_dtlike = datetime.datetime(2023, 12, 10, 10, 33, 38, 348614)\n\n    @pytest.mark.parametrize(\n        \"group_column_dtlike\",\n        [datetime.today(), datetime.today().date(), datetime.today().time()],\n    )\n    def test_apply_datetime_issue(group_column_dtlike):\n        # GH-28247\n        # groupby-apply throws an error if one of the columns in the DataFrame\n        #   is a datetime object and the column labels are different from\n        #   standard int values in range(len(num_columns))\n    \n        df = pd.DataFrame({\"a\": [\"foo\"], \"b\": [group_column_dtlike]})\n>       result = df.groupby(\"a\").apply(lambda x: pd.Series([\"spam\"], index=[42]))\n\npandas/tests/groupby/test_apply.py:673: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:727: in apply\n    result = self._python_apply_general(f)\npandas/core/groupby/groupby.py:745: in _python_apply_general\n    return self._wrap_applied_output(\npandas/core/groupby/generic.py:516: in _wrap_applied_output\n    result = _recast_datetimelike_result(result)\npandas/core/groupby/generic.py:1915: in _recast_datetimelike_result\n    obj_cols = [\npandas/core/groupby/generic.py:1916: in <listcomp>\n    idx for idx in range(len(result.columns)) if is_object_dtype(result.dtypes[idx])\npandas/core/series.py:1081: in __getitem__\n    result = self.index.get_value(self, key)\npandas/core/indexes/base.py:4658: in get_value\n    return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\npandas/_libs/index.pyx:77: in pandas._libs.index.IndexEngine.get_value\n    cpdef get_value(self, ndarray arr, object key, object tz=None):\npandas/_libs/index.pyx:85: in pandas._libs.index.IndexEngine.get_value\n    loc = self.get_loc(key)\npandas/_libs/index.pyx:128: in pandas._libs.index.IndexEngine.get_loc\n    return self.mapping.get_item(val)\npandas/_libs/hashtable_class_helper.pxi:992: in pandas._libs.hashtable.Int64HashTable.get_item\n    cpdef get_item(self, int64_t val):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise KeyError(val)\nE   KeyError: 0\n\npandas/_libs/hashtable_class_helper.pxi:998: KeyError",
                "traceback": "pandas/core/groupby/groupby.py:727: in apply\n    result = self._python_apply_general(f)\npandas/core/groupby/groupby.py:745: in _python_apply_general\n    return self._wrap_applied_output(\npandas/core/groupby/generic.py:516: in _wrap_applied_output\n    result = _recast_datetimelike_result(result)\npandas/core/groupby/generic.py:1915: in _recast_datetimelike_result\n    obj_cols = [\npandas/core/groupby/generic.py:1916: in <listcomp>\n    idx for idx in range(len(result.columns)) if is_object_dtype(result.dtypes[idx])\npandas/core/series.py:1081: in __getitem__\n    result = self.index.get_value(self, key)\npandas/core/indexes/base.py:4658: in get_value\n    return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\npandas/_libs/index.pyx:77: in pandas._libs.index.IndexEngine.get_value\n    cpdef get_value(self, ndarray arr, object key, object tz=None):\npandas/_libs/index.pyx:85: in pandas._libs.index.IndexEngine.get_value\n    loc = self.get_loc(key)\npandas/_libs/index.pyx:128: in pandas._libs.index.IndexEngine.get_loc\n    return self.mapping.get_item(val)\npandas/_libs/hashtable_class_helper.pxi:992: in pandas._libs.hashtable.Int64HashTable.get_item\n    cpdef get_item(self, int64_t val):",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise KeyError(val)\nE   KeyError: 0\n\npandas/_libs/hashtable_class_helper.pxi:998: KeyError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('group_column_dtlike', [datetime.today(), datetime.today().date(), datetime.today().time()])"
                ]
            }
        ]
    }
}