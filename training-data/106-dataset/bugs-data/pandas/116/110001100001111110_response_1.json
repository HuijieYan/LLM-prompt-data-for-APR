{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 924,
            "file_name": "/pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n    \n    Parameters\n    ----------\n    left\n    right\n    on\n    \n    Returns\n    -------\n    left_keys, right_keys\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    \n    left, right = self.left, self.right\n    \n    is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n    is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n    \n    # Note that pd.merge_asof() has separate 'on' and 'by' parameters. A\n    # user could, for example, request 'left_index' and 'left_by'. In a\n    # regular pd.merge(), users cannot specify both 'left_index' and\n    # 'left_on'. (Instead, users have a MultiIndex). That means the\n    # self.left_on in this function is always empty in a pd.merge(), but\n    # a pd.merge_asof(left_index=True, left_by=...) will result in a\n    # self.left_on array with a None in the middle of it. This requires\n    # a work-around as designated in the code below.\n    # See _validate_specification() for where this happens.\n    \n    # ugh, spaghetti re #733\n    if (_any(self.left_on) and _any(self.right_on)):\n        for lk, rk in zip(self.left_on, self.right_on):\n            left_keys.append(left.index)\n            right_keys.append(right.index)\n            join_names.append(lk)\n    elif _any(self.left_on):\n        for k in self.left_on:\n            left_keys.append(left.index.values)\n            right_keys.append(right.index.values)\n            join_names.append(k)\n        if isinstance(self.right.index, MultiIndex):\n            right_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    self.right.index.levels, self.right.index.codes\n                )\n            ]\n        else:\n            right_keys = [self.right.index._values]\n    elif _any(self.right_on):\n        for k in self.right_on:\n            right_keys.append(k)\n            join_names.append(None)\n        if isinstance(self.left.index, MultiIndex):\n            left_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    self.left.index.levels, self.left.index.codes\n                )\n            ]\n        else:\n            left_keys = [self.left.index.values]\n    \n    \n    return left_keys, right_keys, join_names"
        }
    ]
}