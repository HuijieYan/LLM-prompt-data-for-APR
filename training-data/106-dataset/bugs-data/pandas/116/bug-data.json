{
    "pandas:116": {
        "/Volumes/SSD2T/bgp_envs/repos/pandas_116/pandas/core/reshape/merge.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_merge_keys",
                    "function_code": "def _get_merge_keys(self):\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n\n    Parameters\n    ----------\n    left\n    right\n    on\n\n    Returns\n    -------\n    left_keys, right_keys\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n\n    left, right = self.left, self.right\n\n    is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n    is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n\n    # Note that pd.merge_asof() has separate 'on' and 'by' parameters. A\n    # user could, for example, request 'left_index' and 'left_by'. In a\n    # regular pd.merge(), users cannot specify both 'left_index' and\n    # 'left_on'. (Instead, users have a MultiIndex). That means the\n    # self.left_on in this function is always empty in a pd.merge(), but\n    # a pd.merge_asof(left_index=True, left_by=...) will result in a\n    # self.left_on array with a None in the middle of it. This requires\n    # a work-around as designated in the code below.\n    # See _validate_specification() for where this happens.\n\n    # ugh, spaghetti re #733\n    if _any(self.left_on) and _any(self.right_on):\n        for lk, rk in zip(self.left_on, self.right_on):\n            if is_lkey(lk):\n                left_keys.append(lk)\n                if is_rkey(rk):\n                    right_keys.append(rk)\n                    join_names.append(None)  # what to do?\n                else:\n                    if rk is not None:\n                        right_keys.append(right._get_label_or_level_values(rk))\n                        join_names.append(rk)\n                    else:\n                        # work-around for merge_asof(right_index=True)\n                        right_keys.append(right.index)\n                        join_names.append(right.index.name)\n            else:\n                if not is_rkey(rk):\n                    if rk is not None:\n                        right_keys.append(right._get_label_or_level_values(rk))\n                    else:\n                        # work-around for merge_asof(right_index=True)\n                        right_keys.append(right.index)\n                    if lk is not None and lk == rk:\n                        # avoid key upcast in corner case (length-0)\n                        if len(left) > 0:\n                            right_drop.append(rk)\n                        else:\n                            left_drop.append(lk)\n                else:\n                    right_keys.append(rk)\n                if lk is not None:\n                    left_keys.append(left._get_label_or_level_values(lk))\n                    join_names.append(lk)\n                else:\n                    # work-around for merge_asof(left_index=True)\n                    left_keys.append(left.index)\n                    join_names.append(left.index.name)\n    elif _any(self.left_on):\n        for k in self.left_on:\n            if is_lkey(k):\n                left_keys.append(k)\n                join_names.append(None)\n            else:\n                left_keys.append(left._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(self.right.index, MultiIndex):\n            right_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    self.right.index.levels, self.right.index.codes\n                )\n            ]\n        else:\n            right_keys = [self.right.index._values]\n    elif _any(self.right_on):\n        for k in self.right_on:\n            if is_rkey(k):\n                right_keys.append(k)\n                join_names.append(None)\n            else:\n                right_keys.append(right._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(self.left.index, MultiIndex):\n            left_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    self.left.index.levels, self.left.index.codes\n                )\n            ]\n        else:\n            left_keys = [self.left.index.values]\n\n    if left_drop:\n        self.left = self.left._drop_labels_or_levels(left_drop)\n\n    if right_drop:\n        self.right = self.right._drop_labels_or_levels(right_drop)\n\n    return left_keys, right_keys, join_names\n",
                    "decorators": [],
                    "docstring": "Note: has side effects (copy/delete key columns)\n\nParameters\n----------\nleft\nright\non\n\nReturns\n-------\nleft_keys, right_keys",
                    "start_line": 924,
                    "end_line": 1038,
                    "variables": {
                        "left_keys": [
                            963,
                            995,
                            1030,
                            1000,
                            938,
                            1003,
                            1038,
                            1023,
                            991
                        ],
                        "right_keys": [
                            965,
                            969,
                            939,
                            973,
                            1006,
                            1038,
                            978,
                            981,
                            1013,
                            1017,
                            1020,
                            989
                        ],
                        "join_names": [
                            992,
                            996,
                            966,
                            1001,
                            970,
                            940,
                            1004,
                            974,
                            1038,
                            1018,
                            1021
                        ],
                        "right_drop": [
                            985,
                            1035,
                            1036,
                            941
                        ],
                        "left_drop": [
                            1032,
                            1033,
                            987,
                            942
                        ],
                        "left": [
                            995,
                            996,
                            1003,
                            944,
                            946,
                            984,
                            991
                        ],
                        "right": [
                            969,
                            973,
                            974,
                            944,
                            978,
                            947,
                            981,
                            1020
                        ],
                        "self.left": [
                            1026,
                            1030,
                            1033,
                            944,
                            1022
                        ],
                        "self": [
                            960,
                            961,
                            1026,
                            997,
                            998,
                            1030,
                            1033,
                            1036,
                            1005,
                            944,
                            1009,
                            1013,
                            1014,
                            1015,
                            1022
                        ],
                        "self.right": [
                            1036,
                            1005,
                            944,
                            1009,
                            1013
                        ],
                        "is_lkey": [
                            962,
                            946,
                            999
                        ],
                        "is_array_like": [
                            946,
                            947
                        ],
                        "x": [
                            946,
                            947
                        ],
                        "len": [
                            984,
                            946,
                            947
                        ],
                        "is_rkey": [
                            976,
                            1016,
                            947,
                            964
                        ],
                        "_any": [
                            960,
                            997,
                            1014
                        ],
                        "self.left_on": [
                            960,
                            961,
                            997,
                            998
                        ],
                        "self.right_on": [
                            960,
                            961,
                            1014,
                            1015
                        ],
                        "lk": [
                            992,
                            961,
                            962,
                            963,
                            982,
                            987,
                            990,
                            991
                        ],
                        "rk": [
                            961,
                            964,
                            965,
                            968,
                            969,
                            970,
                            976,
                            977,
                            978,
                            982,
                            985,
                            989
                        ],
                        "zip": [
                            1008,
                            961,
                            1025
                        ],
                        "left_keys.append": [
                            963,
                            995,
                            1000,
                            1003,
                            991
                        ],
                        "right_keys.append": [
                            965,
                            969,
                            973,
                            978,
                            981,
                            1017,
                            1020,
                            989
                        ],
                        "join_names.append": [
                            992,
                            996,
                            966,
                            1001,
                            970,
                            1004,
                            974,
                            1018,
                            1021
                        ],
                        "right._get_label_or_level_values": [
                            969,
                            978,
                            1020
                        ],
                        "right.index": [
                            981,
                            973,
                            974
                        ],
                        "right.index.name": [
                            974
                        ],
                        "right_drop.append": [
                            985
                        ],
                        "left_drop.append": [
                            987
                        ],
                        "left._get_label_or_level_values": [
                            1003,
                            991
                        ],
                        "left.index": [
                            995,
                            996
                        ],
                        "left.index.name": [
                            996
                        ],
                        "k": [
                            998,
                            999,
                            1000,
                            1003,
                            1004,
                            1015,
                            1016,
                            1017,
                            1020,
                            1021
                        ],
                        "isinstance": [
                            1005,
                            1022
                        ],
                        "self.right.index": [
                            1009,
                            1005,
                            1013
                        ],
                        "MultiIndex": [
                            1005,
                            1022
                        ],
                        "lev._values.take": [
                            1024,
                            1007
                        ],
                        "lev._values": [
                            1024,
                            1007
                        ],
                        "lev": [
                            1008,
                            1024,
                            1025,
                            1007
                        ],
                        "lev_codes": [
                            1008,
                            1024,
                            1025,
                            1007
                        ],
                        "self.right.index.levels": [
                            1009
                        ],
                        "self.right.index.codes": [
                            1009
                        ],
                        "self.right.index._values": [
                            1013
                        ],
                        "self.left.index": [
                            1026,
                            1022,
                            1030
                        ],
                        "self.left.index.levels": [
                            1026
                        ],
                        "self.left.index.codes": [
                            1026
                        ],
                        "self.left.index.values": [
                            1030
                        ],
                        "self.left._drop_labels_or_levels": [
                            1033
                        ],
                        "self.right._drop_labels_or_levels": [
                            1036
                        ]
                    },
                    "filtered_variables": {
                        "left_keys": [
                            963,
                            995,
                            1030,
                            1000,
                            938,
                            1003,
                            1038,
                            1023,
                            991
                        ],
                        "right_keys": [
                            965,
                            969,
                            939,
                            973,
                            1006,
                            1038,
                            978,
                            981,
                            1013,
                            1017,
                            1020,
                            989
                        ],
                        "join_names": [
                            992,
                            996,
                            966,
                            1001,
                            970,
                            940,
                            1004,
                            974,
                            1038,
                            1018,
                            1021
                        ],
                        "right_drop": [
                            985,
                            1035,
                            1036,
                            941
                        ],
                        "left_drop": [
                            1032,
                            1033,
                            987,
                            942
                        ],
                        "left": [
                            995,
                            996,
                            1003,
                            944,
                            946,
                            984,
                            991
                        ],
                        "right": [
                            969,
                            973,
                            974,
                            944,
                            978,
                            947,
                            981,
                            1020
                        ],
                        "self.left": [
                            1026,
                            1030,
                            1033,
                            944,
                            1022
                        ],
                        "self": [
                            960,
                            961,
                            1026,
                            997,
                            998,
                            1030,
                            1033,
                            1036,
                            1005,
                            944,
                            1009,
                            1013,
                            1014,
                            1015,
                            1022
                        ],
                        "self.right": [
                            1036,
                            1005,
                            944,
                            1009,
                            1013
                        ],
                        "is_lkey": [
                            962,
                            946,
                            999
                        ],
                        "is_array_like": [
                            946,
                            947
                        ],
                        "x": [
                            946,
                            947
                        ],
                        "is_rkey": [
                            976,
                            1016,
                            947,
                            964
                        ],
                        "_any": [
                            960,
                            997,
                            1014
                        ],
                        "self.left_on": [
                            960,
                            961,
                            997,
                            998
                        ],
                        "self.right_on": [
                            960,
                            961,
                            1014,
                            1015
                        ],
                        "lk": [
                            992,
                            961,
                            962,
                            963,
                            982,
                            987,
                            990,
                            991
                        ],
                        "rk": [
                            961,
                            964,
                            965,
                            968,
                            969,
                            970,
                            976,
                            977,
                            978,
                            982,
                            985,
                            989
                        ],
                        "left_keys.append": [
                            963,
                            995,
                            1000,
                            1003,
                            991
                        ],
                        "right_keys.append": [
                            965,
                            969,
                            973,
                            978,
                            981,
                            1017,
                            1020,
                            989
                        ],
                        "join_names.append": [
                            992,
                            996,
                            966,
                            1001,
                            970,
                            1004,
                            974,
                            1018,
                            1021
                        ],
                        "right._get_label_or_level_values": [
                            969,
                            978,
                            1020
                        ],
                        "right.index": [
                            981,
                            973,
                            974
                        ],
                        "right.index.name": [
                            974
                        ],
                        "right_drop.append": [
                            985
                        ],
                        "left_drop.append": [
                            987
                        ],
                        "left._get_label_or_level_values": [
                            1003,
                            991
                        ],
                        "left.index": [
                            995,
                            996
                        ],
                        "left.index.name": [
                            996
                        ],
                        "k": [
                            998,
                            999,
                            1000,
                            1003,
                            1004,
                            1015,
                            1016,
                            1017,
                            1020,
                            1021
                        ],
                        "self.right.index": [
                            1009,
                            1005,
                            1013
                        ],
                        "MultiIndex": [
                            1005,
                            1022
                        ],
                        "lev._values.take": [
                            1024,
                            1007
                        ],
                        "lev._values": [
                            1024,
                            1007
                        ],
                        "lev": [
                            1008,
                            1024,
                            1025,
                            1007
                        ],
                        "lev_codes": [
                            1008,
                            1024,
                            1025,
                            1007
                        ],
                        "self.right.index.levels": [
                            1009
                        ],
                        "self.right.index.codes": [
                            1009
                        ],
                        "self.right.index._values": [
                            1013
                        ],
                        "self.left.index": [
                            1026,
                            1022,
                            1030
                        ],
                        "self.left.index.levels": [
                            1026
                        ],
                        "self.left.index.codes": [
                            1026
                        ],
                        "self.left.index.values": [
                            1030
                        ],
                        "self.left._drop_labels_or_levels": [
                            1033
                        ],
                        "self.right._drop_labels_or_levels": [
                            1036
                        ]
                    },
                    "diff_line_number": 1030,
                    "class_data": {
                        "signature": "class _MergeOperation()",
                        "docstring": "Perform a database (SQL) merge operation between two DataFrame or Series\nobjects using either columns as keys or their row indexes",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, left: Union['Series', 'DataFrame'], right: Union['Series', 'DataFrame'], how: str='inner', on=None, left_on=None, right_on=None, axis=1, left_index: bool=False, right_index: bool=False, sort: bool=True, suffixes=('_x', '_y'), copy: bool=True, indicator: bool=False, validate=None):\n    _left = _validate_operand(left)\n    _right = _validate_operand(right)\n    self.left = self.orig_left = _left\n    self.right = self.orig_right = _right\n    self.how = how\n    self.axis = axis\n    self.on = com.maybe_make_list(on)\n    self.left_on = com.maybe_make_list(left_on)\n    self.right_on = com.maybe_make_list(right_on)\n    self.copy = copy\n    self.suffixes = suffixes\n    self.sort = sort\n    self.left_index = left_index\n    self.right_index = right_index\n    self.indicator = indicator\n    self.indicator_name: Optional[str]\n    if isinstance(self.indicator, str):\n        self.indicator_name = self.indicator\n    elif isinstance(self.indicator, bool):\n        self.indicator_name = '_merge' if self.indicator else None\n    else:\n        raise ValueError('indicator option can only accept boolean or string arguments')\n    if not is_bool(left_index):\n        raise ValueError('left_index parameter must be of type bool, not {left_index}'.format(left_index=type(left_index)))\n    if not is_bool(right_index):\n        raise ValueError('right_index parameter must be of type bool, not {right_index}'.format(right_index=type(right_index)))\n    if _left.columns.nlevels != _right.columns.nlevels:\n        msg = 'merging between different levels can give an unintended result ({left} levels on the left, {right} on the right)'.format(left=_left.columns.nlevels, right=_right.columns.nlevels)\n        warnings.warn(msg, UserWarning)\n    self._validate_specification()\n    self.left_join_keys, self.right_join_keys, self.join_names = self._get_merge_keys()\n    self._maybe_coerce_merge_keys()\n    if validate is not None:\n        self._validate(validate)",
                            "def get_result(self):\n    if self.indicator:\n        self.left, self.right = self._indicator_pre_merge(self.left, self.right)\n    join_index, left_indexer, right_indexer = self._get_join_info()\n    ldata, rdata = (self.left._data, self.right._data)\n    lsuf, rsuf = self.suffixes\n    llabels, rlabels = _items_overlap_with_suffix(ldata.items, lsuf, rdata.items, rsuf)\n    lindexers = {1: left_indexer} if left_indexer is not None else {}\n    rindexers = {1: right_indexer} if right_indexer is not None else {}\n    result_data = concatenate_block_managers([(ldata, lindexers), (rdata, rindexers)], axes=[llabels.append(rlabels), join_index], concat_axis=0, copy=self.copy)\n    typ = self.left._constructor\n    result = typ(result_data).__finalize__(self, method=self._merge_type)\n    if self.indicator:\n        result = self._indicator_post_merge(result)\n    self._maybe_add_join_keys(result, left_indexer, right_indexer)\n    self._maybe_restore_index_levels(result)\n    return result",
                            "def _indicator_pre_merge(self, left: 'DataFrame', right: 'DataFrame') -> Tuple['DataFrame', 'DataFrame']:\n    columns = left.columns.union(right.columns)\n    for i in ['_left_indicator', '_right_indicator']:\n        if i in columns:\n            raise ValueError('Cannot use `indicator=True` option when data contains a column named {name}'.format(name=i))\n    if self.indicator_name in columns:\n        raise ValueError('Cannot use name of an existing column for indicator column')\n    left = left.copy()\n    right = right.copy()\n    left['_left_indicator'] = 1\n    left['_left_indicator'] = left['_left_indicator'].astype('int8')\n    right['_right_indicator'] = 2\n    right['_right_indicator'] = right['_right_indicator'].astype('int8')\n    return (left, right)",
                            "def _indicator_post_merge(self, result):\n    result['_left_indicator'] = result['_left_indicator'].fillna(0)\n    result['_right_indicator'] = result['_right_indicator'].fillna(0)\n    result[self.indicator_name] = Categorical(result['_left_indicator'] + result['_right_indicator'], categories=[1, 2, 3])\n    result[self.indicator_name] = result[self.indicator_name].cat.rename_categories(['left_only', 'right_only', 'both'])\n    result = result.drop(labels=['_left_indicator', '_right_indicator'], axis=1)\n    return result",
                            "def _maybe_restore_index_levels(self, result):\n    \"\"\"\n    Restore index levels specified as `on` parameters\n\n    Here we check for cases where `self.left_on` and `self.right_on` pairs\n    each reference an index level in their respective DataFrames. The\n    joined columns corresponding to these pairs are then restored to the\n    index of `result`.\n\n    **Note:** This method has side effects. It modifies `result` in-place\n\n    Parameters\n    ----------\n    result: DataFrame\n        merge result\n\n    Returns\n    -------\n    None\n    \"\"\"\n    names_to_restore = []\n    for name, left_key, right_key in zip(self.join_names, self.left_on, self.right_on):\n        if self.orig_left._is_level_reference(left_key) and self.orig_right._is_level_reference(right_key) and (name not in result.index.names):\n            names_to_restore.append(name)\n    if names_to_restore:\n        result.set_index(names_to_restore, inplace=True)",
                            "def _maybe_add_join_keys(self, result, left_indexer, right_indexer):\n    left_has_missing = None\n    right_has_missing = None\n    keys = zip(self.join_names, self.left_on, self.right_on)\n    for i, (name, lname, rname) in enumerate(keys):\n        if not _should_fill(lname, rname):\n            continue\n        take_left, take_right = (None, None)\n        if name in result:\n            if left_indexer is not None and right_indexer is not None:\n                if name in self.left:\n                    if left_has_missing is None:\n                        left_has_missing = (left_indexer == -1).any()\n                    if left_has_missing:\n                        take_right = self.right_join_keys[i]\n                        if not is_dtype_equal(result[name].dtype, self.left[name].dtype):\n                            take_left = self.left[name]._values\n                elif name in self.right:\n                    if right_has_missing is None:\n                        right_has_missing = (right_indexer == -1).any()\n                    if right_has_missing:\n                        take_left = self.left_join_keys[i]\n                        if not is_dtype_equal(result[name].dtype, self.right[name].dtype):\n                            take_right = self.right[name]._values\n        elif left_indexer is not None and is_array_like(self.left_join_keys[i]):\n            take_left = self.left_join_keys[i]\n            take_right = self.right_join_keys[i]\n        if take_left is not None or take_right is not None:\n            if take_left is None:\n                lvals = result[name]._values\n            else:\n                lfill = na_value_for_dtype(take_left.dtype)\n                lvals = algos.take_1d(take_left, left_indexer, fill_value=lfill)\n            if take_right is None:\n                rvals = result[name]._values\n            else:\n                rfill = na_value_for_dtype(take_right.dtype)\n                rvals = algos.take_1d(take_right, right_indexer, fill_value=rfill)\n            mask = left_indexer == -1\n            if mask.all():\n                key_col = rvals\n            else:\n                key_col = Index(lvals).where(~mask, rvals)\n            if result._is_label_reference(name):\n                result[name] = key_col\n            elif result._is_level_reference(name):\n                if isinstance(result.index, MultiIndex):\n                    key_col.name = name\n                    idx_list = [result.index.get_level_values(level_name) if level_name != name else key_col for level_name in result.index.names]\n                    result.set_index(idx_list, inplace=True)\n                else:\n                    result.index = Index(key_col, name=name)\n            else:\n                result.insert(i, name or 'key_{i}'.format(i=i), key_col)",
                            "def _get_join_indexers(self):\n    \"\"\" return the join indexers \"\"\"\n    return _get_join_indexers(self.left_join_keys, self.right_join_keys, sort=self.sort, how=self.how)",
                            "def _get_join_info(self):\n    left_ax = self.left._data.axes[self.axis]\n    right_ax = self.right._data.axes[self.axis]\n    if self.left_index and self.right_index and (self.how != 'asof'):\n        join_index, left_indexer, right_indexer = left_ax.join(right_ax, how=self.how, return_indexers=True, sort=self.sort)\n    elif self.right_index and self.how == 'left':\n        join_index, left_indexer, right_indexer = _left_join_on_index(left_ax, right_ax, self.left_join_keys, sort=self.sort)\n    elif self.left_index and self.how == 'right':\n        join_index, right_indexer, left_indexer = _left_join_on_index(right_ax, left_ax, self.right_join_keys, sort=self.sort)\n    else:\n        left_indexer, right_indexer = self._get_join_indexers()\n        if self.right_index:\n            if len(self.left) > 0:\n                join_index = self._create_join_index(self.left.index, self.right.index, left_indexer, right_indexer, how='right')\n            else:\n                join_index = self.right.index.take(right_indexer)\n                left_indexer = np.array([-1] * len(join_index))\n        elif self.left_index:\n            if len(self.right) > 0:\n                join_index = self._create_join_index(self.right.index, self.left.index, right_indexer, left_indexer, how='left')\n            else:\n                join_index = self.left.index.take(left_indexer)\n                right_indexer = np.array([-1] * len(join_index))\n        else:\n            join_index = Index(np.arange(len(left_indexer)))\n    if len(join_index) == 0:\n        join_index = join_index.astype(object)\n    return (join_index, left_indexer, right_indexer)",
                            "def _create_join_index(self, index: Index, other_index: Index, indexer, other_indexer, how: str='left'):\n    \"\"\"\n    Create a join index by rearranging one index to match another\n\n    Parameters\n    ----------\n    index: Index being rearranged\n    other_index: Index used to supply values not found in index\n    indexer: how to rearrange index\n    how: replacement is only necessary if indexer based on other_index\n\n    Returns\n    -------\n    join_index\n    \"\"\"\n    if self.how in (how, 'outer') and (not isinstance(other_index, MultiIndex)):\n        mask = indexer == -1\n        if np.any(mask):\n            fill_value = na_value_for_dtype(index.dtype, compat=False)\n            index = index.append(Index([fill_value]))\n    return index.take(indexer)",
                            "def _get_merge_keys(self):\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n\n    Parameters\n    ----------\n    left\n    right\n    on\n\n    Returns\n    -------\n    left_keys, right_keys\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    left, right = (self.left, self.right)\n    is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n    is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n    if _any(self.left_on) and _any(self.right_on):\n        for lk, rk in zip(self.left_on, self.right_on):\n            if is_lkey(lk):\n                left_keys.append(lk)\n                if is_rkey(rk):\n                    right_keys.append(rk)\n                    join_names.append(None)\n                elif rk is not None:\n                    right_keys.append(right._get_label_or_level_values(rk))\n                    join_names.append(rk)\n                else:\n                    right_keys.append(right.index)\n                    join_names.append(right.index.name)\n            else:\n                if not is_rkey(rk):\n                    if rk is not None:\n                        right_keys.append(right._get_label_or_level_values(rk))\n                    else:\n                        right_keys.append(right.index)\n                    if lk is not None and lk == rk:\n                        if len(left) > 0:\n                            right_drop.append(rk)\n                        else:\n                            left_drop.append(lk)\n                else:\n                    right_keys.append(rk)\n                if lk is not None:\n                    left_keys.append(left._get_label_or_level_values(lk))\n                    join_names.append(lk)\n                else:\n                    left_keys.append(left.index)\n                    join_names.append(left.index.name)\n    elif _any(self.left_on):\n        for k in self.left_on:\n            if is_lkey(k):\n                left_keys.append(k)\n                join_names.append(None)\n            else:\n                left_keys.append(left._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(self.right.index, MultiIndex):\n            right_keys = [lev._values.take(lev_codes) for lev, lev_codes in zip(self.right.index.levels, self.right.index.codes)]\n        else:\n            right_keys = [self.right.index._values]\n    elif _any(self.right_on):\n        for k in self.right_on:\n            if is_rkey(k):\n                right_keys.append(k)\n                join_names.append(None)\n            else:\n                right_keys.append(right._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(self.left.index, MultiIndex):\n            left_keys = [lev._values.take(lev_codes) for lev, lev_codes in zip(self.left.index.levels, self.left.index.codes)]\n        else:\n            left_keys = [self.left.index.values]\n    if left_drop:\n        self.left = self.left._drop_labels_or_levels(left_drop)\n    if right_drop:\n        self.right = self.right._drop_labels_or_levels(right_drop)\n    return (left_keys, right_keys, join_names)",
                            "def _maybe_coerce_merge_keys(self):\n    for lk, rk, name in zip(self.left_join_keys, self.right_join_keys, self.join_names):\n        if len(lk) and (not len(rk)) or (not len(lk) and len(rk)):\n            continue\n        lk_is_cat = is_categorical_dtype(lk)\n        rk_is_cat = is_categorical_dtype(rk)\n        lk_is_object = is_object_dtype(lk)\n        rk_is_object = is_object_dtype(rk)\n        if lk_is_cat and rk_is_cat:\n            if lk.is_dtype_equal(rk):\n                continue\n        elif lk_is_cat or rk_is_cat:\n            pass\n        elif is_dtype_equal(lk.dtype, rk.dtype):\n            continue\n        msg = 'You are trying to merge on {lk_dtype} and {rk_dtype} columns. If you wish to proceed you should use pd.concat'.format(lk_dtype=lk.dtype, rk_dtype=rk.dtype)\n        if is_numeric_dtype(lk) and is_numeric_dtype(rk):\n            if lk.dtype.kind == rk.dtype.kind:\n                continue\n            elif is_integer_dtype(rk) and is_float_dtype(lk):\n                if not (lk == lk.astype(rk.dtype))[~np.isnan(lk)].all():\n                    warnings.warn('You are merging on int and float columns where the float values are not equal to their int representation', UserWarning)\n                continue\n            elif is_float_dtype(rk) and is_integer_dtype(lk):\n                if not (rk == rk.astype(lk.dtype))[~np.isnan(rk)].all():\n                    warnings.warn('You are merging on int and float columns where the float values are not equal to their int representation', UserWarning)\n                continue\n            elif lib.infer_dtype(lk, skipna=False) == lib.infer_dtype(rk, skipna=False):\n                continue\n        elif lk_is_object and is_bool_dtype(rk) or (is_bool_dtype(lk) and rk_is_object):\n            pass\n        elif lk_is_object and is_numeric_dtype(rk) or (is_numeric_dtype(lk) and rk_is_object):\n            inferred_left = lib.infer_dtype(lk, skipna=False)\n            inferred_right = lib.infer_dtype(rk, skipna=False)\n            bool_types = ['integer', 'mixed-integer', 'boolean', 'empty']\n            string_types = ['string', 'unicode', 'mixed', 'bytes', 'empty']\n            if inferred_left in bool_types and inferred_right in bool_types:\n                pass\n            elif inferred_left in string_types and inferred_right not in string_types or (inferred_right in string_types and inferred_left not in string_types):\n                raise ValueError(msg)\n        elif needs_i8_conversion(lk) and (not needs_i8_conversion(rk)):\n            raise ValueError(msg)\n        elif not needs_i8_conversion(lk) and needs_i8_conversion(rk):\n            raise ValueError(msg)\n        elif is_datetime64tz_dtype(lk) and (not is_datetime64tz_dtype(rk)):\n            raise ValueError(msg)\n        elif not is_datetime64tz_dtype(lk) and is_datetime64tz_dtype(rk):\n            raise ValueError(msg)\n        elif lk_is_object and rk_is_object:\n            continue\n        if name in self.left.columns:\n            typ = lk.categories.dtype if lk_is_cat else object\n            self.left = self.left.assign(**{name: self.left[name].astype(typ)})\n        if name in self.right.columns:\n            typ = rk.categories.dtype if rk_is_cat else object\n            self.right = self.right.assign(**{name: self.right[name].astype(typ)})",
                            "def _validate_specification(self):\n    if self.on is None and self.left_on is None and (self.right_on is None):\n        if self.left_index and self.right_index:\n            self.left_on, self.right_on = ((), ())\n        elif self.left_index:\n            if self.right_on is None:\n                raise MergeError('Must pass right_on or right_index=True')\n        elif self.right_index:\n            if self.left_on is None:\n                raise MergeError('Must pass left_on or left_index=True')\n        else:\n            common_cols = self.left.columns.intersection(self.right.columns)\n            if len(common_cols) == 0:\n                raise MergeError('No common columns to perform merge on. Merge options: left_on={lon}, right_on={ron}, left_index={lidx}, right_index={ridx}'.format(lon=self.left_on, ron=self.right_on, lidx=self.left_index, ridx=self.right_index))\n            if not common_cols.is_unique:\n                raise MergeError('Data columns not unique: {common!r}'.format(common=common_cols))\n            self.left_on = self.right_on = common_cols\n    elif self.on is not None:\n        if self.left_on is not None or self.right_on is not None:\n            raise MergeError('Can only pass argument \"on\" OR \"left_on\" and \"right_on\", not a combination of both.')\n        self.left_on = self.right_on = self.on\n    elif self.left_on is not None:\n        n = len(self.left_on)\n        if self.right_index:\n            if len(self.left_on) != self.right.index.nlevels:\n                raise ValueError('len(left_on) must equal the number of levels in the index of \"right\"')\n            self.right_on = [None] * n\n    elif self.right_on is not None:\n        n = len(self.right_on)\n        if self.left_index:\n            if len(self.right_on) != self.left.index.nlevels:\n                raise ValueError('len(right_on) must equal the number of levels in the index of \"left\"')\n            self.left_on = [None] * n\n    if len(self.right_on) != len(self.left_on):\n        raise ValueError('len(right_on) must equal len(left_on)')",
                            "def _validate(self, validate: str):\n    if self.left_index:\n        left_unique = self.orig_left.index.is_unique\n    else:\n        left_unique = MultiIndex.from_arrays(self.left_join_keys).is_unique\n    if self.right_index:\n        right_unique = self.orig_right.index.is_unique\n    else:\n        right_unique = MultiIndex.from_arrays(self.right_join_keys).is_unique\n    if validate in ['one_to_one', '1:1']:\n        if not left_unique and (not right_unique):\n            raise MergeError('Merge keys are not unique in either left or right dataset; not a one-to-one merge')\n        elif not left_unique:\n            raise MergeError('Merge keys are not unique in left dataset; not a one-to-one merge')\n        elif not right_unique:\n            raise MergeError('Merge keys are not unique in right dataset; not a one-to-one merge')\n    elif validate in ['one_to_many', '1:m']:\n        if not left_unique:\n            raise MergeError('Merge keys are not unique in left dataset; not a one-to-many merge')\n    elif validate in ['many_to_one', 'm:1']:\n        if not right_unique:\n            raise MergeError('Merge keys are not unique in right dataset; not a many-to-one merge')\n    elif validate in ['many_to_many', 'm:m']:\n        pass\n    else:\n        raise ValueError('Not a valid argument for validate')"
                        ],
                        "constructor_variables": [
                            "how",
                            "indicator_name",
                            "sort",
                            "orig_left",
                            "right_index",
                            "indicator",
                            "right_on",
                            "axis",
                            "_left",
                            "_right",
                            "left_on",
                            "right",
                            "left_index",
                            "suffixes",
                            "on",
                            "copy",
                            "msg",
                            "left",
                            "orig_right"
                        ],
                        "class_level_variables": [
                            "_merge_type"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, left: Union['Series', 'DataFrame'], right: Union['Series', 'DataFrame'], how: str='inner', on=None, left_on=None, right_on=None, axis=1, left_index: bool=False, right_index: bool=False, sort: bool=True, suffixes=('_x', '_y'), copy: bool=True, indicator: bool=False, validate=None)",
                            "get_result(self)",
                            "_indicator_pre_merge(self, left: 'DataFrame', right: 'DataFrame') -> Tuple['DataFrame', 'DataFrame']",
                            "_indicator_post_merge(self, result)",
                            "_maybe_restore_index_levels(self, result)",
                            "_maybe_add_join_keys(self, result, left_indexer, right_indexer)",
                            "_get_join_indexers(self)",
                            "_get_join_info(self)",
                            "_create_join_index(self, index: Index, other_index: Index, indexer, other_indexer, how: str='left')",
                            "_get_merge_keys(self)",
                            "_maybe_coerce_merge_keys(self)",
                            "_validate_specification(self)",
                            "_validate(self, validate: str)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "left_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_drop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_drop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x116f99280>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "is_lkey": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_array_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_rkey": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left_on": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.right_on": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "lk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_keys.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_keys.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join_names.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right._get_label_or_level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_drop.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_drop.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._get_label_or_level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "left_keys": {
                                    "variable_value": "[array(['2019-10-01T00:30:00.000000000', '2019-10-01T01:00:00.000000000',\n       '2019-10-01T01:30:00.000000000', '2019-10-01T02:00:00.000000000'],\n      dtype='datetime64[ns]')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "right_keys": {
                                    "variable_value": "[<DatetimeArray>\n['2019-10-01 00:00:00+00:00', '2019-10-01 00:30:00+00:00',\n '2019-10-01 01:00:00+00:00', '2019-10-01 01:30:00+00:00',\n '2019-10-01 02:00:00+00:00']\nLength: 5, dtype: datetime64[ns, UTC]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "join_names": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "right_drop": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "left_drop": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "left": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "right": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "self.left": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x116f99280>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "is_lkey": {
                                    "variable_value": "<function _MergeOperation._get_merge_keys.<locals>.<lambda> at 0x116fcc040>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "is_array_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_rkey": {
                                    "variable_value": "<function _MergeOperation._get_merge_keys.<locals>.<lambda> at 0x116fcc0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left_on": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.right_on": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "lk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_keys.append": {
                                    "variable_value": "<built-in method append of list object at 0x116f6aec0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right_keys.append": {
                                    "variable_value": "<built-in method append of list object at 0x116f6af00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "join_names.append": {
                                    "variable_value": "<built-in method append of list object at 0x116f6a600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right._get_label_or_level_values": {
                                    "variable_value": "<bound method NDFrame._get_label_or_level_values of                   from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=5, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(5,)"
                                },
                                "right.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "right_drop.append": {
                                    "variable_value": "<built-in method append of list object at 0x116f98800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left_drop.append": {
                                    "variable_value": "<built-in method append of list object at 0x116faec40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left._get_label_or_level_values": {
                                    "variable_value": "<bound method NDFrame._get_label_or_level_values of                            xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "DatetimeIndex(['2019-10-01 00:30:00+00:00', '2019-10-01 01:00:00+00:00',\n               '2019-10-01 01:30:00+00:00', '2019-10-01 02:00:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq='30T')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "(4,)"
                                },
                                "left.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'from_date'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "self.right.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "left_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_drop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_drop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x11f5a16a0>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "is_lkey": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_array_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_rkey": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left_on": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.right_on": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "lk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_keys.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_keys.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join_names.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right._get_label_or_level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_drop.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_drop.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._get_label_or_level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "left_keys": {
                                    "variable_value": "[<DatetimeArray>\n['2019-10-01 00:30:00+00:00', '2019-10-01 01:00:00+00:00',\n '2019-10-01 01:30:00+00:00', '2019-10-01 02:00:00+00:00']\nLength: 4, dtype: datetime64[ns, UTC]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "right_keys": {
                                    "variable_value": "[<DatetimeArray>\n['2019-10-01 00:00:00+00:00', '2019-10-01 00:30:00+00:00',\n '2019-10-01 01:00:00+00:00', '2019-10-01 01:30:00+00:00',\n '2019-10-01 02:00:00+00:00']\nLength: 5, dtype: datetime64[ns, UTC]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "join_names": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "right_drop": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "left_drop": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "left": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "right": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "self.left": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x11f5a16a0>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "is_lkey": {
                                    "variable_value": "<function _MergeOperation._get_merge_keys.<locals>.<lambda> at 0x11f2c3160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "is_array_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_rkey": {
                                    "variable_value": "<function _MergeOperation._get_merge_keys.<locals>.<lambda> at 0x11f2c63a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left_on": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.right_on": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "lk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_keys.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f5ace80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right_keys.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f5b46c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "join_names.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f5abe80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right._get_label_or_level_values": {
                                    "variable_value": "<bound method NDFrame._get_label_or_level_values of                   from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "RangeIndex(start=0, stop=5, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(5,)"
                                },
                                "right.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "right_drop.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f5ac540>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left_drop.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f5ac1c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left._get_label_or_level_values": {
                                    "variable_value": "<bound method NDFrame._get_label_or_level_values of                            xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "DatetimeIndex(['2019-10-01 00:30:00+00:00', '2019-10-01 01:00:00+00:00',\n               '2019-10-01 01:30:00+00:00', '2019-10-01 02:00:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq='30T')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "(4,)"
                                },
                                "left.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'from_date'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "self.right.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "left_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_drop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_drop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x11f5990a0>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "is_lkey": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_array_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_rkey": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left_on": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.right_on": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "lk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_keys.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_keys.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join_names.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right._get_label_or_level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.index.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_drop.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_drop.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left._get_label_or_level_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.index.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "left_keys": {
                                    "variable_value": "[<DatetimeArray>\n['2019-10-01 00:00:00+00:00', '2019-10-01 00:30:00+00:00',\n '2019-10-01 01:00:00+00:00', '2019-10-01 01:30:00+00:00',\n '2019-10-01 02:00:00+00:00']\nLength: 5, dtype: datetime64[ns, UTC]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "right_keys": {
                                    "variable_value": "[<DatetimeArray>\n['2019-10-01 00:30:00+00:00', '2019-10-01 01:00:00+00:00',\n '2019-10-01 01:30:00+00:00', '2019-10-01 02:00:00+00:00']\nLength: 4, dtype: datetime64[ns, UTC]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "join_names": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "right_drop": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "left_drop": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "left": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "right": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "self.left": {
                                    "variable_value": "                  from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(5, 2)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.reshape.merge._AsOfMerge object at 0x11f5990a0>",
                                    "variable_type": "_AsOfMerge",
                                    "variable_shape": null
                                },
                                "self.right": {
                                    "variable_value": "                           xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 1)"
                                },
                                "is_lkey": {
                                    "variable_value": "<function _MergeOperation._get_merge_keys.<locals>.<lambda> at 0x11f2c34c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "is_array_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_rkey": {
                                    "variable_value": "<function _MergeOperation._get_merge_keys.<locals>.<lambda> at 0x11f2c30d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.left_on": {
                                    "variable_value": "['from_date']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.right_on": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "lk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left_keys.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f592840>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right_keys.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f591740>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "join_names.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f591980>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right._get_label_or_level_values": {
                                    "variable_value": "<bound method NDFrame._get_label_or_level_values of                            xyz\n2019-10-01 00:30:00+00:00  0.9\n2019-10-01 01:00:00+00:00  0.8\n2019-10-01 01:30:00+00:00  0.7\n2019-10-01 02:00:00+00:00  0.6>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "right.index": {
                                    "variable_value": "DatetimeIndex(['2019-10-01 00:30:00+00:00', '2019-10-01 01:00:00+00:00',\n               '2019-10-01 01:30:00+00:00', '2019-10-01 02:00:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq='30T')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "(4,)"
                                },
                                "right.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "right_drop.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f591e80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left_drop.append": {
                                    "variable_value": "<built-in method append of list object at 0x11f598340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left._get_label_or_level_values": {
                                    "variable_value": "<bound method NDFrame._get_label_or_level_values of                   from_date   abc\n0 2019-10-01 00:00:00+00:00  2.46\n1 2019-10-01 00:30:00+00:00  2.46\n2 2019-10-01 01:00:00+00:00  2.46\n3 2019-10-01 01:30:00+00:00  2.46\n4 2019-10-01 02:00:00+00:00  2.19>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "left.index": {
                                    "variable_value": "RangeIndex(start=0, stop=5, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(5,)"
                                },
                                "left.index.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'from_date'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "self.right.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lev_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.right.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index.codes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left.index._values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.left._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.right._drop_labels_or_levels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@Substitution(\"\\nleft : DataFrame\")\n@Appender(_merge_doc, indents=0)\ndef merge(\n    left,\n    right,\n    how: str = \"inner\",\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index: bool = False,\n    right_index: bool = False,\n    sort: bool = False,\n    suffixes=(\"_x\", \"_y\"),\n    copy: bool = True,\n    indicator: bool = False,\n    validate=None,\n):\n    op = _MergeOperation(\n        left,\n        right,\n        how=how,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        sort=sort,\n        suffixes=suffixes,\n        copy=copy,\n        indicator=indicator,\n        validate=validate,\n    )\n    return op.get_result()",
                "def _groupby_and_merge(\n    by, on, left, right: \"DataFrame\", _merge_pieces, check_duplicates: bool = True\n):\n    \"\"\"\n    groupby & merge; we are always performing a left-by type operation\n\n    Parameters\n    ----------\n    by: field to group\n    on: duplicates field\n    left: left frame\n    right: right frame\n    _merge_pieces: function for merging\n    check_duplicates: bool, default True\n        should we check & clean duplicates\n    \"\"\"\n\n    pieces = []\n    if not isinstance(by, (list, tuple)):\n        by = [by]\n\n    lby = left.groupby(by, sort=False)\n\n    # if we can groupby the rhs\n    # then we can get vastly better perf\n    try:\n\n        # we will check & remove duplicates if indicated\n        if check_duplicates:\n            if on is None:\n                on = []\n            elif not isinstance(on, (list, tuple)):\n                on = [on]\n\n            if right.duplicated(by + on).any():\n                right = right.drop_duplicates(by + on, keep=\"last\")\n        rby = right.groupby(by, sort=False)\n    except KeyError:\n        rby = None\n\n    for key, lhs in lby:\n\n        if rby is None:\n            rhs = right\n        else:\n            try:\n                rhs = right.take(rby.indices[key])\n            except KeyError:\n                # key doesn't exist in left\n                lcols = lhs.columns.tolist()\n                cols = lcols + [r for r in right.columns if r not in set(lcols)]\n                merged = lhs.reindex(columns=cols)\n                merged.index = range(len(merged))\n                pieces.append(merged)\n                continue\n\n        merged = _merge_pieces(lhs, rhs)\n\n        # make sure join keys are in the merged\n        # TODO, should _merge_pieces do this?\n        for k in by:\n            try:\n                if k in merged:\n                    merged[k] = key\n            except KeyError:\n                pass\n\n        pieces.append(merged)\n\n    # preserve the original order\n    # if we have a missing piece this can be reset\n    from pandas.core.reshape.concat import concat\n\n    result = concat(pieces, ignore_index=True)\n    result = result.reindex(columns=pieces[0].columns, copy=False)\n    return result, lby",
                "def merge_ordered(\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_by=None,\n    right_by=None,\n    fill_method=None,\n    suffixes=(\"_x\", \"_y\"),\n    how: str = \"outer\",\n):\n    \"\"\"\n    Perform merge with optional filling/interpolation.\n\n    Designed for ordered data like time series data. Optionally\n    perform group-wise merge (see examples).\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame\n    on : label or list\n        Field names to join on. Must be found in both DataFrames.\n    left_on : label or list, or array-like\n        Field names to join on in left DataFrame. Can be a vector or list of\n        vectors of the length of the DataFrame to use a particular vector as\n        the join key instead of columns.\n    right_on : label or list, or array-like\n        Field names to join on in right DataFrame or vector/list of vectors per\n        left_on docs.\n    left_by : column name or list of column names\n        Group left DataFrame by group columns and merge piece by piece with\n        right DataFrame.\n    right_by : column name or list of column names\n        Group right DataFrame by group columns and merge piece by piece with\n        left DataFrame.\n    fill_method : {'ffill', None}, default None\n        Interpolation method for data.\n    suffixes : Sequence, default is (\"_x\", \"_y\")\n        A length-2 sequence where each element is optionally a string\n        indicating the suffix to add to overlapping column names in\n        `left` and `right` respectively. Pass a value of `None` instead\n        of a string to indicate that the column name from `left` or\n        `right` should be left as-is, with no suffix. At least one of the\n        values must not be None.\n\n        .. versionchanged:: 0.25.0\n    how : {'left', 'right', 'outer', 'inner'}, default 'outer'\n        * left: use only keys from left frame (SQL: left outer join)\n        * right: use only keys from right frame (SQL: right outer join)\n        * outer: use union of keys from both frames (SQL: full outer join)\n        * inner: use intersection of keys from both frames (SQL: inner join).\n\n    Returns\n    -------\n    DataFrame\n        The merged DataFrame output type will the be same as\n        'left', if it is a subclass of DataFrame.\n\n    See Also\n    --------\n    merge\n    merge_asof\n\n    Examples\n    --------\n    >>> A\n          key  lvalue group\n    0   a       1     a\n    1   c       2     a\n    2   e       3     a\n    3   a       1     b\n    4   c       2     b\n    5   e       3     b\n\n    >>> B\n        Key  rvalue\n    0     b       1\n    1     c       2\n    2     d       3\n\n    >>> merge_ordered(A, B, fill_method='ffill', left_by='group')\n      group key  lvalue  rvalue\n    0     a   a       1     NaN\n    1     a   b       1     1.0\n    2     a   c       2     2.0\n    3     a   d       2     3.0\n    4     a   e       3     3.0\n    5     b   a       1     NaN\n    6     b   b       1     1.0\n    7     b   c       2     2.0\n    8     b   d       2     3.0\n    9     b   e       3     3.0\n    \"\"\"\n\n    def _merger(x, y):\n        # perform the ordered merge operation\n        op = _OrderedMerge(\n            x,\n            y,\n            on=on,\n            left_on=left_on,\n            right_on=right_on,\n            suffixes=suffixes,\n            fill_method=fill_method,\n            how=how,\n        )\n        return op.get_result()\n\n    if left_by is not None and right_by is not None:\n        raise ValueError(\"Can only group either left or right frames\")\n    elif left_by is not None:\n        result, _ = _groupby_and_merge(\n            left_by, on, left, right, lambda x, y: _merger(x, y), check_duplicates=False\n        )\n    elif right_by is not None:\n        result, _ = _groupby_and_merge(\n            right_by,\n            on,\n            right,\n            left,\n            lambda x, y: _merger(y, x),\n            check_duplicates=False,\n        )\n    else:\n        result = _merger(left, right)\n    return result",
                "def merge_asof(\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index: bool = False,\n    right_index: bool = False,\n    by=None,\n    left_by=None,\n    right_by=None,\n    suffixes=(\"_x\", \"_y\"),\n    tolerance=None,\n    allow_exact_matches: bool = True,\n    direction: str = \"backward\",\n):\n    \"\"\"\n    Perform an asof merge. This is similar to a left-join except that we\n    match on nearest key rather than equal keys.\n\n    Both DataFrames must be sorted by the key.\n\n    For each row in the left DataFrame:\n\n      - A \"backward\" search selects the last row in the right DataFrame whose\n        'on' key is less than or equal to the left's key.\n\n      - A \"forward\" search selects the first row in the right DataFrame whose\n        'on' key is greater than or equal to the left's key.\n\n      - A \"nearest\" search selects the row in the right DataFrame whose 'on'\n        key is closest in absolute distance to the left's key.\n\n    The default is \"backward\" and is compatible in versions below 0.20.0.\n    The direction parameter was added in version 0.20.0 and introduces\n    \"forward\" and \"nearest\".\n\n    Optionally match on equivalent keys with 'by' before searching with 'on'.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame\n    on : label\n        Field name to join on. Must be found in both DataFrames.\n        The data MUST be ordered. Furthermore this must be a numeric column,\n        such as datetimelike, integer, or float. On or left_on/right_on\n        must be given.\n    left_on : label\n        Field name to join on in left DataFrame.\n    right_on : label\n        Field name to join on in right DataFrame.\n    left_index : bool\n        Use the index of the left DataFrame as the join key.\n    right_index : bool\n        Use the index of the right DataFrame as the join key.\n    by : column name or list of column names\n        Match on these columns before performing merge operation.\n    left_by : column name\n        Field names to match on in the left DataFrame.\n    right_by : column name\n        Field names to match on in the right DataFrame.\n    suffixes : 2-length sequence (tuple, list, ...)\n        Suffix to apply to overlapping column names in the left and right\n        side, respectively.\n    tolerance : int or Timedelta, optional, default None\n        Select asof tolerance within this range; must be compatible\n        with the merge index.\n    allow_exact_matches : bool, default True\n\n        - If True, allow matching with the same 'on' value\n          (i.e. less-than-or-equal-to / greater-than-or-equal-to)\n        - If False, don't match the same 'on' value\n          (i.e., strictly less-than / strictly greater-than).\n\n    direction : 'backward' (default), 'forward', or 'nearest'\n        Whether to search for prior, subsequent, or closest matches.\n\n    Returns\n    -------\n    merged : DataFrame\n\n    See Also\n    --------\n    merge\n    merge_ordered\n\n    Examples\n    --------\n    >>> left = pd.DataFrame({'a': [1, 5, 10], 'left_val': ['a', 'b', 'c']})\n    >>> left\n        a left_val\n    0   1        a\n    1   5        b\n    2  10        c\n\n    >>> right = pd.DataFrame({'a': [1, 2, 3, 6, 7],\n    ...                       'right_val': [1, 2, 3, 6, 7]})\n    >>> right\n       a  right_val\n    0  1          1\n    1  2          2\n    2  3          3\n    3  6          6\n    4  7          7\n\n    >>> pd.merge_asof(left, right, on='a')\n        a left_val  right_val\n    0   1        a          1\n    1   5        b          3\n    2  10        c          7\n\n    >>> pd.merge_asof(left, right, on='a', allow_exact_matches=False)\n        a left_val  right_val\n    0   1        a        NaN\n    1   5        b        3.0\n    2  10        c        7.0\n\n    >>> pd.merge_asof(left, right, on='a', direction='forward')\n        a left_val  right_val\n    0   1        a        1.0\n    1   5        b        6.0\n    2  10        c        NaN\n\n    >>> pd.merge_asof(left, right, on='a', direction='nearest')\n        a left_val  right_val\n    0   1        a          1\n    1   5        b          6\n    2  10        c          7\n\n    We can use indexed DataFrames as well.\n\n    >>> left = pd.DataFrame({'left_val': ['a', 'b', 'c']}, index=[1, 5, 10])\n    >>> left\n       left_val\n    1         a\n    5         b\n    10        c\n\n    >>> right = pd.DataFrame({'right_val': [1, 2, 3, 6, 7]},\n    ...                      index=[1, 2, 3, 6, 7])\n    >>> right\n       right_val\n    1          1\n    2          2\n    3          3\n    6          6\n    7          7\n\n    >>> pd.merge_asof(left, right, left_index=True, right_index=True)\n       left_val  right_val\n    1         a          1\n    5         b          3\n    10        c          7\n\n    Here is a real-world times-series example\n\n    >>> quotes\n                         time ticker     bid     ask\n    0 2016-05-25 13:30:00.023   GOOG  720.50  720.93\n    1 2016-05-25 13:30:00.023   MSFT   51.95   51.96\n    2 2016-05-25 13:30:00.030   MSFT   51.97   51.98\n    3 2016-05-25 13:30:00.041   MSFT   51.99   52.00\n    4 2016-05-25 13:30:00.048   GOOG  720.50  720.93\n    5 2016-05-25 13:30:00.049   AAPL   97.99   98.01\n    6 2016-05-25 13:30:00.072   GOOG  720.50  720.88\n    7 2016-05-25 13:30:00.075   MSFT   52.01   52.03\n\n    >>> trades\n                         time ticker   price  quantity\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100\n\n    By default we are taking the asof of the quotes\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker')\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\n    We only asof within 2ms between the quote time and the trade time\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker',\n    ...                       tolerance=pd.Timedelta('2ms'))\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155     NaN     NaN\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\n    We only asof within 10ms between the quote time and the trade time\n    and we exclude exact matches on time. However *prior* data will\n    propagate forward\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker',\n    ...                       tolerance=pd.Timedelta('10ms'),\n    ...                       allow_exact_matches=False)\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75     NaN     NaN\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100     NaN     NaN\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100     NaN     NaN\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n    \"\"\"\n    op = _AsOfMerge(\n        left,\n        right,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        by=by,\n        left_by=left_by,\n        right_by=right_by,\n        suffixes=suffixes,\n        how=\"asof\",\n        tolerance=tolerance,\n        allow_exact_matches=allow_exact_matches,\n        direction=direction,\n    )\n    return op.get_result()",
                "def _get_join_indexers(\n    left_keys, right_keys, sort: bool = False, how: str = \"inner\", **kwargs\n):\n    \"\"\"\n\n    Parameters\n    ----------\n    left_keys: ndarray, Index, Series\n    right_keys: ndarray, Index, Series\n    sort: bool, default False\n    how: string {'inner', 'outer', 'left', 'right'}, default 'inner'\n\n    Returns\n    -------\n    tuple of (left_indexer, right_indexer)\n        indexers into the left_keys, right_keys\n\n    \"\"\"\n    assert len(left_keys) == len(\n        right_keys\n    ), \"left_key and right_keys must be the same length\"\n\n    # get left & right join labels and num. of levels at each location\n    mapped = (\n        _factorize_keys(left_keys[n], right_keys[n], sort=sort)\n        for n in range(len(left_keys))\n    )\n    zipped = zip(*mapped)\n    llab, rlab, shape = [list(x) for x in zipped]\n\n    # get flat i8 keys from label lists\n    lkey, rkey = _get_join_keys(llab, rlab, shape, sort)\n\n    # factorize keys to a dense i8 space\n    # `count` is the num. of unique keys\n    # set(lkey) | set(rkey) == range(count)\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)\n\n    # preserve left frame order if how == 'left' and sort == False\n    kwargs = copy.copy(kwargs)\n    if how == \"left\":\n        kwargs[\"sort\"] = sort\n    join_func = _join_functions[how]\n\n    return join_func(lkey, rkey, count, **kwargs)",
                "def _restore_dropped_levels_multijoin(\n    left: MultiIndex,\n    right: MultiIndex,\n    dropped_level_names,\n    join_index,\n    lindexer,\n    rindexer,\n):\n    \"\"\"\n    *this is an internal non-public method*\n\n    Returns the levels, labels and names of a multi-index to multi-index join.\n    Depending on the type of join, this method restores the appropriate\n    dropped levels of the joined multi-index.\n    The method relies on lidx, rindexer which hold the index positions of\n    left and right, where a join was feasible\n\n    Parameters\n    ----------\n    left : MultiIndex\n        left index\n    right : MultiIndex\n        right index\n    dropped_level_names : str array\n        list of non-common level names\n    join_index : MultiIndex\n        the index of the join between the\n        common levels of left and right\n    lindexer : intp array\n        left indexer\n    rindexer : intp array\n        right indexer\n\n    Returns\n    -------\n    levels : list of Index\n        levels of combined multiindexes\n    labels : intp array\n        labels of combined multiindexes\n    names : str array\n        names of combined multiindexes\n\n    \"\"\"\n\n    def _convert_to_mulitindex(index) -> MultiIndex:\n        if isinstance(index, MultiIndex):\n            return index\n        else:\n            return MultiIndex.from_arrays([index.values], names=[index.name])\n\n    # For multi-multi joins with one overlapping level,\n    # the returned index if of type Index\n    # Assure that join_index is of type MultiIndex\n    # so that dropped levels can be appended\n    join_index = _convert_to_mulitindex(join_index)\n\n    join_levels = join_index.levels\n    join_codes = join_index.codes\n    join_names = join_index.names\n\n    # lindexer and rindexer hold the indexes where the join occurred\n    # for left and right respectively. If left/right is None then\n    # the join occurred on all indices of left/right\n    if lindexer is None:\n        lindexer = range(left.size)\n\n    if rindexer is None:\n        rindexer = range(right.size)\n\n    # Iterate through the levels that must be restored\n    for dropped_level_name in dropped_level_names:\n        if dropped_level_name in left.names:\n            idx = left\n            indexer = lindexer\n        else:\n            idx = right\n            indexer = rindexer\n\n        # The index of the level name to be restored\n        name_idx = idx.names.index(dropped_level_name)\n\n        restore_levels = idx.levels[name_idx]\n        # Inject -1 in the codes list where a join was not possible\n        # IOW indexer[i]=-1\n        codes = idx.codes[name_idx]\n        restore_codes = algos.take_nd(codes, indexer, fill_value=-1)\n\n        join_levels = join_levels + [restore_levels]\n        join_codes = join_codes + [restore_codes]\n        join_names = join_names + [dropped_level_name]\n\n    return join_levels, join_codes, join_names",
                "def _asof_function(direction: str):\n    name = \"asof_join_{dir}\".format(dir=direction)\n    return getattr(libjoin, name, None)",
                "def _asof_by_function(direction: str):\n    name = \"asof_join_{dir}_on_X_by_Y\".format(dir=direction)\n    return getattr(libjoin, name, None)",
                "def _get_cython_type_upcast(dtype):\n    \"\"\" Upcast a dtype to 'int64_t', 'double', or 'object' \"\"\"\n    if is_integer_dtype(dtype):\n        return \"int64_t\"\n    elif is_float_dtype(dtype):\n        return \"double\"\n    else:\n        return \"object\"",
                "def _get_multiindex_indexer(join_keys, index: MultiIndex, sort: bool):\n\n    # left & right join labels and num. of levels at each location\n    mapped = (\n        _factorize_keys(index.levels[n], join_keys[n], sort=sort)\n        for n in range(index.nlevels)\n    )\n    zipped = zip(*mapped)\n    rcodes, lcodes, shape = [list(x) for x in zipped]\n    if sort:\n        rcodes = list(map(np.take, rcodes, index.codes))\n    else:\n        i8copy = lambda a: a.astype(\"i8\", subok=False, copy=True)\n        rcodes = list(map(i8copy, index.codes))\n\n    # fix right labels if there were any nulls\n    for i in range(len(join_keys)):\n        mask = index.codes[i] == -1\n        if mask.any():\n            # check if there already was any nulls at this location\n            # if there was, it is factorized to `shape[i] - 1`\n            a = join_keys[i][lcodes[i] == shape[i] - 1]\n            if a.size == 0 or not a[0] != a[0]:\n                shape[i] += 1\n\n            rcodes[i][mask] = shape[i] - 1\n\n    # get flat i8 join keys\n    lkey, rkey = _get_join_keys(lcodes, rcodes, shape, sort)\n\n    # factorize keys to a dense i8 space\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)\n\n    return libjoin.left_outer_join(lkey, rkey, count, sort=sort)",
                "def _get_single_indexer(join_key, index, sort: bool = False):\n    left_key, right_key, count = _factorize_keys(join_key, index, sort=sort)\n\n    left_indexer, right_indexer = libjoin.left_outer_join(\n        ensure_int64(left_key), ensure_int64(right_key), count, sort=sort\n    )\n\n    return left_indexer, right_indexer",
                "def _left_join_on_index(left_ax: Index, right_ax: Index, join_keys, sort: bool = False):\n    if len(join_keys) > 1:\n        if not (\n            (isinstance(right_ax, MultiIndex) and len(join_keys) == right_ax.nlevels)\n        ):\n            raise AssertionError(\n                \"If more than one join key is given then \"\n                \"'right_ax' must be a MultiIndex and the \"\n                \"number of join keys must be the number of \"\n                \"levels in right_ax\"\n            )\n\n        left_indexer, right_indexer = _get_multiindex_indexer(\n            join_keys, right_ax, sort=sort\n        )\n    else:\n        jkey = join_keys[0]\n\n        left_indexer, right_indexer = _get_single_indexer(jkey, right_ax, sort=sort)\n\n    if sort or len(left_ax) != len(left_indexer):\n        # if asked to sort or there are 1-to-many matches\n        join_index = left_ax.take(left_indexer)\n        return join_index, left_indexer, right_indexer\n\n    # left frame preserves order & length of its index\n    return left_ax, None, right_indexer",
                "def _right_outer_join(x, y, max_groups):\n    right_indexer, left_indexer = libjoin.left_outer_join(y, x, max_groups)\n    return left_indexer, right_indexer",
                "def _factorize_keys(lk, rk, sort=True):\n    # Some pre-processing for non-ndarray lk / rk\n    if is_datetime64tz_dtype(lk) and is_datetime64tz_dtype(rk):\n        lk = getattr(lk, \"_values\", lk)._data\n        rk = getattr(rk, \"_values\", rk)._data\n\n    elif (\n        is_categorical_dtype(lk) and is_categorical_dtype(rk) and lk.is_dtype_equal(rk)\n    ):\n        if lk.categories.equals(rk.categories):\n            # if we exactly match in categories, allow us to factorize on codes\n            rk = rk.codes\n        else:\n            # Same categories in different orders -> recode\n            rk = _recode_for_categories(rk.codes, rk.categories, lk.categories)\n\n        lk = ensure_int64(lk.codes)\n        rk = ensure_int64(rk)\n\n    elif (\n        is_extension_array_dtype(lk.dtype)\n        and is_extension_array_dtype(rk.dtype)\n        and lk.dtype == rk.dtype\n    ):\n        lk, _ = lk._values_for_factorize()\n        rk, _ = rk._values_for_factorize()\n\n    if is_integer_dtype(lk) and is_integer_dtype(rk):\n        # GH#23917 TODO: needs tests for case where lk is integer-dtype\n        #  and rk is datetime-dtype\n        klass = libhashtable.Int64Factorizer\n        lk = ensure_int64(com.values_from_object(lk))\n        rk = ensure_int64(com.values_from_object(rk))\n    elif issubclass(lk.dtype.type, (np.timedelta64, np.datetime64)) and issubclass(\n        rk.dtype.type, (np.timedelta64, np.datetime64)\n    ):\n        # GH#23917 TODO: Needs tests for non-matching dtypes\n        klass = libhashtable.Int64Factorizer\n        lk = ensure_int64(com.values_from_object(lk))\n        rk = ensure_int64(com.values_from_object(rk))\n    else:\n        klass = libhashtable.Factorizer\n        lk = ensure_object(lk)\n        rk = ensure_object(rk)\n\n    rizer = klass(max(len(lk), len(rk)))\n\n    llab = rizer.factorize(lk)\n    rlab = rizer.factorize(rk)\n\n    count = rizer.get_count()\n\n    if sort:\n        uniques = rizer.uniques.to_array()\n        llab, rlab = _sort_labels(uniques, llab, rlab)\n\n    # NA group\n    lmask = llab == -1\n    lany = lmask.any()\n    rmask = rlab == -1\n    rany = rmask.any()\n\n    if lany or rany:\n        if lany:\n            np.putmask(llab, lmask, count)\n        if rany:\n            np.putmask(rlab, rmask, count)\n        count += 1\n\n    return llab, rlab, count",
                "def _sort_labels(uniques: np.ndarray, left, right):\n    if not isinstance(uniques, np.ndarray):\n        # tuplesafe\n        uniques = Index(uniques).values\n\n    llength = len(left)\n    labels = np.concatenate([left, right])\n\n    _, new_labels = algos.safe_sort(uniques, labels, na_sentinel=-1)\n    new_labels = ensure_int64(new_labels)\n    new_left, new_right = new_labels[:llength], new_labels[llength:]\n\n    return new_left, new_right",
                "def _get_join_keys(llab, rlab, shape, sort: bool):\n\n    # how many levels can be done without overflow\n    pred = lambda i: not is_int64_overflow_possible(shape[:i])\n    nlev = next(filter(pred, range(len(shape), 0, -1)))\n\n    # get keys for the first `nlev` levels\n    stride = np.prod(shape[1:nlev], dtype=\"i8\")\n    lkey = stride * llab[0].astype(\"i8\", subok=False, copy=False)\n    rkey = stride * rlab[0].astype(\"i8\", subok=False, copy=False)\n\n    for i in range(1, nlev):\n        with np.errstate(divide=\"ignore\"):\n            stride //= shape[i]\n        lkey += llab[i] * stride\n        rkey += rlab[i] * stride\n\n    if nlev == len(shape):  # all done!\n        return lkey, rkey\n\n    # densify current keys to avoid overflow\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)\n\n    llab = [lkey] + llab[nlev:]\n    rlab = [rkey] + rlab[nlev:]\n    shape = [count] + shape[nlev:]\n\n    return _get_join_keys(llab, rlab, shape, sort)",
                "def _should_fill(lname, rname) -> bool:\n    if not isinstance(lname, str) or not isinstance(rname, str):\n        return True\n    return lname == rname",
                "def _any(x) -> bool:\n    return x is not None and com.any_not_none(*x)",
                "def _validate_operand(obj: FrameOrSeries) -> \"DataFrame\":\n    if isinstance(obj, ABCDataFrame):\n        return obj\n    elif isinstance(obj, ABCSeries):\n        if obj.name is None:\n            raise ValueError(\"Cannot merge a Series without a name\")\n        else:\n            return obj.to_frame()\n    else:\n        raise TypeError(\n            \"Can only merge Series or DataFrame objects, \"\n            \"a {obj} was passed\".format(obj=type(obj))\n        )",
                "def _items_overlap_with_suffix(left: Index, lsuffix, right: Index, rsuffix):\n    \"\"\"\n    If two indices overlap, add suffixes to overlapping entries.\n\n    If corresponding suffix is empty, the entry is simply converted to string.\n\n    \"\"\"\n    to_rename = left.intersection(right)\n    if len(to_rename) == 0:\n        return left, right\n\n    if not lsuffix and not rsuffix:\n        raise ValueError(\n            \"columns overlap but no suffix specified: \"\n            \"{rename}\".format(rename=to_rename)\n        )\n\n    def renamer(x, suffix):\n        \"\"\"\n        Rename the left and right indices.\n\n        If there is overlap, and suffix is not None, add\n        suffix, otherwise, leave it as-is.\n\n        Parameters\n        ----------\n        x : original column name\n        suffix : str or None\n\n        Returns\n        -------\n        x : renamed column name\n        \"\"\"\n        if x in to_rename and suffix is not None:\n            return \"{x}{suffix}\".format(x=x, suffix=suffix)\n        return x\n\n    lrenamer = partial(renamer, suffix=lsuffix)\n    rrenamer = partial(renamer, suffix=rsuffix)\n\n    return (_transform_index(left, lrenamer), _transform_index(right, rrenamer))",
                "def _merger(x, y):\n    # perform the ordered merge operation\n    op = _OrderedMerge(\n        x,\n        y,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        suffixes=suffixes,\n        fill_method=fill_method,\n        how=how,\n    )\n    return op.get_result()",
                "def __init__(\n    self,\n    left: Union[\"Series\", \"DataFrame\"],\n    right: Union[\"Series\", \"DataFrame\"],\n    how: str = \"inner\",\n    on=None,\n    left_on=None,\n    right_on=None,\n    axis=1,\n    left_index: bool = False,\n    right_index: bool = False,\n    sort: bool = True,\n    suffixes=(\"_x\", \"_y\"),\n    copy: bool = True,\n    indicator: bool = False,\n    validate=None,\n):\n    _left = _validate_operand(left)\n    _right = _validate_operand(right)\n    self.left = self.orig_left = _left\n    self.right = self.orig_right = _right\n    self.how = how\n    self.axis = axis\n\n    self.on = com.maybe_make_list(on)\n    self.left_on = com.maybe_make_list(left_on)\n    self.right_on = com.maybe_make_list(right_on)\n\n    self.copy = copy\n    self.suffixes = suffixes\n    self.sort = sort\n\n    self.left_index = left_index\n    self.right_index = right_index\n\n    self.indicator = indicator\n\n    self.indicator_name: Optional[str]\n    if isinstance(self.indicator, str):\n        self.indicator_name = self.indicator\n    elif isinstance(self.indicator, bool):\n        self.indicator_name = \"_merge\" if self.indicator else None\n    else:\n        raise ValueError(\n            \"indicator option can only accept boolean or string arguments\"\n        )\n\n    if not is_bool(left_index):\n        raise ValueError(\n            \"left_index parameter must be of type bool, not \"\n            \"{left_index}\".format(left_index=type(left_index))\n        )\n    if not is_bool(right_index):\n        raise ValueError(\n            \"right_index parameter must be of type bool, not \"\n            \"{right_index}\".format(right_index=type(right_index))\n        )\n\n    # warn user when merging between different levels\n    if _left.columns.nlevels != _right.columns.nlevels:\n        msg = (\n            \"merging between different levels can give an unintended \"\n            \"result ({left} levels on the left, {right} on the right)\"\n        ).format(left=_left.columns.nlevels, right=_right.columns.nlevels)\n        warnings.warn(msg, UserWarning)\n\n    self._validate_specification()\n\n    # note this function has side effects\n    (\n        self.left_join_keys,\n        self.right_join_keys,\n        self.join_names,\n    ) = self._get_merge_keys()\n\n    # validate the merge keys dtypes. We may need to coerce\n    # to avoid incompat dtypes\n    self._maybe_coerce_merge_keys()\n\n    # If argument passed to validate,\n    # check if columns specified as unique\n    # are in fact unique.\n    if validate is not None:\n        self._validate(validate)",
                "def get_result(self):\n    if self.indicator:\n        self.left, self.right = self._indicator_pre_merge(self.left, self.right)\n\n    join_index, left_indexer, right_indexer = self._get_join_info()\n\n    ldata, rdata = self.left._data, self.right._data\n    lsuf, rsuf = self.suffixes\n\n    llabels, rlabels = _items_overlap_with_suffix(\n        ldata.items, lsuf, rdata.items, rsuf\n    )\n\n    lindexers = {1: left_indexer} if left_indexer is not None else {}\n    rindexers = {1: right_indexer} if right_indexer is not None else {}\n\n    result_data = concatenate_block_managers(\n        [(ldata, lindexers), (rdata, rindexers)],\n        axes=[llabels.append(rlabels), join_index],\n        concat_axis=0,\n        copy=self.copy,\n    )\n\n    typ = self.left._constructor\n    result = typ(result_data).__finalize__(self, method=self._merge_type)\n\n    if self.indicator:\n        result = self._indicator_post_merge(result)\n\n    self._maybe_add_join_keys(result, left_indexer, right_indexer)\n\n    self._maybe_restore_index_levels(result)\n\n    return result",
                "def _indicator_pre_merge(\n    self, left: \"DataFrame\", right: \"DataFrame\"\n) -> Tuple[\"DataFrame\", \"DataFrame\"]:\n\n    columns = left.columns.union(right.columns)\n\n    for i in [\"_left_indicator\", \"_right_indicator\"]:\n        if i in columns:\n            raise ValueError(\n                \"Cannot use `indicator=True` option when \"\n                \"data contains a column named {name}\".format(name=i)\n            )\n    if self.indicator_name in columns:\n        raise ValueError(\n            \"Cannot use name of an existing column for indicator column\"\n        )\n\n    left = left.copy()\n    right = right.copy()\n\n    left[\"_left_indicator\"] = 1\n    left[\"_left_indicator\"] = left[\"_left_indicator\"].astype(\"int8\")\n\n    right[\"_right_indicator\"] = 2\n    right[\"_right_indicator\"] = right[\"_right_indicator\"].astype(\"int8\")\n\n    return left, right",
                "def _indicator_post_merge(self, result):\n\n    result[\"_left_indicator\"] = result[\"_left_indicator\"].fillna(0)\n    result[\"_right_indicator\"] = result[\"_right_indicator\"].fillna(0)\n\n    result[self.indicator_name] = Categorical(\n        (result[\"_left_indicator\"] + result[\"_right_indicator\"]),\n        categories=[1, 2, 3],\n    )\n    result[self.indicator_name] = result[self.indicator_name].cat.rename_categories(\n        [\"left_only\", \"right_only\", \"both\"]\n    )\n\n    result = result.drop(labels=[\"_left_indicator\", \"_right_indicator\"], axis=1)\n    return result",
                "def _maybe_restore_index_levels(self, result):\n    \"\"\"\n    Restore index levels specified as `on` parameters\n\n    Here we check for cases where `self.left_on` and `self.right_on` pairs\n    each reference an index level in their respective DataFrames. The\n    joined columns corresponding to these pairs are then restored to the\n    index of `result`.\n\n    **Note:** This method has side effects. It modifies `result` in-place\n\n    Parameters\n    ----------\n    result: DataFrame\n        merge result\n\n    Returns\n    -------\n    None\n    \"\"\"\n    names_to_restore = []\n    for name, left_key, right_key in zip(\n        self.join_names, self.left_on, self.right_on\n    ):\n        if (\n            self.orig_left._is_level_reference(left_key)\n            and self.orig_right._is_level_reference(right_key)\n            and name not in result.index.names\n        ):\n\n            names_to_restore.append(name)\n\n    if names_to_restore:\n        result.set_index(names_to_restore, inplace=True)",
                "def _maybe_add_join_keys(self, result, left_indexer, right_indexer):\n\n    left_has_missing = None\n    right_has_missing = None\n\n    keys = zip(self.join_names, self.left_on, self.right_on)\n    for i, (name, lname, rname) in enumerate(keys):\n        if not _should_fill(lname, rname):\n            continue\n\n        take_left, take_right = None, None\n\n        if name in result:\n\n            if left_indexer is not None and right_indexer is not None:\n                if name in self.left:\n\n                    if left_has_missing is None:\n                        left_has_missing = (left_indexer == -1).any()\n\n                    if left_has_missing:\n                        take_right = self.right_join_keys[i]\n\n                        if not is_dtype_equal(\n                            result[name].dtype, self.left[name].dtype\n                        ):\n                            take_left = self.left[name]._values\n\n                elif name in self.right:\n\n                    if right_has_missing is None:\n                        right_has_missing = (right_indexer == -1).any()\n\n                    if right_has_missing:\n                        take_left = self.left_join_keys[i]\n\n                        if not is_dtype_equal(\n                            result[name].dtype, self.right[name].dtype\n                        ):\n                            take_right = self.right[name]._values\n\n        elif left_indexer is not None and is_array_like(self.left_join_keys[i]):\n            take_left = self.left_join_keys[i]\n            take_right = self.right_join_keys[i]\n\n        if take_left is not None or take_right is not None:\n\n            if take_left is None:\n                lvals = result[name]._values\n            else:\n                lfill = na_value_for_dtype(take_left.dtype)\n                lvals = algos.take_1d(take_left, left_indexer, fill_value=lfill)\n\n            if take_right is None:\n                rvals = result[name]._values\n            else:\n                rfill = na_value_for_dtype(take_right.dtype)\n                rvals = algos.take_1d(take_right, right_indexer, fill_value=rfill)\n\n            # if we have an all missing left_indexer\n            # make sure to just use the right values\n            mask = left_indexer == -1\n            if mask.all():\n                key_col = rvals\n            else:\n                key_col = Index(lvals).where(~mask, rvals)\n\n            if result._is_label_reference(name):\n                result[name] = key_col\n            elif result._is_level_reference(name):\n                if isinstance(result.index, MultiIndex):\n                    key_col.name = name\n                    idx_list = [\n                        result.index.get_level_values(level_name)\n                        if level_name != name\n                        else key_col\n                        for level_name in result.index.names\n                    ]\n\n                    result.set_index(idx_list, inplace=True)\n                else:\n                    result.index = Index(key_col, name=name)\n            else:\n                result.insert(i, name or \"key_{i}\".format(i=i), key_col)",
                "def _get_join_indexers(self):\n    \"\"\" return the join indexers \"\"\"\n    return _get_join_indexers(\n        self.left_join_keys, self.right_join_keys, sort=self.sort, how=self.how\n    )",
                "def _get_join_info(self):\n    left_ax = self.left._data.axes[self.axis]\n    right_ax = self.right._data.axes[self.axis]\n\n    if self.left_index and self.right_index and self.how != \"asof\":\n        join_index, left_indexer, right_indexer = left_ax.join(\n            right_ax, how=self.how, return_indexers=True, sort=self.sort\n        )\n    elif self.right_index and self.how == \"left\":\n        join_index, left_indexer, right_indexer = _left_join_on_index(\n            left_ax, right_ax, self.left_join_keys, sort=self.sort\n        )\n\n    elif self.left_index and self.how == \"right\":\n        join_index, right_indexer, left_indexer = _left_join_on_index(\n            right_ax, left_ax, self.right_join_keys, sort=self.sort\n        )\n    else:\n        (left_indexer, right_indexer) = self._get_join_indexers()\n\n        if self.right_index:\n            if len(self.left) > 0:\n                join_index = self._create_join_index(\n                    self.left.index,\n                    self.right.index,\n                    left_indexer,\n                    right_indexer,\n                    how=\"right\",\n                )\n            else:\n                join_index = self.right.index.take(right_indexer)\n                left_indexer = np.array([-1] * len(join_index))\n        elif self.left_index:\n            if len(self.right) > 0:\n                join_index = self._create_join_index(\n                    self.right.index,\n                    self.left.index,\n                    right_indexer,\n                    left_indexer,\n                    how=\"left\",\n                )\n            else:\n                join_index = self.left.index.take(left_indexer)\n                right_indexer = np.array([-1] * len(join_index))\n        else:\n            join_index = Index(np.arange(len(left_indexer)))\n\n    if len(join_index) == 0:\n        join_index = join_index.astype(object)\n    return join_index, left_indexer, right_indexer",
                "def _create_join_index(\n    self,\n    index: Index,\n    other_index: Index,\n    indexer,\n    other_indexer,\n    how: str = \"left\",\n):\n    \"\"\"\n    Create a join index by rearranging one index to match another\n\n    Parameters\n    ----------\n    index: Index being rearranged\n    other_index: Index used to supply values not found in index\n    indexer: how to rearrange index\n    how: replacement is only necessary if indexer based on other_index\n\n    Returns\n    -------\n    join_index\n    \"\"\"\n    if self.how in (how, \"outer\") and not isinstance(other_index, MultiIndex):\n        # if final index requires values in other_index but not target\n        # index, indexer may hold missing (-1) values, causing Index.take\n        # to take the final value in target index. So, we set the last\n        # element to be the desired fill value. We do not use allow_fill\n        # and fill_value because it throws a ValueError on integer indices\n        mask = indexer == -1\n        if np.any(mask):\n            fill_value = na_value_for_dtype(index.dtype, compat=False)\n            index = index.append(Index([fill_value]))\n    return index.take(indexer)",
                "def _get_merge_keys(self):\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n\n    Parameters\n    ----------\n    left\n    right\n    on\n\n    Returns\n    -------\n    left_keys, right_keys\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n\n    left, right = self.left, self.right\n\n    is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n    is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n\n    # Note that pd.merge_asof() has separate 'on' and 'by' parameters. A\n    # user could, for example, request 'left_index' and 'left_by'. In a\n    # regular pd.merge(), users cannot specify both 'left_index' and\n    # 'left_on'. (Instead, users have a MultiIndex). That means the\n    # self.left_on in this function is always empty in a pd.merge(), but\n    # a pd.merge_asof(left_index=True, left_by=...) will result in a\n    # self.left_on array with a None in the middle of it. This requires\n    # a work-around as designated in the code below.\n    # See _validate_specification() for where this happens.\n\n    # ugh, spaghetti re #733\n    if _any(self.left_on) and _any(self.right_on):\n        for lk, rk in zip(self.left_on, self.right_on):\n            if is_lkey(lk):\n                left_keys.append(lk)\n                if is_rkey(rk):\n                    right_keys.append(rk)\n                    join_names.append(None)  # what to do?\n                else:\n                    if rk is not None:\n                        right_keys.append(right._get_label_or_level_values(rk))\n                        join_names.append(rk)\n                    else:\n                        # work-around for merge_asof(right_index=True)\n                        right_keys.append(right.index)\n                        join_names.append(right.index.name)\n            else:\n                if not is_rkey(rk):\n                    if rk is not None:\n                        right_keys.append(right._get_label_or_level_values(rk))\n                    else:\n                        # work-around for merge_asof(right_index=True)\n                        right_keys.append(right.index)\n                    if lk is not None and lk == rk:\n                        # avoid key upcast in corner case (length-0)\n                        if len(left) > 0:\n                            right_drop.append(rk)\n                        else:\n                            left_drop.append(lk)\n                else:\n                    right_keys.append(rk)\n                if lk is not None:\n                    left_keys.append(left._get_label_or_level_values(lk))\n                    join_names.append(lk)\n                else:\n                    # work-around for merge_asof(left_index=True)\n                    left_keys.append(left.index)\n                    join_names.append(left.index.name)\n    elif _any(self.left_on):\n        for k in self.left_on:\n            if is_lkey(k):\n                left_keys.append(k)\n                join_names.append(None)\n            else:\n                left_keys.append(left._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(self.right.index, MultiIndex):\n            right_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    self.right.index.levels, self.right.index.codes\n                )\n            ]\n        else:\n            right_keys = [self.right.index._values]\n    elif _any(self.right_on):\n        for k in self.right_on:\n            if is_rkey(k):\n                right_keys.append(k)\n                join_names.append(None)\n            else:\n                right_keys.append(right._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(self.left.index, MultiIndex):\n            left_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    self.left.index.levels, self.left.index.codes\n                )\n            ]\n        else:\n            left_keys = [self.left.index.values]\n\n    if left_drop:\n        self.left = self.left._drop_labels_or_levels(left_drop)\n\n    if right_drop:\n        self.right = self.right._drop_labels_or_levels(right_drop)\n\n    return left_keys, right_keys, join_names",
                "def _maybe_coerce_merge_keys(self):\n    # we have valid mergees but we may have to further\n    # coerce these if they are originally incompatible types\n    #\n    # for example if these are categorical, but are not dtype_equal\n    # or if we have object and integer dtypes\n\n    for lk, rk, name in zip(\n        self.left_join_keys, self.right_join_keys, self.join_names\n    ):\n        if (len(lk) and not len(rk)) or (not len(lk) and len(rk)):\n            continue\n\n        lk_is_cat = is_categorical_dtype(lk)\n        rk_is_cat = is_categorical_dtype(rk)\n        lk_is_object = is_object_dtype(lk)\n        rk_is_object = is_object_dtype(rk)\n\n        # if either left or right is a categorical\n        # then the must match exactly in categories & ordered\n        if lk_is_cat and rk_is_cat:\n            if lk.is_dtype_equal(rk):\n                continue\n\n        elif lk_is_cat or rk_is_cat:\n            pass\n\n        elif is_dtype_equal(lk.dtype, rk.dtype):\n            continue\n\n        msg = (\n            \"You are trying to merge on {lk_dtype} and \"\n            \"{rk_dtype} columns. If you wish to proceed \"\n            \"you should use pd.concat\".format(lk_dtype=lk.dtype, rk_dtype=rk.dtype)\n        )\n\n        # if we are numeric, then allow differing\n        # kinds to proceed, eg. int64 and int8, int and float\n        # further if we are object, but we infer to\n        # the same, then proceed\n        if is_numeric_dtype(lk) and is_numeric_dtype(rk):\n            if lk.dtype.kind == rk.dtype.kind:\n                continue\n\n            # check whether ints and floats\n            elif is_integer_dtype(rk) and is_float_dtype(lk):\n                if not (lk == lk.astype(rk.dtype))[~np.isnan(lk)].all():\n                    warnings.warn(\n                        \"You are merging on int and float \"\n                        \"columns where the float values \"\n                        \"are not equal to their int \"\n                        \"representation\",\n                        UserWarning,\n                    )\n                continue\n\n            elif is_float_dtype(rk) and is_integer_dtype(lk):\n                if not (rk == rk.astype(lk.dtype))[~np.isnan(rk)].all():\n                    warnings.warn(\n                        \"You are merging on int and float \"\n                        \"columns where the float values \"\n                        \"are not equal to their int \"\n                        \"representation\",\n                        UserWarning,\n                    )\n                continue\n\n            # let's infer and see if we are ok\n            elif lib.infer_dtype(lk, skipna=False) == lib.infer_dtype(\n                rk, skipna=False\n            ):\n                continue\n\n        # Check if we are trying to merge on obviously\n        # incompatible dtypes GH 9780, GH 15800\n\n        # bool values are coerced to object\n        elif (lk_is_object and is_bool_dtype(rk)) or (\n            is_bool_dtype(lk) and rk_is_object\n        ):\n            pass\n\n        # object values are allowed to be merged\n        elif (lk_is_object and is_numeric_dtype(rk)) or (\n            is_numeric_dtype(lk) and rk_is_object\n        ):\n            inferred_left = lib.infer_dtype(lk, skipna=False)\n            inferred_right = lib.infer_dtype(rk, skipna=False)\n            bool_types = [\"integer\", \"mixed-integer\", \"boolean\", \"empty\"]\n            string_types = [\"string\", \"unicode\", \"mixed\", \"bytes\", \"empty\"]\n\n            # inferred bool\n            if inferred_left in bool_types and inferred_right in bool_types:\n                pass\n\n            # unless we are merging non-string-like with string-like\n            elif (\n                inferred_left in string_types and inferred_right not in string_types\n            ) or (\n                inferred_right in string_types and inferred_left not in string_types\n            ):\n                raise ValueError(msg)\n\n        # datetimelikes must match exactly\n        elif needs_i8_conversion(lk) and not needs_i8_conversion(rk):\n            raise ValueError(msg)\n        elif not needs_i8_conversion(lk) and needs_i8_conversion(rk):\n            raise ValueError(msg)\n        elif is_datetime64tz_dtype(lk) and not is_datetime64tz_dtype(rk):\n            raise ValueError(msg)\n        elif not is_datetime64tz_dtype(lk) and is_datetime64tz_dtype(rk):\n            raise ValueError(msg)\n\n        elif lk_is_object and rk_is_object:\n            continue\n\n        # Houston, we have a problem!\n        # let's coerce to object if the dtypes aren't\n        # categorical, otherwise coerce to the category\n        # dtype. If we coerced categories to object,\n        # then we would lose type information on some\n        # columns, and end up trying to merge\n        # incompatible dtypes. See GH 16900.\n        if name in self.left.columns:\n            typ = lk.categories.dtype if lk_is_cat else object\n            self.left = self.left.assign(**{name: self.left[name].astype(typ)})\n        if name in self.right.columns:\n            typ = rk.categories.dtype if rk_is_cat else object\n            self.right = self.right.assign(**{name: self.right[name].astype(typ)})",
                "def _validate_specification(self):\n    # Hm, any way to make this logic less complicated??\n    if self.on is None and self.left_on is None and self.right_on is None:\n\n        if self.left_index and self.right_index:\n            self.left_on, self.right_on = (), ()\n        elif self.left_index:\n            if self.right_on is None:\n                raise MergeError(\"Must pass right_on or right_index=True\")\n        elif self.right_index:\n            if self.left_on is None:\n                raise MergeError(\"Must pass left_on or left_index=True\")\n        else:\n            # use the common columns\n            common_cols = self.left.columns.intersection(self.right.columns)\n            if len(common_cols) == 0:\n                raise MergeError(\n                    \"No common columns to perform merge on. \"\n                    \"Merge options: left_on={lon}, right_on={ron}, \"\n                    \"left_index={lidx}, right_index={ridx}\".format(\n                        lon=self.left_on,\n                        ron=self.right_on,\n                        lidx=self.left_index,\n                        ridx=self.right_index,\n                    )\n                )\n            if not common_cols.is_unique:\n                raise MergeError(\n                    \"Data columns not unique: {common!r}\".format(common=common_cols)\n                )\n            self.left_on = self.right_on = common_cols\n    elif self.on is not None:\n        if self.left_on is not None or self.right_on is not None:\n            raise MergeError(\n                'Can only pass argument \"on\" OR \"left_on\" '\n                'and \"right_on\", not a combination of both.'\n            )\n        self.left_on = self.right_on = self.on\n    elif self.left_on is not None:\n        n = len(self.left_on)\n        if self.right_index:\n            if len(self.left_on) != self.right.index.nlevels:\n                raise ValueError(\n                    \"len(left_on) must equal the number \"\n                    'of levels in the index of \"right\"'\n                )\n            self.right_on = [None] * n\n    elif self.right_on is not None:\n        n = len(self.right_on)\n        if self.left_index:\n            if len(self.right_on) != self.left.index.nlevels:\n                raise ValueError(\n                    \"len(right_on) must equal the number \"\n                    'of levels in the index of \"left\"'\n                )\n            self.left_on = [None] * n\n    if len(self.right_on) != len(self.left_on):\n        raise ValueError(\"len(right_on) must equal len(left_on)\")",
                "def _validate(self, validate: str):\n\n    # Check uniqueness of each\n    if self.left_index:\n        left_unique = self.orig_left.index.is_unique\n    else:\n        left_unique = MultiIndex.from_arrays(self.left_join_keys).is_unique\n\n    if self.right_index:\n        right_unique = self.orig_right.index.is_unique\n    else:\n        right_unique = MultiIndex.from_arrays(self.right_join_keys).is_unique\n\n    # Check data integrity\n    if validate in [\"one_to_one\", \"1:1\"]:\n        if not left_unique and not right_unique:\n            raise MergeError(\n                \"Merge keys are not unique in either left\"\n                \" or right dataset; not a one-to-one merge\"\n            )\n        elif not left_unique:\n            raise MergeError(\n                \"Merge keys are not unique in left dataset;\"\n                \" not a one-to-one merge\"\n            )\n        elif not right_unique:\n            raise MergeError(\n                \"Merge keys are not unique in right dataset;\"\n                \" not a one-to-one merge\"\n            )\n\n    elif validate in [\"one_to_many\", \"1:m\"]:\n        if not left_unique:\n            raise MergeError(\n                \"Merge keys are not unique in left dataset;\"\n                \" not a one-to-many merge\"\n            )\n\n    elif validate in [\"many_to_one\", \"m:1\"]:\n        if not right_unique:\n            raise MergeError(\n                \"Merge keys are not unique in right dataset;\"\n                \" not a many-to-one merge\"\n            )\n\n    elif validate in [\"many_to_many\", \"m:m\"]:\n        pass\n\n    else:\n        raise ValueError(\"Not a valid argument for validate\")",
                "def _convert_to_mulitindex(index) -> MultiIndex:\n    if isinstance(index, MultiIndex):\n        return index\n    else:\n        return MultiIndex.from_arrays([index.values], names=[index.name])",
                "def __init__(\n    self,\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index: bool = False,\n    right_index: bool = False,\n    axis=1,\n    suffixes=(\"_x\", \"_y\"),\n    copy: bool = True,\n    fill_method=None,\n    how: str = \"outer\",\n):\n\n    self.fill_method = fill_method\n    _MergeOperation.__init__(\n        self,\n        left,\n        right,\n        on=on,\n        left_on=left_on,\n        left_index=left_index,\n        right_index=right_index,\n        right_on=right_on,\n        axis=axis,\n        how=how,\n        suffixes=suffixes,\n        sort=True,  # factorize sorts\n    )",
                "def get_result(self):\n    join_index, left_indexer, right_indexer = self._get_join_info()\n\n    # this is a bit kludgy\n    ldata, rdata = self.left._data, self.right._data\n    lsuf, rsuf = self.suffixes\n\n    llabels, rlabels = _items_overlap_with_suffix(\n        ldata.items, lsuf, rdata.items, rsuf\n    )\n\n    if self.fill_method == \"ffill\":\n        left_join_indexer = libjoin.ffill_indexer(left_indexer)\n        right_join_indexer = libjoin.ffill_indexer(right_indexer)\n    else:\n        left_join_indexer = left_indexer\n        right_join_indexer = right_indexer\n\n    lindexers = {1: left_join_indexer} if left_join_indexer is not None else {}\n    rindexers = {1: right_join_indexer} if right_join_indexer is not None else {}\n\n    result_data = concatenate_block_managers(\n        [(ldata, lindexers), (rdata, rindexers)],\n        axes=[llabels.append(rlabels), join_index],\n        concat_axis=0,\n        copy=self.copy,\n    )\n\n    typ = self.left._constructor\n    result = typ(result_data).__finalize__(self, method=self._merge_type)\n\n    self._maybe_add_join_keys(result, left_indexer, right_indexer)\n\n    return result",
                "def __init__(\n    self,\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index: bool = False,\n    right_index: bool = False,\n    by=None,\n    left_by=None,\n    right_by=None,\n    axis=1,\n    suffixes=(\"_x\", \"_y\"),\n    copy: bool = True,\n    fill_method=None,\n    how: str = \"asof\",\n    tolerance=None,\n    allow_exact_matches: bool = True,\n    direction: str = \"backward\",\n):\n\n    self.by = by\n    self.left_by = left_by\n    self.right_by = right_by\n    self.tolerance = tolerance\n    self.allow_exact_matches = allow_exact_matches\n    self.direction = direction\n\n    _OrderedMerge.__init__(\n        self,\n        left,\n        right,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        axis=axis,\n        how=how,\n        suffixes=suffixes,\n        fill_method=fill_method,\n    )",
                "def _validate_specification(self):\n    super()._validate_specification()\n\n    # we only allow on to be a single item for on\n    if len(self.left_on) != 1 and not self.left_index:\n        raise MergeError(\"can only asof on a key for left\")\n\n    if len(self.right_on) != 1 and not self.right_index:\n        raise MergeError(\"can only asof on a key for right\")\n\n    if self.left_index and isinstance(self.left.index, MultiIndex):\n        raise MergeError(\"left can only have one index\")\n\n    if self.right_index and isinstance(self.right.index, MultiIndex):\n        raise MergeError(\"right can only have one index\")\n\n    # set 'by' columns\n    if self.by is not None:\n        if self.left_by is not None or self.right_by is not None:\n            raise MergeError(\"Can only pass by OR left_by and right_by\")\n        self.left_by = self.right_by = self.by\n    if self.left_by is None and self.right_by is not None:\n        raise MergeError(\"missing left_by\")\n    if self.left_by is not None and self.right_by is None:\n        raise MergeError(\"missing right_by\")\n\n    # add 'by' to our key-list so we can have it in the\n    # output as a key\n    if self.left_by is not None:\n        if not is_list_like(self.left_by):\n            self.left_by = [self.left_by]\n        if not is_list_like(self.right_by):\n            self.right_by = [self.right_by]\n\n        if len(self.left_by) != len(self.right_by):\n            raise MergeError(\"left_by and right_by must be same length\")\n\n        self.left_on = self.left_by + list(self.left_on)\n        self.right_on = self.right_by + list(self.right_on)\n\n    # check 'direction' is valid\n    if self.direction not in [\"backward\", \"forward\", \"nearest\"]:\n        raise MergeError(\n            \"direction invalid: {direction}\".format(direction=self.direction)\n        )",
                "@property\ndef _asof_key(self):\n    \"\"\" This is our asof key, the 'on' \"\"\"\n    return self.left_on[-1]",
                "def _get_merge_keys(self):\n\n    # note this function has side effects\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                # The generic error message is confusing for categoricals.\n                #\n                # In this function, the join keys include both the original\n                # ones of the merge_asof() call, and also the keys passed\n                # to its by= argument. Unordered but equal categories\n                # are not supported for the former, but will fail\n                # later with a ValueError, so we don't *need* to check\n                # for them here.\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, both sides category, but not equal ones\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            else:\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            raise MergeError(msg)\n\n    # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n    if self.tolerance is not None:\n\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n\n        msg = (\n            \"incompatible tolerance {tolerance}, must be compat \"\n            \"with type {lkdtype}\".format(\n                tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n            )\n        )\n\n        if needs_i8_conversion(lt):\n            if not isinstance(self.tolerance, datetime.timedelta):\n                raise MergeError(msg)\n            if self.tolerance < Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_integer_dtype(lt):\n            if not is_integer(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_float_dtype(lt):\n            if not is_number(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n\n    # validate allow_exact_matches\n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n    return left_join_keys, right_join_keys, join_names",
                "def _get_join_indexers(self):\n    \"\"\" return the join indexers \"\"\"\n\n    def flip(xs):\n        \"\"\" unlike np.transpose, this returns an array of tuples \"\"\"\n        xs = [\n            x if not is_extension_array_dtype(x) else x._ndarray_values for x in xs\n        ]\n        labels = list(string.ascii_lowercase[: len(xs)])\n        dtypes = [x.dtype for x in xs]\n        labeled_dtypes = list(zip(labels, dtypes))\n        return np.array(list(zip(*xs)), labeled_dtypes)\n\n    # values to compare\n    left_values = (\n        self.left.index.values if self.left_index else self.left_join_keys[-1]\n    )\n    right_values = (\n        self.right.index.values if self.right_index else self.right_join_keys[-1]\n    )\n    tolerance = self.tolerance\n\n    # we require sortedness and non-null values in the join keys\n    msg_sorted = \"{side} keys must be sorted\"\n    msg_missings = \"Merge keys contain null values on {side} side\"\n\n    if not Index(left_values).is_monotonic:\n        if isna(left_values).any():\n            raise ValueError(msg_missings.format(side=\"left\"))\n        else:\n            raise ValueError(msg_sorted.format(side=\"left\"))\n\n    if not Index(right_values).is_monotonic:\n        if isna(right_values).any():\n            raise ValueError(msg_missings.format(side=\"right\"))\n        else:\n            raise ValueError(msg_sorted.format(side=\"right\"))\n\n    # initial type conversion as needed\n    if needs_i8_conversion(left_values):\n        left_values = left_values.view(\"i8\")\n        right_values = right_values.view(\"i8\")\n        if tolerance is not None:\n            tolerance = Timedelta(tolerance)\n            tolerance = tolerance.value\n\n    # a \"by\" parameter requires special handling\n    if self.left_by is not None:\n        # remove 'on' parameter from values if one existed\n        if self.left_index and self.right_index:\n            left_by_values = self.left_join_keys\n            right_by_values = self.right_join_keys\n        else:\n            left_by_values = self.left_join_keys[0:-1]\n            right_by_values = self.right_join_keys[0:-1]\n\n        # get tuple representation of values if more than one\n        if len(left_by_values) == 1:\n            left_by_values = left_by_values[0]\n            right_by_values = right_by_values[0]\n        else:\n            left_by_values = flip(left_by_values)\n            right_by_values = flip(right_by_values)\n\n        # upcast 'by' parameter because HashTable is limited\n        by_type = _get_cython_type_upcast(left_by_values.dtype)\n        by_type_caster = _type_casters[by_type]\n        left_by_values = by_type_caster(left_by_values)\n        right_by_values = by_type_caster(right_by_values)\n\n        # choose appropriate function by type\n        func = _asof_by_function(self.direction)\n        return func(\n            left_values,\n            right_values,\n            left_by_values,\n            right_by_values,\n            self.allow_exact_matches,\n            tolerance,\n        )\n    else:\n        # choose appropriate function by type\n        func = _asof_function(self.direction)\n        return func(left_values, right_values, self.allow_exact_matches, tolerance)",
                "def renamer(x, suffix):\n    \"\"\"\n    Rename the left and right indices.\n\n    If there is overlap, and suffix is not None, add\n    suffix, otherwise, leave it as-is.\n\n    Parameters\n    ----------\n    x : original column name\n    suffix : str or None\n\n    Returns\n    -------\n    x : renamed column name\n    \"\"\"\n    if x in to_rename and suffix is not None:\n        return \"{x}{suffix}\".format(x=x, suffix=suffix)\n    return x",
                "def flip(xs):\n    \"\"\" unlike np.transpose, this returns an array of tuples \"\"\"\n    xs = [\n        x if not is_extension_array_dtype(x) else x._ndarray_values for x in xs\n    ]\n    labels = list(string.ascii_lowercase[: len(xs)])\n    dtypes = [x.dtype for x in xs]\n    labeled_dtypes = list(zip(labels, dtypes))\n    return np.array(list(zip(*xs)), labeled_dtypes)"
            ],
            "inscope_function_signatures": [
                "merge(left, right, how: str='inner', on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, sort: bool=False, suffixes=('_x', '_y'), copy: bool=True, indicator: bool=False, validate=None)",
                "_groupby_and_merge(by, on, left, right: 'DataFrame', _merge_pieces, check_duplicates: bool=True)",
                "merge_ordered(left, right, on=None, left_on=None, right_on=None, left_by=None, right_by=None, fill_method=None, suffixes=('_x', '_y'), how: str='outer')",
                "merge_asof(left, right, on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, by=None, left_by=None, right_by=None, suffixes=('_x', '_y'), tolerance=None, allow_exact_matches: bool=True, direction: str='backward')",
                "_get_join_indexers(left_keys, right_keys, sort: bool=False, how: str='inner', **kwargs)",
                "_restore_dropped_levels_multijoin(left: MultiIndex, right: MultiIndex, dropped_level_names, join_index, lindexer, rindexer)",
                "_asof_function(direction: str)",
                "_asof_by_function(direction: str)",
                "_get_cython_type_upcast(dtype)",
                "_get_multiindex_indexer(join_keys, index: MultiIndex, sort: bool)",
                "_get_single_indexer(join_key, index, sort: bool=False)",
                "_left_join_on_index(left_ax: Index, right_ax: Index, join_keys, sort: bool=False)",
                "_right_outer_join(x, y, max_groups)",
                "_factorize_keys(lk, rk, sort=True)",
                "_sort_labels(uniques: np.ndarray, left, right)",
                "_get_join_keys(llab, rlab, shape, sort: bool)",
                "_should_fill(lname, rname) -> bool",
                "_any(x) -> bool",
                "_validate_operand(obj: FrameOrSeries) -> 'DataFrame'",
                "_items_overlap_with_suffix(left: Index, lsuffix, right: Index, rsuffix)",
                "_merger(x, y)",
                "__init__(self, left: Union['Series', 'DataFrame'], right: Union['Series', 'DataFrame'], how: str='inner', on=None, left_on=None, right_on=None, axis=1, left_index: bool=False, right_index: bool=False, sort: bool=True, suffixes=('_x', '_y'), copy: bool=True, indicator: bool=False, validate=None)",
                "get_result(self)",
                "_indicator_pre_merge(self, left: 'DataFrame', right: 'DataFrame') -> Tuple['DataFrame', 'DataFrame']",
                "_indicator_post_merge(self, result)",
                "_maybe_restore_index_levels(self, result)",
                "_maybe_add_join_keys(self, result, left_indexer, right_indexer)",
                "_get_join_indexers(self)",
                "_get_join_info(self)",
                "_create_join_index(self, index: Index, other_index: Index, indexer, other_indexer, how: str='left')",
                "_get_merge_keys(self)",
                "_maybe_coerce_merge_keys(self)",
                "_validate_specification(self)",
                "_validate(self, validate: str)",
                "_convert_to_mulitindex(index) -> MultiIndex",
                "__init__(self, left, right, on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, axis=1, suffixes=('_x', '_y'), copy: bool=True, fill_method=None, how: str='outer')",
                "get_result(self)",
                "__init__(self, left, right, on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, by=None, left_by=None, right_by=None, axis=1, suffixes=('_x', '_y'), copy: bool=True, fill_method=None, how: str='asof', tolerance=None, allow_exact_matches: bool=True, direction: str='backward')",
                "_validate_specification(self)",
                "_asof_key(self)",
                "_get_merge_keys(self)",
                "_get_join_indexers(self)",
                "renamer(x, suffix)",
                "flip(xs)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    51
                ],
                "str": [
                    896,
                    1985,
                    1282,
                    1539,
                    1542,
                    553,
                    586,
                    587,
                    1229,
                    1493,
                    182,
                    316,
                    1498,
                    60,
                    1438
                ],
                "bool": [
                    1537,
                    1282,
                    1541,
                    1815,
                    1432,
                    1433,
                    1436,
                    1825,
                    1954,
                    558,
                    559,
                    560,
                    562,
                    563,
                    308,
                    309,
                    315,
                    64,
                    65,
                    66,
                    1984,
                    68,
                    69,
                    1990,
                    589,
                    95,
                    1779,
                    1530,
                    1531
                ],
                "op": [
                    519,
                    72,
                    536,
                    270,
                    87,
                    280
                ],
                "_MergeOperation": [
                    72,
                    1442,
                    1422
                ],
                "left": [
                    2049,
                    520,
                    1554,
                    1944,
                    1945,
                    286,
                    673,
                    1444,
                    293,
                    298,
                    686,
                    944,
                    689,
                    690,
                    946,
                    566,
                    695,
                    73,
                    984,
                    991,
                    2016,
                    2018,
                    995,
                    996,
                    1003,
                    1392,
                    115,
                    1399,
                    1400
                ],
                "right": [
                    128,
                    129,
                    130,
                    2049,
                    137,
                    521,
                    140,
                    144,
                    1555,
                    1945,
                    286,
                    673,
                    292,
                    1445,
                    298,
                    687,
                    944,
                    947,
                    692,
                    693,
                    695,
                    567,
                    969,
                    74,
                    973,
                    974,
                    978,
                    981,
                    2016,
                    2018,
                    1395,
                    1403,
                    1020
                ],
                "how": [
                    1321,
                    75,
                    1323,
                    1452,
                    912,
                    1562,
                    278,
                    570
                ],
                "on": [
                    128,
                    129,
                    291,
                    573,
                    1446,
                    522,
                    76,
                    273,
                    1556,
                    123,
                    124,
                    125,
                    126,
                    286
                ],
                "left_on": [
                    1447,
                    523,
                    77,
                    274,
                    1557,
                    574
                ],
                "right_on": [
                    1450,
                    524,
                    78,
                    275,
                    1558,
                    575
                ],
                "left_index": [
                    1559,
                    581,
                    1448,
                    525,
                    79,
                    596,
                    599
                ],
                "right_index": [
                    582,
                    1449,
                    526,
                    80,
                    1560,
                    601,
                    604
                ],
                "sort": [
                    1807,
                    1810,
                    1812,
                    1816,
                    1305,
                    1819,
                    1312,
                    1317,
                    1322,
                    1838,
                    1843,
                    1845,
                    1975,
                    1981,
                    579,
                    81,
                    1783,
                    1788,
                    1919
                ],
                "suffixes": [
                    578,
                    1453,
                    82,
                    530,
                    276,
                    1563
                ],
                "copy": [
                    1320,
                    577,
                    83
                ],
                "indicator": [
                    584,
                    84
                ],
                "validate": [
                    1260,
                    1267,
                    85,
                    631,
                    632,
                    1274,
                    1243
                ],
                "op.get_result": [
                    280,
                    536,
                    87
                ],
                "Substitution": [
                    55
                ],
                "Appender": [
                    56
                ],
                "_merge_doc": [
                    56,
                    91
                ],
                "__debug__": [
                    90
                ],
                "merge.__doc__": [
                    91
                ],
                "merge": [
                    91
                ],
                "pieces": [
                    161,
                    167,
                    168,
                    111,
                    147
                ],
                "isinstance": [
                    1985,
                    1666,
                    1828,
                    1577,
                    587,
                    1580,
                    589,
                    1005,
                    1995,
                    112,
                    912,
                    818,
                    1997,
                    1940,
                    1373,
                    125,
                    1022
                ],
                "by": [
                    128,
                    129,
                    130,
                    1545,
                    527,
                    112,
                    113,
                    115,
                    154
                ],
                "list": [
                    1792,
                    1604,
                    1605,
                    1701,
                    1703,
                    1704,
                    1789,
                    112,
                    125,
                    1787,
                    1309
                ],
                "tuple": [
                    112,
                    125
                ],
                "lby": [
                    169,
                    115,
                    134
                ],
                "left.groupby": [
                    115
                ],
                "check_duplicates": [
                    122
                ],
                "any": [
                    128,
                    779,
                    766,
                    1720,
                    1726
                ],
                "right.duplicated": [
                    128
                ],
                "right.drop_duplicates": [
                    129
                ],
                "rby": [
                    136,
                    140,
                    130,
                    132
                ],
                "right.groupby": [
                    130
                ],
                "KeyError": [
                    131,
                    141,
                    158
                ],
                "key": [
                    140,
                    157,
                    134
                ],
                "lhs": [
                    145,
                    150,
                    134,
                    143
                ],
                "rhs": [
                    137,
                    140,
                    150
                ],
                "right.take": [
                    140
                ],
                "rby.indices": [
                    140
                ],
                "lcols": [
                    144,
                    143
                ],
                "lhs.columns.tolist": [
                    143
                ],
                "lhs.columns": [
                    143
                ],
                "cols": [
                    144,
                    145
                ],
                "r": [
                    144
                ],
                "right.columns": [
                    144,
                    673
                ],
                "set": [
                    144
                ],
                "merged": [
                    161,
                    145,
                    146,
                    147,
                    150,
                    156,
                    157
                ],
                "lhs.reindex": [
                    145
                ],
                "merged.index": [
                    146
                ],
                "range": [
                    1795,
                    1958,
                    1965,
                    1392,
                    146,
                    1395,
                    1784,
                    1306
                ],
                "len": [
                    1795,
                    146,
                    1299,
                    1944,
                    1306,
                    1050,
                    1185,
                    1826,
                    1571,
                    1828,
                    1701,
                    1574,
                    1958,
                    946,
                    947,
                    1971,
                    1845,
                    1209,
                    1211,
                    1601,
                    1218,
                    1220,
                    1226,
                    1750,
                    984,
                    860,
                    2017,
                    870,
                    872,
                    882,
                    884,
                    886,
                    1912
                ],
                "pieces.append": [
                    161,
                    147
                ],
                "_merge_pieces": [
                    150
                ],
                "k": [
                    998,
                    999,
                    1000,
                    1003,
                    1004,
                    1020,
                    1021,
                    1015,
                    1016,
                    1017,
                    154,
                    156,
                    157
                ],
                "result": [
                    772,
                    785,
                    658,
                    661,
                    663,
                    665,
                    667,
                    796,
                    285,
                    289,
                    802,
                    167,
                    168,
                    169,
                    298,
                    299,
                    815,
                    816,
                    817,
                    818,
                    821,
                    824,
                    699,
                    700,
                    827,
                    702,
                    703,
                    829,
                    831,
                    706,
                    710,
                    711,
                    1486,
                    1488,
                    1490,
                    740,
                    746,
                    760
                ],
                "concat": [
                    167
                ],
                "result.reindex": [
                    168
                ],
                "columns": [
                    168,
                    673,
                    681,
                    676
                ],
                "_OrderedMerge": [
                    1520,
                    1552,
                    270
                ],
                "x": [
                    1699,
                    294,
                    1702,
                    1991,
                    2043,
                    271,
                    946,
                    947,
                    2042,
                    1787,
                    2044,
                    1309,
                    286,
                    1855
                ],
                "y": [
                    272,
                    294,
                    286,
                    1855
                ],
                "fill_method": [
                    1441,
                    1564,
                    277
                ],
                "left_by": [
                    1546,
                    528,
                    282,
                    284,
                    286
                ],
                "right_by": [
                    288,
                    290,
                    1547,
                    529,
                    282
                ],
                "ValueError": [
                    283,
                    677,
                    682,
                    1721,
                    1723,
                    1212,
                    1727,
                    1729,
                    1221,
                    1227,
                    1999,
                    592,
                    597,
                    602,
                    2021,
                    1141,
                    1145,
                    1147,
                    1149,
                    1278,
                    1151
                ],
                "_": [
                    289,
                    1891,
                    1892,
                    1947,
                    285
                ],
                "_groupby_and_merge": [
                    289,
                    285
                ],
                "_merger": [
                    294,
                    298,
                    286
                ],
                "_AsOfMerge": [
                    519
                ],
                "tolerance": [
                    1735,
                    1736,
                    1737,
                    1771,
                    1548,
                    1776,
                    1713,
                    532
                ],
                "allow_exact_matches": [
                    1549,
                    533
                ],
                "direction": [
                    1499,
                    1494,
                    534,
                    1550
                ],
                "_merge_type": [
                    1521,
                    547,
                    1423
                ],
                "Union": [
                    552,
                    551
                ],
                "_left": [
                    568,
                    612,
                    608,
                    566
                ],
                "_validate_operand": [
                    566,
                    567
                ],
                "_right": [
                    608,
                    569,
                    612,
                    567
                ],
                "self.left": [
                    640,
                    1026,
                    772,
                    774,
                    1030,
                    1033,
                    1163,
                    1165,
                    657,
                    1184,
                    1577,
                    1708,
                    944,
                    1461,
                    568,
                    1220,
                    840,
                    1485,
                    860,
                    862,
                    875,
                    881,
                    1654,
                    763,
                    636,
                    1022
                ],
                "self": [
                    1026,
                    1030,
                    1033,
                    1545,
                    1546,
                    1036,
                    1547,
                    1548,
                    1549,
                    1550,
                    1553,
                    1048,
                    1571,
                    1574,
                    1577,
                    1580,
                    1584,
                    1585,
                    1587,
                    1588,
                    1590,
                    568,
                    569,
                    570,
                    571,
                    1595,
                    573,
                    574,
                    575,
                    1596,
                    577,
                    578,
                    579,
                    1597,
                    581,
                    582,
                    1598,
                    584,
                    1601,
                    586,
                    587,
                    588,
                    589,
                    590,
                    1608,
                    1610,
                    1616,
                    615,
                    619,
                    620,
                    621,
                    622,
                    626,
                    1651,
                    1653,
                    1654,
                    632,
                    635,
                    636,
                    1661,
                    638,
                    640,
                    641,
                    1666,
                    1668,
                    1672,
                    1674,
                    1163,
                    1165,
                    654,
                    1166,
                    1168,
                    657,
                    658,
                    1678,
                    660,
                    661,
                    1172,
                    663,
                    1174,
                    665,
                    1175,
                    1176,
                    1177,
                    1179,
                    1180,
                    1687,
                    1184,
                    1689,
                    1190,
                    1191,
                    1192,
                    681,
                    1193,
                    1708,
                    1711,
                    1200,
                    1201,
                    1202,
                    1713,
                    1207,
                    1208,
                    1209,
                    1210,
                    1211,
                    702,
                    1216,
                    1217,
                    706,
                    1218,
                    1219,
                    1220,
                    1225,
                    1226,
                    1740,
                    1742,
                    1743,
                    1232,
                    1233,
                    1744,
                    1235,
                    1746,
                    1237,
                    1238,
                    1747,
                    1240,
                    735,
                    738,
                    739,
                    1764,
                    1770,
                    1775,
                    1776,
                    753,
                    763,
                    769,
                    772,
                    1680,
                    774,
                    776,
                    782,
                    785,
                    787,
                    789,
                    790,
                    791,
                    836,
                    840,
                    841,
                    843,
                    845,
                    847,
                    849,
                    852,
                    854,
                    857,
                    859,
                    860,
                    861,
                    862,
                    863,
                    869,
                    871,
                    872,
                    873,
                    874,
                    875,
                    1599,
                    881,
                    1604,
                    1605,
                    912,
                    1441,
                    1443,
                    944,
                    1458,
                    1461,
                    1462,
                    1468,
                    960,
                    961,
                    1482,
                    1485,
                    1486,
                    1488,
                    997,
                    998,
                    1005,
                    1009,
                    1013,
                    1014,
                    1015,
                    1022
                ],
                "self.orig_left": [
                    568,
                    1233,
                    738
                ],
                "self.right": [
                    640,
                    776,
                    1036,
                    1166,
                    1168,
                    785,
                    787,
                    1184,
                    1580,
                    1711,
                    944,
                    1461,
                    569,
                    1211,
                    841,
                    863,
                    869,
                    872,
                    874,
                    1005,
                    1009,
                    1013,
                    636
                ],
                "self.orig_right": [
                    569,
                    739,
                    1238
                ],
                "self.how": [
                    836,
                    843,
                    845,
                    847,
                    912,
                    852,
                    570
                ],
                "self.axis": [
                    840,
                    841,
                    571
                ],
                "axis": [
                    1561,
                    571,
                    1451
                ],
                "self.on": [
                    1201,
                    1172,
                    573,
                    1207
                ],
                "com.maybe_make_list": [
                    573,
                    574,
                    575
                ],
                "com": [
                    1991,
                    1898,
                    1899,
                    1905,
                    1906,
                    573,
                    574,
                    575
                ],
                "self.left_on": [
                    1172,
                    1175,
                    1180,
                    1571,
                    1190,
                    1200,
                    1202,
                    1207,
                    1208,
                    1209,
                    1211,
                    574,
                    960,
                    961,
                    1604,
                    1225,
                    1226,
                    1616,
                    735,
                    997,
                    998,
                    753
                ],
                "self.right_on": [
                    1172,
                    1175,
                    1177,
                    1574,
                    1191,
                    1200,
                    1202,
                    1207,
                    575,
                    960,
                    961,
                    1216,
                    1217,
                    1218,
                    1220,
                    1605,
                    1226,
                    735,
                    753,
                    1014,
                    1015
                ],
                "self.copy": [
                    577,
                    1482,
                    654
                ],
                "self.suffixes": [
                    641,
                    578,
                    1462
                ],
                "self.sort": [
                    579,
                    836,
                    845,
                    849,
                    854
                ],
                "self.left_index": [
                    1219,
                    1571,
                    581,
                    871,
                    1192,
                    1577,
                    843,
                    1708,
                    1742,
                    1232,
                    852,
                    1653,
                    1174,
                    1176
                ],
                "self.right_index": [
                    582,
                    1574,
                    1193,
                    843,
                    1179,
                    1580,
                    1742,
                    847,
                    1711,
                    1237,
                    1174,
                    1210,
                    859
                ],
                "self.indicator": [
                    584,
                    587,
                    588,
                    589,
                    590,
                    660,
                    635
                ],
                "self.indicator_name": [
                    706,
                    681,
                    586,
                    588,
                    590,
                    702
                ],
                "Optional": [
                    586
                ],
                "is_bool": [
                    601,
                    596,
                    1687
                ],
                "format": [
                    609,
                    1187,
                    1636,
                    678,
                    2022,
                    2043,
                    1659,
                    1610,
                    1643,
                    1198,
                    1071,
                    2004,
                    598,
                    1494,
                    1499,
                    603,
                    831
                ],
                "type": [
                    2005,
                    604,
                    1661,
                    599
                ],
                "_left.columns.nlevels": [
                    608,
                    612
                ],
                "_left.columns": [
                    608,
                    612
                ],
                "_right.columns.nlevels": [
                    608,
                    612
                ],
                "_right.columns": [
                    608,
                    612
                ],
                "msg": [
                    609,
                    1635,
                    1667,
                    613,
                    1673,
                    1642,
                    1070,
                    1679,
                    1648,
                    1689,
                    1141,
                    1688,
                    1145,
                    1658,
                    1147,
                    1149,
                    1151
                ],
                "warnings.warn": [
                    1098,
                    613,
                    1087
                ],
                "warnings": [
                    1098,
                    613,
                    1087
                ],
                "UserWarning": [
                    1092,
                    613,
                    1103
                ],
                "self._validate_specification": [
                    615
                ],
                "self.left_join_keys": [
                    836,
                    619,
                    1708,
                    782,
                    1743,
                    849,
                    1746,
                    1235,
                    789,
                    790,
                    1048
                ],
                "self.right_join_keys": [
                    769,
                    836,
                    620,
                    1711,
                    1744,
                    1747,
                    854,
                    791,
                    1048,
                    1240
                ],
                "self.join_names": [
                    1048,
                    753,
                    621,
                    735
                ],
                "self._get_merge_keys": [
                    622
                ],
                "self._maybe_coerce_merge_keys": [
                    626
                ],
                "self._validate": [
                    632
                ],
                "self._indicator_pre_merge": [
                    636
                ],
                "join_index": [
                    652,
                    1458,
                    1847,
                    1848,
                    1480,
                    844,
                    848,
                    853,
                    861,
                    869,
                    870,
                    1382,
                    1384,
                    873,
                    1385,
                    1386,
                    881,
                    882,
                    884,
                    886,
                    887,
                    888,
                    638
                ],
                "left_indexer": [
                    647,
                    766,
                    789,
                    663,
                    1818,
                    1822,
                    799,
                    809,
                    1837,
                    1458,
                    1843,
                    1845,
                    1847,
                    1848,
                    1469,
                    1855,
                    1472,
                    1856,
                    844,
                    848,
                    1488,
                    853,
                    857,
                    864,
                    870,
                    877,
                    881,
                    884,
                    888,
                    762,
                    638
                ],
                "right_indexer": [
                    648,
                    779,
                    663,
                    1818,
                    1822,
                    805,
                    1837,
                    1458,
                    1843,
                    1848,
                    1851,
                    1470,
                    1855,
                    1856,
                    1473,
                    844,
                    848,
                    1488,
                    853,
                    857,
                    865,
                    869,
                    876,
                    882,
                    888,
                    762,
                    638
                ],
                "self._get_join_info": [
                    1458,
                    638
                ],
                "ldata": [
                    640,
                    644,
                    1479,
                    651,
                    1461,
                    1465
                ],
                "rdata": [
                    640,
                    644,
                    1479,
                    651,
                    1461,
                    1465
                ],
                "self.left._data": [
                    640,
                    840,
                    1461
                ],
                "self.right._data": [
                    640,
                    841,
                    1461
                ],
                "lsuf": [
                    641,
                    1465,
                    644,
                    1462
                ],
                "rsuf": [
                    641,
                    1465,
                    644,
                    1462
                ],
                "llabels": [
                    1464,
                    643,
                    652,
                    1480
                ],
                "rlabels": [
                    1464,
                    643,
                    652,
                    1480
                ],
                "_items_overlap_with_suffix": [
                    1464,
                    643
                ],
                "ldata.items": [
                    1465,
                    644
                ],
                "rdata.items": [
                    1465,
                    644
                ],
                "lindexers": [
                    1479,
                    651,
                    1475,
                    647
                ],
                "rindexers": [
                    648,
                    651,
                    1476,
                    1479
                ],
                "result_data": [
                    650,
                    1486,
                    1478,
                    658
                ],
                "concatenate_block_managers": [
                    650,
                    1478
                ],
                "llabels.append": [
                    1480,
                    652
                ],
                "typ": [
                    1164,
                    1165,
                    1485,
                    1167,
                    1168,
                    657,
                    658,
                    1486
                ],
                "self.left._constructor": [
                    657,
                    1485
                ],
                "__finalize__": [
                    658,
                    1486
                ],
                "self._merge_type": [
                    658,
                    1486
                ],
                "self._indicator_post_merge": [
                    661
                ],
                "self._maybe_add_join_keys": [
                    1488,
                    663
                ],
                "self._maybe_restore_index_levels": [
                    665
                ],
                "left.columns.union": [
                    673
                ],
                "left.columns": [
                    673
                ],
                "i": [
                    769,
                    1795,
                    1796,
                    1800,
                    1802,
                    1804,
                    782,
                    789,
                    790,
                    791,
                    675,
                    676,
                    1957,
                    679,
                    1965,
                    1967,
                    1968,
                    1969,
                    831,
                    1624,
                    1638,
                    1645,
                    754
                ],
                "left.copy": [
                    686
                ],
                "right.copy": [
                    687
                ],
                "astype": [
                    1962,
                    1963,
                    1165,
                    1168,
                    690,
                    693
                ],
                "Tuple": [
                    671
                ],
                "fillna": [
                    699,
                    700
                ],
                "Categorical": [
                    702
                ],
                "cat.rename_categories": [
                    706
                ],
                "cat": [
                    706
                ],
                "result.drop": [
                    710
                ],
                "names_to_restore": [
                    745,
                    746,
                    733,
                    743
                ],
                "name": [
                    772,
                    774,
                    776,
                    1163,
                    1165,
                    1166,
                    1168,
                    785,
                    787,
                    1047,
                    796,
                    802,
                    815,
                    816,
                    817,
                    819,
                    822,
                    829,
                    831,
                    1494,
                    1495,
                    1499,
                    1500,
                    734,
                    740,
                    743,
                    754,
                    760,
                    763
                ],
                "left_key": [
                    1816,
                    738,
                    1819,
                    734
                ],
                "right_key": [
                    1816,
                    1819,
                    739,
                    734
                ],
                "zip": [
                    961,
                    1025,
                    1703,
                    1704,
                    1008,
                    753,
                    1047,
                    1624,
                    1786,
                    1308,
                    734
                ],
                "self.orig_left._is_level_reference": [
                    738
                ],
                "self.orig_right._is_level_reference": [
                    739
                ],
                "result.index.names": [
                    824,
                    740
                ],
                "result.index": [
                    740,
                    818,
                    821,
                    824,
                    829
                ],
                "names_to_restore.append": [
                    743
                ],
                "result.set_index": [
                    746,
                    827
                ],
                "left_has_missing": [
                    768,
                    765,
                    750,
                    766
                ],
                "right_has_missing": [
                    778,
                    779,
                    781,
                    751
                ],
                "keys": [
                    753,
                    754
                ],
                "lname": [
                    1985,
                    754,
                    755,
                    1987
                ],
                "rname": [
                    1985,
                    754,
                    755,
                    1987
                ],
                "enumerate": [
                    1624,
                    754
                ],
                "_should_fill": [
                    755
                ],
                "take_left": [
                    774,
                    782,
                    790,
                    758,
                    793,
                    795,
                    798,
                    799
                ],
                "take_right": [
                    769,
                    801,
                    804,
                    805,
                    787,
                    758,
                    791,
                    793
                ],
                "is_dtype_equal": [
                    784,
                    1067,
                    1625,
                    771
                ],
                "dtype": [
                    1512,
                    785,
                    1514,
                    772
                ],
                "_values": [
                    802,
                    787,
                    796,
                    774
                ],
                "is_array_like": [
                    946,
                    947,
                    789
                ],
                "lvals": [
                    796,
                    813,
                    799
                ],
                "lfill": [
                    798,
                    799
                ],
                "na_value_for_dtype": [
                    920,
                    804,
                    798
                ],
                "take_left.dtype": [
                    798
                ],
                "algos.take_1d": [
                    805,
                    799
                ],
                "algos": [
                    1947,
                    805,
                    1413,
                    799
                ],
                "rvals": [
                    813,
                    802,
                    811,
                    805
                ],
                "rfill": [
                    804,
                    805
                ],
                "take_right.dtype": [
                    804
                ],
                "mask": [
                    1796,
                    1797,
                    809,
                    810,
                    1804,
                    813,
                    918,
                    919
                ],
                "mask.all": [
                    810
                ],
                "key_col": [
                    811,
                    813,
                    816,
                    819,
                    823,
                    829,
                    831
                ],
                "where": [
                    813
                ],
                "Index": [
                    1825,
                    1725,
                    829,
                    813,
                    2009,
                    884,
                    1942,
                    1719,
                    921,
                    892,
                    893
                ],
                "result._is_label_reference": [
                    815
                ],
                "result._is_level_reference": [
                    817
                ],
                "MultiIndex": [
                    1376,
                    1828,
                    1577,
                    1580,
                    1005,
                    912,
                    1329,
                    818,
                    1235,
                    1330,
                    1779,
                    1240,
                    1372,
                    1373,
                    1022
                ],
                "key_col.name": [
                    819
                ],
                "idx_list": [
                    827,
                    820
                ],
                "level_name": [
                    824,
                    821,
                    822
                ],
                "result.index.get_level_values": [
                    821
                ],
                "result.insert": [
                    831
                ],
                "_get_join_indexers": [
                    835
                ],
                "left_ax": [
                    840,
                    844,
                    849,
                    1845,
                    854,
                    1847,
                    1851
                ],
                "self.left._data.axes": [
                    840
                ],
                "right_ax": [
                    1828,
                    841,
                    845,
                    1838,
                    849,
                    1843,
                    854
                ],
                "self.right._data.axes": [
                    841
                ],
                "left_ax.join": [
                    844
                ],
                "_left_join_on_index": [
                    848,
                    853
                ],
                "self._get_join_indexers": [
                    857
                ],
                "self._create_join_index": [
                    873,
                    861
                ],
                "self.left.index": [
                    1026,
                    1220,
                    1030,
                    1577,
                    875,
                    1708,
                    881,
                    1022,
                    1654,
                    862
                ],
                "self.right.index": [
                    869,
                    874,
                    1580,
                    1005,
                    1711,
                    1009,
                    1013,
                    1211,
                    863
                ],
                "self.right.index.take": [
                    869
                ],
                "np.array": [
                    1704,
                    882,
                    870
                ],
                "np": [
                    870,
                    1704,
                    1097,
                    1961,
                    1931,
                    1900,
                    1901,
                    1933,
                    1966,
                    882,
                    1939,
                    884,
                    1940,
                    919,
                    1945,
                    1789,
                    1086
                ],
                "self.left.index.take": [
                    881
                ],
                "np.arange": [
                    884
                ],
                "join_index.astype": [
                    887
                ],
                "object": [
                    1167,
                    1164,
                    887
                ],
                "other_index": [
                    912
                ],
                "indexer": [
                    1413,
                    918,
                    1401,
                    922,
                    1404
                ],
                "np.any": [
                    919
                ],
                "fill_value": [
                    920,
                    921
                ],
                "index.dtype": [
                    920
                ],
                "index": [
                    1376,
                    1792,
                    1796,
                    1789,
                    1784,
                    1816,
                    1783,
                    920,
                    921,
                    922,
                    1373,
                    1374
                ],
                "index.append": [
                    921
                ],
                "index.take": [
                    922
                ],
                "left_keys": [
                    963,
                    995,
                    1030,
                    1000,
                    938,
                    1003,
                    1038,
                    1299,
                    1305,
                    1306,
                    1023,
                    991
                ],
                "right_keys": [
                    965,
                    1305,
                    969,
                    939,
                    973,
                    1006,
                    1038,
                    978,
                    1300,
                    981,
                    1013,
                    1017,
                    1020,
                    989
                ],
                "join_names": [
                    992,
                    996,
                    966,
                    1001,
                    970,
                    1386,
                    940,
                    1004,
                    974,
                    1038,
                    1417,
                    1419,
                    1621,
                    1018,
                    1691,
                    1021
                ],
                "right_drop": [
                    985,
                    1035,
                    1036,
                    941
                ],
                "left_drop": [
                    1032,
                    1033,
                    987,
                    942
                ],
                "is_lkey": [
                    962,
                    946,
                    999
                ],
                "is_rkey": [
                    976,
                    1016,
                    947,
                    964
                ],
                "_any": [
                    960,
                    997,
                    1014
                ],
                "lk": [
                    1164,
                    1912,
                    1047,
                    1050,
                    1053,
                    1914,
                    1055,
                    1061,
                    1067,
                    1073,
                    1080,
                    1081,
                    1085,
                    1086,
                    961,
                    962,
                    963,
                    1096,
                    1097,
                    1869,
                    1870,
                    1874,
                    1108,
                    1876,
                    982,
                    1624,
                    1625,
                    1626,
                    987,
                    1881,
                    1883,
                    990,
                    991,
                    992,
                    1118,
                    1887,
                    1889,
                    1124,
                    1891,
                    1126,
                    1638,
                    1894,
                    1898,
                    1900,
                    1645,
                    1905,
                    1909,
                    1144,
                    1146,
                    1148,
                    1150
                ],
                "rk": [
                    1167,
                    1912,
                    1047,
                    1050,
                    1054,
                    1056,
                    1061,
                    1067,
                    1073,
                    1080,
                    1081,
                    1085,
                    1086,
                    961,
                    964,
                    965,
                    968,
                    969,
                    970,
                    1096,
                    1097,
                    1869,
                    1871,
                    976,
                    977,
                    978,
                    1874,
                    1876,
                    1109,
                    982,
                    1878,
                    1624,
                    985,
                    1625,
                    1626,
                    1881,
                    989,
                    1117,
                    1884,
                    1888,
                    1889,
                    1123,
                    1892,
                    1638,
                    1127,
                    1894,
                    1899,
                    1645,
                    1901,
                    1906,
                    1910,
                    1144,
                    1146,
                    1915,
                    1148,
                    1150
                ],
                "left_keys.append": [
                    963,
                    995,
                    1000,
                    1003,
                    991
                ],
                "right_keys.append": [
                    965,
                    969,
                    973,
                    978,
                    981,
                    1017,
                    1020,
                    989
                ],
                "join_names.append": [
                    992,
                    996,
                    966,
                    1001,
                    970,
                    1004,
                    974,
                    1018,
                    1021
                ],
                "right._get_label_or_level_values": [
                    969,
                    978,
                    1020
                ],
                "right.index": [
                    981,
                    973,
                    974
                ],
                "right.index.name": [
                    974
                ],
                "right_drop.append": [
                    985
                ],
                "left_drop.append": [
                    987
                ],
                "left._get_label_or_level_values": [
                    1003,
                    991
                ],
                "left.index": [
                    995,
                    996
                ],
                "left.index.name": [
                    996
                ],
                "lev._values.take": [
                    1024,
                    1007
                ],
                "lev._values": [
                    1024,
                    1007
                ],
                "lev": [
                    1008,
                    1024,
                    1025,
                    1007
                ],
                "lev_codes": [
                    1008,
                    1024,
                    1025,
                    1007
                ],
                "self.right.index.levels": [
                    1009
                ],
                "self.right.index.codes": [
                    1009
                ],
                "self.right.index._values": [
                    1013
                ],
                "self.left.index.levels": [
                    1026
                ],
                "self.left.index.codes": [
                    1026
                ],
                "self.left.index.values": [
                    1708,
                    1030
                ],
                "self.left._drop_labels_or_levels": [
                    1033
                ],
                "self.right._drop_labels_or_levels": [
                    1036
                ],
                "lk_is_cat": [
                    1064,
                    1164,
                    1060,
                    1053
                ],
                "is_categorical_dtype": [
                    1626,
                    1874,
                    1053,
                    1054
                ],
                "rk_is_cat": [
                    1064,
                    1060,
                    1054,
                    1167
                ],
                "lk_is_object": [
                    1153,
                    1123,
                    1117,
                    1055
                ],
                "is_object_dtype": [
                    1056,
                    1055
                ],
                "rk_is_object": [
                    1056,
                    1153,
                    1124,
                    1118
                ],
                "lk.is_dtype_equal": [
                    1874,
                    1061
                ],
                "lk.dtype": [
                    1889,
                    1638,
                    1097,
                    1067,
                    1900,
                    1645,
                    1073,
                    1887,
                    1625,
                    1626,
                    1081
                ],
                "rk.dtype": [
                    1888,
                    1889,
                    1638,
                    1067,
                    1645,
                    1901,
                    1073,
                    1625,
                    1626,
                    1086,
                    1081
                ],
                "is_numeric_dtype": [
                    1080,
                    1123,
                    1124
                ],
                "lk.dtype.kind": [
                    1081
                ],
                "rk.dtype.kind": [
                    1081
                ],
                "is_integer_dtype": [
                    1894,
                    1671,
                    1096,
                    1512,
                    1085
                ],
                "is_float_dtype": [
                    1096,
                    1514,
                    1085,
                    1677
                ],
                "all": [
                    1097,
                    1086
                ],
                "lk.astype": [
                    1086
                ],
                "np.isnan": [
                    1097,
                    1086
                ],
                "rk.astype": [
                    1097
                ],
                "lib.infer_dtype": [
                    1108,
                    1126,
                    1127
                ],
                "lib": [
                    1108,
                    1126,
                    1127
                ],
                "is_bool_dtype": [
                    1117,
                    1118
                ],
                "inferred_left": [
                    1137,
                    1139,
                    1132,
                    1126
                ],
                "inferred_right": [
                    1137,
                    1139,
                    1132,
                    1127
                ],
                "bool_types": [
                    1128,
                    1132
                ],
                "string_types": [
                    1129,
                    1139,
                    1137
                ],
                "needs_i8_conversion": [
                    1144,
                    1665,
                    1146,
                    1732
                ],
                "is_datetime64tz_dtype": [
                    1148,
                    1869,
                    1150
                ],
                "self.left.columns": [
                    1184,
                    1163
                ],
                "lk.categories.dtype": [
                    1164
                ],
                "lk.categories": [
                    1881,
                    1164,
                    1876
                ],
                "self.left.assign": [
                    1165
                ],
                "self.right.columns": [
                    1184,
                    1166
                ],
                "rk.categories.dtype": [
                    1167
                ],
                "rk.categories": [
                    1881,
                    1876,
                    1167
                ],
                "self.right.assign": [
                    1168
                ],
                "MergeError": [
                    1667,
                    1669,
                    1673,
                    1675,
                    1679,
                    1681,
                    1684,
                    1689,
                    1178,
                    1181,
                    1186,
                    1572,
                    1575,
                    1578,
                    1197,
                    1581,
                    1586,
                    1203,
                    1589,
                    1591,
                    1602,
                    1609,
                    1245,
                    1250,
                    1255,
                    1262,
                    1648,
                    1269
                ],
                "common_cols": [
                    1184,
                    1185,
                    1196,
                    1198,
                    1200
                ],
                "self.left.columns.intersection": [
                    1184
                ],
                "common_cols.is_unique": [
                    1196
                ],
                "n": [
                    1216,
                    1218,
                    1305,
                    1225,
                    1783,
                    1784,
                    1209,
                    1306
                ],
                "self.right.index.nlevels": [
                    1211
                ],
                "self.left.index.nlevels": [
                    1220
                ],
                "left_unique": [
                    1249,
                    1261,
                    1233,
                    1235,
                    1244
                ],
                "self.orig_left.index.is_unique": [
                    1233
                ],
                "self.orig_left.index": [
                    1233
                ],
                "is_unique": [
                    1240,
                    1235
                ],
                "MultiIndex.from_arrays": [
                    1240,
                    1235,
                    1376
                ],
                "right_unique": [
                    1254,
                    1268,
                    1238,
                    1240,
                    1244
                ],
                "self.orig_right.index.is_unique": [
                    1238
                ],
                "self.orig_right.index": [
                    1238
                ],
                "mapped": [
                    1304,
                    1786,
                    1308,
                    1782
                ],
                "_factorize_keys": [
                    1317,
                    1975,
                    1810,
                    1783,
                    1816,
                    1305
                ],
                "zipped": [
                    1786,
                    1787,
                    1308,
                    1309
                ],
                "llab": [
                    1312,
                    1921,
                    1924,
                    1962,
                    1931,
                    1981,
                    1936,
                    1968,
                    1977,
                    1914,
                    1309
                ],
                "rlab": [
                    1312,
                    1921,
                    1926,
                    1963,
                    1933,
                    1981,
                    1936,
                    1969,
                    1978,
                    1915,
                    1309
                ],
                "shape": [
                    1312,
                    1957,
                    1958,
                    1979,
                    1800,
                    1961,
                    1802,
                    1804,
                    1807,
                    1967,
                    1981,
                    1971,
                    1787,
                    1309
                ],
                "lkey": [
                    1312,
                    1317,
                    1962,
                    1325,
                    1807,
                    1968,
                    1810,
                    1812,
                    1972,
                    1975,
                    1977
                ],
                "rkey": [
                    1312,
                    1317,
                    1963,
                    1325,
                    1807,
                    1969,
                    1810,
                    1812,
                    1972,
                    1975,
                    1978
                ],
                "_get_join_keys": [
                    1312,
                    1981,
                    1807
                ],
                "count": [
                    1317,
                    1979,
                    1931,
                    1325,
                    1933,
                    1934,
                    1936,
                    1810,
                    1812,
                    1975,
                    1816,
                    1819,
                    1917
                ],
                "kwargs": [
                    1320,
                    1322,
                    1325
                ],
                "copy.copy": [
                    1320
                ],
                "join_func": [
                    1323,
                    1325
                ],
                "_join_functions": [
                    1859,
                    1323
                ],
                "index.values": [
                    1376
                ],
                "index.name": [
                    1376
                ],
                "_convert_to_mulitindex": [
                    1382
                ],
                "join_levels": [
                    1384,
                    1419,
                    1415
                ],
                "join_index.levels": [
                    1384
                ],
                "join_codes": [
                    1416,
                    1385,
                    1419
                ],
                "join_index.codes": [
                    1385
                ],
                "join_index.names": [
                    1386
                ],
                "lindexer": [
                    1392,
                    1401,
                    1391
                ],
                "left.size": [
                    1392
                ],
                "rindexer": [
                    1394,
                    1395,
                    1404
                ],
                "right.size": [
                    1395
                ],
                "dropped_level_name": [
                    1417,
                    1407,
                    1398,
                    1399
                ],
                "dropped_level_names": [
                    1398
                ],
                "left.names": [
                    1399
                ],
                "idx": [
                    1409,
                    1412,
                    1400,
                    1403,
                    1407
                ],
                "name_idx": [
                    1409,
                    1412,
                    1407
                ],
                "idx.names.index": [
                    1407
                ],
                "idx.names": [
                    1407
                ],
                "restore_levels": [
                    1409,
                    1415
                ],
                "idx.levels": [
                    1409
                ],
                "codes": [
                    1412,
                    1413
                ],
                "idx.codes": [
                    1412
                ],
                "restore_codes": [
                    1416,
                    1413
                ],
                "algos.take_nd": [
                    1413
                ],
                "self.fill_method": [
                    1441,
                    1468
                ],
                "_MergeOperation.__init__": [
                    1442
                ],
                "left_join_indexer": [
                    1472,
                    1475,
                    1469
                ],
                "libjoin.ffill_indexer": [
                    1469,
                    1470
                ],
                "libjoin": [
                    1860,
                    1861,
                    1863,
                    1812,
                    1495,
                    1818,
                    1500,
                    1469,
                    1470,
                    1855
                ],
                "right_join_indexer": [
                    1473,
                    1476,
                    1470
                ],
                "getattr": [
                    1871,
                    1500,
                    1870,
                    1495
                ],
                "_type_casters": [
                    1759,
                    1503
                ],
                "ensure_int64": [
                    1504,
                    1819,
                    1948,
                    1898,
                    1899,
                    1905,
                    1906,
                    1883,
                    1884
                ],
                "ensure_float64": [
                    1505
                ],
                "ensure_object": [
                    1506,
                    1909,
                    1910
                ],
                "self.by": [
                    1584,
                    1545,
                    1587
                ],
                "self.left_by": [
                    1601,
                    1604,
                    1546,
                    1740,
                    1585,
                    1587,
                    1588,
                    1590,
                    1595,
                    1596,
                    1597
                ],
                "self.right_by": [
                    1601,
                    1605,
                    1547,
                    1585,
                    1587,
                    1588,
                    1590,
                    1598,
                    1599
                ],
                "self.tolerance": [
                    1666,
                    1668,
                    1672,
                    1674,
                    1548,
                    1678,
                    1680,
                    1713,
                    1651,
                    1661
                ],
                "self.allow_exact_matches": [
                    1770,
                    1549,
                    1776,
                    1687,
                    1689
                ],
                "self.direction": [
                    1764,
                    1608,
                    1610,
                    1550,
                    1775
                ],
                "_OrderedMerge.__init__": [
                    1552
                ],
                "_validate_specification": [
                    1568
                ],
                "super": [
                    1568,
                    1621
                ],
                "is_list_like": [
                    1596,
                    1598
                ],
                "property": [
                    1613
                ],
                "left_join_keys": [
                    1624,
                    1691,
                    1656,
                    1621
                ],
                "right_join_keys": [
                    1624,
                    1691,
                    1621
                ],
                "_get_merge_keys": [
                    1621
                ],
                "repr": [
                    1661,
                    1645,
                    1638
                ],
                "lt": [
                    1665,
                    1671,
                    1677,
                    1654,
                    1656,
                    1661
                ],
                "lt.dtype": [
                    1661
                ],
                "datetime.timedelta": [
                    1666
                ],
                "datetime": [
                    1666
                ],
                "Timedelta": [
                    1736,
                    1668
                ],
                "is_integer": [
                    1672
                ],
                "is_number": [
                    1678
                ],
                "msg.format": [
                    1689
                ],
                "xs": [
                    1698,
                    1699,
                    1701,
                    1702,
                    1704
                ],
                "is_extension_array_dtype": [
                    1888,
                    1699,
                    1887
                ],
                "x._ndarray_values": [
                    1699
                ],
                "labels": [
                    1945,
                    1947,
                    1701,
                    1703
                ],
                "string.ascii_lowercase": [
                    1701
                ],
                "string": [
                    1701
                ],
                "dtypes": [
                    1702,
                    1703
                ],
                "x.dtype": [
                    1702
                ],
                "labeled_dtypes": [
                    1704,
                    1703
                ],
                "left_values": [
                    1732,
                    1733,
                    1766,
                    1707,
                    1776,
                    1719,
                    1720
                ],
                "right_values": [
                    1734,
                    1767,
                    1710,
                    1776,
                    1725,
                    1726
                ],
                "self.right.index.values": [
                    1711
                ],
                "msg_sorted": [
                    1729,
                    1723,
                    1716
                ],
                "msg_missings": [
                    1721,
                    1717,
                    1727
                ],
                "is_monotonic": [
                    1725,
                    1719
                ],
                "isna": [
                    1720,
                    1726
                ],
                "msg_missings.format": [
                    1721,
                    1727
                ],
                "msg_sorted.format": [
                    1729,
                    1723
                ],
                "left_values.view": [
                    1733
                ],
                "right_values.view": [
                    1734
                ],
                "tolerance.value": [
                    1737
                ],
                "left_by_values": [
                    1760,
                    1768,
                    1743,
                    1746,
                    1750,
                    1751,
                    1754,
                    1758
                ],
                "right_by_values": [
                    1761,
                    1769,
                    1744,
                    1747,
                    1752,
                    1755
                ],
                "flip": [
                    1754,
                    1755
                ],
                "by_type": [
                    1758,
                    1759
                ],
                "_get_cython_type_upcast": [
                    1758
                ],
                "left_by_values.dtype": [
                    1758
                ],
                "by_type_caster": [
                    1760,
                    1761,
                    1759
                ],
                "func": [
                    1776,
                    1764,
                    1765,
                    1775
                ],
                "_asof_by_function": [
                    1764
                ],
                "_asof_function": [
                    1775
                ],
                "index.levels": [
                    1783
                ],
                "join_keys": [
                    1826,
                    1795,
                    1828,
                    1800,
                    1838,
                    1841,
                    1783
                ],
                "index.nlevels": [
                    1784
                ],
                "rcodes": [
                    1792,
                    1804,
                    1807,
                    1787,
                    1789
                ],
                "lcodes": [
                    1800,
                    1787,
                    1807
                ],
                "map": [
                    1792,
                    1789
                ],
                "np.take": [
                    1789
                ],
                "index.codes": [
                    1792,
                    1796,
                    1789
                ],
                "i8copy": [
                    1792,
                    1791
                ],
                "a.astype": [
                    1791
                ],
                "a": [
                    1800,
                    1801,
                    1791
                ],
                "mask.any": [
                    1797
                ],
                "a.size": [
                    1801
                ],
                "libjoin.left_outer_join": [
                    1818,
                    1812,
                    1861,
                    1855
                ],
                "join_key": [
                    1816
                ],
                "right_ax.nlevels": [
                    1828
                ],
                "AssertionError": [
                    1830
                ],
                "_get_multiindex_indexer": [
                    1837
                ],
                "jkey": [
                    1841,
                    1843
                ],
                "_get_single_indexer": [
                    1843
                ],
                "left_ax.take": [
                    1847
                ],
                "max_groups": [
                    1855
                ],
                "libjoin.inner_join": [
                    1860
                ],
                "_right_outer_join": [
                    1862
                ],
                "libjoin.full_outer_join": [
                    1863
                ],
                "_data": [
                    1870,
                    1871
                ],
                "lk.categories.equals": [
                    1876
                ],
                "rk.codes": [
                    1881,
                    1878
                ],
                "_recode_for_categories": [
                    1881
                ],
                "lk.codes": [
                    1883
                ],
                "lk._values_for_factorize": [
                    1891
                ],
                "rk._values_for_factorize": [
                    1892
                ],
                "klass": [
                    1904,
                    1897,
                    1908,
                    1912
                ],
                "libhashtable.Int64Factorizer": [
                    1904,
                    1897
                ],
                "libhashtable": [
                    1904,
                    1897,
                    1908
                ],
                "com.values_from_object": [
                    1905,
                    1898,
                    1899,
                    1906
                ],
                "issubclass": [
                    1900
                ],
                "lk.dtype.type": [
                    1900
                ],
                "np.timedelta64": [
                    1900,
                    1901
                ],
                "np.datetime64": [
                    1900,
                    1901
                ],
                "rk.dtype.type": [
                    1901
                ],
                "libhashtable.Factorizer": [
                    1908
                ],
                "rizer": [
                    1920,
                    1912,
                    1914,
                    1915,
                    1917
                ],
                "max": [
                    1912
                ],
                "rizer.factorize": [
                    1914,
                    1915
                ],
                "rizer.get_count": [
                    1917
                ],
                "uniques": [
                    1920,
                    1921,
                    1940,
                    1942,
                    1947
                ],
                "rizer.uniques.to_array": [
                    1920
                ],
                "rizer.uniques": [
                    1920
                ],
                "_sort_labels": [
                    1921
                ],
                "lmask": [
                    1931,
                    1924,
                    1925
                ],
                "lany": [
                    1929,
                    1930,
                    1925
                ],
                "lmask.any": [
                    1925
                ],
                "rmask": [
                    1933,
                    1926,
                    1927
                ],
                "rany": [
                    1929,
                    1932,
                    1927
                ],
                "rmask.any": [
                    1927
                ],
                "np.putmask": [
                    1931,
                    1933
                ],
                "np.ndarray": [
                    1939,
                    1940
                ],
                "values": [
                    1942
                ],
                "llength": [
                    1944,
                    1949
                ],
                "np.concatenate": [
                    1945
                ],
                "new_labels": [
                    1947,
                    1948,
                    1949
                ],
                "algos.safe_sort": [
                    1947
                ],
                "new_left": [
                    1949,
                    1951
                ],
                "new_right": [
                    1949,
                    1951
                ],
                "pred": [
                    1957,
                    1958
                ],
                "is_int64_overflow_possible": [
                    1957
                ],
                "nlev": [
                    1958,
                    1961,
                    1965,
                    1971,
                    1977,
                    1978,
                    1979
                ],
                "next": [
                    1958
                ],
                "filter": [
                    1958
                ],
                "stride": [
                    1961,
                    1962,
                    1963,
                    1967,
                    1968,
                    1969
                ],
                "np.prod": [
                    1961
                ],
                "np.errstate": [
                    1966
                ],
                "com.any_not_none": [
                    1991
                ],
                "FrameOrSeries": [
                    1994
                ],
                "obj": [
                    1995,
                    1996,
                    1997,
                    1998,
                    2001,
                    2005
                ],
                "ABCDataFrame": [
                    1995
                ],
                "ABCSeries": [
                    1997
                ],
                "obj.name": [
                    1998
                ],
                "obj.to_frame": [
                    2001
                ],
                "TypeError": [
                    2003
                ],
                "to_rename": [
                    2016,
                    2017,
                    2042,
                    2023
                ],
                "left.intersection": [
                    2016
                ],
                "lsuffix": [
                    2020,
                    2046
                ],
                "rsuffix": [
                    2020,
                    2047
                ],
                "suffix": [
                    2042,
                    2043
                ],
                "lrenamer": [
                    2049,
                    2046
                ],
                "partial": [
                    2046,
                    2047
                ],
                "renamer": [
                    2046,
                    2047
                ],
                "rrenamer": [
                    2049,
                    2047
                ],
                "_transform_index": [
                    2049
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    51
                ],
                "op": [
                    519,
                    72,
                    536,
                    270,
                    87,
                    280
                ],
                "_MergeOperation": [
                    72,
                    1442,
                    1422
                ],
                "left": [
                    2049,
                    520,
                    1554,
                    1944,
                    1945,
                    286,
                    673,
                    1444,
                    293,
                    298,
                    686,
                    944,
                    689,
                    690,
                    946,
                    566,
                    695,
                    73,
                    984,
                    991,
                    2016,
                    2018,
                    995,
                    996,
                    1003,
                    1392,
                    115,
                    1399,
                    1400
                ],
                "right": [
                    128,
                    129,
                    130,
                    2049,
                    137,
                    521,
                    140,
                    144,
                    1555,
                    1945,
                    286,
                    673,
                    292,
                    1445,
                    298,
                    687,
                    944,
                    947,
                    692,
                    693,
                    695,
                    567,
                    969,
                    74,
                    973,
                    974,
                    978,
                    981,
                    2016,
                    2018,
                    1395,
                    1403,
                    1020
                ],
                "how": [
                    1321,
                    75,
                    1323,
                    1452,
                    912,
                    1562,
                    278,
                    570
                ],
                "on": [
                    128,
                    129,
                    291,
                    573,
                    1446,
                    522,
                    76,
                    273,
                    1556,
                    123,
                    124,
                    125,
                    126,
                    286
                ],
                "left_on": [
                    1447,
                    523,
                    77,
                    274,
                    1557,
                    574
                ],
                "right_on": [
                    1450,
                    524,
                    78,
                    275,
                    1558,
                    575
                ],
                "left_index": [
                    1559,
                    581,
                    1448,
                    525,
                    79,
                    596,
                    599
                ],
                "right_index": [
                    582,
                    1449,
                    526,
                    80,
                    1560,
                    601,
                    604
                ],
                "sort": [
                    1807,
                    1810,
                    1812,
                    1816,
                    1305,
                    1819,
                    1312,
                    1317,
                    1322,
                    1838,
                    1843,
                    1845,
                    1975,
                    1981,
                    579,
                    81,
                    1783,
                    1788,
                    1919
                ],
                "suffixes": [
                    578,
                    1453,
                    82,
                    530,
                    276,
                    1563
                ],
                "copy": [
                    1320,
                    577,
                    83
                ],
                "indicator": [
                    584,
                    84
                ],
                "validate": [
                    1260,
                    1267,
                    85,
                    631,
                    632,
                    1274,
                    1243
                ],
                "op.get_result": [
                    280,
                    536,
                    87
                ],
                "Substitution": [
                    55
                ],
                "Appender": [
                    56
                ],
                "_merge_doc": [
                    56,
                    91
                ],
                "merge.__doc__": [
                    91
                ],
                "merge": [
                    91
                ],
                "pieces": [
                    161,
                    167,
                    168,
                    111,
                    147
                ],
                "by": [
                    128,
                    129,
                    130,
                    1545,
                    527,
                    112,
                    113,
                    115,
                    154
                ],
                "lby": [
                    169,
                    115,
                    134
                ],
                "left.groupby": [
                    115
                ],
                "check_duplicates": [
                    122
                ],
                "right.duplicated": [
                    128
                ],
                "right.drop_duplicates": [
                    129
                ],
                "rby": [
                    136,
                    140,
                    130,
                    132
                ],
                "right.groupby": [
                    130
                ],
                "key": [
                    140,
                    157,
                    134
                ],
                "lhs": [
                    145,
                    150,
                    134,
                    143
                ],
                "rhs": [
                    137,
                    140,
                    150
                ],
                "right.take": [
                    140
                ],
                "rby.indices": [
                    140
                ],
                "lcols": [
                    144,
                    143
                ],
                "lhs.columns.tolist": [
                    143
                ],
                "lhs.columns": [
                    143
                ],
                "cols": [
                    144,
                    145
                ],
                "r": [
                    144
                ],
                "right.columns": [
                    144,
                    673
                ],
                "merged": [
                    161,
                    145,
                    146,
                    147,
                    150,
                    156,
                    157
                ],
                "lhs.reindex": [
                    145
                ],
                "merged.index": [
                    146
                ],
                "pieces.append": [
                    161,
                    147
                ],
                "_merge_pieces": [
                    150
                ],
                "k": [
                    998,
                    999,
                    1000,
                    1003,
                    1004,
                    1020,
                    1021,
                    1015,
                    1016,
                    1017,
                    154,
                    156,
                    157
                ],
                "result": [
                    772,
                    785,
                    658,
                    661,
                    663,
                    665,
                    667,
                    796,
                    285,
                    289,
                    802,
                    167,
                    168,
                    169,
                    298,
                    299,
                    815,
                    816,
                    817,
                    818,
                    821,
                    824,
                    699,
                    700,
                    827,
                    702,
                    703,
                    829,
                    831,
                    706,
                    710,
                    711,
                    1486,
                    1488,
                    1490,
                    740,
                    746,
                    760
                ],
                "concat": [
                    167
                ],
                "result.reindex": [
                    168
                ],
                "columns": [
                    168,
                    673,
                    681,
                    676
                ],
                "_OrderedMerge": [
                    1520,
                    1552,
                    270
                ],
                "x": [
                    1699,
                    294,
                    1702,
                    1991,
                    2043,
                    271,
                    946,
                    947,
                    2042,
                    1787,
                    2044,
                    1309,
                    286,
                    1855
                ],
                "y": [
                    272,
                    294,
                    286,
                    1855
                ],
                "fill_method": [
                    1441,
                    1564,
                    277
                ],
                "left_by": [
                    1546,
                    528,
                    282,
                    284,
                    286
                ],
                "right_by": [
                    288,
                    290,
                    1547,
                    529,
                    282
                ],
                "_": [
                    289,
                    1891,
                    1892,
                    1947,
                    285
                ],
                "_groupby_and_merge": [
                    289,
                    285
                ],
                "_merger": [
                    294,
                    298,
                    286
                ],
                "_AsOfMerge": [
                    519
                ],
                "tolerance": [
                    1735,
                    1736,
                    1737,
                    1771,
                    1548,
                    1776,
                    1713,
                    532
                ],
                "allow_exact_matches": [
                    1549,
                    533
                ],
                "direction": [
                    1499,
                    1494,
                    534,
                    1550
                ],
                "_merge_type": [
                    1521,
                    547,
                    1423
                ],
                "Union": [
                    552,
                    551
                ],
                "_left": [
                    568,
                    612,
                    608,
                    566
                ],
                "_validate_operand": [
                    566,
                    567
                ],
                "_right": [
                    608,
                    569,
                    612,
                    567
                ],
                "self.left": [
                    640,
                    1026,
                    772,
                    774,
                    1030,
                    1033,
                    1163,
                    1165,
                    657,
                    1184,
                    1577,
                    1708,
                    944,
                    1461,
                    568,
                    1220,
                    840,
                    1485,
                    860,
                    862,
                    875,
                    881,
                    1654,
                    763,
                    636,
                    1022
                ],
                "self": [
                    1026,
                    1030,
                    1033,
                    1545,
                    1546,
                    1036,
                    1547,
                    1548,
                    1549,
                    1550,
                    1553,
                    1048,
                    1571,
                    1574,
                    1577,
                    1580,
                    1584,
                    1585,
                    1587,
                    1588,
                    1590,
                    568,
                    569,
                    570,
                    571,
                    1595,
                    573,
                    574,
                    575,
                    1596,
                    577,
                    578,
                    579,
                    1597,
                    581,
                    582,
                    1598,
                    584,
                    1601,
                    586,
                    587,
                    588,
                    589,
                    590,
                    1608,
                    1610,
                    1616,
                    615,
                    619,
                    620,
                    621,
                    622,
                    626,
                    1651,
                    1653,
                    1654,
                    632,
                    635,
                    636,
                    1661,
                    638,
                    640,
                    641,
                    1666,
                    1668,
                    1672,
                    1674,
                    1163,
                    1165,
                    654,
                    1166,
                    1168,
                    657,
                    658,
                    1678,
                    660,
                    661,
                    1172,
                    663,
                    1174,
                    665,
                    1175,
                    1176,
                    1177,
                    1179,
                    1180,
                    1687,
                    1184,
                    1689,
                    1190,
                    1191,
                    1192,
                    681,
                    1193,
                    1708,
                    1711,
                    1200,
                    1201,
                    1202,
                    1713,
                    1207,
                    1208,
                    1209,
                    1210,
                    1211,
                    702,
                    1216,
                    1217,
                    706,
                    1218,
                    1219,
                    1220,
                    1225,
                    1226,
                    1740,
                    1742,
                    1743,
                    1232,
                    1233,
                    1744,
                    1235,
                    1746,
                    1237,
                    1238,
                    1747,
                    1240,
                    735,
                    738,
                    739,
                    1764,
                    1770,
                    1775,
                    1776,
                    753,
                    763,
                    769,
                    772,
                    1680,
                    774,
                    776,
                    782,
                    785,
                    787,
                    789,
                    790,
                    791,
                    836,
                    840,
                    841,
                    843,
                    845,
                    847,
                    849,
                    852,
                    854,
                    857,
                    859,
                    860,
                    861,
                    862,
                    863,
                    869,
                    871,
                    872,
                    873,
                    874,
                    875,
                    1599,
                    881,
                    1604,
                    1605,
                    912,
                    1441,
                    1443,
                    944,
                    1458,
                    1461,
                    1462,
                    1468,
                    960,
                    961,
                    1482,
                    1485,
                    1486,
                    1488,
                    997,
                    998,
                    1005,
                    1009,
                    1013,
                    1014,
                    1015,
                    1022
                ],
                "self.orig_left": [
                    568,
                    1233,
                    738
                ],
                "self.right": [
                    640,
                    776,
                    1036,
                    1166,
                    1168,
                    785,
                    787,
                    1184,
                    1580,
                    1711,
                    944,
                    1461,
                    569,
                    1211,
                    841,
                    863,
                    869,
                    872,
                    874,
                    1005,
                    1009,
                    1013,
                    636
                ],
                "self.orig_right": [
                    569,
                    739,
                    1238
                ],
                "self.how": [
                    836,
                    843,
                    845,
                    847,
                    912,
                    852,
                    570
                ],
                "self.axis": [
                    840,
                    841,
                    571
                ],
                "axis": [
                    1561,
                    571,
                    1451
                ],
                "self.on": [
                    1201,
                    1172,
                    573,
                    1207
                ],
                "com.maybe_make_list": [
                    573,
                    574,
                    575
                ],
                "com": [
                    1991,
                    1898,
                    1899,
                    1905,
                    1906,
                    573,
                    574,
                    575
                ],
                "self.left_on": [
                    1172,
                    1175,
                    1180,
                    1571,
                    1190,
                    1200,
                    1202,
                    1207,
                    1208,
                    1209,
                    1211,
                    574,
                    960,
                    961,
                    1604,
                    1225,
                    1226,
                    1616,
                    735,
                    997,
                    998,
                    753
                ],
                "self.right_on": [
                    1172,
                    1175,
                    1177,
                    1574,
                    1191,
                    1200,
                    1202,
                    1207,
                    575,
                    960,
                    961,
                    1216,
                    1217,
                    1218,
                    1220,
                    1605,
                    1226,
                    735,
                    753,
                    1014,
                    1015
                ],
                "self.copy": [
                    577,
                    1482,
                    654
                ],
                "self.suffixes": [
                    641,
                    578,
                    1462
                ],
                "self.sort": [
                    579,
                    836,
                    845,
                    849,
                    854
                ],
                "self.left_index": [
                    1219,
                    1571,
                    581,
                    871,
                    1192,
                    1577,
                    843,
                    1708,
                    1742,
                    1232,
                    852,
                    1653,
                    1174,
                    1176
                ],
                "self.right_index": [
                    582,
                    1574,
                    1193,
                    843,
                    1179,
                    1580,
                    1742,
                    847,
                    1711,
                    1237,
                    1174,
                    1210,
                    859
                ],
                "self.indicator": [
                    584,
                    587,
                    588,
                    589,
                    590,
                    660,
                    635
                ],
                "self.indicator_name": [
                    706,
                    681,
                    586,
                    588,
                    590,
                    702
                ],
                "Optional": [
                    586
                ],
                "is_bool": [
                    601,
                    596,
                    1687
                ],
                "_left.columns.nlevels": [
                    608,
                    612
                ],
                "_left.columns": [
                    608,
                    612
                ],
                "_right.columns.nlevels": [
                    608,
                    612
                ],
                "_right.columns": [
                    608,
                    612
                ],
                "msg": [
                    609,
                    1635,
                    1667,
                    613,
                    1673,
                    1642,
                    1070,
                    1679,
                    1648,
                    1689,
                    1141,
                    1688,
                    1145,
                    1658,
                    1147,
                    1149,
                    1151
                ],
                "warnings.warn": [
                    1098,
                    613,
                    1087
                ],
                "warnings": [
                    1098,
                    613,
                    1087
                ],
                "self._validate_specification": [
                    615
                ],
                "self.left_join_keys": [
                    836,
                    619,
                    1708,
                    782,
                    1743,
                    849,
                    1746,
                    1235,
                    789,
                    790,
                    1048
                ],
                "self.right_join_keys": [
                    769,
                    836,
                    620,
                    1711,
                    1744,
                    1747,
                    854,
                    791,
                    1048,
                    1240
                ],
                "self.join_names": [
                    1048,
                    753,
                    621,
                    735
                ],
                "self._get_merge_keys": [
                    622
                ],
                "self._maybe_coerce_merge_keys": [
                    626
                ],
                "self._validate": [
                    632
                ],
                "self._indicator_pre_merge": [
                    636
                ],
                "join_index": [
                    652,
                    1458,
                    1847,
                    1848,
                    1480,
                    844,
                    848,
                    853,
                    861,
                    869,
                    870,
                    1382,
                    1384,
                    873,
                    1385,
                    1386,
                    881,
                    882,
                    884,
                    886,
                    887,
                    888,
                    638
                ],
                "left_indexer": [
                    647,
                    766,
                    789,
                    663,
                    1818,
                    1822,
                    799,
                    809,
                    1837,
                    1458,
                    1843,
                    1845,
                    1847,
                    1848,
                    1469,
                    1855,
                    1472,
                    1856,
                    844,
                    848,
                    1488,
                    853,
                    857,
                    864,
                    870,
                    877,
                    881,
                    884,
                    888,
                    762,
                    638
                ],
                "right_indexer": [
                    648,
                    779,
                    663,
                    1818,
                    1822,
                    805,
                    1837,
                    1458,
                    1843,
                    1848,
                    1851,
                    1470,
                    1855,
                    1856,
                    1473,
                    844,
                    848,
                    1488,
                    853,
                    857,
                    865,
                    869,
                    876,
                    882,
                    888,
                    762,
                    638
                ],
                "self._get_join_info": [
                    1458,
                    638
                ],
                "ldata": [
                    640,
                    644,
                    1479,
                    651,
                    1461,
                    1465
                ],
                "rdata": [
                    640,
                    644,
                    1479,
                    651,
                    1461,
                    1465
                ],
                "self.left._data": [
                    640,
                    840,
                    1461
                ],
                "self.right._data": [
                    640,
                    841,
                    1461
                ],
                "lsuf": [
                    641,
                    1465,
                    644,
                    1462
                ],
                "rsuf": [
                    641,
                    1465,
                    644,
                    1462
                ],
                "llabels": [
                    1464,
                    643,
                    652,
                    1480
                ],
                "rlabels": [
                    1464,
                    643,
                    652,
                    1480
                ],
                "_items_overlap_with_suffix": [
                    1464,
                    643
                ],
                "ldata.items": [
                    1465,
                    644
                ],
                "rdata.items": [
                    1465,
                    644
                ],
                "lindexers": [
                    1479,
                    651,
                    1475,
                    647
                ],
                "rindexers": [
                    648,
                    651,
                    1476,
                    1479
                ],
                "result_data": [
                    650,
                    1486,
                    1478,
                    658
                ],
                "concatenate_block_managers": [
                    650,
                    1478
                ],
                "llabels.append": [
                    1480,
                    652
                ],
                "typ": [
                    1164,
                    1165,
                    1485,
                    1167,
                    1168,
                    657,
                    658,
                    1486
                ],
                "self.left._constructor": [
                    657,
                    1485
                ],
                "__finalize__": [
                    658,
                    1486
                ],
                "self._merge_type": [
                    658,
                    1486
                ],
                "self._indicator_post_merge": [
                    661
                ],
                "self._maybe_add_join_keys": [
                    1488,
                    663
                ],
                "self._maybe_restore_index_levels": [
                    665
                ],
                "left.columns.union": [
                    673
                ],
                "left.columns": [
                    673
                ],
                "i": [
                    769,
                    1795,
                    1796,
                    1800,
                    1802,
                    1804,
                    782,
                    789,
                    790,
                    791,
                    675,
                    676,
                    1957,
                    679,
                    1965,
                    1967,
                    1968,
                    1969,
                    831,
                    1624,
                    1638,
                    1645,
                    754
                ],
                "left.copy": [
                    686
                ],
                "right.copy": [
                    687
                ],
                "astype": [
                    1962,
                    1963,
                    1165,
                    1168,
                    690,
                    693
                ],
                "Tuple": [
                    671
                ],
                "fillna": [
                    699,
                    700
                ],
                "Categorical": [
                    702
                ],
                "cat.rename_categories": [
                    706
                ],
                "cat": [
                    706
                ],
                "result.drop": [
                    710
                ],
                "names_to_restore": [
                    745,
                    746,
                    733,
                    743
                ],
                "name": [
                    772,
                    774,
                    776,
                    1163,
                    1165,
                    1166,
                    1168,
                    785,
                    787,
                    1047,
                    796,
                    802,
                    815,
                    816,
                    817,
                    819,
                    822,
                    829,
                    831,
                    1494,
                    1495,
                    1499,
                    1500,
                    734,
                    740,
                    743,
                    754,
                    760,
                    763
                ],
                "left_key": [
                    1816,
                    738,
                    1819,
                    734
                ],
                "right_key": [
                    1816,
                    1819,
                    739,
                    734
                ],
                "self.orig_left._is_level_reference": [
                    738
                ],
                "self.orig_right._is_level_reference": [
                    739
                ],
                "result.index.names": [
                    824,
                    740
                ],
                "result.index": [
                    740,
                    818,
                    821,
                    824,
                    829
                ],
                "names_to_restore.append": [
                    743
                ],
                "result.set_index": [
                    746,
                    827
                ],
                "left_has_missing": [
                    768,
                    765,
                    750,
                    766
                ],
                "right_has_missing": [
                    778,
                    779,
                    781,
                    751
                ],
                "keys": [
                    753,
                    754
                ],
                "lname": [
                    1985,
                    754,
                    755,
                    1987
                ],
                "rname": [
                    1985,
                    754,
                    755,
                    1987
                ],
                "_should_fill": [
                    755
                ],
                "take_left": [
                    774,
                    782,
                    790,
                    758,
                    793,
                    795,
                    798,
                    799
                ],
                "take_right": [
                    769,
                    801,
                    804,
                    805,
                    787,
                    758,
                    791,
                    793
                ],
                "is_dtype_equal": [
                    784,
                    1067,
                    1625,
                    771
                ],
                "dtype": [
                    1512,
                    785,
                    1514,
                    772
                ],
                "_values": [
                    802,
                    787,
                    796,
                    774
                ],
                "is_array_like": [
                    946,
                    947,
                    789
                ],
                "lvals": [
                    796,
                    813,
                    799
                ],
                "lfill": [
                    798,
                    799
                ],
                "na_value_for_dtype": [
                    920,
                    804,
                    798
                ],
                "take_left.dtype": [
                    798
                ],
                "algos.take_1d": [
                    805,
                    799
                ],
                "algos": [
                    1947,
                    805,
                    1413,
                    799
                ],
                "rvals": [
                    813,
                    802,
                    811,
                    805
                ],
                "rfill": [
                    804,
                    805
                ],
                "take_right.dtype": [
                    804
                ],
                "mask": [
                    1796,
                    1797,
                    809,
                    810,
                    1804,
                    813,
                    918,
                    919
                ],
                "mask.all": [
                    810
                ],
                "key_col": [
                    811,
                    813,
                    816,
                    819,
                    823,
                    829,
                    831
                ],
                "where": [
                    813
                ],
                "Index": [
                    1825,
                    1725,
                    829,
                    813,
                    2009,
                    884,
                    1942,
                    1719,
                    921,
                    892,
                    893
                ],
                "result._is_label_reference": [
                    815
                ],
                "result._is_level_reference": [
                    817
                ],
                "MultiIndex": [
                    1376,
                    1828,
                    1577,
                    1580,
                    1005,
                    912,
                    1329,
                    818,
                    1235,
                    1330,
                    1779,
                    1240,
                    1372,
                    1373,
                    1022
                ],
                "key_col.name": [
                    819
                ],
                "idx_list": [
                    827,
                    820
                ],
                "level_name": [
                    824,
                    821,
                    822
                ],
                "result.index.get_level_values": [
                    821
                ],
                "result.insert": [
                    831
                ],
                "_get_join_indexers": [
                    835
                ],
                "left_ax": [
                    840,
                    844,
                    849,
                    1845,
                    854,
                    1847,
                    1851
                ],
                "self.left._data.axes": [
                    840
                ],
                "right_ax": [
                    1828,
                    841,
                    845,
                    1838,
                    849,
                    1843,
                    854
                ],
                "self.right._data.axes": [
                    841
                ],
                "left_ax.join": [
                    844
                ],
                "_left_join_on_index": [
                    848,
                    853
                ],
                "self._get_join_indexers": [
                    857
                ],
                "self._create_join_index": [
                    873,
                    861
                ],
                "self.left.index": [
                    1026,
                    1220,
                    1030,
                    1577,
                    875,
                    1708,
                    881,
                    1022,
                    1654,
                    862
                ],
                "self.right.index": [
                    869,
                    874,
                    1580,
                    1005,
                    1711,
                    1009,
                    1013,
                    1211,
                    863
                ],
                "self.right.index.take": [
                    869
                ],
                "np.array": [
                    1704,
                    882,
                    870
                ],
                "np": [
                    870,
                    1704,
                    1097,
                    1961,
                    1931,
                    1900,
                    1901,
                    1933,
                    1966,
                    882,
                    1939,
                    884,
                    1940,
                    919,
                    1945,
                    1789,
                    1086
                ],
                "self.left.index.take": [
                    881
                ],
                "np.arange": [
                    884
                ],
                "join_index.astype": [
                    887
                ],
                "other_index": [
                    912
                ],
                "indexer": [
                    1413,
                    918,
                    1401,
                    922,
                    1404
                ],
                "np.any": [
                    919
                ],
                "fill_value": [
                    920,
                    921
                ],
                "index.dtype": [
                    920
                ],
                "index": [
                    1376,
                    1792,
                    1796,
                    1789,
                    1784,
                    1816,
                    1783,
                    920,
                    921,
                    922,
                    1373,
                    1374
                ],
                "index.append": [
                    921
                ],
                "index.take": [
                    922
                ],
                "left_keys": [
                    963,
                    995,
                    1030,
                    1000,
                    938,
                    1003,
                    1038,
                    1299,
                    1305,
                    1306,
                    1023,
                    991
                ],
                "right_keys": [
                    965,
                    1305,
                    969,
                    939,
                    973,
                    1006,
                    1038,
                    978,
                    1300,
                    981,
                    1013,
                    1017,
                    1020,
                    989
                ],
                "join_names": [
                    992,
                    996,
                    966,
                    1001,
                    970,
                    1386,
                    940,
                    1004,
                    974,
                    1038,
                    1417,
                    1419,
                    1621,
                    1018,
                    1691,
                    1021
                ],
                "right_drop": [
                    985,
                    1035,
                    1036,
                    941
                ],
                "left_drop": [
                    1032,
                    1033,
                    987,
                    942
                ],
                "is_lkey": [
                    962,
                    946,
                    999
                ],
                "is_rkey": [
                    976,
                    1016,
                    947,
                    964
                ],
                "_any": [
                    960,
                    997,
                    1014
                ],
                "lk": [
                    1164,
                    1912,
                    1047,
                    1050,
                    1053,
                    1914,
                    1055,
                    1061,
                    1067,
                    1073,
                    1080,
                    1081,
                    1085,
                    1086,
                    961,
                    962,
                    963,
                    1096,
                    1097,
                    1869,
                    1870,
                    1874,
                    1108,
                    1876,
                    982,
                    1624,
                    1625,
                    1626,
                    987,
                    1881,
                    1883,
                    990,
                    991,
                    992,
                    1118,
                    1887,
                    1889,
                    1124,
                    1891,
                    1126,
                    1638,
                    1894,
                    1898,
                    1900,
                    1645,
                    1905,
                    1909,
                    1144,
                    1146,
                    1148,
                    1150
                ],
                "rk": [
                    1167,
                    1912,
                    1047,
                    1050,
                    1054,
                    1056,
                    1061,
                    1067,
                    1073,
                    1080,
                    1081,
                    1085,
                    1086,
                    961,
                    964,
                    965,
                    968,
                    969,
                    970,
                    1096,
                    1097,
                    1869,
                    1871,
                    976,
                    977,
                    978,
                    1874,
                    1876,
                    1109,
                    982,
                    1878,
                    1624,
                    985,
                    1625,
                    1626,
                    1881,
                    989,
                    1117,
                    1884,
                    1888,
                    1889,
                    1123,
                    1892,
                    1638,
                    1127,
                    1894,
                    1899,
                    1645,
                    1901,
                    1906,
                    1910,
                    1144,
                    1146,
                    1915,
                    1148,
                    1150
                ],
                "left_keys.append": [
                    963,
                    995,
                    1000,
                    1003,
                    991
                ],
                "right_keys.append": [
                    965,
                    969,
                    973,
                    978,
                    981,
                    1017,
                    1020,
                    989
                ],
                "join_names.append": [
                    992,
                    996,
                    966,
                    1001,
                    970,
                    1004,
                    974,
                    1018,
                    1021
                ],
                "right._get_label_or_level_values": [
                    969,
                    978,
                    1020
                ],
                "right.index": [
                    981,
                    973,
                    974
                ],
                "right.index.name": [
                    974
                ],
                "right_drop.append": [
                    985
                ],
                "left_drop.append": [
                    987
                ],
                "left._get_label_or_level_values": [
                    1003,
                    991
                ],
                "left.index": [
                    995,
                    996
                ],
                "left.index.name": [
                    996
                ],
                "lev._values.take": [
                    1024,
                    1007
                ],
                "lev._values": [
                    1024,
                    1007
                ],
                "lev": [
                    1008,
                    1024,
                    1025,
                    1007
                ],
                "lev_codes": [
                    1008,
                    1024,
                    1025,
                    1007
                ],
                "self.right.index.levels": [
                    1009
                ],
                "self.right.index.codes": [
                    1009
                ],
                "self.right.index._values": [
                    1013
                ],
                "self.left.index.levels": [
                    1026
                ],
                "self.left.index.codes": [
                    1026
                ],
                "self.left.index.values": [
                    1708,
                    1030
                ],
                "self.left._drop_labels_or_levels": [
                    1033
                ],
                "self.right._drop_labels_or_levels": [
                    1036
                ],
                "lk_is_cat": [
                    1064,
                    1164,
                    1060,
                    1053
                ],
                "is_categorical_dtype": [
                    1626,
                    1874,
                    1053,
                    1054
                ],
                "rk_is_cat": [
                    1064,
                    1060,
                    1054,
                    1167
                ],
                "lk_is_object": [
                    1153,
                    1123,
                    1117,
                    1055
                ],
                "is_object_dtype": [
                    1056,
                    1055
                ],
                "rk_is_object": [
                    1056,
                    1153,
                    1124,
                    1118
                ],
                "lk.is_dtype_equal": [
                    1874,
                    1061
                ],
                "lk.dtype": [
                    1889,
                    1638,
                    1097,
                    1067,
                    1900,
                    1645,
                    1073,
                    1887,
                    1625,
                    1626,
                    1081
                ],
                "rk.dtype": [
                    1888,
                    1889,
                    1638,
                    1067,
                    1645,
                    1901,
                    1073,
                    1625,
                    1626,
                    1086,
                    1081
                ],
                "is_numeric_dtype": [
                    1080,
                    1123,
                    1124
                ],
                "lk.dtype.kind": [
                    1081
                ],
                "rk.dtype.kind": [
                    1081
                ],
                "is_integer_dtype": [
                    1894,
                    1671,
                    1096,
                    1512,
                    1085
                ],
                "is_float_dtype": [
                    1096,
                    1514,
                    1085,
                    1677
                ],
                "lk.astype": [
                    1086
                ],
                "np.isnan": [
                    1097,
                    1086
                ],
                "rk.astype": [
                    1097
                ],
                "lib.infer_dtype": [
                    1108,
                    1126,
                    1127
                ],
                "lib": [
                    1108,
                    1126,
                    1127
                ],
                "is_bool_dtype": [
                    1117,
                    1118
                ],
                "inferred_left": [
                    1137,
                    1139,
                    1132,
                    1126
                ],
                "inferred_right": [
                    1137,
                    1139,
                    1132,
                    1127
                ],
                "bool_types": [
                    1128,
                    1132
                ],
                "string_types": [
                    1129,
                    1139,
                    1137
                ],
                "needs_i8_conversion": [
                    1144,
                    1665,
                    1146,
                    1732
                ],
                "is_datetime64tz_dtype": [
                    1148,
                    1869,
                    1150
                ],
                "self.left.columns": [
                    1184,
                    1163
                ],
                "lk.categories.dtype": [
                    1164
                ],
                "lk.categories": [
                    1881,
                    1164,
                    1876
                ],
                "self.left.assign": [
                    1165
                ],
                "self.right.columns": [
                    1184,
                    1166
                ],
                "rk.categories.dtype": [
                    1167
                ],
                "rk.categories": [
                    1881,
                    1876,
                    1167
                ],
                "self.right.assign": [
                    1168
                ],
                "MergeError": [
                    1667,
                    1669,
                    1673,
                    1675,
                    1679,
                    1681,
                    1684,
                    1689,
                    1178,
                    1181,
                    1186,
                    1572,
                    1575,
                    1578,
                    1197,
                    1581,
                    1586,
                    1203,
                    1589,
                    1591,
                    1602,
                    1609,
                    1245,
                    1250,
                    1255,
                    1262,
                    1648,
                    1269
                ],
                "common_cols": [
                    1184,
                    1185,
                    1196,
                    1198,
                    1200
                ],
                "self.left.columns.intersection": [
                    1184
                ],
                "common_cols.is_unique": [
                    1196
                ],
                "n": [
                    1216,
                    1218,
                    1305,
                    1225,
                    1783,
                    1784,
                    1209,
                    1306
                ],
                "self.right.index.nlevels": [
                    1211
                ],
                "self.left.index.nlevels": [
                    1220
                ],
                "left_unique": [
                    1249,
                    1261,
                    1233,
                    1235,
                    1244
                ],
                "self.orig_left.index.is_unique": [
                    1233
                ],
                "self.orig_left.index": [
                    1233
                ],
                "is_unique": [
                    1240,
                    1235
                ],
                "MultiIndex.from_arrays": [
                    1240,
                    1235,
                    1376
                ],
                "right_unique": [
                    1254,
                    1268,
                    1238,
                    1240,
                    1244
                ],
                "self.orig_right.index.is_unique": [
                    1238
                ],
                "self.orig_right.index": [
                    1238
                ],
                "mapped": [
                    1304,
                    1786,
                    1308,
                    1782
                ],
                "_factorize_keys": [
                    1317,
                    1975,
                    1810,
                    1783,
                    1816,
                    1305
                ],
                "zipped": [
                    1786,
                    1787,
                    1308,
                    1309
                ],
                "llab": [
                    1312,
                    1921,
                    1924,
                    1962,
                    1931,
                    1981,
                    1936,
                    1968,
                    1977,
                    1914,
                    1309
                ],
                "rlab": [
                    1312,
                    1921,
                    1926,
                    1963,
                    1933,
                    1981,
                    1936,
                    1969,
                    1978,
                    1915,
                    1309
                ],
                "shape": [
                    1312,
                    1957,
                    1958,
                    1979,
                    1800,
                    1961,
                    1802,
                    1804,
                    1807,
                    1967,
                    1981,
                    1971,
                    1787,
                    1309
                ],
                "lkey": [
                    1312,
                    1317,
                    1962,
                    1325,
                    1807,
                    1968,
                    1810,
                    1812,
                    1972,
                    1975,
                    1977
                ],
                "rkey": [
                    1312,
                    1317,
                    1963,
                    1325,
                    1807,
                    1969,
                    1810,
                    1812,
                    1972,
                    1975,
                    1978
                ],
                "_get_join_keys": [
                    1312,
                    1981,
                    1807
                ],
                "count": [
                    1317,
                    1979,
                    1931,
                    1325,
                    1933,
                    1934,
                    1936,
                    1810,
                    1812,
                    1975,
                    1816,
                    1819,
                    1917
                ],
                "kwargs": [
                    1320,
                    1322,
                    1325
                ],
                "copy.copy": [
                    1320
                ],
                "join_func": [
                    1323,
                    1325
                ],
                "_join_functions": [
                    1859,
                    1323
                ],
                "index.values": [
                    1376
                ],
                "index.name": [
                    1376
                ],
                "_convert_to_mulitindex": [
                    1382
                ],
                "join_levels": [
                    1384,
                    1419,
                    1415
                ],
                "join_index.levels": [
                    1384
                ],
                "join_codes": [
                    1416,
                    1385,
                    1419
                ],
                "join_index.codes": [
                    1385
                ],
                "join_index.names": [
                    1386
                ],
                "lindexer": [
                    1392,
                    1401,
                    1391
                ],
                "left.size": [
                    1392
                ],
                "rindexer": [
                    1394,
                    1395,
                    1404
                ],
                "right.size": [
                    1395
                ],
                "dropped_level_name": [
                    1417,
                    1407,
                    1398,
                    1399
                ],
                "dropped_level_names": [
                    1398
                ],
                "left.names": [
                    1399
                ],
                "idx": [
                    1409,
                    1412,
                    1400,
                    1403,
                    1407
                ],
                "name_idx": [
                    1409,
                    1412,
                    1407
                ],
                "idx.names.index": [
                    1407
                ],
                "idx.names": [
                    1407
                ],
                "restore_levels": [
                    1409,
                    1415
                ],
                "idx.levels": [
                    1409
                ],
                "codes": [
                    1412,
                    1413
                ],
                "idx.codes": [
                    1412
                ],
                "restore_codes": [
                    1416,
                    1413
                ],
                "algos.take_nd": [
                    1413
                ],
                "self.fill_method": [
                    1441,
                    1468
                ],
                "_MergeOperation.__init__": [
                    1442
                ],
                "left_join_indexer": [
                    1472,
                    1475,
                    1469
                ],
                "libjoin.ffill_indexer": [
                    1469,
                    1470
                ],
                "libjoin": [
                    1860,
                    1861,
                    1863,
                    1812,
                    1495,
                    1818,
                    1500,
                    1469,
                    1470,
                    1855
                ],
                "right_join_indexer": [
                    1473,
                    1476,
                    1470
                ],
                "_type_casters": [
                    1759,
                    1503
                ],
                "ensure_int64": [
                    1504,
                    1819,
                    1948,
                    1898,
                    1899,
                    1905,
                    1906,
                    1883,
                    1884
                ],
                "ensure_float64": [
                    1505
                ],
                "ensure_object": [
                    1506,
                    1909,
                    1910
                ],
                "self.by": [
                    1584,
                    1545,
                    1587
                ],
                "self.left_by": [
                    1601,
                    1604,
                    1546,
                    1740,
                    1585,
                    1587,
                    1588,
                    1590,
                    1595,
                    1596,
                    1597
                ],
                "self.right_by": [
                    1601,
                    1605,
                    1547,
                    1585,
                    1587,
                    1588,
                    1590,
                    1598,
                    1599
                ],
                "self.tolerance": [
                    1666,
                    1668,
                    1672,
                    1674,
                    1548,
                    1678,
                    1680,
                    1713,
                    1651,
                    1661
                ],
                "self.allow_exact_matches": [
                    1770,
                    1549,
                    1776,
                    1687,
                    1689
                ],
                "self.direction": [
                    1764,
                    1608,
                    1610,
                    1550,
                    1775
                ],
                "_OrderedMerge.__init__": [
                    1552
                ],
                "_validate_specification": [
                    1568
                ],
                "is_list_like": [
                    1596,
                    1598
                ],
                "left_join_keys": [
                    1624,
                    1691,
                    1656,
                    1621
                ],
                "right_join_keys": [
                    1624,
                    1691,
                    1621
                ],
                "_get_merge_keys": [
                    1621
                ],
                "lt": [
                    1665,
                    1671,
                    1677,
                    1654,
                    1656,
                    1661
                ],
                "lt.dtype": [
                    1661
                ],
                "datetime.timedelta": [
                    1666
                ],
                "datetime": [
                    1666
                ],
                "Timedelta": [
                    1736,
                    1668
                ],
                "is_integer": [
                    1672
                ],
                "is_number": [
                    1678
                ],
                "msg.format": [
                    1689
                ],
                "xs": [
                    1698,
                    1699,
                    1701,
                    1702,
                    1704
                ],
                "is_extension_array_dtype": [
                    1888,
                    1699,
                    1887
                ],
                "x._ndarray_values": [
                    1699
                ],
                "labels": [
                    1945,
                    1947,
                    1701,
                    1703
                ],
                "string.ascii_lowercase": [
                    1701
                ],
                "string": [
                    1701
                ],
                "dtypes": [
                    1702,
                    1703
                ],
                "x.dtype": [
                    1702
                ],
                "labeled_dtypes": [
                    1704,
                    1703
                ],
                "left_values": [
                    1732,
                    1733,
                    1766,
                    1707,
                    1776,
                    1719,
                    1720
                ],
                "right_values": [
                    1734,
                    1767,
                    1710,
                    1776,
                    1725,
                    1726
                ],
                "self.right.index.values": [
                    1711
                ],
                "msg_sorted": [
                    1729,
                    1723,
                    1716
                ],
                "msg_missings": [
                    1721,
                    1717,
                    1727
                ],
                "is_monotonic": [
                    1725,
                    1719
                ],
                "isna": [
                    1720,
                    1726
                ],
                "msg_missings.format": [
                    1721,
                    1727
                ],
                "msg_sorted.format": [
                    1729,
                    1723
                ],
                "left_values.view": [
                    1733
                ],
                "right_values.view": [
                    1734
                ],
                "tolerance.value": [
                    1737
                ],
                "left_by_values": [
                    1760,
                    1768,
                    1743,
                    1746,
                    1750,
                    1751,
                    1754,
                    1758
                ],
                "right_by_values": [
                    1761,
                    1769,
                    1744,
                    1747,
                    1752,
                    1755
                ],
                "flip": [
                    1754,
                    1755
                ],
                "by_type": [
                    1758,
                    1759
                ],
                "_get_cython_type_upcast": [
                    1758
                ],
                "left_by_values.dtype": [
                    1758
                ],
                "by_type_caster": [
                    1760,
                    1761,
                    1759
                ],
                "func": [
                    1776,
                    1764,
                    1765,
                    1775
                ],
                "_asof_by_function": [
                    1764
                ],
                "_asof_function": [
                    1775
                ],
                "index.levels": [
                    1783
                ],
                "join_keys": [
                    1826,
                    1795,
                    1828,
                    1800,
                    1838,
                    1841,
                    1783
                ],
                "index.nlevels": [
                    1784
                ],
                "rcodes": [
                    1792,
                    1804,
                    1807,
                    1787,
                    1789
                ],
                "lcodes": [
                    1800,
                    1787,
                    1807
                ],
                "np.take": [
                    1789
                ],
                "index.codes": [
                    1792,
                    1796,
                    1789
                ],
                "i8copy": [
                    1792,
                    1791
                ],
                "a.astype": [
                    1791
                ],
                "a": [
                    1800,
                    1801,
                    1791
                ],
                "mask.any": [
                    1797
                ],
                "a.size": [
                    1801
                ],
                "libjoin.left_outer_join": [
                    1818,
                    1812,
                    1861,
                    1855
                ],
                "join_key": [
                    1816
                ],
                "right_ax.nlevels": [
                    1828
                ],
                "_get_multiindex_indexer": [
                    1837
                ],
                "jkey": [
                    1841,
                    1843
                ],
                "_get_single_indexer": [
                    1843
                ],
                "left_ax.take": [
                    1847
                ],
                "max_groups": [
                    1855
                ],
                "libjoin.inner_join": [
                    1860
                ],
                "_right_outer_join": [
                    1862
                ],
                "libjoin.full_outer_join": [
                    1863
                ],
                "_data": [
                    1870,
                    1871
                ],
                "lk.categories.equals": [
                    1876
                ],
                "rk.codes": [
                    1881,
                    1878
                ],
                "_recode_for_categories": [
                    1881
                ],
                "lk.codes": [
                    1883
                ],
                "lk._values_for_factorize": [
                    1891
                ],
                "rk._values_for_factorize": [
                    1892
                ],
                "klass": [
                    1904,
                    1897,
                    1908,
                    1912
                ],
                "libhashtable.Int64Factorizer": [
                    1904,
                    1897
                ],
                "libhashtable": [
                    1904,
                    1897,
                    1908
                ],
                "com.values_from_object": [
                    1905,
                    1898,
                    1899,
                    1906
                ],
                "lk.dtype.type": [
                    1900
                ],
                "np.timedelta64": [
                    1900,
                    1901
                ],
                "np.datetime64": [
                    1900,
                    1901
                ],
                "rk.dtype.type": [
                    1901
                ],
                "libhashtable.Factorizer": [
                    1908
                ],
                "rizer": [
                    1920,
                    1912,
                    1914,
                    1915,
                    1917
                ],
                "rizer.factorize": [
                    1914,
                    1915
                ],
                "rizer.get_count": [
                    1917
                ],
                "uniques": [
                    1920,
                    1921,
                    1940,
                    1942,
                    1947
                ],
                "rizer.uniques.to_array": [
                    1920
                ],
                "rizer.uniques": [
                    1920
                ],
                "_sort_labels": [
                    1921
                ],
                "lmask": [
                    1931,
                    1924,
                    1925
                ],
                "lany": [
                    1929,
                    1930,
                    1925
                ],
                "lmask.any": [
                    1925
                ],
                "rmask": [
                    1933,
                    1926,
                    1927
                ],
                "rany": [
                    1929,
                    1932,
                    1927
                ],
                "rmask.any": [
                    1927
                ],
                "np.putmask": [
                    1931,
                    1933
                ],
                "np.ndarray": [
                    1939,
                    1940
                ],
                "values": [
                    1942
                ],
                "llength": [
                    1944,
                    1949
                ],
                "np.concatenate": [
                    1945
                ],
                "new_labels": [
                    1947,
                    1948,
                    1949
                ],
                "algos.safe_sort": [
                    1947
                ],
                "new_left": [
                    1949,
                    1951
                ],
                "new_right": [
                    1949,
                    1951
                ],
                "pred": [
                    1957,
                    1958
                ],
                "is_int64_overflow_possible": [
                    1957
                ],
                "nlev": [
                    1958,
                    1961,
                    1965,
                    1971,
                    1977,
                    1978,
                    1979
                ],
                "stride": [
                    1961,
                    1962,
                    1963,
                    1967,
                    1968,
                    1969
                ],
                "np.prod": [
                    1961
                ],
                "np.errstate": [
                    1966
                ],
                "com.any_not_none": [
                    1991
                ],
                "FrameOrSeries": [
                    1994
                ],
                "obj": [
                    1995,
                    1996,
                    1997,
                    1998,
                    2001,
                    2005
                ],
                "ABCDataFrame": [
                    1995
                ],
                "ABCSeries": [
                    1997
                ],
                "obj.name": [
                    1998
                ],
                "obj.to_frame": [
                    2001
                ],
                "to_rename": [
                    2016,
                    2017,
                    2042,
                    2023
                ],
                "left.intersection": [
                    2016
                ],
                "lsuffix": [
                    2020,
                    2046
                ],
                "rsuffix": [
                    2020,
                    2047
                ],
                "suffix": [
                    2042,
                    2043
                ],
                "lrenamer": [
                    2049,
                    2046
                ],
                "partial": [
                    2046,
                    2047
                ],
                "renamer": [
                    2046,
                    2047
                ],
                "rrenamer": [
                    2049,
                    2047
                ],
                "_transform_index": [
                    2049
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_116/pandas/tests/reshape/merge/test_merge_asof.py",
                "test_function": "test_merge_index_column_tz",
                "test_function_code": "    def test_merge_index_column_tz(self):\n        # GH 29864\n        index = pd.date_range(\"2019-10-01\", freq=\"30min\", periods=5, tz=\"UTC\")\n        left = pd.DataFrame([0.9, 0.8, 0.7, 0.6], columns=[\"xyz\"], index=index[1:])\n        right = pd.DataFrame({\"from_date\": index, \"abc\": [2.46] * 4 + [2.19]})\n        result = pd.merge_asof(\n            left=left, right=right, left_index=True, right_on=[\"from_date\"]\n        )\n        expected = pd.DataFrame(\n            {\n                \"xyz\": [0.9, 0.8, 0.7, 0.6],\n                \"from_date\": index[1:],\n                \"abc\": [2.46] * 3 + [2.19],\n            },\n            index=pd.Index([1, 2, 3, 4]),\n        )\n        tm.assert_frame_equal(result, expected)\n\n        result = pd.merge_asof(\n            left=right, right=left, right_index=True, left_on=[\"from_date\"]\n        )\n        expected = pd.DataFrame(\n            {\n                \"from_date\": index,\n                \"abc\": [2.46] * 4 + [2.19],\n                \"xyz\": [np.nan, 0.9, 0.8, 0.7, 0.6],\n            },\n            index=pd.Index([0, 1, 2, 3, 4]),\n        )\n        tm.assert_frame_equal(result, expected)",
                "test_error": "pandas.errors.MergeError: incompatible merge keys [0] dtype('<M8[ns]') and datetime64[ns, UTC], must be the same type",
                "full_test_error": "self = <pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge object at 0x11f9f59a0>\n\n    def test_merge_index_column_tz(self):\n        # GH 29864\n        index = pd.date_range(\"2019-10-01\", freq=\"30min\", periods=5, tz=\"UTC\")\n        left = pd.DataFrame([0.9, 0.8, 0.7, 0.6], columns=[\"xyz\"], index=index[1:])\n        right = pd.DataFrame({\"from_date\": index, \"abc\": [2.46] * 4 + [2.19]})\n>       result = pd.merge_asof(\n            left=left, right=right, left_index=True, right_on=[\"from_date\"]\n        )\n\npandas/tests/reshape/merge/test_merge_asof.py:1312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/merge.py:519: in merge_asof\n    op = _AsOfMerge(\npandas/core/reshape/merge.py:1552: in __init__\n    _OrderedMerge.__init__(\npandas/core/reshape/merge.py:1442: in __init__\n    _MergeOperation.__init__(\npandas/core/reshape/merge.py:622: in __init__\n    ) = self._get_merge_keys()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.reshape.merge._AsOfMerge object at 0x11fde6c10>\n\n    def _get_merge_keys(self):\n    \n        # note this function has side effects\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n        # validate index types are the same\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if not is_dtype_equal(lk.dtype, rk.dtype):\n                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                    # The generic error message is confusing for categoricals.\n                    #\n                    # In this function, the join keys include both the original\n                    # ones of the merge_asof() call, and also the keys passed\n                    # to its by= argument. Unordered but equal categories\n                    # are not supported for the former, but will fail\n                    # later with a ValueError, so we don't *need* to check\n                    # for them here.\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, both sides category, but not equal ones\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                else:\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, must be the same type\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n>               raise MergeError(msg)\nE               pandas.errors.MergeError: incompatible merge keys [0] dtype('<M8[ns]') and datetime64[ns, UTC], must be the same type\n\npandas/core/reshape/merge.py:1648: MergeError",
                "traceback": "pandas/core/reshape/merge.py:519: in merge_asof\n    op = _AsOfMerge(\npandas/core/reshape/merge.py:1552: in __init__\n    _OrderedMerge.__init__(\npandas/core/reshape/merge.py:1442: in __init__\n    _MergeOperation.__init__(\npandas/core/reshape/merge.py:622: in __init__\n    ) = self._get_merge_keys()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.reshape.merge._AsOfMerge object at 0x11fde6c10>\n\n    def _get_merge_keys(self):\n    \n        # note this function has side effects\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n        # validate index types are the same\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if not is_dtype_equal(lk.dtype, rk.dtype):\n                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                    # The generic error message is confusing for categoricals.\n                    #\n                    # In this function, the join keys include both the original\n                    # ones of the merge_asof() call, and also the keys passed\n                    # to its by= argument. Unordered but equal categories\n                    # are not supported for the former, but will fail\n                    # later with a ValueError, so we don't *need* to check\n                    # for them here.\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, both sides category, but not equal ones\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                else:\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, must be the same type\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n>               raise MergeError(msg)\nE               pandas.errors.MergeError: incompatible merge keys [0] dtype('<M8[ns]') and datetime64[ns, UTC], must be the same type\n\npandas/core/reshape/merge.py:1648: MergeError",
                "test_function_decorators": []
            }
        ]
    }
}