{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 924,
            "file_name": "core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self, left, right, on):\n\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n    \n    Parameters\n    ----------\n    left\n    right\n    on\n    Returns\n    -------\n    left_keys, right_keys, join_names\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    \n    is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n    is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n    \n    if _any(on):\n        right_names = list(right.columns)\n        for k in on:\n            if k in left.columns:\n                left_keys.append(left[k])\n                if k in right_names:\n                    right_keys.append(right[k])\n                    join_names.append(k)\n                else:\n                    if k is not None:\n                        right_keys.append(right._get_label_or_level_values(k))\n                        join_names.append(k)\n                    else:\n                        # work-around for merge_asof(right_index=True)\n                        right_keys.append(right.index)\n                        join_names.append(right.index.name)\n                if k in right_names:\n                    right_drop.append(k)\n                else:\n                    left_drop.append(k)\n            else:\n                raise KeyError(f\"Did not find key {k}\")\n    \n    if left_drop:\n        self.left = self.left._drop_labels_or_levels(left_drop)\n    \n    if right_drop:\n        self.right = self.right._drop_labels_or_levels(right_drop)\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}