{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 924,
            "file_name": "/pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self, left, right, on=None) -> (list, list, list):\n\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n    \n    Parameters\n    ----------\n    left\n    right\n    on\n    \n    Returns\n    -------\n    left_keys, right_keys\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    \n    is_lkey = lambda x: hasattr(x, '__iter__') and len(x) == len(left)\n    is_rkey = lambda x: hasattr(x, '__iter__') and len(x) == len(right)\n    \n    for i, k in enumerate(on):\n        if is_lkey(k):\n            left_keys.append(k)\n            if is_rkey(k):\n                right_keys.append(k)\n                join_names.append(None)  # what to do?\n            else:\n                if k is not None:\n                    right_keys.append(right._get_label_or_level_values(k))\n                    join_names.append(k)\n                else:\n                    # work-around for merge_asof(right_index=True)\n                    right_keys.append(right.index)\n                    join_names.append(right.index.name)\n        else:\n            if not is_rkey(i):\n                if k is not None:\n                    right_keys.append(right._get_label_or_level_values(k))\n                else:\n                    # work-around for merge_asof(right_index=True)\n                    right_keys.append(right.index)\n                if k == on[i]:\n                    # avoid key upcast in corner case (length-0)\n                    if len(left) > 0:\n                        right_drop.append(k)\n                    else:\n                        left_drop.append(k)\n            else:\n                right_keys.append(k)\n            if on[i] is not None:\n                left_keys.append(left._get_label_or_level_values(k))\n                join_names.append(k)\n            else:\n                # work-around for merge_asof(left_index=True)\n                left_keys.append(left.index)\n                join_names.append(left.index.name)\n    \n    if left_drop:\n        left_copy = left.copy()\n        left_copy[self.left_on] = left[self.left_on].apply(lambda x: datetime.fromtimestamp(0))\n        left = left_copy\n    \n    if right_drop:\n        right_copy = right.copy()\n        right_copy[right_drop] = right[right_drop].apply(lambda x: datetime.fromtimestamp(0))\n        right = right_copy\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}