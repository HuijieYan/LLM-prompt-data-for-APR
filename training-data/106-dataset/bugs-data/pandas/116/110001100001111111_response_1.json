{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 924,
            "file_name": "/pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    \n    left, right = self.left, self.right\n    \n    is_lkey = lambda x: hasattr(x, '__len__') and len(x) == len(left)\n    is_rkey = lambda x: hasattr(x, '__len__') and len(x) == len(right)\n    \n    if self.left_on is None and self.right_on is None:\n        msg = \"incompatible merge keys %s\" %(str(self.left_on.dtype), str(self.right_on.dtype))\n        raise pd.errors.MergeError(msg)\n    \n    if self.left_on is not None and self.right_on is not None:\n        for lk, rk in zip(self.left_on, self.right_on):\n            lk, rk = pd.to_datetime(lk, utc=True), pd.to_datetime(rk, utc=True)\n            left_keys.append(lk)\n            right_keys.append(rk)\n            join_names.append(None)\n    elif self.left_on is not None:\n        for lk in self.left_on:\n            lk = pd.to_datetime(lk, utc=True)\n            left_keys.append(lk)\n            if pd.api.types.is_datetime64tz_dtype(right.index):\n                right_keys.append(right._get_label_or_level_values(right.index))\n            else:\n                right_keys.append(right.index)\n            join_names.append(None)\n    elif self.right_on is not None:\n        for rk in self.right_on:\n            rk = pd.to_datetime(rk, utc=True)\n            right_keys.append(rk)\n            if pd.api.types.is_datetime64tz_dtype(left.index):\n                left_keys.append(left._get_label_or_level_values(left.index))\n            else:\n                left_keys.append(left.index)\n            join_names.append(None)\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}