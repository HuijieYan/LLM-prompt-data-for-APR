{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self, left, right, on):\n\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n    \n    Parameters\n    ----------\n    left\n    right\n    on\n    \n    Returns\n    -------\n    left_keys, right_keys\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    \n    # Determine left_keys and right_keys based on the conditions\n    if self.left_on and self.right_on:\n        for lk, rk in zip(self.left_on, self.right_on):\n            if isinstance(lk, (list, np.ndarray)) and len(lk) == len(left):\n                left_keys.append(lk)\n            else:\n                left_keys.append(left._get_label_or_level_values(lk))\n            if isinstance(rk, (list, np.ndarray)) and len(rk) == len(right):\n                right_keys.append(rk)\n            else:\n                right_keys.append(right._get_label_or_level_values(rk))\n            join_names.append(None)  # what to do?\n    \n    elif self.left_on:\n        for k in self.left_on:\n            if isinstance(k, (list, np.ndarray)) and len(k) == len(left):\n                left_keys.append(k)\n            else:\n                left_keys.append(left._get_label_or_level_values(k))\n            join_names.append(None)\n    \n    elif self.right_on:\n        for k in self.right_on:\n            if isinstance(k, (list, np.ndarray)) and len(k) == len(right):\n                right_keys.append(k)\n            else:\n                right_keys.append(right._get_label_or_level_values(k))\n            join_names.append(None)\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}