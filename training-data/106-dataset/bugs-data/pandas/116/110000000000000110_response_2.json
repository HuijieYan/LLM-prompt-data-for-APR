{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self, left, right, on):\n\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n    \n    Parameters\n    ----------\n    left\n    right\n    on\n    \n    Returns\n    -------\n    left_keys, right_keys, join_names\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    \n    is_lkey = lambda x: pd.is_array_like(x) and len(x) == len(left)\n    is_rkey = lambda x: pd.is_array_like(x) and len(x) == len(right)\n    \n    # check if keys present in both dataframes\n    if _any(left.columns) and _any(right.columns):\n        for lk, rk in zip(left.columns, right.columns):\n            if is_lkey(lk):\n                left_keys.append(lk)\n                if is_rkey(rk):\n                    right_keys.append(rk)\n                    join_names.append(None)  # what to do?\n                else:\n                    if rk is not None:\n                        right_keys.append(right.index.get_level_values(rk))\n                        join_names.append(rk)\n                    else:\n                        right_keys.append(right.index)\n                        join_names.append(right.index.name)\n            else:\n                if not is_rkey(rk):\n                    if rk is not None:\n                        right_keys.append(right.index.get_level_values(rk))\n                    else:\n                        right_keys.append(right.index)\n                    if lk is not None and lk == rk:\n                        if len(left) > 0:\n                            right_drop.append(rk)\n                        else:\n                            left_drop.append(lk)\n                else:\n                    right_keys.append(rk)\n                if lk is not None:\n                    left_keys.append(left.get_level_values(lk))\n                    join_names.append(lk)\n                else:\n                    left_keys.append(left.index)\n                    join_names.append(left.index.name)\n    # process intersection keys\n    elif _any(left.columns):\n        for k in left.columns:\n            if is_lkey(k):\n                left_keys.append(k)\n                join_names.append(None)\n            else:\n                left_keys.append(left.get_level_values(k))\n                join_names.append(k)\n        if isinstance(right.index, pd.MultiIndex):\n            right_keys = [x.take(y) for x, y in zip(right.index.levels, right.index.codes)]\n        else:\n            right_keys = [right.index.values]\n    # process intersection keys\n    elif _any(right.columns):\n        for k in right.columns:\n            if is_rkey(k):\n                right_keys.append(k)\n                join_names.append(None)\n            else:\n                right_keys.append(right.get_level_values(k))\n                join_names.append(k)\n        if isinstance(left.index, pd.MultiIndex):\n            left_keys = [x.take(y) for x, y in zip(left.index.levels, left.index.codes)]\n        else:\n            left_keys = [left.index.values]\n    \n    # perform necessary DataFrame operations\n    if left_drop:\n        left = left.drop(left_drop, axis=1)\n    \n    if right_drop:\n        right = right.drop(right_drop, axis=1)\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}