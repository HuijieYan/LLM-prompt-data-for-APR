{
    "pandas": [
        {
            "bugID": 127,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 10436,
            "file_name": "/pandas/core/generic.py",
            "replace_code": "def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, **kwargs):\n    from pandas.core.common import _shared_docs\n    from pandas.core.base import doc\n    import numpy as np\n    from pandas.core.missing import isna\n    from pandas._libs.tslibs.timestamps import Timestamp\n    axis = self._get_axis_number(kwargs.pop(\"axis\", self._stat_axis_name))\n    if fill_method is None:\n        data = self\n    else:\n        data = self.fillna(method=fill_method, limit=limit, axis=axis)\n    \n    rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n    rs = rs.reindex_like(data)\n    if freq is None:\n        mask = isna(data._values)\n        np.putmask(rs._values, mask, np.nan)\n    return rs"
        }
    ]
}