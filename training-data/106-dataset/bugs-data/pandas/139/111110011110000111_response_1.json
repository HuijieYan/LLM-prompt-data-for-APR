{
    "pandas": [
        {
            "bugID": 139,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 246,
            "file_name": "/pandas/core/groupby/grouper.py",
            "replace_code": "def __init__(\n    self,\n    index,\n    grouper=None,\n    obj=None,\n    name=None,\n    level=None,\n    sort=True,\n    observed=False,\n    in_axis=False,\n):\n\n    self.name = name\n    self.level = level\n    self.grouper = _convert_grouper(index, grouper)\n    self.all_grouper = None\n    self.index = index\n    self.sort = sort\n    self.obj = obj\n    self.observed = observed\n    self.in_axis = in_axis\n    \n    if self.level is not None and not isinstance(self.level, int):\n        if self.level not in self.index.names:\n            raise AssertionError(\"Level {} not in index\".format(self.level))\n        self.level = self.index.names.index(self.level)\n    \n    if self.name is None:\n        if (\n            isinstance(grouper, (Series, Index))\n            and (hasattr(grouper, \"name\") and grouper.name is not None)\n        ):\n            self.name = grouper.name\n    \n    if (\n        self.level is not None\n        and isinstance(self.grouper, (Series, Index))\n        and not isinstance(self.grouper, MultiIndex)\n    ):\n        self.grouper, self.labels, self.group_index = index._get_grouper_for_level(\n            self.grouper, self.level\n        )\n    \n    # handle other grouper cases here ...\n    # (code omitted for brevity)\n    \n    # retain the categoricals' index name\n    if isinstance(self.grouper, CategoricalIndex):\n        self.name = self.grouper.name\n    \n    # if we have a date/time-like grouper, make sure that we have Timestamps like\n    if getattr(self.grouper, \"dtype\", None) is not None:\n        if is_datetime64_dtype(self.grouper):\n            self.grouper = self.grouper.astype(\"datetime64[ns]\")\n        elif is_timedelta64_dtype(self.grouper):\n            self.grouper = self.grouper.astype(\"timedelta64[ns]\")"
        }
    ]
}