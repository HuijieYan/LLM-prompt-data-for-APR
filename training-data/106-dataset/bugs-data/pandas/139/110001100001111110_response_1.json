{
    "pandas": [
        {
            "bugID": 139,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 246,
            "file_name": "core/groupby/grouper.py",
            "replace_code": "def __init__(\n    self,\n    index,\n    grouper=None,\n    obj=None,\n    name=None,\n    level=None,\n    sort=True,\n    observed=False,\n    in_axis=False,\n    validate=True,\n):\n\n    self.name = name\n    self.level = level\n    self.index = index\n    self.sort = sort\n    self.obj = obj\n    self.observed = observed\n    self.in_axis = in_axis\n    \n    if _is_series_like(grouper) and name is None:\n        self.name = grouper.name\n    \n    if _is_multi_index(grouper):\n        self.grouper = grouper.values\n    \n    if level is not None:\n        if not is_integer(level):\n            if level not in index.names:\n                raise AssertionError(f\"Level {level} not in index\")\n            level = index.names.index(level)\n    \n        if self.name is None:\n            self.name = index.names[level]\n    \n        self._labels, self._group_index = index._get_grouper_for_level(\n            self.grouper, level\n        )\n    \n    elif isinstance(grouper, Grouper):\n        _, grouper, _ = self.grouper._get_grouper(self.obj, validate=False)\n        if self.name is None:\n            self.name = grouper.result_index.name\n        self.obj = self.grouper.obj\n        self.grouper = grouper._get_grouper()\n    \n    else:\n        if self.grouper is None and self.name is not None:\n            self.grouper = self.obj[self.name]\n    \n        elif is_list_like(self.grouper):\n            self.grouper = com.asarray_tuplesafe(self.grouper)\n    \n        elif is_categorical_dtype(self.grouper):\n    \n            self.grouper, self.all_grouper = recode_for_groupby(\n                self.grouper, self.sort, observed\n            )\n            categories = self.grouper.categories\n    \n            self._labels = self.grouper.codes\n            if observed:\n                codes = algorithms.unique1d(self.grouper.codes)\n                codes = codes[codes != -1]\n                if sort or self.grouper.ordered:\n                    codes = np.sort(codes)\n            else:\n                codes = np.arange(len(categories))\n    \n            self._group_index = CategoricalIndex(\n                Categorical.from_codes(\n                    codes=codes, categories=categories, ordered=self.grouper.ordered\n                )\n            )\n    \n        if isinstance(self.grouper, Grouping):\n            self.grouper = self.grouper.grouper\n    \n        elif not is_dataclass(self.grouper):\n            if getattr(self.grouper, \"ndim\", 1) != 1:\n                t = self.name or str(type(self.grouper))\n                raise ValueError(f\"Grouper for '{t}' not 1-dimensional\")\n            self.grouper = self.index.map(self.grouper)\n            if not isinstance(self.grouper, (ExtensionArray, np.ndarray)):\n                errmsg = (\n                    \"Grouper result violates len(labels) == \"\n                    \"len(data)\\nresult: %s\" % pprint_thing(self.grouper)\n                )\n                self.grouper = None\n                raise AssertionError(errmsg)\n    \n    if is_datetime_or_timedelta_dtype(self.grouper):\n        self.grouper = self.grouper.view(\"datetime64[ns]\" if is_datetime_like(self.grouper) else \"timedelta64[ns]\")"
        }
    ]
}