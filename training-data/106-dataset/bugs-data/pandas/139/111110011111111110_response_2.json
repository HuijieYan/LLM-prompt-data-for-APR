{
    "pandas": [
        {
            "bugID": 139,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 246,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def __init__(\n        self,\n        index,\n        grouper=None,\n        obj=None,\n        name=None,\n        level=None,\n        sort=True,\n        observed=False,\n        in_axis=False,\n    ):\n    \n\n    self.name = name\n    self.level = level\n    self.grouper = _convert_grouper(index, grouper)\n    self.all_grouper = None\n    self.index = index\n    self.sort = sort\n    self.obj = obj\n    self.observed = observed\n    self.in_axis = in_axis\n    \n    # right place for this?\n    if isinstance(grouper, (pd.Series, pd.Index)) and name is None:\n        self.name = grouper.name\n    \n    if isinstance(grouper, pd.MultiIndex):\n        self.grouper = grouper.values\n    \n    # we have a single grouper which may be a myriad of things,\n    # some of which are dependent on the passing in level\n    \n    if level is not None:\n        if not isinstance(level, int):\n            if level not in index.names:\n                raise AssertionError(\"Level {} not in index\".format(level))\n            level = index.names.index(level)\n    \n        if self.name is None:\n            self.name = index.names[level]\n    \n        self.grouper, self._labels, self._group_index = index._get_grouper_for_level(  # noqa: E501\n            self.grouper, level\n        )\n    \n    # a passed Grouper like, directly get the grouper in the same way\n    # as single grouper groupby, use the group_info to get labels\n    elif isinstance(self.grouper, pd.Grouper):\n        # get the new grouper; we already have disambiguated\n        # what key/level refer to exactly, don't need to\n        # check again as we have by this point converted these\n        # to an actual value (rather than a pd.Grouper)\n        _, grouper, _ = self.grouper._get_grouper(self.obj, validate=False)\n        if self.name is None:\n            self.name = grouper.result_index.name\n        self.obj = self.grouper.obj\n        self.grouper = grouper._get_grouper()\n    \n    else:\n        if self.grouper is None and self.name is not None:\n            self.grouper = self.obj[self.name]\n    \n        elif isinstance(self.grouper, (list, tuple)):\n            self.grouper = com.asarray_tuplesafe(self.grouper)\n    \n        # a passed Categorical\n        elif pd.api.types.is_categorical_dtype(self.grouper):\n    \n            self.grouper, self.all_grouper = recode_for_groupby(\n                self.grouper, self.sort, observed\n            )\n            categories = self.grouper.categories\n    \n            # we make a CategoricalIndex out of the cat grouper\n            # preserving the categories / ordered attributes\n            self._labels = self.grouper.codes\n            if observed:\n                codes = algorithms.unique1d(self.grouper.codes)\n                codes = codes[codes != -1]\n                if sort or self.grouper.ordered:\n                    codes = np.sort(codes)\n            else:\n                codes = np.arange(len(categories))\n    \n            self._group_index = pd.CategoricalIndex(\n                pd.Categorical.from_codes(\n                    codes=codes, categories=categories, ordered=self.grouper.ordered\n                )\n            )\n    \n        # we are done\n        if isinstance(self.grouper, Grouping):\n            self.grouper = self.grouper.grouper\n    \n        # no level passed\n        elif not isinstance(\n            self.grouper, (pd.Series, pd.Index, pd.api.extensions.ExtensionArray, np.ndarray)\n        ):\n            if getattr(self.grouper, \"ndim\", 1) != 1:\n                t = self.name or str(type(self.grouper))\n                raise ValueError(\"Grouper for '{}' not 1-dimensional\".format(t))\n            self.grouper = self.index.map(self.grouper)\n            if not (\n                hasattr(self.grouper, \"__len__\")\n                and len(self.grouper) == len(self.index)\n            ):\n                errmsg = (\n                    \"Grouper result violates len(labels) == \"\n                    \"len(data)\\nresult: %s\" % pprint_thing(self.grouper)\n                )\n                self.grouper = None  # Try for sanity\n                raise AssertionError(errmsg)\n    \n    # if we have a date/time-like grouper, make sure that we have\n    # Timestamps like\n    if getattr(self.grouper, \"dtype\", None) is not None:\n        if pd.api.types.is_datetime64_dtype(self.grouper):\n            self.grouper = self.grouper.astype(\"datetime64[ns]\")\n        elif pd.api.types.is_timedelta64_dtype(self.grouper):\n    \n            self.grouper = self.grouper.astype(\"timedelta64[ns]\")"
        }
    ]
}