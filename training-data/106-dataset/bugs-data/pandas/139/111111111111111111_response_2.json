{
    "pandas": [
        {
            "bugID": 139,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 246,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def __init__(\n        self,\n        index,\n        grouper=None,\n        obj=None,\n        name=None,\n        level=None,\n        sort=True,\n        observed=False,\n        in_axis=False,\n    ):\n\n\n    self.name = name\n    # ... (other assignments)\n    \n    # move the conditional block to handle categorical column\n    if isinstance(self.grouper, Categorical):\n        # assuming observed=True\n        codes = self.grouper.codes\n        codes_with_nan = np.nan * np.ones(len(codes), dtype=float)\n        codes_with_nan[codes != -1] = codes[codes != -1]\n        self._labels = codes_with_nan\n        self._group_index = CategoricalIndex(\n            Categorical.from_codes(\n                codes=self._labels,\n                categories=self.grouper.categories,\n                ordered=self.grouper.ordered\n            )\n        )\n    \n    # update the index column name only if not explicitly provided\n    if self.name is None:\n        self.name = self.grouper.name"
        }
    ]
}