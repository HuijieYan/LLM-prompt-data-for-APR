{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "/pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    from pandas import date_range, DatetimeIndex, DataFrame, NaT\n    from pandas.core.resample import _get_timestamp_range_edges, _adjust_bin_edges\n    from pandas.tseries.frequencies import to_offset\n    import numpy as np\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(f\"axis must be a DatetimeIndex, but got an instance of {type(ax).__name__}\")\n    \n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n    \n    first, last = _get_timestamp_range_edges(ax.min(), ax.max(), to_offset(self.freq), closed=self.closed, base=self.base)\n    \n    binner = labels = date_range(start=first, end=last, freq=to_offset(self.freq), tz=ax.tz, name=ax.name, closed=self.closed)\n    \n    ax_values = ax.astype(np.int64)\n    binner, bin_edges = _adjust_bin_edges(self, binner, ax_values)\n    \n    bins = lib.generate_bins_dt64(ax_values, bin_edges, self.closed, hasnans=ax.hasnans)\n    \n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n    \n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n    \n    if len(bins) < len(labels):\n        labels = labels[:len(bins)]\n    \n    return binner, bins, labels"
        }
    ]
}