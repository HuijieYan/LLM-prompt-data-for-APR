{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    import pytz\n    from pandas import DatetimeIndex, DataFrame\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n    \n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n    \n    first = ax.min()\n    last = ax.max()\n    \n    tz = ax.tzinfo\n    if tz is None:\n        tz = pytz.utc\n    \n    bins = []\n    labels = []\n    start_day = first.date()\n    end_day = last.date()\n    \n    while start_day <= end_day:\n        start_of_day = tz.localize(first.replace(hour=0, minute=0, second=0, microsecond=0))\n        end_of_day = tz.localize(first.replace(hour=23, minute=59, second=59, microsecond=999999))\n        \n        bins.append((start_of_day, end_of_day))\n        labels.append(start_of_day)\n    \n        first = end_of_day + pd.Timedelta(1, 'ns')\n        start_day = first.date()\n    \n    return bins, labels"
        }
    ]
}