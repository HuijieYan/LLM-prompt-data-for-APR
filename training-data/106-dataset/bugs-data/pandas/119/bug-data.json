{
    "pandas:119": {
        "/Volumes/SSD2T/bgp_envs/repos/pandas_119/pandas/core/reshape/pivot.py": {
            "buggy_functions": [
                {
                    "function_name": "_add_margins",
                    "function_code": "def _add_margins(\n    table: Union[\"Series\", \"DataFrame\"],\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: str = \"All\",\n    fill_value=None,\n):\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n\n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    for level in table.index.names:\n        if margins_name in table.index.get_level_values(level):\n            raise ValueError(msg)\n\n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n\n    if table.ndim == 2:\n        # i.e. DataFramae\n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n\n    key: Union[str, Tuple[str, ...]]\n    if len(rows) > 1:\n        key = (margins_name,) + (\"\",) * (len(rows) - 1)\n    else:\n        key = margins_name\n\n    if not values and isinstance(table, ABCSeries):\n        # If there are no values and the table is a series, then there is only\n        # one column in the data. Compute grand margin and return it.\n        return table.append(Series({key: grand_margin[margins_name]}))\n\n    elif values:\n        marginal_result_set = _generate_marginal_results(\n            table,\n            data,\n            values,\n            rows,\n            cols,\n            aggfunc,\n            observed,\n            grand_margin,\n            margins_name,\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n    else:\n        # no values, and table is a DataFrame\n        assert isinstance(table, ABCDataFrame)\n        marginal_result_set = _generate_marginal_results_without_values(\n            table, data, rows, cols, aggfunc, observed, margins_name\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n\n    row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n    # populate grand margin\n    for k in margin_keys:\n        if isinstance(k, str):\n            row_margin[k] = grand_margin[k]\n        else:\n            row_margin[k] = grand_margin[k[0]]\n\n    from pandas import DataFrame\n\n    margin_dummy = DataFrame(row_margin, columns=[key]).T\n\n    row_names = result.index.names\n    try:\n        for dtype in set(result.dtypes):\n            cols = result.select_dtypes([dtype]).columns\n            margin_dummy[cols] = margin_dummy[cols].astype(dtype)\n        result = result.append(margin_dummy)\n    except TypeError:\n\n        # we cannot reshape, so coerce the axis\n        result.index = result.index._to_safe_for_reshape()\n        result = result.append(margin_dummy)\n    result.index.names = row_names\n\n    return result\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 187,
                    "end_line": 275,
                    "variables": {
                        "Union": [
                            188,
                            214
                        ],
                        "str": [
                            253,
                            195,
                            214,
                            198
                        ],
                        "isinstance": [
                            198,
                            237,
                            242,
                            246,
                            220,
                            253
                        ],
                        "margins_name": [
                            198,
                            201,
                            203,
                            235,
                            206,
                            211,
                            244,
                            216,
                            218,
                            223
                        ],
                        "ValueError": [
                            212,
                            204,
                            199
                        ],
                        "msg": [
                            201,
                            212,
                            204
                        ],
                        "format": [
                            201
                        ],
                        "level": [
                            210,
                            202,
                            203,
                            211
                        ],
                        "table.index.names": [
                            202
                        ],
                        "table.index": [
                            202,
                            203
                        ],
                        "table": [
                            227,
                            202,
                            203,
                            208,
                            210,
                            211,
                            242,
                            244,
                            220,
                            223
                        ],
                        "table.index.get_level_values": [
                            203
                        ],
                        "grand_margin": [
                            256,
                            234,
                            206,
                            254,
                            223
                        ],
                        "_compute_grand_margin": [
                            206
                        ],
                        "data": [
                            228,
                            244,
                            206
                        ],
                        "values": [
                            225,
                            220,
                            229,
                            206
                        ],
                        "aggfunc": [
                            232,
                            244,
                            206
                        ],
                        "table.ndim": [
                            208
                        ],
                        "table.columns.names": [
                            210
                        ],
                        "table.columns": [
                            210,
                            211
                        ],
                        "table.columns.get_level_values": [
                            211
                        ],
                        "key": [
                            260,
                            214,
                            216,
                            218,
                            223
                        ],
                        "Tuple": [
                            214
                        ],
                        "len": [
                            216,
                            215
                        ],
                        "rows": [
                            216,
                            244,
                            230,
                            215
                        ],
                        "ABCSeries": [
                            220
                        ],
                        "table.append": [
                            223
                        ],
                        "Series": [
                            223
                        ],
                        "marginal_result_set": [
                            226,
                            237,
                            238,
                            239,
                            243,
                            246,
                            247,
                            248
                        ],
                        "_generate_marginal_results": [
                            226
                        ],
                        "cols": [
                            265,
                            266,
                            244,
                            231
                        ],
                        "observed": [
                            233,
                            244
                        ],
                        "tuple": [
                            237,
                            246
                        ],
                        "result": [
                            262,
                            264,
                            265,
                            267,
                            239,
                            271,
                            272,
                            273,
                            275,
                            248,
                            250
                        ],
                        "margin_keys": [
                            248,
                            252,
                            239
                        ],
                        "row_margin": [
                            256,
                            260,
                            239,
                            248,
                            250,
                            254
                        ],
                        "ABCDataFrame": [
                            242
                        ],
                        "_generate_marginal_results_without_values": [
                            243
                        ],
                        "row_margin.reindex": [
                            250
                        ],
                        "result.columns": [
                            250
                        ],
                        "fill_value": [
                            250
                        ],
                        "k": [
                            256,
                            252,
                            253,
                            254
                        ],
                        "margin_dummy": [
                            272,
                            266,
                            267,
                            260
                        ],
                        "T": [
                            260
                        ],
                        "DataFrame": [
                            260
                        ],
                        "row_names": [
                            273,
                            262
                        ],
                        "result.index.names": [
                            273,
                            262
                        ],
                        "result.index": [
                            273,
                            262,
                            271
                        ],
                        "dtype": [
                            264,
                            265,
                            266
                        ],
                        "set": [
                            264
                        ],
                        "result.dtypes": [
                            264
                        ],
                        "columns": [
                            265
                        ],
                        "result.select_dtypes": [
                            265
                        ],
                        "astype": [
                            266
                        ],
                        "result.append": [
                            272,
                            267
                        ],
                        "TypeError": [
                            268
                        ],
                        "result.index._to_safe_for_reshape": [
                            271
                        ]
                    },
                    "filtered_variables": {
                        "Union": [
                            188,
                            214
                        ],
                        "margins_name": [
                            198,
                            201,
                            203,
                            235,
                            206,
                            211,
                            244,
                            216,
                            218,
                            223
                        ],
                        "msg": [
                            201,
                            212,
                            204
                        ],
                        "level": [
                            210,
                            202,
                            203,
                            211
                        ],
                        "table.index.names": [
                            202
                        ],
                        "table.index": [
                            202,
                            203
                        ],
                        "table": [
                            227,
                            202,
                            203,
                            208,
                            210,
                            211,
                            242,
                            244,
                            220,
                            223
                        ],
                        "table.index.get_level_values": [
                            203
                        ],
                        "grand_margin": [
                            256,
                            234,
                            206,
                            254,
                            223
                        ],
                        "_compute_grand_margin": [
                            206
                        ],
                        "data": [
                            228,
                            244,
                            206
                        ],
                        "values": [
                            225,
                            220,
                            229,
                            206
                        ],
                        "aggfunc": [
                            232,
                            244,
                            206
                        ],
                        "table.ndim": [
                            208
                        ],
                        "table.columns.names": [
                            210
                        ],
                        "table.columns": [
                            210,
                            211
                        ],
                        "table.columns.get_level_values": [
                            211
                        ],
                        "key": [
                            260,
                            214,
                            216,
                            218,
                            223
                        ],
                        "Tuple": [
                            214
                        ],
                        "rows": [
                            216,
                            244,
                            230,
                            215
                        ],
                        "ABCSeries": [
                            220
                        ],
                        "table.append": [
                            223
                        ],
                        "Series": [
                            223
                        ],
                        "marginal_result_set": [
                            226,
                            237,
                            238,
                            239,
                            243,
                            246,
                            247,
                            248
                        ],
                        "_generate_marginal_results": [
                            226
                        ],
                        "cols": [
                            265,
                            266,
                            244,
                            231
                        ],
                        "observed": [
                            233,
                            244
                        ],
                        "result": [
                            262,
                            264,
                            265,
                            267,
                            239,
                            271,
                            272,
                            273,
                            275,
                            248,
                            250
                        ],
                        "margin_keys": [
                            248,
                            252,
                            239
                        ],
                        "row_margin": [
                            256,
                            260,
                            239,
                            248,
                            250,
                            254
                        ],
                        "ABCDataFrame": [
                            242
                        ],
                        "_generate_marginal_results_without_values": [
                            243
                        ],
                        "row_margin.reindex": [
                            250
                        ],
                        "result.columns": [
                            250
                        ],
                        "fill_value": [
                            250
                        ],
                        "k": [
                            256,
                            252,
                            253,
                            254
                        ],
                        "margin_dummy": [
                            272,
                            266,
                            267,
                            260
                        ],
                        "T": [
                            260
                        ],
                        "DataFrame": [
                            260
                        ],
                        "row_names": [
                            273,
                            262
                        ],
                        "result.index.names": [
                            273,
                            262
                        ],
                        "result.index": [
                            273,
                            262,
                            271
                        ],
                        "dtype": [
                            264,
                            265,
                            266
                        ],
                        "result.dtypes": [
                            264
                        ],
                        "columns": [
                            265
                        ],
                        "result.select_dtypes": [
                            265
                        ],
                        "astype": [
                            266
                        ],
                        "result.append": [
                            272,
                            267
                        ],
                        "result.index._to_safe_for_reshape": [
                            271
                        ]
                    },
                    "diff_line_number": 263,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": "'Conflicting name \"All\" in margins'",
                                    "variable_type": "str",
                                    "variable_shape": "33"
                                },
                                "level": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": "{'A': 5.0, 'B': 4.5, 'C': 3.5}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": "(   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5, Index(['A', 'B', 'C'], dtype='object'), A   NaN\nB   NaN\nC   NaN\ndtype: float64)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "Index(['A', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "margin_keys": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "row_margin": {
                                    "variable_value": "A    5.0\nB    4.5\nC    3.5\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": "<bound method Series.reindex of A    5.0\nB    4.5\nC    3.5\ndtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "margin_dummy": {
                                    "variable_value": "     A    B  C\nAll  5  4.5  3",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 3)"
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10f022ea0>"
                                },
                                "row_names": {
                                    "variable_value": "FrozenList(['D'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "result.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": "Index(['X', 'Y', 'All'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "result.dtypes": {
                                    "variable_value": "A      int64\nB    float64\nC      int64\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": "<bound method DataFrame.select_dtypes of      A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": "<bound method DataFrame.append of      A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": "'Conflicting name \"All\" in margins'",
                                    "variable_type": "str",
                                    "variable_shape": "33"
                                },
                                "level": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": "{'A': 5.0, 'B': 4.5, 'C': 3.5}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": "(   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5, Index(['A', 'B', 'C'], dtype='object'), A   NaN\nB   NaN\nC   NaN\ndtype: float64)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "Index(['A', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "margin_keys": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "row_margin": {
                                    "variable_value": "A    5.0\nB    4.5\nC    3.5\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": "<bound method Series.reindex of A    5.0\nB    4.5\nC    3.5\ndtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "margin_dummy": {
                                    "variable_value": "     A    B  C\nAll  5  4.5  3",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 3)"
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10f022ea0>"
                                },
                                "row_names": {
                                    "variable_value": "FrozenList(['D'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "result.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": "Index(['X', 'Y', 'All'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "result.dtypes": {
                                    "variable_value": "A      int64\nB    float64\nC      int64\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": "<bound method DataFrame.select_dtypes of      A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": "<bound method DataFrame.append of      A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": "'Conflicting name \"All\" in margins'",
                                    "variable_type": "str",
                                    "variable_shape": "33"
                                },
                                "level": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": "{'A': 5.0, 'B': 4.5, 'C': 3.5}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": "(   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5, Index(['A', 'B', 'C'], dtype='object'), A   NaN\nB   NaN\nC   NaN\ndtype: float64)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "Index(['A', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "margin_keys": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "row_margin": {
                                    "variable_value": "A    5.0\nB    4.5\nC    3.5\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": "<bound method Series.reindex of A    5.0\nB    4.5\nC    3.5\ndtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "margin_dummy": {
                                    "variable_value": "     A    B  C\nAll  5  4.5  3",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 3)"
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10f022ea0>"
                                },
                                "row_names": {
                                    "variable_value": "FrozenList(['D'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "result.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": "Index(['X', 'Y', 'All'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "result.dtypes": {
                                    "variable_value": "A      int64\nB    float64\nC      int64\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": "<bound method DataFrame.select_dtypes of      A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": "<bound method DataFrame.append of      A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "apply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": "'Conflicting name \"All\" in margins'",
                                    "variable_type": "str",
                                    "variable_shape": "33"
                                },
                                "level": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": "{'A': 5.0, 'B': 4.5, 'C': 3.5}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": "(   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5, Index(['A', 'B', 'C'], dtype='object'), A   NaN\nB   NaN\nC   NaN\ndtype: float64)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "Index(['A', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "margin_keys": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "row_margin": {
                                    "variable_value": "A    5.0\nB    4.5\nC    3.5\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": "<bound method Series.reindex of A    5.0\nB    4.5\nC    3.5\ndtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "margin_dummy": {
                                    "variable_value": "     A    B    C\nAll  5  4.5  3.5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 3)"
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115e8ff40>"
                                },
                                "row_names": {
                                    "variable_value": "FrozenList(['D'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "result.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": "Index(['X', 'Y', 'All'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "result.dtypes": {
                                    "variable_value": "A      int64\nB    float64\nC    float64\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": "<bound method DataFrame.select_dtypes of      A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "apply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": "<bound method DataFrame.append of      A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "apply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": "'Conflicting name \"All\" in margins'",
                                    "variable_type": "str",
                                    "variable_shape": "33"
                                },
                                "level": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": "{'A': 5.0, 'B': 4.5, 'C': 3.5}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": "(   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5, Index(['A', 'B', 'C'], dtype='object'), A   NaN\nB   NaN\nC   NaN\ndtype: float64)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "Index(['A', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "margin_keys": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "row_margin": {
                                    "variable_value": "A    5.0\nB    4.5\nC    3.5\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": "<bound method Series.reindex of A    5.0\nB    4.5\nC    3.5\ndtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "margin_dummy": {
                                    "variable_value": "     A    B    C\nAll  5  4.5  3.5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 3)"
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115e8ff40>"
                                },
                                "row_names": {
                                    "variable_value": "FrozenList(['D'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "result.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": "Index(['X', 'Y', 'All'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "result.dtypes": {
                                    "variable_value": "A      int64\nB    float64\nC    float64\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": "<bound method DataFrame.select_dtypes of      A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "apply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": "<bound method DataFrame.append of      A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margin_dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "apply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "margins_name": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "msg": {
                                    "variable_value": "'Conflicting name \"All\" in margins'",
                                    "variable_type": "str",
                                    "variable_shape": "33"
                                },
                                "level": {
                                    "variable_value": "'D'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "table.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.index": {
                                    "variable_value": "Index(['X', 'Y'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "table": {
                                    "variable_value": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 3)"
                                },
                                "table.index.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "grand_margin": {
                                    "variable_value": "{'A': 5.0, 'B': 4.5, 'C': 3.5}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "_compute_grand_margin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(4, 4)"
                                },
                                "values": {
                                    "variable_value": "['A', 'B', 'C']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "aggfunc": {
                                    "variable_value": "'mean'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "table.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "table.columns.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "table.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "table.columns.get_level_values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'All'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rows": {
                                    "variable_value": "['D']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "table.append": {
                                    "variable_value": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marginal_result_set": {
                                    "variable_value": "(   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5, Index(['A', 'B', 'C'], dtype='object'), A   NaN\nB   NaN\nC   NaN\ndtype: float64)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "_generate_marginal_results": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cols": {
                                    "variable_value": "Index(['A', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(2,)"
                                },
                                "observed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(3, 3)"
                                },
                                "margin_keys": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "row_margin": {
                                    "variable_value": "A    5.0\nB    4.5\nC    3.5\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "ABCDataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_generate_marginal_results_without_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row_margin.reindex": {
                                    "variable_value": "<bound method Series.reindex of A    5.0\nB    4.5\nC    3.5\ndtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.columns": {
                                    "variable_value": "Index(['A', 'B', 'C'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "fill_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": "'C'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "margin_dummy": {
                                    "variable_value": "     A    B    C\nAll  5  4.5  3.5",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(1, 3)"
                                },
                                "T": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115e8ff40>"
                                },
                                "row_names": {
                                    "variable_value": "FrozenList(['D'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "1"
                                },
                                "result.index.names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result.index": {
                                    "variable_value": "Index(['X', 'Y', 'All'], dtype='object', name='D')",
                                    "variable_type": "Index",
                                    "variable_shape": "(3,)"
                                },
                                "dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "result.dtypes": {
                                    "variable_value": "A      int64\nB    float64\nC    float64\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(3,)"
                                },
                                "columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.select_dtypes": {
                                    "variable_value": "<bound method DataFrame.select_dtypes of      A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "apply": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.append": {
                                    "variable_value": "<bound method DataFrame.append of      A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "result.index._to_safe_for_reshape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot_table\"], indents=1)\ndef pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n):\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        # gh-21133\n        # we want to down cast if\n        # the original values are ints\n        # as we grouped with a NaN value\n        # and then dropped, coercing to floats\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n    if table.index.nlevels > 1:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.index.levels), names=table.index.names\n            )\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.columns.levels), names=table.columns.names\n            )\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(value=fill_value, downcast=\"infer\")\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # discard the top level\n    if (\n        values_passed\n        and not values_multi\n        and not table.empty\n        and (table.columns.nlevels > 1)\n    ):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # GH 15193 Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
                "def _add_margins(\n    table: Union[\"Series\", \"DataFrame\"],\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: str = \"All\",\n    fill_value=None,\n):\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n\n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    for level in table.index.names:\n        if margins_name in table.index.get_level_values(level):\n            raise ValueError(msg)\n\n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n\n    if table.ndim == 2:\n        # i.e. DataFramae\n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n\n    key: Union[str, Tuple[str, ...]]\n    if len(rows) > 1:\n        key = (margins_name,) + (\"\",) * (len(rows) - 1)\n    else:\n        key = margins_name\n\n    if not values and isinstance(table, ABCSeries):\n        # If there are no values and the table is a series, then there is only\n        # one column in the data. Compute grand margin and return it.\n        return table.append(Series({key: grand_margin[margins_name]}))\n\n    elif values:\n        marginal_result_set = _generate_marginal_results(\n            table,\n            data,\n            values,\n            rows,\n            cols,\n            aggfunc,\n            observed,\n            grand_margin,\n            margins_name,\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n    else:\n        # no values, and table is a DataFrame\n        assert isinstance(table, ABCDataFrame)\n        marginal_result_set = _generate_marginal_results_without_values(\n            table, data, rows, cols, aggfunc, observed, margins_name\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n\n    row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n    # populate grand margin\n    for k in margin_keys:\n        if isinstance(k, str):\n            row_margin[k] = grand_margin[k]\n        else:\n            row_margin[k] = grand_margin[k[0]]\n\n    from pandas import DataFrame\n\n    margin_dummy = DataFrame(row_margin, columns=[key]).T\n\n    row_names = result.index.names\n    try:\n        for dtype in set(result.dtypes):\n            cols = result.select_dtypes([dtype]).columns\n            margin_dummy[cols] = margin_dummy[cols].astype(dtype)\n        result = result.append(margin_dummy)\n    except TypeError:\n\n        # we cannot reshape, so coerce the axis\n        result.index = result.index._to_safe_for_reshape()\n        result = result.append(margin_dummy)\n    result.index.names = row_names\n\n    return result",
                "def _compute_grand_margin(data, values, aggfunc, margins_name: str = \"All\"):\n\n    if values:\n        grand_margin = {}\n        for k, v in data[values].items():\n            try:\n                if isinstance(aggfunc, str):\n                    grand_margin[k] = getattr(v, aggfunc)()\n                elif isinstance(aggfunc, dict):\n                    if isinstance(aggfunc[k], str):\n                        grand_margin[k] = getattr(v, aggfunc[k])()\n                    else:\n                        grand_margin[k] = aggfunc[k](v)\n                else:\n                    grand_margin[k] = aggfunc(v)\n            except TypeError:\n                pass\n        return grand_margin\n    else:\n        return {margins_name: aggfunc(data.index)}",
                "def _generate_marginal_results(\n    table,\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed,\n    grand_margin,\n    margins_name: str = \"All\",\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        table_pieces = []\n        margin_keys = []\n\n        def _all_key(key):\n            return (key, margins_name) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows + values].groupby(rows, observed=observed).agg(aggfunc)\n            cat_axis = 1\n\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n\n                # we are going to mutate this, so need to copy!\n                piece = piece.copy()\n                try:\n                    piece[all_key] = margin[key]\n                except TypeError:\n\n                    # we cannot reshape, so coerce the axis\n                    piece.set_axis(\n                        piece._get_axis(cat_axis)._to_safe_for_reshape(),\n                        axis=cat_axis,\n                        inplace=True,\n                    )\n                    piece[all_key] = margin[key]\n\n                table_pieces.append(piece)\n                margin_keys.append(all_key)\n        else:\n            margin = grand_margin\n            cat_axis = 0\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n                table_pieces.append(piece)\n                table_pieces.append(Series(margin[key], index=[all_key]))\n                margin_keys.append(all_key)\n\n        result = concat(table_pieces, axis=cat_axis)\n\n        if len(rows) == 0:\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols) > 0:\n        row_margin = data[cols + values].groupby(cols, observed=observed).agg(aggfunc)\n        row_margin = row_margin.stack()\n\n        # slight hack\n        new_order = [len(cols)] + list(range(len(cols)))\n        row_margin.index = row_margin.index.reorder_levels(new_order)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin",
                "def _generate_marginal_results_without_values(\n    table: \"DataFrame\", data, rows, cols, aggfunc, observed, margins_name: str = \"All\"\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        margin_keys = []\n\n        def _all_key():\n            if len(cols) == 1:\n                return margins_name\n            return (margins_name,) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows].groupby(rows, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n\n        else:\n            margin = data.groupby(level=0, axis=0, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols):\n        row_margin = data[cols].groupby(cols, observed=observed).apply(aggfunc)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin",
                "def _convert_by(by):\n    if by is None:\n        by = []\n    elif (\n        is_scalar(by)\n        or isinstance(by, (np.ndarray, Index, ABCSeries, Grouper))\n        or hasattr(by, \"__call__\")\n    ):\n        by = [by]\n    else:\n        by = list(by)\n    return by",
                "@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot\"], indents=1)\ndef pivot(data: \"DataFrame\", index=None, columns=None, values=None):\n    if values is None:\n        cols = [columns] if index is None else [index, columns]\n        append = index is None\n        indexed = data.set_index(cols, append=append)\n    else:\n        if index is None:\n            index = data.index\n        else:\n            index = data[index]\n        index = MultiIndex.from_arrays([index, data[columns]])\n\n        if is_list_like(values) and not isinstance(values, tuple):\n            # Exclude tuple because it is seen as a single column name\n            indexed = data._constructor(\n                data[values].values, index=index, columns=values\n            )\n        else:\n            indexed = data._constructor_sliced(data[values].values, index=index)\n    return indexed.unstack(columns)",
                "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n):\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n\n        .. versionadded:: 0.21.0\n\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data: Dict = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(data, index=common_idx)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table",
                "def _normalize(table, normalize, margins: bool, margins_name=\"All\"):\n\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    if margins is False:\n\n        # Actual Normalizations\n        normalizers: Dict[Union[bool, str], Callable] = {\n            \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n        }\n\n        normalizers[True] = normalizers[\"all\"]\n\n        try:\n            f = normalizers[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table = f(table)\n        table = table.fillna(0)\n\n    elif margins is True:\n        # keep index and column of pivoted table\n        table_index = table.index\n        table_columns = table.columns\n\n        # check if margin name is in (for MI cases) or equal to last\n        # index/column and save the column and index margin\n        if (margins_name not in table.iloc[-1, :].name) | (\n            margins_name != table.iloc[:, -1].name\n        ):\n            raise ValueError(\n                \"{mname} not in pivoted DataFrame\".format(mname=margins_name)\n            )\n        column_margin = table.iloc[:-1, -1]\n        index_margin = table.iloc[-1, :-1]\n\n        # keep the core table\n        table = table.iloc[:-1, :-1]\n\n        # Normalize core\n        table = _normalize(table, normalize=normalize, margins=False)\n\n        # Fix Margins\n        if normalize == \"columns\":\n            column_margin = column_margin / column_margin.sum()\n            table = concat([table, column_margin], axis=1)\n            table = table.fillna(0)\n            table.columns = table_columns\n\n        elif normalize == \"index\":\n            index_margin = index_margin / index_margin.sum()\n            table = table.append(index_margin)\n            table = table.fillna(0)\n            table.index = table_index\n\n        elif normalize == \"all\" or normalize is True:\n            column_margin = column_margin / column_margin.sum()\n            index_margin = index_margin / index_margin.sum()\n            index_margin.loc[margins_name] = 1\n            table = concat([table, column_margin], axis=1)\n            table = table.append(index_margin)\n\n            table = table.fillna(0)\n            table.index = table_index\n            table.columns = table_columns\n\n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    else:\n        raise ValueError(\"Not a valid margins argument\")\n\n    return table",
                "def _get_names(arrs, names, prefix: str = \"row\"):\n    if names is None:\n        names = []\n        for i, arr in enumerate(arrs):\n            if isinstance(arr, ABCSeries) and arr.name is not None:\n                names.append(arr.name)\n            else:\n                names.append(\"{prefix}_{i}\".format(prefix=prefix, i=i))\n    else:\n        if len(names) != len(arrs):\n            raise AssertionError(\"arrays and names must have the same length\")\n        if not isinstance(names, list):\n            names = list(names)\n\n    return names",
                "def _all_key(key):\n    return (key, margins_name) + (\"\",) * (len(cols) - 1)",
                "def _all_key():\n    if len(cols) == 1:\n        return margins_name\n    return (margins_name,) + (\"\",) * (len(cols) - 1)"
            ],
            "inscope_function_signatures": [
                "pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
                "_add_margins(table: Union['Series', 'DataFrame'], data, values, rows, cols, aggfunc, observed=None, margins_name: str='All', fill_value=None)",
                "_compute_grand_margin(data, values, aggfunc, margins_name: str='All')",
                "_generate_marginal_results(table, data, values, rows, cols, aggfunc, observed, grand_margin, margins_name: str='All')",
                "_generate_marginal_results_without_values(table: 'DataFrame', data, rows, cols, aggfunc, observed, margins_name: str='All')",
                "_convert_by(by)",
                "pivot(data: 'DataFrame', index=None, columns=None, values=None)",
                "crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name: str='All', dropna: bool=True, normalize=False)",
                "_normalize(table, normalize, margins: bool, margins_name='All')",
                "_get_names(arrs, names, prefix: str='row')",
                "_all_key(key)",
                "_all_key()"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    19
                ],
                "index": [
                    160,
                    39,
                    555,
                    428,
                    429,
                    558,
                    432,
                    49,
                    177,
                    433,
                    435,
                    436,
                    562,
                    567,
                    441,
                    444,
                    63,
                    124,
                    126
                ],
                "_convert_by": [
                    40,
                    39
                ],
                "columns": [
                    161,
                    40,
                    265,
                    428,
                    556,
                    559,
                    177,
                    50,
                    562,
                    436,
                    568,
                    445,
                    63
                ],
                "isinstance": [
                    147,
                    284,
                    286,
                    415,
                    287,
                    42,
                    562,
                    692,
                    181,
                    438,
                    699,
                    198,
                    81,
                    220,
                    607,
                    102,
                    237,
                    242,
                    246,
                    253
                ],
                "aggfunc": [
                    385,
                    392,
                    403,
                    284,
                    285,
                    286,
                    287,
                    288,
                    162,
                    290,
                    292,
                    297,
                    42,
                    45,
                    570,
                    573,
                    320,
                    584,
                    206,
                    101,
                    232,
                    360,
                    244
                ],
                "list": [
                    98,
                    420,
                    69,
                    42,
                    364,
                    699,
                    700
                ],
                "pieces": [
                    58,
                    43,
                    61
                ],
                "keys": [
                    100,
                    44,
                    80,
                    93,
                    59,
                    61,
                    126,
                    63
                ],
                "func": [
                    59,
                    52,
                    45
                ],
                "table": [
                    640,
                    641,
                    387,
                    132,
                    388,
                    646,
                    135,
                    647,
                    137,
                    394,
                    139,
                    395,
                    141,
                    650,
                    143,
                    399,
                    145,
                    400,
                    147,
                    148,
                    653,
                    658,
                    151,
                    659,
                    660,
                    664,
                    665,
                    156,
                    157,
                    666,
                    672,
                    673,
                    675,
                    676,
                    677,
                    172,
                    173,
                    46,
                    175,
                    685,
                    178,
                    181,
                    182,
                    184,
                    58,
                    323,
                    202,
                    203,
                    586,
                    208,
                    210,
                    211,
                    598,
                    599,
                    345,
                    602,
                    220,
                    223,
                    227,
                    356,
                    357,
                    631,
                    242,
                    244,
                    630,
                    119,
                    120,
                    635,
                    636
                ],
                "pivot_table": [
                    46
                ],
                "data": [
                    385,
                    392,
                    403,
                    282,
                    155,
                    158,
                    297,
                    430,
                    47,
                    433,
                    435,
                    436,
                    566,
                    567,
                    440,
                    441,
                    568,
                    444,
                    320,
                    578,
                    76,
                    206,
                    84,
                    88,
                    89,
                    92,
                    100,
                    228,
                    360,
                    112,
                    113,
                    244,
                    117
                ],
                "values": [
                    280,
                    282,
                    159,
                    427,
                    175,
                    48,
                    438,
                    441,
                    570,
                    444,
                    573,
                    320,
                    65,
                    67,
                    579,
                    69,
                    583,
                    72,
                    75,
                    206,
                    80,
                    220,
                    92,
                    95,
                    225,
                    98,
                    229,
                    360,
                    110
                ],
                "fill_value": [
                    165,
                    51,
                    150,
                    151,
                    250
                ],
                "margins": [
                    614,
                    590,
                    633,
                    53,
                    599,
                    153
                ],
                "dropna": [
                    163,
                    102,
                    134,
                    592,
                    181,
                    54,
                    154
                ],
                "margins_name": [
                    640,
                    641,
                    644,
                    671,
                    164,
                    297,
                    55,
                    317,
                    198,
                    201,
                    203,
                    206,
                    591,
                    211,
                    599,
                    216,
                    218,
                    223,
                    235,
                    244,
                    381,
                    382
                ],
                "observed": [
                    320,
                    385,
                    323,
                    100,
                    360,
                    233,
                    392,
                    403,
                    244,
                    56,
                    345
                ],
                "pieces.append": [
                    58
                ],
                "keys.append": [
                    59
                ],
                "getattr": [
                    288,
                    59,
                    285
                ],
                "concat": [
                    672,
                    658,
                    61,
                    351
                ],
                "values_passed": [
                    170,
                    65,
                    66
                ],
                "is_list_like": [
                    67,
                    438
                ],
                "values_multi": [
                    171,
                    68,
                    71
                ],
                "i": [
                    129,
                    75,
                    76,
                    77,
                    691,
                    695,
                    126,
                    127
                ],
                "KeyError": [
                    96,
                    627,
                    611,
                    77
                ],
                "to_filter": [
                    88,
                    89,
                    85,
                    79
                ],
                "x": [
                    618,
                    619,
                    620,
                    80,
                    81,
                    82,
                    562,
                    84,
                    85
                ],
                "Grouper": [
                    81,
                    415
                ],
                "x.key": [
                    82
                ],
                "to_filter.append": [
                    85
                ],
                "TypeError": [
                    96,
                    293,
                    330,
                    268,
                    86
                ],
                "len": [
                    384,
                    402,
                    177,
                    311,
                    697,
                    317,
                    319,
                    581,
                    215,
                    88,
                    216,
                    353,
                    102,
                    359,
                    364,
                    124,
                    375,
                    126,
                    380,
                    382
                ],
                "data.columns": [
                    88,
                    92
                ],
                "key": [
                    223,
                    323,
                    260,
                    324,
                    329,
                    346,
                    338,
                    214,
                    216,
                    345,
                    218,
                    317,
                    348,
                    93,
                    95
                ],
                "values.drop": [
                    95
                ],
                "ValueError": [
                    96,
                    643,
                    612,
                    199,
                    680,
                    683,
                    204,
                    212,
                    628,
                    571,
                    574
                ],
                "grouped": [
                    100,
                    101
                ],
                "data.groupby": [
                    392,
                    100
                ],
                "agged": [
                    132,
                    101,
                    102,
                    103,
                    114,
                    115,
                    117,
                    119,
                    124,
                    127
                ],
                "grouped.agg": [
                    101
                ],
                "ABCDataFrame": [
                    102,
                    242,
                    147,
                    562,
                    181
                ],
                "agged.columns": [
                    102
                ],
                "agged.dropna": [
                    103
                ],
                "v": [
                    288,
                    290,
                    292,
                    110,
                    112,
                    113,
                    114,
                    115,
                    117,
                    282,
                    285
                ],
                "is_integer_dtype": [
                    113,
                    115
                ],
                "maybe_downcast_to_dtype": [
                    117
                ],
                "dtype": [
                    264,
                    265,
                    266,
                    117
                ],
                "table.index.nlevels": [
                    120,
                    135
                ],
                "table.index": [
                    676,
                    135,
                    137,
                    202,
                    203,
                    120,
                    666,
                    635
                ],
                "index_names": [
                    128,
                    124
                ],
                "agged.index.names": [
                    124,
                    127
                ],
                "agged.index": [
                    124,
                    127
                ],
                "to_unstack": [
                    129,
                    131,
                    132,
                    125
                ],
                "range": [
                    364,
                    126
                ],
                "name": [
                    128,
                    641,
                    640,
                    131,
                    127
                ],
                "to_unstack.append": [
                    129,
                    131
                ],
                "agged.unstack": [
                    132
                ],
                "m": [
                    136,
                    145,
                    139,
                    142
                ],
                "MultiIndex.from_arrays": [
                    136,
                    436,
                    142
                ],
                "MultiIndex": [
                    136,
                    436,
                    142
                ],
                "cartesian_product": [
                    137,
                    143
                ],
                "table.index.levels": [
                    137
                ],
                "table.index.names": [
                    137,
                    202
                ],
                "table.reindex": [
                    145,
                    139
                ],
                "table.columns.nlevels": [
                    141,
                    173
                ],
                "table.columns": [
                    357,
                    677,
                    173,
                    141,
                    143,
                    400,
                    210,
                    211,
                    660,
                    636
                ],
                "table.columns.levels": [
                    143
                ],
                "table.columns.names": [
                    210,
                    143
                ],
                "table.sort_index": [
                    148
                ],
                "table.fillna": [
                    675,
                    659,
                    631,
                    151,
                    665
                ],
                "all": [
                    155
                ],
                "data.notna": [
                    155
                ],
                "_add_margins": [
                    156
                ],
                "table.empty": [
                    172
                ],
                "table.T": [
                    178
                ],
                "table.dropna": [
                    182
                ],
                "Substitution": [
                    424,
                    25
                ],
                "Appender": [
                    425,
                    26
                ],
                "_shared_docs": [
                    425,
                    26
                ],
                "Union": [
                    617,
                    188,
                    214
                ],
                "str": [
                    195,
                    198,
                    456,
                    617,
                    607,
                    688,
                    309,
                    214,
                    278,
                    373,
                    284,
                    253,
                    287
                ],
                "msg": [
                    201,
                    212,
                    204
                ],
                "format": [
                    201,
                    644,
                    695
                ],
                "level": [
                    210,
                    202,
                    203,
                    211
                ],
                "table.index.get_level_values": [
                    203
                ],
                "grand_margin": [
                    256,
                    288,
                    290,
                    292,
                    295,
                    234,
                    206,
                    343,
                    281,
                    285,
                    254,
                    223
                ],
                "_compute_grand_margin": [
                    206
                ],
                "table.ndim": [
                    208
                ],
                "table.columns.get_level_values": [
                    211
                ],
                "Tuple": [
                    214
                ],
                "rows": [
                    320,
                    353,
                    384,
                    385,
                    230,
                    244,
                    215,
                    216,
                    319
                ],
                "ABCSeries": [
                    562,
                    692,
                    220,
                    415
                ],
                "table.append": [
                    664,
                    673,
                    223
                ],
                "Series": [
                    348,
                    367,
                    405,
                    223
                ],
                "marginal_result_set": [
                    226,
                    237,
                    238,
                    239,
                    243,
                    246,
                    247,
                    248
                ],
                "_generate_marginal_results": [
                    226
                ],
                "cols": [
                    231,
                    359,
                    265,
                    266,
                    360,
                    364,
                    428,
                    430,
                    402,
                    403,
                    244,
                    311,
                    380,
                    317,
                    382,
                    375
                ],
                "tuple": [
                    438,
                    237,
                    246
                ],
                "result": [
                    388,
                    262,
                    264,
                    265,
                    267,
                    395,
                    397,
                    271,
                    272,
                    273,
                    399,
                    275,
                    405,
                    407,
                    351,
                    354,
                    356,
                    239,
                    367,
                    369,
                    248,
                    250
                ],
                "margin_keys": [
                    357,
                    389,
                    396,
                    239,
                    400,
                    369,
                    341,
                    407,
                    248,
                    377,
                    314,
                    252,
                    349
                ],
                "row_margin": [
                    256,
                    260,
                    360,
                    361,
                    365,
                    239,
                    367,
                    369,
                    403,
                    405,
                    407,
                    248,
                    250,
                    254
                ],
                "_generate_marginal_results_without_values": [
                    243
                ],
                "row_margin.reindex": [
                    250
                ],
                "result.columns": [
                    250,
                    405,
                    367
                ],
                "k": [
                    256,
                    288,
                    290,
                    285,
                    292,
                    282,
                    252,
                    253,
                    254,
                    287
                ],
                "margin_dummy": [
                    272,
                    266,
                    267,
                    260
                ],
                "T": [
                    260
                ],
                "DataFrame": [
                    578,
                    260
                ],
                "row_names": [
                    273,
                    262
                ],
                "result.index.names": [
                    273,
                    262
                ],
                "result.index": [
                    273,
                    262,
                    271
                ],
                "set": [
                    264
                ],
                "result.dtypes": [
                    264
                ],
                "result.select_dtypes": [
                    265
                ],
                "astype": [
                    266
                ],
                "result.append": [
                    272,
                    267
                ],
                "result.index._to_safe_for_reshape": [
                    271
                ],
                "items": [
                    282
                ],
                "dict": [
                    286
                ],
                "data.index": [
                    297,
                    433
                ],
                "table_pieces": [
                    340,
                    313,
                    347,
                    348,
                    351
                ],
                "margin": [
                    320,
                    385,
                    387,
                    392,
                    329,
                    394,
                    338,
                    343,
                    348
                ],
                "agg": [
                    320,
                    360
                ],
                "groupby": [
                    320,
                    385,
                    403,
                    360
                ],
                "cat_axis": [
                    321,
                    323,
                    334,
                    335,
                    344,
                    345,
                    351
                ],
                "piece": [
                    323,
                    327,
                    329,
                    333,
                    334,
                    338,
                    340,
                    345,
                    347
                ],
                "table.groupby": [
                    345,
                    323
                ],
                "all_key": [
                    386,
                    387,
                    324,
                    389,
                    329,
                    393,
                    394,
                    396,
                    338,
                    341,
                    346,
                    348,
                    349
                ],
                "_all_key": [
                    393,
                    346,
                    324,
                    386
                ],
                "piece.copy": [
                    327
                ],
                "piece.set_axis": [
                    333
                ],
                "_to_safe_for_reshape": [
                    334
                ],
                "piece._get_axis": [
                    334
                ],
                "table_pieces.append": [
                    347,
                    340,
                    348
                ],
                "margin_keys.append": [
                    396,
                    349,
                    341,
                    389
                ],
                "row_margin.stack": [
                    361
                ],
                "new_order": [
                    364,
                    365
                ],
                "row_margin.index": [
                    365
                ],
                "row_margin.index.reorder_levels": [
                    365
                ],
                "np.nan": [
                    405,
                    367
                ],
                "np": [
                    415,
                    405,
                    367
                ],
                "apply": [
                    392,
                    385,
                    403
                ],
                "by": [
                    416,
                    418,
                    420,
                    421,
                    411,
                    412,
                    414,
                    415
                ],
                "is_scalar": [
                    414
                ],
                "np.ndarray": [
                    415
                ],
                "Index": [
                    415
                ],
                "hasattr": [
                    416
                ],
                "append": [
                    429,
                    430
                ],
                "indexed": [
                    440,
                    444,
                    445,
                    430
                ],
                "data.set_index": [
                    430
                ],
                "data._constructor": [
                    440
                ],
                "data._constructor_sliced": [
                    444
                ],
                "indexed.unstack": [
                    445
                ],
                "bool": [
                    457,
                    605,
                    617,
                    607
                ],
                "com.maybe_make_list": [
                    555,
                    556
                ],
                "com": [
                    555,
                    556
                ],
                "rownames": [
                    588,
                    558,
                    567
                ],
                "_get_names": [
                    558,
                    559
                ],
                "colnames": [
                    568,
                    589,
                    559
                ],
                "common_idx": [
                    561,
                    578,
                    564
                ],
                "pass_objs": [
                    562,
                    563,
                    564
                ],
                "get_objs_combined_axis": [
                    564
                ],
                "Dict": [
                    617,
                    566
                ],
                "data.update": [
                    568,
                    567
                ],
                "zip": [
                    568,
                    567
                ],
                "df": [
                    578,
                    580,
                    586,
                    583
                ],
                "kwargs": [
                    584,
                    593,
                    581
                ],
                "df.pivot_table": [
                    586
                ],
                "normalize": [
                    610,
                    653,
                    656,
                    626,
                    597,
                    662,
                    599,
                    668,
                    607
                ],
                "_normalize": [
                    653,
                    598
                ],
                "axis_subs": [
                    608,
                    610
                ],
                "normalizers": [
                    617,
                    626,
                    623
                ],
                "Callable": [
                    617
                ],
                "sum": [
                    618
                ],
                "x.sum": [
                    618,
                    619,
                    620
                ],
                "x.div": [
                    620
                ],
                "f": [
                    626,
                    630
                ],
                "table_index": [
                    666,
                    635,
                    676
                ],
                "table_columns": [
                    660,
                    636,
                    677
                ],
                "table.iloc": [
                    640,
                    641,
                    646,
                    647,
                    650
                ],
                "column_margin": [
                    672,
                    646,
                    657,
                    658,
                    669
                ],
                "index_margin": [
                    673,
                    647,
                    663,
                    664,
                    670,
                    671
                ],
                "column_margin.sum": [
                    657,
                    669
                ],
                "index_margin.sum": [
                    670,
                    663
                ],
                "index_margin.loc": [
                    671
                ],
                "names": [
                    689,
                    690,
                    693,
                    695,
                    697,
                    699,
                    700,
                    702
                ],
                "arr": [
                    691,
                    692,
                    693
                ],
                "enumerate": [
                    691
                ],
                "arrs": [
                    697,
                    691
                ],
                "arr.name": [
                    692,
                    693
                ],
                "names.append": [
                    693,
                    695
                ],
                "prefix": [
                    695
                ],
                "AssertionError": [
                    698
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    19
                ],
                "index": [
                    160,
                    39,
                    555,
                    428,
                    429,
                    558,
                    432,
                    49,
                    177,
                    433,
                    435,
                    436,
                    562,
                    567,
                    441,
                    444,
                    63,
                    124,
                    126
                ],
                "_convert_by": [
                    40,
                    39
                ],
                "columns": [
                    161,
                    40,
                    265,
                    428,
                    556,
                    559,
                    177,
                    50,
                    562,
                    436,
                    568,
                    445,
                    63
                ],
                "aggfunc": [
                    385,
                    392,
                    403,
                    284,
                    285,
                    286,
                    287,
                    288,
                    162,
                    290,
                    292,
                    297,
                    42,
                    45,
                    570,
                    573,
                    320,
                    584,
                    206,
                    101,
                    232,
                    360,
                    244
                ],
                "pieces": [
                    58,
                    43,
                    61
                ],
                "keys": [
                    100,
                    44,
                    80,
                    93,
                    59,
                    61,
                    126,
                    63
                ],
                "func": [
                    59,
                    52,
                    45
                ],
                "table": [
                    640,
                    641,
                    387,
                    132,
                    388,
                    646,
                    135,
                    647,
                    137,
                    394,
                    139,
                    395,
                    141,
                    650,
                    143,
                    399,
                    145,
                    400,
                    147,
                    148,
                    653,
                    658,
                    151,
                    659,
                    660,
                    664,
                    665,
                    156,
                    157,
                    666,
                    672,
                    673,
                    675,
                    676,
                    677,
                    172,
                    173,
                    46,
                    175,
                    685,
                    178,
                    181,
                    182,
                    184,
                    58,
                    323,
                    202,
                    203,
                    586,
                    208,
                    210,
                    211,
                    598,
                    599,
                    345,
                    602,
                    220,
                    223,
                    227,
                    356,
                    357,
                    631,
                    242,
                    244,
                    630,
                    119,
                    120,
                    635,
                    636
                ],
                "pivot_table": [
                    46
                ],
                "data": [
                    385,
                    392,
                    403,
                    282,
                    155,
                    158,
                    297,
                    430,
                    47,
                    433,
                    435,
                    436,
                    566,
                    567,
                    440,
                    441,
                    568,
                    444,
                    320,
                    578,
                    76,
                    206,
                    84,
                    88,
                    89,
                    92,
                    100,
                    228,
                    360,
                    112,
                    113,
                    244,
                    117
                ],
                "values": [
                    280,
                    282,
                    159,
                    427,
                    175,
                    48,
                    438,
                    441,
                    570,
                    444,
                    573,
                    320,
                    65,
                    67,
                    579,
                    69,
                    583,
                    72,
                    75,
                    206,
                    80,
                    220,
                    92,
                    95,
                    225,
                    98,
                    229,
                    360,
                    110
                ],
                "fill_value": [
                    165,
                    51,
                    150,
                    151,
                    250
                ],
                "margins": [
                    614,
                    590,
                    633,
                    53,
                    599,
                    153
                ],
                "dropna": [
                    163,
                    102,
                    134,
                    592,
                    181,
                    54,
                    154
                ],
                "margins_name": [
                    640,
                    641,
                    644,
                    671,
                    164,
                    297,
                    55,
                    317,
                    198,
                    201,
                    203,
                    206,
                    591,
                    211,
                    599,
                    216,
                    218,
                    223,
                    235,
                    244,
                    381,
                    382
                ],
                "observed": [
                    320,
                    385,
                    323,
                    100,
                    360,
                    233,
                    392,
                    403,
                    244,
                    56,
                    345
                ],
                "pieces.append": [
                    58
                ],
                "keys.append": [
                    59
                ],
                "concat": [
                    672,
                    658,
                    61,
                    351
                ],
                "values_passed": [
                    170,
                    65,
                    66
                ],
                "is_list_like": [
                    67,
                    438
                ],
                "values_multi": [
                    171,
                    68,
                    71
                ],
                "i": [
                    129,
                    75,
                    76,
                    77,
                    691,
                    695,
                    126,
                    127
                ],
                "to_filter": [
                    88,
                    89,
                    85,
                    79
                ],
                "x": [
                    618,
                    619,
                    620,
                    80,
                    81,
                    82,
                    562,
                    84,
                    85
                ],
                "Grouper": [
                    81,
                    415
                ],
                "x.key": [
                    82
                ],
                "to_filter.append": [
                    85
                ],
                "data.columns": [
                    88,
                    92
                ],
                "key": [
                    223,
                    323,
                    260,
                    324,
                    329,
                    346,
                    338,
                    214,
                    216,
                    345,
                    218,
                    317,
                    348,
                    93,
                    95
                ],
                "values.drop": [
                    95
                ],
                "grouped": [
                    100,
                    101
                ],
                "data.groupby": [
                    392,
                    100
                ],
                "agged": [
                    132,
                    101,
                    102,
                    103,
                    114,
                    115,
                    117,
                    119,
                    124,
                    127
                ],
                "grouped.agg": [
                    101
                ],
                "ABCDataFrame": [
                    102,
                    242,
                    147,
                    562,
                    181
                ],
                "agged.columns": [
                    102
                ],
                "agged.dropna": [
                    103
                ],
                "v": [
                    288,
                    290,
                    292,
                    110,
                    112,
                    113,
                    114,
                    115,
                    117,
                    282,
                    285
                ],
                "is_integer_dtype": [
                    113,
                    115
                ],
                "maybe_downcast_to_dtype": [
                    117
                ],
                "dtype": [
                    264,
                    265,
                    266,
                    117
                ],
                "table.index.nlevels": [
                    120,
                    135
                ],
                "table.index": [
                    676,
                    135,
                    137,
                    202,
                    203,
                    120,
                    666,
                    635
                ],
                "index_names": [
                    128,
                    124
                ],
                "agged.index.names": [
                    124,
                    127
                ],
                "agged.index": [
                    124,
                    127
                ],
                "to_unstack": [
                    129,
                    131,
                    132,
                    125
                ],
                "name": [
                    128,
                    641,
                    640,
                    131,
                    127
                ],
                "to_unstack.append": [
                    129,
                    131
                ],
                "agged.unstack": [
                    132
                ],
                "m": [
                    136,
                    145,
                    139,
                    142
                ],
                "MultiIndex.from_arrays": [
                    136,
                    436,
                    142
                ],
                "MultiIndex": [
                    136,
                    436,
                    142
                ],
                "cartesian_product": [
                    137,
                    143
                ],
                "table.index.levels": [
                    137
                ],
                "table.index.names": [
                    137,
                    202
                ],
                "table.reindex": [
                    145,
                    139
                ],
                "table.columns.nlevels": [
                    141,
                    173
                ],
                "table.columns": [
                    357,
                    677,
                    173,
                    141,
                    143,
                    400,
                    210,
                    211,
                    660,
                    636
                ],
                "table.columns.levels": [
                    143
                ],
                "table.columns.names": [
                    210,
                    143
                ],
                "table.sort_index": [
                    148
                ],
                "table.fillna": [
                    675,
                    659,
                    631,
                    151,
                    665
                ],
                "data.notna": [
                    155
                ],
                "_add_margins": [
                    156
                ],
                "table.empty": [
                    172
                ],
                "table.T": [
                    178
                ],
                "table.dropna": [
                    182
                ],
                "Substitution": [
                    424,
                    25
                ],
                "Appender": [
                    425,
                    26
                ],
                "_shared_docs": [
                    425,
                    26
                ],
                "Union": [
                    617,
                    188,
                    214
                ],
                "msg": [
                    201,
                    212,
                    204
                ],
                "level": [
                    210,
                    202,
                    203,
                    211
                ],
                "table.index.get_level_values": [
                    203
                ],
                "grand_margin": [
                    256,
                    288,
                    290,
                    292,
                    295,
                    234,
                    206,
                    343,
                    281,
                    285,
                    254,
                    223
                ],
                "_compute_grand_margin": [
                    206
                ],
                "table.ndim": [
                    208
                ],
                "table.columns.get_level_values": [
                    211
                ],
                "Tuple": [
                    214
                ],
                "rows": [
                    320,
                    353,
                    384,
                    385,
                    230,
                    244,
                    215,
                    216,
                    319
                ],
                "ABCSeries": [
                    562,
                    692,
                    220,
                    415
                ],
                "table.append": [
                    664,
                    673,
                    223
                ],
                "Series": [
                    348,
                    367,
                    405,
                    223
                ],
                "marginal_result_set": [
                    226,
                    237,
                    238,
                    239,
                    243,
                    246,
                    247,
                    248
                ],
                "_generate_marginal_results": [
                    226
                ],
                "cols": [
                    231,
                    359,
                    265,
                    266,
                    360,
                    364,
                    428,
                    430,
                    402,
                    403,
                    244,
                    311,
                    380,
                    317,
                    382,
                    375
                ],
                "result": [
                    388,
                    262,
                    264,
                    265,
                    267,
                    395,
                    397,
                    271,
                    272,
                    273,
                    399,
                    275,
                    405,
                    407,
                    351,
                    354,
                    356,
                    239,
                    367,
                    369,
                    248,
                    250
                ],
                "margin_keys": [
                    357,
                    389,
                    396,
                    239,
                    400,
                    369,
                    341,
                    407,
                    248,
                    377,
                    314,
                    252,
                    349
                ],
                "row_margin": [
                    256,
                    260,
                    360,
                    361,
                    365,
                    239,
                    367,
                    369,
                    403,
                    405,
                    407,
                    248,
                    250,
                    254
                ],
                "_generate_marginal_results_without_values": [
                    243
                ],
                "row_margin.reindex": [
                    250
                ],
                "result.columns": [
                    250,
                    405,
                    367
                ],
                "k": [
                    256,
                    288,
                    290,
                    285,
                    292,
                    282,
                    252,
                    253,
                    254,
                    287
                ],
                "margin_dummy": [
                    272,
                    266,
                    267,
                    260
                ],
                "T": [
                    260
                ],
                "DataFrame": [
                    578,
                    260
                ],
                "row_names": [
                    273,
                    262
                ],
                "result.index.names": [
                    273,
                    262
                ],
                "result.index": [
                    273,
                    262,
                    271
                ],
                "result.dtypes": [
                    264
                ],
                "result.select_dtypes": [
                    265
                ],
                "astype": [
                    266
                ],
                "result.append": [
                    272,
                    267
                ],
                "result.index._to_safe_for_reshape": [
                    271
                ],
                "items": [
                    282
                ],
                "data.index": [
                    297,
                    433
                ],
                "table_pieces": [
                    340,
                    313,
                    347,
                    348,
                    351
                ],
                "margin": [
                    320,
                    385,
                    387,
                    392,
                    329,
                    394,
                    338,
                    343,
                    348
                ],
                "agg": [
                    320,
                    360
                ],
                "groupby": [
                    320,
                    385,
                    403,
                    360
                ],
                "cat_axis": [
                    321,
                    323,
                    334,
                    335,
                    344,
                    345,
                    351
                ],
                "piece": [
                    323,
                    327,
                    329,
                    333,
                    334,
                    338,
                    340,
                    345,
                    347
                ],
                "table.groupby": [
                    345,
                    323
                ],
                "all_key": [
                    386,
                    387,
                    324,
                    389,
                    329,
                    393,
                    394,
                    396,
                    338,
                    341,
                    346,
                    348,
                    349
                ],
                "_all_key": [
                    393,
                    346,
                    324,
                    386
                ],
                "piece.copy": [
                    327
                ],
                "piece.set_axis": [
                    333
                ],
                "_to_safe_for_reshape": [
                    334
                ],
                "piece._get_axis": [
                    334
                ],
                "table_pieces.append": [
                    347,
                    340,
                    348
                ],
                "margin_keys.append": [
                    396,
                    349,
                    341,
                    389
                ],
                "row_margin.stack": [
                    361
                ],
                "new_order": [
                    364,
                    365
                ],
                "row_margin.index": [
                    365
                ],
                "row_margin.index.reorder_levels": [
                    365
                ],
                "np.nan": [
                    405,
                    367
                ],
                "np": [
                    415,
                    405,
                    367
                ],
                "apply": [
                    392,
                    385,
                    403
                ],
                "by": [
                    416,
                    418,
                    420,
                    421,
                    411,
                    412,
                    414,
                    415
                ],
                "is_scalar": [
                    414
                ],
                "np.ndarray": [
                    415
                ],
                "Index": [
                    415
                ],
                "append": [
                    429,
                    430
                ],
                "indexed": [
                    440,
                    444,
                    445,
                    430
                ],
                "data.set_index": [
                    430
                ],
                "data._constructor": [
                    440
                ],
                "data._constructor_sliced": [
                    444
                ],
                "indexed.unstack": [
                    445
                ],
                "com.maybe_make_list": [
                    555,
                    556
                ],
                "com": [
                    555,
                    556
                ],
                "rownames": [
                    588,
                    558,
                    567
                ],
                "_get_names": [
                    558,
                    559
                ],
                "colnames": [
                    568,
                    589,
                    559
                ],
                "common_idx": [
                    561,
                    578,
                    564
                ],
                "pass_objs": [
                    562,
                    563,
                    564
                ],
                "get_objs_combined_axis": [
                    564
                ],
                "Dict": [
                    617,
                    566
                ],
                "data.update": [
                    568,
                    567
                ],
                "df": [
                    578,
                    580,
                    586,
                    583
                ],
                "kwargs": [
                    584,
                    593,
                    581
                ],
                "df.pivot_table": [
                    586
                ],
                "normalize": [
                    610,
                    653,
                    656,
                    626,
                    597,
                    662,
                    599,
                    668,
                    607
                ],
                "_normalize": [
                    653,
                    598
                ],
                "axis_subs": [
                    608,
                    610
                ],
                "normalizers": [
                    617,
                    626,
                    623
                ],
                "Callable": [
                    617
                ],
                "x.sum": [
                    618,
                    619,
                    620
                ],
                "x.div": [
                    620
                ],
                "f": [
                    626,
                    630
                ],
                "table_index": [
                    666,
                    635,
                    676
                ],
                "table_columns": [
                    660,
                    636,
                    677
                ],
                "table.iloc": [
                    640,
                    641,
                    646,
                    647,
                    650
                ],
                "column_margin": [
                    672,
                    646,
                    657,
                    658,
                    669
                ],
                "index_margin": [
                    673,
                    647,
                    663,
                    664,
                    670,
                    671
                ],
                "column_margin.sum": [
                    657,
                    669
                ],
                "index_margin.sum": [
                    670,
                    663
                ],
                "index_margin.loc": [
                    671
                ],
                "names": [
                    689,
                    690,
                    693,
                    695,
                    697,
                    699,
                    700,
                    702
                ],
                "arr": [
                    691,
                    692,
                    693
                ],
                "arrs": [
                    697,
                    691
                ],
                "arr.name": [
                    692,
                    693
                ],
                "names.append": [
                    693,
                    695
                ],
                "prefix": [
                    695
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_119/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_margins_casted_to_float",
                "test_function_code": "    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n\n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 2] are different  Attribute \"dtype\" are different [left]:  int64 [right]: float64",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1231d10a0>\nobserved = True\n\n    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n    \n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 2] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  int64\nE       [right]: float64\n\npandas/tests/reshape/test_pivot.py:1675: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_119/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_margins_casted_to_float",
                "test_function_code": "    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n\n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 2] are different  Attribute \"dtype\" are different [left]:  int64 [right]: float64",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x12350a400>\nobserved = False\n\n    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n    \n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 2] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  int64\nE       [right]: float64\n\npandas/tests/reshape/test_pivot.py:1675: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_119/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_margins_casted_to_float",
                "test_function_code": "    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n\n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 2] are different  Attribute \"dtype\" are different [left]:  int64 [right]: float64",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1234d4790>\nobserved = None\n\n    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n    \n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 2] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  int64\nE       [right]: float64\n\npandas/tests/reshape/test_pivot.py:1675: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}