{
    "pandas": [
        {
            "bugID": 119,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 187,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def _add_margins(\n    table: Union[Series, DataFrame],\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: str = \"All\",\n    fill_value=None,\n):\n    from typing import Union, Tuple\n    from pandas import Series, DataFrame, ABCSeries, ABCDataFrame\n    import pandas as pd\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n    \n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    if isinstance(table, DataFrame):\n        for level in table.index.names:\n            if margins_name in table.index.get_level_values(level):\n                raise ValueError(msg)\n    \n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n    \n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n    \n    if tables.ndim == 2 and not values:\n        margin_series = pd.Series(grand_margin[margins_name], name=margins_name)\n        return table.append(margin_series).sort_index()\n    \n    marginal_result_set = _generate_marginal_results(\n        table,\n        data,\n        values,\n        rows,\n        cols,\n        aggfunc,\n        observed,\n        grand_margin,\n        margins_name,\n    )\n    if not isinstance(marginal_result_set, tuple):\n        return marginal_result_set\n    result, margin_keys, row_margin = marginal_result_set\n    \n    if row_margin.size == 0:\n        row_margin = pd.Series(row_margin, index=result.columns)\n    else:\n        row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n    \n    for k in margin_keys:\n        if isinstance(k, str):\n            row_margin[k] = grand_margin[k]\n        else:\n            row_margin[k] = grand_margin[k[0]]\n    \n    margin_dummy = pd.DataFrame(row_margin).T\n    margin_dummy.index = [margins_name]\n    \n    result = result.append(margin_dummy)\n    result.index.names = table.index.names\n    result = result.sort_index()\n    \n    return result"
        }
    ]
}