{
    "pandas": [
        {
            "bugID": 119,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 187,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def _add_margins(table, data, values, rows, cols, aggfunc, observed=None, margins_name=\"All\", fill_value=None):\n    from pandas import DataFrame, Series\n    from pandas.api.types import is_series_like\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n    \n    table_index_names = set(table.index.names) if table.ndim == 2 else set(table.index.names + [None])\n    table_columns_names = table.columns.names if table.ndim == 2 else (None, table.columns.names)\n    \n    if margins_name in table_index_names or margins_name in table_columns_names:\n        raise ValueError('Conflicting name \"{name}\" in margins'.format(name=margins_name))\n    \n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n    \n    if is_series_like(table):\n        result = grand_margin[margins_name]\n    elif values:\n        result, _, row_margin = _generate_marginal_results(table, data, values, rows, cols, aggfunc, observed, grand_margin, margins_name)\n        row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n        for k in result.columns:\n            row_margin[k] = grand_margin[k] if k in grand_margin else grand_margin.get(k[1], fill_value)\n        margin_dummy = DataFrame(row_margin, columns=[margins_name]).T\n        result = result.append(margin_dummy)\n    else:\n        result, _, row_margin = _generate_marginal_results_without_values(table, data, rows, cols, aggfunc, observed, margins_name)\n        row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n        for k in result.columns:\n            row_margin[k] = grand_margin[k] if k in grand_margin else grand_margin.get(k[1], fill_value)\n        margin_dummy = DataFrame(row_margin, columns=[margins_name]).T\n        result = result.append(margin_dummy)\n    \n    return result"
        }
    ]
}