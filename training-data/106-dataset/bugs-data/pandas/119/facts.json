{
    "1.1.1": "def _add_margins(\n    table: Union[\"Series\", \"DataFrame\"],\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: str = \"All\",\n    fill_value=None,\n):\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n\n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    for level in table.index.names:\n        if margins_name in table.index.get_level_values(level):\n            raise ValueError(msg)\n\n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n\n    if table.ndim == 2:\n        # i.e. DataFramae\n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n\n    key: Union[str, Tuple[str, ...]]\n    if len(rows) > 1:\n        key = (margins_name,) + (\"\",) * (len(rows) - 1)\n    else:\n        key = margins_name\n\n    if not values and isinstance(table, ABCSeries):\n        # If there are no values and the table is a series, then there is only\n        # one column in the data. Compute grand margin and return it.\n        return table.append(Series({key: grand_margin[margins_name]}))\n\n    elif values:\n        marginal_result_set = _generate_marginal_results(\n            table,\n            data,\n            values,\n            rows,\n            cols,\n            aggfunc,\n            observed,\n            grand_margin,\n            margins_name,\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n    else:\n        # no values, and table is a DataFrame\n        assert isinstance(table, ABCDataFrame)\n        marginal_result_set = _generate_marginal_results_without_values(\n            table, data, rows, cols, aggfunc, observed, margins_name\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n\n    row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n    # populate grand margin\n    for k in margin_keys:\n        if isinstance(k, str):\n            row_margin[k] = grand_margin[k]\n        else:\n            row_margin[k] = grand_margin[k[0]]\n\n    from pandas import DataFrame\n\n    margin_dummy = DataFrame(row_margin, columns=[key]).T\n\n    row_names = result.index.names\n    try:\n        for dtype in set(result.dtypes):\n            cols = result.select_dtypes([dtype]).columns\n            margin_dummy[cols] = margin_dummy[cols].astype(dtype)\n        result = result.append(margin_dummy)\n    except TypeError:\n\n        # we cannot reshape, so coerce the axis\n        result.index = result.index._to_safe_for_reshape()\n        result = result.append(margin_dummy)\n    result.index.names = row_names\n\n    return result\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/pandas_119/pandas/core/reshape/pivot.py",
    "1.3.2": [
        "_compute_grand_margin(data, values, aggfunc, margins_name: str='All')",
        "_generate_marginal_results(table, data, values, rows, cols, aggfunc, observed, grand_margin, margins_name: str='All')",
        "_generate_marginal_results_without_values(table: 'DataFrame', data, rows, cols, aggfunc, observed, margins_name: str='All')"
    ],
    "1.4.1": [
        "    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n\n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n        tm.assert_frame_equal(result, expected)",
        "    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n\n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n        tm.assert_frame_equal(result, expected)",
        "    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n\n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/pandas_119/pandas/tests/reshape/test_pivot.py",
        "/Volumes/SSD2T/bgp_envs/repos/pandas_119/pandas/tests/reshape/test_pivot.py",
        "/Volumes/SSD2T/bgp_envs/repos/pandas_119/pandas/tests/reshape/test_pivot.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Attributes of DataFrame.iloc[:, 2] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  int64\nE       [right]: float64"
        ],
        [
            "E       AssertionError: Attributes of DataFrame.iloc[:, 2] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  int64\nE       [right]: float64"
        ],
        [
            "E       AssertionError: Attributes of DataFrame.iloc[:, 2] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  int64\nE       [right]: float64"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1231d10a0>\nobserved = True\n\n    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n    \n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n>       tm.assert_frame_equal(result, expected)",
            "\npandas/tests/reshape/test_pivot.py:1675: AssertionError"
        ],
        [
            "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x12350a400>\nobserved = False\n\n    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n    \n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n>       tm.assert_frame_equal(result, expected)",
            "\npandas/tests/reshape/test_pivot.py:1675: AssertionError"
        ],
        [
            "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1234d4790>\nobserved = None\n\n    def test_margins_casted_to_float(self, observed):\n        # GH 24893\n        df = pd.DataFrame(\n            {\n                \"A\": [2, 4, 6, 8],\n                \"B\": [1, 4, 5, 8],\n                \"C\": [1, 3, 4, 6],\n                \"D\": [\"X\", \"X\", \"Y\", \"Y\"],\n            }\n        )\n    \n        result = pd.pivot_table(df, index=\"D\", margins=True)\n        expected = pd.DataFrame(\n            {\"A\": [3, 7, 5], \"B\": [2.5, 6.5, 4.5], \"C\": [2, 5, 3.5]},\n            index=pd.Index([\"X\", \"Y\", \"All\"], name=\"D\"),\n        )\n>       tm.assert_frame_equal(result, expected)",
            "\npandas/tests/reshape/test_pivot.py:1675: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "margins_name": "'All'",
                "table.index": "Index(['X', 'Y'], dtype='object', name='D')",
                "table": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                "data": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                "values": "['A', 'B', 'C']",
                "aggfunc": "'mean'",
                "table.ndim": "2",
                "table.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "rows": "['D']",
                "table.append": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                "cols": "[]",
                "observed": "True"
            },
            {
                "msg": "'Conflicting name \"All\" in margins'",
                "level": "'D'",
                "grand_margin": "{'A': 5.0, 'B': 4.5, 'C': 3.5}",
                "key": "'All'",
                "marginal_result_set": "(   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5, Index(['A', 'B', 'C'], dtype='object'), A   NaN\nB   NaN\nC   NaN\ndtype: float64)",
                "cols": "Index(['A', 'C'], dtype='object')",
                "result": "     A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3",
                "margin_keys": "Index(['A', 'B', 'C'], dtype='object')",
                "row_margin": "A    5.0\nB    4.5\nC    3.5\ndtype: float64",
                "row_margin.reindex": "<bound method Series.reindex of A    5.0\nB    4.5\nC    3.5\ndtype: float64>",
                "result.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "k": "'C'",
                "margin_dummy": "     A    B  C\nAll  5  4.5  3",
                "DataFrame": "<class 'pandas.core.frame.DataFrame'>",
                "row_names": "FrozenList(['D'])",
                "result.index": "Index(['X', 'Y', 'All'], dtype='object', name='D')",
                "dtype": "dtype('int64')",
                "result.dtypes": "A      int64\nB    float64\nC      int64\ndtype: object",
                "result.select_dtypes": "<bound method DataFrame.select_dtypes of      A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3>",
                "result.append": "<bound method DataFrame.append of      A    B  C\nD             \nX    3  2.5  2\nY    7  6.5  5\nAll  5  4.5  3>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "margins_name": "str",
                "table.index": "Index",
                "table": "DataFrame",
                "data": "DataFrame",
                "values": "list",
                "aggfunc": "str",
                "table.ndim": "int",
                "table.columns": "Index",
                "rows": "list",
                "table.append": "method",
                "cols": "list",
                "observed": "bool"
            },
            {
                "msg": "str",
                "level": "str",
                "grand_margin": "dict",
                "key": "str",
                "marginal_result_set": "tuple",
                "cols": "Index",
                "result": "DataFrame",
                "margin_keys": "Index",
                "row_margin": "Series",
                "row_margin.reindex": "method",
                "result.columns": "Index",
                "k": "str",
                "margin_dummy": "DataFrame",
                "DataFrame": "type",
                "row_names": "FrozenList",
                "result.index": "Index",
                "dtype": "dtype",
                "result.dtypes": "Series",
                "result.select_dtypes": "method",
                "result.append": "method"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "margins_name": "'All'",
                "table.index": "Index(['X', 'Y'], dtype='object', name='D')",
                "table": "   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5",
                "data": "   A  B  C  D\n0  2  1  1  X\n1  4  4  3  X\n2  6  5  4  Y\n3  8  8  6  Y",
                "values": "['A', 'B', 'C']",
                "aggfunc": "'mean'",
                "table.ndim": "2",
                "table.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "rows": "['D']",
                "table.append": "<bound method DataFrame.append of    A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5>",
                "cols": "[]",
                "observed": "True"
            },
            {
                "msg": "'Conflicting name \"All\" in margins'",
                "level": "'D'",
                "grand_margin": "{'A': 5.0, 'B': 4.5, 'C': 3.5}",
                "key": "'All'",
                "marginal_result_set": "(   A    B  C\nD           \nX  3  2.5  2\nY  7  6.5  5, Index(['A', 'B', 'C'], dtype='object'), A   NaN\nB   NaN\nC   NaN\ndtype: float64)",
                "cols": "Index(['A', 'C'], dtype='object')",
                "result": "     A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5",
                "margin_keys": "Index(['A', 'B', 'C'], dtype='object')",
                "row_margin": "A    5.0\nB    4.5\nC    3.5\ndtype: float64",
                "row_margin.reindex": "<bound method Series.reindex of A    5.0\nB    4.5\nC    3.5\ndtype: float64>",
                "result.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "k": "'C'",
                "margin_dummy": "     A    B    C\nAll  5  4.5  3.5",
                "DataFrame": "<class 'pandas.core.frame.DataFrame'>",
                "row_names": "FrozenList(['D'])",
                "result.index": "Index(['X', 'Y', 'All'], dtype='object', name='D')",
                "dtype": "dtype('int64')",
                "result.dtypes": "A      int64\nB    float64\nC    float64\ndtype: object",
                "result.select_dtypes": "<bound method DataFrame.select_dtypes of      A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5>",
                "result.append": "<bound method DataFrame.append of      A    B    C\nD               \nX    3  2.5  2.0\nY    7  6.5  5.0\nAll  5  4.5  3.5>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "margins_name": "str",
                "table.index": "Index",
                "table": "DataFrame",
                "data": "DataFrame",
                "values": "list",
                "aggfunc": "str",
                "table.ndim": "int",
                "table.columns": "Index",
                "rows": "list",
                "table.append": "method",
                "cols": "list",
                "observed": "bool"
            },
            {
                "msg": "str",
                "level": "str",
                "grand_margin": "dict",
                "key": "str",
                "marginal_result_set": "tuple",
                "cols": "Index",
                "result": "DataFrame",
                "margin_keys": "Index",
                "row_margin": "Series",
                "row_margin.reindex": "method",
                "result.columns": "Index",
                "k": "str",
                "margin_dummy": "DataFrame",
                "DataFrame": "type",
                "row_names": "FrozenList",
                "result.index": "Index",
                "dtype": "dtype",
                "result.dtypes": "Series",
                "result.select_dtypes": "method",
                "result.append": "method"
            }
        ]
    ],
    "3.1.1": [
        "pivot_table margins=True default aggfunc='mean' does integer division\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nCode\n\ndf = pd.DataFrame({'State':['Texas', 'Texas', 'Florida', 'Florida'], \n                   'a':[4,5,1,3], 'b':[6,10,3,11]},index=['one','two','three','four'])\npd.pivot_table(df,index='State',margins=True)\nOutput\n\n\ta\tb\nState\t\t\nFlorida\t2.00\t7\nTexas\t4.50\t8\nAll\t3.25\t7\nProblem description\nThe margin value for the b column is 7 (calculated from default aggfunc mean of 7+8) when i expect 7.5.\n\nThis issue seems to be opposite of issue #17013 which complains of integers becoming floats\n\nExpected Output\nP.s I changed 6 to 6.0 in to create desired output.\nCode\n\ndf = pd.DataFrame({'State':['Texas', 'Texas', 'Florida', 'Florida'], \n                   'a':[4,5,1,3], 'b':[6.0,10,3,11]},index=['one','two','three','four'])\npd.pivot_table(df,index='State',margins=True)\nDesired Output (For the margin value only, i don't necessarily require 7, 8 to become 7.0, 8.0)\n\n\ta\tb\nState\t\t\nFlorida\t2.00\t7.0\nTexas\t4.50\t8.0\nAll\t3.25\t7.5\n\n"
    ]
}