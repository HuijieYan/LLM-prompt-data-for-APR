{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    import numpy as np\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not np.can_cast(lk.dtype, rk.dtype) and not np.can_cast(rk.dtype, lk.dtype):\n            if np.issubdtype(lk.dtype, np.integer) and np.issubdtype(rk.dtype, np.integer):\n                msg = f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, must be the same type\"\n            else:\n                msg = f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, both sides category, but not equal ones\"\n            raise MergeError(msg)\n    \n    # validate tolerance; ensure it is compatible with the type of the keys\n    if self.tolerance is not None:\n        lt = self.left if self.left_index else left_join_keys[-1]\n        tolerance_type = type(self.tolerance)\n        key_type = left_join_keys[-1].dtype\n        if tolerance_type != key_type:\n            msg = f\"incompatible tolerance {self.tolerance}, must be compat with type {key_type}\"\n            raise MergeError(msg)\n        if self.tolerance < 0:\n            raise MergeError(\"tolerance must be positive\")\n    \n    # validate allow_exact_matches\n    if not isinstance(self.allow_exact_matches, bool):\n        raise MergeError(f\"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\")\n    \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}