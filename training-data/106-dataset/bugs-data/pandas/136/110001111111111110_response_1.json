{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n\n    left_join_keys, right_join_keys, join_names = super()._get_merge_keys()\n    \n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, both sides category, but not equal ones\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            else:\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            raise MergeError(msg)\n    \n    if self.tolerance is not None:\n    \n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n    \n        msg = (\n            f\"incompatible tolerance {type(self.tolerance)}, must be compat \"\n            f\"with type {lt.dtype}\"\n        )\n    \n        if is_datetimelike(lt):\n            if not isinstance(self.tolerance, (datetime.timedelta, pd.Timedelta)):\n                raise MergeError(msg)\n            if self.tolerance < pd.Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif is_integer_dtype(lt):\n            if not np.issubdtype(type(self.tolerance), np.integer):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif is_float_dtype(lt):\n            if not np.issubdtype(type(self.tolerance), np.floating):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n    \n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n    \n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\"\n        raise MergeError(msg.format(self=self))\n    \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}