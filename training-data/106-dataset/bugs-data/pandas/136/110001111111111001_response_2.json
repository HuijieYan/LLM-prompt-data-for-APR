{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    # ... (omitted code) ...\n\n    # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n\n    if self.tolerance is not None:\n    \n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n    \n        msg = \"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n            tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n        )\n    \n        if is_datetimelike(lt):\n            if not isinstance(self.tolerance, (datetime.timedelta, pd.Timedelta)):\n                raise MergeError(msg)\n            if (isinstance(self.tolerance, pd.Timedelta) and self.tolerance.to_numpy() < 0) or (isinstance(self.tolerance, datetime.timedelta) and self.tolerance < datetime.timedelta(0)):\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif is_integer(lt):\n            if not is_integer(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif is_float(lt):\n            if not is_number(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n    \n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")"
        }
    ]
}