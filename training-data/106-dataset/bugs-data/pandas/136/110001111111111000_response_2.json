{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            # If join keys are both categorical, check if they are unordered but equal categories\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                for lk_category, rk_category in zip(lk, rk):\n                    if lk_category != rk_category:\n                        msg = \"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, both sides category, but not equal ones\".format(i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype))\n                        raise MergeError(msg)\n            else:\n                msg = \"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, must be the same type\".format(i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype))\n                raise MergeError(msg)\n    \n    # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n    if self.tolerance is not None:\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n    \n        # Validate that the type of tolerance is compatible with lt\n        msg = \"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(tolerance=type(self.tolerance), lkdtype=repr(lt.dtype))\n    \n        if is_datetimelike(lt):\n            if not isinstance(self.tolerance, datetime.timedelta):\n                raise MergeError(msg)\n            if self.tolerance < pd.Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif is_integer(lt):\n            if not isinstance(self.tolerance, int):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif is_number(lt):\n            if not isinstance(self.tolerance, (int, float)):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n    \n        else:\n            raise MergeError(\"key must be an integer, timestamp or float\")\n    \n    # validate allow_exact_matches\n    if not isinstance(self.allow_exact_matches, bool):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n    \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}