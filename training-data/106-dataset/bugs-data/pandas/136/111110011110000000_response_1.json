{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "/pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    \n    # note this function has side effects\n\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not pd.api.types.is_dtype_equal(lk.dtype, rk.dtype):\n            if pd.api.types.is_categorical_dtype(lk) and pd.api.types.is_categorical_dtype(rk):\n                # The generic error message is confusing for categoricals.\n                #\n                # In this function, the join keys include both the original\n                # ones of the merge_asof() call, and also the keys passed\n                # to its by= argument. Unordered but equal categories\n                # are not supported for the former, but will fail\n                # later with a ValueError, so we don't *need* to check\n                # for them here.\n                msg = (\n                    f\"incompatible merge keys [{i}] {lk.dtype} and \"\n                    f\"{rk.dtype}, both sides category, but not equal ones\"\n                )\n            else:\n                msg = (\n                    f\"incompatible merge keys [{i}] {lk.dtype} and \"\n                    f\"{rk.dtype}, must be the same type\"\n                )\n            raise pd.errors.MergeError(msg)\n    \n    # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n    if self.tolerance is not None:\n    \n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n    \n        msg = (\n            f\"incompatible tolerance {self.tolerance}, must be compat \"\n            f\"with type {lt.dtype}\"\n        )\n    \n        if pd.api.types.is_datetimelike(lt):\n            if not isinstance(self.tolerance, datetime.timedelta):\n                raise pd.errors.MergeError(msg)\n            if self.tolerance < pd.Timedelta(0):\n                raise pd.errors.MergeError(\"tolerance must be positive\")\n    \n        elif pd.api.types.is_int64_dtype(lt):\n            if not pd.api.types.is_integer(self.tolerance):\n                raise pd.errors.MergeError(msg)\n            if self.tolerance < 0:\n                raise pd.errors.MergeError(\"tolerance must be positive\")\n    \n        elif pd.api.types.is_float_dtype(lt):\n            if not pd.api.types.is_number(self.tolerance):\n                raise pd.errors.MergeError(msg)\n            if self.tolerance < 0:\n                raise pd.errors.MergeError(\"tolerance must be positive\")\n    \n        else:\n            raise pd.errors.MergeError(\"key must be integer, timestamp or float\")\n    \n    # validate allow_exact_matches\n    if not pd.api.types.is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\"\n        raise pd.errors.MergeError(msg)\n    \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}