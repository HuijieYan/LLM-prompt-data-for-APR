{
    "pandas": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1590,
            "file_name": "/pandas/core/internals/blocks.py",
            "replace_code": "def putmask(\n    self, mask, new, inplace: bool = False, axis: int = 0, transpose: bool = False,\n) -> List[\"Block\"]:\n\n    \"\"\"\n    See Block.putmask.__doc__\n    Applies the given mask to the block values and updates with new values.\n    \n    Parameters\n    ----------\n    mask : array_like\n        The mask to be applied to the values.\n    new : array_like\n        The new values to be updated.\n    inplace : bool, default False\n        Whether to perform the operation in place.\n    axis : int, default 0\n        The axis along which to apply the mask.\n    transpose : bool, default False\n        Whether to transpose the mask.\n    \n    Returns\n    -------\n    List[\"Block\"]\n        A list of updated blocks.\n    \n    Raises\n    ------\n    ValueError\n        If the dimensions of the mask and new values do not match.\n    \n    Notes\n    -----\n    The update is performed in place if inplace=True, otherwise a new copy is created.\n    \n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    \n    mask = _extract_bool_array(mask)\n    \n    new_values = self.values if inplace else self.values.copy()\n    \n    if isinstance(new, np.ndarray) and len(new) == len(mask):\n        new = new[mask]\n    \n    if len(new) != len(mask):\n        raise ValueError(\"Dimensions of the mask and new values do not match\")\n    \n    mask = _safe_reshape(mask, new_values.shape)\n    \n    new_values[mask] = new\n    return [self.make_block(values=new_values)]"
        }
    ]
}