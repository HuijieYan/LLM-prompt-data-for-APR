{
    "pandas": [
        {
            "bugID": 89,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "/pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n\n    if not clocs:\n        return data\n    \n    # NOTE: This doesn't deal with hierarchical columns yet\n    \n    index = data.index\n    \n    clocs = [index._get_level_number(i) for i in clocs]\n    \n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    \n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n    \n    shape = [len(x) for x in clevels]\n    group_index = pd.api.types.union_categoricals(ccodes).codes\n    \n    comp_ids, obs_ids = pd.factorize(pd.Categorical.from_codes(group_index))\n    recons_codes = pd.Categorical.reorder_categories(comp_ids, ordered=False)\n    \n    if not rlocs:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = pd.MultiIndex.from_tuples(obs_ids, names=[\"__placeholder__\"])\n    else:\n        dummy_index = pd.MultiIndex.from_tuples(\n            rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n    \n    if isinstance(data, pd.Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n    \n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, pd.MultiIndex):\n            result = data\n            for i in reversed(range(len(clocs))):\n                val = clocs[i]\n                result = result.unstack(val)\n                clocs = [v if i > v else v - 1 for v in clocs]\n    \n            return result\n    \n        dummy = data.copy()\n        dummy.index = dummy_index\n    \n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, pd.Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.names[0]] + cnames\n    \n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n    \n    new_columns = pd.MultiIndex.from_arrays(\n        new_codes, names=new_names, verify_integrity=False\n    )\n    \n    if isinstance(unstacked, pd.Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n    \n    return unstacked"
        }
    ]
}