{
    "pandas": [
        {
            "bugID": 89,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n\n    if len(clocs) == 0:\n        return data\n    \n    index = data.index\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    \n    if rlocs == []:\n        dummy_index = Index(data.index.levels[clocs[0]], name='__placeholder__')\n    else:\n        dummy_index = MultiIndex(\n            levels=index.levels[rlocs] + [index.levels[clocs[-1]]],\n            codes=index.codes[rlocs] + [index.codes[clocs[-1]]],\n            names=index.names[rlocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n    \n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n    \n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = [index.levels[c] for c in clocs]\n        new_names = [index.names[c] for c in clocs]\n        new_codes = index.codes[clocs]\n    \n    else:\n        clevels = [index.levels[c] for c in clocs]\n        ccodes = [index.codes[c] for c in clocs]\n        cnames = [index.names[c] for c in clocs]\n    \n        result = data\n        for i, val in enumerate(clocs):\n            result = result.unstack(i)\n        \n        dummy = result.copy()\n        dummy.index = dummy_index\n    \n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        unstcols = unstacked.columns\n        new_levels = [unstcols.levels[-1]] + clevels\n        new_names = [index.names[-1]] + cnames\n        new_codes = [unstcols.codes[-1]] + ccodes\n    \n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n    \n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n    \n    return unstacked"
        }
    ]
}