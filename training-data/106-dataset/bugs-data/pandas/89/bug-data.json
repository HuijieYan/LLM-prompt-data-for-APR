{
    "pandas:89": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_89/pandas/core/reshape/reshape.py": {
            "buggy_functions": [
                {
                    "function_name": "_unstack_multiple",
                    "function_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 312,
                    "variables": {
                        "len": [
                            313,
                            331,
                            359
                        ],
                        "clocs": [
                            320,
                            322,
                            324,
                            325,
                            326,
                            359,
                            360,
                            362,
                            313
                        ],
                        "data": [
                            357,
                            358,
                            366,
                            375,
                            314,
                            348,
                            349,
                            318
                        ],
                        "index": [
                            320,
                            322,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            318
                        ],
                        "data.index": [
                            318
                        ],
                        "index._get_level_number": [
                            320
                        ],
                        "i": [
                            320,
                            322,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            359,
                            360,
                            362
                        ],
                        "rlocs": [
                            322,
                            327,
                            328,
                            329,
                            337
                        ],
                        "range": [
                            322,
                            359
                        ],
                        "index.nlevels": [
                            322
                        ],
                        "clevels": [
                            353,
                            331,
                            324,
                            374
                        ],
                        "index.levels": [
                            324,
                            327
                        ],
                        "ccodes": [
                            332,
                            325,
                            335
                        ],
                        "index.codes": [
                            328,
                            325
                        ],
                        "cnames": [
                            354,
                            326,
                            375
                        ],
                        "index.names": [
                            329,
                            326
                        ],
                        "rlevels": [
                            342,
                            327
                        ],
                        "rcodes": [
                            328,
                            343
                        ],
                        "rnames": [
                            344,
                            329
                        ],
                        "shape": [
                            331,
                            332,
                            335
                        ],
                        "x": [
                            331
                        ],
                        "group_index": [
                            332,
                            334
                        ],
                        "get_group_index": [
                            332
                        ],
                        "comp_ids": [
                            343,
                            334,
                            335
                        ],
                        "obs_ids": [
                            342,
                            339,
                            334,
                            335
                        ],
                        "compress_group_index": [
                            334
                        ],
                        "recons_codes": [
                            378,
                            355,
                            335
                        ],
                        "decons_obs_group_ids": [
                            335
                        ],
                        "dummy_index": [
                            339,
                            341,
                            350,
                            367
                        ],
                        "Index": [
                            339
                        ],
                        "MultiIndex": [
                            357,
                            381,
                            341
                        ],
                        "isinstance": [
                            385,
                            370,
                            348,
                            357
                        ],
                        "Series": [
                            385,
                            370,
                            348
                        ],
                        "dummy": [
                            352,
                            366,
                            367,
                            369,
                            349,
                            350
                        ],
                        "data.copy": [
                            349,
                            366
                        ],
                        "dummy.index": [
                            350,
                            367
                        ],
                        "unstacked": [
                            352,
                            385,
                            386,
                            388,
                            390,
                            369,
                            370,
                            371,
                            373
                        ],
                        "dummy.unstack": [
                            352,
                            369
                        ],
                        "fill_value": [
                            352,
                            369
                        ],
                        "new_levels": [
                            353,
                            382,
                            374
                        ],
                        "new_names": [
                            354,
                            382,
                            375
                        ],
                        "new_codes": [
                            379,
                            377,
                            355,
                            382
                        ],
                        "data.columns": [
                            357,
                            375
                        ],
                        "result": [
                            361,
                            364,
                            358
                        ],
                        "val": [
                            360,
                            361
                        ],
                        "result.unstack": [
                            361
                        ],
                        "v": [
                            362
                        ],
                        "unstcols": [
                            371,
                            373,
                            374,
                            377,
                            379
                        ],
                        "unstacked.index": [
                            386,
                            371
                        ],
                        "unstacked.columns": [
                            388,
                            373
                        ],
                        "unstcols.levels": [
                            374
                        ],
                        "data.columns.name": [
                            375
                        ],
                        "unstcols.codes": [
                            377,
                            379
                        ],
                        "rec": [
                            378,
                            379
                        ],
                        "new_codes.append": [
                            379
                        ],
                        "rec.take": [
                            379
                        ],
                        "new_columns": [
                            386,
                            388,
                            381
                        ]
                    },
                    "filtered_variables": {
                        "clocs": [
                            320,
                            322,
                            324,
                            325,
                            326,
                            359,
                            360,
                            362,
                            313
                        ],
                        "data": [
                            357,
                            358,
                            366,
                            375,
                            314,
                            348,
                            349,
                            318
                        ],
                        "index": [
                            320,
                            322,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            318
                        ],
                        "data.index": [
                            318
                        ],
                        "index._get_level_number": [
                            320
                        ],
                        "i": [
                            320,
                            322,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            359,
                            360,
                            362
                        ],
                        "rlocs": [
                            322,
                            327,
                            328,
                            329,
                            337
                        ],
                        "index.nlevels": [
                            322
                        ],
                        "clevels": [
                            353,
                            331,
                            324,
                            374
                        ],
                        "index.levels": [
                            324,
                            327
                        ],
                        "ccodes": [
                            332,
                            325,
                            335
                        ],
                        "index.codes": [
                            328,
                            325
                        ],
                        "cnames": [
                            354,
                            326,
                            375
                        ],
                        "index.names": [
                            329,
                            326
                        ],
                        "rlevels": [
                            342,
                            327
                        ],
                        "rcodes": [
                            328,
                            343
                        ],
                        "rnames": [
                            344,
                            329
                        ],
                        "shape": [
                            331,
                            332,
                            335
                        ],
                        "x": [
                            331
                        ],
                        "group_index": [
                            332,
                            334
                        ],
                        "get_group_index": [
                            332
                        ],
                        "comp_ids": [
                            343,
                            334,
                            335
                        ],
                        "obs_ids": [
                            342,
                            339,
                            334,
                            335
                        ],
                        "compress_group_index": [
                            334
                        ],
                        "recons_codes": [
                            378,
                            355,
                            335
                        ],
                        "decons_obs_group_ids": [
                            335
                        ],
                        "dummy_index": [
                            339,
                            341,
                            350,
                            367
                        ],
                        "Index": [
                            339
                        ],
                        "MultiIndex": [
                            357,
                            381,
                            341
                        ],
                        "Series": [
                            385,
                            370,
                            348
                        ],
                        "dummy": [
                            352,
                            366,
                            367,
                            369,
                            349,
                            350
                        ],
                        "data.copy": [
                            349,
                            366
                        ],
                        "dummy.index": [
                            350,
                            367
                        ],
                        "unstacked": [
                            352,
                            385,
                            386,
                            388,
                            390,
                            369,
                            370,
                            371,
                            373
                        ],
                        "dummy.unstack": [
                            352,
                            369
                        ],
                        "fill_value": [
                            352,
                            369
                        ],
                        "new_levels": [
                            353,
                            382,
                            374
                        ],
                        "new_names": [
                            354,
                            382,
                            375
                        ],
                        "new_codes": [
                            379,
                            377,
                            355,
                            382
                        ],
                        "data.columns": [
                            357,
                            375
                        ],
                        "result": [
                            361,
                            364,
                            358
                        ],
                        "val": [
                            360,
                            361
                        ],
                        "result.unstack": [
                            361
                        ],
                        "v": [
                            362
                        ],
                        "unstcols": [
                            371,
                            373,
                            374,
                            377,
                            379
                        ],
                        "unstacked.index": [
                            386,
                            371
                        ],
                        "unstacked.columns": [
                            388,
                            373
                        ],
                        "unstcols.levels": [
                            374
                        ],
                        "data.columns.name": [
                            375
                        ],
                        "unstcols.codes": [
                            377,
                            379
                        ],
                        "rec": [
                            378,
                            379
                        ],
                        "new_codes.append": [
                            379
                        ],
                        "rec.take": [
                            379
                        ],
                        "new_columns": [
                            386,
                            388,
                            381
                        ]
                    },
                    "diff_line_number": 361,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "clocs": {
                                    "variable_value": "['employed', 'kids']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "data": {
                                    "variable_value": "                     score     \ngender              female male\nname  employed kids            \nAlice False    0       9.5  0.0\nBob   True     0       0.0  8.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "2"
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": "MultiIndex([('Alice', False, 0),\n            (  'Bob',  True, 0)],\n           names=['name', 'employed', 'kids'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "2"
                                },
                                "index._get_level_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rlocs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "clevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index.levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ccodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index.codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cnames": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rcodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rnames": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_group_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obs_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "compress_group_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "recons_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decons_obs_group_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dummy_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.copy": {
                                    "variable_value": "<bound method NDFrame.copy of                      score     \ngender              female male\nname  employed kids            \nAlice False    0       9.5  0.0\nBob   True     0       0.0  8.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "dummy.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstacked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dummy.unstack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.columns": {
                                    "variable_value": "MultiIndex([('score', 'female'),\n            ('score',   'male')],\n           names=[None, 'gender'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "2"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.unstack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstcols": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstacked.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstacked.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstcols.levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.columns.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unstcols.codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_codes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rec.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "clocs": {
                                    "variable_value": "['employed', 'kids']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "data": {
                                    "variable_value": "                     score     \ngender              female male\nname  employed kids            \nAlice False    0       9.5  0.0\nBob   True     0       0.0  8.0",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "2"
                                },
                                "index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": "MultiIndex([('Alice', False, 0),\n            (  'Bob',  True, 0)],\n           names=['name', 'employed', 'kids'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "2"
                                },
                                "index._get_level_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rlocs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index.nlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "clevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index.levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ccodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index.codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cnames": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index.names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rcodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rnames": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "group_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_group_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obs_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "compress_group_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "recons_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decons_obs_group_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dummy_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.copy": {
                                    "variable_value": "<bound method NDFrame.copy of                      score     \ngender              female male\nname  employed kids            \nAlice False    0       9.5  0.0\nBob   True     0       0.0  8.0>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "dummy.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstacked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dummy.unstack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fill_value": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.columns": {
                                    "variable_value": "MultiIndex([('score', 'female'),\n            ('score',   'male')],\n           names=[None, 'gender'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "2"
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.unstack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstcols": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstacked.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstacked.columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unstcols.levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.columns.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "unstcols.codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_codes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rec.take": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_columns": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
                "def unstack(obj, level, fill_value=None):\n    if isinstance(level, (tuple, list)):\n        if len(level) != 1:\n            # _unstack_multiple only handles MultiIndexes,\n            # and isn't needed for a single level\n            return _unstack_multiple(obj, level, fill_value=fill_value)\n        else:\n            level = level[0]\n\n    # Prioritize integer interpretation (GH #21677):\n    if not is_integer(level) and not level == \"__placeholder__\":\n        level = obj.index._get_level_number(level)\n\n    if isinstance(obj, DataFrame):\n        if isinstance(obj.index, MultiIndex):\n            return _unstack_frame(obj, level, fill_value=fill_value)\n        else:\n            return obj.T.stack(dropna=False)\n    else:\n        if is_extension_array_dtype(obj.dtype):\n            return _unstack_extension_series(obj, level, fill_value)\n        unstacker = _Unstacker(\n            obj.values,\n            obj.index,\n            level=level,\n            fill_value=fill_value,\n            constructor=obj._constructor_expanddim,\n        )\n        return unstacker.get_result()",
                "def _unstack_frame(obj, level, fill_value=None):\n    if obj._is_mixed_type:\n        unstacker = partial(\n            _Unstacker, index=obj.index, level=level, fill_value=fill_value\n        )\n        blocks = obj._data.unstack(unstacker, fill_value=fill_value)\n        return obj._constructor(blocks)\n    else:\n        unstacker = _Unstacker(\n            obj.values,\n            obj.index,\n            level=level,\n            value_columns=obj.columns,\n            fill_value=fill_value,\n            constructor=obj._constructor,\n        )\n        return unstacker.get_result()",
                "def _unstack_extension_series(series, level, fill_value):\n    \"\"\"\n    Unstack an ExtensionArray-backed Series.\n\n    The ExtensionDtype is preserved.\n\n    Parameters\n    ----------\n    series : Series\n        A Series with an ExtensionArray for values\n    level : Any\n        The level name or number.\n    fill_value : Any\n        The user-level (not physical storage) fill value to use for\n        missing values introduced by the reshape. Passed to\n        ``series.values.take``.\n\n    Returns\n    -------\n    DataFrame\n        Each column of the DataFrame will have the same dtype as\n        the input Series.\n    \"\"\"\n    # Implementation note: the basic idea is to\n    # 1. Do a regular unstack on a dummy array of integers\n    # 2. Followup with a columnwise take.\n    # We use the dummy take to discover newly-created missing values\n    # introduced by the reshape.\n    from pandas.core.reshape.concat import concat\n\n    dummy_arr = np.arange(len(series))\n    # fill_value=-1, since we will do a series.values.take later\n    result = _Unstacker(\n        dummy_arr, series.index, level=level, fill_value=-1\n    ).get_result()\n\n    out = []\n    values = extract_array(series, extract_numpy=False)\n\n    for col, indices in result.items():\n        out.append(\n            Series(\n                values.take(indices.values, allow_fill=True, fill_value=fill_value),\n                name=col,\n                index=result.index,\n            )\n        )\n    return concat(out, axis=\"columns\", copy=False, keys=result.columns)",
                "def stack(frame, level=-1, dropna=True):\n    \"\"\"\n    Convert DataFrame to Series with multi-level Index. Columns become the\n    second level of the resulting hierarchical index\n\n    Returns\n    -------\n    stacked : Series\n    \"\"\"\n\n    def factorize(index):\n        if index.is_unique:\n            return index, np.arange(len(index))\n        codes, categories = factorize_from_iterable(index)\n        return categories, codes\n\n    N, K = frame.shape\n\n    # Will also convert negative level numbers and check if out of bounds.\n    level_num = frame.columns._get_level_number(level)\n\n    if isinstance(frame.columns, MultiIndex):\n        return _stack_multi_columns(frame, level_num=level_num, dropna=dropna)\n    elif isinstance(frame.index, MultiIndex):\n        new_levels = list(frame.index.levels)\n        new_codes = [lab.repeat(K) for lab in frame.index.codes]\n\n        clev, clab = factorize(frame.columns)\n        new_levels.append(clev)\n        new_codes.append(np.tile(clab, N).ravel())\n\n        new_names = list(frame.index.names)\n        new_names.append(frame.columns.name)\n        new_index = MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )\n    else:\n        levels, (ilab, clab) = zip(*map(factorize, (frame.index, frame.columns)))\n        codes = ilab.repeat(K), np.tile(clab, N).ravel()\n        new_index = MultiIndex(\n            levels=levels,\n            codes=codes,\n            names=[frame.index.name, frame.columns.name],\n            verify_integrity=False,\n        )\n\n    if frame._is_homogeneous_type:\n        # For homogeneous EAs, frame.values will coerce to object. So\n        # we concatenate instead.\n        dtypes = list(frame.dtypes.values)\n        dtype = dtypes[0]\n\n        if is_extension_array_dtype(dtype):\n            arr = dtype.construct_array_type()\n            new_values = arr._concat_same_type(\n                [col._values for _, col in frame.items()]\n            )\n            new_values = _reorder_for_extension_array_stack(new_values, N, K)\n        else:\n            # homogeneous, non-EA\n            new_values = frame.values.ravel()\n\n    else:\n        # non-homogeneous\n        new_values = frame.values.ravel()\n\n    if dropna:\n        mask = notna(new_values)\n        new_values = new_values[mask]\n        new_index = new_index[mask]\n\n    return frame._constructor_sliced(new_values, index=new_index)",
                "def stack_multiple(frame, level, dropna=True):\n    # If all passed levels match up to column names, no\n    # ambiguity about what to do\n    if all(lev in frame.columns.names for lev in level):\n        result = frame\n        for lev in level:\n            result = stack(result, lev, dropna=dropna)\n\n    # Otherwise, level numbers may change as each successive level is stacked\n    elif all(isinstance(lev, int) for lev in level):\n        # As each stack is done, the level numbers decrease, so we need\n        #  to account for that when level is a sequence of ints\n        result = frame\n        # _get_level_number() checks level numbers are in range and converts\n        # negative numbers to positive\n        level = [frame.columns._get_level_number(lev) for lev in level]\n\n        # Can't iterate directly through level as we might need to change\n        # values as we go\n        for index in range(len(level)):\n            lev = level[index]\n            result = stack(result, lev, dropna=dropna)\n            # Decrement all level numbers greater than current, as these\n            # have now shifted down by one\n            updated_level = []\n            for other in level:\n                if other > lev:\n                    updated_level.append(other - 1)\n                else:\n                    updated_level.append(other)\n            level = updated_level\n\n    else:\n        raise ValueError(\n            \"level should contain all level names or all level \"\n            \"numbers, not a mixture of the two.\"\n        )\n\n    return result",
                "def _stack_multi_columns(frame, level_num=-1, dropna=True):\n    def _convert_level_number(level_num, columns):\n        \"\"\"\n        Logic for converting the level number to something we can safely pass\n        to swaplevel:\n\n        We generally want to convert the level number into a level name, except\n        when columns do not have names, in which case we must leave as a level\n        number\n        \"\"\"\n        if level_num in columns.names:\n            return columns.names[level_num]\n        else:\n            if columns.names[level_num] is None:\n                return level_num\n            else:\n                return columns.names[level_num]\n\n    this = frame.copy()\n\n    # this makes life much simpler\n    if level_num != frame.columns.nlevels - 1:\n        # roll levels to put selected level at end\n        roll_columns = this.columns\n        for i in range(level_num, frame.columns.nlevels - 1):\n            # Need to check if the ints conflict with level names\n            lev1 = _convert_level_number(i, roll_columns)\n            lev2 = _convert_level_number(i + 1, roll_columns)\n            roll_columns = roll_columns.swaplevel(lev1, lev2)\n        this.columns = roll_columns\n\n    if not this.columns.is_lexsorted():\n        # Workaround the edge case where 0 is one of the column names,\n        # which interferes with trying to sort based on the first\n        # level\n        level_to_sort = _convert_level_number(0, this.columns)\n        this = this.sort_index(level=level_to_sort, axis=1)\n\n    # tuple list excluding level for grouping columns\n    if len(frame.columns.levels) > 2:\n        tuples = list(\n            zip(\n                *[\n                    lev.take(level_codes)\n                    for lev, level_codes in zip(\n                        this.columns.levels[:-1], this.columns.codes[:-1]\n                    )\n                ]\n            )\n        )\n        unique_groups = [key for key, _ in itertools.groupby(tuples)]\n        new_names = this.columns.names[:-1]\n        new_columns = MultiIndex.from_tuples(unique_groups, names=new_names)\n    else:\n        new_columns = this.columns.levels[0]._shallow_copy(name=this.columns.names[0])\n        unique_groups = new_columns\n\n    # time to ravel the values\n    new_data = {}\n    level_vals = this.columns.levels[-1]\n    level_codes = sorted(set(this.columns.codes[-1]))\n    level_vals_used = level_vals[level_codes]\n    levsize = len(level_codes)\n    drop_cols = []\n    for key in unique_groups:\n        try:\n            loc = this.columns.get_loc(key)\n        except KeyError:\n            drop_cols.append(key)\n            continue\n\n        # can make more efficient?\n        # we almost always return a slice\n        # but if unsorted can get a boolean\n        # indexer\n        if not isinstance(loc, slice):\n            slice_len = len(loc)\n        else:\n            slice_len = loc.stop - loc.start\n\n        if slice_len != levsize:\n            chunk = this.loc[:, this.columns[loc]]\n            chunk.columns = level_vals.take(chunk.columns.codes[-1])\n            value_slice = chunk.reindex(columns=level_vals_used).values\n        else:\n            if frame._is_homogeneous_type and is_extension_array_dtype(\n                frame.dtypes.iloc[0]\n            ):\n                dtype = this[this.columns[loc]].dtypes.iloc[0]\n                subset = this[this.columns[loc]]\n\n                value_slice = dtype.construct_array_type()._concat_same_type(\n                    [x._values for _, x in subset.items()]\n                )\n                N, K = this.shape\n                idx = np.arange(N * K).reshape(K, N).T.ravel()\n                value_slice = value_slice.take(idx)\n\n            elif frame._is_mixed_type:\n                value_slice = this[this.columns[loc]].values\n            else:\n                value_slice = this.values[:, loc]\n\n        if value_slice.ndim > 1:\n            # i.e. not extension\n            value_slice = value_slice.ravel()\n\n        new_data[key] = value_slice\n\n    if len(drop_cols) > 0:\n        new_columns = new_columns.difference(drop_cols)\n\n    N = len(this)\n\n    if isinstance(this.index, MultiIndex):\n        new_levels = list(this.index.levels)\n        new_names = list(this.index.names)\n        new_codes = [lab.repeat(levsize) for lab in this.index.codes]\n    else:\n        old_codes, old_levels = factorize_from_iterable(this.index)\n        new_levels = [old_levels]\n        new_codes = [old_codes.repeat(levsize)]\n        new_names = [this.index.name]  # something better?\n\n    new_levels.append(level_vals)\n    new_codes.append(np.tile(level_codes, N))\n    new_names.append(frame.columns.names[level_num])\n\n    new_index = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    result = frame._constructor(new_data, index=new_index, columns=new_columns)\n\n    # more efficient way to go about this? can do the whole masking biz but\n    # will only save a small amount of time...\n    if dropna:\n        result = result.dropna(axis=0, how=\"all\")\n\n    return result",
                "def get_dummies(\n    data,\n    prefix=None,\n    prefix_sep=\"_\",\n    dummy_na=False,\n    columns=None,\n    sparse=False,\n    drop_first=False,\n    dtype=None,\n) -> \"DataFrame\":\n    \"\"\"\n    Convert categorical variable into dummy/indicator variables.\n\n    Parameters\n    ----------\n    data : array-like, Series, or DataFrame\n        Data of which to get dummy indicators.\n    prefix : str, list of str, or dict of str, default None\n        String to append DataFrame column names.\n        Pass a list with length equal to the number of columns\n        when calling get_dummies on a DataFrame. Alternatively, `prefix`\n        can be a dictionary mapping column names to prefixes.\n    prefix_sep : str, default '_'\n        If appending prefix, separator/delimiter to use. Or pass a\n        list or dictionary as with `prefix`.\n    dummy_na : bool, default False\n        Add a column to indicate NaNs, if False NaNs are ignored.\n    columns : list-like, default None\n        Column names in the DataFrame to be encoded.\n        If `columns` is None then all the columns with\n        `object` or `category` dtype will be converted.\n    sparse : bool, default False\n        Whether the dummy-encoded columns should be backed by\n        a :class:`SparseArray` (True) or a regular NumPy array (False).\n    drop_first : bool, default False\n        Whether to get k-1 dummies out of k categorical levels by removing the\n        first level.\n    dtype : dtype, default np.uint8\n        Data type for new columns. Only a single dtype is allowed.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n        Dummy-coded data.\n\n    See Also\n    --------\n    Series.str.get_dummies : Convert Series to dummy codes.\n\n    Examples\n    --------\n    >>> s = pd.Series(list('abca'))\n\n    >>> pd.get_dummies(s)\n       a  b  c\n    0  1  0  0\n    1  0  1  0\n    2  0  0  1\n    3  1  0  0\n\n    >>> s1 = ['a', 'b', np.nan]\n\n    >>> pd.get_dummies(s1)\n       a  b\n    0  1  0\n    1  0  1\n    2  0  0\n\n    >>> pd.get_dummies(s1, dummy_na=True)\n       a  b  NaN\n    0  1  0    0\n    1  0  1    0\n    2  0  0    1\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'a'], 'B': ['b', 'a', 'c'],\n    ...                    'C': [1, 2, 3]})\n\n    >>> pd.get_dummies(df, prefix=['col1', 'col2'])\n       C  col1_a  col1_b  col2_a  col2_b  col2_c\n    0  1       1       0       0       1       0\n    1  2       0       1       1       0       0\n    2  3       1       0       0       0       1\n\n    >>> pd.get_dummies(pd.Series(list('abcaa')))\n       a  b  c\n    0  1  0  0\n    1  0  1  0\n    2  0  0  1\n    3  1  0  0\n    4  1  0  0\n\n    >>> pd.get_dummies(pd.Series(list('abcaa')), drop_first=True)\n       b  c\n    0  0  0\n    1  1  0\n    2  0  1\n    3  0  0\n    4  0  0\n\n    >>> pd.get_dummies(pd.Series(list('abc')), dtype=float)\n         a    b    c\n    0  1.0  0.0  0.0\n    1  0.0  1.0  0.0\n    2  0.0  0.0  1.0\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    dtypes_to_encode = [\"object\", \"category\"]\n\n    if isinstance(data, DataFrame):\n        # determine columns being encoded\n        if columns is None:\n            data_to_encode = data.select_dtypes(include=dtypes_to_encode)\n        elif not is_list_like(columns):\n            raise TypeError(\"Input must be a list-like for parameter `columns`\")\n        else:\n            data_to_encode = data[columns]\n\n        # validate prefixes and separator to avoid silently dropping cols\n        def check_len(item, name):\n            len_msg = (\n                \"Length of '{name}' ({len_item}) did not match the \"\n                \"length of the columns being encoded ({len_enc}).\"\n            )\n\n            if is_list_like(item):\n                if not len(item) == data_to_encode.shape[1]:\n                    len_msg = len_msg.format(\n                        name=name, len_item=len(item), len_enc=data_to_encode.shape[1]\n                    )\n                    raise ValueError(len_msg)\n\n        check_len(prefix, \"prefix\")\n        check_len(prefix_sep, \"prefix_sep\")\n\n        if isinstance(prefix, str):\n            prefix = itertools.cycle([prefix])\n        if isinstance(prefix, dict):\n            prefix = [prefix[col] for col in data_to_encode.columns]\n\n        if prefix is None:\n            prefix = data_to_encode.columns\n\n        # validate separators\n        if isinstance(prefix_sep, str):\n            prefix_sep = itertools.cycle([prefix_sep])\n        elif isinstance(prefix_sep, dict):\n            prefix_sep = [prefix_sep[col] for col in data_to_encode.columns]\n\n        if data_to_encode.shape == data.shape:\n            # Encoding the entire df, do not prepend any dropped columns\n            with_dummies: List[DataFrame] = []\n        elif columns is not None:\n            # Encoding only cols specified in columns. Get all cols not in\n            # columns to prepend to result.\n            with_dummies = [data.drop(columns, axis=1)]\n        else:\n            # Encoding only object and category dtype columns. Get remaining\n            # columns to prepend to result.\n            with_dummies = [data.select_dtypes(exclude=dtypes_to_encode)]\n\n        for (col, pre, sep) in zip(data_to_encode.items(), prefix, prefix_sep):\n            # col is (column_name, column), use just column data here\n            dummy = _get_dummies_1d(\n                col[1],\n                prefix=pre,\n                prefix_sep=sep,\n                dummy_na=dummy_na,\n                sparse=sparse,\n                drop_first=drop_first,\n                dtype=dtype,\n            )\n            with_dummies.append(dummy)\n        result = concat(with_dummies, axis=1)\n    else:\n        result = _get_dummies_1d(\n            data,\n            prefix,\n            prefix_sep,\n            dummy_na,\n            sparse=sparse,\n            drop_first=drop_first,\n            dtype=dtype,\n        )\n    return result",
                "def _get_dummies_1d(\n    data,\n    prefix,\n    prefix_sep=\"_\",\n    dummy_na=False,\n    sparse=False,\n    drop_first=False,\n    dtype=None,\n):\n    from pandas.core.reshape.concat import concat\n\n    # Series avoids inconsistent NaN handling\n    codes, levels = factorize_from_iterable(Series(data))\n\n    if dtype is None:\n        dtype = np.uint8\n    dtype = np.dtype(dtype)\n\n    if is_object_dtype(dtype):\n        raise ValueError(\"dtype=object is not a valid dtype for get_dummies\")\n\n    def get_empty_frame(data) -> DataFrame:\n        if isinstance(data, Series):\n            index = data.index\n        else:\n            index = np.arange(len(data))\n        return DataFrame(index=index)\n\n    # if all NaN\n    if not dummy_na and len(levels) == 0:\n        return get_empty_frame(data)\n\n    codes = codes.copy()\n    if dummy_na:\n        codes[codes == -1] = len(levels)\n        levels = np.append(levels, np.nan)\n\n    # if dummy_na, we just fake a nan level. drop_first will drop it again\n    if drop_first and len(levels) == 1:\n        return get_empty_frame(data)\n\n    number_of_cols = len(levels)\n\n    if prefix is None:\n        dummy_cols = levels\n    else:\n\n        # PY2 embedded unicode, gh-22084\n        def _make_col_name(prefix, prefix_sep, level) -> str:\n            fstr = \"{prefix}{prefix_sep}{level}\"\n            return fstr.format(prefix=prefix, prefix_sep=prefix_sep, level=level)\n\n        dummy_cols = [_make_col_name(prefix, prefix_sep, level) for level in levels]\n\n    if isinstance(data, Series):\n        index = data.index\n    else:\n        index = None\n\n    if sparse:\n\n        if is_integer_dtype(dtype):\n            fill_value = 0\n        elif dtype == bool:\n            fill_value = False\n        else:\n            fill_value = 0.0\n\n        sparse_series = []\n        N = len(data)\n        sp_indices = [[] for _ in range(len(dummy_cols))]\n        mask = codes != -1\n        codes = codes[mask]\n        n_idx = np.arange(N)[mask]\n\n        for ndx, code in zip(n_idx, codes):\n            sp_indices[code].append(ndx)\n\n        if drop_first:\n            # remove first categorical level to avoid perfect collinearity\n            # GH12042\n            sp_indices = sp_indices[1:]\n            dummy_cols = dummy_cols[1:]\n        for col, ixs in zip(dummy_cols, sp_indices):\n            sarr = SparseArray(\n                np.ones(len(ixs), dtype=dtype),\n                sparse_index=IntIndex(N, ixs),\n                fill_value=fill_value,\n                dtype=dtype,\n            )\n            sparse_series.append(Series(data=sarr, index=index, name=col))\n\n        out = concat(sparse_series, axis=1, copy=False)\n        return out\n\n    else:\n        dummy_mat = np.eye(number_of_cols, dtype=dtype).take(codes, axis=0)\n\n        if not dummy_na:\n            # reset NaN GH4446\n            dummy_mat[codes == -1] = 0\n\n        if drop_first:\n            # remove first GH12042\n            dummy_mat = dummy_mat[:, 1:]\n            dummy_cols = dummy_cols[1:]\n        return DataFrame(dummy_mat, index=index, columns=dummy_cols)",
                "def _reorder_for_extension_array_stack(arr, n_rows: int, n_columns: int):\n    \"\"\"\n    Re-orders the values when stacking multiple extension-arrays.\n\n    The indirect stacking method used for EAs requires a followup\n    take to get the order correct.\n\n    Parameters\n    ----------\n    arr : ExtensionArray\n    n_rows, n_columns : int\n        The number of rows and columns in the original DataFrame.\n\n    Returns\n    -------\n    taken : ExtensionArray\n        The original `arr` with elements re-ordered appropriately\n\n    Examples\n    --------\n    >>> arr = np.array(['a', 'b', 'c', 'd', 'e', 'f'])\n    >>> _reorder_for_extension_array_stack(arr, 2, 3)\n    array(['a', 'c', 'e', 'b', 'd', 'f'], dtype='<U1')\n\n    >>> _reorder_for_extension_array_stack(arr, 3, 2)\n    array(['a', 'd', 'b', 'e', 'c', 'f'], dtype='<U1')\n    \"\"\"\n    # final take to get the order correct.\n    # idx is an indexer like\n    # [c0r0, c1r0, c2r0, ...,\n    #  c0r1, c1r1, c2r1, ...]\n    idx = np.arange(n_rows * n_columns).reshape(n_columns, n_rows).T.ravel()\n    return arr.take(idx)",
                "def __init__(\n    self,\n    values: np.ndarray,\n    index,\n    level=-1,\n    value_columns=None,\n    fill_value=None,\n    constructor=None,\n):\n\n    if values.ndim == 1:\n        values = values[:, np.newaxis]\n    self.values = values\n    self.value_columns = value_columns\n    self.fill_value = fill_value\n\n    if constructor is None:\n        constructor = DataFrame\n    self.constructor = constructor\n\n    if value_columns is None and values.shape[1] != 1:  # pragma: no cover\n        raise ValueError(\"must pass column labels for multi-column data\")\n\n    self.index = index.remove_unused_levels()\n\n    self.level = self.index._get_level_number(level)\n\n    # when index includes `nan`, need to lift levels/strides by 1\n    self.lift = 1 if -1 in self.index.codes[self.level] else 0\n\n    self.new_index_levels = list(self.index.levels)\n    self.new_index_names = list(self.index.names)\n\n    self.removed_name = self.new_index_names.pop(self.level)\n    self.removed_level = self.new_index_levels.pop(self.level)\n    self.removed_level_full = index.levels[self.level]\n\n    # Bug fix GH 20601\n    # If the data frame is too big, the number of unique index combination\n    # will cause int32 overflow on windows environments.\n    # We want to check and raise an error before this happens\n    num_rows = np.max([index_level.size for index_level in self.new_index_levels])\n    num_columns = self.removed_level.size\n\n    # GH20601: This forces an overflow if the number of cells is too high.\n    num_cells = np.multiply(num_rows, num_columns, dtype=np.int32)\n\n    if num_rows > 0 and num_columns > 0 and num_cells <= 0:\n        raise ValueError(\"Unstacked DataFrame is too big, causing int32 overflow\")\n\n    self._make_sorted_values_labels()\n    self._make_selectors()",
                "def _make_sorted_values_labels(self):\n    v = self.level\n\n    codes = list(self.index.codes)\n    levs = list(self.index.levels)\n    to_sort = codes[:v] + codes[v + 1 :] + [codes[v]]\n    sizes = [len(x) for x in levs[:v] + levs[v + 1 :] + [levs[v]]]\n\n    comp_index, obs_ids = get_compressed_ids(to_sort, sizes)\n    ngroups = len(obs_ids)\n\n    indexer = libalgos.groupsort_indexer(comp_index, ngroups)[0]\n    indexer = ensure_platform_int(indexer)\n\n    self.sorted_values = algos.take_nd(self.values, indexer, axis=0)\n    self.sorted_labels = [l.take(indexer) for l in to_sort]",
                "def _make_selectors(self):\n    new_levels = self.new_index_levels\n\n    # make the mask\n    remaining_labels = self.sorted_labels[:-1]\n    level_sizes = [len(x) for x in new_levels]\n\n    comp_index, obs_ids = get_compressed_ids(remaining_labels, level_sizes)\n    ngroups = len(obs_ids)\n\n    comp_index = ensure_platform_int(comp_index)\n    stride = self.index.levshape[self.level] + self.lift\n    self.full_shape = ngroups, stride\n\n    selector = self.sorted_labels[-1] + stride * comp_index + self.lift\n    mask = np.zeros(np.prod(self.full_shape), dtype=bool)\n    mask.put(selector, True)\n\n    if mask.sum() < len(self.index):\n        raise ValueError(\"Index contains duplicate entries, cannot reshape\")\n\n    self.group_index = comp_index\n    self.mask = mask\n    self.unique_groups = obs_ids\n    self.compressor = comp_index.searchsorted(np.arange(ngroups))",
                "def get_result(self):\n    values, _ = self.get_new_values()\n    columns = self.get_new_columns()\n    index = self.get_new_index()\n\n    return self.constructor(values, index=index, columns=columns)",
                "def get_new_values(self):\n    values = self.values\n\n    # place the values\n    length, width = self.full_shape\n    stride = values.shape[1]\n    result_width = width * stride\n    result_shape = (length, result_width)\n    mask = self.mask\n    mask_all = mask.all()\n\n    # we can simply reshape if we don't have a mask\n    if mask_all and len(values):\n        new_values = (\n            self.sorted_values.reshape(length, width, stride)\n            .swapaxes(1, 2)\n            .reshape(result_shape)\n        )\n        new_mask = np.ones(result_shape, dtype=bool)\n        return new_values, new_mask\n\n    # if our mask is all True, then we can use our existing dtype\n    if mask_all:\n        dtype = values.dtype\n        new_values = np.empty(result_shape, dtype=dtype)\n    else:\n        dtype, fill_value = maybe_promote(values.dtype, self.fill_value)\n        new_values = np.empty(result_shape, dtype=dtype)\n        new_values.fill(fill_value)\n\n    new_mask = np.zeros(result_shape, dtype=bool)\n\n    name = np.dtype(dtype).name\n    sorted_values = self.sorted_values\n\n    # we need to convert to a basic dtype\n    # and possibly coerce an input to our output dtype\n    # e.g. ints -> floats\n    if needs_i8_conversion(values):\n        sorted_values = sorted_values.view(\"i8\")\n        new_values = new_values.view(\"i8\")\n    elif is_bool_dtype(values):\n        sorted_values = sorted_values.astype(\"object\")\n        new_values = new_values.astype(\"object\")\n    else:\n        sorted_values = sorted_values.astype(name, copy=False)\n\n    # fill in our values & mask\n    libreshape.unstack(\n        sorted_values,\n        mask.view(\"u1\"),\n        stride,\n        length,\n        width,\n        new_values,\n        new_mask.view(\"u1\"),\n    )\n\n    # reconstruct dtype if needed\n    if needs_i8_conversion(values):\n        new_values = new_values.view(values.dtype)\n\n    return new_values, new_mask",
                "def get_new_columns(self):\n    if self.value_columns is None:\n        if self.lift == 0:\n            return self.removed_level._shallow_copy(name=self.removed_name)\n\n        lev = self.removed_level.insert(0, item=self.removed_level._na_value)\n        return lev.rename(self.removed_name)\n\n    stride = len(self.removed_level) + self.lift\n    width = len(self.value_columns)\n    propagator = np.repeat(np.arange(width), stride)\n    if isinstance(self.value_columns, MultiIndex):\n        new_levels = self.value_columns.levels + (self.removed_level_full,)\n        new_names = self.value_columns.names + (self.removed_name,)\n\n        new_codes = [lab.take(propagator) for lab in self.value_columns.codes]\n    else:\n        new_levels = [self.value_columns, self.removed_level_full]\n        new_names = [self.value_columns.name, self.removed_name]\n        new_codes = [propagator]\n\n    # The two indices differ only if the unstacked level had unused items:\n    if len(self.removed_level_full) != len(self.removed_level):\n        # In this case, we remap the new codes to the original level:\n        repeater = self.removed_level_full.get_indexer(self.removed_level)\n        if self.lift:\n            repeater = np.insert(repeater, 0, -1)\n    else:\n        # Otherwise, we just use each level item exactly once:\n        repeater = np.arange(stride) - self.lift\n\n    # The entire level is then just a repetition of the single chunk:\n    new_codes.append(np.tile(repeater, width))\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
                "def get_new_index(self):\n    result_codes = [lab.take(self.compressor) for lab in self.sorted_labels[:-1]]\n\n    # construct the new index\n    if len(self.new_index_levels) == 1:\n        level, level_codes = self.new_index_levels[0], result_codes[0]\n        if (level_codes == -1).any():\n            level = level.insert(len(level), level._na_value)\n        return level.take(level_codes).rename(self.new_index_names[0])\n\n    return MultiIndex(\n        levels=self.new_index_levels,\n        codes=result_codes,\n        names=self.new_index_names,\n        verify_integrity=False,\n    )",
                "def factorize(index):\n    if index.is_unique:\n        return index, np.arange(len(index))\n    codes, categories = factorize_from_iterable(index)\n    return categories, codes",
                "def _convert_level_number(level_num, columns):\n    \"\"\"\n    Logic for converting the level number to something we can safely pass\n    to swaplevel:\n\n    We generally want to convert the level number into a level name, except\n    when columns do not have names, in which case we must leave as a level\n    number\n    \"\"\"\n    if level_num in columns.names:\n        return columns.names[level_num]\n    else:\n        if columns.names[level_num] is None:\n            return level_num\n        else:\n            return columns.names[level_num]",
                "def get_empty_frame(data) -> DataFrame:\n    if isinstance(data, Series):\n        index = data.index\n    else:\n        index = np.arange(len(data))\n    return DataFrame(index=index)",
                "def check_len(item, name):\n    len_msg = (\n        \"Length of '{name}' ({len_item}) did not match the \"\n        \"length of the columns being encoded ({len_enc}).\"\n    )\n\n    if is_list_like(item):\n        if not len(item) == data_to_encode.shape[1]:\n            len_msg = len_msg.format(\n                name=name, len_item=len(item), len_enc=data_to_encode.shape[1]\n            )\n            raise ValueError(len_msg)",
                "def _make_col_name(prefix, prefix_sep, level) -> str:\n    fstr = \"{prefix}{prefix_sep}{level}\"\n    return fstr.format(prefix=prefix, prefix_sep=prefix_sep, level=level)"
            ],
            "inscope_function_signatures": [
                "_unstack_multiple(data, clocs, fill_value=None)",
                "unstack(obj, level, fill_value=None)",
                "_unstack_frame(obj, level, fill_value=None)",
                "_unstack_extension_series(series, level, fill_value)",
                "stack(frame, level=-1, dropna=True)",
                "stack_multiple(frame, level, dropna=True)",
                "_stack_multi_columns(frame, level_num=-1, dropna=True)",
                "get_dummies(data, prefix=None, prefix_sep='_', dummy_na=False, columns=None, sparse=False, drop_first=False, dtype=None) -> 'DataFrame'",
                "_get_dummies_1d(data, prefix, prefix_sep='_', dummy_na=False, sparse=False, drop_first=False, dtype=None)",
                "_reorder_for_extension_array_stack(arr, n_rows: int, n_columns: int)",
                "__init__(self, values: np.ndarray, index, level=-1, value_columns=None, fill_value=None, constructor=None)",
                "_make_sorted_values_labels(self)",
                "_make_selectors(self)",
                "get_result(self)",
                "get_new_values(self)",
                "get_new_columns(self)",
                "get_new_index(self)",
                "factorize(index)",
                "_convert_level_number(level_num, columns)",
                "get_empty_frame(data) -> DataFrame",
                "check_len(item, name)",
                "_make_col_name(prefix, prefix_sep, level) -> str"
            ],
            "variables_in_file": {
                "np.ndarray": [
                    92
                ],
                "np": [
                    1024,
                    131,
                    135,
                    522,
                    267,
                    1035,
                    531,
                    283,
                    286,
                    289,
                    175,
                    1079,
                    184,
                    954,
                    955,
                    703,
                    964,
                    974,
                    211,
                    473,
                    217,
                    220,
                    92,
                    733,
                    223,
                    225,
                    101,
                    1012,
                    505
                ],
                "values.ndim": [
                    100
                ],
                "values": [
                    691,
                    187,
                    191,
                    194,
                    707,
                    198,
                    205,
                    216,
                    219,
                    480,
                    100,
                    101,
                    102,
                    231,
                    485,
                    234,
                    110,
                    252,
                    253
                ],
                "np.newaxis": [
                    101
                ],
                "self.values": [
                    194,
                    157,
                    102
                ],
                "self": [
                    258,
                    131,
                    132,
                    259,
                    260,
                    262,
                    263,
                    265,
                    266,
                    140,
                    141,
                    268,
                    269,
                    144,
                    270,
                    146,
                    147,
                    272,
                    274,
                    275,
                    279,
                    281,
                    282,
                    157,
                    158,
                    286,
                    161,
                    164,
                    295,
                    298,
                    171,
                    172,
                    299,
                    174,
                    175,
                    302,
                    305,
                    178,
                    307,
                    181,
                    182,
                    183,
                    184,
                    187,
                    188,
                    189,
                    191,
                    194,
                    197,
                    201,
                    207,
                    219,
                    226,
                    102,
                    103,
                    104,
                    108,
                    113,
                    115,
                    118,
                    120,
                    121,
                    123,
                    124,
                    125
                ],
                "self.value_columns": [
                    258,
                    103,
                    266,
                    268,
                    269,
                    270,
                    272,
                    274,
                    275
                ],
                "value_columns": [
                    110,
                    103
                ],
                "self.fill_value": [
                    104,
                    219
                ],
                "fill_value": [
                    352,
                    418,
                    1026,
                    485,
                    104,
                    1001,
                    427,
                    1003,
                    429,
                    398,
                    1005,
                    369,
                    437,
                    408,
                    219,
                    221,
                    413
                ],
                "constructor": [
                    106,
                    107,
                    108
                ],
                "DataFrame": [
                    960,
                    965,
                    903,
                    107,
                    1045,
                    406,
                    861
                ],
                "self.constructor": [
                    108,
                    191
                ],
                "values.shape": [
                    198,
                    110
                ],
                "ValueError": [
                    138,
                    111,
                    882,
                    179,
                    600,
                    958
                ],
                "self.index": [
                    171,
                    113,
                    146,
                    115,
                    147,
                    178,
                    118,
                    120,
                    121
                ],
                "index.remove_unused_levels": [
                    113
                ],
                "index": [
                    1029,
                    1045,
                    189,
                    318,
                    191,
                    320,
                    322,
                    962,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    586,
                    587,
                    964,
                    965,
                    994,
                    996,
                    113,
                    504,
                    505,
                    506,
                    125
                ],
                "self.level": [
                    171,
                    144,
                    115,
                    118,
                    123,
                    124,
                    125
                ],
                "self.index._get_level_number": [
                    115
                ],
                "level": [
                    512,
                    394,
                    395,
                    398,
                    400,
                    403,
                    404,
                    408,
                    413,
                    417,
                    299,
                    427,
                    301,
                    302,
                    435,
                    570,
                    572,
                    576,
                    582,
                    586,
                    587,
                    592,
                    597,
                    476,
                    989,
                    991,
                    115
                ],
                "self.lift": [
                    259,
                    265,
                    171,
                    174,
                    118,
                    282,
                    286
                ],
                "self.index.codes": [
                    146,
                    118
                ],
                "self.new_index_levels": [
                    161,
                    131,
                    298,
                    299,
                    305,
                    120,
                    124
                ],
                "list": [
                    517,
                    648,
                    394,
                    524,
                    146,
                    147,
                    723,
                    724,
                    120,
                    121,
                    542
                ],
                "self.index.levels": [
                    120,
                    147
                ],
                "self.new_index_names": [
                    121,
                    123,
                    302,
                    307
                ],
                "self.index.names": [
                    121
                ],
                "self.removed_name": [
                    260,
                    263,
                    270,
                    275,
                    123
                ],
                "self.new_index_names.pop": [
                    123
                ],
                "self.removed_level": [
                    132,
                    260,
                    262,
                    265,
                    279,
                    281,
                    124
                ],
                "self.new_index_levels.pop": [
                    124
                ],
                "self.removed_level_full": [
                    269,
                    274,
                    279,
                    281,
                    125
                ],
                "index.levels": [
                    324,
                    125,
                    327
                ],
                "num_rows": [
                    137,
                    131,
                    135
                ],
                "np.max": [
                    131
                ],
                "index_level.size": [
                    131
                ],
                "index_level": [
                    131
                ],
                "num_columns": [
                    137,
                    132,
                    135
                ],
                "self.removed_level.size": [
                    132
                ],
                "num_cells": [
                    137,
                    135
                ],
                "np.multiply": [
                    135
                ],
                "np.int32": [
                    135
                ],
                "self._make_sorted_values_labels": [
                    140
                ],
                "self._make_selectors": [
                    141
                ],
                "v": [
                    144,
                    362,
                    148,
                    149
                ],
                "codes": [
                    971,
                    1035,
                    973,
                    1039,
                    146,
                    531,
                    148,
                    1010,
                    534,
                    951,
                    1011,
                    1014,
                    506,
                    507
                ],
                "levs": [
                    147,
                    149
                ],
                "to_sort": [
                    148,
                    158,
                    151
                ],
                "sizes": [
                    149,
                    151
                ],
                "len": [
                    1024,
                    647,
                    265,
                    266,
                    395,
                    149,
                    279,
                    152,
                    670,
                    165,
                    168,
                    298,
                    684,
                    301,
                    178,
                    313,
                    964,
                    968,
                    586,
                    331,
                    205,
                    717,
                    973,
                    720,
                    977,
                    980,
                    473,
                    359,
                    878,
                    880,
                    1008,
                    1009,
                    505
                ],
                "x": [
                    331,
                    700,
                    149,
                    165
                ],
                "comp_index": [
                    167,
                    170,
                    174,
                    181,
                    151,
                    184,
                    154
                ],
                "obs_ids": [
                    167,
                    168,
                    334,
                    335,
                    339,
                    342,
                    183,
                    152,
                    151
                ],
                "get_compressed_ids": [
                    167,
                    151
                ],
                "ngroups": [
                    168,
                    172,
                    152,
                    154,
                    184
                ],
                "indexer": [
                    154,
                    155,
                    157,
                    158
                ],
                "libalgos.groupsort_indexer": [
                    154
                ],
                "libalgos": [
                    154
                ],
                "ensure_platform_int": [
                    170,
                    155
                ],
                "self.sorted_values": [
                    226,
                    157,
                    207
                ],
                "algos.take_nd": [
                    157
                ],
                "algos": [
                    157
                ],
                "self.sorted_labels": [
                    164,
                    174,
                    158,
                    295
                ],
                "l.take": [
                    158
                ],
                "l": [
                    158
                ],
                "new_levels": [
                    161,
                    353,
                    291,
                    737,
                    165,
                    517,
                    521,
                    269,
                    527,
                    274,
                    723,
                    374,
                    728,
                    732,
                    382
                ],
                "remaining_labels": [
                    164,
                    167
                ],
                "level_sizes": [
                    165,
                    167
                ],
                "stride": [
                    198,
                    199,
                    265,
                    171,
                    172,
                    267,
                    174,
                    207,
                    244,
                    286
                ],
                "self.index.levshape": [
                    171
                ],
                "self.full_shape": [
                    172,
                    197,
                    175
                ],
                "selector": [
                    176,
                    174
                ],
                "mask": [
                    201,
                    202,
                    175,
                    176,
                    560,
                    178,
                    243,
                    561,
                    562,
                    182,
                    1010,
                    1011,
                    1012
                ],
                "np.zeros": [
                    223,
                    175
                ],
                "np.prod": [
                    175
                ],
                "bool": [
                    1002,
                    223,
                    211,
                    175
                ],
                "mask.put": [
                    176
                ],
                "mask.sum": [
                    178
                ],
                "self.group_index": [
                    181
                ],
                "self.mask": [
                    201,
                    182
                ],
                "self.unique_groups": [
                    183
                ],
                "self.compressor": [
                    184,
                    295
                ],
                "comp_index.searchsorted": [
                    184
                ],
                "np.arange": [
                    964,
                    267,
                    505,
                    1012,
                    1079,
                    184,
                    473,
                    286,
                    703
                ],
                "_": [
                    548,
                    1009,
                    658,
                    187,
                    700
                ],
                "self.get_new_values": [
                    187
                ],
                "columns": [
                    865,
                    868,
                    904,
                    618,
                    619,
                    907,
                    621,
                    624,
                    863,
                    188,
                    191
                ],
                "self.get_new_columns": [
                    188
                ],
                "self.get_new_index": [
                    189
                ],
                "length": [
                    200,
                    245,
                    197,
                    207
                ],
                "width": [
                    289,
                    197,
                    199,
                    266,
                    267,
                    207,
                    246
                ],
                "result_width": [
                    200,
                    199
                ],
                "result_shape": [
                    200,
                    209,
                    211,
                    217,
                    220,
                    223
                ],
                "mask_all": [
                    202,
                    205,
                    215
                ],
                "mask.all": [
                    202
                ],
                "new_values": [
                    547,
                    550,
                    233,
                    553,
                    236,
                    557,
                    206,
                    560,
                    561,
                    212,
                    564,
                    247,
                    217,
                    220,
                    221,
                    253,
                    255
                ],
                "reshape": [
                    703,
                    1079,
                    207
                ],
                "swapaxes": [
                    207
                ],
                "self.sorted_values.reshape": [
                    207
                ],
                "new_mask": [
                    223,
                    211,
                    212,
                    248,
                    255
                ],
                "np.ones": [
                    1024,
                    211
                ],
                "dtype": [
                    1024,
                    1027,
                    1035,
                    922,
                    543,
                    545,
                    546,
                    934,
                    696,
                    953,
                    954,
                    955,
                    699,
                    957,
                    216,
                    217,
                    219,
                    220,
                    225,
                    1000,
                    1002
                ],
                "values.dtype": [
                    216,
                    219,
                    253
                ],
                "np.empty": [
                    217,
                    220
                ],
                "maybe_promote": [
                    219
                ],
                "new_values.fill": [
                    221
                ],
                "name": [
                    880,
                    225,
                    238
                ],
                "np.dtype": [
                    225,
                    955
                ],
                "sorted_values": [
                    226,
                    232,
                    235,
                    238,
                    242
                ],
                "needs_i8_conversion": [
                    252,
                    231
                ],
                "sorted_values.view": [
                    232
                ],
                "new_values.view": [
                    233,
                    253
                ],
                "is_bool_dtype": [
                    234
                ],
                "sorted_values.astype": [
                    235,
                    238
                ],
                "new_values.astype": [
                    236
                ],
                "libreshape.unstack": [
                    241
                ],
                "libreshape": [
                    241
                ],
                "mask.view": [
                    243
                ],
                "new_mask.view": [
                    248
                ],
                "self.removed_level._shallow_copy": [
                    260
                ],
                "lev": [
                    576,
                    262,
                    263,
                    582,
                    587,
                    588,
                    651,
                    652,
                    593,
                    570,
                    572,
                    573
                ],
                "self.removed_level.insert": [
                    262
                ],
                "self.removed_level._na_value": [
                    262
                ],
                "lev.rename": [
                    263
                ],
                "propagator": [
                    272,
                    267,
                    276
                ],
                "np.repeat": [
                    267
                ],
                "isinstance": [
                    896,
                    385,
                    514,
                    898,
                    516,
                    394,
                    268,
                    406,
                    407,
                    683,
                    576,
                    961,
                    722,
                    348,
                    861,
                    993,
                    357,
                    370,
                    887,
                    889
                ],
                "MultiIndex": [
                    736,
                    290,
                    514,
                    516,
                    357,
                    268,
                    526,
                    304,
                    722,
                    532,
                    341,
                    660,
                    407,
                    381
                ],
                "self.value_columns.levels": [
                    269
                ],
                "new_names": [
                    737,
                    354,
                    291,
                    524,
                    525,
                    270,
                    527,
                    734,
                    275,
                    659,
                    660,
                    724,
                    375,
                    730,
                    382
                ],
                "self.value_columns.names": [
                    270
                ],
                "new_codes": [
                    289,
                    737,
                    291,
                    355,
                    518,
                    522,
                    527,
                    272,
                    276,
                    725,
                    729,
                    377,
                    379,
                    733,
                    382
                ],
                "lab.take": [
                    272,
                    295
                ],
                "lab": [
                    272,
                    725,
                    518,
                    295
                ],
                "self.value_columns.codes": [
                    272
                ],
                "self.value_columns.name": [
                    275
                ],
                "repeater": [
                    281,
                    283,
                    286,
                    289
                ],
                "self.removed_level_full.get_indexer": [
                    281
                ],
                "np.insert": [
                    283
                ],
                "new_codes.append": [
                    289,
                    522,
                    379,
                    733
                ],
                "np.tile": [
                    289,
                    522,
                    531,
                    733
                ],
                "result_codes": [
                    306,
                    299,
                    295
                ],
                "level_codes": [
                    733,
                    299,
                    652,
                    300,
                    651,
                    302,
                    668,
                    669,
                    670
                ],
                "any": [
                    300
                ],
                "level.insert": [
                    301
                ],
                "level._na_value": [
                    301
                ],
                "rename": [
                    302
                ],
                "level.take": [
                    302
                ],
                "clocs": [
                    320,
                    322,
                    324,
                    325,
                    326,
                    359,
                    360,
                    362,
                    313
                ],
                "data": [
                    901,
                    907,
                    911,
                    928,
                    951,
                    314,
                    318,
                    961,
                    962,
                    964,
                    969,
                    978,
                    348,
                    861,
                    349,
                    864,
                    993,
                    994,
                    868,
                    357,
                    358,
                    366,
                    1008,
                    375
                ],
                "data.index": [
                    962,
                    994,
                    318
                ],
                "index._get_level_number": [
                    320
                ],
                "i": [
                    320,
                    322,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    359,
                    360,
                    362,
                    632,
                    634,
                    635
                ],
                "rlocs": [
                    322,
                    327,
                    328,
                    329,
                    337
                ],
                "range": [
                    322,
                    359,
                    586,
                    1009,
                    632
                ],
                "index.nlevels": [
                    322
                ],
                "clevels": [
                    353,
                    331,
                    324,
                    374
                ],
                "ccodes": [
                    332,
                    325,
                    335
                ],
                "index.codes": [
                    328,
                    325
                ],
                "cnames": [
                    354,
                    326,
                    375
                ],
                "index.names": [
                    329,
                    326
                ],
                "rlevels": [
                    342,
                    327
                ],
                "rcodes": [
                    328,
                    343
                ],
                "rnames": [
                    344,
                    329
                ],
                "shape": [
                    331,
                    332,
                    335
                ],
                "group_index": [
                    332,
                    334
                ],
                "get_group_index": [
                    332
                ],
                "comp_ids": [
                    343,
                    334,
                    335
                ],
                "compress_group_index": [
                    334
                ],
                "recons_codes": [
                    378,
                    355,
                    335
                ],
                "decons_obs_group_ids": [
                    335
                ],
                "dummy_index": [
                    339,
                    341,
                    350,
                    367
                ],
                "Index": [
                    339
                ],
                "Series": [
                    385,
                    961,
                    993,
                    484,
                    1029,
                    370,
                    951,
                    348
                ],
                "dummy": [
                    352,
                    366,
                    367,
                    369,
                    915,
                    924,
                    349,
                    350
                ],
                "data.copy": [
                    349,
                    366
                ],
                "dummy.index": [
                    350,
                    367
                ],
                "unstacked": [
                    352,
                    385,
                    386,
                    388,
                    390,
                    369,
                    370,
                    371,
                    373
                ],
                "dummy.unstack": [
                    352,
                    369
                ],
                "data.columns": [
                    357,
                    375
                ],
                "result": [
                    482,
                    579,
                    605,
                    740,
                    358,
                    487,
                    936,
                    361,
                    490,
                    745,
                    364,
                    588,
                    747,
                    925,
                    571,
                    475,
                    573,
                    927
                ],
                "val": [
                    360,
                    361
                ],
                "result.unstack": [
                    361
                ],
                "unstcols": [
                    371,
                    373,
                    374,
                    377,
                    379
                ],
                "unstacked.index": [
                    386,
                    371
                ],
                "unstacked.columns": [
                    388,
                    373
                ],
                "unstcols.levels": [
                    374
                ],
                "data.columns.name": [
                    375
                ],
                "unstcols.codes": [
                    377,
                    379
                ],
                "rec": [
                    378,
                    379
                ],
                "rec.take": [
                    379
                ],
                "new_columns": [
                    386,
                    388,
                    740,
                    718,
                    660,
                    662,
                    663,
                    381
                ],
                "tuple": [
                    394
                ],
                "_unstack_multiple": [
                    398
                ],
                "obj": [
                    398,
                    404,
                    406,
                    407,
                    408,
                    410,
                    412,
                    413,
                    415,
                    416,
                    419,
                    425,
                    427,
                    429,
                    430,
                    433,
                    434,
                    436,
                    438
                ],
                "is_integer": [
                    403
                ],
                "obj.index._get_level_number": [
                    404
                ],
                "obj.index": [
                    416,
                    427,
                    434,
                    404,
                    407
                ],
                "_unstack_frame": [
                    408
                ],
                "obj.T.stack": [
                    410
                ],
                "obj.T": [
                    410
                ],
                "is_extension_array_dtype": [
                    545,
                    412,
                    693
                ],
                "obj.dtype": [
                    412
                ],
                "_unstack_extension_series": [
                    413
                ],
                "unstacker": [
                    421,
                    426,
                    429,
                    432,
                    440,
                    414
                ],
                "_Unstacker": [
                    432,
                    427,
                    414,
                    475
                ],
                "obj.values": [
                    433,
                    415
                ],
                "obj._constructor_expanddim": [
                    419
                ],
                "unstacker.get_result": [
                    440,
                    421
                ],
                "obj._is_mixed_type": [
                    425
                ],
                "partial": [
                    426
                ],
                "blocks": [
                    429,
                    430
                ],
                "obj._data.unstack": [
                    429
                ],
                "obj._data": [
                    429
                ],
                "obj._constructor": [
                    438,
                    430
                ],
                "obj.columns": [
                    436
                ],
                "dummy_arr": [
                    473,
                    476
                ],
                "series": [
                    480,
                    473,
                    476
                ],
                "get_result": [
                    475
                ],
                "series.index": [
                    476
                ],
                "out": [
                    483,
                    1031,
                    1032,
                    490,
                    479
                ],
                "extract_array": [
                    480
                ],
                "col": [
                    482,
                    899,
                    548,
                    1029,
                    486,
                    913,
                    916,
                    890,
                    1022
                ],
                "indices": [
                    482,
                    485
                ],
                "result.items": [
                    482
                ],
                "out.append": [
                    483
                ],
                "values.take": [
                    485
                ],
                "indices.values": [
                    485
                ],
                "result.index": [
                    487
                ],
                "concat": [
                    490,
                    925,
                    1031
                ],
                "result.columns": [
                    490
                ],
                "index.is_unique": [
                    504
                ],
                "categories": [
                    506,
                    507
                ],
                "factorize_from_iterable": [
                    951,
                    506,
                    727
                ],
                "N": [
                    1025,
                    550,
                    733,
                    522,
                    720,
                    1008,
                    531,
                    1012,
                    509,
                    702,
                    703
                ],
                "K": [
                    550,
                    518,
                    531,
                    509,
                    702,
                    703
                ],
                "frame.shape": [
                    509
                ],
                "frame": [
                    512,
                    514,
                    515,
                    516,
                    517,
                    518,
                    647,
                    520,
                    524,
                    525,
                    530,
                    535,
                    539,
                    542,
                    548,
                    553,
                    557,
                    564,
                    693,
                    694,
                    570,
                    571,
                    706,
                    579,
                    582,
                    734,
                    740,
                    626,
                    629,
                    632,
                    509
                ],
                "level_num": [
                    512,
                    515,
                    618,
                    619,
                    621,
                    622,
                    624,
                    629,
                    632,
                    734
                ],
                "frame.columns._get_level_number": [
                    512,
                    582
                ],
                "frame.columns": [
                    512,
                    514,
                    582,
                    647,
                    520,
                    525,
                    530,
                    629,
                    535,
                    632,
                    570,
                    734
                ],
                "_stack_multi_columns": [
                    515
                ],
                "dropna": [
                    515,
                    744,
                    588,
                    559,
                    573
                ],
                "frame.index": [
                    516,
                    517,
                    518,
                    524,
                    530,
                    535
                ],
                "frame.index.levels": [
                    517
                ],
                "lab.repeat": [
                    725,
                    518
                ],
                "frame.index.codes": [
                    518
                ],
                "clev": [
                    520,
                    521
                ],
                "clab": [
                    520,
                    531,
                    522,
                    530
                ],
                "factorize": [
                    520,
                    530
                ],
                "new_levels.append": [
                    521,
                    732
                ],
                "ravel": [
                    522,
                    531
                ],
                "frame.index.names": [
                    524
                ],
                "new_names.append": [
                    525,
                    734
                ],
                "frame.columns.name": [
                    525,
                    535
                ],
                "new_index": [
                    736,
                    740,
                    526,
                    562,
                    532,
                    564
                ],
                "levels": [
                    968,
                    973,
                    974,
                    977,
                    530,
                    983,
                    980,
                    533,
                    951,
                    991
                ],
                "ilab": [
                    530,
                    531
                ],
                "zip": [
                    649,
                    652,
                    913,
                    530,
                    1014,
                    1022
                ],
                "map": [
                    530
                ],
                "ilab.repeat": [
                    531
                ],
                "frame.index.name": [
                    535
                ],
                "frame._is_homogeneous_type": [
                    539,
                    693
                ],
                "dtypes": [
                    696,
                    542,
                    543
                ],
                "frame.dtypes.values": [
                    542
                ],
                "frame.dtypes": [
                    694,
                    542
                ],
                "arr": [
                    1080,
                    546,
                    547
                ],
                "dtype.construct_array_type": [
                    546,
                    699
                ],
                "arr._concat_same_type": [
                    547
                ],
                "col._values": [
                    548
                ],
                "frame.items": [
                    548
                ],
                "_reorder_for_extension_array_stack": [
                    550
                ],
                "frame.values.ravel": [
                    553,
                    557
                ],
                "frame.values": [
                    553,
                    557
                ],
                "notna": [
                    560
                ],
                "frame._constructor_sliced": [
                    564
                ],
                "all": [
                    576,
                    570
                ],
                "frame.columns.names": [
                    570,
                    734
                ],
                "stack": [
                    588,
                    573
                ],
                "int": [
                    576,
                    1048
                ],
                "updated_level": [
                    594,
                    596,
                    597,
                    591
                ],
                "other": [
                    592,
                    593,
                    594,
                    596
                ],
                "updated_level.append": [
                    594,
                    596
                ],
                "columns.names": [
                    624,
                    618,
                    619,
                    621
                ],
                "this": [
                    643,
                    644,
                    653,
                    659,
                    662,
                    667,
                    668,
                    674,
                    689,
                    696,
                    697,
                    702,
                    707,
                    709,
                    720,
                    722,
                    723,
                    724,
                    725,
                    727,
                    730,
                    626,
                    631,
                    637,
                    639
                ],
                "frame.copy": [
                    626
                ],
                "frame.columns.nlevels": [
                    632,
                    629
                ],
                "roll_columns": [
                    631,
                    634,
                    635,
                    636,
                    637
                ],
                "this.columns": [
                    674,
                    643,
                    707,
                    653,
                    689,
                    659,
                    662,
                    631,
                    696,
                    697,
                    667,
                    668,
                    637,
                    639
                ],
                "lev1": [
                    634,
                    636
                ],
                "_convert_level_number": [
                    634,
                    635,
                    643
                ],
                "lev2": [
                    635,
                    636
                ],
                "roll_columns.swaplevel": [
                    636
                ],
                "this.columns.is_lexsorted": [
                    639
                ],
                "level_to_sort": [
                    643,
                    644
                ],
                "this.sort_index": [
                    644
                ],
                "frame.columns.levels": [
                    647
                ],
                "tuples": [
                    648,
                    658
                ],
                "lev.take": [
                    651
                ],
                "this.columns.levels": [
                    667,
                    653,
                    662
                ],
                "this.columns.codes": [
                    668,
                    653
                ],
                "unique_groups": [
                    672,
                    658,
                    660,
                    663
                ],
                "key": [
                    672,
                    674,
                    676,
                    715,
                    658
                ],
                "itertools.groupby": [
                    658
                ],
                "itertools": [
                    888,
                    897,
                    658
                ],
                "this.columns.names": [
                    659,
                    662
                ],
                "MultiIndex.from_tuples": [
                    660
                ],
                "_shallow_copy": [
                    662
                ],
                "new_data": [
                    666,
                    715,
                    740
                ],
                "level_vals": [
                    690,
                    667,
                    732,
                    669
                ],
                "sorted": [
                    668
                ],
                "set": [
                    668
                ],
                "level_vals_used": [
                    691,
                    669
                ],
                "levsize": [
                    688,
                    729,
                    725,
                    670
                ],
                "drop_cols": [
                    676,
                    717,
                    718,
                    671
                ],
                "loc": [
                    674,
                    707,
                    709,
                    683,
                    684,
                    686,
                    689,
                    696,
                    697
                ],
                "this.columns.get_loc": [
                    674
                ],
                "KeyError": [
                    675
                ],
                "drop_cols.append": [
                    676
                ],
                "slice": [
                    683
                ],
                "slice_len": [
                    688,
                    684,
                    686
                ],
                "loc.stop": [
                    686
                ],
                "loc.start": [
                    686
                ],
                "chunk": [
                    689,
                    690,
                    691
                ],
                "this.loc": [
                    689
                ],
                "chunk.columns": [
                    690
                ],
                "level_vals.take": [
                    690
                ],
                "chunk.columns.codes": [
                    690
                ],
                "value_slice": [
                    704,
                    707,
                    709,
                    711,
                    713,
                    715,
                    691,
                    699
                ],
                "chunk.reindex": [
                    691
                ],
                "frame.dtypes.iloc": [
                    694
                ],
                "dtypes.iloc": [
                    696
                ],
                "subset": [
                    697,
                    700
                ],
                "_concat_same_type": [
                    699
                ],
                "x._values": [
                    700
                ],
                "subset.items": [
                    700
                ],
                "this.shape": [
                    702
                ],
                "idx": [
                    704,
                    1080,
                    1079,
                    703
                ],
                "T.ravel": [
                    1079,
                    703
                ],
                "T": [
                    1079,
                    703
                ],
                "value_slice.take": [
                    704
                ],
                "frame._is_mixed_type": [
                    706
                ],
                "this.values": [
                    709
                ],
                "value_slice.ndim": [
                    711
                ],
                "value_slice.ravel": [
                    713
                ],
                "new_columns.difference": [
                    718
                ],
                "this.index": [
                    722,
                    723,
                    724,
                    725,
                    727,
                    730
                ],
                "this.index.levels": [
                    723
                ],
                "this.index.names": [
                    724
                ],
                "this.index.codes": [
                    725
                ],
                "old_codes": [
                    729,
                    727
                ],
                "old_levels": [
                    728,
                    727
                ],
                "old_codes.repeat": [
                    729
                ],
                "this.index.name": [
                    730
                ],
                "frame._constructor": [
                    740
                ],
                "result.dropna": [
                    745
                ],
                "dtypes_to_encode": [
                    864,
                    859,
                    911
                ],
                "data_to_encode": [
                    864,
                    899,
                    868,
                    901,
                    878,
                    880,
                    913,
                    890,
                    893
                ],
                "data.select_dtypes": [
                    864,
                    911
                ],
                "is_list_like": [
                    865,
                    877
                ],
                "TypeError": [
                    866
                ],
                "len_msg": [
                    872,
                    882,
                    879
                ],
                "item": [
                    880,
                    877,
                    878
                ],
                "data_to_encode.shape": [
                    880,
                    901,
                    878
                ],
                "len_msg.format": [
                    879
                ],
                "check_len": [
                    884,
                    885
                ],
                "prefix": [
                    929,
                    989,
                    913,
                    884,
                    982,
                    887,
                    888,
                    889,
                    890,
                    892,
                    893,
                    991
                ],
                "prefix_sep": [
                    896,
                    897,
                    898,
                    899,
                    930,
                    913,
                    885,
                    989,
                    991
                ],
                "str": [
                    896,
                    987,
                    887
                ],
                "itertools.cycle": [
                    888,
                    897
                ],
                "dict": [
                    889,
                    898
                ],
                "data_to_encode.columns": [
                    890,
                    899,
                    893
                ],
                "data.shape": [
                    901
                ],
                "with_dummies": [
                    903,
                    907,
                    911,
                    924,
                    925
                ],
                "List": [
                    903
                ],
                "data.drop": [
                    907
                ],
                "pre": [
                    913,
                    917
                ],
                "sep": [
                    913,
                    918
                ],
                "data_to_encode.items": [
                    913
                ],
                "_get_dummies_1d": [
                    915,
                    927
                ],
                "dummy_na": [
                    931,
                    968,
                    972,
                    1037,
                    919
                ],
                "sparse": [
                    920,
                    932,
                    998
                ],
                "drop_first": [
                    933,
                    977,
                    1041,
                    921,
                    1017
                ],
                "with_dummies.append": [
                    924
                ],
                "np.uint8": [
                    954
                ],
                "is_object_dtype": [
                    957
                ],
                "get_empty_frame": [
                    969,
                    978
                ],
                "codes.copy": [
                    971
                ],
                "np.append": [
                    974
                ],
                "np.nan": [
                    974
                ],
                "number_of_cols": [
                    1035,
                    980
                ],
                "dummy_cols": [
                    1009,
                    1044,
                    1045,
                    983,
                    1021,
                    1022,
                    991
                ],
                "fstr": [
                    988,
                    989
                ],
                "fstr.format": [
                    989
                ],
                "_make_col_name": [
                    991
                ],
                "is_integer_dtype": [
                    1000
                ],
                "sparse_series": [
                    1031,
                    1029,
                    1007
                ],
                "sp_indices": [
                    1009,
                    1020,
                    1022,
                    1015
                ],
                "n_idx": [
                    1012,
                    1014
                ],
                "ndx": [
                    1014,
                    1015
                ],
                "code": [
                    1014,
                    1015
                ],
                "append": [
                    1015
                ],
                "ixs": [
                    1024,
                    1025,
                    1022
                ],
                "sarr": [
                    1029,
                    1023
                ],
                "SparseArray": [
                    1023
                ],
                "IntIndex": [
                    1025
                ],
                "sparse_series.append": [
                    1029
                ],
                "dummy_mat": [
                    1043,
                    1035,
                    1045,
                    1039
                ],
                "take": [
                    1035
                ],
                "np.eye": [
                    1035
                ],
                "n_rows": [
                    1079
                ],
                "n_columns": [
                    1079
                ],
                "arr.take": [
                    1080
                ]
            },
            "filtered_variables_in_file": {
                "np.ndarray": [
                    92
                ],
                "np": [
                    1024,
                    131,
                    135,
                    522,
                    267,
                    1035,
                    531,
                    283,
                    286,
                    289,
                    175,
                    1079,
                    184,
                    954,
                    955,
                    703,
                    964,
                    974,
                    211,
                    473,
                    217,
                    220,
                    92,
                    733,
                    223,
                    225,
                    101,
                    1012,
                    505
                ],
                "values.ndim": [
                    100
                ],
                "values": [
                    691,
                    187,
                    191,
                    194,
                    707,
                    198,
                    205,
                    216,
                    219,
                    480,
                    100,
                    101,
                    102,
                    231,
                    485,
                    234,
                    110,
                    252,
                    253
                ],
                "np.newaxis": [
                    101
                ],
                "self.values": [
                    194,
                    157,
                    102
                ],
                "self": [
                    258,
                    131,
                    132,
                    259,
                    260,
                    262,
                    263,
                    265,
                    266,
                    140,
                    141,
                    268,
                    269,
                    144,
                    270,
                    146,
                    147,
                    272,
                    274,
                    275,
                    279,
                    281,
                    282,
                    157,
                    158,
                    286,
                    161,
                    164,
                    295,
                    298,
                    171,
                    172,
                    299,
                    174,
                    175,
                    302,
                    305,
                    178,
                    307,
                    181,
                    182,
                    183,
                    184,
                    187,
                    188,
                    189,
                    191,
                    194,
                    197,
                    201,
                    207,
                    219,
                    226,
                    102,
                    103,
                    104,
                    108,
                    113,
                    115,
                    118,
                    120,
                    121,
                    123,
                    124,
                    125
                ],
                "self.value_columns": [
                    258,
                    103,
                    266,
                    268,
                    269,
                    270,
                    272,
                    274,
                    275
                ],
                "value_columns": [
                    110,
                    103
                ],
                "self.fill_value": [
                    104,
                    219
                ],
                "fill_value": [
                    352,
                    418,
                    1026,
                    485,
                    104,
                    1001,
                    427,
                    1003,
                    429,
                    398,
                    1005,
                    369,
                    437,
                    408,
                    219,
                    221,
                    413
                ],
                "constructor": [
                    106,
                    107,
                    108
                ],
                "DataFrame": [
                    960,
                    965,
                    903,
                    107,
                    1045,
                    406,
                    861
                ],
                "self.constructor": [
                    108,
                    191
                ],
                "values.shape": [
                    198,
                    110
                ],
                "self.index": [
                    171,
                    113,
                    146,
                    115,
                    147,
                    178,
                    118,
                    120,
                    121
                ],
                "index.remove_unused_levels": [
                    113
                ],
                "index": [
                    1029,
                    1045,
                    189,
                    318,
                    191,
                    320,
                    322,
                    962,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    586,
                    587,
                    964,
                    965,
                    994,
                    996,
                    113,
                    504,
                    505,
                    506,
                    125
                ],
                "self.level": [
                    171,
                    144,
                    115,
                    118,
                    123,
                    124,
                    125
                ],
                "self.index._get_level_number": [
                    115
                ],
                "level": [
                    512,
                    394,
                    395,
                    398,
                    400,
                    403,
                    404,
                    408,
                    413,
                    417,
                    299,
                    427,
                    301,
                    302,
                    435,
                    570,
                    572,
                    576,
                    582,
                    586,
                    587,
                    592,
                    597,
                    476,
                    989,
                    991,
                    115
                ],
                "self.lift": [
                    259,
                    265,
                    171,
                    174,
                    118,
                    282,
                    286
                ],
                "self.index.codes": [
                    146,
                    118
                ],
                "self.new_index_levels": [
                    161,
                    131,
                    298,
                    299,
                    305,
                    120,
                    124
                ],
                "self.index.levels": [
                    120,
                    147
                ],
                "self.new_index_names": [
                    121,
                    123,
                    302,
                    307
                ],
                "self.index.names": [
                    121
                ],
                "self.removed_name": [
                    260,
                    263,
                    270,
                    275,
                    123
                ],
                "self.new_index_names.pop": [
                    123
                ],
                "self.removed_level": [
                    132,
                    260,
                    262,
                    265,
                    279,
                    281,
                    124
                ],
                "self.new_index_levels.pop": [
                    124
                ],
                "self.removed_level_full": [
                    269,
                    274,
                    279,
                    281,
                    125
                ],
                "index.levels": [
                    324,
                    125,
                    327
                ],
                "num_rows": [
                    137,
                    131,
                    135
                ],
                "np.max": [
                    131
                ],
                "index_level.size": [
                    131
                ],
                "index_level": [
                    131
                ],
                "num_columns": [
                    137,
                    132,
                    135
                ],
                "self.removed_level.size": [
                    132
                ],
                "num_cells": [
                    137,
                    135
                ],
                "np.multiply": [
                    135
                ],
                "np.int32": [
                    135
                ],
                "self._make_sorted_values_labels": [
                    140
                ],
                "self._make_selectors": [
                    141
                ],
                "v": [
                    144,
                    362,
                    148,
                    149
                ],
                "codes": [
                    971,
                    1035,
                    973,
                    1039,
                    146,
                    531,
                    148,
                    1010,
                    534,
                    951,
                    1011,
                    1014,
                    506,
                    507
                ],
                "levs": [
                    147,
                    149
                ],
                "to_sort": [
                    148,
                    158,
                    151
                ],
                "sizes": [
                    149,
                    151
                ],
                "x": [
                    331,
                    700,
                    149,
                    165
                ],
                "comp_index": [
                    167,
                    170,
                    174,
                    181,
                    151,
                    184,
                    154
                ],
                "obs_ids": [
                    167,
                    168,
                    334,
                    335,
                    339,
                    342,
                    183,
                    152,
                    151
                ],
                "get_compressed_ids": [
                    167,
                    151
                ],
                "ngroups": [
                    168,
                    172,
                    152,
                    154,
                    184
                ],
                "indexer": [
                    154,
                    155,
                    157,
                    158
                ],
                "libalgos.groupsort_indexer": [
                    154
                ],
                "libalgos": [
                    154
                ],
                "ensure_platform_int": [
                    170,
                    155
                ],
                "self.sorted_values": [
                    226,
                    157,
                    207
                ],
                "algos.take_nd": [
                    157
                ],
                "algos": [
                    157
                ],
                "self.sorted_labels": [
                    164,
                    174,
                    158,
                    295
                ],
                "l.take": [
                    158
                ],
                "l": [
                    158
                ],
                "new_levels": [
                    161,
                    353,
                    291,
                    737,
                    165,
                    517,
                    521,
                    269,
                    527,
                    274,
                    723,
                    374,
                    728,
                    732,
                    382
                ],
                "remaining_labels": [
                    164,
                    167
                ],
                "level_sizes": [
                    165,
                    167
                ],
                "stride": [
                    198,
                    199,
                    265,
                    171,
                    172,
                    267,
                    174,
                    207,
                    244,
                    286
                ],
                "self.index.levshape": [
                    171
                ],
                "self.full_shape": [
                    172,
                    197,
                    175
                ],
                "selector": [
                    176,
                    174
                ],
                "mask": [
                    201,
                    202,
                    175,
                    176,
                    560,
                    178,
                    243,
                    561,
                    562,
                    182,
                    1010,
                    1011,
                    1012
                ],
                "np.zeros": [
                    223,
                    175
                ],
                "np.prod": [
                    175
                ],
                "mask.put": [
                    176
                ],
                "mask.sum": [
                    178
                ],
                "self.group_index": [
                    181
                ],
                "self.mask": [
                    201,
                    182
                ],
                "self.unique_groups": [
                    183
                ],
                "self.compressor": [
                    184,
                    295
                ],
                "comp_index.searchsorted": [
                    184
                ],
                "np.arange": [
                    964,
                    267,
                    505,
                    1012,
                    1079,
                    184,
                    473,
                    286,
                    703
                ],
                "_": [
                    548,
                    1009,
                    658,
                    187,
                    700
                ],
                "self.get_new_values": [
                    187
                ],
                "columns": [
                    865,
                    868,
                    904,
                    618,
                    619,
                    907,
                    621,
                    624,
                    863,
                    188,
                    191
                ],
                "self.get_new_columns": [
                    188
                ],
                "self.get_new_index": [
                    189
                ],
                "length": [
                    200,
                    245,
                    197,
                    207
                ],
                "width": [
                    289,
                    197,
                    199,
                    266,
                    267,
                    207,
                    246
                ],
                "result_width": [
                    200,
                    199
                ],
                "result_shape": [
                    200,
                    209,
                    211,
                    217,
                    220,
                    223
                ],
                "mask_all": [
                    202,
                    205,
                    215
                ],
                "mask.all": [
                    202
                ],
                "new_values": [
                    547,
                    550,
                    233,
                    553,
                    236,
                    557,
                    206,
                    560,
                    561,
                    212,
                    564,
                    247,
                    217,
                    220,
                    221,
                    253,
                    255
                ],
                "reshape": [
                    703,
                    1079,
                    207
                ],
                "swapaxes": [
                    207
                ],
                "self.sorted_values.reshape": [
                    207
                ],
                "new_mask": [
                    223,
                    211,
                    212,
                    248,
                    255
                ],
                "np.ones": [
                    1024,
                    211
                ],
                "dtype": [
                    1024,
                    1027,
                    1035,
                    922,
                    543,
                    545,
                    546,
                    934,
                    696,
                    953,
                    954,
                    955,
                    699,
                    957,
                    216,
                    217,
                    219,
                    220,
                    225,
                    1000,
                    1002
                ],
                "values.dtype": [
                    216,
                    219,
                    253
                ],
                "np.empty": [
                    217,
                    220
                ],
                "maybe_promote": [
                    219
                ],
                "new_values.fill": [
                    221
                ],
                "name": [
                    880,
                    225,
                    238
                ],
                "np.dtype": [
                    225,
                    955
                ],
                "sorted_values": [
                    226,
                    232,
                    235,
                    238,
                    242
                ],
                "needs_i8_conversion": [
                    252,
                    231
                ],
                "sorted_values.view": [
                    232
                ],
                "new_values.view": [
                    233,
                    253
                ],
                "is_bool_dtype": [
                    234
                ],
                "sorted_values.astype": [
                    235,
                    238
                ],
                "new_values.astype": [
                    236
                ],
                "libreshape.unstack": [
                    241
                ],
                "libreshape": [
                    241
                ],
                "mask.view": [
                    243
                ],
                "new_mask.view": [
                    248
                ],
                "self.removed_level._shallow_copy": [
                    260
                ],
                "lev": [
                    576,
                    262,
                    263,
                    582,
                    587,
                    588,
                    651,
                    652,
                    593,
                    570,
                    572,
                    573
                ],
                "self.removed_level.insert": [
                    262
                ],
                "self.removed_level._na_value": [
                    262
                ],
                "lev.rename": [
                    263
                ],
                "propagator": [
                    272,
                    267,
                    276
                ],
                "np.repeat": [
                    267
                ],
                "MultiIndex": [
                    736,
                    290,
                    514,
                    516,
                    357,
                    268,
                    526,
                    304,
                    722,
                    532,
                    341,
                    660,
                    407,
                    381
                ],
                "self.value_columns.levels": [
                    269
                ],
                "new_names": [
                    737,
                    354,
                    291,
                    524,
                    525,
                    270,
                    527,
                    734,
                    275,
                    659,
                    660,
                    724,
                    375,
                    730,
                    382
                ],
                "self.value_columns.names": [
                    270
                ],
                "new_codes": [
                    289,
                    737,
                    291,
                    355,
                    518,
                    522,
                    527,
                    272,
                    276,
                    725,
                    729,
                    377,
                    379,
                    733,
                    382
                ],
                "lab.take": [
                    272,
                    295
                ],
                "lab": [
                    272,
                    725,
                    518,
                    295
                ],
                "self.value_columns.codes": [
                    272
                ],
                "self.value_columns.name": [
                    275
                ],
                "repeater": [
                    281,
                    283,
                    286,
                    289
                ],
                "self.removed_level_full.get_indexer": [
                    281
                ],
                "np.insert": [
                    283
                ],
                "new_codes.append": [
                    289,
                    522,
                    379,
                    733
                ],
                "np.tile": [
                    289,
                    522,
                    531,
                    733
                ],
                "result_codes": [
                    306,
                    299,
                    295
                ],
                "level_codes": [
                    733,
                    299,
                    652,
                    300,
                    651,
                    302,
                    668,
                    669,
                    670
                ],
                "level.insert": [
                    301
                ],
                "level._na_value": [
                    301
                ],
                "rename": [
                    302
                ],
                "level.take": [
                    302
                ],
                "clocs": [
                    320,
                    322,
                    324,
                    325,
                    326,
                    359,
                    360,
                    362,
                    313
                ],
                "data": [
                    901,
                    907,
                    911,
                    928,
                    951,
                    314,
                    318,
                    961,
                    962,
                    964,
                    969,
                    978,
                    348,
                    861,
                    349,
                    864,
                    993,
                    994,
                    868,
                    357,
                    358,
                    366,
                    1008,
                    375
                ],
                "data.index": [
                    962,
                    994,
                    318
                ],
                "index._get_level_number": [
                    320
                ],
                "i": [
                    320,
                    322,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    359,
                    360,
                    362,
                    632,
                    634,
                    635
                ],
                "rlocs": [
                    322,
                    327,
                    328,
                    329,
                    337
                ],
                "index.nlevels": [
                    322
                ],
                "clevels": [
                    353,
                    331,
                    324,
                    374
                ],
                "ccodes": [
                    332,
                    325,
                    335
                ],
                "index.codes": [
                    328,
                    325
                ],
                "cnames": [
                    354,
                    326,
                    375
                ],
                "index.names": [
                    329,
                    326
                ],
                "rlevels": [
                    342,
                    327
                ],
                "rcodes": [
                    328,
                    343
                ],
                "rnames": [
                    344,
                    329
                ],
                "shape": [
                    331,
                    332,
                    335
                ],
                "group_index": [
                    332,
                    334
                ],
                "get_group_index": [
                    332
                ],
                "comp_ids": [
                    343,
                    334,
                    335
                ],
                "compress_group_index": [
                    334
                ],
                "recons_codes": [
                    378,
                    355,
                    335
                ],
                "decons_obs_group_ids": [
                    335
                ],
                "dummy_index": [
                    339,
                    341,
                    350,
                    367
                ],
                "Index": [
                    339
                ],
                "Series": [
                    385,
                    961,
                    993,
                    484,
                    1029,
                    370,
                    951,
                    348
                ],
                "dummy": [
                    352,
                    366,
                    367,
                    369,
                    915,
                    924,
                    349,
                    350
                ],
                "data.copy": [
                    349,
                    366
                ],
                "dummy.index": [
                    350,
                    367
                ],
                "unstacked": [
                    352,
                    385,
                    386,
                    388,
                    390,
                    369,
                    370,
                    371,
                    373
                ],
                "dummy.unstack": [
                    352,
                    369
                ],
                "data.columns": [
                    357,
                    375
                ],
                "result": [
                    482,
                    579,
                    605,
                    740,
                    358,
                    487,
                    936,
                    361,
                    490,
                    745,
                    364,
                    588,
                    747,
                    925,
                    571,
                    475,
                    573,
                    927
                ],
                "val": [
                    360,
                    361
                ],
                "result.unstack": [
                    361
                ],
                "unstcols": [
                    371,
                    373,
                    374,
                    377,
                    379
                ],
                "unstacked.index": [
                    386,
                    371
                ],
                "unstacked.columns": [
                    388,
                    373
                ],
                "unstcols.levels": [
                    374
                ],
                "data.columns.name": [
                    375
                ],
                "unstcols.codes": [
                    377,
                    379
                ],
                "rec": [
                    378,
                    379
                ],
                "rec.take": [
                    379
                ],
                "new_columns": [
                    386,
                    388,
                    740,
                    718,
                    660,
                    662,
                    663,
                    381
                ],
                "_unstack_multiple": [
                    398
                ],
                "obj": [
                    398,
                    404,
                    406,
                    407,
                    408,
                    410,
                    412,
                    413,
                    415,
                    416,
                    419,
                    425,
                    427,
                    429,
                    430,
                    433,
                    434,
                    436,
                    438
                ],
                "is_integer": [
                    403
                ],
                "obj.index._get_level_number": [
                    404
                ],
                "obj.index": [
                    416,
                    427,
                    434,
                    404,
                    407
                ],
                "_unstack_frame": [
                    408
                ],
                "obj.T.stack": [
                    410
                ],
                "obj.T": [
                    410
                ],
                "is_extension_array_dtype": [
                    545,
                    412,
                    693
                ],
                "obj.dtype": [
                    412
                ],
                "_unstack_extension_series": [
                    413
                ],
                "unstacker": [
                    421,
                    426,
                    429,
                    432,
                    440,
                    414
                ],
                "_Unstacker": [
                    432,
                    427,
                    414,
                    475
                ],
                "obj.values": [
                    433,
                    415
                ],
                "obj._constructor_expanddim": [
                    419
                ],
                "unstacker.get_result": [
                    440,
                    421
                ],
                "obj._is_mixed_type": [
                    425
                ],
                "partial": [
                    426
                ],
                "blocks": [
                    429,
                    430
                ],
                "obj._data.unstack": [
                    429
                ],
                "obj._data": [
                    429
                ],
                "obj._constructor": [
                    438,
                    430
                ],
                "obj.columns": [
                    436
                ],
                "dummy_arr": [
                    473,
                    476
                ],
                "series": [
                    480,
                    473,
                    476
                ],
                "get_result": [
                    475
                ],
                "series.index": [
                    476
                ],
                "out": [
                    483,
                    1031,
                    1032,
                    490,
                    479
                ],
                "extract_array": [
                    480
                ],
                "col": [
                    482,
                    899,
                    548,
                    1029,
                    486,
                    913,
                    916,
                    890,
                    1022
                ],
                "indices": [
                    482,
                    485
                ],
                "result.items": [
                    482
                ],
                "out.append": [
                    483
                ],
                "values.take": [
                    485
                ],
                "indices.values": [
                    485
                ],
                "result.index": [
                    487
                ],
                "concat": [
                    490,
                    925,
                    1031
                ],
                "result.columns": [
                    490
                ],
                "index.is_unique": [
                    504
                ],
                "categories": [
                    506,
                    507
                ],
                "factorize_from_iterable": [
                    951,
                    506,
                    727
                ],
                "N": [
                    1025,
                    550,
                    733,
                    522,
                    720,
                    1008,
                    531,
                    1012,
                    509,
                    702,
                    703
                ],
                "K": [
                    550,
                    518,
                    531,
                    509,
                    702,
                    703
                ],
                "frame.shape": [
                    509
                ],
                "frame": [
                    512,
                    514,
                    515,
                    516,
                    517,
                    518,
                    647,
                    520,
                    524,
                    525,
                    530,
                    535,
                    539,
                    542,
                    548,
                    553,
                    557,
                    564,
                    693,
                    694,
                    570,
                    571,
                    706,
                    579,
                    582,
                    734,
                    740,
                    626,
                    629,
                    632,
                    509
                ],
                "level_num": [
                    512,
                    515,
                    618,
                    619,
                    621,
                    622,
                    624,
                    629,
                    632,
                    734
                ],
                "frame.columns._get_level_number": [
                    512,
                    582
                ],
                "frame.columns": [
                    512,
                    514,
                    582,
                    647,
                    520,
                    525,
                    530,
                    629,
                    535,
                    632,
                    570,
                    734
                ],
                "_stack_multi_columns": [
                    515
                ],
                "dropna": [
                    515,
                    744,
                    588,
                    559,
                    573
                ],
                "frame.index": [
                    516,
                    517,
                    518,
                    524,
                    530,
                    535
                ],
                "frame.index.levels": [
                    517
                ],
                "lab.repeat": [
                    725,
                    518
                ],
                "frame.index.codes": [
                    518
                ],
                "clev": [
                    520,
                    521
                ],
                "clab": [
                    520,
                    531,
                    522,
                    530
                ],
                "factorize": [
                    520,
                    530
                ],
                "new_levels.append": [
                    521,
                    732
                ],
                "ravel": [
                    522,
                    531
                ],
                "frame.index.names": [
                    524
                ],
                "new_names.append": [
                    525,
                    734
                ],
                "frame.columns.name": [
                    525,
                    535
                ],
                "new_index": [
                    736,
                    740,
                    526,
                    562,
                    532,
                    564
                ],
                "levels": [
                    968,
                    973,
                    974,
                    977,
                    530,
                    983,
                    980,
                    533,
                    951,
                    991
                ],
                "ilab": [
                    530,
                    531
                ],
                "ilab.repeat": [
                    531
                ],
                "frame.index.name": [
                    535
                ],
                "frame._is_homogeneous_type": [
                    539,
                    693
                ],
                "dtypes": [
                    696,
                    542,
                    543
                ],
                "frame.dtypes.values": [
                    542
                ],
                "frame.dtypes": [
                    694,
                    542
                ],
                "arr": [
                    1080,
                    546,
                    547
                ],
                "dtype.construct_array_type": [
                    546,
                    699
                ],
                "arr._concat_same_type": [
                    547
                ],
                "col._values": [
                    548
                ],
                "frame.items": [
                    548
                ],
                "_reorder_for_extension_array_stack": [
                    550
                ],
                "frame.values.ravel": [
                    553,
                    557
                ],
                "frame.values": [
                    553,
                    557
                ],
                "notna": [
                    560
                ],
                "frame._constructor_sliced": [
                    564
                ],
                "frame.columns.names": [
                    570,
                    734
                ],
                "stack": [
                    588,
                    573
                ],
                "updated_level": [
                    594,
                    596,
                    597,
                    591
                ],
                "other": [
                    592,
                    593,
                    594,
                    596
                ],
                "updated_level.append": [
                    594,
                    596
                ],
                "columns.names": [
                    624,
                    618,
                    619,
                    621
                ],
                "this": [
                    643,
                    644,
                    653,
                    659,
                    662,
                    667,
                    668,
                    674,
                    689,
                    696,
                    697,
                    702,
                    707,
                    709,
                    720,
                    722,
                    723,
                    724,
                    725,
                    727,
                    730,
                    626,
                    631,
                    637,
                    639
                ],
                "frame.copy": [
                    626
                ],
                "frame.columns.nlevels": [
                    632,
                    629
                ],
                "roll_columns": [
                    631,
                    634,
                    635,
                    636,
                    637
                ],
                "this.columns": [
                    674,
                    643,
                    707,
                    653,
                    689,
                    659,
                    662,
                    631,
                    696,
                    697,
                    667,
                    668,
                    637,
                    639
                ],
                "lev1": [
                    634,
                    636
                ],
                "_convert_level_number": [
                    634,
                    635,
                    643
                ],
                "lev2": [
                    635,
                    636
                ],
                "roll_columns.swaplevel": [
                    636
                ],
                "this.columns.is_lexsorted": [
                    639
                ],
                "level_to_sort": [
                    643,
                    644
                ],
                "this.sort_index": [
                    644
                ],
                "frame.columns.levels": [
                    647
                ],
                "tuples": [
                    648,
                    658
                ],
                "lev.take": [
                    651
                ],
                "this.columns.levels": [
                    667,
                    653,
                    662
                ],
                "this.columns.codes": [
                    668,
                    653
                ],
                "unique_groups": [
                    672,
                    658,
                    660,
                    663
                ],
                "key": [
                    672,
                    674,
                    676,
                    715,
                    658
                ],
                "itertools.groupby": [
                    658
                ],
                "itertools": [
                    888,
                    897,
                    658
                ],
                "this.columns.names": [
                    659,
                    662
                ],
                "MultiIndex.from_tuples": [
                    660
                ],
                "_shallow_copy": [
                    662
                ],
                "new_data": [
                    666,
                    715,
                    740
                ],
                "level_vals": [
                    690,
                    667,
                    732,
                    669
                ],
                "level_vals_used": [
                    691,
                    669
                ],
                "levsize": [
                    688,
                    729,
                    725,
                    670
                ],
                "drop_cols": [
                    676,
                    717,
                    718,
                    671
                ],
                "loc": [
                    674,
                    707,
                    709,
                    683,
                    684,
                    686,
                    689,
                    696,
                    697
                ],
                "this.columns.get_loc": [
                    674
                ],
                "drop_cols.append": [
                    676
                ],
                "slice_len": [
                    688,
                    684,
                    686
                ],
                "loc.stop": [
                    686
                ],
                "loc.start": [
                    686
                ],
                "chunk": [
                    689,
                    690,
                    691
                ],
                "this.loc": [
                    689
                ],
                "chunk.columns": [
                    690
                ],
                "level_vals.take": [
                    690
                ],
                "chunk.columns.codes": [
                    690
                ],
                "value_slice": [
                    704,
                    707,
                    709,
                    711,
                    713,
                    715,
                    691,
                    699
                ],
                "chunk.reindex": [
                    691
                ],
                "frame.dtypes.iloc": [
                    694
                ],
                "dtypes.iloc": [
                    696
                ],
                "subset": [
                    697,
                    700
                ],
                "_concat_same_type": [
                    699
                ],
                "x._values": [
                    700
                ],
                "subset.items": [
                    700
                ],
                "this.shape": [
                    702
                ],
                "idx": [
                    704,
                    1080,
                    1079,
                    703
                ],
                "T.ravel": [
                    1079,
                    703
                ],
                "T": [
                    1079,
                    703
                ],
                "value_slice.take": [
                    704
                ],
                "frame._is_mixed_type": [
                    706
                ],
                "this.values": [
                    709
                ],
                "value_slice.ndim": [
                    711
                ],
                "value_slice.ravel": [
                    713
                ],
                "new_columns.difference": [
                    718
                ],
                "this.index": [
                    722,
                    723,
                    724,
                    725,
                    727,
                    730
                ],
                "this.index.levels": [
                    723
                ],
                "this.index.names": [
                    724
                ],
                "this.index.codes": [
                    725
                ],
                "old_codes": [
                    729,
                    727
                ],
                "old_levels": [
                    728,
                    727
                ],
                "old_codes.repeat": [
                    729
                ],
                "this.index.name": [
                    730
                ],
                "frame._constructor": [
                    740
                ],
                "result.dropna": [
                    745
                ],
                "dtypes_to_encode": [
                    864,
                    859,
                    911
                ],
                "data_to_encode": [
                    864,
                    899,
                    868,
                    901,
                    878,
                    880,
                    913,
                    890,
                    893
                ],
                "data.select_dtypes": [
                    864,
                    911
                ],
                "is_list_like": [
                    865,
                    877
                ],
                "len_msg": [
                    872,
                    882,
                    879
                ],
                "item": [
                    880,
                    877,
                    878
                ],
                "data_to_encode.shape": [
                    880,
                    901,
                    878
                ],
                "len_msg.format": [
                    879
                ],
                "check_len": [
                    884,
                    885
                ],
                "prefix": [
                    929,
                    989,
                    913,
                    884,
                    982,
                    887,
                    888,
                    889,
                    890,
                    892,
                    893,
                    991
                ],
                "prefix_sep": [
                    896,
                    897,
                    898,
                    899,
                    930,
                    913,
                    885,
                    989,
                    991
                ],
                "itertools.cycle": [
                    888,
                    897
                ],
                "data_to_encode.columns": [
                    890,
                    899,
                    893
                ],
                "data.shape": [
                    901
                ],
                "with_dummies": [
                    903,
                    907,
                    911,
                    924,
                    925
                ],
                "List": [
                    903
                ],
                "data.drop": [
                    907
                ],
                "pre": [
                    913,
                    917
                ],
                "sep": [
                    913,
                    918
                ],
                "data_to_encode.items": [
                    913
                ],
                "_get_dummies_1d": [
                    915,
                    927
                ],
                "dummy_na": [
                    931,
                    968,
                    972,
                    1037,
                    919
                ],
                "sparse": [
                    920,
                    932,
                    998
                ],
                "drop_first": [
                    933,
                    977,
                    1041,
                    921,
                    1017
                ],
                "with_dummies.append": [
                    924
                ],
                "np.uint8": [
                    954
                ],
                "is_object_dtype": [
                    957
                ],
                "get_empty_frame": [
                    969,
                    978
                ],
                "codes.copy": [
                    971
                ],
                "np.append": [
                    974
                ],
                "np.nan": [
                    974
                ],
                "number_of_cols": [
                    1035,
                    980
                ],
                "dummy_cols": [
                    1009,
                    1044,
                    1045,
                    983,
                    1021,
                    1022,
                    991
                ],
                "fstr": [
                    988,
                    989
                ],
                "fstr.format": [
                    989
                ],
                "_make_col_name": [
                    991
                ],
                "is_integer_dtype": [
                    1000
                ],
                "sparse_series": [
                    1031,
                    1029,
                    1007
                ],
                "sp_indices": [
                    1009,
                    1020,
                    1022,
                    1015
                ],
                "n_idx": [
                    1012,
                    1014
                ],
                "ndx": [
                    1014,
                    1015
                ],
                "code": [
                    1014,
                    1015
                ],
                "append": [
                    1015
                ],
                "ixs": [
                    1024,
                    1025,
                    1022
                ],
                "sarr": [
                    1029,
                    1023
                ],
                "SparseArray": [
                    1023
                ],
                "IntIndex": [
                    1025
                ],
                "sparse_series.append": [
                    1029
                ],
                "dummy_mat": [
                    1043,
                    1035,
                    1045,
                    1039
                ],
                "take": [
                    1035
                ],
                "np.eye": [
                    1035
                ],
                "n_rows": [
                    1079
                ],
                "n_columns": [
                    1079
                ],
                "arr.take": [
                    1080
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_89/pandas/tests/frame/test_reshape.py",
                "test_function": "test_unstacking_multi_index_df",
                "test_function_code": "def test_unstacking_multi_index_df():\n    # see gh-30740\n    df = DataFrame(\n        {\n            \"name\": [\"Alice\", \"Bob\"],\n            \"score\": [9.5, 8],\n            \"employed\": [False, True],\n            \"kids\": [0, 0],\n            \"gender\": [\"female\", \"male\"],\n        }\n    )\n    df = df.set_index([\"name\", \"employed\", \"kids\", \"gender\"])\n    df = df.unstack([\"gender\"], fill_value=0)\n    expected = df.unstack(\"employed\", fill_value=0).unstack(\"kids\", fill_value=0)\n    result = df.unstack([\"employed\", \"kids\"], fill_value=0)\n    expected = DataFrame(\n        [[9.5, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 8.0]],\n        index=Index([\"Alice\", \"Bob\"], name=\"name\"),\n        columns=MultiIndex.from_tuples(\n            [\n                (\"score\", \"female\", False, 0),\n                (\"score\", \"female\", True, 0),\n                (\"score\", \"male\", False, 0),\n                (\"score\", \"male\", True, 0),\n            ],\n            names=[None, \"gender\", \"employed\", \"kids\"],\n        ),\n    )\n    tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: DataFrame.iloc[:, 0] (column name=\"('score', 'female', False, 0)\") are different  DataFrame.iloc[:, 0] (column name=\"('score', 'female', False, 0)\") values are different (50.0 %) [left]:  [9.5, nan] [right]: [9.5, 0.0]",
                "full_test_error": "def test_unstacking_multi_index_df():\n        # see gh-30740\n        df = DataFrame(\n            {\n                \"name\": [\"Alice\", \"Bob\"],\n                \"score\": [9.5, 8],\n                \"employed\": [False, True],\n                \"kids\": [0, 0],\n                \"gender\": [\"female\", \"male\"],\n            }\n        )\n        df = df.set_index([\"name\", \"employed\", \"kids\", \"gender\"])\n        df = df.unstack([\"gender\"], fill_value=0)\n        expected = df.unstack(\"employed\", fill_value=0).unstack(\"kids\", fill_value=0)\n        result = df.unstack([\"employed\", \"kids\"], fill_value=0)\n        expected = DataFrame(\n            [[9.5, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 8.0]],\n            index=Index([\"Alice\", \"Bob\"], name=\"name\"),\n            columns=MultiIndex.from_tuples(\n                [\n                    (\"score\", \"female\", False, 0),\n                    (\"score\", \"female\", True, 0),\n                    (\"score\", \"male\", False, 0),\n                    (\"score\", \"male\", True, 0),\n                ],\n                names=[None, \"gender\", \"employed\", \"kids\"],\n            ),\n        )\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/frame/test_reshape.py:1161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 0] (column name=\"('score', 'female', False, 0)\") are different\nE   \nE   DataFrame.iloc[:, 0] (column name=\"('score', 'female', False, 0)\") values are different (50.0 %)\nE   [left]:  [9.5, nan]\nE   [right]: [9.5, 0.0]\n\npandas/_libs/testing.pyx:174: AssertionError",
                "traceback": "pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: DataFrame.iloc[:, 0] (column name=\"('score', 'female', False, 0)\") are different\nE   \nE   DataFrame.iloc[:, 0] (column name=\"('score', 'female', False, 0)\") values are different (50.0 %)\nE   [left]:  [9.5, nan]\nE   [right]: [9.5, 0.0]\n\npandas/_libs/testing.pyx:174: AssertionError",
                "test_function_decorators": []
            }
        ]
    }
}