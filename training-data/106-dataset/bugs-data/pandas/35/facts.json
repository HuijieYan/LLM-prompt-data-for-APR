{
    "1.1.1": "@cache_readonly\ndef _engine(self):\n    # To avoid a reference cycle, pass a weakref of self to _engine_type.\n    period = weakref.ref(self)\n    return self._engine_type(period, len(self))\n",
    "1.1.2": null,
    "1.2.1": "@inherit_names(['strftime', 'to_timestamp', 'asfreq', 'start_time', 'end_time'] + PeriodArray._field_ops, PeriodArray, wrap=True)\n@inherit_names(['is_leap_year', 'freq', '_format_native_types'], PeriodArray)\nclass PeriodIndex(DatetimeIndexOpsMixin, Int64Index)",
    "1.2.2": "Immutable ndarray holding ordinal values indicating regular periods in time.\n\nIndex keys are boxed to Period objects which carries the metadata (eg,\nfrequency information).\n\nParameters\n----------\ndata : array-like (1d int np.ndarray or PeriodArray), optional\n    Optional period-like data to construct index with.\ncopy : bool\n    Make a copy of input ndarray.\nfreq : str or period object, optional\n    One of pandas period strings or corresponding objects.\nyear : int, array, or Series, default None\nmonth : int, array, or Series, default None\nquarter : int, array, or Series, default None\nday : int, array, or Series, default None\nhour : int, array, or Series, default None\nminute : int, array, or Series, default None\nsecond : int, array, or Series, default None\ntz : object, default None\n    Timezone for converting datetime64 data to Periods.\ndtype : str or PeriodDtype, default None\n\nAttributes\n----------\nday\ndayofweek\ndayofyear\ndays_in_month\ndaysinmonth\nend_time\nfreq\nfreqstr\nhour\nis_leap_year\nminute\nmonth\nquarter\nqyear\nsecond\nstart_time\nweek\nweekday\nweekofyear\nyear\n\nMethods\n-------\nasfreq\nstrftime\nto_timestamp\n\nSee Also\n--------\nIndex : The base pandas Index type.\nPeriod : Represents a period of time.\nDatetimeIndex : Index with datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nperiod_range : Create a fixed-frequency PeriodIndex.\n\nExamples\n--------\n>>> idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)",
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_35/pandas/core/indexes/period.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_get_level_values_when_periods():\n    # GH33131. See also discussion in GH32669.\n    # This test can probably be removed when PeriodIndex._engine is removed.\n    from pandas import Period, PeriodIndex\n\n    idx = MultiIndex.from_arrays(\n        [PeriodIndex([Period(\"2019Q1\"), Period(\"2019Q2\")], name=\"b\")]\n    )\n    idx2 = MultiIndex.from_arrays(\n        [idx._get_level_values(level) for level in range(idx.nlevels)]\n    )\n    assert all(x.is_monotonic for x in idx2.levels)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_35/pandas/tests/indexes/multi/test_get_level_values.py"
    ],
    "2.1.1": [
        [
            "E   AttributeError: 'NoneType' object has no attribute 'view'"
        ]
    ],
    "2.1.2": [
        [
            "def test_get_level_values_when_periods():\n        # GH33131. See also discussion in GH32669.\n        # This test can probably be removed when PeriodIndex._engine is removed.\n        from pandas import Period, PeriodIndex\n    \n        idx = MultiIndex.from_arrays(\n            [PeriodIndex([Period(\"2019Q1\"), Period(\"2019Q2\")], name=\"b\")]\n        )\n        idx2 = MultiIndex.from_arrays(\n            [idx._get_level_values(level) for level in range(idx.nlevels)]\n        )\n>       assert all(x.is_monotonic for x in idx2.levels)\n\npandas/tests/indexes/multi/test_get_level_values.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/indexes/multi/test_get_level_values.py:105: in <genexpr>\n    assert all(x.is_monotonic for x in idx2.levels)\npandas/core/indexes/base.py:1548: in is_monotonic\n    return self.is_monotonic_increasing\npandas/core/indexes/base.py:1565: in is_monotonic_increasing\n    return self._engine.is_monotonic_increasing\npandas/_libs/index.pyx:172: in pandas._libs.index.IndexEngine.is_monotonic_increasing.__get__\n    self._do_monotonic_check()\npandas/_libs/index.pyx:187: in pandas._libs.index.IndexEngine._do_monotonic_check\n    values = self._get_index_values()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   return super(PeriodEngine, self).vgetter().view(\"i8\")",
            "\npandas/_libs/index.pyx:499: AttributeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self": "PeriodIndex(['2019Q1', '2019Q2'], dtype='period[Q-DEC]', freq='Q-DEC')",
                "self._engine_type": "<class 'pandas._libs.index.PeriodEngine'>"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "self": "PeriodIndex",
                "self._engine_type": "type"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "self._values": "<PeriodArray>\n['2019Q1', '2019Q2']\nLength: 2, dtype: period[Q-DEC]",
                "self": "PeriodIndex(['2019Q1', '2019Q2'], dtype='period[Q-DEC]', freq='Q-DEC')",
                "self._engine_type": "<class 'pandas._libs.index.PeriodEngine'>"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "self._values": "PeriodArray",
                "self": "PeriodIndex",
                "self._engine_type": "type"
            },
            {}
        ]
    ],
    "3.1.1": [
        "BUG: Copying PeriodIndex levels on MultiIndex loses weakrefs\n"
    ],
    "3.1.2": [
        "As per comment by @jacobaustin123:\nimport pandas as pd\nidx = pd.MultiIndex.from_arrays([pd.PeriodIndex([pd.Period(\"2019Q1\"), pd.Period(\"2019Q2\")], name='b')])\nidx2 = pd.MultiIndex.from_arrays([idx._get_level_values(level) for level in range(idx.nlevels)])\nall(x.is_monotonic for x in idx2.levels) # raises an error\n\nProblem description\nThe weakly referenced PeriodIndex er dropped before intended, so the PeriodEngine gets a None instead of the PeriodIndex.\n\nExpected Output\nThe above should return True.\n"
    ]
}