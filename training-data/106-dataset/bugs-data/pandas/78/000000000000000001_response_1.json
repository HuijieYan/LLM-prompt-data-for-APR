{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 7903,
            "file_name": "core/frame.py",
            "replace_code": "def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds):\n\n    if axis is None and (filter_type == \"bool\" or filter_type is None):\n        labels = None\n        constructor = None\n    else:\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n    \n    def f(data):\n        return op(data, axis=axis, skipna=skipna, **kwds)\n    \n    if numeric_only is True:\n        if axis == 1:\n            data = self.T\n            axis = 0\n        else:\n            data = self\n    \n        res = data._reduce(op, skipna=skipna, axis=axis, **kwds)\n        out_dtype = \"bool\" if filter_type == \"bool\" else None\n        out = self._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n        out.index = data.columns\n        return out\n    elif numeric_only is False:\n        data = self._get_bool_data() if filter_type == \"bool\" else self._get_numeric_data()\n    else:  # numeric_only is None\n        data = self.values\n    \n    try:\n        result = f(data)\n    except TypeError:\n        result = self.apply(f, axis=axis, result_type='reduce')\n    \n    if hasattr(result, \"dtype\") and np.issubdtype(result.dtype, np.object_):\n        if filter_type is None or filter_type == \"numeric\":\n            result = pd.to_numeric(result, errors='coerce')\n    \n    if constructor is not None:\n        result = pd.Series(result, index=labels)\n    return result"
        }
    ]
}