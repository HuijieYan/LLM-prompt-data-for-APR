{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 7903,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n\n    axis = self._get_axis_number(axis)\n    labels = self._get_agg_axis(axis)\n    constructor = self._constructor\n    \n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n    \n    if numeric_only is not None and axis in [0, 1]:\n        df = self\n        if numeric_only is True:\n            df = self._get_numeric_data()\n        if axis == 1:\n            df = df.T\n            axis = 0\n    \n        out_dtype = \"bool\" if filter_type == \"bool\" else None\n    \n        # After possibly _get_data and transposing, we are now in the\n        #  simple case where we can use BlockManager._reduce\n        res = df._data.reduce(op, axis=1, skipna=skipna, **kwds)\n        assert isinstance(res, dict)\n        if len(res):\n            assert len(res) == max(list(res.keys())) + 1, res.keys()\n        out = df._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n        out.index = df.columns\n        return out"
        }
    ]
}