{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 7903,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n\n    if axis is None and filter_type == \"bool\":\n        labels = None\n        constructor = None\n    else:\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n    \n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n    \n    if numeric_only and axis in [0, 1]:\n        if numeric_only is True:\n            data = self._get_numeric_data()\n        else:\n            data = self\n    \n        if axis == 1:\n            data = data.T\n            axis = 0\n    \n        res = data._data.reduce(op, axis=1, skipna=skipna, **kwds)\n        out = self._constructor_sliced(res, index=data.columns, dtype=\"bool\" if filter_type == \"bool\" else None)\n        return out\n    \n    values = self.values\n    result = f(values)\n    \n    if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n        if filter_type in [None, \"numeric\"]:\n            result = result.astype(np.float64)\n        elif filter_type == \"bool\" and notna(result).all():\n            result = result.astype(np.bool_)\n    \n    if constructor is not None:\n        result = self._constructor_sliced(result, index=labels)\n        \n    return result"
        }
    ]
}