{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 7903,
            "file_name": "core/frame.py",
            "replace_code": "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n\n    if axis is None and filter_type == \"bool\":\n        labels = None\n        constructor = None\n    else:\n        # TODO: Make other agg func handle axis=None properly\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n    \n    if numeric_only is not None and axis in [0, 1]:\n        df = self\n        if numeric_only is True:\n            data = self._get_numeric_data() if filter_type is None or filter_type == \"numeric\" else self._get_bool_data()\n            if axis == 1:\n                df = df.T\n                axis = 0\n    \n            out_dtype = \"bool\" if filter_type == \"bool\" else None\n    \n            res = df._data.reduce(op, axis=1, skipna=skipna, **kwds)\n            if len(res):\n                out = df._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n                out.index = df.columns\n                return out\n    \n    if numeric_only is None:\n        values = self.values\n        result = op(values, axis=axis, skipna=skipna, **kwds)\n        if filter_type == \"bool\" and notna(result).all():\n            result = result.astype(np.bool_)\n        return Series(result, index=labels)\n    \n    if numeric_only:\n        data = self._get_numeric_data()\n        values = data.values\n        result = op(values, axis=axis, skipna=skipna, **kwds)\n        return Series(result, index=labels)\n    \n    return None"
        }
    ]
}