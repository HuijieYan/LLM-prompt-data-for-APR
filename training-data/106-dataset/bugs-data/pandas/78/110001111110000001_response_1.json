{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 7903,
            "file_name": "/pandas/core/frame.py",
            "replace_code": "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n\n    axis = self._get_axis_number(axis)\n    if numeric_only is not None and axis in [0, 1]:\n        if numeric_only:\n            data = self._get_numeric_data()\n        else:\n            data = self._get_data(axis_matters=False)\n        if axis == 1:\n            data = data.T\n            axis = 0\n        out_dtype = \"bool\" if filter_type == \"bool\" else None\n        res = data._reduce(op, axis=1, skipna=skipna, **kwds)\n        out = self._constructor_sliced(res, index=data.columns, dtype=out_dtype)\n        out.index = self.columns\n        return out\n    if numeric_only is None:\n        values = self.values\n        try:\n            result = op(values, axis=axis, skipna=skipna, **kwds)\n        except TypeError:\n            data = self._get_data(axis_matters=False)\n            data_values = data.values\n            result = op(data_values, axis=axis, skipna=skipna, **kwds)\n            labels = data._get_agg_axis(axis)\n    else:\n        if numeric_only:\n            data = self._get_numeric_data()\n            data_values = data.values\n            labels = data._get_agg_axis(axis)\n        else:\n            values = self.values\n            result = op(values, axis=axis, skipna=skipna, **kwds)\n    if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n        if filter_type is None or filter_type == \"numeric\":\n            result = result.astype(np.float64)\n        elif filter_type == \"bool\" and notna(result).all():\n            result = result.astype(np.bool_)\n    if labels is None:\n        return result\n    return Series(result, index=labels)"
        }
    ]
}