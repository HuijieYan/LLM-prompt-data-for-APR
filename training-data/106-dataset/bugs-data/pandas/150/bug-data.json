{
    "pandas:150": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_150/pandas/core/dtypes/missing.py": {
            "buggy_functions": [
                {
                    "function_name": "array_equivalent",
                    "function_code": "def array_equivalent(left, right, strict_nan=False):\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                if left_value != right_value:\n                    return False\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    # numpy will will not allow this type of datetimelike vs integer comparison\n    elif is_datetimelike_v_numeric(left, right):\n        return False\n\n    # M8/m8\n    elif needs_i8_conversion(left) and needs_i8_conversion(right):\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)\n",
                    "decorators": [],
                    "docstring": "True if two arrays, left and right, have equal non-NaN elements, and NaNs\nin corresponding locations.  False otherwise. It is assumed that left and\nright are NumPy arrays of the same dtype. The behavior of this function\n(particularly with respect to NaNs) is not defined if the dtypes are\ndifferent.\n\nParameters\n----------\nleft, right : ndarrays\nstrict_nan : bool, default False\n    If True, consider NaN and None to be different.\n\nReturns\n-------\nb : bool\n    Returns True if the arrays are equivalent.\n\nExamples\n--------\n>>> array_equivalent(\n...     np.array([1, 2, np.nan]),\n...     np.array([1, 2, np.nan]))\nTrue\n>>> array_equivalent(\n...     np.array([1, np.nan, 2]),\n...     np.array([1, 2, np.nan]))\nFalse",
                    "start_line": 393,
                    "variables": {
                        "left": [
                            453,
                            424,
                            456,
                            458,
                            427,
                            461,
                            432,
                            465,
                            466,
                            437,
                            469,
                            440,
                            473,
                            474,
                            477
                        ],
                        "right": [
                            424,
                            456,
                            458,
                            427,
                            461,
                            432,
                            465,
                            466,
                            437,
                            470,
                            440,
                            473,
                            474,
                            477
                        ],
                        "np.asarray": [
                            424
                        ],
                        "np": [
                            477,
                            424,
                            456,
                            473,
                            444,
                            445
                        ],
                        "left.shape": [
                            456,
                            427
                        ],
                        "right.shape": [
                            456,
                            427
                        ],
                        "is_string_dtype": [
                            432
                        ],
                        "strict_nan": [
                            434
                        ],
                        "lib.array_equivalent_object": [
                            436
                        ],
                        "lib": [
                            436
                        ],
                        "ensure_object": [
                            437
                        ],
                        "left.ravel": [
                            437
                        ],
                        "right.ravel": [
                            437
                        ],
                        "left_value": [
                            440,
                            441,
                            444,
                            448
                        ],
                        "right_value": [
                            440,
                            441,
                            445,
                            448
                        ],
                        "zip": [
                            440
                        ],
                        "NaT": [
                            441
                        ],
                        "isinstance": [
                            444,
                            445
                        ],
                        "float": [
                            444,
                            445
                        ],
                        "np.isnan": [
                            444,
                            445
                        ],
                        "is_float_dtype": [
                            453
                        ],
                        "is_complex_dtype": [
                            453
                        ],
                        "np.prod": [
                            456
                        ],
                        "all": [
                            458
                        ],
                        "isna": [
                            458
                        ],
                        "is_datetimelike_v_numeric": [
                            461
                        ],
                        "needs_i8_conversion": [
                            465
                        ],
                        "is_dtype_equal": [
                            466
                        ],
                        "left.dtype": [
                            473,
                            466,
                            474
                        ],
                        "right.dtype": [
                            473,
                            466,
                            474
                        ],
                        "left.view": [
                            469
                        ],
                        "right.view": [
                            470
                        ],
                        "left.dtype.type": [
                            473
                        ],
                        "np.void": [
                            473
                        ],
                        "right.dtype.type": [
                            473
                        ],
                        "np.array_equal": [
                            477
                        ]
                    },
                    "filtered_variables": {
                        "left": [
                            453,
                            424,
                            456,
                            458,
                            427,
                            461,
                            432,
                            465,
                            466,
                            437,
                            469,
                            440,
                            473,
                            474,
                            477
                        ],
                        "right": [
                            424,
                            456,
                            458,
                            427,
                            461,
                            432,
                            465,
                            466,
                            437,
                            470,
                            440,
                            473,
                            474,
                            477
                        ],
                        "np.asarray": [
                            424
                        ],
                        "np": [
                            477,
                            424,
                            456,
                            473,
                            444,
                            445
                        ],
                        "left.shape": [
                            456,
                            427
                        ],
                        "right.shape": [
                            456,
                            427
                        ],
                        "is_string_dtype": [
                            432
                        ],
                        "strict_nan": [
                            434
                        ],
                        "lib.array_equivalent_object": [
                            436
                        ],
                        "lib": [
                            436
                        ],
                        "ensure_object": [
                            437
                        ],
                        "left.ravel": [
                            437
                        ],
                        "right.ravel": [
                            437
                        ],
                        "left_value": [
                            440,
                            441,
                            444,
                            448
                        ],
                        "right_value": [
                            440,
                            441,
                            445,
                            448
                        ],
                        "NaT": [
                            441
                        ],
                        "np.isnan": [
                            444,
                            445
                        ],
                        "is_float_dtype": [
                            453
                        ],
                        "is_complex_dtype": [
                            453
                        ],
                        "np.prod": [
                            456
                        ],
                        "isna": [
                            458
                        ],
                        "is_datetimelike_v_numeric": [
                            461
                        ],
                        "needs_i8_conversion": [
                            465
                        ],
                        "is_dtype_equal": [
                            466
                        ],
                        "left.dtype": [
                            473,
                            466,
                            474
                        ],
                        "right.dtype": [
                            473,
                            466,
                            474
                        ],
                        "left.view": [
                            469
                        ],
                        "right.view": [
                            470
                        ],
                        "left.dtype.type": [
                            473
                        ],
                        "np.void": [
                            473
                        ],
                        "right.dtype.type": [
                            473
                        ],
                        "np.array_equal": [
                            477
                        ]
                    },
                    "diff_line_number": 448,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "left": {
                                    "variable_value": "array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.shape": {
                                    "variable_value": "(2, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "right.shape": {
                                    "variable_value": "(2, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_string_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strict_nan": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lib.array_equivalent_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x116361170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x116361b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NaT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_complex_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetimelike_v_numeric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "left.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x116361170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x116361b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.void": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "left": {
                                    "variable_value": "array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.shape": {
                                    "variable_value": "(2, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "right.shape": {
                                    "variable_value": "(2, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_string_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strict_nan": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lib.array_equivalent_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x1194f53f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x1194f5440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NaT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_complex_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetimelike_v_numeric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "left.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x1194f53f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x1194f5440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.void": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "left": {
                                    "variable_value": "array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.shape": {
                                    "variable_value": "(2, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "right.shape": {
                                    "variable_value": "(2, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_string_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strict_nan": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lib.array_equivalent_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x1194f53f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x1194f5440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left_value": {
                                    "variable_value": "array([20, 30, 40], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "right_value": {
                                    "variable_value": "array([20, 30, 40], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "NaT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_complex_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetimelike_v_numeric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "left.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x1194f53f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x1194f5440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.void": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "left": {
                                    "variable_value": "array([[50, 50, 50],\n       [40, 40, 40]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "array([50, 40])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.shape": {
                                    "variable_value": "(2, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "right.shape": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_string_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strict_nan": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lib.array_equivalent_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x1194f5350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x1194de210>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NaT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_complex_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetimelike_v_numeric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "left.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x1194f5350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x1194de210>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.void": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "left": {
                                    "variable_value": "array([[50, 50, 50],\n       [40, 40, 40]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "right": {
                                    "variable_value": "array([50, 40])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.shape": {
                                    "variable_value": "(2, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "right.shape": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_string_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strict_nan": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lib.array_equivalent_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x1194f5350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x1194de210>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NaT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isnan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_complex_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.prod": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_datetimelike_v_numeric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_dtype_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "right.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "left.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x1194f5350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "right.view": {
                                    "variable_value": "<built-in method view of numpy.ndarray object at 0x1194de210>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "left.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.void": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right.dtype.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.array_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
                "def _isna_new(obj):\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.ndarray,\n            ABCIndexClass,\n            ABCExtensionArray,\n            ABCDatetimeArray,\n            ABCTimedeltaArray,\n        ),\n    ):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=isna))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return obj is None",
                "def _isna_old(obj):\n    \"\"\"Detect missing values. Treat None, NaN, INF, -INF as null.\n\n    Parameters\n    ----------\n    arr: ndarray or object value\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    \"\"\"\n    if is_scalar(obj):\n        return libmissing.checknull_old(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n        return _isna_ndarraylike_old(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=_isna_old))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike_old(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike_old(np.asarray(obj))\n    else:\n        return obj is None",
                "def _use_inf_as_na(key):\n    \"\"\"Option change callback for na/inf behaviour\n    Choose which replacement for numpy.isnan / -numpy.isfinite is used.\n\n    Parameters\n    ----------\n    flag: bool\n        True means treat None, NaN, INF, -INF as null (old way),\n        False means None and NaN are null, but INF, -INF are not null\n        (new way).\n\n    Notes\n    -----\n    This approach to setting global module values is discussed and\n    approved here:\n\n    * http://stackoverflow.com/questions/4859217/\n      programmatically-creating-variables-in-python/4859312#4859312\n    \"\"\"\n    flag = get_option(key)\n    if flag:\n        globals()[\"_isna\"] = _isna_old\n    else:\n        globals()[\"_isna\"] = _isna_new",
                "def _isna_ndarraylike(obj):\n    is_extension = is_extension_array_dtype(obj)\n\n    if not is_extension:\n        # Avoid accessing `.values` on things like\n        # PeriodIndex, which may be expensive.\n        values = getattr(obj, \"values\", obj)\n    else:\n        values = obj\n\n    dtype = values.dtype\n\n    if is_extension:\n        if isinstance(obj, (ABCIndexClass, ABCSeries)):\n            values = obj._values\n        else:\n            values = obj\n        result = values.isna()\n    elif isinstance(obj, ABCDatetimeArray):\n        return obj.isna()\n    elif is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            # object array of strings\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            # object array of non-strings\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj(values.ravel())\n            result[...] = vec.reshape(shape)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
                "def _isna_ndarraylike_old(obj):\n    values = getattr(obj, \"values\", obj)\n    dtype = values.dtype\n\n    if is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj_old(values.ravel())\n            result[:] = vec.reshape(shape)\n\n    elif is_datetime64_dtype(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = ~np.isfinite(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
                "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
                "def _isna_compat(arr, fill_value=np.nan):\n    \"\"\"\n    Parameters\n    ----------\n    arr: a numpy array\n    fill_value: fill value, default to np.nan\n\n    Returns\n    -------\n    True if we can fill using this fill_value\n    \"\"\"\n    dtype = arr.dtype\n    if isna(fill_value):\n        return not (is_bool_dtype(dtype) or is_integer_dtype(dtype))\n    return True",
                "def array_equivalent(left, right, strict_nan=False):\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                if left_value != right_value:\n                    return False\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    # numpy will will not allow this type of datetimelike vs integer comparison\n    elif is_datetimelike_v_numeric(left, right):\n        return False\n\n    # M8/m8\n    elif needs_i8_conversion(left) and needs_i8_conversion(right):\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
                "def _infer_fill_value(val):\n    \"\"\"\n    infer the fill value for the nan/NaT from the provided\n    scalar/ndarray/list-like if we are a NaT, return the correct dtyped\n    element to provide proper block construction\n    \"\"\"\n\n    if not is_list_like(val):\n        val = [val]\n    val = np.array(val, copy=False)\n    if is_datetimelike(val):\n        return np.array(\"NaT\", dtype=val.dtype)\n    elif is_object_dtype(val.dtype):\n        dtype = lib.infer_dtype(ensure_object(val), skipna=False)\n        if dtype in [\"datetime\", \"datetime64\"]:\n            return np.array(\"NaT\", dtype=_NS_DTYPE)\n        elif dtype in [\"timedelta\", \"timedelta64\"]:\n            return np.array(\"NaT\", dtype=_TD_DTYPE)\n    return np.nan",
                "def _maybe_fill(arr, fill_value=np.nan):\n    \"\"\"\n    if we have a compatible fill_value and arr dtype, then fill\n    \"\"\"\n    if _isna_compat(arr, fill_value):\n        arr.fill(fill_value)\n    return arr",
                "def na_value_for_dtype(dtype, compat=True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : boolean, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if (\n        is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n        or is_period_dtype(dtype)\n    ):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        return False\n    return np.nan",
                "def remove_na_arraylike(arr):\n    \"\"\"\n    Return array-like containing only true/non-NaN values, possibly empty.\n    \"\"\"\n    if is_extension_array_dtype(arr):\n        return arr[notna(arr)]\n    else:\n        return arr[notna(lib.values_from_object(arr))]",
                "def is_valid_nat_for_dtype(obj, dtype):\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))"
            ],
            "inscope_function_signatures": [
                "isna(obj)",
                "_isna_new(obj)",
                "_isna_old(obj)",
                "_use_inf_as_na(key)",
                "_isna_ndarraylike(obj)",
                "_isna_ndarraylike_old(obj)",
                "notna(obj)",
                "_isna_compat(arr, fill_value=np.nan)",
                "array_equivalent(left, right, strict_nan=False)",
                "_infer_fill_value(val)",
                "_maybe_fill(arr, fill_value=np.nan)",
                "na_value_for_dtype(dtype, compat=True)",
                "remove_na_arraylike(arr)",
                "is_valid_nat_for_dtype(obj, dtype)"
            ],
            "variables_in_file": {
                "isposinf_scalar": [
                    46
                ],
                "libmissing.isposinf_scalar": [
                    46
                ],
                "libmissing": [
                    132,
                    172,
                    46,
                    47,
                    277,
                    249
                ],
                "isneginf_scalar": [
                    47
                ],
                "libmissing.isneginf_scalar": [
                    47
                ],
                "_isna": [
                    124,
                    190
                ],
                "obj": [
                    131,
                    132,
                    259,
                    134,
                    260,
                    136,
                    266,
                    139,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    157,
                    287,
                    288,
                    171,
                    172,
                    174,
                    176,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    187,
                    581,
                    584,
                    586,
                    589,
                    220,
                    225,
                    227,
                    232,
                    233,
                    235,
                    237,
                    238,
                    367,
                    124
                ],
                "isnull": [
                    127
                ],
                "isna": [
                    388,
                    581,
                    458,
                    367,
                    151,
                    127
                ],
                "is_scalar": [
                    368,
                    131,
                    171
                ],
                "libmissing.checknull": [
                    132
                ],
                "isinstance": [
                    259,
                    134,
                    136,
                    138,
                    150,
                    152,
                    287,
                    174,
                    176,
                    178,
                    180,
                    182,
                    444,
                    445,
                    584,
                    586,
                    589,
                    232,
                    237
                ],
                "ABCMultiIndex": [
                    174,
                    134
                ],
                "NotImplementedError": [
                    175,
                    135
                ],
                "type": [
                    136,
                    176
                ],
                "ABCSeries": [
                    259,
                    232,
                    141,
                    178,
                    287
                ],
                "np.ndarray": [
                    178,
                    142
                ],
                "np": [
                    256,
                    142,
                    274,
                    276,
                    153,
                    155,
                    284,
                    548,
                    424,
                    552,
                    555,
                    178,
                    183,
                    185,
                    444,
                    445,
                    456,
                    584,
                    586,
                    589,
                    473,
                    477,
                    248,
                    489,
                    491,
                    495,
                    497,
                    498,
                    245,
                    501,
                    376
                ],
                "ABCIndexClass": [
                    232,
                    178,
                    143
                ],
                "ABCExtensionArray": [
                    144
                ],
                "ABCDatetimeArray": [
                    145,
                    237
                ],
                "ABCTimedeltaArray": [
                    146
                ],
                "_isna_ndarraylike": [
                    153,
                    155,
                    149
                ],
                "ABCGeneric": [
                    180,
                    150
                ],
                "obj._constructor": [
                    288,
                    260,
                    181,
                    151
                ],
                "obj._data.isna": [
                    181,
                    151
                ],
                "obj._data": [
                    181,
                    151
                ],
                "list": [
                    152,
                    182
                ],
                "np.asarray": [
                    153,
                    424,
                    183,
                    185,
                    155
                ],
                "object": [
                    153,
                    183
                ],
                "hasattr": [
                    184,
                    154
                ],
                "libmissing.checknull_old": [
                    172
                ],
                "_isna_ndarraylike_old": [
                    185,
                    179,
                    183
                ],
                "_isna_old": [
                    181,
                    214
                ],
                "_isna_new": [
                    216,
                    190
                ],
                "flag": [
                    212,
                    213
                ],
                "get_option": [
                    212
                ],
                "key": [
                    212
                ],
                "globals": [
                    216,
                    214
                ],
                "is_extension": [
                    220,
                    222,
                    231
                ],
                "is_extension_array_dtype": [
                    538,
                    220,
                    562
                ],
                "values": [
                    256,
                    225,
                    227,
                    229,
                    233,
                    266,
                    235,
                    236,
                    267,
                    271,
                    241,
                    274,
                    245,
                    277,
                    249,
                    282,
                    284,
                    254
                ],
                "getattr": [
                    225,
                    266
                ],
                "dtype": [
                    387,
                    389,
                    267,
                    269,
                    273,
                    536,
                    280,
                    538,
                    539,
                    541,
                    542,
                    543,
                    544,
                    547,
                    549,
                    553,
                    583,
                    585,
                    229,
                    493,
                    494,
                    239,
                    496,
                    243,
                    252
                ],
                "values.dtype": [
                    267,
                    229
                ],
                "obj._values": [
                    233
                ],
                "result": [
                    256,
                    288,
                    290,
                    260,
                    262,
                    282,
                    236,
                    274,
                    276,
                    245,
                    278,
                    248,
                    250,
                    284,
                    254
                ],
                "values.isna": [
                    236
                ],
                "obj.isna": [
                    238
                ],
                "is_string_dtype": [
                    432,
                    269,
                    239
                ],
                "shape": [
                    271,
                    241,
                    276,
                    278,
                    248,
                    250
                ],
                "values.shape": [
                    241,
                    274,
                    245,
                    271
                ],
                "is_string_like_dtype": [
                    273,
                    243
                ],
                "np.zeros": [
                    274,
                    245
                ],
                "bool": [
                    248,
                    274,
                    276,
                    245
                ],
                "np.empty": [
                    248,
                    276
                ],
                "vec": [
                    249,
                    250,
                    277,
                    278
                ],
                "libmissing.isnaobj": [
                    249
                ],
                "values.ravel": [
                    249,
                    277
                ],
                "vec.reshape": [
                    250,
                    278
                ],
                "needs_i8_conversion": [
                    465,
                    252
                ],
                "values.view": [
                    282,
                    254
                ],
                "iNaT": [
                    282,
                    254
                ],
                "np.isnan": [
                    256,
                    444,
                    445
                ],
                "obj.index": [
                    288,
                    260
                ],
                "obj.name": [
                    288,
                    260
                ],
                "libmissing.isnaobj_old": [
                    277
                ],
                "is_datetime64_dtype": [
                    280,
                    541
                ],
                "np.isfinite": [
                    284
                ],
                "res": [
                    368,
                    369,
                    370,
                    367
                ],
                "notnull": [
                    373
                ],
                "notna": [
                    565,
                    563,
                    373
                ],
                "np.nan": [
                    548,
                    552,
                    555,
                    498,
                    501,
                    376
                ],
                "arr.dtype": [
                    387
                ],
                "arr": [
                    387,
                    562,
                    563,
                    565,
                    505,
                    506,
                    507
                ],
                "fill_value": [
                    505,
                    506,
                    388
                ],
                "is_bool_dtype": [
                    553,
                    389
                ],
                "is_integer_dtype": [
                    549,
                    389
                ],
                "left": [
                    453,
                    424,
                    456,
                    458,
                    427,
                    461,
                    432,
                    465,
                    466,
                    437,
                    469,
                    440,
                    473,
                    474,
                    477
                ],
                "right": [
                    424,
                    456,
                    458,
                    427,
                    461,
                    432,
                    465,
                    466,
                    437,
                    470,
                    440,
                    473,
                    474,
                    477
                ],
                "left.shape": [
                    456,
                    427
                ],
                "right.shape": [
                    456,
                    427
                ],
                "strict_nan": [
                    434
                ],
                "lib.array_equivalent_object": [
                    436
                ],
                "lib": [
                    581,
                    565,
                    436,
                    493
                ],
                "ensure_object": [
                    493,
                    437
                ],
                "left.ravel": [
                    437
                ],
                "right.ravel": [
                    437
                ],
                "left_value": [
                    440,
                    441,
                    444,
                    448
                ],
                "right_value": [
                    440,
                    441,
                    445,
                    448
                ],
                "zip": [
                    440
                ],
                "NaT": [
                    441,
                    546
                ],
                "float": [
                    444,
                    445
                ],
                "is_float_dtype": [
                    547,
                    453
                ],
                "is_complex_dtype": [
                    453
                ],
                "np.prod": [
                    456
                ],
                "all": [
                    458
                ],
                "is_datetimelike_v_numeric": [
                    461
                ],
                "is_dtype_equal": [
                    466
                ],
                "left.dtype": [
                    473,
                    466,
                    474
                ],
                "right.dtype": [
                    473,
                    466,
                    474
                ],
                "left.view": [
                    469
                ],
                "right.view": [
                    470
                ],
                "left.dtype.type": [
                    473
                ],
                "np.void": [
                    473
                ],
                "right.dtype.type": [
                    473
                ],
                "np.array_equal": [
                    477
                ],
                "is_list_like": [
                    487
                ],
                "val": [
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493
                ],
                "np.array": [
                    489,
                    491,
                    497,
                    495
                ],
                "is_datetimelike": [
                    490
                ],
                "val.dtype": [
                    491,
                    492
                ],
                "is_object_dtype": [
                    492
                ],
                "lib.infer_dtype": [
                    493
                ],
                "_NS_DTYPE": [
                    495
                ],
                "_TD_DTYPE": [
                    497
                ],
                "_isna_compat": [
                    505
                ],
                "arr.fill": [
                    506
                ],
                "pandas_dtype": [
                    536
                ],
                "dtype.na_value": [
                    539
                ],
                "is_datetime64tz_dtype": [
                    542
                ],
                "is_timedelta64_dtype": [
                    543
                ],
                "is_period_dtype": [
                    544
                ],
                "compat": [
                    550
                ],
                "lib.values_from_object": [
                    565
                ],
                "lib.is_scalar": [
                    581
                ],
                "dtype.kind": [
                    585,
                    583
                ],
                "np.timedelta64": [
                    584,
                    589
                ],
                "np.datetime64": [
                    586,
                    589
                ]
            },
            "filtered_variables_in_file": {
                "isposinf_scalar": [
                    46
                ],
                "libmissing.isposinf_scalar": [
                    46
                ],
                "libmissing": [
                    132,
                    172,
                    46,
                    47,
                    277,
                    249
                ],
                "isneginf_scalar": [
                    47
                ],
                "libmissing.isneginf_scalar": [
                    47
                ],
                "_isna": [
                    124,
                    190
                ],
                "obj": [
                    131,
                    132,
                    259,
                    134,
                    260,
                    136,
                    266,
                    139,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    157,
                    287,
                    288,
                    171,
                    172,
                    174,
                    176,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    187,
                    581,
                    584,
                    586,
                    589,
                    220,
                    225,
                    227,
                    232,
                    233,
                    235,
                    237,
                    238,
                    367,
                    124
                ],
                "isnull": [
                    127
                ],
                "isna": [
                    388,
                    581,
                    458,
                    367,
                    151,
                    127
                ],
                "is_scalar": [
                    368,
                    131,
                    171
                ],
                "libmissing.checknull": [
                    132
                ],
                "ABCMultiIndex": [
                    174,
                    134
                ],
                "ABCSeries": [
                    259,
                    232,
                    141,
                    178,
                    287
                ],
                "np.ndarray": [
                    178,
                    142
                ],
                "np": [
                    256,
                    142,
                    274,
                    276,
                    153,
                    155,
                    284,
                    548,
                    424,
                    552,
                    555,
                    178,
                    183,
                    185,
                    444,
                    445,
                    456,
                    584,
                    586,
                    589,
                    473,
                    477,
                    248,
                    489,
                    491,
                    495,
                    497,
                    498,
                    245,
                    501,
                    376
                ],
                "ABCIndexClass": [
                    232,
                    178,
                    143
                ],
                "ABCExtensionArray": [
                    144
                ],
                "ABCDatetimeArray": [
                    145,
                    237
                ],
                "ABCTimedeltaArray": [
                    146
                ],
                "_isna_ndarraylike": [
                    153,
                    155,
                    149
                ],
                "ABCGeneric": [
                    180,
                    150
                ],
                "obj._constructor": [
                    288,
                    260,
                    181,
                    151
                ],
                "obj._data.isna": [
                    181,
                    151
                ],
                "obj._data": [
                    181,
                    151
                ],
                "np.asarray": [
                    153,
                    424,
                    183,
                    185,
                    155
                ],
                "libmissing.checknull_old": [
                    172
                ],
                "_isna_ndarraylike_old": [
                    185,
                    179,
                    183
                ],
                "_isna_old": [
                    181,
                    214
                ],
                "_isna_new": [
                    216,
                    190
                ],
                "flag": [
                    212,
                    213
                ],
                "get_option": [
                    212
                ],
                "key": [
                    212
                ],
                "is_extension": [
                    220,
                    222,
                    231
                ],
                "is_extension_array_dtype": [
                    538,
                    220,
                    562
                ],
                "values": [
                    256,
                    225,
                    227,
                    229,
                    233,
                    266,
                    235,
                    236,
                    267,
                    271,
                    241,
                    274,
                    245,
                    277,
                    249,
                    282,
                    284,
                    254
                ],
                "dtype": [
                    387,
                    389,
                    267,
                    269,
                    273,
                    536,
                    280,
                    538,
                    539,
                    541,
                    542,
                    543,
                    544,
                    547,
                    549,
                    553,
                    583,
                    585,
                    229,
                    493,
                    494,
                    239,
                    496,
                    243,
                    252
                ],
                "values.dtype": [
                    267,
                    229
                ],
                "obj._values": [
                    233
                ],
                "result": [
                    256,
                    288,
                    290,
                    260,
                    262,
                    282,
                    236,
                    274,
                    276,
                    245,
                    278,
                    248,
                    250,
                    284,
                    254
                ],
                "values.isna": [
                    236
                ],
                "obj.isna": [
                    238
                ],
                "is_string_dtype": [
                    432,
                    269,
                    239
                ],
                "shape": [
                    271,
                    241,
                    276,
                    278,
                    248,
                    250
                ],
                "values.shape": [
                    241,
                    274,
                    245,
                    271
                ],
                "is_string_like_dtype": [
                    273,
                    243
                ],
                "np.zeros": [
                    274,
                    245
                ],
                "np.empty": [
                    248,
                    276
                ],
                "vec": [
                    249,
                    250,
                    277,
                    278
                ],
                "libmissing.isnaobj": [
                    249
                ],
                "values.ravel": [
                    249,
                    277
                ],
                "vec.reshape": [
                    250,
                    278
                ],
                "needs_i8_conversion": [
                    465,
                    252
                ],
                "values.view": [
                    282,
                    254
                ],
                "iNaT": [
                    282,
                    254
                ],
                "np.isnan": [
                    256,
                    444,
                    445
                ],
                "obj.index": [
                    288,
                    260
                ],
                "obj.name": [
                    288,
                    260
                ],
                "libmissing.isnaobj_old": [
                    277
                ],
                "is_datetime64_dtype": [
                    280,
                    541
                ],
                "np.isfinite": [
                    284
                ],
                "res": [
                    368,
                    369,
                    370,
                    367
                ],
                "notnull": [
                    373
                ],
                "notna": [
                    565,
                    563,
                    373
                ],
                "np.nan": [
                    548,
                    552,
                    555,
                    498,
                    501,
                    376
                ],
                "arr.dtype": [
                    387
                ],
                "arr": [
                    387,
                    562,
                    563,
                    565,
                    505,
                    506,
                    507
                ],
                "fill_value": [
                    505,
                    506,
                    388
                ],
                "is_bool_dtype": [
                    553,
                    389
                ],
                "is_integer_dtype": [
                    549,
                    389
                ],
                "left": [
                    453,
                    424,
                    456,
                    458,
                    427,
                    461,
                    432,
                    465,
                    466,
                    437,
                    469,
                    440,
                    473,
                    474,
                    477
                ],
                "right": [
                    424,
                    456,
                    458,
                    427,
                    461,
                    432,
                    465,
                    466,
                    437,
                    470,
                    440,
                    473,
                    474,
                    477
                ],
                "left.shape": [
                    456,
                    427
                ],
                "right.shape": [
                    456,
                    427
                ],
                "strict_nan": [
                    434
                ],
                "lib.array_equivalent_object": [
                    436
                ],
                "lib": [
                    581,
                    565,
                    436,
                    493
                ],
                "ensure_object": [
                    493,
                    437
                ],
                "left.ravel": [
                    437
                ],
                "right.ravel": [
                    437
                ],
                "left_value": [
                    440,
                    441,
                    444,
                    448
                ],
                "right_value": [
                    440,
                    441,
                    445,
                    448
                ],
                "NaT": [
                    441,
                    546
                ],
                "is_float_dtype": [
                    547,
                    453
                ],
                "is_complex_dtype": [
                    453
                ],
                "np.prod": [
                    456
                ],
                "is_datetimelike_v_numeric": [
                    461
                ],
                "is_dtype_equal": [
                    466
                ],
                "left.dtype": [
                    473,
                    466,
                    474
                ],
                "right.dtype": [
                    473,
                    466,
                    474
                ],
                "left.view": [
                    469
                ],
                "right.view": [
                    470
                ],
                "left.dtype.type": [
                    473
                ],
                "np.void": [
                    473
                ],
                "right.dtype.type": [
                    473
                ],
                "np.array_equal": [
                    477
                ],
                "is_list_like": [
                    487
                ],
                "val": [
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493
                ],
                "np.array": [
                    489,
                    491,
                    497,
                    495
                ],
                "is_datetimelike": [
                    490
                ],
                "val.dtype": [
                    491,
                    492
                ],
                "is_object_dtype": [
                    492
                ],
                "lib.infer_dtype": [
                    493
                ],
                "_NS_DTYPE": [
                    495
                ],
                "_TD_DTYPE": [
                    497
                ],
                "_isna_compat": [
                    505
                ],
                "arr.fill": [
                    506
                ],
                "pandas_dtype": [
                    536
                ],
                "dtype.na_value": [
                    539
                ],
                "is_datetime64tz_dtype": [
                    542
                ],
                "is_timedelta64_dtype": [
                    543
                ],
                "is_period_dtype": [
                    544
                ],
                "compat": [
                    550
                ],
                "lib.values_from_object": [
                    565
                ],
                "lib.is_scalar": [
                    581
                ],
                "dtype.kind": [
                    585,
                    583
                ],
                "np.timedelta64": [
                    584,
                    589
                ],
                "np.datetime64": [
                    586,
                    589
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_150/pandas/tests/dtypes/test_missing.py",
                "test_function": "test_array_equivalent_nested",
                "test_function_code": "def test_array_equivalent_nested():\n    # reached in groupby aggregations, make sure we use np.any when checking\n    #  if the comparison is truthy\n    left = np.array([np.array([50, 70, 90]), np.array([20, 30, 40])], dtype=object)\n    right = np.array([np.array([50, 70, 90]), np.array([20, 30, 40])], dtype=object)\n\n    assert array_equivalent(left, right, strict_nan=True)\n    assert not array_equivalent(left, right[::-1], strict_nan=True)\n\n    left = np.array([np.array([50, 50, 50]), np.array([40, 40, 40])], dtype=object)\n    right = np.array([50, 40])\n    assert not array_equivalent(left, right, strict_nan=True)",
                "test_error": "ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
                "full_test_error": "def test_array_equivalent_nested():\n        # reached in groupby aggregations, make sure we use np.any when checking\n        #  if the comparison is truthy\n        left = np.array([np.array([50, 70, 90]), np.array([20, 30, 40])], dtype=object)\n        right = np.array([np.array([50, 70, 90]), np.array([20, 30, 40])], dtype=object)\n    \n>       assert array_equivalent(left, right, strict_nan=True)\n\npandas/tests/dtypes/test_missing.py:369: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)\nright = array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)\nstrict_nan = True\n\n    def array_equivalent(left, right, strict_nan=False):\n        \"\"\"\n        True if two arrays, left and right, have equal non-NaN elements, and NaNs\n        in corresponding locations.  False otherwise. It is assumed that left and\n        right are NumPy arrays of the same dtype. The behavior of this function\n        (particularly with respect to NaNs) is not defined if the dtypes are\n        different.\n    \n        Parameters\n        ----------\n        left, right : ndarrays\n        strict_nan : bool, default False\n            If True, consider NaN and None to be different.\n    \n        Returns\n        -------\n        b : bool\n            Returns True if the arrays are equivalent.\n    \n        Examples\n        --------\n        >>> array_equivalent(\n        ...     np.array([1, 2, np.nan]),\n        ...     np.array([1, 2, np.nan]))\n        True\n        >>> array_equivalent(\n        ...     np.array([1, np.nan, 2]),\n        ...     np.array([1, 2, np.nan]))\n        False\n        \"\"\"\n    \n        left, right = np.asarray(left), np.asarray(right)\n    \n        # shape compat\n        if left.shape != right.shape:\n            return False\n    \n        # Object arrays can contain None, NaN and NaT.\n        # string dtypes must be come to this path for NumPy 1.7.1 compat\n        if is_string_dtype(left) or is_string_dtype(right):\n    \n            if not strict_nan:\n                # isna considers NaN and None to be equivalent.\n                return lib.array_equivalent_object(\n                    ensure_object(left.ravel()), ensure_object(right.ravel())\n                )\n    \n            for left_value, right_value in zip(left, right):\n                if left_value is NaT and right_value is not NaT:\n                    return False\n    \n                elif isinstance(left_value, float) and np.isnan(left_value):\n                    if not isinstance(right_value, float) or not np.isnan(right_value):\n                        return False\n                else:\n>                   if left_value != right_value:\nE                   ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n\npandas/core/dtypes/missing.py:448: ValueError",
                "traceback": "left = array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)\nright = array([[50, 70, 90],\n       [20, 30, 40]], dtype=object)\nstrict_nan = True\n\n    def array_equivalent(left, right, strict_nan=False):\n        \"\"\"\n        True if two arrays, left and right, have equal non-NaN elements, and NaNs\n        in corresponding locations.  False otherwise. It is assumed that left and\n        right are NumPy arrays of the same dtype. The behavior of this function\n        (particularly with respect to NaNs) is not defined if the dtypes are\n        different.\n    \n        Parameters\n        ----------\n        left, right : ndarrays\n        strict_nan : bool, default False\n            If True, consider NaN and None to be different.\n    \n        Returns\n        -------\n        b : bool\n            Returns True if the arrays are equivalent.\n    \n        Examples\n        --------\n        >>> array_equivalent(\n        ...     np.array([1, 2, np.nan]),\n        ...     np.array([1, 2, np.nan]))\n        True\n        >>> array_equivalent(\n        ...     np.array([1, np.nan, 2]),\n        ...     np.array([1, 2, np.nan]))\n        False\n        \"\"\"\n    \n        left, right = np.asarray(left), np.asarray(right)\n    \n        # shape compat\n        if left.shape != right.shape:\n            return False\n    \n        # Object arrays can contain None, NaN and NaT.\n        # string dtypes must be come to this path for NumPy 1.7.1 compat\n        if is_string_dtype(left) or is_string_dtype(right):\n    \n            if not strict_nan:\n                # isna considers NaN and None to be equivalent.\n                return lib.array_equivalent_object(\n                    ensure_object(left.ravel()), ensure_object(right.ravel())\n                )\n    \n            for left_value, right_value in zip(left, right):\n                if left_value is NaT and right_value is not NaT:\n                    return False\n    \n                elif isinstance(left_value, float) and np.isnan(left_value):\n                    if not isinstance(right_value, float) or not np.isnan(right_value):\n                        return False\n                else:\n>                   if left_value != right_value:\nE                   ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
                "test_error_location": "pandas/core/dtypes/missing.py:448: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}