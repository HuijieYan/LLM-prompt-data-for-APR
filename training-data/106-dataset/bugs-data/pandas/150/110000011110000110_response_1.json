{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    from pandas.api.types import is_string_dtype, is_float_dtype, is_complex_dtype, is_na\n    from pandas.core.missing import lib\n    from pandas.core.dtypes.common import ensure_object\n    from pandas._libs.missing import NaT\n    from pandas.core.dtypes.dtypes import is_dtype_equal, needs_i8_conversion\n    from pandas.core.internals.blocks import is_datetimelike_v_numeric\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n    \n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    \n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n    \n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n    from pandas.api.types import is_string_dtype, is_float_dtype, is_complex_dtype, is_na\n    from pandas.core.missing import lib\n    from pandas.core.dtypes.common import ensure_object\n    from pandas._libs.missing import NaT\n    from pandas.core.dtypes.dtypes import is_dtype_equal, needs_i8_conversion\n    from pandas.core.internals.blocks import is_datetimelike_v_numeric\n    \n    left, right = np.asarray(left), np.asarray(right)\n    \n    # shape compat\n    if left.shape != right.shape:\n        return False\n    \n    # Object arrays can contain None, NaN, and NaT.\n    # string dtypes must come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n    \n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n    \n        for left_value, right_value in zip(left.flat, right.flat):\n            if left_value is NaT and right_value is not NaT:\n                return False\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            elif left_value != right_value:\n                return False\n        return True\n    \n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (is_na(left) & is_na(right))).all()\n    \n    # numpy will not allow this type of datetimelike vs integer comparison\n    elif is_datetimelike_v_numeric(left, right):\n        return False\n    \n    # M8/m8\n    elif needs_i8_conversion(left) and needs_i8_conversion(right):\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n    \n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n    \n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n    \n    return np.array_equal(left, right)"
        }
    ]
}