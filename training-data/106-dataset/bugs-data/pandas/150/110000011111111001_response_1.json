{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "/pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n    \n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    \n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n    \"\"\"\n    \n    def is_equal_nested(x, y, strict_nan):\n        if isinstance(x, np.ndarray) and isinstance(y, np.ndarray) and x.shape == y.shape:\n            if x.shape == ():\n                return (x == y) or (np.isnan(x) and np.isnan(y)) if strict_nan else (x == y)\n            else:\n                return all(is_equal_nested(x_val, y_val, strict_nan) for x_val, y_val in zip(x, y))\n        else:\n            return (x == y) or (np.isnan(x) and np.isnan(y)) if strict_nan else (x == y)\n    \n    return is_equal_nested(left, right, strict_nan)"
        }
    ]
}