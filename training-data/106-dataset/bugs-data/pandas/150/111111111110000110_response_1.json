{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "/pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n    \n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    \n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n    \n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n    \n    left, right = np.asarray(left), np.asarray(right)\n    \n    # shape compat\n    if left.shape != right.shape:\n        return False\n    \n    # NaNs can occur in float and complex arrays.\n    if np.issubdtype(left.dtype, np.floating) or np.issubdtype(left.dtype, np.complexfloating):\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return np.array_equal(left, right) or (np.isnan(left) == np.isnan(right)).all()\n    \n    # numpy will will not allow this type of datetimelike vs integer comparison\n    if np.issubdtype(left.dtype, np.datetime64) and not np.issubdtype(right.dtype, np.datetime64):\n        return False\n    \n    if np.issubdtype(left.dtype, np.datetime64) and np.issubdtype(right.dtype, np.datetime64):\n        return np.array_equal(left, right)\n    \n    \n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if np.issubdtype(left.dtype, np.object_) or np.issubdtype(right.dtype, np.object_):\n        if not strict_nan:\n            return (left == right).all()\n        return (left == right) | (pd.isna(left) & pd.isna(right)).all()\n    \n    return np.array_equal(left, right)"
        }
    ]
}