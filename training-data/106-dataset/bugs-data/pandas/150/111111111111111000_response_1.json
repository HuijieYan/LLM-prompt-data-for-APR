{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    from pandas.api.types import is_string_dtype, is_float_dtype, is_complex_dtype, is_datetimelike_v_numeric, needs_i8_conversion, is_dtype_equal\n    from pandas.core.algorithms import isin\n    left, right = np.asarray(left), np.asarray(right)\n    \n    # shape compat\n    if left.shape != right.shape:\n        return False\n    \n    if is_string_dtype(left) or is_string_dtype(right):\n        return _string_array_equivalent(left, right, strict_nan=strict_nan)\n    \n    if is_float_dtype(left) or is_complex_dtype(left):\n        return _float_array_equivalent(left, right, strict_nan=strict_nan)\n    \n    if is_datetimelike_v_numeric(left, right):\n        return _datetimelike_array_equivalent(left, right, strict_nan=strict_nan)\n    \n    if needs_i8_conversion(left) and needs_i8_conversion(right):\n        return _numeric_array_equivalent(left, right, strict_nan=strict_nan)\n    \n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        return _void_array_equivalent(left, right, strict_nan=strict_nan)\n    \n    return np.array_equal(left, right)"
        }
    ]
}