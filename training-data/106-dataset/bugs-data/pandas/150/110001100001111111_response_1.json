{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    left, right = np.asarray(left), np.asarray(right)\n    \n    # shape-compatibility check\n    if left.shape != right.shape:\n        return False\n    \n    if left.dtype.type is np.object_:\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return all(np.array_equal(a, b) for a, b in zip(left.ravel(), right.ravel()))\n    \n        for left_value, right_value in zip(left.ravel(), right.ravel()):\n            if (not pd.isna(left_value) and not pd.isna(right_value)) and (left_value != right_value):\n                return False\n        return True\n    elif pd.api.types.is_numeric_dtype(left.dtype) or pd.api.types.is_datetime64_any_dtype(left.dtype):\n        if pd.api.types.is_integer_dtype(left.dtype) and pd.api.types.is_integer_dtype(right.dtype):\n            return np.array_equal(left.astype('int64'), right.astype('int64'))\n    \n        elif pd.api.types.is_float_dtype(left.dtype) and pd.api.types.is_float_dtype(right.dtype):\n            return ((left == right) | (pd.isna(left) & pd.isna(right))).all()\n    \n        elif pd.api.types.is_datetime64_any_dtype(left.dtype) and pd.api.types.is_datetime64_any_dtype(right.dtype):\n            return ((left == right) | (pd.isna(left) & pd.isna(right))).all()\n    \n    return np.array_equal(left, right)"
        }
    ]
}