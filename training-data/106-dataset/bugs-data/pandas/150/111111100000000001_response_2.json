{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    import pandas as pd\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n    \n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    \n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n    \n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n    \n    left, right = np.asarray(left), np.asarray(right)\n    \n    # shape compat\n    if left.shape != right.shape:\n        return False\n    \n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if pd.api.types.is_string_dtype(left) or pd.api.types.is_string_dtype(right):\n    \n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return np.array_equal(left, right)\n    \n        for left_value, right_value in zip(left, right):\n            if pd.isna(left_value) and not pd.isna(right_value):\n                return False\n            elif not pd.isna(left_value) and pd.isna(right_value):\n                return False\n            elif pd.isna(left_value) and pd.isna(right_value):\n                continue\n            elif left_value != right_value:\n                return False\n        return True\n    \n    # NaNs can occur in float and complex arrays.\n    if pd.api.types.is_float_dtype(left) or pd.api.types.is_complex_dtype(left):\n    \n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (pd.isna(left) & pd.isna(right))).all()\n    \n    # numpy will will not allow this type of datetimelike vs integer comparison\n    elif pd.api.types.is_datetime64_any_dtype(left) and pd.api.types.is_integer_dtype(right):\n        return False\n    elif pd.api.types.is_integer_dtype(left) and pd.api.types.is_datetime64_any_dtype(right):\n        return False\n    \n    # M8/m8\n    elif pd.api.types.is_datetime64_any_dtype(left) and pd.api.types.is_datetime64_any_dtype(right):\n        return np.array_equal(left, right)\n    \n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n    \n    return np.array_equal(left, right)"
        }
    ]
}