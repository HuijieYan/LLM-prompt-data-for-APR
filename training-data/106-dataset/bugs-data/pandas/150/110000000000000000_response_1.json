{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    from pandas.api.types import is_string_dtype, is_float_dtype, is_complex_dtype, is_na, is_dtype_equal, needs_i8_conversion, is_datetimelike_v_numeric, ensure_object, check, lib\n    from pandas._libs.missing import NaT\n    left, right = np.asarray(left), np.asarray(right)\n    \n    if left.shape != right.shape:\n        return False\n    \n    if is_string_dtype(left) or is_string_dtype(right):\n    \n        if not strict_nan:\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n    \n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n    \n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                if left_value != right_value:\n                    return False\n        return True\n    \n    if is_float_dtype(left) or is_complex_dtype(left):\n    \n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((np.equal(left, right)) | (is_na(left) & is_na(right))).all()\n    \n    elif is_datetimelike_v_numeric(left, right):\n        return False\n    \n    elif needs_i8_conversion(left) and needs_i8_conversion(right):\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n    \n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n    \n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n    \n    return np.array_equal(left, right)"
        }
    ]
}