{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "/pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    from pandas.core.dtypes.common import is_dtype_equal\n    left, right = np.asarray(left), np.asarray(right)\n    \n    # shape compat, considering transposition\n    if not (left.shape == right.shape or (left.T.shape == right.shape) or (left.shape == right.T.shape)):\n        return False\n    \n    # Case where string dtypes are involved\n    if np.issubdtype(left.dtype.type, np.str_) or np.issubdtype(right.dtype.type, np.str_):\n        if not strict_nan:\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n        equal_elements = np.equal(left.ravel(), right.ravel())\n        return (np.all(np.equal(left.ravel()[equal_elements], right.ravel()[equal_elements])) and\n                np.all(np.isnan(left.ravel()[~equal_elements])) and\n                np.all(np.isnan(right.ravel()[~equal_elements]))\n               )\n    \n    # Bool arrays involving NaN\n    if np.issubdtype(left.dtype.type, np.bool_) and np.isnan(left.dtype.type):\n        return np.all(left == right)\n    \n    # NaNs can occur in float and complex arrays.\n    if np.issubdtype(left.dtype.type, np.floating) or np.issubdtype(left.dtype.type, np.complexfloating):\n        return ((left == right) | (isna(left) & isna(right))).all()\n    \n    # Mismatched datetimelikes and integers\n    elif is_datetimelike_v_numeric(left, right):\n        return False\n    \n    # M8/m8\n    elif needs_i8_conversion(left) and needs_i8_conversion(right):\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n        left = left.view('i8')\n        right = right.view('i8')\n    \n    # If we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n    \n    return np.array_equal(left, right)"
        }
    ]
}