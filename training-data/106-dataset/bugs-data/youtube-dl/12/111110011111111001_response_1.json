{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "SD2T/bgp_envs/repos/youtube-dl_12/youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    def _filter(f):\n        nonlocal filter_spec\n    \n        key_value_pair = filter_spec.split('=')\n    \n        if len(key_value_pair) == 2:\n            key, value = key_value_pair\n            return key in f and f[key] == value\n        else:\n            key = key_value_pair[0]\n            value = key_value_pair[1:]\n            if key not in f:\n                return False\n            for val in value:\n                if f[key].startswith('^') and f[key].endswith('$'):\n                    if f[key][1:-1] not in val:\n                        return False\n                elif f[key].startswith('^'):\n                    if not f[key][1:] in val:\n                        return False\n                elif f[key].endswith('$'):\n                    if not f[key][:-1] in val:\n                        return False\n                elif val in f[key]:\n                    return True\n            return False\n    \n    return _filter"
        }
    ]
}