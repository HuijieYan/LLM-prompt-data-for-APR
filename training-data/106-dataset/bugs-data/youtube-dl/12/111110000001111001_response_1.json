{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import operator\n    import re\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    str_operators = {\n        '=': operator.eq,\n        '^=': lambda attr, value: attr.startswith(value),\n        '$=': lambda attr, value: attr.endswith(value),\n        '*=': lambda attr, value: value in attr,\n    }\n    \n    def parse_comparison_value(value):\n        try:\n            return int(value)\n        except ValueError:\n            return value\n    \n    def parse_string_comparison_value(value):\n        return value\n    \n    def handle_operator(m, comparison_function, comparison_parser):\n        if m:\n            key, op, none_inclusive, value = m.groups()\n            comparison = comparison_parser(value)\n            inclusive = not none_inclusive\n            return lambda f: inclusive if f.get(key, None) is None else comparison_function(f.get(key), comparison)\n        return None\n    \n    comparison_rex = re.compile(r'''(?x)\\s*\n        (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n        \\s*(?P<op>[<>]=?|=|!=)\\s*(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n        $\n        ''')\n    \n    string_comparison_rex = re.compile(r'''(?x)\n        \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n        \\s*(?P<op>[=\\^$*]=?)\\s*(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>[a-zA-Z0-9._-]+)\\s*$\n        ''')\n    \n    width_comparison_rex = re.compile(r''' (?x)\n        \\s*(?P<key>width)\\s*(?P<op>[<>]=?|=|!=)\\s*(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>[0-9.]+)\n        $\n        ''')\n    \n    def _filter(f):\n        m = comparison_rex.match(filter_spec)\n        if m:\n            comparison_function = OPERATORS[m.group('op')]\n            comparison_parser = parse_comparison_value\n            return handle_operator(m, comparison_function, comparison_parser)\n    \n        m = string_comparison_rex.match(filter_spec)\n        if m:\n            comparison_function = str_operators[m.group('op')]\n            comparison_parser = parse_string_comparison_value\n            return handle_operator(m, comparison_function, comparison_parser)\n    \n        m = width_comparison_rex.match(filter_spec)\n        if m:\n            comparison_function = OPERATORS[m.group('op')]\n            comparison_parser = parse_comparison_value\n            return handle_operator(m, comparison_function, comparison_parser)\n    \n        return None\n    \n    return _filter"
        }
    ]
}