{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "/youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import re\n    import operator\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    str_operators = {\n        '=': operator.eq,\n        '^=': lambda attr, value: attr.startswith(value),\n        '$=': lambda attr, value: attr.endswith(value),\n        '*=': lambda attr, value: value in attr\n    }\n    \n    operator_rex = re.compile(r'(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*(?P<op><|=|<=|>|>=|!=)\\s*(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>\\d+)')   \n    str_operator_rex = re.compile(r'(?P<key>ext|acodec|vcodec|container|protocol|format_id)\\s*(?P<negation>!\\s*)?(?P<op>=|\\^=|\\$=|\\*=)\\s*(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>[a-zA-Z0-9._-]+)\\s*')\n    \n    m = operator_rex.match(filter_spec)\n    if m:\n        key, op, none_inclusive, value = m.groups()\n        key = key.strip()\n        value = int(value)\n    \n        def _num_filter(f):\n            actual_value = f.get(key)\n            if actual_value is None:\n                return none_inclusive\n            return OPERATORS[op](actual_value, value)\n    \n        return _num_filter\n    \n    m = str_operator_rex.match(filter_spec)\n    if m:\n        key, negation, op, none_inclusive, value = m.groups()\n        key = key.strip()\n    \n        def _str_filter(f):\n            actual_value = f.get(key)\n            if actual_value is None:\n                return none_inclusive\n            if negation:\n                return not str_operators[op](actual_value, value)\n            else:\n                return str_operators[op](actual_value, value)\n    \n        return _str_filter\n    \n    raise ValueError('Invalid filter specification %r' % filter_spec)"
        }
    ]
}