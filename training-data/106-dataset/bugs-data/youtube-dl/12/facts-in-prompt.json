{
    "1": "    def _build_format_filter(self, filter_spec):\n        \" Returns a function to filter the formats according to the filter_spec \"\n    \n        OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n            \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n            $\n            ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n        m = operator_rex.search(filter_spec)\n        if m:\n            try:\n                comparison_value = int(m.group('value'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('value'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('value') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid value %r in format specification %r' % (\n                            m.group('value'), filter_spec))\n            op = OPERATORS[m.group('op')]\n    \n        if not m:\n            STR_OPERATORS = {\n                '=': operator.eq,\n                '^=': lambda attr, value: attr.startswith(value),\n                '$=': lambda attr, value: attr.endswith(value),\n                '*=': lambda attr, value: value in attr,\n            }\n            str_operator_rex = re.compile(r'''(?x)\n                \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n                \\s*(?P<negation>!\\s*)?(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n                \\s*(?P<value>[a-zA-Z0-9._-]+)\n                \\s*$\n                ''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n            m = str_operator_rex.search(filter_spec)\n            if m:\n                comparison_value = m.group('value')\n                str_op = STR_OPERATORS[m.group('op')]\n                if m.group('negation'):\n                    op = lambda attr, value: not str_op\n                else:\n                    op = str_op\n    \n        if not m:\n            raise ValueError('Invalid filter specification %r' % filter_spec)\n    \n        def _filter(f):\n            actual_value = f.get(m.group('key'))\n            if actual_value is None:\n                return m.group('none_inclusive')\n            return op(actual_value, comparison_value)\n        return _filter\n    \n",
    "2": "# class declaration containing the buggy function\nclass YoutubeDL(object):\n    \"\"\"\n    YoutubeDL class.\n    \n    YoutubeDL objects are the ones responsible of downloading the\n    actual video file and writing it to disk if the user has requested\n    it, among some other tasks. In most cases there should be one per\n    program. As, given a video URL, the downloader doesn't know how to\n    extract all the needed information, task that InfoExtractors do, it\n    has to pass the URL to one of them.\n    \n    For this, YoutubeDL objects have a method that allows\n    InfoExtractors to be registered in a given order. When it is passed\n    a URL, the YoutubeDL object handles it to the first InfoExtractor it\n    finds that reports being able to handle it. The InfoExtractor extracts\n    all the information about the video or videos the URL refers to, and\n    YoutubeDL process the extracted information, possibly using a File\n    Downloader to download the video.\n    \n    YoutubeDL objects accept a lot of parameters. In order not to saturate\n    the object constructor with arguments, it receives a dictionary of\n    options instead. These options are available through the params\n    attribute for the InfoExtractors to use. The YoutubeDL also\n    registers itself as the downloader in charge for the InfoExtractors\n    that are added to it, so this is a \"mutual registration\".\n    \n    Available options:\n    \n    username:          Username for authentication purposes.\n    password:          Password for authentication purposes.\n    videopassword:     Password for accessing a video.\n    ap_mso:            Adobe Pass multiple-system operator identifier.\n    ap_username:       Multiple-system operator account username.\n    ap_password:       Multiple-system operator account password.\n    usenetrc:          Use netrc for authentication instead.\n    verbose:           Print additional info to stdout.\n    quiet:             Do not print messages to stdout.\n    no_warnings:       Do not print out anything for warnings.\n    forceurl:          Force printing final URL.\n    forcetitle:        Force printing title.\n    forceid:           Force printing ID.\n    forcethumbnail:    Force printing thumbnail URL.\n    forcedescription:  Force printing description.\n    forcefilename:     Force printing final filename.\n    forceduration:     Force printing duration.\n    forcejson:         Force printing info_dict as JSON.\n    dump_single_json:  Force printing the info_dict of the whole playlist\n                       (or video) as a single JSON line.\n    simulate:          Do not download the video files.\n    format:            Video format code. See options.py for more information.\n    outtmpl:           Template for output names.\n    restrictfilenames: Do not allow \"&\" and spaces in file names\n    ignoreerrors:      Do not stop on download errors.\n    force_generic_extractor: Force downloader to use the generic extractor\n    nooverwrites:      Prevent overwriting files.\n    playliststart:     Playlist item to start at.\n    playlistend:       Playlist item to end at.\n    playlist_items:    Specific indices of playlist to download.\n    playlistreverse:   Download playlist items in reverse order.\n    playlistrandom:    Download playlist items in random order.\n    matchtitle:        Download only matching titles.\n    rejecttitle:       Reject downloads for matching titles.\n    logger:            Log messages to a logging.Logger instance.\n    logtostderr:       Log messages to stderr instead of stdout.\n    writedescription:  Write the video description to a .description file\n    writeinfojson:     Write the video description to a .info.json file\n    writeannotations:  Write the video annotations to a .annotations.xml file\n    writethumbnail:    Write the thumbnail image to a file\n    write_all_thumbnails:  Write all thumbnail formats to files\n    writesubtitles:    Write the video subtitles to a file\n    writeautomaticsub: Write the automatically generated subtitles to a file\n    allsubtitles:      Downloads all the subtitles of the video\n                       (requires writesubtitles or writeautomaticsub)\n    listsubtitles:     Lists all available subtitles for the video\n    subtitlesformat:   The format code for subtitles\n    subtitleslangs:    List of languages of the subtitles to download\n    keepvideo:         Keep the video file after post-processing\n    daterange:         A DateRange object, download only if the upload_date is in the range.\n    skip_download:     Skip the actual download of the video file\n    cachedir:          Location of the cache files in the filesystem.\n                       False to disable filesystem cache.\n    noplaylist:        Download single video instead of a playlist if in doubt.\n    age_limit:         An integer representing the user's age in years.\n                       Unsuitable videos for the given age are skipped.\n    min_views:         An integer representing the minimum view count the video\n                       must have in order to not be skipped.\n                       Videos without view count information are always\n                       downloaded. None for no limit.\n    max_views:         An integer representing the maximum view count.\n                       Videos that are more popular than that are not\n                       downloaded.\n                       Videos without view count information are always\n                       downloaded. None for no limit.\n    download_archive:  File name of a file where all downloads are recorded.\n                       Videos already present in the file are not downloaded\n                       again.\n    cookiefile:        File name where cookies should be read from and dumped to.\n    nocheckcertificate:Do not verify SSL certificates\n    prefer_insecure:   Use HTTP instead of HTTPS to retrieve information.\n                       At the moment, this is only supported by YouTube.\n    proxy:             URL of the proxy server to use\n    geo_verification_proxy:  URL of the proxy to use for IP address verification\n                       on geo-restricted sites.\n    socket_timeout:    Time to wait for unresponsive hosts, in seconds\n    bidi_workaround:   Work around buggy terminals without bidirectional text\n                       support, using fridibi\n    debug_printtraffic:Print out sent and received HTTP traffic\n    include_ads:       Download ads as well\n    default_search:    Prepend this string if an input url is not valid.\n                       'auto' for elaborate guessing\n    encoding:          Use this encoding instead of the system-specified.\n    extract_flat:      Do not resolve URLs, return the immediate result.\n                       Pass in 'in_playlist' to only show this behavior for\n                       playlist items.\n    postprocessors:    A list of dictionaries, each with an entry\n                       * key:  The name of the postprocessor. See\n                               youtube_dl/postprocessor/__init__.py for a list.\n                       as well as any further keyword arguments for the\n                       postprocessor.\n    progress_hooks:    A list of functions that get called on download\n                       progress, with a dictionary with the entries\n                       * status: One of \"downloading\", \"error\", or \"finished\".\n                                 Check this first and ignore unknown values.\n    \n                       If status is one of \"downloading\", or \"finished\", the\n                       following properties may also be present:\n                       * filename: The final filename (always present)\n                       * tmpfilename: The filename we're currently writing to\n                       * downloaded_bytes: Bytes on disk\n                       * total_bytes: Size of the whole file, None if unknown\n                       * total_bytes_estimate: Guess of the eventual file size,\n                                               None if unavailable.\n                       * elapsed: The number of seconds since download started.\n                       * eta: The estimated time in seconds, None if unknown\n                       * speed: The download speed in bytes/second, None if\n                                unknown\n                       * fragment_index: The counter of the currently\n                                         downloaded video fragment.\n                       * fragment_count: The number of fragments (= individual\n                                         files that will be merged)\n    \n                       Progress hooks are guaranteed to be called at least once\n                       (with status \"finished\") if the download is successful.\n    merge_output_format: Extension to use when merging formats.\n    fixup:             Automatically correct known faults of the file.\n                       One of:\n                       - \"never\": do nothing\n                       - \"warn\": only emit a warning\n                       - \"detect_or_warn\": check whether we can do anything\n                                           about it, warn otherwise (default)\n    source_address:    Client-side IP address to bind to.\n    call_home:         Boolean, true iff we are allowed to contact the\n                       youtube-dl servers for debugging.\n    sleep_interval:    Number of seconds to sleep before each download when\n                       used alone or a lower bound of a range for randomized\n                       sleep before each download (minimum possible number\n                       of seconds to sleep) when used along with\n                       max_sleep_interval.\n    max_sleep_interval:Upper bound of a range for randomized sleep before each\n                       download (maximum possible number of seconds to sleep).\n                       Must only be used along with sleep_interval.\n                       Actual sleep time will be a random float from range\n                       [sleep_interval; max_sleep_interval].\n    listformats:       Print an overview of available video formats and exit.\n    list_thumbnails:   Print a table of all thumbnails and exit.\n    match_filter:      A function that gets called with the info_dict of\n                       every video.\n                       If it returns a message, the video is ignored.\n                       If it returns None, the video is downloaded.\n                       match_filter_func in utils.py is one example for this.\n    no_color:          Do not emit color codes in output.\n    geo_bypass:        Bypass geographic restriction via faking X-Forwarded-For\n                       HTTP header\n    geo_bypass_country:\n                       Two-letter ISO 3166-2 country code that will be used for\n                       explicit geographic restriction bypassing via faking\n                       X-Forwarded-For HTTP header\n    geo_bypass_ip_block:\n                       IP range in CIDR notation that will be used similarly to\n                       geo_bypass_country\n    \n    The following options determine which downloader is picked:\n    external_downloader: Executable of the external downloader to call.\n                       None or unset for standard (built-in) downloader.\n    hls_prefer_native: Use the native HLS downloader instead of ffmpeg/avconv\n                       if True, otherwise use ffmpeg/avconv if False, otherwise\n                       use downloader suggested by extractor if None.\n    \n    The following parameters are not used by YoutubeDL itself, they are used by\n    the downloader (see youtube_dl/downloader/common.py):\n    nopart, updatetime, buffersize, ratelimit, min_filesize, max_filesize, test,\n    noresizebuffer, retries, continuedl, noprogress, consoletitle,\n    xattr_set_filesize, external_downloader_args, hls_use_mpegts,\n    http_chunk_size.\n    \n    The following options are used by the post processors:\n    prefer_ffmpeg:     If False, use avconv instead of ffmpeg if both are available,\n                       otherwise prefer ffmpeg.\n    postprocessor_args: A list of additional command-line arguments for the\n                        postprocessor.\n    \n    The following options are used by the Youtube extractor:\n    youtube_include_dash_manifest: If True (default), DASH manifests and related\n                        data will be downloaded and processed by extractor.\n                        You can reduce network I/O by disabling it if you don't\n                        care about DASH.\n    \"\"\"\n\n    # ... omitted code ...\n\n\n    # signature of a relative function in this class\n    def _filter(f):\n        # ... omitted code ...\n        pass\n\n",
    "3": "# file name: /Volumes/SSD2T/bgp_envs/repos/youtube-dl_12/youtube_dl/YoutubeDL.py\n\n# relative function's signature in this file\ndef _filter(f):\n    # ... omitted code ...\n    pass\n\n",
    "4": "# A test function for the buggy function\n```python\n# file name: /Volumes/SSD2T/bgp_envs/repos/youtube-dl_12/test/test_YoutubeDL.py\n\n    def test_format_selection_string_ops(self):\n        formats = [\n            {'format_id': 'abc-cba', 'ext': 'mp4', 'url': TEST_URL},\n            {'format_id': 'zxc-cxz', 'ext': 'webm', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        # equals (=)\n        ydl = YDL({'format': '[format_id=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not equal (!=)\n        ydl = YDL({'format': '[format_id!=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!=abc-cba][format_id!=zxc-cxz]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # starts with (^=)\n        ydl = YDL({'format': '[format_id^=abc]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not start with (!^=)\n        ydl = YDL({'format': '[format_id!^=abc]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!^=abc][format_id!^=zxc]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # ends with ($=)\n        ydl = YDL({'format': '[format_id$=cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not end with (!$=)\n        ydl = YDL({'format': '[format_id!$=cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!$=cba][format_id!$=cxz]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # contains (*=)\n        ydl = YDL({'format': '[format_id*=bc-cb]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not contain (!*=)\n        ydl = YDL({'format': '[format_id!*=bc-cb]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!*=abc][format_id!*=zxc]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        ydl = YDL({'format': '[format_id!*=-]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n```\n\n## Error message from test function\n```text\nself = <test.test_YoutubeDL.TestFormatSelection testMethod=test_format_selection_string_ops>\n\n    def test_format_selection_string_ops(self):\n        formats = [\n            {'format_id': 'abc-cba', 'ext': 'mp4', 'url': TEST_URL},\n            {'format_id': 'zxc-cxz', 'ext': 'webm', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n    \n        # equals (=)\n        ydl = YDL({'format': '[format_id=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n    \n        # does not equal (!=)\n        ydl = YDL({'format': '[format_id!=abc-cba]'})\n>       ydl.process_ie_result(info_dict.copy())\n\ntest/test_YoutubeDL.py:257: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nyoutube_dl/YoutubeDL.py:858: in process_ie_result\n    return self.process_video_result(ie_result, download=download)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test.test_YoutubeDL.YDL object at 0x111aaab90>\ninfo_dict = {'display_id': 'testid', 'extractor': 'testex', 'extractor_key': 'TestEx', 'formats': [{'ext': 'mp4', 'format': 'abc-c...8859-1,utf-8;q=0.7,*;q=0.7', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5', ...}, ...}], ...}\ndownload = True\n\n    def process_video_result(self, info_dict, download=True):\n        assert info_dict.get('_type', 'video') == 'video'\n    \n        if 'id' not in info_dict:\n            raise ExtractorError('Missing \"id\" field in extractor result')\n        if 'title' not in info_dict:\n            raise ExtractorError('Missing \"title\" field in extractor result')\n    \n        def report_force_conversion(field, field_not, conversion):\n            self.report_warning(\n                '\"%s\" field is not %s - forcing %s conversion, there is an error in extractor'\n                % (field, field_not, conversion))\n    \n        def sanitize_string_field(info, string_field):\n            field = info.get(string_field)\n            if field is None or isinstance(field, compat_str):\n                return\n            report_force_conversion(string_field, 'a string', 'string')\n            info[string_field] = compat_str(field)\n    \n        def sanitize_numeric_fields(info):\n            for numeric_field in self._NUMERIC_FIELDS:\n                field = info.get(numeric_field)\n                if field is None or isinstance(field, compat_numeric_types):\n                    continue\n                report_force_conversion(numeric_field, 'numeric', 'int')\n                info[numeric_field] = int_or_none(field)\n    \n        sanitize_string_field(info_dict, 'id')\n        sanitize_numeric_fields(info_dict)\n    \n        if 'playlist' not in info_dict:\n            # It isn't part of a playlist\n            info_dict['playlist'] = None\n            info_dict['playlist_index'] = None\n    \n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails is None:\n            thumbnail = info_dict.get('thumbnail')\n            if thumbnail:\n                info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n        if thumbnails:\n            thumbnails.sort(key=lambda t: (\n                t.get('preference') if t.get('preference') is not None else -1,\n                t.get('width') if t.get('width') is not None else -1,\n                t.get('height') if t.get('height') is not None else -1,\n                t.get('id') if t.get('id') is not None else '', t.get('url')))\n            for i, t in enumerate(thumbnails):\n                t['url'] = sanitize_url(t['url'])\n                if t.get('width') and t.get('height'):\n                    t['resolution'] = '%dx%d' % (t['width'], t['height'])\n                if t.get('id') is None:\n                    t['id'] = '%d' % i\n    \n        if self.params.get('list_thumbnails'):\n            self.list_thumbnails(info_dict)\n            return\n    \n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnail'] = sanitize_url(thumbnail)\n        elif thumbnails:\n            info_dict['thumbnail'] = thumbnails[-1]['url']\n    \n        if 'display_id' not in info_dict and 'id' in info_dict:\n            info_dict['display_id'] = info_dict['id']\n    \n        if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n            # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n            # see http://bugs.python.org/issue1646728)\n            try:\n                upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n                info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n            except (ValueError, OverflowError, OSError):\n                pass\n    \n        # Auto generate title fields corresponding to the *_number fields when missing\n        # in order to always have clean titles. This is very common for TV series.\n        for field in ('chapter', 'season', 'episode'):\n            if info_dict.get('%s_number' % field) is not None and not info_dict.get(field):\n                info_dict[field] = '%s %d' % (field.capitalize(), info_dict['%s_number' % field])\n    \n        for cc_kind in ('subtitles', 'automatic_captions'):\n            cc = info_dict.get(cc_kind)\n            if cc:\n                for _, subtitle in cc.items():\n                    for subtitle_format in subtitle:\n                        if subtitle_format.get('url'):\n                            subtitle_format['url'] = sanitize_url(subtitle_format['url'])\n                        if subtitle_format.get('ext') is None:\n                            subtitle_format['ext'] = determine_ext(subtitle_format['url']).lower()\n    \n        automatic_captions = info_dict.get('automatic_captions')\n        subtitles = info_dict.get('subtitles')\n    \n        if self.params.get('listsubtitles', False):\n            if 'automatic_captions' in info_dict:\n                self.list_subtitles(\n                    info_dict['id'], automatic_captions, 'automatic captions')\n            self.list_subtitles(info_dict['id'], subtitles, 'subtitles')\n            return\n    \n        info_dict['requested_subtitles'] = self.process_subtitles(\n            info_dict['id'], subtitles, automatic_captions)\n    \n        # We now pick which formats have to be downloaded\n        if info_dict.get('formats') is None:\n            # There's only one format available\n            formats = [info_dict]\n        else:\n            formats = info_dict['formats']\n    \n        if not formats:\n            raise ExtractorError('No video formats found!')\n    \n        def is_wellformed(f):\n            url = f.get('url')\n            if not url:\n                self.report_warning(\n                    '\"url\" field is missing or empty - skipping format, '\n                    'there is an error in extractor')\n                return False\n            if isinstance(url, bytes):\n                sanitize_string_field(f, 'url')\n            return True\n    \n        # Filter out malformed formats for better extraction robustness\n        formats = list(filter(is_wellformed, formats))\n    \n        formats_dict = {}\n    \n        # We check that all the formats have the format and format_id fields\n        for i, format in enumerate(formats):\n            sanitize_string_field(format, 'format_id')\n            sanitize_numeric_fields(format)\n            format['url'] = sanitize_url(format['url'])\n            if not format.get('format_id'):\n                format['format_id'] = compat_str(i)\n            else:\n                # Sanitize format_id from characters used in format selector expression\n                format['format_id'] = re.sub(r'[\\s,/+\\[\\]()]', '_', format['format_id'])\n            format_id = format['format_id']\n            if format_id not in formats_dict:\n                formats_dict[format_id] = []\n            formats_dict[format_id].append(format)\n    \n        # Make sure all formats have unique format_id\n        for format_id, ambiguous_formats in formats_dict.items():\n            if len(ambiguous_formats) > 1:\n                for i, format in enumerate(ambiguous_formats):\n                    format['format_id'] = '%s-%d' % (format_id, i)\n    \n        for i, format in enumerate(formats):\n            if format.get('format') is None:\n                format['format'] = '{id} - {res}{note}'.format(\n                    id=format['format_id'],\n                    res=self.format_resolution(format),\n                    note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n                )\n            # Automatically determine file extension if missing\n            if format.get('ext') is None:\n                format['ext'] = determine_ext(format['url']).lower()\n            # Automatically determine protocol if missing (useful for format\n            # selection purposes)\n            if format.get('protocol') is None:\n                format['protocol'] = determine_protocol(format)\n            # Add HTTP headers, so that external programs can use them from the\n            # json output\n            full_format_info = info_dict.copy()\n            full_format_info.update(format)\n            format['http_headers'] = self._calc_headers(full_format_info)\n        # Remove private housekeeping stuff\n        if '__x_forwarded_for_ip' in info_dict:\n            del info_dict['__x_forwarded_for_ip']\n    \n        # TODO Central sorting goes here\n    \n        if formats[0] is not info_dict:\n            # only set the 'formats' fields if the original info_dict list them\n            # otherwise we end up with a circular reference, the first (and unique)\n            # element in the 'formats' field in info_dict is info_dict itself,\n            # which can't be exported to json\n            info_dict['formats'] = formats\n        if self.params.get('listformats'):\n            self.list_formats(info_dict)\n            return\n    \n        req_format = self.params.get('format')\n        if req_format is None:\n            req_format = self._default_format_spec(info_dict, download=download)\n            if self.params.get('verbose'):\n                self.to_stdout('[debug] Default format spec: %s' % req_format)\n    \n        format_selector = self.build_format_selector(req_format)\n    \n        # While in format selection we may need to have an access to the original\n        # format set in order to calculate some metrics or do some processing.\n        # For now we need to be able to guess whether original formats provided\n        # by extractor are incomplete or not (i.e. whether extractor provides only\n        # video-only or audio-only formats) for proper formats selection for\n        # extractors with such incomplete formats (see\n        # https://github.com/rg3/youtube-dl/pull/5556).\n        # Since formats may be filtered during format selection and may not match\n        # the original formats the results may be incorrect. Thus original formats\n        # or pre-calculated metrics should be passed to format selection routines\n        # as well.\n        # We will pass a context object containing all necessary additional data\n        # instead of just formats.\n        # This fixes incorrect format selection issue (see\n        # https://github.com/rg3/youtube-dl/issues/10083).\n        incomplete_formats = (\n            # All formats are video-only or\n            all(f.get('vcodec') != 'none' and f.get('acodec') == 'none' for f in formats) or\n            # all formats are audio-only\n            all(f.get('vcodec') == 'none' and f.get('acodec') != 'none' for f in formats))\n    \n        ctx = {\n            'formats': formats,\n            'incomplete_formats': incomplete_formats,\n        }\n    \n        formats_to_download = list(format_selector(ctx))\n        if not formats_to_download:\n            raise ExtractorError('requested format not available',\n>                                expected=True)\nE           youtube_dl.utils.ExtractorError: requested format not available\n\nyoutube_dl/YoutubeDL.py:1631: ExtractorError\n\n```\n",
    "5": "# Variable runtime value and type inside buggy function\n## Buggy case 1\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id=abc-cba'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 17), match='format_id=abc-cba'>`, type: `Match`\n\ncomparison_value, value: `'abc-cba'`, type: `str`\n\nop, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1a7f80>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1b2050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1b20e0>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e1b2200>`, type: `function`\n\n## Buggy case 2\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!=abc-cba'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 18), match='format_id!=abc-cba'>`, type: `Match`\n\ncomparison_value, value: `'abc-cba'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84a320>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84a170>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84a200>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84a290>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d84a440>`, type: `function`\n\n## Buggy case 3\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!=zxc-cxz'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 18), match='format_id!=zxc-cxz'>`, type: `Match`\n\ncomparison_value, value: `'zxc-cxz'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84f0e0>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84f290>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84f200>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84f170>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<built-in function eq>`, type: `builtin_function_or_method`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d84f7a0>`, type: `function`\n\n## Buggy case 4\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id^=abc'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 14), match='format_id^=abc'>`, type: `Match`\n\ncomparison_value, value: `'abc'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1b2680>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1b2680>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1b2710>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1b27a0>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1b2680>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e1b25f0>`, type: `function`\n\n## Buggy case 5\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!^=abc'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 15), match='format_id!^=abc'>`, type: `Match`\n\ncomparison_value, value: `'abc'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d855c20>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d855a70>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d855b00>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d855b90>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d855a70>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d855d40>`, type: `function`\n\n## Buggy case 6\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!^=zxc'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 15), match='format_id!^=zxc'>`, type: `Match`\n\ncomparison_value, value: `'zxc'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84e050>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84e4d0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84e440>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84e3b0>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d84e4d0>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d84eb00>`, type: `function`\n\n## Buggy case 7\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id$=cba'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 14), match='format_id$=cba'>`, type: `Match`\n\ncomparison_value, value: `'cba'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d86d4d0>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d86d440>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d86d4d0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d86d560>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d86d4d0>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d86d5f0>`, type: `function`\n\n## Buggy case 8\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!$=cba'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 15), match='format_id!$=cba'>`, type: `Match`\n\ncomparison_value, value: `'cba'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8789e0>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d878830>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8788c0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d878950>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8788c0>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d878b00>`, type: `function`\n\n## Buggy case 9\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!$=cxz'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 15), match='format_id!$=cxz'>`, type: `Match`\n\ncomparison_value, value: `'cxz'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d879ef0>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d879d40>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d879dd0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d879e60>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d879dd0>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d879f80>`, type: `function`\n\n## Buggy case 10\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id*=bc-cb'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 16), match='format_id*=bc-cb'>`, type: `Match`\n\ncomparison_value, value: `'bc-cb'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d856a70>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d856950>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8569e0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d856a70>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d856a70>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d856b90>`, type: `function`\n\n## Buggy case 11\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!*=bc-cb'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 17), match='format_id!*=bc-cb'>`, type: `Match`\n\ncomparison_value, value: `'bc-cb'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d853050>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d861e60>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d861ef0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d861f80>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d861f80>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d853170>`, type: `function`\n\n## Buggy case 12\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!*=abc'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 15), match='format_id!*=abc'>`, type: `Match`\n\ncomparison_value, value: `'abc'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87c7a0>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87c5f0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87c680>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87c710>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87c710>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d87c830>`, type: `function`\n\n## Buggy case 13\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!*=zxc'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 15), match='format_id!*=zxc'>`, type: `Match`\n\ncomparison_value, value: `'zxc'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c23b0>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c2200>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c2290>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c2320>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c2320>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d8c2440>`, type: `function`\n\n## Buggy case 14\n### input parameter runtime value and type for buggy function\nfilter_spec, value: `'format_id!*=-'`, type: `str`\n\n### variable runtime value and type before buggy function return\nOPERATORS, value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, value: `<re.Match object; span=(0, 13), match='format_id!*=-'>`, type: `Match`\n\ncomparison_value, value: `'-'`, type: `str`\n\nop, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c3050>`, type: `function`\n\nSTR_OPERATORS, value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c4e60>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c4ef0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c4f80>}`, type: `dict`\n\nstr_operator_rex, value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d8c4f80>`, type: `function`\n\n_filter, value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d8c3170>`, type: `function`\n\n\n\n# Expected variable value and type in tests\n## Expected case 1\n### Input parameter value and type\nfilter_spec, value: `'format_id=abc-cba'`, type: `str`\n\n### Expected variable value and type before function return\nOPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 17), match='format_id=abc-cba'>`, type: `Match`\n\ncomparison_value, expected value: `'abc-cba'`, type: `str`\n\nop, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\nSTR_OPERATORS, expected value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1dbef0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1dbf80>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e1ea050>}`, type: `dict`\n\nstr_operator_rex, expected value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\n_filter, expected value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e1ea170>`, type: `function`\n\n## Expected case 2\n### Input parameter value and type\nfilter_spec, value: `'format_id!=abc-cba'`, type: `str`\n\n### Expected variable value and type before function return\nOPERATORS, expected value: `{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}`, type: `dict`\n\noperator_rex, expected value: `re.compile('(?x)\\\\s*\\n            (?P<key>width`, type: `Pattern`\n\nm, expected value: `<re.Match object; span=(0, 18), match='format_id!=abc-cba'>`, type: `Match`\n\ncomparison_value, expected value: `'abc-cba'`, type: `str`\n\nop, expected value: `<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87d290>`, type: `function`\n\nSTR_OPERATORS, expected value: `{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87d0e0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87d170>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10d87d200>}`, type: `dict`\n\nstr_operator_rex, expected value: `re.compile('(?x)\\n                \\\\s*(?P<key>ext`, type: `Pattern`\n\nstr_op, expected value: `<built-in function eq>`, type: `builtin_function_or_method`\n\n_filter, expected value: `<function YoutubeDL._build_format_filter.<locals>._filter at 0x10d87d3b0>`, type: `function`\n\n\n\n",
    "6": "# A GitHub issue title for this bug\n```text\nFormat selection broken\n```\n\n## The associated detailed issue description\n```text\nPlease follow the guide below\nYou will be asked some questions and requested to provide some information, please read them carefully and answer honestly\nPut an x into all the boxes [ ] relevant to your issue (like this: [x])\nUse the Preview tab to see what your issue will actually look like\nMake sure you are using the latest version: run youtube-dl --version and ensure your version is 2019.01.23. If it's not, read this FAQ entry and update. Issues with outdated version will be rejected.\n I've verified and I assure that I'm running youtube-dl 2019.01.23\nBefore submitting an issue make sure you have:\n At least skimmed through the README, most notably the FAQ and BUGS sections\n Searched the bugtracker for similar issues including closed ones\n Checked that provided video/audio/playlist URLs (if any) are alive and playable in a browser\nWhat is the purpose of your issue?\n Bug report (encountered problems with youtube-dl)\n Site support request (request for adding support for a new site)\n Feature request (request for a new functionality)\n Question\n Other\nThe following sections concretize particular purposed issues, you can erase any section (the contents between triple ---) not applicable to your issue\nIf the purpose of this issue is a bug report, site support request or you are not completely sure provide the full verbose output as follows:\nAdd the -v flag to your command line you run youtube-dl with (youtube-dl -v <your command line>), copy the whole output and insert it here. It should look similar to one below (replace it with your log inserted between triple ```\n\n",
    "7": "# Instructions\n\n1. Analyze the test case and its relationship with the error message, if applicable.\n2. Identify the potential error location within the problematic function.\n3. Explain the reasons behind the occurrence of the bug.\n4. Suggest possible approaches for fixing the bug.\n5. Present the corrected code for the problematic function."
}