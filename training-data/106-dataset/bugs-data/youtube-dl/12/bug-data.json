{
    "youtube-dl:12": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_12/youtube_dl/YoutubeDL.py": {
            "buggy_functions": [
                {
                    "function_name": "_build_format_filter",
                    "function_code": "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n        $\n        ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n    m = operator_rex.search(filter_spec)\n    if m:\n        try:\n            comparison_value = int(m.group('value'))\n        except ValueError:\n            comparison_value = parse_filesize(m.group('value'))\n            if comparison_value is None:\n                comparison_value = parse_filesize(m.group('value') + 'B')\n            if comparison_value is None:\n                raise ValueError(\n                    'Invalid value %r in format specification %r' % (\n                        m.group('value'), filter_spec))\n        op = OPERATORS[m.group('op')]\n\n    if not m:\n        STR_OPERATORS = {\n            '=': operator.eq,\n            '^=': lambda attr, value: attr.startswith(value),\n            '$=': lambda attr, value: attr.endswith(value),\n            '*=': lambda attr, value: value in attr,\n        }\n        str_operator_rex = re.compile(r'''(?x)\n            \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n            \\s*(?P<negation>!\\s*)?(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n            \\s*(?P<value>[a-zA-Z0-9._-]+)\n            \\s*$\n            ''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n        m = str_operator_rex.search(filter_spec)\n        if m:\n            comparison_value = m.group('value')\n            str_op = STR_OPERATORS[m.group('op')]\n            if m.group('negation'):\n                op = lambda attr, value: not str_op\n            else:\n                op = str_op\n\n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n\n    def _filter(f):\n        actual_value = f.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n    return _filter\n",
                    "decorators": [],
                    "docstring": "Returns a function to filter the formats according to the filter_spec ",
                    "start_line": 1032,
                    "end_line": 1093,
                    "variables": {
                        "OPERATORS": [
                            1048,
                            1035,
                            1061
                        ],
                        "operator.lt": [
                            1036
                        ],
                        "operator": [
                            1065,
                            1036,
                            1037,
                            1038,
                            1039,
                            1040,
                            1041
                        ],
                        "operator.le": [
                            1037
                        ],
                        "operator.gt": [
                            1038
                        ],
                        "operator.ge": [
                            1039
                        ],
                        "operator.eq": [
                            1040,
                            1065
                        ],
                        "operator.ne": [
                            1041
                        ],
                        "operator_rex": [
                            1049,
                            1043
                        ],
                        "re.compile": [
                            1043,
                            1070
                        ],
                        "re": [
                            1048,
                            1075,
                            1043,
                            1070
                        ],
                        "join": [
                            1048,
                            1075
                        ],
                        "map": [
                            1048,
                            1075
                        ],
                        "re.escape": [
                            1048,
                            1075
                        ],
                        "OPERATORS.keys": [
                            1048
                        ],
                        "m": [
                            1056,
                            1089,
                            1091,
                            1060,
                            1061,
                            1063,
                            1076,
                            1077,
                            1078,
                            1079,
                            1080,
                            1049,
                            1050,
                            1052,
                            1085,
                            1054
                        ],
                        "operator_rex.search": [
                            1049
                        ],
                        "filter_spec": [
                            1086,
                            1049,
                            1060,
                            1076
                        ],
                        "comparison_value": [
                            1056,
                            1057,
                            1092,
                            1078,
                            1052,
                            1054,
                            1055
                        ],
                        "int": [
                            1052
                        ],
                        "m.group": [
                            1056,
                            1089,
                            1091,
                            1060,
                            1061,
                            1078,
                            1079,
                            1080,
                            1052,
                            1054
                        ],
                        "ValueError": [
                            1058,
                            1053,
                            1086
                        ],
                        "parse_filesize": [
                            1056,
                            1054
                        ],
                        "op": [
                            1081,
                            1083,
                            1092,
                            1061
                        ],
                        "STR_OPERATORS": [
                            1064,
                            1075,
                            1079
                        ],
                        "attr.startswith": [
                            1066
                        ],
                        "attr": [
                            1066,
                            1067,
                            1068
                        ],
                        "value": [
                            1066,
                            1067,
                            1068
                        ],
                        "attr.endswith": [
                            1067
                        ],
                        "str_operator_rex": [
                            1076,
                            1070
                        ],
                        "STR_OPERATORS.keys": [
                            1075
                        ],
                        "str_operator_rex.search": [
                            1076
                        ],
                        "str_op": [
                            1081,
                            1083,
                            1079
                        ],
                        "actual_value": [
                            1089,
                            1090,
                            1092
                        ],
                        "f.get": [
                            1089
                        ],
                        "f": [
                            1089
                        ],
                        "_filter": [
                            1093
                        ]
                    },
                    "filtered_variables": {
                        "OPERATORS": [
                            1048,
                            1035,
                            1061
                        ],
                        "operator.lt": [
                            1036
                        ],
                        "operator": [
                            1065,
                            1036,
                            1037,
                            1038,
                            1039,
                            1040,
                            1041
                        ],
                        "operator.le": [
                            1037
                        ],
                        "operator.gt": [
                            1038
                        ],
                        "operator.ge": [
                            1039
                        ],
                        "operator.eq": [
                            1040,
                            1065
                        ],
                        "operator.ne": [
                            1041
                        ],
                        "operator_rex": [
                            1049,
                            1043
                        ],
                        "re.compile": [
                            1043,
                            1070
                        ],
                        "re": [
                            1048,
                            1075,
                            1043,
                            1070
                        ],
                        "join": [
                            1048,
                            1075
                        ],
                        "re.escape": [
                            1048,
                            1075
                        ],
                        "OPERATORS.keys": [
                            1048
                        ],
                        "m": [
                            1056,
                            1089,
                            1091,
                            1060,
                            1061,
                            1063,
                            1076,
                            1077,
                            1078,
                            1079,
                            1080,
                            1049,
                            1050,
                            1052,
                            1085,
                            1054
                        ],
                        "operator_rex.search": [
                            1049
                        ],
                        "filter_spec": [
                            1086,
                            1049,
                            1060,
                            1076
                        ],
                        "comparison_value": [
                            1056,
                            1057,
                            1092,
                            1078,
                            1052,
                            1054,
                            1055
                        ],
                        "m.group": [
                            1056,
                            1089,
                            1091,
                            1060,
                            1061,
                            1078,
                            1079,
                            1080,
                            1052,
                            1054
                        ],
                        "parse_filesize": [
                            1056,
                            1054
                        ],
                        "op": [
                            1081,
                            1083,
                            1092,
                            1061
                        ],
                        "STR_OPERATORS": [
                            1064,
                            1075,
                            1079
                        ],
                        "attr.startswith": [
                            1066
                        ],
                        "attr": [
                            1066,
                            1067,
                            1068
                        ],
                        "value": [
                            1066,
                            1067,
                            1068
                        ],
                        "attr.endswith": [
                            1067
                        ],
                        "str_operator_rex": [
                            1076,
                            1070
                        ],
                        "STR_OPERATORS.keys": [
                            1075
                        ],
                        "str_operator_rex.search": [
                            1076
                        ],
                        "str_op": [
                            1081,
                            1083,
                            1079
                        ],
                        "actual_value": [
                            1089,
                            1090,
                            1092
                        ],
                        "f.get": [
                            1089
                        ],
                        "f": [
                            1089
                        ],
                        "_filter": [
                            1093
                        ]
                    },
                    "diff_line_number": 1081,
                    "class_data": {
                        "signature": "class YoutubeDL(object)",
                        "docstring": "YoutubeDL class.\n\nYoutubeDL objects are the ones responsible of downloading the\nactual video file and writing it to disk if the user has requested\nit, among some other tasks. In most cases there should be one per\nprogram. As, given a video URL, the downloader doesn't know how to\nextract all the needed information, task that InfoExtractors do, it\nhas to pass the URL to one of them.\n\nFor this, YoutubeDL objects have a method that allows\nInfoExtractors to be registered in a given order. When it is passed\na URL, the YoutubeDL object handles it to the first InfoExtractor it\nfinds that reports being able to handle it. The InfoExtractor extracts\nall the information about the video or videos the URL refers to, and\nYoutubeDL process the extracted information, possibly using a File\nDownloader to download the video.\n\nYoutubeDL objects accept a lot of parameters. In order not to saturate\nthe object constructor with arguments, it receives a dictionary of\noptions instead. These options are available through the params\nattribute for the InfoExtractors to use. The YoutubeDL also\nregisters itself as the downloader in charge for the InfoExtractors\nthat are added to it, so this is a \"mutual registration\".\n\nAvailable options:\n\nusername:          Username for authentication purposes.\npassword:          Password for authentication purposes.\nvideopassword:     Password for accessing a video.\nap_mso:            Adobe Pass multiple-system operator identifier.\nap_username:       Multiple-system operator account username.\nap_password:       Multiple-system operator account password.\nusenetrc:          Use netrc for authentication instead.\nverbose:           Print additional info to stdout.\nquiet:             Do not print messages to stdout.\nno_warnings:       Do not print out anything for warnings.\nforceurl:          Force printing final URL.\nforcetitle:        Force printing title.\nforceid:           Force printing ID.\nforcethumbnail:    Force printing thumbnail URL.\nforcedescription:  Force printing description.\nforcefilename:     Force printing final filename.\nforceduration:     Force printing duration.\nforcejson:         Force printing info_dict as JSON.\ndump_single_json:  Force printing the info_dict of the whole playlist\n                   (or video) as a single JSON line.\nsimulate:          Do not download the video files.\nformat:            Video format code. See options.py for more information.\nouttmpl:           Template for output names.\nrestrictfilenames: Do not allow \"&\" and spaces in file names\nignoreerrors:      Do not stop on download errors.\nforce_generic_extractor: Force downloader to use the generic extractor\nnooverwrites:      Prevent overwriting files.\nplayliststart:     Playlist item to start at.\nplaylistend:       Playlist item to end at.\nplaylist_items:    Specific indices of playlist to download.\nplaylistreverse:   Download playlist items in reverse order.\nplaylistrandom:    Download playlist items in random order.\nmatchtitle:        Download only matching titles.\nrejecttitle:       Reject downloads for matching titles.\nlogger:            Log messages to a logging.Logger instance.\nlogtostderr:       Log messages to stderr instead of stdout.\nwritedescription:  Write the video description to a .description file\nwriteinfojson:     Write the video description to a .info.json file\nwriteannotations:  Write the video annotations to a .annotations.xml file\nwritethumbnail:    Write the thumbnail image to a file\nwrite_all_thumbnails:  Write all thumbnail formats to files\nwritesubtitles:    Write the video subtitles to a file\nwriteautomaticsub: Write the automatically generated subtitles to a file\nallsubtitles:      Downloads all the subtitles of the video\n                   (requires writesubtitles or writeautomaticsub)\nlistsubtitles:     Lists all available subtitles for the video\nsubtitlesformat:   The format code for subtitles\nsubtitleslangs:    List of languages of the subtitles to download\nkeepvideo:         Keep the video file after post-processing\ndaterange:         A DateRange object, download only if the upload_date is in the range.\nskip_download:     Skip the actual download of the video file\ncachedir:          Location of the cache files in the filesystem.\n                   False to disable filesystem cache.\nnoplaylist:        Download single video instead of a playlist if in doubt.\nage_limit:         An integer representing the user's age in years.\n                   Unsuitable videos for the given age are skipped.\nmin_views:         An integer representing the minimum view count the video\n                   must have in order to not be skipped.\n                   Videos without view count information are always\n                   downloaded. None for no limit.\nmax_views:         An integer representing the maximum view count.\n                   Videos that are more popular than that are not\n                   downloaded.\n                   Videos without view count information are always\n                   downloaded. None for no limit.\ndownload_archive:  File name of a file where all downloads are recorded.\n                   Videos already present in the file are not downloaded\n                   again.\ncookiefile:        File name where cookies should be read from and dumped to.\nnocheckcertificate:Do not verify SSL certificates\nprefer_insecure:   Use HTTP instead of HTTPS to retrieve information.\n                   At the moment, this is only supported by YouTube.\nproxy:             URL of the proxy server to use\ngeo_verification_proxy:  URL of the proxy to use for IP address verification\n                   on geo-restricted sites.\nsocket_timeout:    Time to wait for unresponsive hosts, in seconds\nbidi_workaround:   Work around buggy terminals without bidirectional text\n                   support, using fridibi\ndebug_printtraffic:Print out sent and received HTTP traffic\ninclude_ads:       Download ads as well\ndefault_search:    Prepend this string if an input url is not valid.\n                   'auto' for elaborate guessing\nencoding:          Use this encoding instead of the system-specified.\nextract_flat:      Do not resolve URLs, return the immediate result.\n                   Pass in 'in_playlist' to only show this behavior for\n                   playlist items.\npostprocessors:    A list of dictionaries, each with an entry\n                   * key:  The name of the postprocessor. See\n                           youtube_dl/postprocessor/__init__.py for a list.\n                   as well as any further keyword arguments for the\n                   postprocessor.\nprogress_hooks:    A list of functions that get called on download\n                   progress, with a dictionary with the entries\n                   * status: One of \"downloading\", \"error\", or \"finished\".\n                             Check this first and ignore unknown values.\n\n                   If status is one of \"downloading\", or \"finished\", the\n                   following properties may also be present:\n                   * filename: The final filename (always present)\n                   * tmpfilename: The filename we're currently writing to\n                   * downloaded_bytes: Bytes on disk\n                   * total_bytes: Size of the whole file, None if unknown\n                   * total_bytes_estimate: Guess of the eventual file size,\n                                           None if unavailable.\n                   * elapsed: The number of seconds since download started.\n                   * eta: The estimated time in seconds, None if unknown\n                   * speed: The download speed in bytes/second, None if\n                            unknown\n                   * fragment_index: The counter of the currently\n                                     downloaded video fragment.\n                   * fragment_count: The number of fragments (= individual\n                                     files that will be merged)\n\n                   Progress hooks are guaranteed to be called at least once\n                   (with status \"finished\") if the download is successful.\nmerge_output_format: Extension to use when merging formats.\nfixup:             Automatically correct known faults of the file.\n                   One of:\n                   - \"never\": do nothing\n                   - \"warn\": only emit a warning\n                   - \"detect_or_warn\": check whether we can do anything\n                                       about it, warn otherwise (default)\nsource_address:    Client-side IP address to bind to.\ncall_home:         Boolean, true iff we are allowed to contact the\n                   youtube-dl servers for debugging.\nsleep_interval:    Number of seconds to sleep before each download when\n                   used alone or a lower bound of a range for randomized\n                   sleep before each download (minimum possible number\n                   of seconds to sleep) when used along with\n                   max_sleep_interval.\nmax_sleep_interval:Upper bound of a range for randomized sleep before each\n                   download (maximum possible number of seconds to sleep).\n                   Must only be used along with sleep_interval.\n                   Actual sleep time will be a random float from range\n                   [sleep_interval; max_sleep_interval].\nlistformats:       Print an overview of available video formats and exit.\nlist_thumbnails:   Print a table of all thumbnails and exit.\nmatch_filter:      A function that gets called with the info_dict of\n                   every video.\n                   If it returns a message, the video is ignored.\n                   If it returns None, the video is downloaded.\n                   match_filter_func in utils.py is one example for this.\nno_color:          Do not emit color codes in output.\ngeo_bypass:        Bypass geographic restriction via faking X-Forwarded-For\n                   HTTP header\ngeo_bypass_country:\n                   Two-letter ISO 3166-2 country code that will be used for\n                   explicit geographic restriction bypassing via faking\n                   X-Forwarded-For HTTP header\ngeo_bypass_ip_block:\n                   IP range in CIDR notation that will be used similarly to\n                   geo_bypass_country\n\nThe following options determine which downloader is picked:\nexternal_downloader: Executable of the external downloader to call.\n                   None or unset for standard (built-in) downloader.\nhls_prefer_native: Use the native HLS downloader instead of ffmpeg/avconv\n                   if True, otherwise use ffmpeg/avconv if False, otherwise\n                   use downloader suggested by extractor if None.\n\nThe following parameters are not used by YoutubeDL itself, they are used by\nthe downloader (see youtube_dl/downloader/common.py):\nnopart, updatetime, buffersize, ratelimit, min_filesize, max_filesize, test,\nnoresizebuffer, retries, continuedl, noprogress, consoletitle,\nxattr_set_filesize, external_downloader_args, hls_use_mpegts,\nhttp_chunk_size.\n\nThe following options are used by the post processors:\nprefer_ffmpeg:     If False, use avconv instead of ffmpeg if both are available,\n                   otherwise prefer ffmpeg.\npostprocessor_args: A list of additional command-line arguments for the\n                    postprocessor.\n\nThe following options are used by the Youtube extractor:\nyoutube_include_dash_manifest: If True (default), DASH manifests and related\n                    data will be downloaded and processed by extractor.\n                    You can reduce network I/O by disabling it if you don't\n                    care about DASH.",
                        "constructor_docstring": "Create a FileDownloader object with the given options.",
                        "functions": [
                            "def __init__(self, params=None, auto_init=True):\n    \"\"\"Create a FileDownloader object with the given options.\"\"\"\n    if params is None:\n        params = {}\n    self._ies = []\n    self._ies_instances = {}\n    self._pps = []\n    self._progress_hooks = []\n    self._download_retcode = 0\n    self._num_downloads = 0\n    self._screen_file = [sys.stdout, sys.stderr][params.get('logtostderr', False)]\n    self._err_file = sys.stderr\n    self.params = {'nocheckcertificate': False}\n    self.params.update(params)\n    self.cache = Cache(self)\n\n    def check_deprecated(param, option, suggestion):\n        if self.params.get(param) is not None:\n            self.report_warning('%s is deprecated. Use %s instead.' % (option, suggestion))\n            return True\n        return False\n    if check_deprecated('cn_verification_proxy', '--cn-verification-proxy', '--geo-verification-proxy'):\n        if self.params.get('geo_verification_proxy') is None:\n            self.params['geo_verification_proxy'] = self.params['cn_verification_proxy']\n    check_deprecated('autonumber_size', '--autonumber-size', 'output template with %(autonumber)0Nd, where N in the number of digits')\n    check_deprecated('autonumber', '--auto-number', '-o \"%(autonumber)s-%(title)s.%(ext)s\"')\n    check_deprecated('usetitle', '--title', '-o \"%(title)s-%(id)s.%(ext)s\"')\n    if params.get('bidi_workaround', False):\n        try:\n            import pty\n            master, slave = pty.openpty()\n            width = compat_get_terminal_size().columns\n            if width is None:\n                width_args = []\n            else:\n                width_args = ['-w', str(width)]\n            sp_kwargs = dict(stdin=subprocess.PIPE, stdout=slave, stderr=self._err_file)\n            try:\n                self._output_process = subprocess.Popen(['bidiv'] + width_args, **sp_kwargs)\n            except OSError:\n                self._output_process = subprocess.Popen(['fribidi', '-c', 'UTF-8'] + width_args, **sp_kwargs)\n            self._output_channel = os.fdopen(master, 'rb')\n        except OSError as ose:\n            if ose.errno == errno.ENOENT:\n                self.report_warning('Could not find fribidi executable, ignoring --bidi-workaround . Make sure that  fribidi  is an executable file in one of the directories in your $PATH.')\n            else:\n                raise\n    if sys.platform != 'win32' and sys.getfilesystemencoding() in ['ascii', 'ANSI_X3.4-1968'] and (not params.get('restrictfilenames', False)):\n        self.report_warning('Assuming --restrict-filenames since file system encoding cannot encode all characters. Set the LC_ALL environment variable to fix this.')\n        self.params['restrictfilenames'] = True\n    if isinstance(params.get('outtmpl'), bytes):\n        self.report_warning('Parameter outtmpl is bytes, but should be a unicode string. Put  from __future__ import unicode_literals  at the top of your code file or consider switching to Python 3.x.')\n    self._setup_opener()\n    if auto_init:\n        self.print_debug_header()\n        self.add_default_info_extractors()\n    for pp_def_raw in self.params.get('postprocessors', []):\n        pp_class = get_postprocessor(pp_def_raw['key'])\n        pp_def = dict(pp_def_raw)\n        del pp_def['key']\n        pp = pp_class(self, **compat_kwargs(pp_def))\n        self.add_post_processor(pp)\n    for ph in self.params.get('progress_hooks', []):\n        self.add_progress_hook(ph)\n    register_socks_protocols()",
                            "def warn_if_short_id(self, argv):\n    idxs = [i for i, a in enumerate(argv) if re.match('^-[0-9A-Za-z_-]{10}$', a)]\n    if idxs:\n        correct_argv = ['youtube-dl'] + [a for i, a in enumerate(argv) if i not in idxs] + ['--'] + [argv[i] for i in idxs]\n        self.report_warning('Long argument string detected. Use -- to separate parameters and URLs, like this:\\n%s\\n' % args_to_str(correct_argv))",
                            "def add_info_extractor(self, ie):\n    \"\"\"Add an InfoExtractor object to the end of the list.\"\"\"\n    self._ies.append(ie)\n    if not isinstance(ie, type):\n        self._ies_instances[ie.ie_key()] = ie\n        ie.set_downloader(self)",
                            "def get_info_extractor(self, ie_key):\n    \"\"\"\n    Get an instance of an IE with name ie_key, it will try to get one from\n    the _ies list, if there's no instance it will create a new one and add\n    it to the extractor list.\n    \"\"\"\n    ie = self._ies_instances.get(ie_key)\n    if ie is None:\n        ie = get_info_extractor(ie_key)()\n        self.add_info_extractor(ie)\n    return ie",
                            "def add_default_info_extractors(self):\n    \"\"\"\n    Add the InfoExtractors returned by gen_extractors to the end of the list\n    \"\"\"\n    for ie in gen_extractor_classes():\n        self.add_info_extractor(ie)",
                            "def add_post_processor(self, pp):\n    \"\"\"Add a PostProcessor object to the end of the chain.\"\"\"\n    self._pps.append(pp)\n    pp.set_downloader(self)",
                            "def add_progress_hook(self, ph):\n    \"\"\"Add the progress hook (currently only for the file downloader)\"\"\"\n    self._progress_hooks.append(ph)",
                            "def _bidi_workaround(self, message):\n    if not hasattr(self, '_output_channel'):\n        return message\n    assert hasattr(self, '_output_process')\n    assert isinstance(message, compat_str)\n    line_count = message.count('\\n') + 1\n    self._output_process.stdin.write((message + '\\n').encode('utf-8'))\n    self._output_process.stdin.flush()\n    res = ''.join((self._output_channel.readline().decode('utf-8') for _ in range(line_count)))\n    return res[:-len('\\n')]",
                            "def to_screen(self, message, skip_eol=False):\n    \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n    return self.to_stdout(message, skip_eol, check_quiet=True)",
                            "def _write_string(self, s, out=None):\n    write_string(s, out=out, encoding=self.params.get('encoding'))",
                            "def to_stdout(self, message, skip_eol=False, check_quiet=False):\n    \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n    if self.params.get('logger'):\n        self.params['logger'].debug(message)\n    elif not check_quiet or not self.params.get('quiet', False):\n        message = self._bidi_workaround(message)\n        terminator = ['\\n', ''][skip_eol]\n        output = message + terminator\n        self._write_string(output, self._screen_file)",
                            "def to_stderr(self, message):\n    \"\"\"Print message to stderr.\"\"\"\n    assert isinstance(message, compat_str)\n    if self.params.get('logger'):\n        self.params['logger'].error(message)\n    else:\n        message = self._bidi_workaround(message)\n        output = message + '\\n'\n        self._write_string(output, self._err_file)",
                            "def to_console_title(self, message):\n    if not self.params.get('consoletitle', False):\n        return\n    if compat_os_name == 'nt':\n        if ctypes.windll.kernel32.GetConsoleWindow():\n            ctypes.windll.kernel32.SetConsoleTitleW(ctypes.c_wchar_p(message))\n    elif 'TERM' in os.environ:\n        self._write_string('\\x1b]0;%s\\x07' % message, self._screen_file)",
                            "def save_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if self.params.get('simulate', False):\n        return\n    if compat_os_name != 'nt' and 'TERM' in os.environ:\n        self._write_string('\\x1b[22;0t', self._screen_file)",
                            "def restore_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if self.params.get('simulate', False):\n        return\n    if compat_os_name != 'nt' and 'TERM' in os.environ:\n        self._write_string('\\x1b[23;0t', self._screen_file)",
                            "def __enter__(self):\n    self.save_console_title()\n    return self",
                            "def __exit__(self, *args):\n    self.restore_console_title()\n    if self.params.get('cookiefile') is not None:\n        self.cookiejar.save(ignore_discard=True, ignore_expires=True)",
                            "def trouble(self, message=None, tb=None):\n    \"\"\"Determine action to take when a download problem appears.\n\n    Depending on if the downloader has been configured to ignore\n    download errors or not, this method may throw an exception or\n    not when errors are found, after printing the message.\n\n    tb, if given, is additional traceback information.\n    \"\"\"\n    if message is not None:\n        self.to_stderr(message)\n    if self.params.get('verbose'):\n        if tb is None:\n            if sys.exc_info()[0]:\n                tb = ''\n                if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                    tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                tb += encode_compat_str(traceback.format_exc())\n            else:\n                tb_data = traceback.format_list(traceback.extract_stack())\n                tb = ''.join(tb_data)\n        self.to_stderr(tb)\n    if not self.params.get('ignoreerrors', False):\n        if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n            exc_info = sys.exc_info()[1].exc_info\n        else:\n            exc_info = sys.exc_info()\n        raise DownloadError(message, exc_info)\n    self._download_retcode = 1",
                            "def report_warning(self, message):\n    \"\"\"\n    Print the message to stderr, it will be prefixed with 'WARNING:'\n    If stderr is a tty file the 'WARNING:' will be colored\n    \"\"\"\n    if self.params.get('logger') is not None:\n        self.params['logger'].warning(message)\n    else:\n        if self.params.get('no_warnings'):\n            return\n        if not self.params.get('no_color') and self._err_file.isatty() and (compat_os_name != 'nt'):\n            _msg_header = '\\x1b[0;33mWARNING:\\x1b[0m'\n        else:\n            _msg_header = 'WARNING:'\n        warning_message = '%s %s' % (_msg_header, message)\n        self.to_stderr(warning_message)",
                            "def report_error(self, message, tb=None):\n    \"\"\"\n    Do the same as trouble, but prefixes the message with 'ERROR:', colored\n    in red if stderr is a tty file.\n    \"\"\"\n    if not self.params.get('no_color') and self._err_file.isatty() and (compat_os_name != 'nt'):\n        _msg_header = '\\x1b[0;31mERROR:\\x1b[0m'\n    else:\n        _msg_header = 'ERROR:'\n    error_message = '%s %s' % (_msg_header, message)\n    self.trouble(error_message, tb)",
                            "def report_file_already_downloaded(self, file_name):\n    \"\"\"Report file has already been fully downloaded.\"\"\"\n    try:\n        self.to_screen('[download] %s has already been downloaded' % file_name)\n    except UnicodeEncodeError:\n        self.to_screen('[download] The file has already been downloaded')",
                            "def prepare_filename(self, info_dict):\n    \"\"\"Generate the output filename.\"\"\"\n    try:\n        template_dict = dict(info_dict)\n        template_dict['epoch'] = int(time.time())\n        autonumber_size = self.params.get('autonumber_size')\n        if autonumber_size is None:\n            autonumber_size = 5\n        template_dict['autonumber'] = self.params.get('autonumber_start', 1) - 1 + self._num_downloads\n        if template_dict.get('resolution') is None:\n            if template_dict.get('width') and template_dict.get('height'):\n                template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n            elif template_dict.get('height'):\n                template_dict['resolution'] = '%sp' % template_dict['height']\n            elif template_dict.get('width'):\n                template_dict['resolution'] = '%dx?' % template_dict['width']\n        sanitize = lambda k, v: sanitize_filename(compat_str(v), restricted=self.params.get('restrictfilenames'), is_id=k == 'id' or k.endswith('_id'))\n        template_dict = dict(((k, v if isinstance(v, compat_numeric_types) else sanitize(k, v)) for k, v in template_dict.items() if v is not None and (not isinstance(v, (list, tuple, dict)))))\n        template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n        outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n        field_size_compat_map = {'playlist_index': len(str(template_dict['n_entries'])), 'autonumber': autonumber_size}\n        FIELD_SIZE_COMPAT_RE = '(?<!%)%\\\\((?P<field>autonumber|playlist_index)\\\\)s'\n        mobj = re.search(FIELD_SIZE_COMPAT_RE, outtmpl)\n        if mobj:\n            outtmpl = re.sub(FIELD_SIZE_COMPAT_RE, '%%(\\\\1)0%dd' % field_size_compat_map[mobj.group('field')], outtmpl)\n        for numeric_field in self._NUMERIC_FIELDS:\n            if numeric_field not in template_dict:\n                FORMAT_RE = '(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '\n                outtmpl = re.sub(FORMAT_RE.format(numeric_field), '%({0})s'.format(numeric_field), outtmpl)\n        sep = ''.join([random.choice(ascii_letters) for _ in range(32)])\n        outtmpl = outtmpl.replace('%%', '%{0}%'.format(sep)).replace('$$', '${0}$'.format(sep))\n        filename = expand_path(outtmpl).replace(sep, '') % template_dict\n        if sys.version_info < (3, 0) and sys.platform == 'win32':\n            filename = encodeFilename(filename, True).decode(preferredencoding())\n        return sanitize_path(filename)\n    except ValueError as err:\n        self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n        return None",
                            "def _match_entry(self, info_dict, incomplete):\n    \"\"\" Returns None iff the file should be downloaded \"\"\"\n    video_title = info_dict.get('title', info_dict.get('id', 'video'))\n    if 'title' in info_dict:\n        title = info_dict['title']\n        matchtitle = self.params.get('matchtitle', False)\n        if matchtitle:\n            if not re.search(matchtitle, title, re.IGNORECASE):\n                return '\"' + title + '\" title did not match pattern \"' + matchtitle + '\"'\n        rejecttitle = self.params.get('rejecttitle', False)\n        if rejecttitle:\n            if re.search(rejecttitle, title, re.IGNORECASE):\n                return '\"' + title + '\" title matched reject pattern \"' + rejecttitle + '\"'\n    date = info_dict.get('upload_date')\n    if date is not None:\n        dateRange = self.params.get('daterange', DateRange())\n        if date not in dateRange:\n            return '%s upload date is not in range %s' % (date_from_str(date).isoformat(), dateRange)\n    view_count = info_dict.get('view_count')\n    if view_count is not None:\n        min_views = self.params.get('min_views')\n        if min_views is not None and view_count < min_views:\n            return 'Skipping %s, because it has not reached minimum view count (%d/%d)' % (video_title, view_count, min_views)\n        max_views = self.params.get('max_views')\n        if max_views is not None and view_count > max_views:\n            return 'Skipping %s, because it has exceeded the maximum view count (%d/%d)' % (video_title, view_count, max_views)\n    if age_restricted(info_dict.get('age_limit'), self.params.get('age_limit')):\n        return 'Skipping \"%s\" because it is age restricted' % video_title\n    if self.in_download_archive(info_dict):\n        return '%s has already been recorded in archive' % video_title\n    if not incomplete:\n        match_filter = self.params.get('match_filter')\n        if match_filter is not None:\n            ret = match_filter(info_dict)\n            if ret is not None:\n                return ret\n    return None",
                            "@staticmethod\ndef add_extra_info(info_dict, extra_info):\n    \"\"\"Set the keys from extra_info in info dict if they are missing\"\"\"\n    for key, value in extra_info.items():\n        info_dict.setdefault(key, value)",
                            "def extract_info(self, url, download=True, ie_key=None, extra_info={}, process=True, force_generic_extractor=False):\n    \"\"\"\n    Returns a list with a dictionary for each video we find.\n    If 'download', also downloads the videos.\n    extra_info is a dict containing the extra values to add to each result\n    \"\"\"\n    if not ie_key and force_generic_extractor:\n        ie_key = 'Generic'\n    if ie_key:\n        ies = [self.get_info_extractor(ie_key)]\n    else:\n        ies = self._ies\n    for ie in ies:\n        if not ie.suitable(url):\n            continue\n        ie = self.get_info_extractor(ie.ie_key())\n        if not ie.working():\n            self.report_warning('The program functionality for this site has been marked as broken, and will probably not work.')\n        try:\n            ie_result = ie.extract(url)\n            if ie_result is None:\n                break\n            if isinstance(ie_result, list):\n                ie_result = {'_type': 'compat_list', 'entries': ie_result}\n            self.add_default_extra_info(ie_result, ie, url)\n            if process:\n                return self.process_ie_result(ie_result, download, extra_info)\n            else:\n                return ie_result\n        except GeoRestrictedError as e:\n            msg = e.msg\n            if e.countries:\n                msg += '\\nThis video is available in %s.' % ', '.join(map(ISO3166Utils.short2full, e.countries))\n            msg += '\\nYou might want to use a VPN or a proxy server (with --proxy) to workaround.'\n            self.report_error(msg)\n            break\n        except ExtractorError as e:\n            self.report_error(compat_str(e), e.format_traceback())\n            break\n        except MaxDownloadsReached:\n            raise\n        except Exception as e:\n            if self.params.get('ignoreerrors', False):\n                self.report_error(error_to_compat_str(e), tb=encode_compat_str(traceback.format_exc()))\n                break\n            else:\n                raise\n    else:\n        self.report_error('no suitable InfoExtractor for URL %s' % url)",
                            "def add_default_extra_info(self, ie_result, ie, url):\n    self.add_extra_info(ie_result, {'extractor': ie.IE_NAME, 'webpage_url': url, 'webpage_url_basename': url_basename(url), 'extractor_key': ie.ie_key()})",
                            "def process_ie_result(self, ie_result, download=True, extra_info={}):\n    \"\"\"\n    Take the result of the ie(may be modified) and resolve all unresolved\n    references (URLs, playlist items).\n\n    It will also download the videos if 'download'.\n    Returns the resolved ie_result.\n    \"\"\"\n    result_type = ie_result.get('_type', 'video')\n    if result_type in ('url', 'url_transparent'):\n        ie_result['url'] = sanitize_url(ie_result['url'])\n        extract_flat = self.params.get('extract_flat', False)\n        if extract_flat == 'in_playlist' and 'playlist' in extra_info or extract_flat is True:\n            if self.params.get('forcejson', False):\n                self.to_stdout(json.dumps(ie_result))\n            return ie_result\n    if result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        return self.process_video_result(ie_result, download=download)\n    elif result_type == 'url':\n        return self.extract_info(ie_result['url'], download, ie_key=ie_result.get('ie_key'), extra_info=extra_info)\n    elif result_type == 'url_transparent':\n        info = self.extract_info(ie_result['url'], ie_key=ie_result.get('ie_key'), extra_info=extra_info, download=False, process=False)\n        if not info:\n            return info\n        force_properties = dict(((k, v) for k, v in ie_result.items() if v is not None))\n        for f in ('_type', 'url', 'id', 'extractor', 'extractor_key', 'ie_key'):\n            if f in force_properties:\n                del force_properties[f]\n        new_result = info.copy()\n        new_result.update(force_properties)\n        if new_result.get('_type') == 'url':\n            new_result['_type'] = 'url_transparent'\n        return self.process_ie_result(new_result, download=download, extra_info=extra_info)\n    elif result_type in ('playlist', 'multi_video'):\n        playlist = ie_result.get('title') or ie_result.get('id')\n        self.to_screen('[download] Downloading playlist: %s' % playlist)\n        playlist_results = []\n        playliststart = self.params.get('playliststart', 1) - 1\n        playlistend = self.params.get('playlistend')\n        if playlistend == -1:\n            playlistend = None\n        playlistitems_str = self.params.get('playlist_items')\n        playlistitems = None\n        if playlistitems_str is not None:\n\n            def iter_playlistitems(format):\n                for string_segment in format.split(','):\n                    if '-' in string_segment:\n                        start, end = string_segment.split('-')\n                        for item in range(int(start), int(end) + 1):\n                            yield int(item)\n                    else:\n                        yield int(string_segment)\n            playlistitems = orderedSet(iter_playlistitems(playlistitems_str))\n        ie_entries = ie_result['entries']\n\n        def make_playlistitems_entries(list_ie_entries):\n            num_entries = len(list_ie_entries)\n            return [list_ie_entries[i - 1] for i in playlistitems if -num_entries <= i - 1 < num_entries]\n\n        def report_download(num_entries):\n            self.to_screen('[%s] playlist %s: Downloading %d videos' % (ie_result['extractor'], playlist, num_entries))\n        if isinstance(ie_entries, list):\n            n_all_entries = len(ie_entries)\n            if playlistitems:\n                entries = make_playlistitems_entries(ie_entries)\n            else:\n                entries = ie_entries[playliststart:playlistend]\n            n_entries = len(entries)\n            self.to_screen('[%s] playlist %s: Collected %d video ids (downloading %d of them)' % (ie_result['extractor'], playlist, n_all_entries, n_entries))\n        elif isinstance(ie_entries, PagedList):\n            if playlistitems:\n                entries = []\n                for item in playlistitems:\n                    entries.extend(ie_entries.getslice(item - 1, item))\n            else:\n                entries = ie_entries.getslice(playliststart, playlistend)\n            n_entries = len(entries)\n            report_download(n_entries)\n        else:\n            if playlistitems:\n                entries = make_playlistitems_entries(list(itertools.islice(ie_entries, 0, max(playlistitems))))\n            else:\n                entries = list(itertools.islice(ie_entries, playliststart, playlistend))\n            n_entries = len(entries)\n            report_download(n_entries)\n        if self.params.get('playlistreverse', False):\n            entries = entries[::-1]\n        if self.params.get('playlistrandom', False):\n            random.shuffle(entries)\n        x_forwarded_for = ie_result.get('__x_forwarded_for_ip')\n        for i, entry in enumerate(entries, 1):\n            self.to_screen('[download] Downloading video %s of %s' % (i, n_entries))\n            if x_forwarded_for:\n                entry['__x_forwarded_for_ip'] = x_forwarded_for\n            extra = {'n_entries': n_entries, 'playlist': playlist, 'playlist_id': ie_result.get('id'), 'playlist_title': ie_result.get('title'), 'playlist_uploader': ie_result.get('uploader'), 'playlist_uploader_id': ie_result.get('uploader_id'), 'playlist_index': i + playliststart, 'extractor': ie_result['extractor'], 'webpage_url': ie_result['webpage_url'], 'webpage_url_basename': url_basename(ie_result['webpage_url']), 'extractor_key': ie_result['extractor_key']}\n            reason = self._match_entry(entry, incomplete=True)\n            if reason is not None:\n                self.to_screen('[download] ' + reason)\n                continue\n            entry_result = self.process_ie_result(entry, download=download, extra_info=extra)\n            playlist_results.append(entry_result)\n        ie_result['entries'] = playlist_results\n        self.to_screen('[download] Finished downloading playlist: %s' % playlist)\n        return ie_result\n    elif result_type == 'compat_list':\n        self.report_warning('Extractor %s returned a compat_list result. It needs to be updated.' % ie_result.get('extractor'))\n\n        def _fixup(r):\n            self.add_extra_info(r, {'extractor': ie_result['extractor'], 'webpage_url': ie_result['webpage_url'], 'webpage_url_basename': url_basename(ie_result['webpage_url']), 'extractor_key': ie_result['extractor_key']})\n            return r\n        ie_result['entries'] = [self.process_ie_result(_fixup(r), download, extra_info) for r in ie_result['entries']]\n        return ie_result\n    else:\n        raise Exception('Invalid result type: %s' % result_type)",
                            "def _build_format_filter(self, filter_spec):\n    \"\"\" Returns a function to filter the formats according to the filter_spec \"\"\"\n    OPERATORS = {'<': operator.lt, '<=': operator.le, '>': operator.gt, '>=': operator.ge, '=': operator.eq, '!=': operator.ne}\n    operator_rex = re.compile('(?x)\\\\s*\\n            (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\n            \\\\s*(?P<op>%s)(?P<none_inclusive>\\\\s*\\\\?)?\\\\s*\\n            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\\n            $\\n            ' % '|'.join(map(re.escape, OPERATORS.keys())))\n    m = operator_rex.search(filter_spec)\n    if m:\n        try:\n            comparison_value = int(m.group('value'))\n        except ValueError:\n            comparison_value = parse_filesize(m.group('value'))\n            if comparison_value is None:\n                comparison_value = parse_filesize(m.group('value') + 'B')\n            if comparison_value is None:\n                raise ValueError('Invalid value %r in format specification %r' % (m.group('value'), filter_spec))\n        op = OPERATORS[m.group('op')]\n    if not m:\n        STR_OPERATORS = {'=': operator.eq, '^=': lambda attr, value: attr.startswith(value), '$=': lambda attr, value: attr.endswith(value), '*=': lambda attr, value: value in attr}\n        str_operator_rex = re.compile('(?x)\\n                \\\\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\\n                \\\\s*(?P<negation>!\\\\s*)?(?P<op>%s)(?P<none_inclusive>\\\\s*\\\\?)?\\n                \\\\s*(?P<value>[a-zA-Z0-9._-]+)\\n                \\\\s*$\\n                ' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n        m = str_operator_rex.search(filter_spec)\n        if m:\n            comparison_value = m.group('value')\n            str_op = STR_OPERATORS[m.group('op')]\n            if m.group('negation'):\n                op = lambda attr, value: not str_op\n            else:\n                op = str_op\n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n\n    def _filter(f):\n        actual_value = f.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n    return _filter",
                            "def _default_format_spec(self, info_dict, download=True):\n\n    def can_merge():\n        merger = FFmpegMergerPP(self)\n        return merger.available and merger.can_merge()\n\n    def prefer_best():\n        if self.params.get('simulate', False):\n            return False\n        if not download:\n            return False\n        if self.params.get('outtmpl', DEFAULT_OUTTMPL) == '-':\n            return True\n        if info_dict.get('is_live'):\n            return True\n        if not can_merge():\n            return True\n        return False\n    req_format_list = ['bestvideo+bestaudio', 'best']\n    if prefer_best():\n        req_format_list.reverse()\n    return '/'.join(req_format_list)",
                            "def build_format_selector(self, format_spec):\n\n    def syntax_error(note, start):\n        message = 'Invalid format specification: {0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1])\n        return SyntaxError(message)\n    PICKFIRST = 'PICKFIRST'\n    MERGE = 'MERGE'\n    SINGLE = 'SINGLE'\n    GROUP = 'GROUP'\n    FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n    def _parse_filter(tokens):\n        filter_parts = []\n        for type, string, start, _, _ in tokens:\n            if type == tokenize.OP and string == ']':\n                return ''.join(filter_parts)\n            else:\n                filter_parts.append(string)\n\n    def _remove_unused_ops(tokens):\n        ALLOWED_OPS = ('/', '+', ',', '(', ')')\n        last_string, last_start, last_end, last_line = (None, None, None, None)\n        for type, string, start, end, line in tokens:\n            if type == tokenize.OP and string == '[':\n                if last_string:\n                    yield (tokenize.NAME, last_string, last_start, last_end, last_line)\n                    last_string = None\n                yield (type, string, start, end, line)\n                for type, string, start, end, line in tokens:\n                    yield (type, string, start, end, line)\n                    if type == tokenize.OP and string == ']':\n                        break\n            elif type == tokenize.OP and string in ALLOWED_OPS:\n                if last_string:\n                    yield (tokenize.NAME, last_string, last_start, last_end, last_line)\n                    last_string = None\n                yield (type, string, start, end, line)\n            elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n                if not last_string:\n                    last_string = string\n                    last_start = start\n                    last_end = end\n                else:\n                    last_string += string\n        if last_string:\n            yield (tokenize.NAME, last_string, last_start, last_end, last_line)\n\n    def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n        selectors = []\n        current_selector = None\n        for type, string, start, _, _ in tokens:\n            if type == getattr(tokenize, 'ENCODING', None):\n                continue\n            elif type in [tokenize.NAME, tokenize.NUMBER]:\n                current_selector = FormatSelector(SINGLE, string, [])\n            elif type == tokenize.OP:\n                if string == ')':\n                    if not inside_group:\n                        tokens.restore_last_token()\n                    break\n                elif inside_merge and string in ['/', ',']:\n                    tokens.restore_last_token()\n                    break\n                elif inside_choice and string == ',':\n                    tokens.restore_last_token()\n                    break\n                elif string == ',':\n                    if not current_selector:\n                        raise syntax_error('\",\" must follow a format selector', start)\n                    selectors.append(current_selector)\n                    current_selector = None\n                elif string == '/':\n                    if not current_selector:\n                        raise syntax_error('\"/\" must follow a format selector', start)\n                    first_choice = current_selector\n                    second_choice = _parse_format_selection(tokens, inside_choice=True)\n                    current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n                elif string == '[':\n                    if not current_selector:\n                        current_selector = FormatSelector(SINGLE, 'best', [])\n                    format_filter = _parse_filter(tokens)\n                    current_selector.filters.append(format_filter)\n                elif string == '(':\n                    if current_selector:\n                        raise syntax_error('Unexpected \"(\"', start)\n                    group = _parse_format_selection(tokens, inside_group=True)\n                    current_selector = FormatSelector(GROUP, group, [])\n                elif string == '+':\n                    video_selector = current_selector\n                    audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                    if not video_selector or not audio_selector:\n                        raise syntax_error('\"+\" must be between two format selectors', start)\n                    current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n                else:\n                    raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n            elif type == tokenize.ENDMARKER:\n                break\n        if current_selector:\n            selectors.append(current_selector)\n        return selectors\n\n    def _build_selector_function(selector):\n        if isinstance(selector, list):\n            fs = [_build_selector_function(s) for s in selector]\n\n            def selector_function(ctx):\n                for f in fs:\n                    for format in f(ctx):\n                        yield format\n            return selector_function\n        elif selector.type == GROUP:\n            selector_function = _build_selector_function(selector.selector)\n        elif selector.type == PICKFIRST:\n            fs = [_build_selector_function(s) for s in selector.selector]\n\n            def selector_function(ctx):\n                for f in fs:\n                    picked_formats = list(f(ctx))\n                    if picked_formats:\n                        return picked_formats\n                return []\n        elif selector.type == SINGLE:\n            format_spec = selector.selector\n\n            def selector_function(ctx):\n                formats = list(ctx['formats'])\n                if not formats:\n                    return\n                if format_spec == 'all':\n                    for f in formats:\n                        yield f\n                elif format_spec in ['best', 'worst', None]:\n                    format_idx = 0 if format_spec == 'worst' else -1\n                    audiovideo_formats = [f for f in formats if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                    if audiovideo_formats:\n                        yield audiovideo_formats[format_idx]\n                    elif ctx['incomplete_formats']:\n                        yield formats[format_idx]\n                elif format_spec == 'bestaudio':\n                    audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[-1]\n                elif format_spec == 'worstaudio':\n                    audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[0]\n                elif format_spec == 'bestvideo':\n                    video_formats = [f for f in formats if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[-1]\n                elif format_spec == 'worstvideo':\n                    video_formats = [f for f in formats if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[0]\n                else:\n                    extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                    if format_spec in extensions:\n                        filter_f = lambda f: f['ext'] == format_spec\n                    else:\n                        filter_f = lambda f: f['format_id'] == format_spec\n                    matches = list(filter(filter_f, formats))\n                    if matches:\n                        yield matches[-1]\n        elif selector.type == MERGE:\n\n            def _merge(formats_info):\n                format_1, format_2 = [f['format_id'] for f in formats_info]\n                if formats_info[0].get('vcodec') == 'none':\n                    self.report_error('The first format must contain the video, try using \"-f %s+%s\"' % (format_2, format_1))\n                    return\n                if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                    self.report_error('Both formats %s and %s are video-only, you must specify \"-f video+audio\"' % (format_1, format_2))\n                    return\n                output_ext = formats_info[0]['ext'] if self.params.get('merge_output_format') is None else self.params['merge_output_format']\n                return {'requested_formats': formats_info, 'format': '%s+%s' % (formats_info[0].get('format'), formats_info[1].get('format')), 'format_id': '%s+%s' % (formats_info[0].get('format_id'), formats_info[1].get('format_id')), 'width': formats_info[0].get('width'), 'height': formats_info[0].get('height'), 'resolution': formats_info[0].get('resolution'), 'fps': formats_info[0].get('fps'), 'vcodec': formats_info[0].get('vcodec'), 'vbr': formats_info[0].get('vbr'), 'stretched_ratio': formats_info[0].get('stretched_ratio'), 'acodec': formats_info[1].get('acodec'), 'abr': formats_info[1].get('abr'), 'ext': output_ext}\n            video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n            def selector_function(ctx):\n                for pair in itertools.product(video_selector(copy.deepcopy(ctx)), audio_selector(copy.deepcopy(ctx))):\n                    yield _merge(pair)\n        filters = [self._build_format_filter(f) for f in selector.filters]\n\n        def final_selector(ctx):\n            ctx_copy = copy.deepcopy(ctx)\n            for _filter in filters:\n                ctx_copy['formats'] = list(filter(_filter, ctx_copy['formats']))\n            return selector_function(ctx_copy)\n        return final_selector\n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(_remove_unused_ops(compat_tokenize_tokenize(stream.readline)))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n    class TokenIterator(object):\n\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n        next = __next__\n\n        def restore_last_token(self):\n            self.counter -= 1\n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)",
                            "def _calc_headers(self, info_dict):\n    res = std_headers.copy()\n    add_headers = info_dict.get('http_headers')\n    if add_headers:\n        res.update(add_headers)\n    cookies = self._calc_cookies(info_dict)\n    if cookies:\n        res['Cookie'] = cookies\n    if 'X-Forwarded-For' not in res:\n        x_forwarded_for_ip = info_dict.get('__x_forwarded_for_ip')\n        if x_forwarded_for_ip:\n            res['X-Forwarded-For'] = x_forwarded_for_ip\n    return res",
                            "def _calc_cookies(self, info_dict):\n    pr = sanitized_Request(info_dict['url'])\n    self.cookiejar.add_cookie_header(pr)\n    return pr.get_header('Cookie')",
                            "def process_video_result(self, info_dict, download=True):\n    assert info_dict.get('_type', 'video') == 'video'\n    if 'id' not in info_dict:\n        raise ExtractorError('Missing \"id\" field in extractor result')\n    if 'title' not in info_dict:\n        raise ExtractorError('Missing \"title\" field in extractor result')\n\n    def report_force_conversion(field, field_not, conversion):\n        self.report_warning('\"%s\" field is not %s - forcing %s conversion, there is an error in extractor' % (field, field_not, conversion))\n\n    def sanitize_string_field(info, string_field):\n        field = info.get(string_field)\n        if field is None or isinstance(field, compat_str):\n            return\n        report_force_conversion(string_field, 'a string', 'string')\n        info[string_field] = compat_str(field)\n\n    def sanitize_numeric_fields(info):\n        for numeric_field in self._NUMERIC_FIELDS:\n            field = info.get(numeric_field)\n            if field is None or isinstance(field, compat_numeric_types):\n                continue\n            report_force_conversion(numeric_field, 'numeric', 'int')\n            info[numeric_field] = int_or_none(field)\n    sanitize_string_field(info_dict, 'id')\n    sanitize_numeric_fields(info_dict)\n    if 'playlist' not in info_dict:\n        info_dict['playlist'] = None\n        info_dict['playlist_index'] = None\n    thumbnails = info_dict.get('thumbnails')\n    if thumbnails is None:\n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n    if thumbnails:\n        thumbnails.sort(key=lambda t: (t.get('preference') if t.get('preference') is not None else -1, t.get('width') if t.get('width') is not None else -1, t.get('height') if t.get('height') is not None else -1, t.get('id') if t.get('id') is not None else '', t.get('url')))\n        for i, t in enumerate(thumbnails):\n            t['url'] = sanitize_url(t['url'])\n            if t.get('width') and t.get('height'):\n                t['resolution'] = '%dx%d' % (t['width'], t['height'])\n            if t.get('id') is None:\n                t['id'] = '%d' % i\n    if self.params.get('list_thumbnails'):\n        self.list_thumbnails(info_dict)\n        return\n    thumbnail = info_dict.get('thumbnail')\n    if thumbnail:\n        info_dict['thumbnail'] = sanitize_url(thumbnail)\n    elif thumbnails:\n        info_dict['thumbnail'] = thumbnails[-1]['url']\n    if 'display_id' not in info_dict and 'id' in info_dict:\n        info_dict['display_id'] = info_dict['id']\n    if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n        try:\n            upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n            info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n        except (ValueError, OverflowError, OSError):\n            pass\n    for field in ('chapter', 'season', 'episode'):\n        if info_dict.get('%s_number' % field) is not None and (not info_dict.get(field)):\n            info_dict[field] = '%s %d' % (field.capitalize(), info_dict['%s_number' % field])\n    for cc_kind in ('subtitles', 'automatic_captions'):\n        cc = info_dict.get(cc_kind)\n        if cc:\n            for _, subtitle in cc.items():\n                for subtitle_format in subtitle:\n                    if subtitle_format.get('url'):\n                        subtitle_format['url'] = sanitize_url(subtitle_format['url'])\n                    if subtitle_format.get('ext') is None:\n                        subtitle_format['ext'] = determine_ext(subtitle_format['url']).lower()\n    automatic_captions = info_dict.get('automatic_captions')\n    subtitles = info_dict.get('subtitles')\n    if self.params.get('listsubtitles', False):\n        if 'automatic_captions' in info_dict:\n            self.list_subtitles(info_dict['id'], automatic_captions, 'automatic captions')\n        self.list_subtitles(info_dict['id'], subtitles, 'subtitles')\n        return\n    info_dict['requested_subtitles'] = self.process_subtitles(info_dict['id'], subtitles, automatic_captions)\n    if info_dict.get('formats') is None:\n        formats = [info_dict]\n    else:\n        formats = info_dict['formats']\n    if not formats:\n        raise ExtractorError('No video formats found!')\n\n    def is_wellformed(f):\n        url = f.get('url')\n        if not url:\n            self.report_warning('\"url\" field is missing or empty - skipping format, there is an error in extractor')\n            return False\n        if isinstance(url, bytes):\n            sanitize_string_field(f, 'url')\n        return True\n    formats = list(filter(is_wellformed, formats))\n    formats_dict = {}\n    for i, format in enumerate(formats):\n        sanitize_string_field(format, 'format_id')\n        sanitize_numeric_fields(format)\n        format['url'] = sanitize_url(format['url'])\n        if not format.get('format_id'):\n            format['format_id'] = compat_str(i)\n        else:\n            format['format_id'] = re.sub('[\\\\s,/+\\\\[\\\\]()]', '_', format['format_id'])\n        format_id = format['format_id']\n        if format_id not in formats_dict:\n            formats_dict[format_id] = []\n        formats_dict[format_id].append(format)\n    for format_id, ambiguous_formats in formats_dict.items():\n        if len(ambiguous_formats) > 1:\n            for i, format in enumerate(ambiguous_formats):\n                format['format_id'] = '%s-%d' % (format_id, i)\n    for i, format in enumerate(formats):\n        if format.get('format') is None:\n            format['format'] = '{id} - {res}{note}'.format(id=format['format_id'], res=self.format_resolution(format), note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '')\n        if format.get('ext') is None:\n            format['ext'] = determine_ext(format['url']).lower()\n        if format.get('protocol') is None:\n            format['protocol'] = determine_protocol(format)\n        full_format_info = info_dict.copy()\n        full_format_info.update(format)\n        format['http_headers'] = self._calc_headers(full_format_info)\n    if '__x_forwarded_for_ip' in info_dict:\n        del info_dict['__x_forwarded_for_ip']\n    if formats[0] is not info_dict:\n        info_dict['formats'] = formats\n    if self.params.get('listformats'):\n        self.list_formats(info_dict)\n        return\n    req_format = self.params.get('format')\n    if req_format is None:\n        req_format = self._default_format_spec(info_dict, download=download)\n        if self.params.get('verbose'):\n            self.to_stdout('[debug] Default format spec: %s' % req_format)\n    format_selector = self.build_format_selector(req_format)\n    incomplete_formats = all((f.get('vcodec') != 'none' and f.get('acodec') == 'none' for f in formats)) or all((f.get('vcodec') == 'none' and f.get('acodec') != 'none' for f in formats))\n    ctx = {'formats': formats, 'incomplete_formats': incomplete_formats}\n    formats_to_download = list(format_selector(ctx))\n    if not formats_to_download:\n        raise ExtractorError('requested format not available', expected=True)\n    if download:\n        if len(formats_to_download) > 1:\n            self.to_screen('[info] %s: downloading video in %s formats' % (info_dict['id'], len(formats_to_download)))\n        for format in formats_to_download:\n            new_info = dict(info_dict)\n            new_info.update(format)\n            self.process_info(new_info)\n    info_dict.update(formats_to_download[-1])\n    return info_dict",
                            "def process_subtitles(self, video_id, normal_subtitles, automatic_captions):\n    \"\"\"Select the requested subtitles and their format\"\"\"\n    available_subs = {}\n    if normal_subtitles and self.params.get('writesubtitles'):\n        available_subs.update(normal_subtitles)\n    if automatic_captions and self.params.get('writeautomaticsub'):\n        for lang, cap_info in automatic_captions.items():\n            if lang not in available_subs:\n                available_subs[lang] = cap_info\n    if not self.params.get('writesubtitles') and (not self.params.get('writeautomaticsub')) or not available_subs:\n        return None\n    if self.params.get('allsubtitles', False):\n        requested_langs = available_subs.keys()\n    elif self.params.get('subtitleslangs', False):\n        requested_langs = self.params.get('subtitleslangs')\n    elif 'en' in available_subs:\n        requested_langs = ['en']\n    else:\n        requested_langs = [list(available_subs.keys())[0]]\n    formats_query = self.params.get('subtitlesformat', 'best')\n    formats_preference = formats_query.split('/') if formats_query else []\n    subs = {}\n    for lang in requested_langs:\n        formats = available_subs.get(lang)\n        if formats is None:\n            self.report_warning('%s subtitles not available for %s' % (lang, video_id))\n            continue\n        for ext in formats_preference:\n            if ext == 'best':\n                f = formats[-1]\n                break\n            matches = list(filter(lambda f: f['ext'] == ext, formats))\n            if matches:\n                f = matches[-1]\n                break\n        else:\n            f = formats[-1]\n            self.report_warning('No subtitle format found matching \"%s\" for language %s, using %s' % (formats_query, lang, f['ext']))\n        subs[lang] = f\n    return subs",
                            "def process_info(self, info_dict):\n    \"\"\"Process a single resolved IE result.\"\"\"\n    assert info_dict.get('_type', 'video') == 'video'\n    max_downloads = self.params.get('max_downloads')\n    if max_downloads is not None:\n        if self._num_downloads >= int(max_downloads):\n            raise MaxDownloadsReached()\n    info_dict['fulltitle'] = info_dict['title']\n    if len(info_dict['title']) > 200:\n        info_dict['title'] = info_dict['title'][:197] + '...'\n    if 'format' not in info_dict:\n        info_dict['format'] = info_dict['ext']\n    reason = self._match_entry(info_dict, incomplete=False)\n    if reason is not None:\n        self.to_screen('[download] ' + reason)\n        return\n    self._num_downloads += 1\n    info_dict['_filename'] = filename = self.prepare_filename(info_dict)\n    if self.params.get('forcetitle', False):\n        self.to_stdout(info_dict['fulltitle'])\n    if self.params.get('forceid', False):\n        self.to_stdout(info_dict['id'])\n    if self.params.get('forceurl', False):\n        if info_dict.get('requested_formats') is not None:\n            for f in info_dict['requested_formats']:\n                self.to_stdout(f['url'] + f.get('play_path', ''))\n        else:\n            self.to_stdout(info_dict['url'] + info_dict.get('play_path', ''))\n    if self.params.get('forcethumbnail', False) and info_dict.get('thumbnail') is not None:\n        self.to_stdout(info_dict['thumbnail'])\n    if self.params.get('forcedescription', False) and info_dict.get('description') is not None:\n        self.to_stdout(info_dict['description'])\n    if self.params.get('forcefilename', False) and filename is not None:\n        self.to_stdout(filename)\n    if self.params.get('forceduration', False) and info_dict.get('duration') is not None:\n        self.to_stdout(formatSeconds(info_dict['duration']))\n    if self.params.get('forceformat', False):\n        self.to_stdout(info_dict['format'])\n    if self.params.get('forcejson', False):\n        self.to_stdout(json.dumps(info_dict))\n    if self.params.get('simulate', False):\n        return\n    if filename is None:\n        return\n\n    def ensure_dir_exists(path):\n        try:\n            dn = os.path.dirname(path)\n            if dn and (not os.path.exists(dn)):\n                os.makedirs(dn)\n            return True\n        except (OSError, IOError) as err:\n            self.report_error('unable to create directory ' + error_to_compat_str(err))\n            return False\n    if not ensure_dir_exists(sanitize_path(encodeFilename(filename))):\n        return\n    if self.params.get('writedescription', False):\n        descfn = replace_extension(filename, 'description', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(descfn)):\n            self.to_screen('[info] Video description is already present')\n        elif info_dict.get('description') is None:\n            self.report_warning(\"There's no description to write.\")\n        else:\n            try:\n                self.to_screen('[info] Writing video description to: ' + descfn)\n                with io.open(encodeFilename(descfn), 'w', encoding='utf-8') as descfile:\n                    descfile.write(info_dict['description'])\n            except (OSError, IOError):\n                self.report_error('Cannot write description file ' + descfn)\n                return\n    if self.params.get('writeannotations', False):\n        annofn = replace_extension(filename, 'annotations.xml', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(annofn)):\n            self.to_screen('[info] Video annotations are already present')\n        else:\n            try:\n                self.to_screen('[info] Writing video annotations to: ' + annofn)\n                with io.open(encodeFilename(annofn), 'w', encoding='utf-8') as annofile:\n                    annofile.write(info_dict['annotations'])\n            except (KeyError, TypeError):\n                self.report_warning('There are no annotations to write.')\n            except (OSError, IOError):\n                self.report_error('Cannot write annotations file: ' + annofn)\n                return\n    subtitles_are_requested = any([self.params.get('writesubtitles', False), self.params.get('writeautomaticsub')])\n    if subtitles_are_requested and info_dict.get('requested_subtitles'):\n        subtitles = info_dict['requested_subtitles']\n        ie = self.get_info_extractor(info_dict['extractor_key'])\n        for sub_lang, sub_info in subtitles.items():\n            sub_format = sub_info['ext']\n            sub_filename = subtitles_filename(filename, sub_lang, sub_format)\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(sub_filename)):\n                self.to_screen('[info] Video subtitle %s.%s is already present' % (sub_lang, sub_format))\n            else:\n                self.to_screen('[info] Writing video subtitles to: ' + sub_filename)\n                if sub_info.get('data') is not None:\n                    try:\n                        with io.open(encodeFilename(sub_filename), 'w', encoding='utf-8', newline='') as subfile:\n                            subfile.write(sub_info['data'])\n                    except (OSError, IOError):\n                        self.report_error('Cannot write subtitles file ' + sub_filename)\n                        return\n                else:\n                    try:\n                        sub_data = ie._request_webpage(sub_info['url'], info_dict['id'], note=False).read()\n                        with io.open(encodeFilename(sub_filename), 'wb') as subfile:\n                            subfile.write(sub_data)\n                    except (ExtractorError, IOError, OSError, ValueError) as err:\n                        self.report_warning('Unable to download subtitle for \"%s\": %s' % (sub_lang, error_to_compat_str(err)))\n                        continue\n    if self.params.get('writeinfojson', False):\n        infofn = replace_extension(filename, 'info.json', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(infofn)):\n            self.to_screen('[info] Video description metadata is already present')\n        else:\n            self.to_screen('[info] Writing video description metadata as JSON to: ' + infofn)\n            try:\n                write_json_file(self.filter_requested_info(info_dict), infofn)\n            except (OSError, IOError):\n                self.report_error('Cannot write metadata to JSON file ' + infofn)\n                return\n    self._write_thumbnails(info_dict, filename)\n    if not self.params.get('skip_download', False):\n        try:\n\n            def dl(name, info):\n                fd = get_suitable_downloader(info, self.params)(self, self.params)\n                for ph in self._progress_hooks:\n                    fd.add_progress_hook(ph)\n                if self.params.get('verbose'):\n                    self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n                return fd.download(name, info)\n            if info_dict.get('requested_formats') is not None:\n                downloaded = []\n                success = True\n                merger = FFmpegMergerPP(self)\n                if not merger.available:\n                    postprocessors = []\n                    self.report_warning(\"You have requested multiple formats but ffmpeg or avconv are not installed. The formats won't be merged.\")\n                else:\n                    postprocessors = [merger]\n\n                def compatible_formats(formats):\n                    video, audio = formats\n                    video_ext, audio_ext = (video.get('ext'), audio.get('ext'))\n                    if video_ext and audio_ext:\n                        COMPATIBLE_EXTS = (('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'ismv', 'isma'), 'webm')\n                        for exts in COMPATIBLE_EXTS:\n                            if video_ext in exts and audio_ext in exts:\n                                return True\n                    return False\n                filename_real_ext = os.path.splitext(filename)[1][1:]\n                filename_wo_ext = os.path.splitext(filename)[0] if filename_real_ext == info_dict['ext'] else filename\n                requested_formats = info_dict['requested_formats']\n                if self.params.get('merge_output_format') is None and (not compatible_formats(requested_formats)):\n                    info_dict['ext'] = 'mkv'\n                    self.report_warning('Requested formats are incompatible for merge and will be merged into mkv.')\n                filename = '%s.%s' % (filename_wo_ext, info_dict['ext'])\n                if os.path.exists(encodeFilename(filename)):\n                    self.to_screen('[download] %s has already been downloaded and merged' % filename)\n                else:\n                    for f in requested_formats:\n                        new_info = dict(info_dict)\n                        new_info.update(f)\n                        fname = prepend_extension(self.prepare_filename(new_info), 'f%s' % f['format_id'], new_info['ext'])\n                        if not ensure_dir_exists(fname):\n                            return\n                        downloaded.append(fname)\n                        partial_success = dl(fname, new_info)\n                        success = success and partial_success\n                    info_dict['__postprocessors'] = postprocessors\n                    info_dict['__files_to_merge'] = downloaded\n            else:\n                success = dl(filename, info_dict)\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            self.report_error('unable to download video data: %s' % error_to_compat_str(err))\n            return\n        except (OSError, IOError) as err:\n            raise UnavailableVideoError(err)\n        except (ContentTooShortError,) as err:\n            self.report_error('content too short (expected %s bytes and served %s)' % (err.expected, err.downloaded))\n            return\n        if success and filename != '-':\n            fixup_policy = self.params.get('fixup')\n            if fixup_policy is None:\n                fixup_policy = 'detect_or_warn'\n            INSTALL_FFMPEG_MESSAGE = 'Install ffmpeg or avconv to fix this automatically.'\n            stretched_ratio = info_dict.get('stretched_ratio')\n            if stretched_ratio is not None and stretched_ratio != 1:\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: Non-uniform pixel ratio (%s)' % (info_dict['id'], stretched_ratio))\n                elif fixup_policy == 'detect_or_warn':\n                    stretched_pp = FFmpegFixupStretchedPP(self)\n                    if stretched_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(stretched_pp)\n                    else:\n                        self.report_warning('%s: Non-uniform pixel ratio (%s). %s' % (info_dict['id'], stretched_ratio, INSTALL_FFMPEG_MESSAGE))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n            if info_dict.get('requested_formats') is None and info_dict.get('container') == 'm4a_dash':\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: writing DASH m4a. Only some players support this container.' % info_dict['id'])\n                elif fixup_policy == 'detect_or_warn':\n                    fixup_pp = FFmpegFixupM4aPP(self)\n                    if fixup_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(fixup_pp)\n                    else:\n                        self.report_warning('%s: writing DASH m4a. Only some players support this container. %s' % (info_dict['id'], INSTALL_FFMPEG_MESSAGE))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n            if info_dict.get('protocol') == 'm3u8_native' or (info_dict.get('protocol') == 'm3u8' and self.params.get('hls_prefer_native')):\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: malformed AAC bitstream detected.' % info_dict['id'])\n                elif fixup_policy == 'detect_or_warn':\n                    fixup_pp = FFmpegFixupM3u8PP(self)\n                    if fixup_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(fixup_pp)\n                    else:\n                        self.report_warning('%s: malformed AAC bitstream detected. %s' % (info_dict['id'], INSTALL_FFMPEG_MESSAGE))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n            try:\n                self.post_process(filename, info_dict)\n            except PostProcessingError as err:\n                self.report_error('postprocessing: %s' % str(err))\n                return\n            self.record_download_archive(info_dict)",
                            "def download(self, url_list):\n    \"\"\"Download a given list of URLs.\"\"\"\n    outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n    if len(url_list) > 1 and outtmpl != '-' and ('%' not in outtmpl) and (self.params.get('max_downloads') != 1):\n        raise SameFileError(outtmpl)\n    for url in url_list:\n        try:\n            res = self.extract_info(url, force_generic_extractor=self.params.get('force_generic_extractor', False))\n        except UnavailableVideoError:\n            self.report_error('unable to download video')\n        except MaxDownloadsReached:\n            self.to_screen('[info] Maximum number of downloaded files reached.')\n            raise\n        else:\n            if self.params.get('dump_single_json', False):\n                self.to_stdout(json.dumps(res))\n    return self._download_retcode",
                            "def download_with_info_file(self, info_filename):\n    with contextlib.closing(fileinput.FileInput([info_filename], mode='r', openhook=fileinput.hook_encoded('utf-8'))) as f:\n        info = self.filter_requested_info(json.loads('\\n'.join(f)))\n    try:\n        self.process_ie_result(info, download=True)\n    except DownloadError:\n        webpage_url = info.get('webpage_url')\n        if webpage_url is not None:\n            self.report_warning('The info failed to download, trying with \"%s\"' % webpage_url)\n            return self.download([webpage_url])\n        else:\n            raise\n    return self._download_retcode",
                            "@staticmethod\ndef filter_requested_info(info_dict):\n    return dict(((k, v) for k, v in info_dict.items() if k not in ['requested_formats', 'requested_subtitles']))",
                            "def post_process(self, filename, ie_info):\n    \"\"\"Run all the postprocessors on the given file.\"\"\"\n    info = dict(ie_info)\n    info['filepath'] = filename\n    pps_chain = []\n    if ie_info.get('__postprocessors') is not None:\n        pps_chain.extend(ie_info['__postprocessors'])\n    pps_chain.extend(self._pps)\n    for pp in pps_chain:\n        files_to_delete = []\n        try:\n            files_to_delete, info = pp.run(info)\n        except PostProcessingError as e:\n            self.report_error(e.msg)\n        if files_to_delete and (not self.params.get('keepvideo', False)):\n            for old_filename in files_to_delete:\n                self.to_screen('Deleting original file %s (pass -k to keep)' % old_filename)\n                try:\n                    os.remove(encodeFilename(old_filename))\n                except (IOError, OSError):\n                    self.report_warning('Unable to remove downloaded original file')",
                            "def _make_archive_id(self, info_dict):\n    extractor = info_dict.get('extractor_key')\n    if extractor is None:\n        if 'id' in info_dict:\n            extractor = info_dict.get('ie_key')\n    if extractor is None:\n        return None\n    return extractor.lower() + ' ' + info_dict['id']",
                            "def in_download_archive(self, info_dict):\n    fn = self.params.get('download_archive')\n    if fn is None:\n        return False\n    vid_id = self._make_archive_id(info_dict)\n    if vid_id is None:\n        return False\n    try:\n        with locked_file(fn, 'r', encoding='utf-8') as archive_file:\n            for line in archive_file:\n                if line.strip() == vid_id:\n                    return True\n    except IOError as ioe:\n        if ioe.errno != errno.ENOENT:\n            raise\n    return False",
                            "def record_download_archive(self, info_dict):\n    fn = self.params.get('download_archive')\n    if fn is None:\n        return\n    vid_id = self._make_archive_id(info_dict)\n    assert vid_id\n    with locked_file(fn, 'a', encoding='utf-8') as archive_file:\n        archive_file.write(vid_id + '\\n')",
                            "@staticmethod\ndef format_resolution(format, default='unknown'):\n    if format.get('vcodec') == 'none':\n        return 'audio only'\n    if format.get('resolution') is not None:\n        return format['resolution']\n    if format.get('height') is not None:\n        if format.get('width') is not None:\n            res = '%sx%s' % (format['width'], format['height'])\n        else:\n            res = '%sp' % format['height']\n    elif format.get('width') is not None:\n        res = '%dx?' % format['width']\n    else:\n        res = default\n    return res",
                            "def _format_note(self, fdict):\n    res = ''\n    if fdict.get('ext') in ['f4f', 'f4m']:\n        res += '(unsupported) '\n    if fdict.get('language'):\n        if res:\n            res += ' '\n        res += '[%s] ' % fdict['language']\n    if fdict.get('format_note') is not None:\n        res += fdict['format_note'] + ' '\n    if fdict.get('tbr') is not None:\n        res += '%4dk ' % fdict['tbr']\n    if fdict.get('container') is not None:\n        if res:\n            res += ', '\n        res += '%s container' % fdict['container']\n    if fdict.get('vcodec') is not None and fdict.get('vcodec') != 'none':\n        if res:\n            res += ', '\n        res += fdict['vcodec']\n        if fdict.get('vbr') is not None:\n            res += '@'\n    elif fdict.get('vbr') is not None and fdict.get('abr') is not None:\n        res += 'video@'\n    if fdict.get('vbr') is not None:\n        res += '%4dk' % fdict['vbr']\n    if fdict.get('fps') is not None:\n        if res:\n            res += ', '\n        res += '%sfps' % fdict['fps']\n    if fdict.get('acodec') is not None:\n        if res:\n            res += ', '\n        if fdict['acodec'] == 'none':\n            res += 'video only'\n        else:\n            res += '%-5s' % fdict['acodec']\n    elif fdict.get('abr') is not None:\n        if res:\n            res += ', '\n        res += 'audio'\n    if fdict.get('abr') is not None:\n        res += '@%3dk' % fdict['abr']\n    if fdict.get('asr') is not None:\n        res += ' (%5dHz)' % fdict['asr']\n    if fdict.get('filesize') is not None:\n        if res:\n            res += ', '\n        res += format_bytes(fdict['filesize'])\n    elif fdict.get('filesize_approx') is not None:\n        if res:\n            res += ', '\n        res += '~' + format_bytes(fdict['filesize_approx'])\n    return res",
                            "def list_formats(self, info_dict):\n    formats = info_dict.get('formats', [info_dict])\n    table = [[f['format_id'], f['ext'], self.format_resolution(f), self._format_note(f)] for f in formats if f.get('preference') is None or f['preference'] >= -1000]\n    if len(formats) > 1:\n        table[-1][-1] += (' ' if table[-1][-1] else '') + '(best)'\n    header_line = ['format code', 'extension', 'resolution', 'note']\n    self.to_screen('[info] Available formats for %s:\\n%s' % (info_dict['id'], render_table(header_line, table)))",
                            "def list_thumbnails(self, info_dict):\n    thumbnails = info_dict.get('thumbnails')\n    if not thumbnails:\n        self.to_screen('[info] No thumbnails present for %s' % info_dict['id'])\n        return\n    self.to_screen('[info] Thumbnails for %s:' % info_dict['id'])\n    self.to_screen(render_table(['ID', 'width', 'height', 'URL'], [[t['id'], t.get('width', 'unknown'), t.get('height', 'unknown'), t['url']] for t in thumbnails]))",
                            "def list_subtitles(self, video_id, subtitles, name='subtitles'):\n    if not subtitles:\n        self.to_screen('%s has no %s' % (video_id, name))\n        return\n    self.to_screen('Available %s for %s:' % (name, video_id))\n    self.to_screen(render_table(['Language', 'formats'], [[lang, ', '.join((f['ext'] for f in reversed(formats)))] for lang, formats in subtitles.items()]))",
                            "def urlopen(self, req):\n    \"\"\" Start an HTTP download \"\"\"\n    if isinstance(req, compat_basestring):\n        req = sanitized_Request(req)\n    return self._opener.open(req, timeout=self._socket_timeout)",
                            "def print_debug_header(self):\n    if not self.params.get('verbose'):\n        return\n    if type('') is not compat_str:\n        self.report_warning('Your Python is broken! Update to a newer and supported version')\n    stdout_encoding = getattr(sys.stdout, 'encoding', 'missing (%s)' % type(sys.stdout).__name__)\n    encoding_str = '[debug] Encodings: locale %s, fs %s, out %s, pref %s\\n' % (locale.getpreferredencoding(), sys.getfilesystemencoding(), stdout_encoding, self.get_encoding())\n    write_string(encoding_str, encoding=None)\n    self._write_string('[debug] youtube-dl version ' + __version__ + '\\n')\n    if _LAZY_LOADER:\n        self._write_string('[debug] Lazy loading extractors enabled' + '\\n')\n    try:\n        sp = subprocess.Popen(['git', 'rev-parse', '--short', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=os.path.dirname(os.path.abspath(__file__)))\n        out, err = sp.communicate()\n        out = out.decode().strip()\n        if re.match('[0-9a-f]+', out):\n            self._write_string('[debug] Git HEAD: ' + out + '\\n')\n    except Exception:\n        try:\n            sys.exc_clear()\n        except Exception:\n            pass\n\n    def python_implementation():\n        impl_name = platform.python_implementation()\n        if impl_name == 'PyPy' and hasattr(sys, 'pypy_version_info'):\n            return impl_name + ' version %d.%d.%d' % sys.pypy_version_info[:3]\n        return impl_name\n    self._write_string('[debug] Python version %s (%s) - %s\\n' % (platform.python_version(), python_implementation(), platform_name()))\n    exe_versions = FFmpegPostProcessor.get_versions(self)\n    exe_versions['rtmpdump'] = rtmpdump_version()\n    exe_versions['phantomjs'] = PhantomJSwrapper._version()\n    exe_str = ', '.join(('%s %s' % (exe, v) for exe, v in sorted(exe_versions.items()) if v))\n    if not exe_str:\n        exe_str = 'none'\n    self._write_string('[debug] exe versions: %s\\n' % exe_str)\n    proxy_map = {}\n    for handler in self._opener.handlers:\n        if hasattr(handler, 'proxies'):\n            proxy_map.update(handler.proxies)\n    self._write_string('[debug] Proxy map: ' + compat_str(proxy_map) + '\\n')\n    if self.params.get('call_home', False):\n        ipaddr = self.urlopen('https://yt-dl.org/ip').read().decode('utf-8')\n        self._write_string('[debug] Public IP address: %s\\n' % ipaddr)\n        latest_version = self.urlopen('https://yt-dl.org/latest/version').read().decode('utf-8')\n        if version_tuple(latest_version) > version_tuple(__version__):\n            self.report_warning('You are using an outdated version (newest version: %s)! See https://yt-dl.org/update if you need help updating.' % latest_version)",
                            "def _setup_opener(self):\n    timeout_val = self.params.get('socket_timeout')\n    self._socket_timeout = 600 if timeout_val is None else float(timeout_val)\n    opts_cookiefile = self.params.get('cookiefile')\n    opts_proxy = self.params.get('proxy')\n    if opts_cookiefile is None:\n        self.cookiejar = compat_cookiejar.CookieJar()\n    else:\n        opts_cookiefile = expand_path(opts_cookiefile)\n        self.cookiejar = YoutubeDLCookieJar(opts_cookiefile)\n        if os.access(opts_cookiefile, os.R_OK):\n            self.cookiejar.load(ignore_discard=True, ignore_expires=True)\n    cookie_processor = YoutubeDLCookieProcessor(self.cookiejar)\n    if opts_proxy is not None:\n        if opts_proxy == '':\n            proxies = {}\n        else:\n            proxies = {'http': opts_proxy, 'https': opts_proxy}\n    else:\n        proxies = compat_urllib_request.getproxies()\n        if 'http' in proxies and 'https' not in proxies:\n            proxies['https'] = proxies['http']\n    proxy_handler = PerRequestProxyHandler(proxies)\n    debuglevel = 1 if self.params.get('debug_printtraffic') else 0\n    https_handler = make_HTTPS_handler(self.params, debuglevel=debuglevel)\n    ydlh = YoutubeDLHandler(self.params, debuglevel=debuglevel)\n    data_handler = compat_urllib_request_DataHandler()\n    file_handler = compat_urllib_request.FileHandler()\n\n    def file_open(*args, **kwargs):\n        raise compat_urllib_error.URLError('file:// scheme is explicitly disabled in youtube-dl for security reasons')\n    file_handler.file_open = file_open\n    opener = compat_urllib_request.build_opener(proxy_handler, https_handler, cookie_processor, ydlh, data_handler, file_handler)\n    opener.addheaders = []\n    self._opener = opener",
                            "def encode(self, s):\n    if isinstance(s, bytes):\n        return s\n    try:\n        return s.encode(self.get_encoding())\n    except UnicodeEncodeError as err:\n        err.reason = err.reason + '. Check your system encoding configuration or use the --encoding option.'\n        raise",
                            "def get_encoding(self):\n    encoding = self.params.get('encoding')\n    if encoding is None:\n        encoding = preferredencoding()\n    return encoding",
                            "def _write_thumbnails(self, info_dict, filename):\n    if self.params.get('writethumbnail', False):\n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails:\n            thumbnails = [thumbnails[-1]]\n    elif self.params.get('write_all_thumbnails', False):\n        thumbnails = info_dict.get('thumbnails')\n    else:\n        return\n    if not thumbnails:\n        return\n    for t in thumbnails:\n        thumb_ext = determine_ext(t['url'], 'jpg')\n        suffix = '_%s' % t['id'] if len(thumbnails) > 1 else ''\n        thumb_display_id = '%s ' % t['id'] if len(thumbnails) > 1 else ''\n        t['filename'] = thumb_filename = os.path.splitext(filename)[0] + suffix + '.' + thumb_ext\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(thumb_filename)):\n            self.to_screen('[%s] %s: Thumbnail %sis already present' % (info_dict['extractor'], info_dict['id'], thumb_display_id))\n        else:\n            self.to_screen('[%s] %s: Downloading thumbnail %s...' % (info_dict['extractor'], info_dict['id'], thumb_display_id))\n            try:\n                uf = self.urlopen(t['url'])\n                with open(encodeFilename(thumb_filename), 'wb') as thumbf:\n                    shutil.copyfileobj(uf, thumbf)\n                self.to_screen('[%s] %s: Writing thumbnail %sto: %s' % (info_dict['extractor'], info_dict['id'], thumb_display_id, thumb_filename))\n            except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                self.report_warning('Unable to download thumbnail \"%s\": %s' % (t['url'], error_to_compat_str(err)))",
                            "def check_deprecated(param, option, suggestion):\n    if self.params.get(param) is not None:\n        self.report_warning('%s is deprecated. Use %s instead.' % (option, suggestion))\n        return True\n    return False",
                            "def _filter(f):\n    actual_value = f.get(m.group('key'))\n    if actual_value is None:\n        return m.group('none_inclusive')\n    return op(actual_value, comparison_value)",
                            "def can_merge():\n    merger = FFmpegMergerPP(self)\n    return merger.available and merger.can_merge()",
                            "def prefer_best():\n    if self.params.get('simulate', False):\n        return False\n    if not download:\n        return False\n    if self.params.get('outtmpl', DEFAULT_OUTTMPL) == '-':\n        return True\n    if info_dict.get('is_live'):\n        return True\n    if not can_merge():\n        return True\n    return False",
                            "def syntax_error(note, start):\n    message = 'Invalid format specification: {0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1])\n    return SyntaxError(message)",
                            "def _parse_filter(tokens):\n    filter_parts = []\n    for type, string, start, _, _ in tokens:\n        if type == tokenize.OP and string == ']':\n            return ''.join(filter_parts)\n        else:\n            filter_parts.append(string)",
                            "def _remove_unused_ops(tokens):\n    ALLOWED_OPS = ('/', '+', ',', '(', ')')\n    last_string, last_start, last_end, last_line = (None, None, None, None)\n    for type, string, start, end, line in tokens:\n        if type == tokenize.OP and string == '[':\n            if last_string:\n                yield (tokenize.NAME, last_string, last_start, last_end, last_line)\n                last_string = None\n            yield (type, string, start, end, line)\n            for type, string, start, end, line in tokens:\n                yield (type, string, start, end, line)\n                if type == tokenize.OP and string == ']':\n                    break\n        elif type == tokenize.OP and string in ALLOWED_OPS:\n            if last_string:\n                yield (tokenize.NAME, last_string, last_start, last_end, last_line)\n                last_string = None\n            yield (type, string, start, end, line)\n        elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n            if not last_string:\n                last_string = string\n                last_start = start\n                last_end = end\n            else:\n                last_string += string\n    if last_string:\n        yield (tokenize.NAME, last_string, last_start, last_end, last_line)",
                            "def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n    selectors = []\n    current_selector = None\n    for type, string, start, _, _ in tokens:\n        if type == getattr(tokenize, 'ENCODING', None):\n            continue\n        elif type in [tokenize.NAME, tokenize.NUMBER]:\n            current_selector = FormatSelector(SINGLE, string, [])\n        elif type == tokenize.OP:\n            if string == ')':\n                if not inside_group:\n                    tokens.restore_last_token()\n                break\n            elif inside_merge and string in ['/', ',']:\n                tokens.restore_last_token()\n                break\n            elif inside_choice and string == ',':\n                tokens.restore_last_token()\n                break\n            elif string == ',':\n                if not current_selector:\n                    raise syntax_error('\",\" must follow a format selector', start)\n                selectors.append(current_selector)\n                current_selector = None\n            elif string == '/':\n                if not current_selector:\n                    raise syntax_error('\"/\" must follow a format selector', start)\n                first_choice = current_selector\n                second_choice = _parse_format_selection(tokens, inside_choice=True)\n                current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n            elif string == '[':\n                if not current_selector:\n                    current_selector = FormatSelector(SINGLE, 'best', [])\n                format_filter = _parse_filter(tokens)\n                current_selector.filters.append(format_filter)\n            elif string == '(':\n                if current_selector:\n                    raise syntax_error('Unexpected \"(\"', start)\n                group = _parse_format_selection(tokens, inside_group=True)\n                current_selector = FormatSelector(GROUP, group, [])\n            elif string == '+':\n                video_selector = current_selector\n                audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                if not video_selector or not audio_selector:\n                    raise syntax_error('\"+\" must be between two format selectors', start)\n                current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n            else:\n                raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n        elif type == tokenize.ENDMARKER:\n            break\n    if current_selector:\n        selectors.append(current_selector)\n    return selectors",
                            "def _build_selector_function(selector):\n    if isinstance(selector, list):\n        fs = [_build_selector_function(s) for s in selector]\n\n        def selector_function(ctx):\n            for f in fs:\n                for format in f(ctx):\n                    yield format\n        return selector_function\n    elif selector.type == GROUP:\n        selector_function = _build_selector_function(selector.selector)\n    elif selector.type == PICKFIRST:\n        fs = [_build_selector_function(s) for s in selector.selector]\n\n        def selector_function(ctx):\n            for f in fs:\n                picked_formats = list(f(ctx))\n                if picked_formats:\n                    return picked_formats\n            return []\n    elif selector.type == SINGLE:\n        format_spec = selector.selector\n\n        def selector_function(ctx):\n            formats = list(ctx['formats'])\n            if not formats:\n                return\n            if format_spec == 'all':\n                for f in formats:\n                    yield f\n            elif format_spec in ['best', 'worst', None]:\n                format_idx = 0 if format_spec == 'worst' else -1\n                audiovideo_formats = [f for f in formats if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                if audiovideo_formats:\n                    yield audiovideo_formats[format_idx]\n                elif ctx['incomplete_formats']:\n                    yield formats[format_idx]\n            elif format_spec == 'bestaudio':\n                audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n                if audio_formats:\n                    yield audio_formats[-1]\n            elif format_spec == 'worstaudio':\n                audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n                if audio_formats:\n                    yield audio_formats[0]\n            elif format_spec == 'bestvideo':\n                video_formats = [f for f in formats if f.get('acodec') == 'none']\n                if video_formats:\n                    yield video_formats[-1]\n            elif format_spec == 'worstvideo':\n                video_formats = [f for f in formats if f.get('acodec') == 'none']\n                if video_formats:\n                    yield video_formats[0]\n            else:\n                extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                if format_spec in extensions:\n                    filter_f = lambda f: f['ext'] == format_spec\n                else:\n                    filter_f = lambda f: f['format_id'] == format_spec\n                matches = list(filter(filter_f, formats))\n                if matches:\n                    yield matches[-1]\n    elif selector.type == MERGE:\n\n        def _merge(formats_info):\n            format_1, format_2 = [f['format_id'] for f in formats_info]\n            if formats_info[0].get('vcodec') == 'none':\n                self.report_error('The first format must contain the video, try using \"-f %s+%s\"' % (format_2, format_1))\n                return\n            if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                self.report_error('Both formats %s and %s are video-only, you must specify \"-f video+audio\"' % (format_1, format_2))\n                return\n            output_ext = formats_info[0]['ext'] if self.params.get('merge_output_format') is None else self.params['merge_output_format']\n            return {'requested_formats': formats_info, 'format': '%s+%s' % (formats_info[0].get('format'), formats_info[1].get('format')), 'format_id': '%s+%s' % (formats_info[0].get('format_id'), formats_info[1].get('format_id')), 'width': formats_info[0].get('width'), 'height': formats_info[0].get('height'), 'resolution': formats_info[0].get('resolution'), 'fps': formats_info[0].get('fps'), 'vcodec': formats_info[0].get('vcodec'), 'vbr': formats_info[0].get('vbr'), 'stretched_ratio': formats_info[0].get('stretched_ratio'), 'acodec': formats_info[1].get('acodec'), 'abr': formats_info[1].get('abr'), 'ext': output_ext}\n        video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n        def selector_function(ctx):\n            for pair in itertools.product(video_selector(copy.deepcopy(ctx)), audio_selector(copy.deepcopy(ctx))):\n                yield _merge(pair)\n    filters = [self._build_format_filter(f) for f in selector.filters]\n\n    def final_selector(ctx):\n        ctx_copy = copy.deepcopy(ctx)\n        for _filter in filters:\n            ctx_copy['formats'] = list(filter(_filter, ctx_copy['formats']))\n        return selector_function(ctx_copy)\n    return final_selector",
                            "def report_force_conversion(field, field_not, conversion):\n    self.report_warning('\"%s\" field is not %s - forcing %s conversion, there is an error in extractor' % (field, field_not, conversion))",
                            "def sanitize_string_field(info, string_field):\n    field = info.get(string_field)\n    if field is None or isinstance(field, compat_str):\n        return\n    report_force_conversion(string_field, 'a string', 'string')\n    info[string_field] = compat_str(field)",
                            "def sanitize_numeric_fields(info):\n    for numeric_field in self._NUMERIC_FIELDS:\n        field = info.get(numeric_field)\n        if field is None or isinstance(field, compat_numeric_types):\n            continue\n        report_force_conversion(numeric_field, 'numeric', 'int')\n        info[numeric_field] = int_or_none(field)",
                            "def is_wellformed(f):\n    url = f.get('url')\n    if not url:\n        self.report_warning('\"url\" field is missing or empty - skipping format, there is an error in extractor')\n        return False\n    if isinstance(url, bytes):\n        sanitize_string_field(f, 'url')\n    return True",
                            "def ensure_dir_exists(path):\n    try:\n        dn = os.path.dirname(path)\n        if dn and (not os.path.exists(dn)):\n            os.makedirs(dn)\n        return True\n    except (OSError, IOError) as err:\n        self.report_error('unable to create directory ' + error_to_compat_str(err))\n        return False",
                            "def python_implementation():\n    impl_name = platform.python_implementation()\n    if impl_name == 'PyPy' and hasattr(sys, 'pypy_version_info'):\n        return impl_name + ' version %d.%d.%d' % sys.pypy_version_info[:3]\n    return impl_name",
                            "def file_open(*args, **kwargs):\n    raise compat_urllib_error.URLError('file:// scheme is explicitly disabled in youtube-dl for security reasons')",
                            "def final_selector(ctx):\n    ctx_copy = copy.deepcopy(ctx)\n    for _filter in filters:\n        ctx_copy['formats'] = list(filter(_filter, ctx_copy['formats']))\n    return selector_function(ctx_copy)",
                            "def __init__(self, tokens):\n    self.tokens = tokens\n    self.counter = 0",
                            "def __iter__(self):\n    return self",
                            "def __next__(self):\n    if self.counter >= len(self.tokens):\n        raise StopIteration()\n    value = self.tokens[self.counter]\n    self.counter += 1\n    return value",
                            "def restore_last_token(self):\n    self.counter -= 1",
                            "def selector_function(ctx):\n    for f in fs:\n        for format in f(ctx):\n            yield format",
                            "def dl(name, info):\n    fd = get_suitable_downloader(info, self.params)(self, self.params)\n    for ph in self._progress_hooks:\n        fd.add_progress_hook(ph)\n    if self.params.get('verbose'):\n        self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n    return fd.download(name, info)",
                            "def compatible_formats(formats):\n    video, audio = formats\n    video_ext, audio_ext = (video.get('ext'), audio.get('ext'))\n    if video_ext and audio_ext:\n        COMPATIBLE_EXTS = (('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'ismv', 'isma'), 'webm')\n        for exts in COMPATIBLE_EXTS:\n            if video_ext in exts and audio_ext in exts:\n                return True\n    return False",
                            "def make_playlistitems_entries(list_ie_entries):\n    num_entries = len(list_ie_entries)\n    return [list_ie_entries[i - 1] for i in playlistitems if -num_entries <= i - 1 < num_entries]",
                            "def report_download(num_entries):\n    self.to_screen('[%s] playlist %s: Downloading %d videos' % (ie_result['extractor'], playlist, num_entries))",
                            "def selector_function(ctx):\n    for f in fs:\n        picked_formats = list(f(ctx))\n        if picked_formats:\n            return picked_formats\n    return []",
                            "def iter_playlistitems(format):\n    for string_segment in format.split(','):\n        if '-' in string_segment:\n            start, end = string_segment.split('-')\n            for item in range(int(start), int(end) + 1):\n                yield int(item)\n        else:\n            yield int(string_segment)",
                            "def _fixup(r):\n    self.add_extra_info(r, {'extractor': ie_result['extractor'], 'webpage_url': ie_result['webpage_url'], 'webpage_url_basename': url_basename(ie_result['webpage_url']), 'extractor_key': ie_result['extractor_key']})\n    return r",
                            "def selector_function(ctx):\n    formats = list(ctx['formats'])\n    if not formats:\n        return\n    if format_spec == 'all':\n        for f in formats:\n            yield f\n    elif format_spec in ['best', 'worst', None]:\n        format_idx = 0 if format_spec == 'worst' else -1\n        audiovideo_formats = [f for f in formats if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n        if audiovideo_formats:\n            yield audiovideo_formats[format_idx]\n        elif ctx['incomplete_formats']:\n            yield formats[format_idx]\n    elif format_spec == 'bestaudio':\n        audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n        if audio_formats:\n            yield audio_formats[-1]\n    elif format_spec == 'worstaudio':\n        audio_formats = [f for f in formats if f.get('vcodec') == 'none']\n        if audio_formats:\n            yield audio_formats[0]\n    elif format_spec == 'bestvideo':\n        video_formats = [f for f in formats if f.get('acodec') == 'none']\n        if video_formats:\n            yield video_formats[-1]\n    elif format_spec == 'worstvideo':\n        video_formats = [f for f in formats if f.get('acodec') == 'none']\n        if video_formats:\n            yield video_formats[0]\n    else:\n        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n        if format_spec in extensions:\n            filter_f = lambda f: f['ext'] == format_spec\n        else:\n            filter_f = lambda f: f['format_id'] == format_spec\n        matches = list(filter(filter_f, formats))\n        if matches:\n            yield matches[-1]",
                            "def _merge(formats_info):\n    format_1, format_2 = [f['format_id'] for f in formats_info]\n    if formats_info[0].get('vcodec') == 'none':\n        self.report_error('The first format must contain the video, try using \"-f %s+%s\"' % (format_2, format_1))\n        return\n    if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n        self.report_error('Both formats %s and %s are video-only, you must specify \"-f video+audio\"' % (format_1, format_2))\n        return\n    output_ext = formats_info[0]['ext'] if self.params.get('merge_output_format') is None else self.params['merge_output_format']\n    return {'requested_formats': formats_info, 'format': '%s+%s' % (formats_info[0].get('format'), formats_info[1].get('format')), 'format_id': '%s+%s' % (formats_info[0].get('format_id'), formats_info[1].get('format_id')), 'width': formats_info[0].get('width'), 'height': formats_info[0].get('height'), 'resolution': formats_info[0].get('resolution'), 'fps': formats_info[0].get('fps'), 'vcodec': formats_info[0].get('vcodec'), 'vbr': formats_info[0].get('vbr'), 'stretched_ratio': formats_info[0].get('stretched_ratio'), 'acodec': formats_info[1].get('acodec'), 'abr': formats_info[1].get('abr'), 'ext': output_ext}",
                            "def selector_function(ctx):\n    for pair in itertools.product(video_selector(copy.deepcopy(ctx)), audio_selector(copy.deepcopy(ctx))):\n        yield _merge(pair)"
                        ],
                        "constructor_variables": [
                            "_progress_hooks",
                            "width",
                            "_pps",
                            "pp_def",
                            "pp",
                            "pp_class",
                            "_download_retcode",
                            "params",
                            "_output_channel",
                            "_ies_instances",
                            "_output_process",
                            "_screen_file",
                            "_num_downloads",
                            "_err_file",
                            "cache",
                            "_ies",
                            "width_args",
                            "sp_kwargs"
                        ],
                        "class_level_variables": [
                            "_NUMERIC_FIELDS",
                            "params",
                            "_ies",
                            "_pps",
                            "_download_retcode",
                            "_num_downloads",
                            "_screen_file"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, params=None, auto_init=True)",
                            "warn_if_short_id(self, argv)",
                            "add_info_extractor(self, ie)",
                            "get_info_extractor(self, ie_key)",
                            "add_default_info_extractors(self)",
                            "add_post_processor(self, pp)",
                            "add_progress_hook(self, ph)",
                            "_bidi_workaround(self, message)",
                            "to_screen(self, message, skip_eol=False)",
                            "_write_string(self, s, out=None)",
                            "to_stdout(self, message, skip_eol=False, check_quiet=False)",
                            "to_stderr(self, message)",
                            "to_console_title(self, message)",
                            "save_console_title(self)",
                            "restore_console_title(self)",
                            "__enter__(self)",
                            "__exit__(self, *args)",
                            "trouble(self, message=None, tb=None)",
                            "report_warning(self, message)",
                            "report_error(self, message, tb=None)",
                            "report_file_already_downloaded(self, file_name)",
                            "prepare_filename(self, info_dict)",
                            "_match_entry(self, info_dict, incomplete)",
                            "add_extra_info(info_dict, extra_info)",
                            "extract_info(self, url, download=True, ie_key=None, extra_info={}, process=True, force_generic_extractor=False)",
                            "add_default_extra_info(self, ie_result, ie, url)",
                            "process_ie_result(self, ie_result, download=True, extra_info={})",
                            "_build_format_filter(self, filter_spec)",
                            "_default_format_spec(self, info_dict, download=True)",
                            "build_format_selector(self, format_spec)",
                            "_calc_headers(self, info_dict)",
                            "_calc_cookies(self, info_dict)",
                            "process_video_result(self, info_dict, download=True)",
                            "process_subtitles(self, video_id, normal_subtitles, automatic_captions)",
                            "process_info(self, info_dict)",
                            "download(self, url_list)",
                            "download_with_info_file(self, info_filename)",
                            "filter_requested_info(info_dict)",
                            "post_process(self, filename, ie_info)",
                            "_make_archive_id(self, info_dict)",
                            "in_download_archive(self, info_dict)",
                            "record_download_archive(self, info_dict)",
                            "format_resolution(format, default='unknown')",
                            "_format_note(self, fdict)",
                            "list_formats(self, info_dict)",
                            "list_thumbnails(self, info_dict)",
                            "list_subtitles(self, video_id, subtitles, name='subtitles')",
                            "urlopen(self, req)",
                            "print_debug_header(self)",
                            "_setup_opener(self)",
                            "encode(self, s)",
                            "get_encoding(self)",
                            "_write_thumbnails(self, info_dict, filename)",
                            "check_deprecated(param, option, suggestion)",
                            "_filter(f)",
                            "can_merge()",
                            "prefer_best()",
                            "syntax_error(note, start)",
                            "_parse_filter(tokens)",
                            "_remove_unused_ops(tokens)",
                            "_parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False)",
                            "_build_selector_function(selector)",
                            "report_force_conversion(field, field_not, conversion)",
                            "sanitize_string_field(info, string_field)",
                            "sanitize_numeric_fields(info)",
                            "is_wellformed(f)",
                            "ensure_dir_exists(path)",
                            "python_implementation()",
                            "file_open(*args, **kwargs)",
                            "final_selector(ctx)",
                            "__init__(self, tokens)",
                            "__iter__(self)",
                            "__next__(self)",
                            "restore_last_token(self)",
                            "selector_function(ctx)",
                            "dl(name, info)",
                            "compatible_formats(formats)",
                            "make_playlistitems_entries(list_ie_entries)",
                            "report_download(num_entries)",
                            "selector_function(ctx)",
                            "iter_playlistitems(format)",
                            "_fixup(r)",
                            "selector_function(ctx)",
                            "_merge(formats_info)",
                            "selector_function(ctx)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108037d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286856e00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10766e930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1d40>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1dd0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1e60>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108036870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286872a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x1076a1f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108037d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286856e00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10766e930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1d40>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1dd0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1e60>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108036870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286872a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x108037820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x1076a1f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108037d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286856e00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10766e930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1d40>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1dd0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1076a1e60>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108036870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286872a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x108036e10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x1076a1f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108039640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286856e00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10766ec30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1080450e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108042ef0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108042f80>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108045050>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108039820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286872a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x108045200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108039640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286856e00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10766ec30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1080450e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108042ef0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108042f80>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108045050>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108039820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286872a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10803b1e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x108045200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108039640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286856e00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10766ec30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x1080450e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108042ef0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108042f80>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x108045050>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x108039820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fd286872a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10803b460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x108045200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbd9c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3dd0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3e60>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3ef0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbda730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e5cb050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbd9c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3dd0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3e60>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3ef0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbda730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbd9690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e5cb050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbd9c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3dd0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3e60>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e5c3ef0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbda730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbdac30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e5cb050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdc500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcdc30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe6170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe5f80>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe6050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe60e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdc730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbe6290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdc500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcdc30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe6170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe5f80>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe6050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe60e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdc730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbde050>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbe6290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdc500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcdc30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe6170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe5f80>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe6050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe60e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdc730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbde280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbe6290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599550>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe7560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe73b0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe7440>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe74d0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbe7680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbe0cd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=zxc-cxz'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed270>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf6170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbeacb0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf6050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf60e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5b2eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf6290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599550>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe7560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe73b0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe7440>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe74d0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbdec30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbe7680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599550>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=abc-cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe7560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe73b0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe7440>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbe74d0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbdf050>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbe7680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbe0cd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 18), match='format_id!=zxc-cxz'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!=zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "comparison_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed270>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf6170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbeacb0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf6050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf60e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5b2eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<built-in function eq>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbdf050>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf6290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdb9b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 14), match='format_id^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef4d0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef560>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d2230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbef5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdb9b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 14), match='format_id^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef4d0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef560>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d2230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5d2f50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbef5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10dbdb9b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 14), match='format_id^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef4d0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef560>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d2230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbd9c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbef5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ca460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf1a70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf18c0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf1950>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf19e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ca320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf18c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf1b90>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ca460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf1a70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf18c0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf1950>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf19e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ca320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf18c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5cdaf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf1b90>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ca460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf1a70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf18c0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf1950>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf19e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ca320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf18c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5cd5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf1b90>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfc050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfee60>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfeef0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfef80>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc7d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfee60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbfc170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc2d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!^=zxc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcdc30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe5f0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe560>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe4d0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cd820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbfe3b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfc050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfee60>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfeef0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfef80>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc7d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfee60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5caeb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbfc170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!^=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed4b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfc050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfee60>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfeef0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfef80>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc7d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfee60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5cad20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbfc170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc2d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!^=zxc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!^=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcdc30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe5f0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe560>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe4d0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cd820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbfe5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5cad20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbfe3b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ce870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 14), match='format_id$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b290>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b3b0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ce730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dc0b440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ce870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 14), match='format_id$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b290>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b3b0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ce730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbde0a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dc0b440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ce870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 14), match='format_id$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b290>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b3b0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ce730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0b320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10dbde640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dc0b440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d1500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2830>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2680>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2710>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf27a0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2710>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf2950>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d1500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2830>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2680>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2710>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf27a0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2710>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10cebcb40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf2950>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d1500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2830>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2680>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2710>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf27a0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf2710>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5ccd70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf2950>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caeb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc05f80>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef0e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbef200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ca8c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!$=cxz'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fd40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fb90>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fc20>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fcb0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d1eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fc20>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dc0fdd0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caeb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc05f80>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef0e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e599eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbef200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caeb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!$=cba'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cba'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'cba'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbcd930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc05f80>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef050>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef0e0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbef050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5b29b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbef200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5ca8c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!$=cxz'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!$=cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fd40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fb90>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fc20>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fcb0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5d1eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dc0fc20>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5b29b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dc0fdd0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 16), match='format_id*=bc-cb'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "comparison_value": {
                                    "variable_value": "'bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf37a0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf3830>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf39e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 16), match='format_id*=bc-cb'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "comparison_value": {
                                    "variable_value": "'bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf37a0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf3830>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10cea63c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf39e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 16), match='format_id*=bc-cb'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "comparison_value": {
                                    "variable_value": "'bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf37a0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf3830>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cc690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10dbf38c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5cc870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10dbf39e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caf00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id!*=bc-cb'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454cb0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454d40>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454dd0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caa00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454dd0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e454f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caf00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id!*=bc-cb'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454cb0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454d40>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454dd0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caa00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454dd0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5ca8c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e454f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caf00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 17), match='format_id!*=bc-cb'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "comparison_value": {
                                    "variable_value": "'bc-cb'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454cb0>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454d40>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454dd0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5caa00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e454dd0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5cd1e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e454f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599e60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!*=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed630>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4538c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453710>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4537a0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453830>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cca00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453830>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e453950>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e48c500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!*=zxc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456320>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456290>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456200>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e48c550>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e456830>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599e60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!*=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed630>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4538c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453710>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4537a0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453830>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cca00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453830>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5d1c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e453950>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e599e60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!*=abc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=abc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'abc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed630>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4538c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453710>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4537a0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453830>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5cca00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e453830>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10cebc960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e453950>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e48c500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 15), match='format_id!*=zxc'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "comparison_value": {
                                    "variable_value": "'zxc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456320>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456290>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456200>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e48c550>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e456200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10cebc960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e456830>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=-'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e563140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 13), match='format_id!*=-'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=-'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "comparison_value": {
                                    "variable_value": "'-'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470050>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4700e0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470170>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5635a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e470320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=-'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e563140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 13), match='format_id!*=-'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=-'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "comparison_value": {
                                    "variable_value": "'-'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470050>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4700e0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470170>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5635a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'abc-cba'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5cc190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'abc-cba', 'ext': 'mp4', 'url': 'http://localhost/sample.mp4', 'format': 'abc-cba - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e470320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=-'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "comparison_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_filter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "OPERATORS": {
                                    "variable_value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "operator.lt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.le": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.gt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.eq": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator.ne": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "operator_rex": {
                                    "variable_value": "re.compile('(?x)\\\\s*\\n            (?P<key>width",
                                    "variable_type": "Pattern",
                                    "variable_shape": "height"
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e563140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 13), match='format_id!*=-'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c090000>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "filter_spec": {
                                    "variable_value": "'format_id!*=-'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "comparison_value": {
                                    "variable_value": "'-'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10dbed330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "parse_filesize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "STR_OPERATORS": {
                                    "variable_value": "{'=': <built-in function eq>, '^=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470050>, '$=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e4700e0>, '*=': <function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470170>}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "attr.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "attr.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "str_operator_rex": {
                                    "variable_value": "re.compile('(?x)\\n                \\\\s*(?P<key>ext",
                                    "variable_type": "Pattern",
                                    "variable_shape": "acodec"
                                },
                                "STR_OPERATORS.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x10e5635a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_operator_rex.search": {
                                    "variable_value": "<built-in method search of re.Pattern object at 0x7fe80c064600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "str_op": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>.<lambda> at 0x10e470170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "actual_value": {
                                    "variable_value": "'zxc-cxz'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "f.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10e5ca690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "{'format_id': 'zxc-cxz', 'ext': 'webm', 'url': 'http://localhost/sample.mp4', 'format': 'zxc-cxz - unknown', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "_filter": {
                                    "variable_value": "<function YoutubeDL._build_format_filter.<locals>._filter at 0x10e470320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, params=None, auto_init=True):\n    \"\"\"Create a FileDownloader object with the given options.\"\"\"\n    if params is None:\n        params = {}\n    self._ies = []\n    self._ies_instances = {}\n    self._pps = []\n    self._progress_hooks = []\n    self._download_retcode = 0\n    self._num_downloads = 0\n    self._screen_file = [sys.stdout, sys.stderr][params.get('logtostderr', False)]\n    self._err_file = sys.stderr\n    self.params = {\n        # Default parameters\n        'nocheckcertificate': False,\n    }\n    self.params.update(params)\n    self.cache = Cache(self)\n\n    def check_deprecated(param, option, suggestion):\n        if self.params.get(param) is not None:\n            self.report_warning(\n                '%s is deprecated. Use %s instead.' % (option, suggestion))\n            return True\n        return False\n\n    if check_deprecated('cn_verification_proxy', '--cn-verification-proxy', '--geo-verification-proxy'):\n        if self.params.get('geo_verification_proxy') is None:\n            self.params['geo_verification_proxy'] = self.params['cn_verification_proxy']\n\n    check_deprecated('autonumber_size', '--autonumber-size', 'output template with %(autonumber)0Nd, where N in the number of digits')\n    check_deprecated('autonumber', '--auto-number', '-o \"%(autonumber)s-%(title)s.%(ext)s\"')\n    check_deprecated('usetitle', '--title', '-o \"%(title)s-%(id)s.%(ext)s\"')\n\n    if params.get('bidi_workaround', False):\n        try:\n            import pty\n            master, slave = pty.openpty()\n            width = compat_get_terminal_size().columns\n            if width is None:\n                width_args = []\n            else:\n                width_args = ['-w', str(width)]\n            sp_kwargs = dict(\n                stdin=subprocess.PIPE,\n                stdout=slave,\n                stderr=self._err_file)\n            try:\n                self._output_process = subprocess.Popen(\n                    ['bidiv'] + width_args, **sp_kwargs\n                )\n            except OSError:\n                self._output_process = subprocess.Popen(\n                    ['fribidi', '-c', 'UTF-8'] + width_args, **sp_kwargs)\n            self._output_channel = os.fdopen(master, 'rb')\n        except OSError as ose:\n            if ose.errno == errno.ENOENT:\n                self.report_warning('Could not find fribidi executable, ignoring --bidi-workaround . Make sure that  fribidi  is an executable file in one of the directories in your $PATH.')\n            else:\n                raise\n\n    if (sys.platform != 'win32' and\n            sys.getfilesystemencoding() in ['ascii', 'ANSI_X3.4-1968'] and\n            not params.get('restrictfilenames', False)):\n        # Unicode filesystem API will throw errors (#1474, #13027)\n        self.report_warning(\n            'Assuming --restrict-filenames since file system encoding '\n            'cannot encode all characters. '\n            'Set the LC_ALL environment variable to fix this.')\n        self.params['restrictfilenames'] = True\n\n    if isinstance(params.get('outtmpl'), bytes):\n        self.report_warning(\n            'Parameter outtmpl is bytes, but should be a unicode string. '\n            'Put  from __future__ import unicode_literals  at the top of your code file or consider switching to Python 3.x.')\n\n    self._setup_opener()\n\n    if auto_init:\n        self.print_debug_header()\n        self.add_default_info_extractors()\n\n    for pp_def_raw in self.params.get('postprocessors', []):\n        pp_class = get_postprocessor(pp_def_raw['key'])\n        pp_def = dict(pp_def_raw)\n        del pp_def['key']\n        pp = pp_class(self, **compat_kwargs(pp_def))\n        self.add_post_processor(pp)\n\n    for ph in self.params.get('progress_hooks', []):\n        self.add_progress_hook(ph)\n\n    register_socks_protocols()",
                "def warn_if_short_id(self, argv):\n    # short YouTube ID starting with dash?\n    idxs = [\n        i for i, a in enumerate(argv)\n        if re.match(r'^-[0-9A-Za-z_-]{10}$', a)]\n    if idxs:\n        correct_argv = (\n            ['youtube-dl'] +\n            [a for i, a in enumerate(argv) if i not in idxs] +\n            ['--'] + [argv[i] for i in idxs]\n        )\n        self.report_warning(\n            'Long argument string detected. '\n            'Use -- to separate parameters and URLs, like this:\\n%s\\n' %\n            args_to_str(correct_argv))",
                "def add_info_extractor(self, ie):\n    \"\"\"Add an InfoExtractor object to the end of the list.\"\"\"\n    self._ies.append(ie)\n    if not isinstance(ie, type):\n        self._ies_instances[ie.ie_key()] = ie\n        ie.set_downloader(self)",
                "def get_info_extractor(self, ie_key):\n    \"\"\"\n    Get an instance of an IE with name ie_key, it will try to get one from\n    the _ies list, if there's no instance it will create a new one and add\n    it to the extractor list.\n    \"\"\"\n    ie = self._ies_instances.get(ie_key)\n    if ie is None:\n        ie = get_info_extractor(ie_key)()\n        self.add_info_extractor(ie)\n    return ie",
                "def add_default_info_extractors(self):\n    \"\"\"\n    Add the InfoExtractors returned by gen_extractors to the end of the list\n    \"\"\"\n    for ie in gen_extractor_classes():\n        self.add_info_extractor(ie)",
                "def add_post_processor(self, pp):\n    \"\"\"Add a PostProcessor object to the end of the chain.\"\"\"\n    self._pps.append(pp)\n    pp.set_downloader(self)",
                "def add_progress_hook(self, ph):\n    \"\"\"Add the progress hook (currently only for the file downloader)\"\"\"\n    self._progress_hooks.append(ph)",
                "def _bidi_workaround(self, message):\n    if not hasattr(self, '_output_channel'):\n        return message\n\n    assert hasattr(self, '_output_process')\n    assert isinstance(message, compat_str)\n    line_count = message.count('\\n') + 1\n    self._output_process.stdin.write((message + '\\n').encode('utf-8'))\n    self._output_process.stdin.flush()\n    res = ''.join(self._output_channel.readline().decode('utf-8')\n                  for _ in range(line_count))\n    return res[:-len('\\n')]",
                "def to_screen(self, message, skip_eol=False):\n    \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n    return self.to_stdout(message, skip_eol, check_quiet=True)",
                "def _write_string(self, s, out=None):\n    write_string(s, out=out, encoding=self.params.get('encoding'))",
                "def to_stdout(self, message, skip_eol=False, check_quiet=False):\n    \"\"\"Print message to stdout if not in quiet mode.\"\"\"\n    if self.params.get('logger'):\n        self.params['logger'].debug(message)\n    elif not check_quiet or not self.params.get('quiet', False):\n        message = self._bidi_workaround(message)\n        terminator = ['\\n', ''][skip_eol]\n        output = message + terminator\n\n        self._write_string(output, self._screen_file)",
                "def to_stderr(self, message):\n    \"\"\"Print message to stderr.\"\"\"\n    assert isinstance(message, compat_str)\n    if self.params.get('logger'):\n        self.params['logger'].error(message)\n    else:\n        message = self._bidi_workaround(message)\n        output = message + '\\n'\n        self._write_string(output, self._err_file)",
                "def to_console_title(self, message):\n    if not self.params.get('consoletitle', False):\n        return\n    if compat_os_name == 'nt':\n        if ctypes.windll.kernel32.GetConsoleWindow():\n            # c_wchar_p() might not be necessary if `message` is\n            # already of type unicode()\n            ctypes.windll.kernel32.SetConsoleTitleW(ctypes.c_wchar_p(message))\n    elif 'TERM' in os.environ:\n        self._write_string('\\033]0;%s\\007' % message, self._screen_file)",
                "def save_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if self.params.get('simulate', False):\n        return\n    if compat_os_name != 'nt' and 'TERM' in os.environ:\n        # Save the title on stack\n        self._write_string('\\033[22;0t', self._screen_file)",
                "def restore_console_title(self):\n    if not self.params.get('consoletitle', False):\n        return\n    if self.params.get('simulate', False):\n        return\n    if compat_os_name != 'nt' and 'TERM' in os.environ:\n        # Restore the title from stack\n        self._write_string('\\033[23;0t', self._screen_file)",
                "def __enter__(self):\n    self.save_console_title()\n    return self",
                "def __exit__(self, *args):\n    self.restore_console_title()\n\n    if self.params.get('cookiefile') is not None:\n        self.cookiejar.save(ignore_discard=True, ignore_expires=True)",
                "def trouble(self, message=None, tb=None):\n    \"\"\"Determine action to take when a download problem appears.\n\n    Depending on if the downloader has been configured to ignore\n    download errors or not, this method may throw an exception or\n    not when errors are found, after printing the message.\n\n    tb, if given, is additional traceback information.\n    \"\"\"\n    if message is not None:\n        self.to_stderr(message)\n    if self.params.get('verbose'):\n        if tb is None:\n            if sys.exc_info()[0]:  # if .trouble has been called from an except block\n                tb = ''\n                if hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n                    tb += ''.join(traceback.format_exception(*sys.exc_info()[1].exc_info))\n                tb += encode_compat_str(traceback.format_exc())\n            else:\n                tb_data = traceback.format_list(traceback.extract_stack())\n                tb = ''.join(tb_data)\n        self.to_stderr(tb)\n    if not self.params.get('ignoreerrors', False):\n        if sys.exc_info()[0] and hasattr(sys.exc_info()[1], 'exc_info') and sys.exc_info()[1].exc_info[0]:\n            exc_info = sys.exc_info()[1].exc_info\n        else:\n            exc_info = sys.exc_info()\n        raise DownloadError(message, exc_info)\n    self._download_retcode = 1",
                "def report_warning(self, message):\n    '''\n    Print the message to stderr, it will be prefixed with 'WARNING:'\n    If stderr is a tty file the 'WARNING:' will be colored\n    '''\n    if self.params.get('logger') is not None:\n        self.params['logger'].warning(message)\n    else:\n        if self.params.get('no_warnings'):\n            return\n        if not self.params.get('no_color') and self._err_file.isatty() and compat_os_name != 'nt':\n            _msg_header = '\\033[0;33mWARNING:\\033[0m'\n        else:\n            _msg_header = 'WARNING:'\n        warning_message = '%s %s' % (_msg_header, message)\n        self.to_stderr(warning_message)",
                "def report_error(self, message, tb=None):\n    '''\n    Do the same as trouble, but prefixes the message with 'ERROR:', colored\n    in red if stderr is a tty file.\n    '''\n    if not self.params.get('no_color') and self._err_file.isatty() and compat_os_name != 'nt':\n        _msg_header = '\\033[0;31mERROR:\\033[0m'\n    else:\n        _msg_header = 'ERROR:'\n    error_message = '%s %s' % (_msg_header, message)\n    self.trouble(error_message, tb)",
                "def report_file_already_downloaded(self, file_name):\n    \"\"\"Report file has already been fully downloaded.\"\"\"\n    try:\n        self.to_screen('[download] %s has already been downloaded' % file_name)\n    except UnicodeEncodeError:\n        self.to_screen('[download] The file has already been downloaded')",
                "def prepare_filename(self, info_dict):\n    \"\"\"Generate the output filename.\"\"\"\n    try:\n        template_dict = dict(info_dict)\n\n        template_dict['epoch'] = int(time.time())\n        autonumber_size = self.params.get('autonumber_size')\n        if autonumber_size is None:\n            autonumber_size = 5\n        template_dict['autonumber'] = self.params.get('autonumber_start', 1) - 1 + self._num_downloads\n        if template_dict.get('resolution') is None:\n            if template_dict.get('width') and template_dict.get('height'):\n                template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n            elif template_dict.get('height'):\n                template_dict['resolution'] = '%sp' % template_dict['height']\n            elif template_dict.get('width'):\n                template_dict['resolution'] = '%dx?' % template_dict['width']\n\n        sanitize = lambda k, v: sanitize_filename(\n            compat_str(v),\n            restricted=self.params.get('restrictfilenames'),\n            is_id=(k == 'id' or k.endswith('_id')))\n        template_dict = dict((k, v if isinstance(v, compat_numeric_types) else sanitize(k, v))\n                             for k, v in template_dict.items()\n                             if v is not None and not isinstance(v, (list, tuple, dict)))\n        template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n\n        outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n\n        # For fields playlist_index and autonumber convert all occurrences\n        # of %(field)s to %(field)0Nd for backward compatibility\n        field_size_compat_map = {\n            'playlist_index': len(str(template_dict['n_entries'])),\n            'autonumber': autonumber_size,\n        }\n        FIELD_SIZE_COMPAT_RE = r'(?<!%)%\\((?P<field>autonumber|playlist_index)\\)s'\n        mobj = re.search(FIELD_SIZE_COMPAT_RE, outtmpl)\n        if mobj:\n            outtmpl = re.sub(\n                FIELD_SIZE_COMPAT_RE,\n                r'%%(\\1)0%dd' % field_size_compat_map[mobj.group('field')],\n                outtmpl)\n\n        # Missing numeric fields used together with integer presentation types\n        # in format specification will break the argument substitution since\n        # string 'NA' is returned for missing fields. We will patch output\n        # template for missing fields to meet string presentation type.\n        for numeric_field in self._NUMERIC_FIELDS:\n            if numeric_field not in template_dict:\n                # As of [1] format syntax is:\n                #  %[mapping_key][conversion_flags][minimum_width][.precision][length_modifier]type\n                # 1. https://docs.python.org/2/library/stdtypes.html#string-formatting\n                FORMAT_RE = r'''(?x)\n                    (?<!%)\n                    %\n                    \\({0}\\)  # mapping key\n                    (?:[#0\\-+ ]+)?  # conversion flags (optional)\n                    (?:\\d+)?  # minimum field width (optional)\n                    (?:\\.\\d+)?  # precision (optional)\n                    [hlL]?  # length modifier (optional)\n                    [diouxXeEfFgGcrs%]  # conversion type\n                '''\n                outtmpl = re.sub(\n                    FORMAT_RE.format(numeric_field),\n                    r'%({0})s'.format(numeric_field), outtmpl)\n\n        # expand_path translates '%%' into '%' and '$$' into '$'\n        # correspondingly that is not what we want since we need to keep\n        # '%%' intact for template dict substitution step. Working around\n        # with boundary-alike separator hack.\n        sep = ''.join([random.choice(ascii_letters) for _ in range(32)])\n        outtmpl = outtmpl.replace('%%', '%{0}%'.format(sep)).replace('$$', '${0}$'.format(sep))\n\n        # outtmpl should be expand_path'ed before template dict substitution\n        # because meta fields may contain env variables we don't want to\n        # be expanded. For example, for outtmpl \"%(title)s.%(ext)s\" and\n        # title \"Hello $PATH\", we don't want `$PATH` to be expanded.\n        filename = expand_path(outtmpl).replace(sep, '') % template_dict\n\n        # Temporary fix for #4787\n        # 'Treat' all problem characters by passing filename through preferredencoding\n        # to workaround encoding issues with subprocess on python2 @ Windows\n        if sys.version_info < (3, 0) and sys.platform == 'win32':\n            filename = encodeFilename(filename, True).decode(preferredencoding())\n        return sanitize_path(filename)\n    except ValueError as err:\n        self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n        return None",
                "def _match_entry(self, info_dict, incomplete):\n    \"\"\" Returns None iff the file should be downloaded \"\"\"\n\n    video_title = info_dict.get('title', info_dict.get('id', 'video'))\n    if 'title' in info_dict:\n        # This can happen when we're just evaluating the playlist\n        title = info_dict['title']\n        matchtitle = self.params.get('matchtitle', False)\n        if matchtitle:\n            if not re.search(matchtitle, title, re.IGNORECASE):\n                return '\"' + title + '\" title did not match pattern \"' + matchtitle + '\"'\n        rejecttitle = self.params.get('rejecttitle', False)\n        if rejecttitle:\n            if re.search(rejecttitle, title, re.IGNORECASE):\n                return '\"' + title + '\" title matched reject pattern \"' + rejecttitle + '\"'\n    date = info_dict.get('upload_date')\n    if date is not None:\n        dateRange = self.params.get('daterange', DateRange())\n        if date not in dateRange:\n            return '%s upload date is not in range %s' % (date_from_str(date).isoformat(), dateRange)\n    view_count = info_dict.get('view_count')\n    if view_count is not None:\n        min_views = self.params.get('min_views')\n        if min_views is not None and view_count < min_views:\n            return 'Skipping %s, because it has not reached minimum view count (%d/%d)' % (video_title, view_count, min_views)\n        max_views = self.params.get('max_views')\n        if max_views is not None and view_count > max_views:\n            return 'Skipping %s, because it has exceeded the maximum view count (%d/%d)' % (video_title, view_count, max_views)\n    if age_restricted(info_dict.get('age_limit'), self.params.get('age_limit')):\n        return 'Skipping \"%s\" because it is age restricted' % video_title\n    if self.in_download_archive(info_dict):\n        return '%s has already been recorded in archive' % video_title\n\n    if not incomplete:\n        match_filter = self.params.get('match_filter')\n        if match_filter is not None:\n            ret = match_filter(info_dict)\n            if ret is not None:\n                return ret\n\n    return None",
                "@staticmethod\ndef add_extra_info(info_dict, extra_info):\n    '''Set the keys from extra_info in info dict if they are missing'''\n    for key, value in extra_info.items():\n        info_dict.setdefault(key, value)",
                "def extract_info(self, url, download=True, ie_key=None, extra_info={},\n                 process=True, force_generic_extractor=False):\n    '''\n    Returns a list with a dictionary for each video we find.\n    If 'download', also downloads the videos.\n    extra_info is a dict containing the extra values to add to each result\n    '''\n\n    if not ie_key and force_generic_extractor:\n        ie_key = 'Generic'\n\n    if ie_key:\n        ies = [self.get_info_extractor(ie_key)]\n    else:\n        ies = self._ies\n\n    for ie in ies:\n        if not ie.suitable(url):\n            continue\n\n        ie = self.get_info_extractor(ie.ie_key())\n        if not ie.working():\n            self.report_warning('The program functionality for this site has been marked as broken, '\n                                'and will probably not work.')\n\n        try:\n            ie_result = ie.extract(url)\n            if ie_result is None:  # Finished already (backwards compatibility; listformats and friends should be moved here)\n                break\n            if isinstance(ie_result, list):\n                # Backwards compatibility: old IE result format\n                ie_result = {\n                    '_type': 'compat_list',\n                    'entries': ie_result,\n                }\n            self.add_default_extra_info(ie_result, ie, url)\n            if process:\n                return self.process_ie_result(ie_result, download, extra_info)\n            else:\n                return ie_result\n        except GeoRestrictedError as e:\n            msg = e.msg\n            if e.countries:\n                msg += '\\nThis video is available in %s.' % ', '.join(\n                    map(ISO3166Utils.short2full, e.countries))\n            msg += '\\nYou might want to use a VPN or a proxy server (with --proxy) to workaround.'\n            self.report_error(msg)\n            break\n        except ExtractorError as e:  # An error we somewhat expected\n            self.report_error(compat_str(e), e.format_traceback())\n            break\n        except MaxDownloadsReached:\n            raise\n        except Exception as e:\n            if self.params.get('ignoreerrors', False):\n                self.report_error(error_to_compat_str(e), tb=encode_compat_str(traceback.format_exc()))\n                break\n            else:\n                raise\n    else:\n        self.report_error('no suitable InfoExtractor for URL %s' % url)",
                "def add_default_extra_info(self, ie_result, ie, url):\n    self.add_extra_info(ie_result, {\n        'extractor': ie.IE_NAME,\n        'webpage_url': url,\n        'webpage_url_basename': url_basename(url),\n        'extractor_key': ie.ie_key(),\n    })",
                "def process_ie_result(self, ie_result, download=True, extra_info={}):\n    \"\"\"\n    Take the result of the ie(may be modified) and resolve all unresolved\n    references (URLs, playlist items).\n\n    It will also download the videos if 'download'.\n    Returns the resolved ie_result.\n    \"\"\"\n    result_type = ie_result.get('_type', 'video')\n\n    if result_type in ('url', 'url_transparent'):\n        ie_result['url'] = sanitize_url(ie_result['url'])\n        extract_flat = self.params.get('extract_flat', False)\n        if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or\n                extract_flat is True):\n            if self.params.get('forcejson', False):\n                self.to_stdout(json.dumps(ie_result))\n            return ie_result\n\n    if result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        return self.process_video_result(ie_result, download=download)\n    elif result_type == 'url':\n        # We have to add extra_info to the results because it may be\n        # contained in a playlist\n        return self.extract_info(ie_result['url'],\n                                 download,\n                                 ie_key=ie_result.get('ie_key'),\n                                 extra_info=extra_info)\n    elif result_type == 'url_transparent':\n        # Use the information from the embedding page\n        info = self.extract_info(\n            ie_result['url'], ie_key=ie_result.get('ie_key'),\n            extra_info=extra_info, download=False, process=False)\n\n        # extract_info may return None when ignoreerrors is enabled and\n        # extraction failed with an error, don't crash and return early\n        # in this case\n        if not info:\n            return info\n\n        force_properties = dict(\n            (k, v) for k, v in ie_result.items() if v is not None)\n        for f in ('_type', 'url', 'id', 'extractor', 'extractor_key', 'ie_key'):\n            if f in force_properties:\n                del force_properties[f]\n        new_result = info.copy()\n        new_result.update(force_properties)\n\n        # Extracted info may not be a video result (i.e.\n        # info.get('_type', 'video') != video) but rather an url or\n        # url_transparent. In such cases outer metadata (from ie_result)\n        # should be propagated to inner one (info). For this to happen\n        # _type of info should be overridden with url_transparent. This\n        # fixes issue from https://github.com/rg3/youtube-dl/pull/11163.\n        if new_result.get('_type') == 'url':\n            new_result['_type'] = 'url_transparent'\n\n        return self.process_ie_result(\n            new_result, download=download, extra_info=extra_info)\n    elif result_type in ('playlist', 'multi_video'):\n        # We process each entry in the playlist\n        playlist = ie_result.get('title') or ie_result.get('id')\n        self.to_screen('[download] Downloading playlist: %s' % playlist)\n\n        playlist_results = []\n\n        playliststart = self.params.get('playliststart', 1) - 1\n        playlistend = self.params.get('playlistend')\n        # For backwards compatibility, interpret -1 as whole list\n        if playlistend == -1:\n            playlistend = None\n\n        playlistitems_str = self.params.get('playlist_items')\n        playlistitems = None\n        if playlistitems_str is not None:\n            def iter_playlistitems(format):\n                for string_segment in format.split(','):\n                    if '-' in string_segment:\n                        start, end = string_segment.split('-')\n                        for item in range(int(start), int(end) + 1):\n                            yield int(item)\n                    else:\n                        yield int(string_segment)\n            playlistitems = orderedSet(iter_playlistitems(playlistitems_str))\n\n        ie_entries = ie_result['entries']\n\n        def make_playlistitems_entries(list_ie_entries):\n            num_entries = len(list_ie_entries)\n            return [\n                list_ie_entries[i - 1] for i in playlistitems\n                if -num_entries <= i - 1 < num_entries]\n\n        def report_download(num_entries):\n            self.to_screen(\n                '[%s] playlist %s: Downloading %d videos' %\n                (ie_result['extractor'], playlist, num_entries))\n\n        if isinstance(ie_entries, list):\n            n_all_entries = len(ie_entries)\n            if playlistitems:\n                entries = make_playlistitems_entries(ie_entries)\n            else:\n                entries = ie_entries[playliststart:playlistend]\n            n_entries = len(entries)\n            self.to_screen(\n                '[%s] playlist %s: Collected %d video ids (downloading %d of them)' %\n                (ie_result['extractor'], playlist, n_all_entries, n_entries))\n        elif isinstance(ie_entries, PagedList):\n            if playlistitems:\n                entries = []\n                for item in playlistitems:\n                    entries.extend(ie_entries.getslice(\n                        item - 1, item\n                    ))\n            else:\n                entries = ie_entries.getslice(\n                    playliststart, playlistend)\n            n_entries = len(entries)\n            report_download(n_entries)\n        else:  # iterable\n            if playlistitems:\n                entries = make_playlistitems_entries(list(itertools.islice(\n                    ie_entries, 0, max(playlistitems))))\n            else:\n                entries = list(itertools.islice(\n                    ie_entries, playliststart, playlistend))\n            n_entries = len(entries)\n            report_download(n_entries)\n\n        if self.params.get('playlistreverse', False):\n            entries = entries[::-1]\n\n        if self.params.get('playlistrandom', False):\n            random.shuffle(entries)\n\n        x_forwarded_for = ie_result.get('__x_forwarded_for_ip')\n\n        for i, entry in enumerate(entries, 1):\n            self.to_screen('[download] Downloading video %s of %s' % (i, n_entries))\n            # This __x_forwarded_for_ip thing is a bit ugly but requires\n            # minimal changes\n            if x_forwarded_for:\n                entry['__x_forwarded_for_ip'] = x_forwarded_for\n            extra = {\n                'n_entries': n_entries,\n                'playlist': playlist,\n                'playlist_id': ie_result.get('id'),\n                'playlist_title': ie_result.get('title'),\n                'playlist_uploader': ie_result.get('uploader'),\n                'playlist_uploader_id': ie_result.get('uploader_id'),\n                'playlist_index': i + playliststart,\n                'extractor': ie_result['extractor'],\n                'webpage_url': ie_result['webpage_url'],\n                'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                'extractor_key': ie_result['extractor_key'],\n            }\n\n            reason = self._match_entry(entry, incomplete=True)\n            if reason is not None:\n                self.to_screen('[download] ' + reason)\n                continue\n\n            entry_result = self.process_ie_result(entry,\n                                                  download=download,\n                                                  extra_info=extra)\n            playlist_results.append(entry_result)\n        ie_result['entries'] = playlist_results\n        self.to_screen('[download] Finished downloading playlist: %s' % playlist)\n        return ie_result\n    elif result_type == 'compat_list':\n        self.report_warning(\n            'Extractor %s returned a compat_list result. '\n            'It needs to be updated.' % ie_result.get('extractor'))\n\n        def _fixup(r):\n            self.add_extra_info(\n                r,\n                {\n                    'extractor': ie_result['extractor'],\n                    'webpage_url': ie_result['webpage_url'],\n                    'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                    'extractor_key': ie_result['extractor_key'],\n                }\n            )\n            return r\n        ie_result['entries'] = [\n            self.process_ie_result(_fixup(r), download, extra_info)\n            for r in ie_result['entries']\n        ]\n        return ie_result\n    else:\n        raise Exception('Invalid result type: %s' % result_type)",
                "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n        $\n        ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n    m = operator_rex.search(filter_spec)\n    if m:\n        try:\n            comparison_value = int(m.group('value'))\n        except ValueError:\n            comparison_value = parse_filesize(m.group('value'))\n            if comparison_value is None:\n                comparison_value = parse_filesize(m.group('value') + 'B')\n            if comparison_value is None:\n                raise ValueError(\n                    'Invalid value %r in format specification %r' % (\n                        m.group('value'), filter_spec))\n        op = OPERATORS[m.group('op')]\n\n    if not m:\n        STR_OPERATORS = {\n            '=': operator.eq,\n            '^=': lambda attr, value: attr.startswith(value),\n            '$=': lambda attr, value: attr.endswith(value),\n            '*=': lambda attr, value: value in attr,\n        }\n        str_operator_rex = re.compile(r'''(?x)\n            \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n            \\s*(?P<negation>!\\s*)?(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n            \\s*(?P<value>[a-zA-Z0-9._-]+)\n            \\s*$\n            ''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n        m = str_operator_rex.search(filter_spec)\n        if m:\n            comparison_value = m.group('value')\n            str_op = STR_OPERATORS[m.group('op')]\n            if m.group('negation'):\n                op = lambda attr, value: not str_op\n            else:\n                op = str_op\n\n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n\n    def _filter(f):\n        actual_value = f.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n    return _filter",
                "def _default_format_spec(self, info_dict, download=True):\n\n    def can_merge():\n        merger = FFmpegMergerPP(self)\n        return merger.available and merger.can_merge()\n\n    def prefer_best():\n        if self.params.get('simulate', False):\n            return False\n        if not download:\n            return False\n        if self.params.get('outtmpl', DEFAULT_OUTTMPL) == '-':\n            return True\n        if info_dict.get('is_live'):\n            return True\n        if not can_merge():\n            return True\n        return False\n\n    req_format_list = ['bestvideo+bestaudio', 'best']\n    if prefer_best():\n        req_format_list.reverse()\n    return '/'.join(req_format_list)",
                "def build_format_selector(self, format_spec):\n    def syntax_error(note, start):\n        message = (\n            'Invalid format specification: '\n            '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n        return SyntaxError(message)\n\n    PICKFIRST = 'PICKFIRST'\n    MERGE = 'MERGE'\n    SINGLE = 'SINGLE'\n    GROUP = 'GROUP'\n    FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n    def _parse_filter(tokens):\n        filter_parts = []\n        for type, string, start, _, _ in tokens:\n            if type == tokenize.OP and string == ']':\n                return ''.join(filter_parts)\n            else:\n                filter_parts.append(string)\n\n    def _remove_unused_ops(tokens):\n        # Remove operators that we don't use and join them with the surrounding strings\n        # for example: 'mp4' '-' 'baseline' '-' '16x9' is converted to 'mp4-baseline-16x9'\n        ALLOWED_OPS = ('/', '+', ',', '(', ')')\n        last_string, last_start, last_end, last_line = None, None, None, None\n        for type, string, start, end, line in tokens:\n            if type == tokenize.OP and string == '[':\n                if last_string:\n                    yield tokenize.NAME, last_string, last_start, last_end, last_line\n                    last_string = None\n                yield type, string, start, end, line\n                # everything inside brackets will be handled by _parse_filter\n                for type, string, start, end, line in tokens:\n                    yield type, string, start, end, line\n                    if type == tokenize.OP and string == ']':\n                        break\n            elif type == tokenize.OP and string in ALLOWED_OPS:\n                if last_string:\n                    yield tokenize.NAME, last_string, last_start, last_end, last_line\n                    last_string = None\n                yield type, string, start, end, line\n            elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n                if not last_string:\n                    last_string = string\n                    last_start = start\n                    last_end = end\n                else:\n                    last_string += string\n        if last_string:\n            yield tokenize.NAME, last_string, last_start, last_end, last_line\n\n    def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n        selectors = []\n        current_selector = None\n        for type, string, start, _, _ in tokens:\n            # ENCODING is only defined in python 3.x\n            if type == getattr(tokenize, 'ENCODING', None):\n                continue\n            elif type in [tokenize.NAME, tokenize.NUMBER]:\n                current_selector = FormatSelector(SINGLE, string, [])\n            elif type == tokenize.OP:\n                if string == ')':\n                    if not inside_group:\n                        # ')' will be handled by the parentheses group\n                        tokens.restore_last_token()\n                    break\n                elif inside_merge and string in ['/', ',']:\n                    tokens.restore_last_token()\n                    break\n                elif inside_choice and string == ',':\n                    tokens.restore_last_token()\n                    break\n                elif string == ',':\n                    if not current_selector:\n                        raise syntax_error('\",\" must follow a format selector', start)\n                    selectors.append(current_selector)\n                    current_selector = None\n                elif string == '/':\n                    if not current_selector:\n                        raise syntax_error('\"/\" must follow a format selector', start)\n                    first_choice = current_selector\n                    second_choice = _parse_format_selection(tokens, inside_choice=True)\n                    current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n                elif string == '[':\n                    if not current_selector:\n                        current_selector = FormatSelector(SINGLE, 'best', [])\n                    format_filter = _parse_filter(tokens)\n                    current_selector.filters.append(format_filter)\n                elif string == '(':\n                    if current_selector:\n                        raise syntax_error('Unexpected \"(\"', start)\n                    group = _parse_format_selection(tokens, inside_group=True)\n                    current_selector = FormatSelector(GROUP, group, [])\n                elif string == '+':\n                    video_selector = current_selector\n                    audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                    if not video_selector or not audio_selector:\n                        raise syntax_error('\"+\" must be between two format selectors', start)\n                    current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n                else:\n                    raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n            elif type == tokenize.ENDMARKER:\n                break\n        if current_selector:\n            selectors.append(current_selector)\n        return selectors\n\n    def _build_selector_function(selector):\n        if isinstance(selector, list):\n            fs = [_build_selector_function(s) for s in selector]\n\n            def selector_function(ctx):\n                for f in fs:\n                    for format in f(ctx):\n                        yield format\n            return selector_function\n        elif selector.type == GROUP:\n            selector_function = _build_selector_function(selector.selector)\n        elif selector.type == PICKFIRST:\n            fs = [_build_selector_function(s) for s in selector.selector]\n\n            def selector_function(ctx):\n                for f in fs:\n                    picked_formats = list(f(ctx))\n                    if picked_formats:\n                        return picked_formats\n                return []\n        elif selector.type == SINGLE:\n            format_spec = selector.selector\n\n            def selector_function(ctx):\n                formats = list(ctx['formats'])\n                if not formats:\n                    return\n                if format_spec == 'all':\n                    for f in formats:\n                        yield f\n                elif format_spec in ['best', 'worst', None]:\n                    format_idx = 0 if format_spec == 'worst' else -1\n                    audiovideo_formats = [\n                        f for f in formats\n                        if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                    if audiovideo_formats:\n                        yield audiovideo_formats[format_idx]\n                    # for extractors with incomplete formats (audio only (soundcloud)\n                    # or video only (imgur)) we will fallback to best/worst\n                    # {video,audio}-only format\n                    elif ctx['incomplete_formats']:\n                        yield formats[format_idx]\n                elif format_spec == 'bestaudio':\n                    audio_formats = [\n                        f for f in formats\n                        if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[-1]\n                elif format_spec == 'worstaudio':\n                    audio_formats = [\n                        f for f in formats\n                        if f.get('vcodec') == 'none']\n                    if audio_formats:\n                        yield audio_formats[0]\n                elif format_spec == 'bestvideo':\n                    video_formats = [\n                        f for f in formats\n                        if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[-1]\n                elif format_spec == 'worstvideo':\n                    video_formats = [\n                        f for f in formats\n                        if f.get('acodec') == 'none']\n                    if video_formats:\n                        yield video_formats[0]\n                else:\n                    extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                    if format_spec in extensions:\n                        filter_f = lambda f: f['ext'] == format_spec\n                    else:\n                        filter_f = lambda f: f['format_id'] == format_spec\n                    matches = list(filter(filter_f, formats))\n                    if matches:\n                        yield matches[-1]\n        elif selector.type == MERGE:\n            def _merge(formats_info):\n                format_1, format_2 = [f['format_id'] for f in formats_info]\n                # The first format must contain the video and the\n                # second the audio\n                if formats_info[0].get('vcodec') == 'none':\n                    self.report_error('The first format must '\n                                      'contain the video, try using '\n                                      '\"-f %s+%s\"' % (format_2, format_1))\n                    return\n                # Formats must be opposite (video+audio)\n                if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                    self.report_error(\n                        'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n                        % (format_1, format_2))\n                    return\n                output_ext = (\n                    formats_info[0]['ext']\n                    if self.params.get('merge_output_format') is None\n                    else self.params['merge_output_format'])\n                return {\n                    'requested_formats': formats_info,\n                    'format': '%s+%s' % (formats_info[0].get('format'),\n                                         formats_info[1].get('format')),\n                    'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                            formats_info[1].get('format_id')),\n                    'width': formats_info[0].get('width'),\n                    'height': formats_info[0].get('height'),\n                    'resolution': formats_info[0].get('resolution'),\n                    'fps': formats_info[0].get('fps'),\n                    'vcodec': formats_info[0].get('vcodec'),\n                    'vbr': formats_info[0].get('vbr'),\n                    'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                    'acodec': formats_info[1].get('acodec'),\n                    'abr': formats_info[1].get('abr'),\n                    'ext': output_ext,\n                }\n            video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n            def selector_function(ctx):\n                for pair in itertools.product(\n                        video_selector(copy.deepcopy(ctx)), audio_selector(copy.deepcopy(ctx))):\n                    yield _merge(pair)\n\n        filters = [self._build_format_filter(f) for f in selector.filters]\n\n        def final_selector(ctx):\n            ctx_copy = copy.deepcopy(ctx)\n            for _filter in filters:\n                ctx_copy['formats'] = list(filter(_filter, ctx_copy['formats']))\n            return selector_function(ctx_copy)\n        return final_selector\n\n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(_remove_unused_ops(compat_tokenize_tokenize(stream.readline)))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n    class TokenIterator(object):\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n\n        next = __next__\n\n        def restore_last_token(self):\n            self.counter -= 1\n\n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)",
                "def _calc_headers(self, info_dict):\n    res = std_headers.copy()\n\n    add_headers = info_dict.get('http_headers')\n    if add_headers:\n        res.update(add_headers)\n\n    cookies = self._calc_cookies(info_dict)\n    if cookies:\n        res['Cookie'] = cookies\n\n    if 'X-Forwarded-For' not in res:\n        x_forwarded_for_ip = info_dict.get('__x_forwarded_for_ip')\n        if x_forwarded_for_ip:\n            res['X-Forwarded-For'] = x_forwarded_for_ip\n\n    return res",
                "def _calc_cookies(self, info_dict):\n    pr = sanitized_Request(info_dict['url'])\n    self.cookiejar.add_cookie_header(pr)\n    return pr.get_header('Cookie')",
                "def process_video_result(self, info_dict, download=True):\n    assert info_dict.get('_type', 'video') == 'video'\n\n    if 'id' not in info_dict:\n        raise ExtractorError('Missing \"id\" field in extractor result')\n    if 'title' not in info_dict:\n        raise ExtractorError('Missing \"title\" field in extractor result')\n\n    def report_force_conversion(field, field_not, conversion):\n        self.report_warning(\n            '\"%s\" field is not %s - forcing %s conversion, there is an error in extractor'\n            % (field, field_not, conversion))\n\n    def sanitize_string_field(info, string_field):\n        field = info.get(string_field)\n        if field is None or isinstance(field, compat_str):\n            return\n        report_force_conversion(string_field, 'a string', 'string')\n        info[string_field] = compat_str(field)\n\n    def sanitize_numeric_fields(info):\n        for numeric_field in self._NUMERIC_FIELDS:\n            field = info.get(numeric_field)\n            if field is None or isinstance(field, compat_numeric_types):\n                continue\n            report_force_conversion(numeric_field, 'numeric', 'int')\n            info[numeric_field] = int_or_none(field)\n\n    sanitize_string_field(info_dict, 'id')\n    sanitize_numeric_fields(info_dict)\n\n    if 'playlist' not in info_dict:\n        # It isn't part of a playlist\n        info_dict['playlist'] = None\n        info_dict['playlist_index'] = None\n\n    thumbnails = info_dict.get('thumbnails')\n    if thumbnails is None:\n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n    if thumbnails:\n        thumbnails.sort(key=lambda t: (\n            t.get('preference') if t.get('preference') is not None else -1,\n            t.get('width') if t.get('width') is not None else -1,\n            t.get('height') if t.get('height') is not None else -1,\n            t.get('id') if t.get('id') is not None else '', t.get('url')))\n        for i, t in enumerate(thumbnails):\n            t['url'] = sanitize_url(t['url'])\n            if t.get('width') and t.get('height'):\n                t['resolution'] = '%dx%d' % (t['width'], t['height'])\n            if t.get('id') is None:\n                t['id'] = '%d' % i\n\n    if self.params.get('list_thumbnails'):\n        self.list_thumbnails(info_dict)\n        return\n\n    thumbnail = info_dict.get('thumbnail')\n    if thumbnail:\n        info_dict['thumbnail'] = sanitize_url(thumbnail)\n    elif thumbnails:\n        info_dict['thumbnail'] = thumbnails[-1]['url']\n\n    if 'display_id' not in info_dict and 'id' in info_dict:\n        info_dict['display_id'] = info_dict['id']\n\n    if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n        # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n        # see http://bugs.python.org/issue1646728)\n        try:\n            upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n            info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n        except (ValueError, OverflowError, OSError):\n            pass\n\n    # Auto generate title fields corresponding to the *_number fields when missing\n    # in order to always have clean titles. This is very common for TV series.\n    for field in ('chapter', 'season', 'episode'):\n        if info_dict.get('%s_number' % field) is not None and not info_dict.get(field):\n            info_dict[field] = '%s %d' % (field.capitalize(), info_dict['%s_number' % field])\n\n    for cc_kind in ('subtitles', 'automatic_captions'):\n        cc = info_dict.get(cc_kind)\n        if cc:\n            for _, subtitle in cc.items():\n                for subtitle_format in subtitle:\n                    if subtitle_format.get('url'):\n                        subtitle_format['url'] = sanitize_url(subtitle_format['url'])\n                    if subtitle_format.get('ext') is None:\n                        subtitle_format['ext'] = determine_ext(subtitle_format['url']).lower()\n\n    automatic_captions = info_dict.get('automatic_captions')\n    subtitles = info_dict.get('subtitles')\n\n    if self.params.get('listsubtitles', False):\n        if 'automatic_captions' in info_dict:\n            self.list_subtitles(\n                info_dict['id'], automatic_captions, 'automatic captions')\n        self.list_subtitles(info_dict['id'], subtitles, 'subtitles')\n        return\n\n    info_dict['requested_subtitles'] = self.process_subtitles(\n        info_dict['id'], subtitles, automatic_captions)\n\n    # We now pick which formats have to be downloaded\n    if info_dict.get('formats') is None:\n        # There's only one format available\n        formats = [info_dict]\n    else:\n        formats = info_dict['formats']\n\n    if not formats:\n        raise ExtractorError('No video formats found!')\n\n    def is_wellformed(f):\n        url = f.get('url')\n        if not url:\n            self.report_warning(\n                '\"url\" field is missing or empty - skipping format, '\n                'there is an error in extractor')\n            return False\n        if isinstance(url, bytes):\n            sanitize_string_field(f, 'url')\n        return True\n\n    # Filter out malformed formats for better extraction robustness\n    formats = list(filter(is_wellformed, formats))\n\n    formats_dict = {}\n\n    # We check that all the formats have the format and format_id fields\n    for i, format in enumerate(formats):\n        sanitize_string_field(format, 'format_id')\n        sanitize_numeric_fields(format)\n        format['url'] = sanitize_url(format['url'])\n        if not format.get('format_id'):\n            format['format_id'] = compat_str(i)\n        else:\n            # Sanitize format_id from characters used in format selector expression\n            format['format_id'] = re.sub(r'[\\s,/+\\[\\]()]', '_', format['format_id'])\n        format_id = format['format_id']\n        if format_id not in formats_dict:\n            formats_dict[format_id] = []\n        formats_dict[format_id].append(format)\n\n    # Make sure all formats have unique format_id\n    for format_id, ambiguous_formats in formats_dict.items():\n        if len(ambiguous_formats) > 1:\n            for i, format in enumerate(ambiguous_formats):\n                format['format_id'] = '%s-%d' % (format_id, i)\n\n    for i, format in enumerate(formats):\n        if format.get('format') is None:\n            format['format'] = '{id} - {res}{note}'.format(\n                id=format['format_id'],\n                res=self.format_resolution(format),\n                note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n            )\n        # Automatically determine file extension if missing\n        if format.get('ext') is None:\n            format['ext'] = determine_ext(format['url']).lower()\n        # Automatically determine protocol if missing (useful for format\n        # selection purposes)\n        if format.get('protocol') is None:\n            format['protocol'] = determine_protocol(format)\n        # Add HTTP headers, so that external programs can use them from the\n        # json output\n        full_format_info = info_dict.copy()\n        full_format_info.update(format)\n        format['http_headers'] = self._calc_headers(full_format_info)\n    # Remove private housekeeping stuff\n    if '__x_forwarded_for_ip' in info_dict:\n        del info_dict['__x_forwarded_for_ip']\n\n    # TODO Central sorting goes here\n\n    if formats[0] is not info_dict:\n        # only set the 'formats' fields if the original info_dict list them\n        # otherwise we end up with a circular reference, the first (and unique)\n        # element in the 'formats' field in info_dict is info_dict itself,\n        # which can't be exported to json\n        info_dict['formats'] = formats\n    if self.params.get('listformats'):\n        self.list_formats(info_dict)\n        return\n\n    req_format = self.params.get('format')\n    if req_format is None:\n        req_format = self._default_format_spec(info_dict, download=download)\n        if self.params.get('verbose'):\n            self.to_stdout('[debug] Default format spec: %s' % req_format)\n\n    format_selector = self.build_format_selector(req_format)\n\n    # While in format selection we may need to have an access to the original\n    # format set in order to calculate some metrics or do some processing.\n    # For now we need to be able to guess whether original formats provided\n    # by extractor are incomplete or not (i.e. whether extractor provides only\n    # video-only or audio-only formats) for proper formats selection for\n    # extractors with such incomplete formats (see\n    # https://github.com/rg3/youtube-dl/pull/5556).\n    # Since formats may be filtered during format selection and may not match\n    # the original formats the results may be incorrect. Thus original formats\n    # or pre-calculated metrics should be passed to format selection routines\n    # as well.\n    # We will pass a context object containing all necessary additional data\n    # instead of just formats.\n    # This fixes incorrect format selection issue (see\n    # https://github.com/rg3/youtube-dl/issues/10083).\n    incomplete_formats = (\n        # All formats are video-only or\n        all(f.get('vcodec') != 'none' and f.get('acodec') == 'none' for f in formats) or\n        # all formats are audio-only\n        all(f.get('vcodec') == 'none' and f.get('acodec') != 'none' for f in formats))\n\n    ctx = {\n        'formats': formats,\n        'incomplete_formats': incomplete_formats,\n    }\n\n    formats_to_download = list(format_selector(ctx))\n    if not formats_to_download:\n        raise ExtractorError('requested format not available',\n                             expected=True)\n\n    if download:\n        if len(formats_to_download) > 1:\n            self.to_screen('[info] %s: downloading video in %s formats' % (info_dict['id'], len(formats_to_download)))\n        for format in formats_to_download:\n            new_info = dict(info_dict)\n            new_info.update(format)\n            self.process_info(new_info)\n    # We update the info dict with the best quality format (backwards compatibility)\n    info_dict.update(formats_to_download[-1])\n    return info_dict",
                "def process_subtitles(self, video_id, normal_subtitles, automatic_captions):\n    \"\"\"Select the requested subtitles and their format\"\"\"\n    available_subs = {}\n    if normal_subtitles and self.params.get('writesubtitles'):\n        available_subs.update(normal_subtitles)\n    if automatic_captions and self.params.get('writeautomaticsub'):\n        for lang, cap_info in automatic_captions.items():\n            if lang not in available_subs:\n                available_subs[lang] = cap_info\n\n    if (not self.params.get('writesubtitles') and not\n            self.params.get('writeautomaticsub') or not\n            available_subs):\n        return None\n\n    if self.params.get('allsubtitles', False):\n        requested_langs = available_subs.keys()\n    else:\n        if self.params.get('subtitleslangs', False):\n            requested_langs = self.params.get('subtitleslangs')\n        elif 'en' in available_subs:\n            requested_langs = ['en']\n        else:\n            requested_langs = [list(available_subs.keys())[0]]\n\n    formats_query = self.params.get('subtitlesformat', 'best')\n    formats_preference = formats_query.split('/') if formats_query else []\n    subs = {}\n    for lang in requested_langs:\n        formats = available_subs.get(lang)\n        if formats is None:\n            self.report_warning('%s subtitles not available for %s' % (lang, video_id))\n            continue\n        for ext in formats_preference:\n            if ext == 'best':\n                f = formats[-1]\n                break\n            matches = list(filter(lambda f: f['ext'] == ext, formats))\n            if matches:\n                f = matches[-1]\n                break\n        else:\n            f = formats[-1]\n            self.report_warning(\n                'No subtitle format found matching \"%s\" for language %s, '\n                'using %s' % (formats_query, lang, f['ext']))\n        subs[lang] = f\n    return subs",
                "def process_info(self, info_dict):\n    \"\"\"Process a single resolved IE result.\"\"\"\n\n    assert info_dict.get('_type', 'video') == 'video'\n\n    max_downloads = self.params.get('max_downloads')\n    if max_downloads is not None:\n        if self._num_downloads >= int(max_downloads):\n            raise MaxDownloadsReached()\n\n    info_dict['fulltitle'] = info_dict['title']\n    if len(info_dict['title']) > 200:\n        info_dict['title'] = info_dict['title'][:197] + '...'\n\n    if 'format' not in info_dict:\n        info_dict['format'] = info_dict['ext']\n\n    reason = self._match_entry(info_dict, incomplete=False)\n    if reason is not None:\n        self.to_screen('[download] ' + reason)\n        return\n\n    self._num_downloads += 1\n\n    info_dict['_filename'] = filename = self.prepare_filename(info_dict)\n\n    # Forced printings\n    if self.params.get('forcetitle', False):\n        self.to_stdout(info_dict['fulltitle'])\n    if self.params.get('forceid', False):\n        self.to_stdout(info_dict['id'])\n    if self.params.get('forceurl', False):\n        if info_dict.get('requested_formats') is not None:\n            for f in info_dict['requested_formats']:\n                self.to_stdout(f['url'] + f.get('play_path', ''))\n        else:\n            # For RTMP URLs, also include the playpath\n            self.to_stdout(info_dict['url'] + info_dict.get('play_path', ''))\n    if self.params.get('forcethumbnail', False) and info_dict.get('thumbnail') is not None:\n        self.to_stdout(info_dict['thumbnail'])\n    if self.params.get('forcedescription', False) and info_dict.get('description') is not None:\n        self.to_stdout(info_dict['description'])\n    if self.params.get('forcefilename', False) and filename is not None:\n        self.to_stdout(filename)\n    if self.params.get('forceduration', False) and info_dict.get('duration') is not None:\n        self.to_stdout(formatSeconds(info_dict['duration']))\n    if self.params.get('forceformat', False):\n        self.to_stdout(info_dict['format'])\n    if self.params.get('forcejson', False):\n        self.to_stdout(json.dumps(info_dict))\n\n    # Do nothing else if in simulate mode\n    if self.params.get('simulate', False):\n        return\n\n    if filename is None:\n        return\n\n    def ensure_dir_exists(path):\n        try:\n            dn = os.path.dirname(path)\n            if dn and not os.path.exists(dn):\n                os.makedirs(dn)\n            return True\n        except (OSError, IOError) as err:\n            self.report_error('unable to create directory ' + error_to_compat_str(err))\n            return False\n\n    if not ensure_dir_exists(sanitize_path(encodeFilename(filename))):\n        return\n\n    if self.params.get('writedescription', False):\n        descfn = replace_extension(filename, 'description', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(descfn)):\n            self.to_screen('[info] Video description is already present')\n        elif info_dict.get('description') is None:\n            self.report_warning('There\\'s no description to write.')\n        else:\n            try:\n                self.to_screen('[info] Writing video description to: ' + descfn)\n                with io.open(encodeFilename(descfn), 'w', encoding='utf-8') as descfile:\n                    descfile.write(info_dict['description'])\n            except (OSError, IOError):\n                self.report_error('Cannot write description file ' + descfn)\n                return\n\n    if self.params.get('writeannotations', False):\n        annofn = replace_extension(filename, 'annotations.xml', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(annofn)):\n            self.to_screen('[info] Video annotations are already present')\n        else:\n            try:\n                self.to_screen('[info] Writing video annotations to: ' + annofn)\n                with io.open(encodeFilename(annofn), 'w', encoding='utf-8') as annofile:\n                    annofile.write(info_dict['annotations'])\n            except (KeyError, TypeError):\n                self.report_warning('There are no annotations to write.')\n            except (OSError, IOError):\n                self.report_error('Cannot write annotations file: ' + annofn)\n                return\n\n    subtitles_are_requested = any([self.params.get('writesubtitles', False),\n                                   self.params.get('writeautomaticsub')])\n\n    if subtitles_are_requested and info_dict.get('requested_subtitles'):\n        # subtitles download errors are already managed as troubles in relevant IE\n        # that way it will silently go on when used with unsupporting IE\n        subtitles = info_dict['requested_subtitles']\n        ie = self.get_info_extractor(info_dict['extractor_key'])\n        for sub_lang, sub_info in subtitles.items():\n            sub_format = sub_info['ext']\n            sub_filename = subtitles_filename(filename, sub_lang, sub_format)\n            if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(sub_filename)):\n                self.to_screen('[info] Video subtitle %s.%s is already present' % (sub_lang, sub_format))\n            else:\n                self.to_screen('[info] Writing video subtitles to: ' + sub_filename)\n                if sub_info.get('data') is not None:\n                    try:\n                        # Use newline='' to prevent conversion of newline characters\n                        # See https://github.com/rg3/youtube-dl/issues/10268\n                        with io.open(encodeFilename(sub_filename), 'w', encoding='utf-8', newline='') as subfile:\n                            subfile.write(sub_info['data'])\n                    except (OSError, IOError):\n                        self.report_error('Cannot write subtitles file ' + sub_filename)\n                        return\n                else:\n                    try:\n                        sub_data = ie._request_webpage(\n                            sub_info['url'], info_dict['id'], note=False).read()\n                        with io.open(encodeFilename(sub_filename), 'wb') as subfile:\n                            subfile.write(sub_data)\n                    except (ExtractorError, IOError, OSError, ValueError) as err:\n                        self.report_warning('Unable to download subtitle for \"%s\": %s' %\n                                            (sub_lang, error_to_compat_str(err)))\n                        continue\n\n    if self.params.get('writeinfojson', False):\n        infofn = replace_extension(filename, 'info.json', info_dict.get('ext'))\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(infofn)):\n            self.to_screen('[info] Video description metadata is already present')\n        else:\n            self.to_screen('[info] Writing video description metadata as JSON to: ' + infofn)\n            try:\n                write_json_file(self.filter_requested_info(info_dict), infofn)\n            except (OSError, IOError):\n                self.report_error('Cannot write metadata to JSON file ' + infofn)\n                return\n\n    self._write_thumbnails(info_dict, filename)\n\n    if not self.params.get('skip_download', False):\n        try:\n            def dl(name, info):\n                fd = get_suitable_downloader(info, self.params)(self, self.params)\n                for ph in self._progress_hooks:\n                    fd.add_progress_hook(ph)\n                if self.params.get('verbose'):\n                    self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n                return fd.download(name, info)\n\n            if info_dict.get('requested_formats') is not None:\n                downloaded = []\n                success = True\n                merger = FFmpegMergerPP(self)\n                if not merger.available:\n                    postprocessors = []\n                    self.report_warning('You have requested multiple '\n                                        'formats but ffmpeg or avconv are not installed.'\n                                        ' The formats won\\'t be merged.')\n                else:\n                    postprocessors = [merger]\n\n                def compatible_formats(formats):\n                    video, audio = formats\n                    # Check extension\n                    video_ext, audio_ext = video.get('ext'), audio.get('ext')\n                    if video_ext and audio_ext:\n                        COMPATIBLE_EXTS = (\n                            ('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'ismv', 'isma'),\n                            ('webm')\n                        )\n                        for exts in COMPATIBLE_EXTS:\n                            if video_ext in exts and audio_ext in exts:\n                                return True\n                    # TODO: Check acodec/vcodec\n                    return False\n\n                filename_real_ext = os.path.splitext(filename)[1][1:]\n                filename_wo_ext = (\n                    os.path.splitext(filename)[0]\n                    if filename_real_ext == info_dict['ext']\n                    else filename)\n                requested_formats = info_dict['requested_formats']\n                if self.params.get('merge_output_format') is None and not compatible_formats(requested_formats):\n                    info_dict['ext'] = 'mkv'\n                    self.report_warning(\n                        'Requested formats are incompatible for merge and will be merged into mkv.')\n                # Ensure filename always has a correct extension for successful merge\n                filename = '%s.%s' % (filename_wo_ext, info_dict['ext'])\n                if os.path.exists(encodeFilename(filename)):\n                    self.to_screen(\n                        '[download] %s has already been downloaded and '\n                        'merged' % filename)\n                else:\n                    for f in requested_formats:\n                        new_info = dict(info_dict)\n                        new_info.update(f)\n                        fname = prepend_extension(\n                            self.prepare_filename(new_info),\n                            'f%s' % f['format_id'], new_info['ext'])\n                        if not ensure_dir_exists(fname):\n                            return\n                        downloaded.append(fname)\n                        partial_success = dl(fname, new_info)\n                        success = success and partial_success\n                    info_dict['__postprocessors'] = postprocessors\n                    info_dict['__files_to_merge'] = downloaded\n            else:\n                # Just a single file\n                success = dl(filename, info_dict)\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            self.report_error('unable to download video data: %s' % error_to_compat_str(err))\n            return\n        except (OSError, IOError) as err:\n            raise UnavailableVideoError(err)\n        except (ContentTooShortError, ) as err:\n            self.report_error('content too short (expected %s bytes and served %s)' % (err.expected, err.downloaded))\n            return\n\n        if success and filename != '-':\n            # Fixup content\n            fixup_policy = self.params.get('fixup')\n            if fixup_policy is None:\n                fixup_policy = 'detect_or_warn'\n\n            INSTALL_FFMPEG_MESSAGE = 'Install ffmpeg or avconv to fix this automatically.'\n\n            stretched_ratio = info_dict.get('stretched_ratio')\n            if stretched_ratio is not None and stretched_ratio != 1:\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: Non-uniform pixel ratio (%s)' % (\n                        info_dict['id'], stretched_ratio))\n                elif fixup_policy == 'detect_or_warn':\n                    stretched_pp = FFmpegFixupStretchedPP(self)\n                    if stretched_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(stretched_pp)\n                    else:\n                        self.report_warning(\n                            '%s: Non-uniform pixel ratio (%s). %s'\n                            % (info_dict['id'], stretched_ratio, INSTALL_FFMPEG_MESSAGE))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n\n            if (info_dict.get('requested_formats') is None and\n                    info_dict.get('container') == 'm4a_dash'):\n                if fixup_policy == 'warn':\n                    self.report_warning(\n                        '%s: writing DASH m4a. '\n                        'Only some players support this container.'\n                        % info_dict['id'])\n                elif fixup_policy == 'detect_or_warn':\n                    fixup_pp = FFmpegFixupM4aPP(self)\n                    if fixup_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(fixup_pp)\n                    else:\n                        self.report_warning(\n                            '%s: writing DASH m4a. '\n                            'Only some players support this container. %s'\n                            % (info_dict['id'], INSTALL_FFMPEG_MESSAGE))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n\n            if (info_dict.get('protocol') == 'm3u8_native' or\n                    info_dict.get('protocol') == 'm3u8' and\n                    self.params.get('hls_prefer_native')):\n                if fixup_policy == 'warn':\n                    self.report_warning('%s: malformed AAC bitstream detected.' % (\n                        info_dict['id']))\n                elif fixup_policy == 'detect_or_warn':\n                    fixup_pp = FFmpegFixupM3u8PP(self)\n                    if fixup_pp.available:\n                        info_dict.setdefault('__postprocessors', [])\n                        info_dict['__postprocessors'].append(fixup_pp)\n                    else:\n                        self.report_warning(\n                            '%s: malformed AAC bitstream detected. %s'\n                            % (info_dict['id'], INSTALL_FFMPEG_MESSAGE))\n                else:\n                    assert fixup_policy in ('ignore', 'never')\n\n            try:\n                self.post_process(filename, info_dict)\n            except (PostProcessingError) as err:\n                self.report_error('postprocessing: %s' % str(err))\n                return\n            self.record_download_archive(info_dict)",
                "def download(self, url_list):\n    \"\"\"Download a given list of URLs.\"\"\"\n    outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n    if (len(url_list) > 1 and\n            outtmpl != '-' and\n            '%' not in outtmpl and\n            self.params.get('max_downloads') != 1):\n        raise SameFileError(outtmpl)\n\n    for url in url_list:\n        try:\n            # It also downloads the videos\n            res = self.extract_info(\n                url, force_generic_extractor=self.params.get('force_generic_extractor', False))\n        except UnavailableVideoError:\n            self.report_error('unable to download video')\n        except MaxDownloadsReached:\n            self.to_screen('[info] Maximum number of downloaded files reached.')\n            raise\n        else:\n            if self.params.get('dump_single_json', False):\n                self.to_stdout(json.dumps(res))\n\n    return self._download_retcode",
                "def download_with_info_file(self, info_filename):\n    with contextlib.closing(fileinput.FileInput(\n            [info_filename], mode='r',\n            openhook=fileinput.hook_encoded('utf-8'))) as f:\n        # FileInput doesn't have a read method, we can't call json.load\n        info = self.filter_requested_info(json.loads('\\n'.join(f)))\n    try:\n        self.process_ie_result(info, download=True)\n    except DownloadError:\n        webpage_url = info.get('webpage_url')\n        if webpage_url is not None:\n            self.report_warning('The info failed to download, trying with \"%s\"' % webpage_url)\n            return self.download([webpage_url])\n        else:\n            raise\n    return self._download_retcode",
                "@staticmethod\ndef filter_requested_info(info_dict):\n    return dict(\n        (k, v) for k, v in info_dict.items()\n        if k not in ['requested_formats', 'requested_subtitles'])",
                "def post_process(self, filename, ie_info):\n    \"\"\"Run all the postprocessors on the given file.\"\"\"\n    info = dict(ie_info)\n    info['filepath'] = filename\n    pps_chain = []\n    if ie_info.get('__postprocessors') is not None:\n        pps_chain.extend(ie_info['__postprocessors'])\n    pps_chain.extend(self._pps)\n    for pp in pps_chain:\n        files_to_delete = []\n        try:\n            files_to_delete, info = pp.run(info)\n        except PostProcessingError as e:\n            self.report_error(e.msg)\n        if files_to_delete and not self.params.get('keepvideo', False):\n            for old_filename in files_to_delete:\n                self.to_screen('Deleting original file %s (pass -k to keep)' % old_filename)\n                try:\n                    os.remove(encodeFilename(old_filename))\n                except (IOError, OSError):\n                    self.report_warning('Unable to remove downloaded original file')",
                "def _make_archive_id(self, info_dict):\n    # Future-proof against any change in case\n    # and backwards compatibility with prior versions\n    extractor = info_dict.get('extractor_key')\n    if extractor is None:\n        if 'id' in info_dict:\n            extractor = info_dict.get('ie_key')  # key in a playlist\n    if extractor is None:\n        return None  # Incomplete video information\n    return extractor.lower() + ' ' + info_dict['id']",
                "def in_download_archive(self, info_dict):\n    fn = self.params.get('download_archive')\n    if fn is None:\n        return False\n\n    vid_id = self._make_archive_id(info_dict)\n    if vid_id is None:\n        return False  # Incomplete video information\n\n    try:\n        with locked_file(fn, 'r', encoding='utf-8') as archive_file:\n            for line in archive_file:\n                if line.strip() == vid_id:\n                    return True\n    except IOError as ioe:\n        if ioe.errno != errno.ENOENT:\n            raise\n    return False",
                "def record_download_archive(self, info_dict):\n    fn = self.params.get('download_archive')\n    if fn is None:\n        return\n    vid_id = self._make_archive_id(info_dict)\n    assert vid_id\n    with locked_file(fn, 'a', encoding='utf-8') as archive_file:\n        archive_file.write(vid_id + '\\n')",
                "@staticmethod\ndef format_resolution(format, default='unknown'):\n    if format.get('vcodec') == 'none':\n        return 'audio only'\n    if format.get('resolution') is not None:\n        return format['resolution']\n    if format.get('height') is not None:\n        if format.get('width') is not None:\n            res = '%sx%s' % (format['width'], format['height'])\n        else:\n            res = '%sp' % format['height']\n    elif format.get('width') is not None:\n        res = '%dx?' % format['width']\n    else:\n        res = default\n    return res",
                "def _format_note(self, fdict):\n    res = ''\n    if fdict.get('ext') in ['f4f', 'f4m']:\n        res += '(unsupported) '\n    if fdict.get('language'):\n        if res:\n            res += ' '\n        res += '[%s] ' % fdict['language']\n    if fdict.get('format_note') is not None:\n        res += fdict['format_note'] + ' '\n    if fdict.get('tbr') is not None:\n        res += '%4dk ' % fdict['tbr']\n    if fdict.get('container') is not None:\n        if res:\n            res += ', '\n        res += '%s container' % fdict['container']\n    if (fdict.get('vcodec') is not None and\n            fdict.get('vcodec') != 'none'):\n        if res:\n            res += ', '\n        res += fdict['vcodec']\n        if fdict.get('vbr') is not None:\n            res += '@'\n    elif fdict.get('vbr') is not None and fdict.get('abr') is not None:\n        res += 'video@'\n    if fdict.get('vbr') is not None:\n        res += '%4dk' % fdict['vbr']\n    if fdict.get('fps') is not None:\n        if res:\n            res += ', '\n        res += '%sfps' % fdict['fps']\n    if fdict.get('acodec') is not None:\n        if res:\n            res += ', '\n        if fdict['acodec'] == 'none':\n            res += 'video only'\n        else:\n            res += '%-5s' % fdict['acodec']\n    elif fdict.get('abr') is not None:\n        if res:\n            res += ', '\n        res += 'audio'\n    if fdict.get('abr') is not None:\n        res += '@%3dk' % fdict['abr']\n    if fdict.get('asr') is not None:\n        res += ' (%5dHz)' % fdict['asr']\n    if fdict.get('filesize') is not None:\n        if res:\n            res += ', '\n        res += format_bytes(fdict['filesize'])\n    elif fdict.get('filesize_approx') is not None:\n        if res:\n            res += ', '\n        res += '~' + format_bytes(fdict['filesize_approx'])\n    return res",
                "def list_formats(self, info_dict):\n    formats = info_dict.get('formats', [info_dict])\n    table = [\n        [f['format_id'], f['ext'], self.format_resolution(f), self._format_note(f)]\n        for f in formats\n        if f.get('preference') is None or f['preference'] >= -1000]\n    if len(formats) > 1:\n        table[-1][-1] += (' ' if table[-1][-1] else '') + '(best)'\n\n    header_line = ['format code', 'extension', 'resolution', 'note']\n    self.to_screen(\n        '[info] Available formats for %s:\\n%s' %\n        (info_dict['id'], render_table(header_line, table)))",
                "def list_thumbnails(self, info_dict):\n    thumbnails = info_dict.get('thumbnails')\n    if not thumbnails:\n        self.to_screen('[info] No thumbnails present for %s' % info_dict['id'])\n        return\n\n    self.to_screen(\n        '[info] Thumbnails for %s:' % info_dict['id'])\n    self.to_screen(render_table(\n        ['ID', 'width', 'height', 'URL'],\n        [[t['id'], t.get('width', 'unknown'), t.get('height', 'unknown'), t['url']] for t in thumbnails]))",
                "def list_subtitles(self, video_id, subtitles, name='subtitles'):\n    if not subtitles:\n        self.to_screen('%s has no %s' % (video_id, name))\n        return\n    self.to_screen(\n        'Available %s for %s:' % (name, video_id))\n    self.to_screen(render_table(\n        ['Language', 'formats'],\n        [[lang, ', '.join(f['ext'] for f in reversed(formats))]\n            for lang, formats in subtitles.items()]))",
                "def urlopen(self, req):\n    \"\"\" Start an HTTP download \"\"\"\n    if isinstance(req, compat_basestring):\n        req = sanitized_Request(req)\n    return self._opener.open(req, timeout=self._socket_timeout)",
                "def print_debug_header(self):\n    if not self.params.get('verbose'):\n        return\n\n    if type('') is not compat_str:\n        # Python 2.6 on SLES11 SP1 (https://github.com/rg3/youtube-dl/issues/3326)\n        self.report_warning(\n            'Your Python is broken! Update to a newer and supported version')\n\n    stdout_encoding = getattr(\n        sys.stdout, 'encoding', 'missing (%s)' % type(sys.stdout).__name__)\n    encoding_str = (\n        '[debug] Encodings: locale %s, fs %s, out %s, pref %s\\n' % (\n            locale.getpreferredencoding(),\n            sys.getfilesystemencoding(),\n            stdout_encoding,\n            self.get_encoding()))\n    write_string(encoding_str, encoding=None)\n\n    self._write_string('[debug] youtube-dl version ' + __version__ + '\\n')\n    if _LAZY_LOADER:\n        self._write_string('[debug] Lazy loading extractors enabled' + '\\n')\n    try:\n        sp = subprocess.Popen(\n            ['git', 'rev-parse', '--short', 'HEAD'],\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            cwd=os.path.dirname(os.path.abspath(__file__)))\n        out, err = sp.communicate()\n        out = out.decode().strip()\n        if re.match('[0-9a-f]+', out):\n            self._write_string('[debug] Git HEAD: ' + out + '\\n')\n    except Exception:\n        try:\n            sys.exc_clear()\n        except Exception:\n            pass\n\n    def python_implementation():\n        impl_name = platform.python_implementation()\n        if impl_name == 'PyPy' and hasattr(sys, 'pypy_version_info'):\n            return impl_name + ' version %d.%d.%d' % sys.pypy_version_info[:3]\n        return impl_name\n\n    self._write_string('[debug] Python version %s (%s) - %s\\n' % (\n        platform.python_version(), python_implementation(),\n        platform_name()))\n\n    exe_versions = FFmpegPostProcessor.get_versions(self)\n    exe_versions['rtmpdump'] = rtmpdump_version()\n    exe_versions['phantomjs'] = PhantomJSwrapper._version()\n    exe_str = ', '.join(\n        '%s %s' % (exe, v)\n        for exe, v in sorted(exe_versions.items())\n        if v\n    )\n    if not exe_str:\n        exe_str = 'none'\n    self._write_string('[debug] exe versions: %s\\n' % exe_str)\n\n    proxy_map = {}\n    for handler in self._opener.handlers:\n        if hasattr(handler, 'proxies'):\n            proxy_map.update(handler.proxies)\n    self._write_string('[debug] Proxy map: ' + compat_str(proxy_map) + '\\n')\n\n    if self.params.get('call_home', False):\n        ipaddr = self.urlopen('https://yt-dl.org/ip').read().decode('utf-8')\n        self._write_string('[debug] Public IP address: %s\\n' % ipaddr)\n        latest_version = self.urlopen(\n            'https://yt-dl.org/latest/version').read().decode('utf-8')\n        if version_tuple(latest_version) > version_tuple(__version__):\n            self.report_warning(\n                'You are using an outdated version (newest version: %s)! '\n                'See https://yt-dl.org/update if you need help updating.' %\n                latest_version)",
                "def _setup_opener(self):\n    timeout_val = self.params.get('socket_timeout')\n    self._socket_timeout = 600 if timeout_val is None else float(timeout_val)\n\n    opts_cookiefile = self.params.get('cookiefile')\n    opts_proxy = self.params.get('proxy')\n\n    if opts_cookiefile is None:\n        self.cookiejar = compat_cookiejar.CookieJar()\n    else:\n        opts_cookiefile = expand_path(opts_cookiefile)\n        self.cookiejar = YoutubeDLCookieJar(opts_cookiefile)\n        if os.access(opts_cookiefile, os.R_OK):\n            self.cookiejar.load(ignore_discard=True, ignore_expires=True)\n\n    cookie_processor = YoutubeDLCookieProcessor(self.cookiejar)\n    if opts_proxy is not None:\n        if opts_proxy == '':\n            proxies = {}\n        else:\n            proxies = {'http': opts_proxy, 'https': opts_proxy}\n    else:\n        proxies = compat_urllib_request.getproxies()\n        # Set HTTPS proxy to HTTP one if given (https://github.com/rg3/youtube-dl/issues/805)\n        if 'http' in proxies and 'https' not in proxies:\n            proxies['https'] = proxies['http']\n    proxy_handler = PerRequestProxyHandler(proxies)\n\n    debuglevel = 1 if self.params.get('debug_printtraffic') else 0\n    https_handler = make_HTTPS_handler(self.params, debuglevel=debuglevel)\n    ydlh = YoutubeDLHandler(self.params, debuglevel=debuglevel)\n    data_handler = compat_urllib_request_DataHandler()\n\n    # When passing our own FileHandler instance, build_opener won't add the\n    # default FileHandler and allows us to disable the file protocol, which\n    # can be used for malicious purposes (see\n    # https://github.com/rg3/youtube-dl/issues/8227)\n    file_handler = compat_urllib_request.FileHandler()\n\n    def file_open(*args, **kwargs):\n        raise compat_urllib_error.URLError('file:// scheme is explicitly disabled in youtube-dl for security reasons')\n    file_handler.file_open = file_open\n\n    opener = compat_urllib_request.build_opener(\n        proxy_handler, https_handler, cookie_processor, ydlh, data_handler, file_handler)\n\n    # Delete the default user-agent header, which would otherwise apply in\n    # cases where our custom HTTP handler doesn't come into play\n    # (See https://github.com/rg3/youtube-dl/issues/1309 for details)\n    opener.addheaders = []\n    self._opener = opener",
                "def encode(self, s):\n    if isinstance(s, bytes):\n        return s  # Already encoded\n\n    try:\n        return s.encode(self.get_encoding())\n    except UnicodeEncodeError as err:\n        err.reason = err.reason + '. Check your system encoding configuration or use the --encoding option.'\n        raise",
                "def get_encoding(self):\n    encoding = self.params.get('encoding')\n    if encoding is None:\n        encoding = preferredencoding()\n    return encoding",
                "def _write_thumbnails(self, info_dict, filename):\n    if self.params.get('writethumbnail', False):\n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails:\n            thumbnails = [thumbnails[-1]]\n    elif self.params.get('write_all_thumbnails', False):\n        thumbnails = info_dict.get('thumbnails')\n    else:\n        return\n\n    if not thumbnails:\n        # No thumbnails present, so return immediately\n        return\n\n    for t in thumbnails:\n        thumb_ext = determine_ext(t['url'], 'jpg')\n        suffix = '_%s' % t['id'] if len(thumbnails) > 1 else ''\n        thumb_display_id = '%s ' % t['id'] if len(thumbnails) > 1 else ''\n        t['filename'] = thumb_filename = os.path.splitext(filename)[0] + suffix + '.' + thumb_ext\n\n        if self.params.get('nooverwrites', False) and os.path.exists(encodeFilename(thumb_filename)):\n            self.to_screen('[%s] %s: Thumbnail %sis already present' %\n                           (info_dict['extractor'], info_dict['id'], thumb_display_id))\n        else:\n            self.to_screen('[%s] %s: Downloading thumbnail %s...' %\n                           (info_dict['extractor'], info_dict['id'], thumb_display_id))\n            try:\n                uf = self.urlopen(t['url'])\n                with open(encodeFilename(thumb_filename), 'wb') as thumbf:\n                    shutil.copyfileobj(uf, thumbf)\n                self.to_screen('[%s] %s: Writing thumbnail %sto: %s' %\n                               (info_dict['extractor'], info_dict['id'], thumb_display_id, thumb_filename))\n            except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n                self.report_warning('Unable to download thumbnail \"%s\": %s' %\n                                    (t['url'], error_to_compat_str(err)))",
                "def check_deprecated(param, option, suggestion):\n    if self.params.get(param) is not None:\n        self.report_warning(\n            '%s is deprecated. Use %s instead.' % (option, suggestion))\n        return True\n    return False",
                "def _filter(f):\n    actual_value = f.get(m.group('key'))\n    if actual_value is None:\n        return m.group('none_inclusive')\n    return op(actual_value, comparison_value)",
                "def can_merge():\n    merger = FFmpegMergerPP(self)\n    return merger.available and merger.can_merge()",
                "def prefer_best():\n    if self.params.get('simulate', False):\n        return False\n    if not download:\n        return False\n    if self.params.get('outtmpl', DEFAULT_OUTTMPL) == '-':\n        return True\n    if info_dict.get('is_live'):\n        return True\n    if not can_merge():\n        return True\n    return False",
                "def syntax_error(note, start):\n    message = (\n        'Invalid format specification: '\n        '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n    return SyntaxError(message)",
                "def _parse_filter(tokens):\n    filter_parts = []\n    for type, string, start, _, _ in tokens:\n        if type == tokenize.OP and string == ']':\n            return ''.join(filter_parts)\n        else:\n            filter_parts.append(string)",
                "def _remove_unused_ops(tokens):\n    # Remove operators that we don't use and join them with the surrounding strings\n    # for example: 'mp4' '-' 'baseline' '-' '16x9' is converted to 'mp4-baseline-16x9'\n    ALLOWED_OPS = ('/', '+', ',', '(', ')')\n    last_string, last_start, last_end, last_line = None, None, None, None\n    for type, string, start, end, line in tokens:\n        if type == tokenize.OP and string == '[':\n            if last_string:\n                yield tokenize.NAME, last_string, last_start, last_end, last_line\n                last_string = None\n            yield type, string, start, end, line\n            # everything inside brackets will be handled by _parse_filter\n            for type, string, start, end, line in tokens:\n                yield type, string, start, end, line\n                if type == tokenize.OP and string == ']':\n                    break\n        elif type == tokenize.OP and string in ALLOWED_OPS:\n            if last_string:\n                yield tokenize.NAME, last_string, last_start, last_end, last_line\n                last_string = None\n            yield type, string, start, end, line\n        elif type in [tokenize.NAME, tokenize.NUMBER, tokenize.OP]:\n            if not last_string:\n                last_string = string\n                last_start = start\n                last_end = end\n            else:\n                last_string += string\n    if last_string:\n        yield tokenize.NAME, last_string, last_start, last_end, last_line",
                "def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n    selectors = []\n    current_selector = None\n    for type, string, start, _, _ in tokens:\n        # ENCODING is only defined in python 3.x\n        if type == getattr(tokenize, 'ENCODING', None):\n            continue\n        elif type in [tokenize.NAME, tokenize.NUMBER]:\n            current_selector = FormatSelector(SINGLE, string, [])\n        elif type == tokenize.OP:\n            if string == ')':\n                if not inside_group:\n                    # ')' will be handled by the parentheses group\n                    tokens.restore_last_token()\n                break\n            elif inside_merge and string in ['/', ',']:\n                tokens.restore_last_token()\n                break\n            elif inside_choice and string == ',':\n                tokens.restore_last_token()\n                break\n            elif string == ',':\n                if not current_selector:\n                    raise syntax_error('\",\" must follow a format selector', start)\n                selectors.append(current_selector)\n                current_selector = None\n            elif string == '/':\n                if not current_selector:\n                    raise syntax_error('\"/\" must follow a format selector', start)\n                first_choice = current_selector\n                second_choice = _parse_format_selection(tokens, inside_choice=True)\n                current_selector = FormatSelector(PICKFIRST, (first_choice, second_choice), [])\n            elif string == '[':\n                if not current_selector:\n                    current_selector = FormatSelector(SINGLE, 'best', [])\n                format_filter = _parse_filter(tokens)\n                current_selector.filters.append(format_filter)\n            elif string == '(':\n                if current_selector:\n                    raise syntax_error('Unexpected \"(\"', start)\n                group = _parse_format_selection(tokens, inside_group=True)\n                current_selector = FormatSelector(GROUP, group, [])\n            elif string == '+':\n                video_selector = current_selector\n                audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                if not video_selector or not audio_selector:\n                    raise syntax_error('\"+\" must be between two format selectors', start)\n                current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n            else:\n                raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n        elif type == tokenize.ENDMARKER:\n            break\n    if current_selector:\n        selectors.append(current_selector)\n    return selectors",
                "def _build_selector_function(selector):\n    if isinstance(selector, list):\n        fs = [_build_selector_function(s) for s in selector]\n\n        def selector_function(ctx):\n            for f in fs:\n                for format in f(ctx):\n                    yield format\n        return selector_function\n    elif selector.type == GROUP:\n        selector_function = _build_selector_function(selector.selector)\n    elif selector.type == PICKFIRST:\n        fs = [_build_selector_function(s) for s in selector.selector]\n\n        def selector_function(ctx):\n            for f in fs:\n                picked_formats = list(f(ctx))\n                if picked_formats:\n                    return picked_formats\n            return []\n    elif selector.type == SINGLE:\n        format_spec = selector.selector\n\n        def selector_function(ctx):\n            formats = list(ctx['formats'])\n            if not formats:\n                return\n            if format_spec == 'all':\n                for f in formats:\n                    yield f\n            elif format_spec in ['best', 'worst', None]:\n                format_idx = 0 if format_spec == 'worst' else -1\n                audiovideo_formats = [\n                    f for f in formats\n                    if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                if audiovideo_formats:\n                    yield audiovideo_formats[format_idx]\n                # for extractors with incomplete formats (audio only (soundcloud)\n                # or video only (imgur)) we will fallback to best/worst\n                # {video,audio}-only format\n                elif ctx['incomplete_formats']:\n                    yield formats[format_idx]\n            elif format_spec == 'bestaudio':\n                audio_formats = [\n                    f for f in formats\n                    if f.get('vcodec') == 'none']\n                if audio_formats:\n                    yield audio_formats[-1]\n            elif format_spec == 'worstaudio':\n                audio_formats = [\n                    f for f in formats\n                    if f.get('vcodec') == 'none']\n                if audio_formats:\n                    yield audio_formats[0]\n            elif format_spec == 'bestvideo':\n                video_formats = [\n                    f for f in formats\n                    if f.get('acodec') == 'none']\n                if video_formats:\n                    yield video_formats[-1]\n            elif format_spec == 'worstvideo':\n                video_formats = [\n                    f for f in formats\n                    if f.get('acodec') == 'none']\n                if video_formats:\n                    yield video_formats[0]\n            else:\n                extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n                if format_spec in extensions:\n                    filter_f = lambda f: f['ext'] == format_spec\n                else:\n                    filter_f = lambda f: f['format_id'] == format_spec\n                matches = list(filter(filter_f, formats))\n                if matches:\n                    yield matches[-1]\n    elif selector.type == MERGE:\n        def _merge(formats_info):\n            format_1, format_2 = [f['format_id'] for f in formats_info]\n            # The first format must contain the video and the\n            # second the audio\n            if formats_info[0].get('vcodec') == 'none':\n                self.report_error('The first format must '\n                                  'contain the video, try using '\n                                  '\"-f %s+%s\"' % (format_2, format_1))\n                return\n            # Formats must be opposite (video+audio)\n            if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n                self.report_error(\n                    'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n                    % (format_1, format_2))\n                return\n            output_ext = (\n                formats_info[0]['ext']\n                if self.params.get('merge_output_format') is None\n                else self.params['merge_output_format'])\n            return {\n                'requested_formats': formats_info,\n                'format': '%s+%s' % (formats_info[0].get('format'),\n                                     formats_info[1].get('format')),\n                'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                        formats_info[1].get('format_id')),\n                'width': formats_info[0].get('width'),\n                'height': formats_info[0].get('height'),\n                'resolution': formats_info[0].get('resolution'),\n                'fps': formats_info[0].get('fps'),\n                'vcodec': formats_info[0].get('vcodec'),\n                'vbr': formats_info[0].get('vbr'),\n                'stretched_ratio': formats_info[0].get('stretched_ratio'),\n                'acodec': formats_info[1].get('acodec'),\n                'abr': formats_info[1].get('abr'),\n                'ext': output_ext,\n            }\n        video_selector, audio_selector = map(_build_selector_function, selector.selector)\n\n        def selector_function(ctx):\n            for pair in itertools.product(\n                    video_selector(copy.deepcopy(ctx)), audio_selector(copy.deepcopy(ctx))):\n                yield _merge(pair)\n\n    filters = [self._build_format_filter(f) for f in selector.filters]\n\n    def final_selector(ctx):\n        ctx_copy = copy.deepcopy(ctx)\n        for _filter in filters:\n            ctx_copy['formats'] = list(filter(_filter, ctx_copy['formats']))\n        return selector_function(ctx_copy)\n    return final_selector",
                "def report_force_conversion(field, field_not, conversion):\n    self.report_warning(\n        '\"%s\" field is not %s - forcing %s conversion, there is an error in extractor'\n        % (field, field_not, conversion))",
                "def sanitize_string_field(info, string_field):\n    field = info.get(string_field)\n    if field is None or isinstance(field, compat_str):\n        return\n    report_force_conversion(string_field, 'a string', 'string')\n    info[string_field] = compat_str(field)",
                "def sanitize_numeric_fields(info):\n    for numeric_field in self._NUMERIC_FIELDS:\n        field = info.get(numeric_field)\n        if field is None or isinstance(field, compat_numeric_types):\n            continue\n        report_force_conversion(numeric_field, 'numeric', 'int')\n        info[numeric_field] = int_or_none(field)",
                "def is_wellformed(f):\n    url = f.get('url')\n    if not url:\n        self.report_warning(\n            '\"url\" field is missing or empty - skipping format, '\n            'there is an error in extractor')\n        return False\n    if isinstance(url, bytes):\n        sanitize_string_field(f, 'url')\n    return True",
                "def ensure_dir_exists(path):\n    try:\n        dn = os.path.dirname(path)\n        if dn and not os.path.exists(dn):\n            os.makedirs(dn)\n        return True\n    except (OSError, IOError) as err:\n        self.report_error('unable to create directory ' + error_to_compat_str(err))\n        return False",
                "def python_implementation():\n    impl_name = platform.python_implementation()\n    if impl_name == 'PyPy' and hasattr(sys, 'pypy_version_info'):\n        return impl_name + ' version %d.%d.%d' % sys.pypy_version_info[:3]\n    return impl_name",
                "def file_open(*args, **kwargs):\n    raise compat_urllib_error.URLError('file:// scheme is explicitly disabled in youtube-dl for security reasons')",
                "def final_selector(ctx):\n    ctx_copy = copy.deepcopy(ctx)\n    for _filter in filters:\n        ctx_copy['formats'] = list(filter(_filter, ctx_copy['formats']))\n    return selector_function(ctx_copy)",
                "def __init__(self, tokens):\n    self.tokens = tokens\n    self.counter = 0",
                "def __iter__(self):\n    return self",
                "def __next__(self):\n    if self.counter >= len(self.tokens):\n        raise StopIteration()\n    value = self.tokens[self.counter]\n    self.counter += 1\n    return value",
                "def restore_last_token(self):\n    self.counter -= 1",
                "def selector_function(ctx):\n    for f in fs:\n        for format in f(ctx):\n            yield format",
                "def dl(name, info):\n    fd = get_suitable_downloader(info, self.params)(self, self.params)\n    for ph in self._progress_hooks:\n        fd.add_progress_hook(ph)\n    if self.params.get('verbose'):\n        self.to_stdout('[debug] Invoking downloader on %r' % info.get('url'))\n    return fd.download(name, info)",
                "def compatible_formats(formats):\n    video, audio = formats\n    # Check extension\n    video_ext, audio_ext = video.get('ext'), audio.get('ext')\n    if video_ext and audio_ext:\n        COMPATIBLE_EXTS = (\n            ('mp3', 'mp4', 'm4a', 'm4p', 'm4b', 'm4r', 'm4v', 'ismv', 'isma'),\n            ('webm')\n        )\n        for exts in COMPATIBLE_EXTS:\n            if video_ext in exts and audio_ext in exts:\n                return True\n    # TODO: Check acodec/vcodec\n    return False",
                "def make_playlistitems_entries(list_ie_entries):\n    num_entries = len(list_ie_entries)\n    return [\n        list_ie_entries[i - 1] for i in playlistitems\n        if -num_entries <= i - 1 < num_entries]",
                "def report_download(num_entries):\n    self.to_screen(\n        '[%s] playlist %s: Downloading %d videos' %\n        (ie_result['extractor'], playlist, num_entries))",
                "def selector_function(ctx):\n    for f in fs:\n        picked_formats = list(f(ctx))\n        if picked_formats:\n            return picked_formats\n    return []",
                "def iter_playlistitems(format):\n    for string_segment in format.split(','):\n        if '-' in string_segment:\n            start, end = string_segment.split('-')\n            for item in range(int(start), int(end) + 1):\n                yield int(item)\n        else:\n            yield int(string_segment)",
                "def _fixup(r):\n    self.add_extra_info(\n        r,\n        {\n            'extractor': ie_result['extractor'],\n            'webpage_url': ie_result['webpage_url'],\n            'webpage_url_basename': url_basename(ie_result['webpage_url']),\n            'extractor_key': ie_result['extractor_key'],\n        }\n    )\n    return r",
                "def selector_function(ctx):\n    formats = list(ctx['formats'])\n    if not formats:\n        return\n    if format_spec == 'all':\n        for f in formats:\n            yield f\n    elif format_spec in ['best', 'worst', None]:\n        format_idx = 0 if format_spec == 'worst' else -1\n        audiovideo_formats = [\n            f for f in formats\n            if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n        if audiovideo_formats:\n            yield audiovideo_formats[format_idx]\n        # for extractors with incomplete formats (audio only (soundcloud)\n        # or video only (imgur)) we will fallback to best/worst\n        # {video,audio}-only format\n        elif ctx['incomplete_formats']:\n            yield formats[format_idx]\n    elif format_spec == 'bestaudio':\n        audio_formats = [\n            f for f in formats\n            if f.get('vcodec') == 'none']\n        if audio_formats:\n            yield audio_formats[-1]\n    elif format_spec == 'worstaudio':\n        audio_formats = [\n            f for f in formats\n            if f.get('vcodec') == 'none']\n        if audio_formats:\n            yield audio_formats[0]\n    elif format_spec == 'bestvideo':\n        video_formats = [\n            f for f in formats\n            if f.get('acodec') == 'none']\n        if video_formats:\n            yield video_formats[-1]\n    elif format_spec == 'worstvideo':\n        video_formats = [\n            f for f in formats\n            if f.get('acodec') == 'none']\n        if video_formats:\n            yield video_formats[0]\n    else:\n        extensions = ['mp4', 'flv', 'webm', '3gp', 'm4a', 'mp3', 'ogg', 'aac', 'wav']\n        if format_spec in extensions:\n            filter_f = lambda f: f['ext'] == format_spec\n        else:\n            filter_f = lambda f: f['format_id'] == format_spec\n        matches = list(filter(filter_f, formats))\n        if matches:\n            yield matches[-1]",
                "def _merge(formats_info):\n    format_1, format_2 = [f['format_id'] for f in formats_info]\n    # The first format must contain the video and the\n    # second the audio\n    if formats_info[0].get('vcodec') == 'none':\n        self.report_error('The first format must '\n                          'contain the video, try using '\n                          '\"-f %s+%s\"' % (format_2, format_1))\n        return\n    # Formats must be opposite (video+audio)\n    if formats_info[0].get('acodec') == 'none' and formats_info[1].get('acodec') == 'none':\n        self.report_error(\n            'Both formats %s and %s are video-only, you must specify \"-f video+audio\"'\n            % (format_1, format_2))\n        return\n    output_ext = (\n        formats_info[0]['ext']\n        if self.params.get('merge_output_format') is None\n        else self.params['merge_output_format'])\n    return {\n        'requested_formats': formats_info,\n        'format': '%s+%s' % (formats_info[0].get('format'),\n                             formats_info[1].get('format')),\n        'format_id': '%s+%s' % (formats_info[0].get('format_id'),\n                                formats_info[1].get('format_id')),\n        'width': formats_info[0].get('width'),\n        'height': formats_info[0].get('height'),\n        'resolution': formats_info[0].get('resolution'),\n        'fps': formats_info[0].get('fps'),\n        'vcodec': formats_info[0].get('vcodec'),\n        'vbr': formats_info[0].get('vbr'),\n        'stretched_ratio': formats_info[0].get('stretched_ratio'),\n        'acodec': formats_info[1].get('acodec'),\n        'abr': formats_info[1].get('abr'),\n        'ext': output_ext,\n    }",
                "def selector_function(ctx):\n    for pair in itertools.product(\n            video_selector(copy.deepcopy(ctx)), audio_selector(copy.deepcopy(ctx))):\n        yield _merge(pair)"
            ],
            "inscope_function_signatures": [
                "__init__(self, params=None, auto_init=True)",
                "warn_if_short_id(self, argv)",
                "add_info_extractor(self, ie)",
                "get_info_extractor(self, ie_key)",
                "add_default_info_extractors(self)",
                "add_post_processor(self, pp)",
                "add_progress_hook(self, ph)",
                "_bidi_workaround(self, message)",
                "to_screen(self, message, skip_eol=False)",
                "_write_string(self, s, out=None)",
                "to_stdout(self, message, skip_eol=False, check_quiet=False)",
                "to_stderr(self, message)",
                "to_console_title(self, message)",
                "save_console_title(self)",
                "restore_console_title(self)",
                "__enter__(self)",
                "__exit__(self, *args)",
                "trouble(self, message=None, tb=None)",
                "report_warning(self, message)",
                "report_error(self, message, tb=None)",
                "report_file_already_downloaded(self, file_name)",
                "prepare_filename(self, info_dict)",
                "_match_entry(self, info_dict, incomplete)",
                "add_extra_info(info_dict, extra_info)",
                "extract_info(self, url, download=True, ie_key=None, extra_info={}, process=True, force_generic_extractor=False)",
                "add_default_extra_info(self, ie_result, ie, url)",
                "process_ie_result(self, ie_result, download=True, extra_info={})",
                "_build_format_filter(self, filter_spec)",
                "_default_format_spec(self, info_dict, download=True)",
                "build_format_selector(self, format_spec)",
                "_calc_headers(self, info_dict)",
                "_calc_cookies(self, info_dict)",
                "process_video_result(self, info_dict, download=True)",
                "process_subtitles(self, video_id, normal_subtitles, automatic_captions)",
                "process_info(self, info_dict)",
                "download(self, url_list)",
                "download_with_info_file(self, info_filename)",
                "filter_requested_info(info_dict)",
                "post_process(self, filename, ie_info)",
                "_make_archive_id(self, info_dict)",
                "in_download_archive(self, info_dict)",
                "record_download_archive(self, info_dict)",
                "format_resolution(format, default='unknown')",
                "_format_note(self, fdict)",
                "list_formats(self, info_dict)",
                "list_thumbnails(self, info_dict)",
                "list_subtitles(self, video_id, subtitles, name='subtitles')",
                "urlopen(self, req)",
                "print_debug_header(self)",
                "_setup_opener(self)",
                "encode(self, s)",
                "get_encoding(self)",
                "_write_thumbnails(self, info_dict, filename)",
                "check_deprecated(param, option, suggestion)",
                "_filter(f)",
                "can_merge()",
                "prefer_best()",
                "syntax_error(note, start)",
                "_parse_filter(tokens)",
                "_remove_unused_ops(tokens)",
                "_parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False)",
                "_build_selector_function(selector)",
                "report_force_conversion(field, field_not, conversion)",
                "sanitize_string_field(info, string_field)",
                "sanitize_numeric_fields(info)",
                "is_wellformed(f)",
                "ensure_dir_exists(path)",
                "python_implementation()",
                "file_open(*args, **kwargs)",
                "final_selector(ctx)",
                "__init__(self, tokens)",
                "__iter__(self)",
                "__next__(self)",
                "restore_last_token(self)",
                "selector_function(ctx)",
                "dl(name, info)",
                "compatible_formats(formats)",
                "make_playlistitems_entries(list_ie_entries)",
                "report_download(num_entries)",
                "selector_function(ctx)",
                "iter_playlistitems(format)",
                "_fixup(r)",
                "selector_function(ctx)",
                "_merge(formats_info)",
                "selector_function(ctx)"
            ],
            "variables_in_file": {
                "compat_os_name": [
                    550,
                    616,
                    110,
                    528,
                    604,
                    541
                ],
                "object": [
                    1361,
                    114
                ],
                "_NUMERIC_FIELDS": [
                    321
                ],
                "set": [
                    321
                ],
                "params": [
                    355,
                    332,
                    402,
                    341,
                    342,
                    373,
                    410,
                    349
                ],
                "_ies": [
                    333
                ],
                "_pps": [
                    334
                ],
                "_download_retcode": [
                    335
                ],
                "_num_downloads": [
                    336
                ],
                "_screen_file": [
                    337
                ],
                "self._ies": [
                    451,
                    781,
                    343
                ],
                "self": [
                    2053,
                    2054,
                    2056,
                    2060,
                    2074,
                    2078,
                    2093,
                    2096,
                    2177,
                    2184,
                    2191,
                    2194,
                    2196,
                    2202,
                    2204,
                    2206,
                    2215,
                    2218,
                    2223,
                    2233,
                    2236,
                    2238,
                    2247,
                    2260,
                    2264,
                    2274,
                    2277,
                    2280,
                    2282,
                    2283,
                    2284,
                    2285,
                    2288,
                    2294,
                    2295,
                    2297,
                    2298,
                    2301,
                    2304,
                    2306,
                    2308,
                    2321,
                    2322,
                    2323,
                    2343,
                    2350,
                    2356,
                    2362,
                    2366,
                    2381,
                    2382,
                    2385,
                    2388,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    2391,
                    2394,
                    355,
                    356,
                    359,
                    360,
                    366,
                    367,
                    385,
                    387,
                    391,
                    393,
                    396,
                    404,
                    408,
                    411,
                    415,
                    418,
                    419,
                    421,
                    425,
                    426,
                    428,
                    429,
                    444,
                    451,
                    453,
                    454,
                    462,
                    465,
                    473,
                    477,
                    478,
                    482,
                    485,
                    488,
                    491,
                    492,
                    493,
                    499,
                    502,
                    506,
                    507,
                    508,
                    509,
                    513,
                    518,
                    519,
                    521,
                    523,
                    526,
                    534,
                    537,
                    539,
                    543,
                    546,
                    548,
                    552,
                    555,
                    556,
                    559,
                    561,
                    562,
                    574,
                    575,
                    585,
                    586,
                    592,
                    599,
                    600,
                    602,
                    604,
                    609,
                    616,
                    621,
                    626,
                    628,
                    636,
                    639,
                    650,
                    657,
                    677,
                    716,
                    726,
                    730,
                    736,
                    741,
                    744,
                    747,
                    749,
                    753,
                    779,
                    781,
                    787,
                    789,
                    802,
                    804,
                    813,
                    816,
                    821,
                    822,
                    827,
                    830,
                    849,
                    852,
                    853,
                    857,
                    858,
                    862,
                    868,
                    895,
                    900,
                    904,
                    905,
                    910,
                    932,
                    943,
                    968,
                    971,
                    977,
                    996,
                    998,
                    1001,
                    1006,
                    1009,
                    1014,
                    1025,
                    1098,
                    1102,
                    1106,
                    1308,
                    1314,
                    1320,
                    1321,
                    1346,
                    1363,
                    1364,
                    1367,
                    1370,
                    1372,
                    1373,
                    1379,
                    1391,
                    1404,
                    1416,
                    1428,
                    1461,
                    1462,
                    1502,
                    1504,
                    1506,
                    1509,
                    1525,
                    1563,
                    1577,
                    1590,
                    1591,
                    1594,
                    1596,
                    1597,
                    1598,
                    1600,
                    1635,
                    1639,
                    1647,
                    1649,
                    1654,
                    1655,
                    1659,
                    1662,
                    1663,
                    1669,
                    1675,
                    1687,
                    1698,
                    1700,
                    1710,
                    1712,
                    1715,
                    1717,
                    1720,
                    1721,
                    1722,
                    1723,
                    1724,
                    1727,
                    1730,
                    1731,
                    1732,
                    1733,
                    1734,
                    1735,
                    1736,
                    1737,
                    1738,
                    1739,
                    1740,
                    1741,
                    1742,
                    1745,
                    1758,
                    1764,
                    1766,
                    1767,
                    1769,
                    1772,
                    1776,
                    1779,
                    1781,
                    1782,
                    1785,
                    1789,
                    1791,
                    1794,
                    1795,
                    1801,
                    1805,
                    1806,
                    1808,
                    1816,
                    1825,
                    1829,
                    1831,
                    1832,
                    1834,
                    1836,
                    1838,
                    1841,
                    1843,
                    1846,
                    1847,
                    1849,
                    1850,
                    1856,
                    1859,
                    1886,
                    1888,
                    1893,
                    1901,
                    1914,
                    1919,
                    1924,
                    1933,
                    1936,
                    1941,
                    1950,
                    1955,
                    1960,
                    1969,
                    1971,
                    1974,
                    1979,
                    1986,
                    1988,
                    1990,
                    1994,
                    1998,
                    2004,
                    2005,
                    2007,
                    2009,
                    2012,
                    2013,
                    2015,
                    2022,
                    2024,
                    2028,
                    2029,
                    2032,
                    2047
                ],
                "self._ies_instances": [
                    344,
                    453,
                    462
                ],
                "self._pps": [
                    345,
                    477,
                    2047
                ],
                "self._progress_hooks": [
                    346,
                    482,
                    1847
                ],
                "self._download_retcode": [
                    592,
                    2032,
                    347,
                    2015
                ],
                "self._num_downloads": [
                    1700,
                    1715,
                    348,
                    639
                ],
                "self._screen_file": [
                    513,
                    552,
                    534,
                    349,
                    543
                ],
                "sys.stdout": [
                    2227,
                    349
                ],
                "sys": [
                    577,
                    579,
                    580,
                    712,
                    2250,
                    587,
                    588,
                    590,
                    400,
                    401,
                    2256,
                    2227,
                    2257,
                    2231,
                    349,
                    350
                ],
                "sys.stderr": [
                    349,
                    350
                ],
                "params.get": [
                    373,
                    410,
                    349,
                    402
                ],
                "self._err_file": [
                    385,
                    616,
                    523,
                    604,
                    350
                ],
                "self.params": [
                    518,
                    519,
                    2054,
                    526,
                    537,
                    2074,
                    539,
                    546,
                    548,
                    2093,
                    561,
                    1590,
                    1594,
                    1597,
                    575,
                    586,
                    1102,
                    1106,
                    599,
                    600,
                    602,
                    604,
                    616,
                    1647,
                    1649,
                    1654,
                    1655,
                    1659,
                    636,
                    1662,
                    1663,
                    639,
                    1669,
                    650,
                    657,
                    1698,
                    2218,
                    1720,
                    1722,
                    1724,
                    1731,
                    1733,
                    1735,
                    1737,
                    1739,
                    1741,
                    1745,
                    726,
                    730,
                    736,
                    1764,
                    741,
                    1766,
                    744,
                    2282,
                    747,
                    753,
                    1779,
                    1781,
                    2294,
                    2297,
                    2298,
                    1794,
                    1795,
                    1805,
                    2321,
                    2322,
                    2323,
                    1829,
                    1831,
                    1320,
                    1321,
                    1843,
                    2356,
                    821,
                    1846,
                    1849,
                    2362,
                    2366,
                    2381,
                    849,
                    852,
                    1886,
                    351,
                    355,
                    359,
                    366,
                    367,
                    1924,
                    904,
                    905,
                    910,
                    408,
                    421,
                    428,
                    1969,
                    1461,
                    968,
                    1994,
                    971,
                    1998,
                    2005,
                    2012,
                    1502,
                    502,
                    506,
                    507,
                    508
                ],
                "self.params.update": [
                    355
                ],
                "self.cache": [
                    356
                ],
                "Cache": [
                    356
                ],
                "self.params.get": [
                    518,
                    2054,
                    526,
                    537,
                    2074,
                    539,
                    546,
                    548,
                    2093,
                    561,
                    1590,
                    1594,
                    1597,
                    575,
                    586,
                    1102,
                    1106,
                    599,
                    602,
                    604,
                    616,
                    1647,
                    1649,
                    1654,
                    1655,
                    1659,
                    636,
                    1662,
                    1663,
                    639,
                    1669,
                    650,
                    657,
                    1698,
                    2218,
                    1720,
                    1722,
                    1724,
                    1731,
                    1733,
                    1735,
                    1737,
                    1739,
                    1741,
                    1745,
                    726,
                    730,
                    736,
                    1764,
                    741,
                    1766,
                    744,
                    2282,
                    747,
                    753,
                    1779,
                    1781,
                    2294,
                    2297,
                    2298,
                    1794,
                    1795,
                    1805,
                    2321,
                    1829,
                    1831,
                    1320,
                    1843,
                    2356,
                    821,
                    1849,
                    2362,
                    2366,
                    2381,
                    849,
                    852,
                    1886,
                    359,
                    366,
                    1924,
                    904,
                    905,
                    910,
                    421,
                    428,
                    1969,
                    1461,
                    968,
                    1994,
                    971,
                    1998,
                    2005,
                    2012,
                    1502,
                    502,
                    506,
                    508
                ],
                "param": [
                    359
                ],
                "self.report_warning": [
                    1416,
                    1675,
                    396,
                    1933,
                    2060,
                    404,
                    789,
                    1941,
                    1687,
                    411,
                    1950,
                    1825,
                    1960,
                    2223,
                    1971,
                    1979,
                    444,
                    1859,
                    2394,
                    1888,
                    360,
                    1769,
                    2028,
                    2288,
                    1009,
                    1525,
                    1789
                ],
                "option": [
                    361
                ],
                "suggestion": [
                    361
                ],
                "check_deprecated": [
                    369,
                    370,
                    371,
                    365
                ],
                "master": [
                    376,
                    393
                ],
                "slave": [
                    376,
                    384
                ],
                "pty.openpty": [
                    376
                ],
                "pty": [
                    376
                ],
                "width": [
                    377,
                    378,
                    381
                ],
                "columns": [
                    377
                ],
                "compat_get_terminal_size": [
                    377
                ],
                "width_args": [
                    392,
                    379,
                    388,
                    381
                ],
                "str": [
                    1988,
                    716,
                    381,
                    662
                ],
                "sp_kwargs": [
                    392,
                    388,
                    382
                ],
                "dict": [
                    1637,
                    423,
                    1898,
                    652,
                    654,
                    878,
                    2036,
                    633,
                    2042,
                    382
                ],
                "subprocess.PIPE": [
                    2242,
                    383
                ],
                "subprocess": [
                    2240,
                    2242,
                    387,
                    391,
                    383
                ],
                "self._output_process": [
                    387,
                    491,
                    492,
                    391
                ],
                "subprocess.Popen": [
                    2240,
                    387,
                    391
                ],
                "OSError": [
                    1824,
                    390,
                    1480,
                    394,
                    2059,
                    1837,
                    1775,
                    1815,
                    1916,
                    1757,
                    1790
                ],
                "self._output_channel": [
                    393,
                    493
                ],
                "os.fdopen": [
                    393
                ],
                "os": [
                    2305,
                    393,
                    2058,
                    1805,
                    533,
                    541,
                    550,
                    1831,
                    2243,
                    2379,
                    2381,
                    1880,
                    1753,
                    1882,
                    1754,
                    1755,
                    1892,
                    1766,
                    1781
                ],
                "ose.errno": [
                    395
                ],
                "ose": [
                    395
                ],
                "errno.ENOENT": [
                    2088,
                    395
                ],
                "errno": [
                    2088,
                    395
                ],
                "sys.platform": [
                    400,
                    712
                ],
                "sys.getfilesystemencoding": [
                    401,
                    2231
                ],
                "isinstance": [
                    452,
                    517,
                    2213,
                    936,
                    489,
                    2346,
                    652,
                    1228,
                    654,
                    1422,
                    946,
                    1430,
                    1529,
                    410,
                    796
                ],
                "bytes": [
                    1529,
                    410,
                    2346
                ],
                "self._setup_opener": [
                    415
                ],
                "auto_init": [
                    417
                ],
                "self.print_debug_header": [
                    418
                ],
                "self.add_default_info_extractors": [
                    419
                ],
                "pp_def_raw": [
                    421,
                    422,
                    423
                ],
                "pp_class": [
                    425,
                    422
                ],
                "get_postprocessor": [
                    422
                ],
                "pp_def": [
                    424,
                    425,
                    423
                ],
                "pp": [
                    2048,
                    2051,
                    425,
                    426,
                    477,
                    478
                ],
                "compat_kwargs": [
                    425
                ],
                "self.add_post_processor": [
                    426
                ],
                "ph": [
                    482,
                    428,
                    429,
                    1847,
                    1848
                ],
                "self.add_progress_hook": [
                    429
                ],
                "register_socks_protocols": [
                    431
                ],
                "idxs": [
                    441,
                    442,
                    435,
                    438
                ],
                "i": [
                    928,
                    929,
                    1539,
                    1544,
                    1454,
                    976,
                    977,
                    1459,
                    436,
                    1556,
                    1557,
                    1559,
                    441,
                    442,
                    989
                ],
                "a": [
                    441,
                    436,
                    437
                ],
                "enumerate": [
                    1539,
                    1454,
                    976,
                    436,
                    1556,
                    1559,
                    441
                ],
                "argv": [
                    441,
                    442,
                    436
                ],
                "re.match": [
                    437,
                    2246
                ],
                "re": [
                    732,
                    2246,
                    1547,
                    1070,
                    1043,
                    692,
                    437,
                    1075,
                    728,
                    1048,
                    666,
                    668
                ],
                "correct_argv": [
                    447,
                    439
                ],
                "args_to_str": [
                    447
                ],
                "self._ies.append": [
                    451
                ],
                "ie": [
                    1801,
                    783,
                    784,
                    787,
                    788,
                    793,
                    1820,
                    802,
                    831,
                    834,
                    451,
                    452,
                    453,
                    454,
                    462,
                    463,
                    464,
                    465,
                    466,
                    472,
                    473
                ],
                "type": [
                    1152,
                    1153,
                    1154,
                    1156,
                    1160,
                    1161,
                    1174,
                    1176,
                    1178,
                    1180,
                    2221,
                    2227,
                    452,
                    1221,
                    1134,
                    1135,
                    1145,
                    1146,
                    1150
                ],
                "ie.ie_key": [
                    834,
                    787,
                    453
                ],
                "ie.set_downloader": [
                    454
                ],
                "self._ies_instances.get": [
                    462
                ],
                "ie_key": [
                    775,
                    776,
                    778,
                    779,
                    462,
                    464
                ],
                "get_info_extractor": [
                    464
                ],
                "self.add_info_extractor": [
                    465,
                    473
                ],
                "gen_extractor_classes": [
                    472
                ],
                "self._pps.append": [
                    477
                ],
                "pp.set_downloader": [
                    478
                ],
                "self._progress_hooks.append": [
                    482
                ],
                "hasattr": [
                    579,
                    485,
                    2278,
                    488,
                    587,
                    2256
                ],
                "message": [
                    517,
                    519,
                    521,
                    522,
                    532,
                    534,
                    573,
                    574,
                    591,
                    600,
                    608,
                    1121,
                    1124,
                    486,
                    489,
                    490,
                    491,
                    620,
                    499,
                    507,
                    509,
                    511
                ],
                "compat_str": [
                    517,
                    1544,
                    489,
                    649,
                    2280,
                    2221,
                    1422,
                    816,
                    1425
                ],
                "line_count": [
                    490,
                    494
                ],
                "message.count": [
                    490
                ],
                "self._output_process.stdin.write": [
                    491
                ],
                "self._output_process.stdin": [
                    491,
                    492
                ],
                "encode": [
                    491
                ],
                "self._output_process.stdin.flush": [
                    492
                ],
                "res": [
                    2167,
                    2169,
                    2170,
                    2109,
                    2111,
                    2113,
                    2115,
                    2116,
                    2119,
                    2121,
                    2123,
                    2124,
                    2125,
                    2127,
                    2129,
                    2131,
                    2004,
                    2132,
                    2133,
                    2136,
                    2137,
                    2138,
                    2140,
                    2013,
                    2142,
                    2144,
                    2146,
                    2147,
                    2148,
                    2150,
                    2151,
                    1385,
                    2153,
                    2155,
                    1389,
                    493,
                    495,
                    2157,
                    1393,
                    2158,
                    1395,
                    2159,
                    2161,
                    1398,
                    2163,
                    1400,
                    2165,
                    2166,
                    2171,
                    2172
                ],
                "join": [
                    2208,
                    580,
                    2022,
                    584,
                    810,
                    493,
                    1136,
                    1075,
                    1048,
                    2267,
                    700,
                    1117
                ],
                "decode": [
                    2285,
                    713,
                    2283,
                    493
                ],
                "self._output_channel.readline": [
                    493
                ],
                "_": [
                    1134,
                    494,
                    1492,
                    1174,
                    700
                ],
                "range": [
                    700,
                    917,
                    494
                ],
                "len": [
                    1634,
                    1635,
                    2180,
                    965,
                    1704,
                    937,
                    2377,
                    1995,
                    2378,
                    942,
                    495,
                    1359,
                    1555,
                    662,
                    1370,
                    956,
                    926
                ],
                "self.to_stdout": [
                    1730,
                    1732,
                    1734,
                    1736,
                    1738,
                    1740,
                    1742,
                    499,
                    853,
                    1721,
                    1850,
                    1723,
                    2013,
                    1598,
                    1727
                ],
                "skip_eol": [
                    499,
                    510
                ],
                "write_string": [
                    2234,
                    502
                ],
                "s": [
                    2346,
                    2347,
                    1229,
                    2350,
                    502,
                    1239
                ],
                "out": [
                    2244,
                    2245,
                    2246,
                    2247,
                    502
                ],
                "debug": [
                    507
                ],
                "check_quiet": [
                    508
                ],
                "self._bidi_workaround": [
                    521,
                    509
                ],
                "terminator": [
                    510,
                    511
                ],
                "output": [
                    513,
                    522,
                    523,
                    511
                ],
                "self._write_string": [
                    513,
                    2274,
                    2247,
                    552,
                    2280,
                    523,
                    2284,
                    2260,
                    534,
                    2236,
                    2238,
                    543
                ],
                "error": [
                    519
                ],
                "ctypes.windll.kernel32.GetConsoleWindow": [
                    529
                ],
                "ctypes.windll.kernel32": [
                    529,
                    532
                ],
                "ctypes.windll": [
                    529,
                    532
                ],
                "ctypes": [
                    529,
                    532
                ],
                "ctypes.windll.kernel32.SetConsoleTitleW": [
                    532
                ],
                "ctypes.c_wchar_p": [
                    532
                ],
                "os.environ": [
                    541,
                    533,
                    550
                ],
                "self.save_console_title": [
                    555
                ],
                "self.restore_console_title": [
                    559
                ],
                "self.cookiejar.save": [
                    562
                ],
                "self.cookiejar": [
                    2304,
                    2306,
                    2308,
                    562,
                    1404,
                    2301
                ],
                "self.to_stderr": [
                    585,
                    574,
                    609
                ],
                "tb": [
                    576,
                    578,
                    580,
                    581,
                    584,
                    585,
                    621
                ],
                "sys.exc_info": [
                    577,
                    579,
                    580,
                    587,
                    588,
                    590
                ],
                "exc_info": [
                    579,
                    580,
                    587,
                    588,
                    590,
                    591
                ],
                "traceback.format_exception": [
                    580
                ],
                "traceback": [
                    580,
                    581,
                    822,
                    583
                ],
                "encode_compat_str": [
                    581,
                    822
                ],
                "traceback.format_exc": [
                    581,
                    822
                ],
                "tb_data": [
                    584,
                    583
                ],
                "traceback.format_list": [
                    583
                ],
                "traceback.extract_stack": [
                    583
                ],
                "DownloadError": [
                    2025,
                    591
                ],
                "warning": [
                    600
                ],
                "self._err_file.isatty": [
                    616,
                    604
                ],
                "_msg_header": [
                    608,
                    617,
                    619,
                    620,
                    605,
                    607
                ],
                "warning_message": [
                    608,
                    609
                ],
                "error_message": [
                    620,
                    621
                ],
                "self.trouble": [
                    621
                ],
                "self.to_screen": [
                    900,
                    2056,
                    2184,
                    1806,
                    2191,
                    1808,
                    2194,
                    2196,
                    2202,
                    2204,
                    2206,
                    932,
                    1832,
                    1834,
                    943,
                    1712,
                    2382,
                    977,
                    2385,
                    2391,
                    2009,
                    1635,
                    1893,
                    998,
                    1767,
                    1772,
                    1006,
                    626,
                    628,
                    1782,
                    1785
                ],
                "file_name": [
                    626
                ],
                "UnicodeEncodeError": [
                    627,
                    2351
                ],
                "template_dict": [
                    640,
                    641,
                    642,
                    643,
                    644,
                    645,
                    646,
                    678,
                    707,
                    652,
                    653,
                    655,
                    662,
                    633,
                    635,
                    639
                ],
                "info_dict": [
                    2065,
                    2067,
                    2068,
                    2071,
                    2078,
                    1575,
                    1579,
                    1580,
                    1584,
                    2096,
                    1589,
                    1591,
                    1596,
                    1108,
                    1635,
                    1637,
                    1641,
                    1642,
                    633,
                    2175,
                    2186,
                    2189,
                    2191,
                    2195,
                    1696,
                    1703,
                    1704,
                    1705,
                    1707,
                    1708,
                    1710,
                    1717,
                    1721,
                    1723,
                    1725,
                    1726,
                    1730,
                    1731,
                    1732,
                    1733,
                    1734,
                    1737,
                    1738,
                    1740,
                    1742,
                    722,
                    723,
                    725,
                    734,
                    739,
                    1765,
                    1768,
                    747,
                    749,
                    1774,
                    755,
                    1780,
                    1787,
                    765,
                    1797,
                    1800,
                    1801,
                    1821,
                    1830,
                    1836,
                    1841,
                    2363,
                    1853,
                    2367,
                    2383,
                    2386,
                    2392,
                    1883,
                    1885,
                    1887,
                    1891,
                    1898,
                    1387,
                    1391,
                    1396,
                    1908,
                    1909,
                    1912,
                    1403,
                    1408,
                    1410,
                    1412,
                    1930,
                    1934,
                    1938,
                    1939,
                    1943,
                    1435,
                    1436,
                    1947,
                    1438,
                    1948,
                    1440,
                    1441,
                    1953,
                    1443,
                    1445,
                    1957,
                    1447,
                    1958,
                    1963,
                    1967,
                    1968,
                    1972,
                    1462,
                    1976,
                    1465,
                    1977,
                    1467,
                    1469,
                    1981,
                    1471,
                    1472,
                    1474,
                    1986,
                    1478,
                    1479,
                    1990,
                    1486,
                    1487,
                    1490,
                    1499,
                    1500,
                    1503,
                    1505,
                    1506,
                    1509,
                    1510,
                    1513,
                    1515,
                    1517,
                    2037
                ],
                "int": [
                    1700,
                    917,
                    918,
                    920,
                    635,
                    1052
                ],
                "time.time": [
                    635
                ],
                "time": [
                    635
                ],
                "autonumber_size": [
                    636,
                    637,
                    638,
                    663
                ],
                "template_dict.get": [
                    640,
                    641,
                    643,
                    645
                ],
                "sanitize": [
                    648,
                    652
                ],
                "sanitize_filename": [
                    648
                ],
                "v": [
                    649,
                    652,
                    653,
                    654,
                    879,
                    2037,
                    2268,
                    2269,
                    2270
                ],
                "k": [
                    651,
                    652,
                    653,
                    879,
                    2037,
                    2038
                ],
                "k.endswith": [
                    651
                ],
                "compat_numeric_types": [
                    652,
                    1430
                ],
                "template_dict.items": [
                    653
                ],
                "list": [
                    960,
                    963,
                    1251,
                    1667,
                    1351,
                    936,
                    1228,
                    1357,
                    654,
                    1681,
                    1299,
                    1243,
                    796,
                    1534,
                    1628
                ],
                "tuple": [
                    654
                ],
                "collections.defaultdict": [
                    655
                ],
                "collections": [
                    1130,
                    655
                ],
                "outtmpl": [
                    707,
                    1994,
                    1996,
                    1997,
                    1999,
                    657,
                    692,
                    694,
                    666,
                    668,
                    701,
                    671
                ],
                "DEFAULT_OUTTMPL": [
                    657,
                    1106,
                    1994
                ],
                "field_size_compat_map": [
                    661,
                    670
                ],
                "FIELD_SIZE_COMPAT_RE": [
                    665,
                    666,
                    669
                ],
                "mobj": [
                    666,
                    667,
                    670
                ],
                "re.search": [
                    728,
                    666,
                    732
                ],
                "re.sub": [
                    692,
                    1547,
                    668
                ],
                "mobj.group": [
                    670
                ],
                "numeric_field": [
                    677,
                    678,
                    1428,
                    693,
                    694,
                    1429,
                    1432,
                    1433
                ],
                "self._NUMERIC_FIELDS": [
                    1428,
                    677
                ],
                "FORMAT_RE": [
                    682,
                    693
                ],
                "FORMAT_RE.format": [
                    693
                ],
                "format": [
                    1539,
                    1540,
                    1541,
                    1542,
                    1543,
                    1544,
                    1547,
                    1548,
                    1551,
                    914,
                    1556,
                    1557,
                    1559,
                    1560,
                    1561,
                    1562,
                    1563,
                    1564,
                    1567,
                    1568,
                    1571,
                    1572,
                    1576,
                    1577,
                    694,
                    2103,
                    2105,
                    2106,
                    2107,
                    2108,
                    701,
                    2109,
                    2111,
                    2112,
                    2113,
                    1220,
                    1233,
                    1234,
                    1122,
                    1636,
                    1638
                ],
                "sep": [
                    707,
                    700,
                    701
                ],
                "random.choice": [
                    700
                ],
                "random": [
                    972,
                    700
                ],
                "ascii_letters": [
                    700
                ],
                "replace": [
                    707,
                    701
                ],
                "outtmpl.replace": [
                    701
                ],
                "filename": [
                    1922,
                    1804,
                    1830,
                    1841,
                    1717,
                    1986,
                    707,
                    1735,
                    1736,
                    713,
                    714,
                    2379,
                    1748,
                    1880,
                    1882,
                    1884,
                    1761,
                    1891,
                    1892,
                    1765,
                    1895,
                    1780,
                    1912,
                    2043
                ],
                "expand_path": [
                    707,
                    2303
                ],
                "sys.version_info": [
                    712
                ],
                "encodeFilename": [
                    1761,
                    1892,
                    1766,
                    1831,
                    713,
                    2058,
                    1773,
                    1805,
                    2381,
                    1781,
                    1813,
                    2389,
                    1786,
                    1822
                ],
                "preferredencoding": [
                    713,
                    716,
                    2358
                ],
                "sanitize_path": [
                    1761,
                    714
                ],
                "ValueError": [
                    1824,
                    1058,
                    1480,
                    715,
                    1053,
                    1086
                ],
                "self.report_error": [
                    1314,
                    1988,
                    2053,
                    716,
                    813,
                    1838,
                    816,
                    1776,
                    2007,
                    822,
                    1919,
                    1816,
                    1914,
                    827,
                    1308,
                    1758,
                    1791
                ],
                "err": [
                    1826,
                    1988,
                    2244,
                    716,
                    2352,
                    1914,
                    2395,
                    1917,
                    1758,
                    1919
                ],
                "repr": [
                    716
                ],
                "video_title": [
                    743,
                    746,
                    748,
                    750,
                    722
                ],
                "info_dict.get": [
                    1408,
                    1797,
                    1930,
                    2189,
                    2065,
                    2068,
                    1947,
                    1948,
                    1696,
                    1443,
                    1445,
                    1830,
                    1967,
                    1968,
                    1465,
                    2363,
                    1725,
                    1853,
                    2367,
                    1474,
                    1730,
                    1731,
                    1733,
                    1737,
                    1486,
                    722,
                    1490,
                    1108,
                    1499,
                    1500,
                    734,
                    739,
                    1765,
                    1768,
                    1513,
                    747,
                    1387,
                    1396,
                    1780,
                    2175
                ],
                "title": [
                    725,
                    728,
                    729,
                    732,
                    733
                ],
                "matchtitle": [
                    728,
                    729,
                    726,
                    727
                ],
                "re.IGNORECASE": [
                    728,
                    732
                ],
                "rejecttitle": [
                    730,
                    731,
                    732,
                    733
                ],
                "date": [
                    737,
                    738,
                    734,
                    735
                ],
                "dateRange": [
                    736,
                    737,
                    738
                ],
                "DateRange": [
                    736
                ],
                "isoformat": [
                    738
                ],
                "date_from_str": [
                    738
                ],
                "view_count": [
                    739,
                    740,
                    742,
                    743,
                    745,
                    746
                ],
                "min_views": [
                    741,
                    742,
                    743
                ],
                "max_views": [
                    744,
                    745,
                    746
                ],
                "age_restricted": [
                    747
                ],
                "self.in_download_archive": [
                    749
                ],
                "incomplete": [
                    752
                ],
                "match_filter": [
                    753,
                    754,
                    755
                ],
                "ret": [
                    755,
                    756,
                    757
                ],
                "key": [
                    764,
                    765
                ],
                "value": [
                    1066,
                    1067,
                    1068,
                    1372,
                    764,
                    765,
                    1374
                ],
                "extra_info.items": [
                    764
                ],
                "extra_info": [
                    896,
                    865,
                    1025,
                    804,
                    870,
                    850,
                    857,
                    764
                ],
                "info_dict.setdefault": [
                    1976,
                    1938,
                    765,
                    1957
                ],
                "staticmethod": [
                    761,
                    2034,
                    2101
                ],
                "force_generic_extractor": [
                    775
                ],
                "ies": [
                    779,
                    781,
                    783
                ],
                "self.get_info_extractor": [
                    787,
                    1801,
                    779
                ],
                "ie.suitable": [
                    784
                ],
                "url": [
                    832,
                    833,
                    802,
                    1529,
                    784,
                    2001,
                    1523,
                    1524,
                    2005,
                    793,
                    827
                ],
                "ie.working": [
                    788
                ],
                "ie_result": [
                    1024,
                    1026,
                    899,
                    1028,
                    793,
                    794,
                    923,
                    796,
                    798,
                    800,
                    802,
                    804,
                    806,
                    934,
                    945,
                    830,
                    845,
                    974,
                    848,
                    853,
                    854,
                    857,
                    858,
                    985,
                    986,
                    987,
                    862,
                    988,
                    864,
                    990,
                    991,
                    992,
                    993,
                    869,
                    1005,
                    879,
                    1007,
                    1011,
                    1017,
                    1018,
                    1019,
                    1020
                ],
                "ie.extract": [
                    793
                ],
                "self.add_default_extra_info": [
                    802
                ],
                "process": [
                    803
                ],
                "self.process_ie_result": [
                    1025,
                    804,
                    2024,
                    1001,
                    895
                ],
                "download": [
                    896,
                    1025,
                    1633,
                    804,
                    1002,
                    1104,
                    858,
                    1596,
                    863
                ],
                "GeoRestrictedError": [
                    807
                ],
                "msg": [
                    808,
                    810,
                    812,
                    813
                ],
                "e.msg": [
                    808,
                    2053
                ],
                "e": [
                    2053,
                    808,
                    809,
                    811,
                    816,
                    822
                ],
                "e.countries": [
                    809,
                    811
                ],
                "map": [
                    1048,
                    1075,
                    811,
                    1339
                ],
                "ISO3166Utils.short2full": [
                    811
                ],
                "ISO3166Utils": [
                    811
                ],
                "ExtractorError": [
                    1824,
                    1411,
                    1413,
                    815,
                    1520,
                    1630
                ],
                "e.format_traceback": [
                    816
                ],
                "MaxDownloadsReached": [
                    2008,
                    818,
                    1701
                ],
                "Exception": [
                    2248,
                    2251,
                    820,
                    1030
                ],
                "error_to_compat_str": [
                    1826,
                    822,
                    1914,
                    2395,
                    1758
                ],
                "self.add_extra_info": [
                    857,
                    830,
                    1014
                ],
                "ie.IE_NAME": [
                    831
                ],
                "url_basename": [
                    992,
                    833,
                    1019
                ],
                "result_type": [
                    897,
                    866,
                    1030,
                    845,
                    847,
                    1008,
                    856,
                    859
                ],
                "ie_result.get": [
                    864,
                    899,
                    869,
                    845,
                    974,
                    1011,
                    985,
                    986,
                    987,
                    988
                ],
                "sanitize_url": [
                    1542,
                    1455,
                    848,
                    1495,
                    1467
                ],
                "extract_flat": [
                    849,
                    850,
                    851
                ],
                "json.dumps": [
                    2013,
                    853,
                    1742
                ],
                "json": [
                    2013,
                    2022,
                    853,
                    1742
                ],
                "self.process_video_result": [
                    858
                ],
                "self.extract_info": [
                    2004,
                    868,
                    862
                ],
                "info": [
                    2042,
                    2051,
                    868,
                    2022,
                    2043,
                    2024,
                    2026,
                    875,
                    876,
                    1421,
                    1425,
                    883,
                    1429,
                    1846,
                    1433,
                    1850,
                    1851
                ],
                "force_properties": [
                    881,
                    882,
                    884,
                    878
                ],
                "ie_result.items": [
                    879
                ],
                "f": [
                    2177,
                    2178,
                    1283,
                    1284,
                    2179,
                    1289,
                    1290,
                    1679,
                    1296,
                    1681,
                    1298,
                    1683,
                    1686,
                    1304,
                    1689,
                    1690,
                    2208,
                    1726,
                    1727,
                    1089,
                    1346,
                    1232,
                    1233,
                    1619,
                    1621,
                    1242,
                    1243,
                    2020,
                    2022,
                    1255,
                    1256,
                    1897,
                    1899,
                    1260,
                    1261,
                    1902,
                    880,
                    881,
                    882,
                    1523,
                    1271,
                    1272,
                    1530,
                    1277,
                    1278
                ],
                "new_result": [
                    896,
                    883,
                    884,
                    892,
                    893
                ],
                "info.copy": [
                    883
                ],
                "new_result.update": [
                    884
                ],
                "new_result.get": [
                    892
                ],
                "playlist": [
                    899,
                    900,
                    934,
                    1006,
                    945,
                    984
                ],
                "playlist_results": [
                    1004,
                    1005,
                    902
                ],
                "playliststart": [
                    964,
                    904,
                    941,
                    955,
                    989
                ],
                "playlistend": [
                    964,
                    905,
                    907,
                    908,
                    941,
                    955
                ],
                "playlistitems_str": [
                    912,
                    921,
                    910
                ],
                "playlistitems": [
                    928,
                    961,
                    938,
                    911,
                    947,
                    949,
                    921,
                    959
                ],
                "string_segment": [
                    920,
                    914,
                    915,
                    916
                ],
                "format.split": [
                    914
                ],
                "start": [
                    1152,
                    1153,
                    1217,
                    1123,
                    1220,
                    1160,
                    1194,
                    1164,
                    1134,
                    1199,
                    916,
                    917,
                    1174,
                    1145,
                    1210,
                    1150
                ],
                "end": [
                    1152,
                    1153,
                    1160,
                    1165,
                    916,
                    917,
                    1145,
                    1150
                ],
                "string_segment.split": [
                    916
                ],
                "item": [
                    951,
                    917,
                    918,
                    949
                ],
                "orderedSet": [
                    921
                ],
                "iter_playlistitems": [
                    921
                ],
                "ie_entries": [
                    961,
                    964,
                    936,
                    937,
                    939,
                    941,
                    946,
                    950,
                    954,
                    923
                ],
                "num_entries": [
                    929,
                    934,
                    926
                ],
                "list_ie_entries": [
                    928,
                    926
                ],
                "n_all_entries": [
                    937,
                    945
                ],
                "entries": [
                    960,
                    963,
                    965,
                    969,
                    939,
                    972,
                    941,
                    942,
                    976,
                    948,
                    950,
                    954,
                    956
                ],
                "make_playlistitems_entries": [
                    960,
                    939
                ],
                "n_entries": [
                    965,
                    966,
                    942,
                    945,
                    977,
                    983,
                    956,
                    957
                ],
                "PagedList": [
                    946
                ],
                "entries.extend": [
                    950
                ],
                "ie_entries.getslice": [
                    954,
                    950
                ],
                "report_download": [
                    957,
                    966
                ],
                "itertools.islice": [
                    960,
                    963
                ],
                "itertools": [
                    960,
                    963,
                    1342
                ],
                "max": [
                    961
                ],
                "random.shuffle": [
                    972
                ],
                "x_forwarded_for": [
                    980,
                    981,
                    974
                ],
                "entry": [
                    976,
                    1001,
                    996,
                    981
                ],
                "extra": [
                    1003,
                    982
                ],
                "reason": [
                    996,
                    997,
                    998,
                    1710,
                    1711,
                    1712
                ],
                "self._match_entry": [
                    996,
                    1710
                ],
                "entry_result": [
                    1001,
                    1004
                ],
                "playlist_results.append": [
                    1004
                ],
                "r": [
                    1025,
                    1026,
                    1023,
                    1015
                ],
                "_fixup": [
                    1025
                ],
                "OPERATORS": [
                    1048,
                    1035,
                    1061
                ],
                "operator.lt": [
                    1036
                ],
                "operator": [
                    1065,
                    1036,
                    1037,
                    1038,
                    1039,
                    1040,
                    1041
                ],
                "operator.le": [
                    1037
                ],
                "operator.gt": [
                    1038
                ],
                "operator.ge": [
                    1039
                ],
                "operator.eq": [
                    1040,
                    1065
                ],
                "operator.ne": [
                    1041
                ],
                "operator_rex": [
                    1049,
                    1043
                ],
                "re.compile": [
                    1043,
                    1070
                ],
                "re.escape": [
                    1048,
                    1075
                ],
                "OPERATORS.keys": [
                    1048
                ],
                "m": [
                    1056,
                    1089,
                    1091,
                    1060,
                    1061,
                    1063,
                    1076,
                    1077,
                    1078,
                    1079,
                    1080,
                    1049,
                    1050,
                    1052,
                    1085,
                    1054
                ],
                "operator_rex.search": [
                    1049
                ],
                "filter_spec": [
                    1086,
                    1049,
                    1060,
                    1076
                ],
                "comparison_value": [
                    1056,
                    1057,
                    1092,
                    1078,
                    1052,
                    1054,
                    1055
                ],
                "m.group": [
                    1056,
                    1089,
                    1091,
                    1060,
                    1061,
                    1078,
                    1079,
                    1080,
                    1052,
                    1054
                ],
                "parse_filesize": [
                    1056,
                    1054
                ],
                "op": [
                    1081,
                    1083,
                    1092,
                    1061
                ],
                "STR_OPERATORS": [
                    1064,
                    1075,
                    1079
                ],
                "attr.startswith": [
                    1066
                ],
                "attr": [
                    1066,
                    1067,
                    1068
                ],
                "attr.endswith": [
                    1067
                ],
                "str_operator_rex": [
                    1076,
                    1070
                ],
                "STR_OPERATORS.keys": [
                    1075
                ],
                "str_operator_rex.search": [
                    1076
                ],
                "str_op": [
                    1081,
                    1083,
                    1079
                ],
                "actual_value": [
                    1089,
                    1090,
                    1092
                ],
                "f.get": [
                    1089,
                    2179,
                    1284,
                    1290,
                    1261,
                    1523,
                    1619,
                    1621,
                    1272,
                    1278,
                    1727
                ],
                "_filter": [
                    1093,
                    1350,
                    1351
                ],
                "merger": [
                    1856,
                    1857,
                    1863,
                    1098,
                    1099
                ],
                "FFmpegMergerPP": [
                    1856,
                    1098
                ],
                "merger.available": [
                    1857,
                    1099
                ],
                "merger.can_merge": [
                    1099
                ],
                "can_merge": [
                    1110
                ],
                "req_format_list": [
                    1114,
                    1116,
                    1117
                ],
                "prefer_best": [
                    1115
                ],
                "req_format_list.reverse": [
                    1116
                ],
                "note": [
                    1123
                ],
                "format_spec": [
                    1248,
                    1281,
                    1123,
                    1254,
                    1287,
                    1257,
                    1258,
                    1355,
                    1295,
                    1296,
                    1359,
                    1298,
                    1269,
                    1275
                ],
                "SyntaxError": [
                    1124
                ],
                "PICKFIRST": [
                    1202,
                    1238,
                    1126
                ],
                "MERGE": [
                    1218,
                    1302,
                    1127
                ],
                "SINGLE": [
                    1128,
                    1179,
                    1205,
                    1247
                ],
                "GROUP": [
                    1129,
                    1236,
                    1212
                ],
                "FormatSelector": [
                    1218,
                    1130,
                    1202,
                    1205,
                    1179,
                    1212
                ],
                "collections.namedtuple": [
                    1130
                ],
                "filter_parts": [
                    1136,
                    1138,
                    1133
                ],
                "string": [
                    1152,
                    1153,
                    1154,
                    1156,
                    1160,
                    1163,
                    1167,
                    1174,
                    1179,
                    1181,
                    1186,
                    1189,
                    1192,
                    1197,
                    1203,
                    1208,
                    1213,
                    1220,
                    1134,
                    1135,
                    1138,
                    1145,
                    1146,
                    1150
                ],
                "tokens": [
                    1152,
                    1184,
                    1187,
                    1381,
                    1190,
                    1357,
                    1134,
                    1201,
                    1363,
                    1174,
                    1206,
                    1145,
                    1211,
                    1215
                ],
                "tokenize.OP": [
                    1154,
                    1156,
                    1161,
                    1135,
                    1146,
                    1180
                ],
                "tokenize": [
                    1154,
                    1156,
                    1221,
                    1158,
                    1178,
                    1161,
                    1358,
                    1135,
                    1169,
                    1180,
                    1176,
                    1146,
                    1148
                ],
                "filter_parts.append": [
                    1138
                ],
                "ALLOWED_OPS": [
                    1156,
                    1143
                ],
                "last_string": [
                    1157,
                    1158,
                    1159,
                    1162,
                    1163,
                    1167,
                    1168,
                    1169,
                    1144,
                    1147,
                    1148,
                    1149
                ],
                "last_start": [
                    1158,
                    1164,
                    1169,
                    1144,
                    1148
                ],
                "last_end": [
                    1158,
                    1165,
                    1169,
                    1144,
                    1148
                ],
                "last_line": [
                    1144,
                    1169,
                    1148,
                    1158
                ],
                "line": [
                    1152,
                    1153,
                    2084,
                    2085,
                    1160,
                    1145,
                    1150
                ],
                "tokenize.NAME": [
                    1158,
                    1161,
                    1169,
                    1178,
                    1148
                ],
                "tokenize.NUMBER": [
                    1161,
                    1178
                ],
                "selectors": [
                    1224,
                    1225,
                    1195,
                    1172
                ],
                "current_selector": [
                    1218,
                    1223,
                    1224,
                    1193,
                    1195,
                    1196,
                    1198,
                    1200,
                    1202,
                    1204,
                    1173,
                    1205,
                    1207,
                    1209,
                    1179,
                    1212,
                    1214
                ],
                "getattr": [
                    1176,
                    2226
                ],
                "inside_group": [
                    1182
                ],
                "tokens.restore_last_token": [
                    1184,
                    1187,
                    1190
                ],
                "inside_merge": [
                    1186
                ],
                "inside_choice": [
                    1189
                ],
                "syntax_error": [
                    1217,
                    1220,
                    1194,
                    1199,
                    1359,
                    1210
                ],
                "selectors.append": [
                    1224,
                    1195
                ],
                "first_choice": [
                    1200,
                    1202
                ],
                "second_choice": [
                    1201,
                    1202
                ],
                "_parse_format_selection": [
                    1201,
                    1211,
                    1381,
                    1215
                ],
                "format_filter": [
                    1206,
                    1207
                ],
                "_parse_filter": [
                    1206
                ],
                "current_selector.filters.append": [
                    1207
                ],
                "current_selector.filters": [
                    1207
                ],
                "group": [
                    1211,
                    1212
                ],
                "video_selector": [
                    1216,
                    1218,
                    1339,
                    1214,
                    1343
                ],
                "audio_selector": [
                    1216,
                    1215,
                    1218,
                    1339,
                    1343
                ],
                "tokenize.ENDMARKER": [
                    1221
                ],
                "selector": [
                    1248,
                    1346,
                    1228,
                    1229,
                    1236,
                    1237,
                    1238,
                    1239,
                    1302,
                    1339,
                    1247
                ],
                "fs": [
                    1232,
                    1242,
                    1229,
                    1239
                ],
                "_build_selector_function": [
                    1382,
                    1229,
                    1237,
                    1239,
                    1339
                ],
                "ctx": [
                    1251,
                    1349,
                    1233,
                    1267,
                    1623,
                    1243,
                    1628,
                    1343
                ],
                "selector_function": [
                    1352,
                    1235,
                    1237
                ],
                "selector.type": [
                    1236,
                    1302,
                    1238,
                    1247
                ],
                "selector.selector": [
                    1248,
                    1339,
                    1237,
                    1239
                ],
                "picked_formats": [
                    1243,
                    1244,
                    1245
                ],
                "formats": [
                    2178,
                    1283,
                    1539,
                    2180,
                    1289,
                    1673,
                    1674,
                    1679,
                    1681,
                    1299,
                    1686,
                    1559,
                    2208,
                    2209,
                    1584,
                    1589,
                    1866,
                    1619,
                    1621,
                    1624,
                    1251,
                    1252,
                    1255,
                    1515,
                    1260,
                    1517,
                    1519,
                    1268,
                    1271,
                    1277,
                    1534,
                    2175
                ],
                "format_idx": [
                    1258,
                    1268,
                    1263
                ],
                "audiovideo_formats": [
                    1259,
                    1262,
                    1263
                ],
                "audio_formats": [
                    1280,
                    1270,
                    1273,
                    1274,
                    1276,
                    1279
                ],
                "video_formats": [
                    1282,
                    1285,
                    1286,
                    1288,
                    1291,
                    1292
                ],
                "extensions": [
                    1294,
                    1295
                ],
                "filter_f": [
                    1296,
                    1298,
                    1299
                ],
                "matches": [
                    1681,
                    1682,
                    1299,
                    1300,
                    1301,
                    1683
                ],
                "filter": [
                    1681,
                    1299,
                    1534,
                    1351
                ],
                "format_1": [
                    1304,
                    1316,
                    1310
                ],
                "format_2": [
                    1304,
                    1316,
                    1310
                ],
                "formats_info": [
                    1313,
                    1336,
                    1319,
                    1323,
                    1324,
                    1325,
                    1326,
                    1327,
                    1328,
                    1329,
                    1330,
                    1331,
                    1332,
                    1333,
                    1334,
                    1335,
                    1304,
                    1307
                ],
                "get": [
                    1313,
                    1324,
                    1325,
                    1326,
                    1327,
                    1328,
                    1329,
                    1330,
                    1331,
                    1332,
                    1333,
                    1334,
                    1335,
                    1336,
                    1307
                ],
                "output_ext": [
                    1337,
                    1318
                ],
                "pair": [
                    1344,
                    1342
                ],
                "itertools.product": [
                    1342
                ],
                "copy.deepcopy": [
                    1349,
                    1343
                ],
                "copy": [
                    1349,
                    1343
                ],
                "_merge": [
                    1344
                ],
                "filters": [
                    1346,
                    1350
                ],
                "self._build_format_filter": [
                    1346
                ],
                "selector.filters": [
                    1346
                ],
                "ctx_copy": [
                    1352,
                    1349,
                    1351
                ],
                "final_selector": [
                    1353
                ],
                "stream": [
                    1355,
                    1357
                ],
                "io.BytesIO": [
                    1355
                ],
                "io": [
                    1355,
                    1773,
                    1813,
                    1786,
                    1822
                ],
                "format_spec.encode": [
                    1355
                ],
                "_remove_unused_ops": [
                    1357
                ],
                "compat_tokenize_tokenize": [
                    1357
                ],
                "stream.readline": [
                    1357
                ],
                "tokenize.TokenError": [
                    1358
                ],
                "self.tokens": [
                    1370,
                    1363,
                    1372
                ],
                "self.counter": [
                    1379,
                    1364,
                    1370,
                    1372,
                    1373
                ],
                "StopIteration": [
                    1371
                ],
                "next": [
                    1376
                ],
                "__next__": [
                    1376
                ],
                "parsed_selector": [
                    1381,
                    1382
                ],
                "iter": [
                    1381
                ],
                "TokenIterator": [
                    1381
                ],
                "std_headers.copy": [
                    1385
                ],
                "std_headers": [
                    1385
                ],
                "add_headers": [
                    1387,
                    1388,
                    1389
                ],
                "res.update": [
                    1389
                ],
                "cookies": [
                    1392,
                    1393,
                    1391
                ],
                "self._calc_cookies": [
                    1391
                ],
                "x_forwarded_for_ip": [
                    1396,
                    1397,
                    1398
                ],
                "pr": [
                    1403,
                    1404,
                    1405
                ],
                "sanitized_Request": [
                    1403,
                    2214
                ],
                "self.cookiejar.add_cookie_header": [
                    1404
                ],
                "pr.get_header": [
                    1405
                ],
                "field": [
                    1418,
                    1421,
                    1422,
                    1485,
                    1486,
                    1425,
                    1487,
                    1429,
                    1430,
                    1433
                ],
                "field_not": [
                    1418
                ],
                "conversion": [
                    1418
                ],
                "info.get": [
                    1850,
                    2026,
                    1421,
                    1429
                ],
                "string_field": [
                    1424,
                    1425,
                    1421
                ],
                "report_force_conversion": [
                    1424,
                    1432
                ],
                "int_or_none": [
                    1433
                ],
                "sanitize_string_field": [
                    1530,
                    1435,
                    1540
                ],
                "sanitize_numeric_fields": [
                    1436,
                    1541
                ],
                "thumbnails": [
                    2189,
                    2190,
                    2198,
                    1443,
                    1444,
                    1447,
                    1448,
                    1449,
                    1454,
                    2363,
                    2364,
                    2365,
                    1468,
                    1469,
                    2367,
                    2371,
                    2375,
                    2377,
                    2378
                ],
                "thumbnail": [
                    1445,
                    1446,
                    1447,
                    1465,
                    1466,
                    1467
                ],
                "thumbnails.sort": [
                    1449
                ],
                "t.get": [
                    1450,
                    1451,
                    1452,
                    1453,
                    1456,
                    1458,
                    2198
                ],
                "t": [
                    2375,
                    2376,
                    2377,
                    1450,
                    1451,
                    1452,
                    1453,
                    1454,
                    1455,
                    1456,
                    1457,
                    1458,
                    1459,
                    2379,
                    2388,
                    2198,
                    2395,
                    2378
                ],
                "self.list_thumbnails": [
                    1462
                ],
                "upload_date": [
                    1478,
                    1479
                ],
                "datetime.datetime.utcfromtimestamp": [
                    1478
                ],
                "datetime.datetime": [
                    1478
                ],
                "datetime": [
                    1478
                ],
                "upload_date.strftime": [
                    1479
                ],
                "OverflowError": [
                    1480
                ],
                "field.capitalize": [
                    1487
                ],
                "cc_kind": [
                    1489,
                    1490
                ],
                "cc": [
                    1490,
                    1491,
                    1492
                ],
                "subtitle": [
                    1492,
                    1493
                ],
                "cc.items": [
                    1492
                ],
                "subtitle_format": [
                    1493,
                    1494,
                    1495,
                    1496,
                    1497
                ],
                "subtitle_format.get": [
                    1496,
                    1494
                ],
                "lower": [
                    1568,
                    1497
                ],
                "determine_ext": [
                    1568,
                    1497,
                    2376
                ],
                "automatic_captions": [
                    1505,
                    1510,
                    1649,
                    1650,
                    1499
                ],
                "subtitles": [
                    2209,
                    1506,
                    1510,
                    1800,
                    1802,
                    2201,
                    1500
                ],
                "self.list_subtitles": [
                    1504,
                    1506
                ],
                "self.process_subtitles": [
                    1509
                ],
                "is_wellformed": [
                    1534
                ],
                "formats_dict": [
                    1536,
                    1549,
                    1550,
                    1551,
                    1554
                ],
                "format.get": [
                    2112,
                    1571,
                    1543,
                    2108,
                    2103,
                    1560,
                    2105,
                    2107,
                    1564,
                    1567
                ],
                "format_id": [
                    1548,
                    1549,
                    1550,
                    1551,
                    1554,
                    1557
                ],
                "append": [
                    1977,
                    1939,
                    1958,
                    1551
                ],
                "ambiguous_formats": [
                    1554,
                    1555,
                    1556
                ],
                "formats_dict.items": [
                    1554
                ],
                "self.format_resolution": [
                    2177,
                    1563
                ],
                "determine_protocol": [
                    1572
                ],
                "full_format_info": [
                    1576,
                    1577,
                    1575
                ],
                "info_dict.copy": [
                    1575
                ],
                "full_format_info.update": [
                    1576
                ],
                "self._calc_headers": [
                    1577
                ],
                "self.list_formats": [
                    1591
                ],
                "req_format": [
                    1600,
                    1594,
                    1595,
                    1596,
                    1598
                ],
                "self._default_format_spec": [
                    1596
                ],
                "format_selector": [
                    1600,
                    1628
                ],
                "self.build_format_selector": [
                    1600
                ],
                "incomplete_formats": [
                    1625,
                    1617
                ],
                "all": [
                    1619,
                    1621
                ],
                "formats_to_download": [
                    1634,
                    1635,
                    1636,
                    1641,
                    1628,
                    1629
                ],
                "new_info": [
                    1637,
                    1638,
                    1639,
                    1898,
                    1899,
                    1901,
                    1902,
                    1906
                ],
                "new_info.update": [
                    1899,
                    1638
                ],
                "self.process_info": [
                    1639
                ],
                "info_dict.update": [
                    1641
                ],
                "available_subs": [
                    1664,
                    1667,
                    1673,
                    1646,
                    1648,
                    1651,
                    1652,
                    1656,
                    1660
                ],
                "normal_subtitles": [
                    1648,
                    1647
                ],
                "available_subs.update": [
                    1648
                ],
                "lang": [
                    2208,
                    2209,
                    1672,
                    1673,
                    1675,
                    1650,
                    1651,
                    1652,
                    1689,
                    1690
                ],
                "cap_info": [
                    1650,
                    1652
                ],
                "automatic_captions.items": [
                    1650
                ],
                "requested_langs": [
                    1665,
                    1667,
                    1672,
                    1660,
                    1663
                ],
                "available_subs.keys": [
                    1667,
                    1660
                ],
                "formats_query": [
                    1689,
                    1669,
                    1670
                ],
                "formats_preference": [
                    1677,
                    1670
                ],
                "formats_query.split": [
                    1670
                ],
                "subs": [
                    1690,
                    1691,
                    1671
                ],
                "available_subs.get": [
                    1673
                ],
                "video_id": [
                    2202,
                    1675,
                    2205
                ],
                "ext": [
                    1681,
                    1677,
                    1678
                ],
                "max_downloads": [
                    1698,
                    1699,
                    1700
                ],
                "self.prepare_filename": [
                    1901,
                    1717
                ],
                "formatSeconds": [
                    1738
                ],
                "dn": [
                    1753,
                    1754,
                    1755
                ],
                "os.path.dirname": [
                    1753,
                    2243
                ],
                "os.path": [
                    2243,
                    1892,
                    1766,
                    1831,
                    2379,
                    1805,
                    2381,
                    1781,
                    1880,
                    1753,
                    1754,
                    1882
                ],
                "path": [
                    1753
                ],
                "os.path.exists": [
                    1892,
                    1766,
                    1831,
                    1805,
                    2381,
                    1781,
                    1754
                ],
                "os.makedirs": [
                    1755
                ],
                "IOError": [
                    1824,
                    2087,
                    2059,
                    1837,
                    1775,
                    1815,
                    1916,
                    1757,
                    1790
                ],
                "ensure_dir_exists": [
                    1761,
                    1903
                ],
                "descfn": [
                    1765,
                    1766,
                    1772,
                    1773,
                    1776
                ],
                "replace_extension": [
                    1780,
                    1765,
                    1830
                ],
                "io.open": [
                    1786,
                    1813,
                    1773,
                    1822
                ],
                "descfile": [
                    1773,
                    1774
                ],
                "descfile.write": [
                    1774
                ],
                "annofn": [
                    1780,
                    1781,
                    1785,
                    1786,
                    1791
                ],
                "annofile": [
                    1786,
                    1787
                ],
                "annofile.write": [
                    1787
                ],
                "KeyError": [
                    1788
                ],
                "TypeError": [
                    1788
                ],
                "subtitles_are_requested": [
                    1794,
                    1797
                ],
                "any": [
                    1794
                ],
                "sub_lang": [
                    1802,
                    1804,
                    1806,
                    1826
                ],
                "sub_info": [
                    1802,
                    1803,
                    1809,
                    1814,
                    1821
                ],
                "subtitles.items": [
                    2209,
                    1802
                ],
                "sub_format": [
                    1803,
                    1804,
                    1806
                ],
                "sub_filename": [
                    1804,
                    1805,
                    1808,
                    1813,
                    1816,
                    1822
                ],
                "subtitles_filename": [
                    1804
                ],
                "sub_info.get": [
                    1809
                ],
                "subfile": [
                    1823,
                    1813,
                    1814,
                    1822
                ],
                "subfile.write": [
                    1814,
                    1823
                ],
                "sub_data": [
                    1820,
                    1823
                ],
                "read": [
                    2283,
                    1820,
                    2285
                ],
                "ie._request_webpage": [
                    1820
                ],
                "infofn": [
                    1830,
                    1831,
                    1834,
                    1836,
                    1838
                ],
                "write_json_file": [
                    1836
                ],
                "self.filter_requested_info": [
                    1836,
                    2022
                ],
                "self._write_thumbnails": [
                    1841
                ],
                "fd": [
                    1848,
                    1851,
                    1846
                ],
                "get_suitable_downloader": [
                    1846
                ],
                "fd.add_progress_hook": [
                    1848
                ],
                "fd.download": [
                    1851
                ],
                "name": [
                    2202,
                    1851,
                    2205
                ],
                "downloaded": [
                    1905,
                    1909,
                    1854
                ],
                "success": [
                    1912,
                    1922,
                    1907,
                    1855
                ],
                "postprocessors": [
                    1858,
                    1908,
                    1863
                ],
                "video": [
                    1866,
                    1868
                ],
                "audio": [
                    1866,
                    1868
                ],
                "video_ext": [
                    1875,
                    1868,
                    1869
                ],
                "audio_ext": [
                    1875,
                    1868,
                    1869
                ],
                "video.get": [
                    1868
                ],
                "audio.get": [
                    1868
                ],
                "COMPATIBLE_EXTS": [
                    1874,
                    1870
                ],
                "exts": [
                    1874,
                    1875
                ],
                "filename_real_ext": [
                    1880,
                    1883
                ],
                "os.path.splitext": [
                    1880,
                    1882,
                    2379
                ],
                "filename_wo_ext": [
                    1881,
                    1891
                ],
                "requested_formats": [
                    1897,
                    1885,
                    1886
                ],
                "compatible_formats": [
                    1886
                ],
                "fname": [
                    1905,
                    1906,
                    1900,
                    1903
                ],
                "prepend_extension": [
                    1900
                ],
                "downloaded.append": [
                    1905
                ],
                "partial_success": [
                    1906,
                    1907
                ],
                "dl": [
                    1912,
                    1906
                ],
                "compat_urllib_error.URLError": [
                    2393,
                    1913,
                    2333
                ],
                "compat_urllib_error": [
                    2393,
                    1913,
                    2333
                ],
                "compat_http_client.HTTPException": [
                    2393,
                    1913
                ],
                "compat_http_client": [
                    2393,
                    1913
                ],
                "socket.error": [
                    2393,
                    1913
                ],
                "socket": [
                    2393,
                    1913
                ],
                "UnavailableVideoError": [
                    1917,
                    2006
                ],
                "ContentTooShortError": [
                    1918
                ],
                "err.expected": [
                    1919
                ],
                "err.downloaded": [
                    1919
                ],
                "fixup_policy": [
                    1954,
                    1924,
                    1925,
                    1926,
                    1932,
                    1965,
                    1935,
                    1970,
                    1973,
                    1945,
                    1949,
                    1983
                ],
                "INSTALL_FFMPEG_MESSAGE": [
                    1928,
                    1963,
                    1981,
                    1943
                ],
                "stretched_ratio": [
                    1930,
                    1931,
                    1934,
                    1943
                ],
                "stretched_pp": [
                    1936,
                    1937,
                    1939
                ],
                "FFmpegFixupStretchedPP": [
                    1936
                ],
                "stretched_pp.available": [
                    1937
                ],
                "fixup_pp": [
                    1955,
                    1956,
                    1958,
                    1974,
                    1975,
                    1977
                ],
                "FFmpegFixupM4aPP": [
                    1955
                ],
                "fixup_pp.available": [
                    1956,
                    1975
                ],
                "FFmpegFixupM3u8PP": [
                    1974
                ],
                "self.post_process": [
                    1986
                ],
                "PostProcessingError": [
                    1987,
                    2052
                ],
                "self.record_download_archive": [
                    1990
                ],
                "url_list": [
                    2001,
                    1995
                ],
                "SameFileError": [
                    1999
                ],
                "contextlib.closing": [
                    2018
                ],
                "contextlib": [
                    2018
                ],
                "fileinput.FileInput": [
                    2018
                ],
                "fileinput": [
                    2018,
                    2020
                ],
                "info_filename": [
                    2019
                ],
                "fileinput.hook_encoded": [
                    2020
                ],
                "json.loads": [
                    2022
                ],
                "webpage_url": [
                    2026,
                    2027,
                    2028,
                    2029
                ],
                "self.download": [
                    2029
                ],
                "info_dict.items": [
                    2037
                ],
                "ie_info": [
                    2042,
                    2045,
                    2046
                ],
                "pps_chain": [
                    2048,
                    2044,
                    2046,
                    2047
                ],
                "ie_info.get": [
                    2045
                ],
                "pps_chain.extend": [
                    2046,
                    2047
                ],
                "files_to_delete": [
                    2049,
                    2051,
                    2054,
                    2055
                ],
                "pp.run": [
                    2051
                ],
                "old_filename": [
                    2056,
                    2058,
                    2055
                ],
                "os.remove": [
                    2058
                ],
                "extractor": [
                    2065,
                    2066,
                    2068,
                    2069,
                    2071
                ],
                "extractor.lower": [
                    2071
                ],
                "fn": [
                    2083,
                    2093,
                    2094,
                    2098,
                    2074,
                    2075
                ],
                "vid_id": [
                    2085,
                    2096,
                    2097,
                    2099,
                    2078,
                    2079
                ],
                "self._make_archive_id": [
                    2096,
                    2078
                ],
                "locked_file": [
                    2098,
                    2083
                ],
                "archive_file": [
                    2099,
                    2098,
                    2083,
                    2084
                ],
                "line.strip": [
                    2085
                ],
                "ioe.errno": [
                    2088
                ],
                "ioe": [
                    2088
                ],
                "archive_file.write": [
                    2099
                ],
                "default": [
                    2115
                ],
                "fdict.get": [
                    2145,
                    2149,
                    2120,
                    2122,
                    2156,
                    2126,
                    2128,
                    2160,
                    2130,
                    2162,
                    2164,
                    2134,
                    2135,
                    2168,
                    2139,
                    2141,
                    2143
                ],
                "fdict": [
                    2120,
                    2122,
                    2125,
                    2126,
                    2127,
                    2128,
                    2129,
                    2130,
                    2133,
                    2134,
                    2135,
                    2138,
                    2139,
                    2141,
                    2143,
                    2144,
                    2145,
                    2148,
                    2149,
                    2152,
                    2155,
                    2156,
                    2160,
                    2161,
                    2162,
                    2163,
                    2164,
                    2167,
                    2168,
                    2171
                ],
                "format_bytes": [
                    2171,
                    2167
                ],
                "table": [
                    2176,
                    2186,
                    2181
                ],
                "self._format_note": [
                    2177
                ],
                "header_line": [
                    2186,
                    2183
                ],
                "render_table": [
                    2186,
                    2196,
                    2206
                ],
                "reversed": [
                    2208
                ],
                "req": [
                    2213,
                    2214,
                    2215
                ],
                "compat_basestring": [
                    2213
                ],
                "self._opener.open": [
                    2215
                ],
                "self._opener": [
                    2343,
                    2277,
                    2215
                ],
                "self._socket_timeout": [
                    2295,
                    2215
                ],
                "stdout_encoding": [
                    2232,
                    2226
                ],
                "__name__": [
                    2227
                ],
                "encoding_str": [
                    2234,
                    2228
                ],
                "locale.getpreferredencoding": [
                    2230
                ],
                "locale": [
                    2230
                ],
                "self.get_encoding": [
                    2233,
                    2350
                ],
                "__version__": [
                    2236,
                    2287
                ],
                "_LAZY_LOADER": [
                    2237
                ],
                "sp": [
                    2240,
                    2244
                ],
                "os.path.abspath": [
                    2243
                ],
                "__file__": [
                    2243
                ],
                "sp.communicate": [
                    2244
                ],
                "strip": [
                    2245
                ],
                "out.decode": [
                    2245
                ],
                "sys.exc_clear": [
                    2250
                ],
                "impl_name": [
                    2256,
                    2257,
                    2258,
                    2255
                ],
                "platform.python_implementation": [
                    2255
                ],
                "platform": [
                    2261,
                    2255
                ],
                "sys.pypy_version_info": [
                    2257
                ],
                "platform.python_version": [
                    2261
                ],
                "python_implementation": [
                    2261
                ],
                "platform_name": [
                    2262
                ],
                "exe_versions": [
                    2264,
                    2265,
                    2266,
                    2269
                ],
                "FFmpegPostProcessor.get_versions": [
                    2264
                ],
                "FFmpegPostProcessor": [
                    2264
                ],
                "rtmpdump_version": [
                    2265
                ],
                "PhantomJSwrapper._version": [
                    2266
                ],
                "PhantomJSwrapper": [
                    2266
                ],
                "exe_str": [
                    2272,
                    2273,
                    2274,
                    2267
                ],
                "exe": [
                    2268,
                    2269
                ],
                "sorted": [
                    2269
                ],
                "exe_versions.items": [
                    2269
                ],
                "proxy_map": [
                    2280,
                    2276,
                    2279
                ],
                "handler": [
                    2277,
                    2278,
                    2279
                ],
                "self._opener.handlers": [
                    2277
                ],
                "proxy_map.update": [
                    2279
                ],
                "handler.proxies": [
                    2279
                ],
                "ipaddr": [
                    2283,
                    2284
                ],
                "self.urlopen": [
                    2283,
                    2388,
                    2285
                ],
                "latest_version": [
                    2291,
                    2285,
                    2287
                ],
                "version_tuple": [
                    2287
                ],
                "timeout_val": [
                    2294,
                    2295
                ],
                "float": [
                    2295
                ],
                "opts_cookiefile": [
                    2304,
                    2305,
                    2297,
                    2300,
                    2303
                ],
                "opts_proxy": [
                    2313,
                    2298,
                    2309,
                    2310
                ],
                "compat_cookiejar.CookieJar": [
                    2301
                ],
                "compat_cookiejar": [
                    2301
                ],
                "YoutubeDLCookieJar": [
                    2304
                ],
                "os.access": [
                    2305
                ],
                "os.R_OK": [
                    2305
                ],
                "self.cookiejar.load": [
                    2306
                ],
                "cookie_processor": [
                    2337,
                    2308
                ],
                "YoutubeDLCookieProcessor": [
                    2308
                ],
                "proxies": [
                    2311,
                    2313,
                    2315,
                    2317,
                    2318,
                    2319
                ],
                "compat_urllib_request.getproxies": [
                    2315
                ],
                "compat_urllib_request": [
                    2336,
                    2330,
                    2315
                ],
                "proxy_handler": [
                    2337,
                    2319
                ],
                "PerRequestProxyHandler": [
                    2319
                ],
                "debuglevel": [
                    2321,
                    2322,
                    2323
                ],
                "https_handler": [
                    2337,
                    2322
                ],
                "make_HTTPS_handler": [
                    2322
                ],
                "ydlh": [
                    2337,
                    2323
                ],
                "YoutubeDLHandler": [
                    2323
                ],
                "data_handler": [
                    2337,
                    2324
                ],
                "compat_urllib_request_DataHandler": [
                    2324
                ],
                "file_handler": [
                    2337,
                    2330,
                    2334
                ],
                "compat_urllib_request.FileHandler": [
                    2330
                ],
                "file_handler.file_open": [
                    2334
                ],
                "file_open": [
                    2334
                ],
                "opener": [
                    2336,
                    2342,
                    2343
                ],
                "compat_urllib_request.build_opener": [
                    2336
                ],
                "opener.addheaders": [
                    2342
                ],
                "s.encode": [
                    2350
                ],
                "err.reason": [
                    2352
                ],
                "encoding": [
                    2356,
                    2357,
                    2358,
                    2359
                ],
                "thumb_ext": [
                    2376,
                    2379
                ],
                "suffix": [
                    2377,
                    2379
                ],
                "thumb_display_id": [
                    2392,
                    2378,
                    2386,
                    2383
                ],
                "thumb_filename": [
                    2392,
                    2379,
                    2389,
                    2381
                ],
                "uf": [
                    2388,
                    2390
                ],
                "open": [
                    2389
                ],
                "thumbf": [
                    2389,
                    2390
                ],
                "shutil.copyfileobj": [
                    2390
                ],
                "shutil": [
                    2390
                ]
            },
            "filtered_variables_in_file": {
                "compat_os_name": [
                    550,
                    616,
                    110,
                    528,
                    604,
                    541
                ],
                "_NUMERIC_FIELDS": [
                    321
                ],
                "params": [
                    355,
                    332,
                    402,
                    341,
                    342,
                    373,
                    410,
                    349
                ],
                "_ies": [
                    333
                ],
                "_pps": [
                    334
                ],
                "_download_retcode": [
                    335
                ],
                "_num_downloads": [
                    336
                ],
                "_screen_file": [
                    337
                ],
                "self._ies": [
                    451,
                    781,
                    343
                ],
                "self": [
                    2053,
                    2054,
                    2056,
                    2060,
                    2074,
                    2078,
                    2093,
                    2096,
                    2177,
                    2184,
                    2191,
                    2194,
                    2196,
                    2202,
                    2204,
                    2206,
                    2215,
                    2218,
                    2223,
                    2233,
                    2236,
                    2238,
                    2247,
                    2260,
                    2264,
                    2274,
                    2277,
                    2280,
                    2282,
                    2283,
                    2284,
                    2285,
                    2288,
                    2294,
                    2295,
                    2297,
                    2298,
                    2301,
                    2304,
                    2306,
                    2308,
                    2321,
                    2322,
                    2323,
                    2343,
                    2350,
                    2356,
                    2362,
                    2366,
                    2381,
                    2382,
                    2385,
                    2388,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    2391,
                    2394,
                    355,
                    356,
                    359,
                    360,
                    366,
                    367,
                    385,
                    387,
                    391,
                    393,
                    396,
                    404,
                    408,
                    411,
                    415,
                    418,
                    419,
                    421,
                    425,
                    426,
                    428,
                    429,
                    444,
                    451,
                    453,
                    454,
                    462,
                    465,
                    473,
                    477,
                    478,
                    482,
                    485,
                    488,
                    491,
                    492,
                    493,
                    499,
                    502,
                    506,
                    507,
                    508,
                    509,
                    513,
                    518,
                    519,
                    521,
                    523,
                    526,
                    534,
                    537,
                    539,
                    543,
                    546,
                    548,
                    552,
                    555,
                    556,
                    559,
                    561,
                    562,
                    574,
                    575,
                    585,
                    586,
                    592,
                    599,
                    600,
                    602,
                    604,
                    609,
                    616,
                    621,
                    626,
                    628,
                    636,
                    639,
                    650,
                    657,
                    677,
                    716,
                    726,
                    730,
                    736,
                    741,
                    744,
                    747,
                    749,
                    753,
                    779,
                    781,
                    787,
                    789,
                    802,
                    804,
                    813,
                    816,
                    821,
                    822,
                    827,
                    830,
                    849,
                    852,
                    853,
                    857,
                    858,
                    862,
                    868,
                    895,
                    900,
                    904,
                    905,
                    910,
                    932,
                    943,
                    968,
                    971,
                    977,
                    996,
                    998,
                    1001,
                    1006,
                    1009,
                    1014,
                    1025,
                    1098,
                    1102,
                    1106,
                    1308,
                    1314,
                    1320,
                    1321,
                    1346,
                    1363,
                    1364,
                    1367,
                    1370,
                    1372,
                    1373,
                    1379,
                    1391,
                    1404,
                    1416,
                    1428,
                    1461,
                    1462,
                    1502,
                    1504,
                    1506,
                    1509,
                    1525,
                    1563,
                    1577,
                    1590,
                    1591,
                    1594,
                    1596,
                    1597,
                    1598,
                    1600,
                    1635,
                    1639,
                    1647,
                    1649,
                    1654,
                    1655,
                    1659,
                    1662,
                    1663,
                    1669,
                    1675,
                    1687,
                    1698,
                    1700,
                    1710,
                    1712,
                    1715,
                    1717,
                    1720,
                    1721,
                    1722,
                    1723,
                    1724,
                    1727,
                    1730,
                    1731,
                    1732,
                    1733,
                    1734,
                    1735,
                    1736,
                    1737,
                    1738,
                    1739,
                    1740,
                    1741,
                    1742,
                    1745,
                    1758,
                    1764,
                    1766,
                    1767,
                    1769,
                    1772,
                    1776,
                    1779,
                    1781,
                    1782,
                    1785,
                    1789,
                    1791,
                    1794,
                    1795,
                    1801,
                    1805,
                    1806,
                    1808,
                    1816,
                    1825,
                    1829,
                    1831,
                    1832,
                    1834,
                    1836,
                    1838,
                    1841,
                    1843,
                    1846,
                    1847,
                    1849,
                    1850,
                    1856,
                    1859,
                    1886,
                    1888,
                    1893,
                    1901,
                    1914,
                    1919,
                    1924,
                    1933,
                    1936,
                    1941,
                    1950,
                    1955,
                    1960,
                    1969,
                    1971,
                    1974,
                    1979,
                    1986,
                    1988,
                    1990,
                    1994,
                    1998,
                    2004,
                    2005,
                    2007,
                    2009,
                    2012,
                    2013,
                    2015,
                    2022,
                    2024,
                    2028,
                    2029,
                    2032,
                    2047
                ],
                "self._ies_instances": [
                    344,
                    453,
                    462
                ],
                "self._pps": [
                    345,
                    477,
                    2047
                ],
                "self._progress_hooks": [
                    346,
                    482,
                    1847
                ],
                "self._download_retcode": [
                    592,
                    2032,
                    347,
                    2015
                ],
                "self._num_downloads": [
                    1700,
                    1715,
                    348,
                    639
                ],
                "self._screen_file": [
                    513,
                    552,
                    534,
                    349,
                    543
                ],
                "sys.stdout": [
                    2227,
                    349
                ],
                "sys": [
                    577,
                    579,
                    580,
                    712,
                    2250,
                    587,
                    588,
                    590,
                    400,
                    401,
                    2256,
                    2227,
                    2257,
                    2231,
                    349,
                    350
                ],
                "sys.stderr": [
                    349,
                    350
                ],
                "params.get": [
                    373,
                    410,
                    349,
                    402
                ],
                "self._err_file": [
                    385,
                    616,
                    523,
                    604,
                    350
                ],
                "self.params": [
                    518,
                    519,
                    2054,
                    526,
                    537,
                    2074,
                    539,
                    546,
                    548,
                    2093,
                    561,
                    1590,
                    1594,
                    1597,
                    575,
                    586,
                    1102,
                    1106,
                    599,
                    600,
                    602,
                    604,
                    616,
                    1647,
                    1649,
                    1654,
                    1655,
                    1659,
                    636,
                    1662,
                    1663,
                    639,
                    1669,
                    650,
                    657,
                    1698,
                    2218,
                    1720,
                    1722,
                    1724,
                    1731,
                    1733,
                    1735,
                    1737,
                    1739,
                    1741,
                    1745,
                    726,
                    730,
                    736,
                    1764,
                    741,
                    1766,
                    744,
                    2282,
                    747,
                    753,
                    1779,
                    1781,
                    2294,
                    2297,
                    2298,
                    1794,
                    1795,
                    1805,
                    2321,
                    2322,
                    2323,
                    1829,
                    1831,
                    1320,
                    1321,
                    1843,
                    2356,
                    821,
                    1846,
                    1849,
                    2362,
                    2366,
                    2381,
                    849,
                    852,
                    1886,
                    351,
                    355,
                    359,
                    366,
                    367,
                    1924,
                    904,
                    905,
                    910,
                    408,
                    421,
                    428,
                    1969,
                    1461,
                    968,
                    1994,
                    971,
                    1998,
                    2005,
                    2012,
                    1502,
                    502,
                    506,
                    507,
                    508
                ],
                "self.params.update": [
                    355
                ],
                "self.cache": [
                    356
                ],
                "Cache": [
                    356
                ],
                "self.params.get": [
                    518,
                    2054,
                    526,
                    537,
                    2074,
                    539,
                    546,
                    548,
                    2093,
                    561,
                    1590,
                    1594,
                    1597,
                    575,
                    586,
                    1102,
                    1106,
                    599,
                    602,
                    604,
                    616,
                    1647,
                    1649,
                    1654,
                    1655,
                    1659,
                    636,
                    1662,
                    1663,
                    639,
                    1669,
                    650,
                    657,
                    1698,
                    2218,
                    1720,
                    1722,
                    1724,
                    1731,
                    1733,
                    1735,
                    1737,
                    1739,
                    1741,
                    1745,
                    726,
                    730,
                    736,
                    1764,
                    741,
                    1766,
                    744,
                    2282,
                    747,
                    753,
                    1779,
                    1781,
                    2294,
                    2297,
                    2298,
                    1794,
                    1795,
                    1805,
                    2321,
                    1829,
                    1831,
                    1320,
                    1843,
                    2356,
                    821,
                    1849,
                    2362,
                    2366,
                    2381,
                    849,
                    852,
                    1886,
                    359,
                    366,
                    1924,
                    904,
                    905,
                    910,
                    421,
                    428,
                    1969,
                    1461,
                    968,
                    1994,
                    971,
                    1998,
                    2005,
                    2012,
                    1502,
                    502,
                    506,
                    508
                ],
                "param": [
                    359
                ],
                "self.report_warning": [
                    1416,
                    1675,
                    396,
                    1933,
                    2060,
                    404,
                    789,
                    1941,
                    1687,
                    411,
                    1950,
                    1825,
                    1960,
                    2223,
                    1971,
                    1979,
                    444,
                    1859,
                    2394,
                    1888,
                    360,
                    1769,
                    2028,
                    2288,
                    1009,
                    1525,
                    1789
                ],
                "option": [
                    361
                ],
                "suggestion": [
                    361
                ],
                "check_deprecated": [
                    369,
                    370,
                    371,
                    365
                ],
                "master": [
                    376,
                    393
                ],
                "slave": [
                    376,
                    384
                ],
                "pty.openpty": [
                    376
                ],
                "pty": [
                    376
                ],
                "width": [
                    377,
                    378,
                    381
                ],
                "columns": [
                    377
                ],
                "compat_get_terminal_size": [
                    377
                ],
                "width_args": [
                    392,
                    379,
                    388,
                    381
                ],
                "sp_kwargs": [
                    392,
                    388,
                    382
                ],
                "subprocess.PIPE": [
                    2242,
                    383
                ],
                "subprocess": [
                    2240,
                    2242,
                    387,
                    391,
                    383
                ],
                "self._output_process": [
                    387,
                    491,
                    492,
                    391
                ],
                "subprocess.Popen": [
                    2240,
                    387,
                    391
                ],
                "self._output_channel": [
                    393,
                    493
                ],
                "os.fdopen": [
                    393
                ],
                "os": [
                    2305,
                    393,
                    2058,
                    1805,
                    533,
                    541,
                    550,
                    1831,
                    2243,
                    2379,
                    2381,
                    1880,
                    1753,
                    1882,
                    1754,
                    1755,
                    1892,
                    1766,
                    1781
                ],
                "ose.errno": [
                    395
                ],
                "ose": [
                    395
                ],
                "errno.ENOENT": [
                    2088,
                    395
                ],
                "errno": [
                    2088,
                    395
                ],
                "sys.platform": [
                    400,
                    712
                ],
                "sys.getfilesystemencoding": [
                    401,
                    2231
                ],
                "self._setup_opener": [
                    415
                ],
                "auto_init": [
                    417
                ],
                "self.print_debug_header": [
                    418
                ],
                "self.add_default_info_extractors": [
                    419
                ],
                "pp_def_raw": [
                    421,
                    422,
                    423
                ],
                "pp_class": [
                    425,
                    422
                ],
                "get_postprocessor": [
                    422
                ],
                "pp_def": [
                    424,
                    425,
                    423
                ],
                "pp": [
                    2048,
                    2051,
                    425,
                    426,
                    477,
                    478
                ],
                "compat_kwargs": [
                    425
                ],
                "self.add_post_processor": [
                    426
                ],
                "ph": [
                    482,
                    428,
                    429,
                    1847,
                    1848
                ],
                "self.add_progress_hook": [
                    429
                ],
                "register_socks_protocols": [
                    431
                ],
                "idxs": [
                    441,
                    442,
                    435,
                    438
                ],
                "i": [
                    928,
                    929,
                    1539,
                    1544,
                    1454,
                    976,
                    977,
                    1459,
                    436,
                    1556,
                    1557,
                    1559,
                    441,
                    442,
                    989
                ],
                "a": [
                    441,
                    436,
                    437
                ],
                "argv": [
                    441,
                    442,
                    436
                ],
                "re.match": [
                    437,
                    2246
                ],
                "re": [
                    732,
                    2246,
                    1547,
                    1070,
                    1043,
                    692,
                    437,
                    1075,
                    728,
                    1048,
                    666,
                    668
                ],
                "correct_argv": [
                    447,
                    439
                ],
                "args_to_str": [
                    447
                ],
                "self._ies.append": [
                    451
                ],
                "ie": [
                    1801,
                    783,
                    784,
                    787,
                    788,
                    793,
                    1820,
                    802,
                    831,
                    834,
                    451,
                    452,
                    453,
                    454,
                    462,
                    463,
                    464,
                    465,
                    466,
                    472,
                    473
                ],
                "ie.ie_key": [
                    834,
                    787,
                    453
                ],
                "ie.set_downloader": [
                    454
                ],
                "self._ies_instances.get": [
                    462
                ],
                "ie_key": [
                    775,
                    776,
                    778,
                    779,
                    462,
                    464
                ],
                "get_info_extractor": [
                    464
                ],
                "self.add_info_extractor": [
                    465,
                    473
                ],
                "gen_extractor_classes": [
                    472
                ],
                "self._pps.append": [
                    477
                ],
                "pp.set_downloader": [
                    478
                ],
                "self._progress_hooks.append": [
                    482
                ],
                "message": [
                    517,
                    519,
                    521,
                    522,
                    532,
                    534,
                    573,
                    574,
                    591,
                    600,
                    608,
                    1121,
                    1124,
                    486,
                    489,
                    490,
                    491,
                    620,
                    499,
                    507,
                    509,
                    511
                ],
                "compat_str": [
                    517,
                    1544,
                    489,
                    649,
                    2280,
                    2221,
                    1422,
                    816,
                    1425
                ],
                "line_count": [
                    490,
                    494
                ],
                "message.count": [
                    490
                ],
                "self._output_process.stdin.write": [
                    491
                ],
                "self._output_process.stdin": [
                    491,
                    492
                ],
                "encode": [
                    491
                ],
                "self._output_process.stdin.flush": [
                    492
                ],
                "res": [
                    2167,
                    2169,
                    2170,
                    2109,
                    2111,
                    2113,
                    2115,
                    2116,
                    2119,
                    2121,
                    2123,
                    2124,
                    2125,
                    2127,
                    2129,
                    2131,
                    2004,
                    2132,
                    2133,
                    2136,
                    2137,
                    2138,
                    2140,
                    2013,
                    2142,
                    2144,
                    2146,
                    2147,
                    2148,
                    2150,
                    2151,
                    1385,
                    2153,
                    2155,
                    1389,
                    493,
                    495,
                    2157,
                    1393,
                    2158,
                    1395,
                    2159,
                    2161,
                    1398,
                    2163,
                    1400,
                    2165,
                    2166,
                    2171,
                    2172
                ],
                "join": [
                    2208,
                    580,
                    2022,
                    584,
                    810,
                    493,
                    1136,
                    1075,
                    1048,
                    2267,
                    700,
                    1117
                ],
                "decode": [
                    2285,
                    713,
                    2283,
                    493
                ],
                "self._output_channel.readline": [
                    493
                ],
                "_": [
                    1134,
                    494,
                    1492,
                    1174,
                    700
                ],
                "self.to_stdout": [
                    1730,
                    1732,
                    1734,
                    1736,
                    1738,
                    1740,
                    1742,
                    499,
                    853,
                    1721,
                    1850,
                    1723,
                    2013,
                    1598,
                    1727
                ],
                "skip_eol": [
                    499,
                    510
                ],
                "write_string": [
                    2234,
                    502
                ],
                "s": [
                    2346,
                    2347,
                    1229,
                    2350,
                    502,
                    1239
                ],
                "out": [
                    2244,
                    2245,
                    2246,
                    2247,
                    502
                ],
                "debug": [
                    507
                ],
                "check_quiet": [
                    508
                ],
                "self._bidi_workaround": [
                    521,
                    509
                ],
                "terminator": [
                    510,
                    511
                ],
                "output": [
                    513,
                    522,
                    523,
                    511
                ],
                "self._write_string": [
                    513,
                    2274,
                    2247,
                    552,
                    2280,
                    523,
                    2284,
                    2260,
                    534,
                    2236,
                    2238,
                    543
                ],
                "error": [
                    519
                ],
                "ctypes.windll.kernel32.GetConsoleWindow": [
                    529
                ],
                "ctypes.windll.kernel32": [
                    529,
                    532
                ],
                "ctypes.windll": [
                    529,
                    532
                ],
                "ctypes": [
                    529,
                    532
                ],
                "ctypes.windll.kernel32.SetConsoleTitleW": [
                    532
                ],
                "ctypes.c_wchar_p": [
                    532
                ],
                "os.environ": [
                    541,
                    533,
                    550
                ],
                "self.save_console_title": [
                    555
                ],
                "self.restore_console_title": [
                    559
                ],
                "self.cookiejar.save": [
                    562
                ],
                "self.cookiejar": [
                    2304,
                    2306,
                    2308,
                    562,
                    1404,
                    2301
                ],
                "self.to_stderr": [
                    585,
                    574,
                    609
                ],
                "tb": [
                    576,
                    578,
                    580,
                    581,
                    584,
                    585,
                    621
                ],
                "sys.exc_info": [
                    577,
                    579,
                    580,
                    587,
                    588,
                    590
                ],
                "exc_info": [
                    579,
                    580,
                    587,
                    588,
                    590,
                    591
                ],
                "traceback.format_exception": [
                    580
                ],
                "traceback": [
                    580,
                    581,
                    822,
                    583
                ],
                "encode_compat_str": [
                    581,
                    822
                ],
                "traceback.format_exc": [
                    581,
                    822
                ],
                "tb_data": [
                    584,
                    583
                ],
                "traceback.format_list": [
                    583
                ],
                "traceback.extract_stack": [
                    583
                ],
                "DownloadError": [
                    2025,
                    591
                ],
                "warning": [
                    600
                ],
                "self._err_file.isatty": [
                    616,
                    604
                ],
                "_msg_header": [
                    608,
                    617,
                    619,
                    620,
                    605,
                    607
                ],
                "warning_message": [
                    608,
                    609
                ],
                "error_message": [
                    620,
                    621
                ],
                "self.trouble": [
                    621
                ],
                "self.to_screen": [
                    900,
                    2056,
                    2184,
                    1806,
                    2191,
                    1808,
                    2194,
                    2196,
                    2202,
                    2204,
                    2206,
                    932,
                    1832,
                    1834,
                    943,
                    1712,
                    2382,
                    977,
                    2385,
                    2391,
                    2009,
                    1635,
                    1893,
                    998,
                    1767,
                    1772,
                    1006,
                    626,
                    628,
                    1782,
                    1785
                ],
                "file_name": [
                    626
                ],
                "template_dict": [
                    640,
                    641,
                    642,
                    643,
                    644,
                    645,
                    646,
                    678,
                    707,
                    652,
                    653,
                    655,
                    662,
                    633,
                    635,
                    639
                ],
                "info_dict": [
                    2065,
                    2067,
                    2068,
                    2071,
                    2078,
                    1575,
                    1579,
                    1580,
                    1584,
                    2096,
                    1589,
                    1591,
                    1596,
                    1108,
                    1635,
                    1637,
                    1641,
                    1642,
                    633,
                    2175,
                    2186,
                    2189,
                    2191,
                    2195,
                    1696,
                    1703,
                    1704,
                    1705,
                    1707,
                    1708,
                    1710,
                    1717,
                    1721,
                    1723,
                    1725,
                    1726,
                    1730,
                    1731,
                    1732,
                    1733,
                    1734,
                    1737,
                    1738,
                    1740,
                    1742,
                    722,
                    723,
                    725,
                    734,
                    739,
                    1765,
                    1768,
                    747,
                    749,
                    1774,
                    755,
                    1780,
                    1787,
                    765,
                    1797,
                    1800,
                    1801,
                    1821,
                    1830,
                    1836,
                    1841,
                    2363,
                    1853,
                    2367,
                    2383,
                    2386,
                    2392,
                    1883,
                    1885,
                    1887,
                    1891,
                    1898,
                    1387,
                    1391,
                    1396,
                    1908,
                    1909,
                    1912,
                    1403,
                    1408,
                    1410,
                    1412,
                    1930,
                    1934,
                    1938,
                    1939,
                    1943,
                    1435,
                    1436,
                    1947,
                    1438,
                    1948,
                    1440,
                    1441,
                    1953,
                    1443,
                    1445,
                    1957,
                    1447,
                    1958,
                    1963,
                    1967,
                    1968,
                    1972,
                    1462,
                    1976,
                    1465,
                    1977,
                    1467,
                    1469,
                    1981,
                    1471,
                    1472,
                    1474,
                    1986,
                    1478,
                    1479,
                    1990,
                    1486,
                    1487,
                    1490,
                    1499,
                    1500,
                    1503,
                    1505,
                    1506,
                    1509,
                    1510,
                    1513,
                    1515,
                    1517,
                    2037
                ],
                "time.time": [
                    635
                ],
                "time": [
                    635
                ],
                "autonumber_size": [
                    636,
                    637,
                    638,
                    663
                ],
                "template_dict.get": [
                    640,
                    641,
                    643,
                    645
                ],
                "sanitize": [
                    648,
                    652
                ],
                "sanitize_filename": [
                    648
                ],
                "v": [
                    649,
                    652,
                    653,
                    654,
                    879,
                    2037,
                    2268,
                    2269,
                    2270
                ],
                "k": [
                    651,
                    652,
                    653,
                    879,
                    2037,
                    2038
                ],
                "k.endswith": [
                    651
                ],
                "compat_numeric_types": [
                    652,
                    1430
                ],
                "template_dict.items": [
                    653
                ],
                "collections.defaultdict": [
                    655
                ],
                "collections": [
                    1130,
                    655
                ],
                "outtmpl": [
                    707,
                    1994,
                    1996,
                    1997,
                    1999,
                    657,
                    692,
                    694,
                    666,
                    668,
                    701,
                    671
                ],
                "DEFAULT_OUTTMPL": [
                    657,
                    1106,
                    1994
                ],
                "field_size_compat_map": [
                    661,
                    670
                ],
                "FIELD_SIZE_COMPAT_RE": [
                    665,
                    666,
                    669
                ],
                "mobj": [
                    666,
                    667,
                    670
                ],
                "re.search": [
                    728,
                    666,
                    732
                ],
                "re.sub": [
                    692,
                    1547,
                    668
                ],
                "mobj.group": [
                    670
                ],
                "numeric_field": [
                    677,
                    678,
                    1428,
                    693,
                    694,
                    1429,
                    1432,
                    1433
                ],
                "self._NUMERIC_FIELDS": [
                    1428,
                    677
                ],
                "FORMAT_RE": [
                    682,
                    693
                ],
                "FORMAT_RE.format": [
                    693
                ],
                "sep": [
                    707,
                    700,
                    701
                ],
                "random.choice": [
                    700
                ],
                "random": [
                    972,
                    700
                ],
                "ascii_letters": [
                    700
                ],
                "replace": [
                    707,
                    701
                ],
                "outtmpl.replace": [
                    701
                ],
                "filename": [
                    1922,
                    1804,
                    1830,
                    1841,
                    1717,
                    1986,
                    707,
                    1735,
                    1736,
                    713,
                    714,
                    2379,
                    1748,
                    1880,
                    1882,
                    1884,
                    1761,
                    1891,
                    1892,
                    1765,
                    1895,
                    1780,
                    1912,
                    2043
                ],
                "expand_path": [
                    707,
                    2303
                ],
                "sys.version_info": [
                    712
                ],
                "encodeFilename": [
                    1761,
                    1892,
                    1766,
                    1831,
                    713,
                    2058,
                    1773,
                    1805,
                    2381,
                    1781,
                    1813,
                    2389,
                    1786,
                    1822
                ],
                "preferredencoding": [
                    713,
                    716,
                    2358
                ],
                "sanitize_path": [
                    1761,
                    714
                ],
                "self.report_error": [
                    1314,
                    1988,
                    2053,
                    716,
                    813,
                    1838,
                    816,
                    1776,
                    2007,
                    822,
                    1919,
                    1816,
                    1914,
                    827,
                    1308,
                    1758,
                    1791
                ],
                "err": [
                    1826,
                    1988,
                    2244,
                    716,
                    2352,
                    1914,
                    2395,
                    1917,
                    1758,
                    1919
                ],
                "video_title": [
                    743,
                    746,
                    748,
                    750,
                    722
                ],
                "info_dict.get": [
                    1408,
                    1797,
                    1930,
                    2189,
                    2065,
                    2068,
                    1947,
                    1948,
                    1696,
                    1443,
                    1445,
                    1830,
                    1967,
                    1968,
                    1465,
                    2363,
                    1725,
                    1853,
                    2367,
                    1474,
                    1730,
                    1731,
                    1733,
                    1737,
                    1486,
                    722,
                    1490,
                    1108,
                    1499,
                    1500,
                    734,
                    739,
                    1765,
                    1768,
                    1513,
                    747,
                    1387,
                    1396,
                    1780,
                    2175
                ],
                "title": [
                    725,
                    728,
                    729,
                    732,
                    733
                ],
                "matchtitle": [
                    728,
                    729,
                    726,
                    727
                ],
                "re.IGNORECASE": [
                    728,
                    732
                ],
                "rejecttitle": [
                    730,
                    731,
                    732,
                    733
                ],
                "date": [
                    737,
                    738,
                    734,
                    735
                ],
                "dateRange": [
                    736,
                    737,
                    738
                ],
                "DateRange": [
                    736
                ],
                "isoformat": [
                    738
                ],
                "date_from_str": [
                    738
                ],
                "view_count": [
                    739,
                    740,
                    742,
                    743,
                    745,
                    746
                ],
                "min_views": [
                    741,
                    742,
                    743
                ],
                "max_views": [
                    744,
                    745,
                    746
                ],
                "age_restricted": [
                    747
                ],
                "self.in_download_archive": [
                    749
                ],
                "incomplete": [
                    752
                ],
                "match_filter": [
                    753,
                    754,
                    755
                ],
                "ret": [
                    755,
                    756,
                    757
                ],
                "key": [
                    764,
                    765
                ],
                "value": [
                    1066,
                    1067,
                    1068,
                    1372,
                    764,
                    765,
                    1374
                ],
                "extra_info.items": [
                    764
                ],
                "extra_info": [
                    896,
                    865,
                    1025,
                    804,
                    870,
                    850,
                    857,
                    764
                ],
                "info_dict.setdefault": [
                    1976,
                    1938,
                    765,
                    1957
                ],
                "force_generic_extractor": [
                    775
                ],
                "ies": [
                    779,
                    781,
                    783
                ],
                "self.get_info_extractor": [
                    787,
                    1801,
                    779
                ],
                "ie.suitable": [
                    784
                ],
                "url": [
                    832,
                    833,
                    802,
                    1529,
                    784,
                    2001,
                    1523,
                    1524,
                    2005,
                    793,
                    827
                ],
                "ie.working": [
                    788
                ],
                "ie_result": [
                    1024,
                    1026,
                    899,
                    1028,
                    793,
                    794,
                    923,
                    796,
                    798,
                    800,
                    802,
                    804,
                    806,
                    934,
                    945,
                    830,
                    845,
                    974,
                    848,
                    853,
                    854,
                    857,
                    858,
                    985,
                    986,
                    987,
                    862,
                    988,
                    864,
                    990,
                    991,
                    992,
                    993,
                    869,
                    1005,
                    879,
                    1007,
                    1011,
                    1017,
                    1018,
                    1019,
                    1020
                ],
                "ie.extract": [
                    793
                ],
                "self.add_default_extra_info": [
                    802
                ],
                "process": [
                    803
                ],
                "self.process_ie_result": [
                    1025,
                    804,
                    2024,
                    1001,
                    895
                ],
                "download": [
                    896,
                    1025,
                    1633,
                    804,
                    1002,
                    1104,
                    858,
                    1596,
                    863
                ],
                "GeoRestrictedError": [
                    807
                ],
                "msg": [
                    808,
                    810,
                    812,
                    813
                ],
                "e.msg": [
                    808,
                    2053
                ],
                "e": [
                    2053,
                    808,
                    809,
                    811,
                    816,
                    822
                ],
                "e.countries": [
                    809,
                    811
                ],
                "ISO3166Utils.short2full": [
                    811
                ],
                "ISO3166Utils": [
                    811
                ],
                "ExtractorError": [
                    1824,
                    1411,
                    1413,
                    815,
                    1520,
                    1630
                ],
                "e.format_traceback": [
                    816
                ],
                "MaxDownloadsReached": [
                    2008,
                    818,
                    1701
                ],
                "error_to_compat_str": [
                    1826,
                    822,
                    1914,
                    2395,
                    1758
                ],
                "self.add_extra_info": [
                    857,
                    830,
                    1014
                ],
                "ie.IE_NAME": [
                    831
                ],
                "url_basename": [
                    992,
                    833,
                    1019
                ],
                "result_type": [
                    897,
                    866,
                    1030,
                    845,
                    847,
                    1008,
                    856,
                    859
                ],
                "ie_result.get": [
                    864,
                    899,
                    869,
                    845,
                    974,
                    1011,
                    985,
                    986,
                    987,
                    988
                ],
                "sanitize_url": [
                    1542,
                    1455,
                    848,
                    1495,
                    1467
                ],
                "extract_flat": [
                    849,
                    850,
                    851
                ],
                "json.dumps": [
                    2013,
                    853,
                    1742
                ],
                "json": [
                    2013,
                    2022,
                    853,
                    1742
                ],
                "self.process_video_result": [
                    858
                ],
                "self.extract_info": [
                    2004,
                    868,
                    862
                ],
                "info": [
                    2042,
                    2051,
                    868,
                    2022,
                    2043,
                    2024,
                    2026,
                    875,
                    876,
                    1421,
                    1425,
                    883,
                    1429,
                    1846,
                    1433,
                    1850,
                    1851
                ],
                "force_properties": [
                    881,
                    882,
                    884,
                    878
                ],
                "ie_result.items": [
                    879
                ],
                "f": [
                    2177,
                    2178,
                    1283,
                    1284,
                    2179,
                    1289,
                    1290,
                    1679,
                    1296,
                    1681,
                    1298,
                    1683,
                    1686,
                    1304,
                    1689,
                    1690,
                    2208,
                    1726,
                    1727,
                    1089,
                    1346,
                    1232,
                    1233,
                    1619,
                    1621,
                    1242,
                    1243,
                    2020,
                    2022,
                    1255,
                    1256,
                    1897,
                    1899,
                    1260,
                    1261,
                    1902,
                    880,
                    881,
                    882,
                    1523,
                    1271,
                    1272,
                    1530,
                    1277,
                    1278
                ],
                "new_result": [
                    896,
                    883,
                    884,
                    892,
                    893
                ],
                "info.copy": [
                    883
                ],
                "new_result.update": [
                    884
                ],
                "new_result.get": [
                    892
                ],
                "playlist": [
                    899,
                    900,
                    934,
                    1006,
                    945,
                    984
                ],
                "playlist_results": [
                    1004,
                    1005,
                    902
                ],
                "playliststart": [
                    964,
                    904,
                    941,
                    955,
                    989
                ],
                "playlistend": [
                    964,
                    905,
                    907,
                    908,
                    941,
                    955
                ],
                "playlistitems_str": [
                    912,
                    921,
                    910
                ],
                "playlistitems": [
                    928,
                    961,
                    938,
                    911,
                    947,
                    949,
                    921,
                    959
                ],
                "string_segment": [
                    920,
                    914,
                    915,
                    916
                ],
                "format.split": [
                    914
                ],
                "start": [
                    1152,
                    1153,
                    1217,
                    1123,
                    1220,
                    1160,
                    1194,
                    1164,
                    1134,
                    1199,
                    916,
                    917,
                    1174,
                    1145,
                    1210,
                    1150
                ],
                "end": [
                    1152,
                    1153,
                    1160,
                    1165,
                    916,
                    917,
                    1145,
                    1150
                ],
                "string_segment.split": [
                    916
                ],
                "item": [
                    951,
                    917,
                    918,
                    949
                ],
                "orderedSet": [
                    921
                ],
                "iter_playlistitems": [
                    921
                ],
                "ie_entries": [
                    961,
                    964,
                    936,
                    937,
                    939,
                    941,
                    946,
                    950,
                    954,
                    923
                ],
                "num_entries": [
                    929,
                    934,
                    926
                ],
                "list_ie_entries": [
                    928,
                    926
                ],
                "n_all_entries": [
                    937,
                    945
                ],
                "entries": [
                    960,
                    963,
                    965,
                    969,
                    939,
                    972,
                    941,
                    942,
                    976,
                    948,
                    950,
                    954,
                    956
                ],
                "make_playlistitems_entries": [
                    960,
                    939
                ],
                "n_entries": [
                    965,
                    966,
                    942,
                    945,
                    977,
                    983,
                    956,
                    957
                ],
                "PagedList": [
                    946
                ],
                "entries.extend": [
                    950
                ],
                "ie_entries.getslice": [
                    954,
                    950
                ],
                "report_download": [
                    957,
                    966
                ],
                "itertools.islice": [
                    960,
                    963
                ],
                "itertools": [
                    960,
                    963,
                    1342
                ],
                "random.shuffle": [
                    972
                ],
                "x_forwarded_for": [
                    980,
                    981,
                    974
                ],
                "entry": [
                    976,
                    1001,
                    996,
                    981
                ],
                "extra": [
                    1003,
                    982
                ],
                "reason": [
                    996,
                    997,
                    998,
                    1710,
                    1711,
                    1712
                ],
                "self._match_entry": [
                    996,
                    1710
                ],
                "entry_result": [
                    1001,
                    1004
                ],
                "playlist_results.append": [
                    1004
                ],
                "r": [
                    1025,
                    1026,
                    1023,
                    1015
                ],
                "_fixup": [
                    1025
                ],
                "OPERATORS": [
                    1048,
                    1035,
                    1061
                ],
                "operator.lt": [
                    1036
                ],
                "operator": [
                    1065,
                    1036,
                    1037,
                    1038,
                    1039,
                    1040,
                    1041
                ],
                "operator.le": [
                    1037
                ],
                "operator.gt": [
                    1038
                ],
                "operator.ge": [
                    1039
                ],
                "operator.eq": [
                    1040,
                    1065
                ],
                "operator.ne": [
                    1041
                ],
                "operator_rex": [
                    1049,
                    1043
                ],
                "re.compile": [
                    1043,
                    1070
                ],
                "re.escape": [
                    1048,
                    1075
                ],
                "OPERATORS.keys": [
                    1048
                ],
                "m": [
                    1056,
                    1089,
                    1091,
                    1060,
                    1061,
                    1063,
                    1076,
                    1077,
                    1078,
                    1079,
                    1080,
                    1049,
                    1050,
                    1052,
                    1085,
                    1054
                ],
                "operator_rex.search": [
                    1049
                ],
                "filter_spec": [
                    1086,
                    1049,
                    1060,
                    1076
                ],
                "comparison_value": [
                    1056,
                    1057,
                    1092,
                    1078,
                    1052,
                    1054,
                    1055
                ],
                "m.group": [
                    1056,
                    1089,
                    1091,
                    1060,
                    1061,
                    1078,
                    1079,
                    1080,
                    1052,
                    1054
                ],
                "parse_filesize": [
                    1056,
                    1054
                ],
                "op": [
                    1081,
                    1083,
                    1092,
                    1061
                ],
                "STR_OPERATORS": [
                    1064,
                    1075,
                    1079
                ],
                "attr.startswith": [
                    1066
                ],
                "attr": [
                    1066,
                    1067,
                    1068
                ],
                "attr.endswith": [
                    1067
                ],
                "str_operator_rex": [
                    1076,
                    1070
                ],
                "STR_OPERATORS.keys": [
                    1075
                ],
                "str_operator_rex.search": [
                    1076
                ],
                "str_op": [
                    1081,
                    1083,
                    1079
                ],
                "actual_value": [
                    1089,
                    1090,
                    1092
                ],
                "f.get": [
                    1089,
                    2179,
                    1284,
                    1290,
                    1261,
                    1523,
                    1619,
                    1621,
                    1272,
                    1278,
                    1727
                ],
                "_filter": [
                    1093,
                    1350,
                    1351
                ],
                "merger": [
                    1856,
                    1857,
                    1863,
                    1098,
                    1099
                ],
                "FFmpegMergerPP": [
                    1856,
                    1098
                ],
                "merger.available": [
                    1857,
                    1099
                ],
                "merger.can_merge": [
                    1099
                ],
                "can_merge": [
                    1110
                ],
                "req_format_list": [
                    1114,
                    1116,
                    1117
                ],
                "prefer_best": [
                    1115
                ],
                "req_format_list.reverse": [
                    1116
                ],
                "note": [
                    1123
                ],
                "format_spec": [
                    1248,
                    1281,
                    1123,
                    1254,
                    1287,
                    1257,
                    1258,
                    1355,
                    1295,
                    1296,
                    1359,
                    1298,
                    1269,
                    1275
                ],
                "PICKFIRST": [
                    1202,
                    1238,
                    1126
                ],
                "MERGE": [
                    1218,
                    1302,
                    1127
                ],
                "SINGLE": [
                    1128,
                    1179,
                    1205,
                    1247
                ],
                "GROUP": [
                    1129,
                    1236,
                    1212
                ],
                "FormatSelector": [
                    1218,
                    1130,
                    1202,
                    1205,
                    1179,
                    1212
                ],
                "collections.namedtuple": [
                    1130
                ],
                "filter_parts": [
                    1136,
                    1138,
                    1133
                ],
                "string": [
                    1152,
                    1153,
                    1154,
                    1156,
                    1160,
                    1163,
                    1167,
                    1174,
                    1179,
                    1181,
                    1186,
                    1189,
                    1192,
                    1197,
                    1203,
                    1208,
                    1213,
                    1220,
                    1134,
                    1135,
                    1138,
                    1145,
                    1146,
                    1150
                ],
                "tokens": [
                    1152,
                    1184,
                    1187,
                    1381,
                    1190,
                    1357,
                    1134,
                    1201,
                    1363,
                    1174,
                    1206,
                    1145,
                    1211,
                    1215
                ],
                "tokenize.OP": [
                    1154,
                    1156,
                    1161,
                    1135,
                    1146,
                    1180
                ],
                "tokenize": [
                    1154,
                    1156,
                    1221,
                    1158,
                    1178,
                    1161,
                    1358,
                    1135,
                    1169,
                    1180,
                    1176,
                    1146,
                    1148
                ],
                "filter_parts.append": [
                    1138
                ],
                "ALLOWED_OPS": [
                    1156,
                    1143
                ],
                "last_string": [
                    1157,
                    1158,
                    1159,
                    1162,
                    1163,
                    1167,
                    1168,
                    1169,
                    1144,
                    1147,
                    1148,
                    1149
                ],
                "last_start": [
                    1158,
                    1164,
                    1169,
                    1144,
                    1148
                ],
                "last_end": [
                    1158,
                    1165,
                    1169,
                    1144,
                    1148
                ],
                "last_line": [
                    1144,
                    1169,
                    1148,
                    1158
                ],
                "line": [
                    1152,
                    1153,
                    2084,
                    2085,
                    1160,
                    1145,
                    1150
                ],
                "tokenize.NAME": [
                    1158,
                    1161,
                    1169,
                    1178,
                    1148
                ],
                "tokenize.NUMBER": [
                    1161,
                    1178
                ],
                "selectors": [
                    1224,
                    1225,
                    1195,
                    1172
                ],
                "current_selector": [
                    1218,
                    1223,
                    1224,
                    1193,
                    1195,
                    1196,
                    1198,
                    1200,
                    1202,
                    1204,
                    1173,
                    1205,
                    1207,
                    1209,
                    1179,
                    1212,
                    1214
                ],
                "inside_group": [
                    1182
                ],
                "tokens.restore_last_token": [
                    1184,
                    1187,
                    1190
                ],
                "inside_merge": [
                    1186
                ],
                "inside_choice": [
                    1189
                ],
                "syntax_error": [
                    1217,
                    1220,
                    1194,
                    1199,
                    1359,
                    1210
                ],
                "selectors.append": [
                    1224,
                    1195
                ],
                "first_choice": [
                    1200,
                    1202
                ],
                "second_choice": [
                    1201,
                    1202
                ],
                "_parse_format_selection": [
                    1201,
                    1211,
                    1381,
                    1215
                ],
                "format_filter": [
                    1206,
                    1207
                ],
                "_parse_filter": [
                    1206
                ],
                "current_selector.filters.append": [
                    1207
                ],
                "current_selector.filters": [
                    1207
                ],
                "group": [
                    1211,
                    1212
                ],
                "video_selector": [
                    1216,
                    1218,
                    1339,
                    1214,
                    1343
                ],
                "audio_selector": [
                    1216,
                    1215,
                    1218,
                    1339,
                    1343
                ],
                "tokenize.ENDMARKER": [
                    1221
                ],
                "selector": [
                    1248,
                    1346,
                    1228,
                    1229,
                    1236,
                    1237,
                    1238,
                    1239,
                    1302,
                    1339,
                    1247
                ],
                "fs": [
                    1232,
                    1242,
                    1229,
                    1239
                ],
                "_build_selector_function": [
                    1382,
                    1229,
                    1237,
                    1239,
                    1339
                ],
                "ctx": [
                    1251,
                    1349,
                    1233,
                    1267,
                    1623,
                    1243,
                    1628,
                    1343
                ],
                "selector_function": [
                    1352,
                    1235,
                    1237
                ],
                "selector.type": [
                    1236,
                    1302,
                    1238,
                    1247
                ],
                "selector.selector": [
                    1248,
                    1339,
                    1237,
                    1239
                ],
                "picked_formats": [
                    1243,
                    1244,
                    1245
                ],
                "formats": [
                    2178,
                    1283,
                    1539,
                    2180,
                    1289,
                    1673,
                    1674,
                    1679,
                    1681,
                    1299,
                    1686,
                    1559,
                    2208,
                    2209,
                    1584,
                    1589,
                    1866,
                    1619,
                    1621,
                    1624,
                    1251,
                    1252,
                    1255,
                    1515,
                    1260,
                    1517,
                    1519,
                    1268,
                    1271,
                    1277,
                    1534,
                    2175
                ],
                "format_idx": [
                    1258,
                    1268,
                    1263
                ],
                "audiovideo_formats": [
                    1259,
                    1262,
                    1263
                ],
                "audio_formats": [
                    1280,
                    1270,
                    1273,
                    1274,
                    1276,
                    1279
                ],
                "video_formats": [
                    1282,
                    1285,
                    1286,
                    1288,
                    1291,
                    1292
                ],
                "extensions": [
                    1294,
                    1295
                ],
                "filter_f": [
                    1296,
                    1298,
                    1299
                ],
                "matches": [
                    1681,
                    1682,
                    1299,
                    1300,
                    1301,
                    1683
                ],
                "format_1": [
                    1304,
                    1316,
                    1310
                ],
                "format_2": [
                    1304,
                    1316,
                    1310
                ],
                "formats_info": [
                    1313,
                    1336,
                    1319,
                    1323,
                    1324,
                    1325,
                    1326,
                    1327,
                    1328,
                    1329,
                    1330,
                    1331,
                    1332,
                    1333,
                    1334,
                    1335,
                    1304,
                    1307
                ],
                "get": [
                    1313,
                    1324,
                    1325,
                    1326,
                    1327,
                    1328,
                    1329,
                    1330,
                    1331,
                    1332,
                    1333,
                    1334,
                    1335,
                    1336,
                    1307
                ],
                "output_ext": [
                    1337,
                    1318
                ],
                "pair": [
                    1344,
                    1342
                ],
                "itertools.product": [
                    1342
                ],
                "copy.deepcopy": [
                    1349,
                    1343
                ],
                "copy": [
                    1349,
                    1343
                ],
                "_merge": [
                    1344
                ],
                "filters": [
                    1346,
                    1350
                ],
                "self._build_format_filter": [
                    1346
                ],
                "selector.filters": [
                    1346
                ],
                "ctx_copy": [
                    1352,
                    1349,
                    1351
                ],
                "final_selector": [
                    1353
                ],
                "stream": [
                    1355,
                    1357
                ],
                "io.BytesIO": [
                    1355
                ],
                "io": [
                    1355,
                    1773,
                    1813,
                    1786,
                    1822
                ],
                "format_spec.encode": [
                    1355
                ],
                "_remove_unused_ops": [
                    1357
                ],
                "compat_tokenize_tokenize": [
                    1357
                ],
                "stream.readline": [
                    1357
                ],
                "tokenize.TokenError": [
                    1358
                ],
                "self.tokens": [
                    1370,
                    1363,
                    1372
                ],
                "self.counter": [
                    1379,
                    1364,
                    1370,
                    1372,
                    1373
                ],
                "__next__": [
                    1376
                ],
                "parsed_selector": [
                    1381,
                    1382
                ],
                "TokenIterator": [
                    1381
                ],
                "std_headers.copy": [
                    1385
                ],
                "std_headers": [
                    1385
                ],
                "add_headers": [
                    1387,
                    1388,
                    1389
                ],
                "res.update": [
                    1389
                ],
                "cookies": [
                    1392,
                    1393,
                    1391
                ],
                "self._calc_cookies": [
                    1391
                ],
                "x_forwarded_for_ip": [
                    1396,
                    1397,
                    1398
                ],
                "pr": [
                    1403,
                    1404,
                    1405
                ],
                "sanitized_Request": [
                    1403,
                    2214
                ],
                "self.cookiejar.add_cookie_header": [
                    1404
                ],
                "pr.get_header": [
                    1405
                ],
                "field": [
                    1418,
                    1421,
                    1422,
                    1485,
                    1486,
                    1425,
                    1487,
                    1429,
                    1430,
                    1433
                ],
                "field_not": [
                    1418
                ],
                "conversion": [
                    1418
                ],
                "info.get": [
                    1850,
                    2026,
                    1421,
                    1429
                ],
                "string_field": [
                    1424,
                    1425,
                    1421
                ],
                "report_force_conversion": [
                    1424,
                    1432
                ],
                "int_or_none": [
                    1433
                ],
                "sanitize_string_field": [
                    1530,
                    1435,
                    1540
                ],
                "sanitize_numeric_fields": [
                    1436,
                    1541
                ],
                "thumbnails": [
                    2189,
                    2190,
                    2198,
                    1443,
                    1444,
                    1447,
                    1448,
                    1449,
                    1454,
                    2363,
                    2364,
                    2365,
                    1468,
                    1469,
                    2367,
                    2371,
                    2375,
                    2377,
                    2378
                ],
                "thumbnail": [
                    1445,
                    1446,
                    1447,
                    1465,
                    1466,
                    1467
                ],
                "thumbnails.sort": [
                    1449
                ],
                "t.get": [
                    1450,
                    1451,
                    1452,
                    1453,
                    1456,
                    1458,
                    2198
                ],
                "t": [
                    2375,
                    2376,
                    2377,
                    1450,
                    1451,
                    1452,
                    1453,
                    1454,
                    1455,
                    1456,
                    1457,
                    1458,
                    1459,
                    2379,
                    2388,
                    2198,
                    2395,
                    2378
                ],
                "self.list_thumbnails": [
                    1462
                ],
                "upload_date": [
                    1478,
                    1479
                ],
                "datetime.datetime.utcfromtimestamp": [
                    1478
                ],
                "datetime.datetime": [
                    1478
                ],
                "datetime": [
                    1478
                ],
                "upload_date.strftime": [
                    1479
                ],
                "field.capitalize": [
                    1487
                ],
                "cc_kind": [
                    1489,
                    1490
                ],
                "cc": [
                    1490,
                    1491,
                    1492
                ],
                "subtitle": [
                    1492,
                    1493
                ],
                "cc.items": [
                    1492
                ],
                "subtitle_format": [
                    1493,
                    1494,
                    1495,
                    1496,
                    1497
                ],
                "subtitle_format.get": [
                    1496,
                    1494
                ],
                "lower": [
                    1568,
                    1497
                ],
                "determine_ext": [
                    1568,
                    1497,
                    2376
                ],
                "automatic_captions": [
                    1505,
                    1510,
                    1649,
                    1650,
                    1499
                ],
                "subtitles": [
                    2209,
                    1506,
                    1510,
                    1800,
                    1802,
                    2201,
                    1500
                ],
                "self.list_subtitles": [
                    1504,
                    1506
                ],
                "self.process_subtitles": [
                    1509
                ],
                "is_wellformed": [
                    1534
                ],
                "formats_dict": [
                    1536,
                    1549,
                    1550,
                    1551,
                    1554
                ],
                "format.get": [
                    2112,
                    1571,
                    1543,
                    2108,
                    2103,
                    1560,
                    2105,
                    2107,
                    1564,
                    1567
                ],
                "format_id": [
                    1548,
                    1549,
                    1550,
                    1551,
                    1554,
                    1557
                ],
                "append": [
                    1977,
                    1939,
                    1958,
                    1551
                ],
                "ambiguous_formats": [
                    1554,
                    1555,
                    1556
                ],
                "formats_dict.items": [
                    1554
                ],
                "self.format_resolution": [
                    2177,
                    1563
                ],
                "determine_protocol": [
                    1572
                ],
                "full_format_info": [
                    1576,
                    1577,
                    1575
                ],
                "info_dict.copy": [
                    1575
                ],
                "full_format_info.update": [
                    1576
                ],
                "self._calc_headers": [
                    1577
                ],
                "self.list_formats": [
                    1591
                ],
                "req_format": [
                    1600,
                    1594,
                    1595,
                    1596,
                    1598
                ],
                "self._default_format_spec": [
                    1596
                ],
                "format_selector": [
                    1600,
                    1628
                ],
                "self.build_format_selector": [
                    1600
                ],
                "incomplete_formats": [
                    1625,
                    1617
                ],
                "formats_to_download": [
                    1634,
                    1635,
                    1636,
                    1641,
                    1628,
                    1629
                ],
                "new_info": [
                    1637,
                    1638,
                    1639,
                    1898,
                    1899,
                    1901,
                    1902,
                    1906
                ],
                "new_info.update": [
                    1899,
                    1638
                ],
                "self.process_info": [
                    1639
                ],
                "info_dict.update": [
                    1641
                ],
                "available_subs": [
                    1664,
                    1667,
                    1673,
                    1646,
                    1648,
                    1651,
                    1652,
                    1656,
                    1660
                ],
                "normal_subtitles": [
                    1648,
                    1647
                ],
                "available_subs.update": [
                    1648
                ],
                "lang": [
                    2208,
                    2209,
                    1672,
                    1673,
                    1675,
                    1650,
                    1651,
                    1652,
                    1689,
                    1690
                ],
                "cap_info": [
                    1650,
                    1652
                ],
                "automatic_captions.items": [
                    1650
                ],
                "requested_langs": [
                    1665,
                    1667,
                    1672,
                    1660,
                    1663
                ],
                "available_subs.keys": [
                    1667,
                    1660
                ],
                "formats_query": [
                    1689,
                    1669,
                    1670
                ],
                "formats_preference": [
                    1677,
                    1670
                ],
                "formats_query.split": [
                    1670
                ],
                "subs": [
                    1690,
                    1691,
                    1671
                ],
                "available_subs.get": [
                    1673
                ],
                "video_id": [
                    2202,
                    1675,
                    2205
                ],
                "ext": [
                    1681,
                    1677,
                    1678
                ],
                "max_downloads": [
                    1698,
                    1699,
                    1700
                ],
                "self.prepare_filename": [
                    1901,
                    1717
                ],
                "formatSeconds": [
                    1738
                ],
                "dn": [
                    1753,
                    1754,
                    1755
                ],
                "os.path.dirname": [
                    1753,
                    2243
                ],
                "os.path": [
                    2243,
                    1892,
                    1766,
                    1831,
                    2379,
                    1805,
                    2381,
                    1781,
                    1880,
                    1753,
                    1754,
                    1882
                ],
                "path": [
                    1753
                ],
                "os.path.exists": [
                    1892,
                    1766,
                    1831,
                    1805,
                    2381,
                    1781,
                    1754
                ],
                "os.makedirs": [
                    1755
                ],
                "ensure_dir_exists": [
                    1761,
                    1903
                ],
                "descfn": [
                    1765,
                    1766,
                    1772,
                    1773,
                    1776
                ],
                "replace_extension": [
                    1780,
                    1765,
                    1830
                ],
                "io.open": [
                    1786,
                    1813,
                    1773,
                    1822
                ],
                "descfile": [
                    1773,
                    1774
                ],
                "descfile.write": [
                    1774
                ],
                "annofn": [
                    1780,
                    1781,
                    1785,
                    1786,
                    1791
                ],
                "annofile": [
                    1786,
                    1787
                ],
                "annofile.write": [
                    1787
                ],
                "subtitles_are_requested": [
                    1794,
                    1797
                ],
                "sub_lang": [
                    1802,
                    1804,
                    1806,
                    1826
                ],
                "sub_info": [
                    1802,
                    1803,
                    1809,
                    1814,
                    1821
                ],
                "subtitles.items": [
                    2209,
                    1802
                ],
                "sub_format": [
                    1803,
                    1804,
                    1806
                ],
                "sub_filename": [
                    1804,
                    1805,
                    1808,
                    1813,
                    1816,
                    1822
                ],
                "subtitles_filename": [
                    1804
                ],
                "sub_info.get": [
                    1809
                ],
                "subfile": [
                    1823,
                    1813,
                    1814,
                    1822
                ],
                "subfile.write": [
                    1814,
                    1823
                ],
                "sub_data": [
                    1820,
                    1823
                ],
                "read": [
                    2283,
                    1820,
                    2285
                ],
                "ie._request_webpage": [
                    1820
                ],
                "infofn": [
                    1830,
                    1831,
                    1834,
                    1836,
                    1838
                ],
                "write_json_file": [
                    1836
                ],
                "self.filter_requested_info": [
                    1836,
                    2022
                ],
                "self._write_thumbnails": [
                    1841
                ],
                "fd": [
                    1848,
                    1851,
                    1846
                ],
                "get_suitable_downloader": [
                    1846
                ],
                "fd.add_progress_hook": [
                    1848
                ],
                "fd.download": [
                    1851
                ],
                "name": [
                    2202,
                    1851,
                    2205
                ],
                "downloaded": [
                    1905,
                    1909,
                    1854
                ],
                "success": [
                    1912,
                    1922,
                    1907,
                    1855
                ],
                "postprocessors": [
                    1858,
                    1908,
                    1863
                ],
                "video": [
                    1866,
                    1868
                ],
                "audio": [
                    1866,
                    1868
                ],
                "video_ext": [
                    1875,
                    1868,
                    1869
                ],
                "audio_ext": [
                    1875,
                    1868,
                    1869
                ],
                "video.get": [
                    1868
                ],
                "audio.get": [
                    1868
                ],
                "COMPATIBLE_EXTS": [
                    1874,
                    1870
                ],
                "exts": [
                    1874,
                    1875
                ],
                "filename_real_ext": [
                    1880,
                    1883
                ],
                "os.path.splitext": [
                    1880,
                    1882,
                    2379
                ],
                "filename_wo_ext": [
                    1881,
                    1891
                ],
                "requested_formats": [
                    1897,
                    1885,
                    1886
                ],
                "compatible_formats": [
                    1886
                ],
                "fname": [
                    1905,
                    1906,
                    1900,
                    1903
                ],
                "prepend_extension": [
                    1900
                ],
                "downloaded.append": [
                    1905
                ],
                "partial_success": [
                    1906,
                    1907
                ],
                "dl": [
                    1912,
                    1906
                ],
                "compat_urllib_error.URLError": [
                    2393,
                    1913,
                    2333
                ],
                "compat_urllib_error": [
                    2393,
                    1913,
                    2333
                ],
                "compat_http_client.HTTPException": [
                    2393,
                    1913
                ],
                "compat_http_client": [
                    2393,
                    1913
                ],
                "socket.error": [
                    2393,
                    1913
                ],
                "socket": [
                    2393,
                    1913
                ],
                "UnavailableVideoError": [
                    1917,
                    2006
                ],
                "ContentTooShortError": [
                    1918
                ],
                "err.expected": [
                    1919
                ],
                "err.downloaded": [
                    1919
                ],
                "fixup_policy": [
                    1954,
                    1924,
                    1925,
                    1926,
                    1932,
                    1965,
                    1935,
                    1970,
                    1973,
                    1945,
                    1949,
                    1983
                ],
                "INSTALL_FFMPEG_MESSAGE": [
                    1928,
                    1963,
                    1981,
                    1943
                ],
                "stretched_ratio": [
                    1930,
                    1931,
                    1934,
                    1943
                ],
                "stretched_pp": [
                    1936,
                    1937,
                    1939
                ],
                "FFmpegFixupStretchedPP": [
                    1936
                ],
                "stretched_pp.available": [
                    1937
                ],
                "fixup_pp": [
                    1955,
                    1956,
                    1958,
                    1974,
                    1975,
                    1977
                ],
                "FFmpegFixupM4aPP": [
                    1955
                ],
                "fixup_pp.available": [
                    1956,
                    1975
                ],
                "FFmpegFixupM3u8PP": [
                    1974
                ],
                "self.post_process": [
                    1986
                ],
                "PostProcessingError": [
                    1987,
                    2052
                ],
                "self.record_download_archive": [
                    1990
                ],
                "url_list": [
                    2001,
                    1995
                ],
                "SameFileError": [
                    1999
                ],
                "contextlib.closing": [
                    2018
                ],
                "contextlib": [
                    2018
                ],
                "fileinput.FileInput": [
                    2018
                ],
                "fileinput": [
                    2018,
                    2020
                ],
                "info_filename": [
                    2019
                ],
                "fileinput.hook_encoded": [
                    2020
                ],
                "json.loads": [
                    2022
                ],
                "webpage_url": [
                    2026,
                    2027,
                    2028,
                    2029
                ],
                "self.download": [
                    2029
                ],
                "info_dict.items": [
                    2037
                ],
                "ie_info": [
                    2042,
                    2045,
                    2046
                ],
                "pps_chain": [
                    2048,
                    2044,
                    2046,
                    2047
                ],
                "ie_info.get": [
                    2045
                ],
                "pps_chain.extend": [
                    2046,
                    2047
                ],
                "files_to_delete": [
                    2049,
                    2051,
                    2054,
                    2055
                ],
                "pp.run": [
                    2051
                ],
                "old_filename": [
                    2056,
                    2058,
                    2055
                ],
                "os.remove": [
                    2058
                ],
                "extractor": [
                    2065,
                    2066,
                    2068,
                    2069,
                    2071
                ],
                "extractor.lower": [
                    2071
                ],
                "fn": [
                    2083,
                    2093,
                    2094,
                    2098,
                    2074,
                    2075
                ],
                "vid_id": [
                    2085,
                    2096,
                    2097,
                    2099,
                    2078,
                    2079
                ],
                "self._make_archive_id": [
                    2096,
                    2078
                ],
                "locked_file": [
                    2098,
                    2083
                ],
                "archive_file": [
                    2099,
                    2098,
                    2083,
                    2084
                ],
                "line.strip": [
                    2085
                ],
                "ioe.errno": [
                    2088
                ],
                "ioe": [
                    2088
                ],
                "archive_file.write": [
                    2099
                ],
                "default": [
                    2115
                ],
                "fdict.get": [
                    2145,
                    2149,
                    2120,
                    2122,
                    2156,
                    2126,
                    2128,
                    2160,
                    2130,
                    2162,
                    2164,
                    2134,
                    2135,
                    2168,
                    2139,
                    2141,
                    2143
                ],
                "fdict": [
                    2120,
                    2122,
                    2125,
                    2126,
                    2127,
                    2128,
                    2129,
                    2130,
                    2133,
                    2134,
                    2135,
                    2138,
                    2139,
                    2141,
                    2143,
                    2144,
                    2145,
                    2148,
                    2149,
                    2152,
                    2155,
                    2156,
                    2160,
                    2161,
                    2162,
                    2163,
                    2164,
                    2167,
                    2168,
                    2171
                ],
                "format_bytes": [
                    2171,
                    2167
                ],
                "table": [
                    2176,
                    2186,
                    2181
                ],
                "self._format_note": [
                    2177
                ],
                "header_line": [
                    2186,
                    2183
                ],
                "render_table": [
                    2186,
                    2196,
                    2206
                ],
                "req": [
                    2213,
                    2214,
                    2215
                ],
                "compat_basestring": [
                    2213
                ],
                "self._opener.open": [
                    2215
                ],
                "self._opener": [
                    2343,
                    2277,
                    2215
                ],
                "self._socket_timeout": [
                    2295,
                    2215
                ],
                "stdout_encoding": [
                    2232,
                    2226
                ],
                "encoding_str": [
                    2234,
                    2228
                ],
                "locale.getpreferredencoding": [
                    2230
                ],
                "locale": [
                    2230
                ],
                "self.get_encoding": [
                    2233,
                    2350
                ],
                "__version__": [
                    2236,
                    2287
                ],
                "_LAZY_LOADER": [
                    2237
                ],
                "sp": [
                    2240,
                    2244
                ],
                "os.path.abspath": [
                    2243
                ],
                "__file__": [
                    2243
                ],
                "sp.communicate": [
                    2244
                ],
                "strip": [
                    2245
                ],
                "out.decode": [
                    2245
                ],
                "sys.exc_clear": [
                    2250
                ],
                "impl_name": [
                    2256,
                    2257,
                    2258,
                    2255
                ],
                "platform.python_implementation": [
                    2255
                ],
                "platform": [
                    2261,
                    2255
                ],
                "sys.pypy_version_info": [
                    2257
                ],
                "platform.python_version": [
                    2261
                ],
                "python_implementation": [
                    2261
                ],
                "platform_name": [
                    2262
                ],
                "exe_versions": [
                    2264,
                    2265,
                    2266,
                    2269
                ],
                "FFmpegPostProcessor.get_versions": [
                    2264
                ],
                "FFmpegPostProcessor": [
                    2264
                ],
                "rtmpdump_version": [
                    2265
                ],
                "PhantomJSwrapper._version": [
                    2266
                ],
                "PhantomJSwrapper": [
                    2266
                ],
                "exe_str": [
                    2272,
                    2273,
                    2274,
                    2267
                ],
                "exe": [
                    2268,
                    2269
                ],
                "exe_versions.items": [
                    2269
                ],
                "proxy_map": [
                    2280,
                    2276,
                    2279
                ],
                "handler": [
                    2277,
                    2278,
                    2279
                ],
                "self._opener.handlers": [
                    2277
                ],
                "proxy_map.update": [
                    2279
                ],
                "handler.proxies": [
                    2279
                ],
                "ipaddr": [
                    2283,
                    2284
                ],
                "self.urlopen": [
                    2283,
                    2388,
                    2285
                ],
                "latest_version": [
                    2291,
                    2285,
                    2287
                ],
                "version_tuple": [
                    2287
                ],
                "timeout_val": [
                    2294,
                    2295
                ],
                "opts_cookiefile": [
                    2304,
                    2305,
                    2297,
                    2300,
                    2303
                ],
                "opts_proxy": [
                    2313,
                    2298,
                    2309,
                    2310
                ],
                "compat_cookiejar.CookieJar": [
                    2301
                ],
                "compat_cookiejar": [
                    2301
                ],
                "YoutubeDLCookieJar": [
                    2304
                ],
                "os.access": [
                    2305
                ],
                "os.R_OK": [
                    2305
                ],
                "self.cookiejar.load": [
                    2306
                ],
                "cookie_processor": [
                    2337,
                    2308
                ],
                "YoutubeDLCookieProcessor": [
                    2308
                ],
                "proxies": [
                    2311,
                    2313,
                    2315,
                    2317,
                    2318,
                    2319
                ],
                "compat_urllib_request.getproxies": [
                    2315
                ],
                "compat_urllib_request": [
                    2336,
                    2330,
                    2315
                ],
                "proxy_handler": [
                    2337,
                    2319
                ],
                "PerRequestProxyHandler": [
                    2319
                ],
                "debuglevel": [
                    2321,
                    2322,
                    2323
                ],
                "https_handler": [
                    2337,
                    2322
                ],
                "make_HTTPS_handler": [
                    2322
                ],
                "ydlh": [
                    2337,
                    2323
                ],
                "YoutubeDLHandler": [
                    2323
                ],
                "data_handler": [
                    2337,
                    2324
                ],
                "compat_urllib_request_DataHandler": [
                    2324
                ],
                "file_handler": [
                    2337,
                    2330,
                    2334
                ],
                "compat_urllib_request.FileHandler": [
                    2330
                ],
                "file_handler.file_open": [
                    2334
                ],
                "file_open": [
                    2334
                ],
                "opener": [
                    2336,
                    2342,
                    2343
                ],
                "compat_urllib_request.build_opener": [
                    2336
                ],
                "opener.addheaders": [
                    2342
                ],
                "s.encode": [
                    2350
                ],
                "err.reason": [
                    2352
                ],
                "encoding": [
                    2356,
                    2357,
                    2358,
                    2359
                ],
                "thumb_ext": [
                    2376,
                    2379
                ],
                "suffix": [
                    2377,
                    2379
                ],
                "thumb_display_id": [
                    2392,
                    2378,
                    2386,
                    2383
                ],
                "thumb_filename": [
                    2392,
                    2379,
                    2389,
                    2381
                ],
                "uf": [
                    2388,
                    2390
                ],
                "thumbf": [
                    2389,
                    2390
                ],
                "shutil.copyfileobj": [
                    2390
                ],
                "shutil": [
                    2390
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_12/test/test_YoutubeDL.py",
                "test_function": "test_format_selection_string_ops",
                "test_function_code": "    def test_format_selection_string_ops(self):\n        formats = [\n            {'format_id': 'abc-cba', 'ext': 'mp4', 'url': TEST_URL},\n            {'format_id': 'zxc-cxz', 'ext': 'webm', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        # equals (=)\n        ydl = YDL({'format': '[format_id=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not equal (!=)\n        ydl = YDL({'format': '[format_id!=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!=abc-cba][format_id!=zxc-cxz]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # starts with (^=)\n        ydl = YDL({'format': '[format_id^=abc]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not start with (!^=)\n        ydl = YDL({'format': '[format_id!^=abc]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!^=abc][format_id!^=zxc]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # ends with ($=)\n        ydl = YDL({'format': '[format_id$=cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not end with (!$=)\n        ydl = YDL({'format': '[format_id!$=cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!$=cba][format_id!$=cxz]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # contains (*=)\n        ydl = YDL({'format': '[format_id*=bc-cb]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not contain (!*=)\n        ydl = YDL({'format': '[format_id!*=bc-cb]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!*=abc][format_id!*=zxc]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        ydl = YDL({'format': '[format_id!*=-]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())",
                "test_error": "youtube_dl.utils.ExtractorError: requested format not available",
                "full_test_error": "self = <test.test_YoutubeDL.TestFormatSelection testMethod=test_format_selection_string_ops>\n\n    def test_format_selection_string_ops(self):\n        formats = [\n            {'format_id': 'abc-cba', 'ext': 'mp4', 'url': TEST_URL},\n            {'format_id': 'zxc-cxz', 'ext': 'webm', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n    \n        # equals (=)\n        ydl = YDL({'format': '[format_id=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n    \n        # does not equal (!=)\n        ydl = YDL({'format': '[format_id!=abc-cba]'})\n>       ydl.process_ie_result(info_dict.copy())\n\ntest/test_YoutubeDL.py:257: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nyoutube_dl/YoutubeDL.py:858: in process_ie_result\n    return self.process_video_result(ie_result, download=download)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test.test_YoutubeDL.YDL object at 0x103080fd0>\ninfo_dict = {'display_id': 'testid', 'extractor': 'testex', 'extractor_key': 'TestEx', 'formats': [{'ext': 'mp4', 'format': 'abc-c...8859-1,utf-8;q=0.7,*;q=0.7', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5', ...}, ...}], ...}\ndownload = True\n\n    def process_video_result(self, info_dict, download=True):\n        assert info_dict.get('_type', 'video') == 'video'\n    \n        if 'id' not in info_dict:\n            raise ExtractorError('Missing \"id\" field in extractor result')\n        if 'title' not in info_dict:\n            raise ExtractorError('Missing \"title\" field in extractor result')\n    \n        def report_force_conversion(field, field_not, conversion):\n            self.report_warning(\n                '\"%s\" field is not %s - forcing %s conversion, there is an error in extractor'\n                % (field, field_not, conversion))\n    \n        def sanitize_string_field(info, string_field):\n            field = info.get(string_field)\n            if field is None or isinstance(field, compat_str):\n                return\n            report_force_conversion(string_field, 'a string', 'string')\n            info[string_field] = compat_str(field)\n    \n        def sanitize_numeric_fields(info):\n            for numeric_field in self._NUMERIC_FIELDS:\n                field = info.get(numeric_field)\n                if field is None or isinstance(field, compat_numeric_types):\n                    continue\n                report_force_conversion(numeric_field, 'numeric', 'int')\n                info[numeric_field] = int_or_none(field)\n    \n        sanitize_string_field(info_dict, 'id')\n        sanitize_numeric_fields(info_dict)\n    \n        if 'playlist' not in info_dict:\n            # It isn't part of a playlist\n            info_dict['playlist'] = None\n            info_dict['playlist_index'] = None\n    \n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails is None:\n            thumbnail = info_dict.get('thumbnail')\n            if thumbnail:\n                info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n        if thumbnails:\n            thumbnails.sort(key=lambda t: (\n                t.get('preference') if t.get('preference') is not None else -1,\n                t.get('width') if t.get('width') is not None else -1,\n                t.get('height') if t.get('height') is not None else -1,\n                t.get('id') if t.get('id') is not None else '', t.get('url')))\n            for i, t in enumerate(thumbnails):\n                t['url'] = sanitize_url(t['url'])\n                if t.get('width') and t.get('height'):\n                    t['resolution'] = '%dx%d' % (t['width'], t['height'])\n                if t.get('id') is None:\n                    t['id'] = '%d' % i\n    \n        if self.params.get('list_thumbnails'):\n            self.list_thumbnails(info_dict)\n            return\n    \n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnail'] = sanitize_url(thumbnail)\n        elif thumbnails:\n            info_dict['thumbnail'] = thumbnails[-1]['url']\n    \n        if 'display_id' not in info_dict and 'id' in info_dict:\n            info_dict['display_id'] = info_dict['id']\n    \n        if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n            # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n            # see http://bugs.python.org/issue1646728)\n            try:\n                upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n                info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n            except (ValueError, OverflowError, OSError):\n                pass\n    \n        # Auto generate title fields corresponding to the *_number fields when missing\n        # in order to always have clean titles. This is very common for TV series.\n        for field in ('chapter', 'season', 'episode'):\n            if info_dict.get('%s_number' % field) is not None and not info_dict.get(field):\n                info_dict[field] = '%s %d' % (field.capitalize(), info_dict['%s_number' % field])\n    \n        for cc_kind in ('subtitles', 'automatic_captions'):\n            cc = info_dict.get(cc_kind)\n            if cc:\n                for _, subtitle in cc.items():\n                    for subtitle_format in subtitle:\n                        if subtitle_format.get('url'):\n                            subtitle_format['url'] = sanitize_url(subtitle_format['url'])\n                        if subtitle_format.get('ext') is None:\n                            subtitle_format['ext'] = determine_ext(subtitle_format['url']).lower()\n    \n        automatic_captions = info_dict.get('automatic_captions')\n        subtitles = info_dict.get('subtitles')\n    \n        if self.params.get('listsubtitles', False):\n            if 'automatic_captions' in info_dict:\n                self.list_subtitles(\n                    info_dict['id'], automatic_captions, 'automatic captions')\n            self.list_subtitles(info_dict['id'], subtitles, 'subtitles')\n            return\n    \n        info_dict['requested_subtitles'] = self.process_subtitles(\n            info_dict['id'], subtitles, automatic_captions)\n    \n        # We now pick which formats have to be downloaded\n        if info_dict.get('formats') is None:\n            # There's only one format available\n            formats = [info_dict]\n        else:\n            formats = info_dict['formats']\n    \n        if not formats:\n            raise ExtractorError('No video formats found!')\n    \n        def is_wellformed(f):\n            url = f.get('url')\n            if not url:\n                self.report_warning(\n                    '\"url\" field is missing or empty - skipping format, '\n                    'there is an error in extractor')\n                return False\n            if isinstance(url, bytes):\n                sanitize_string_field(f, 'url')\n            return True\n    \n        # Filter out malformed formats for better extraction robustness\n        formats = list(filter(is_wellformed, formats))\n    \n        formats_dict = {}\n    \n        # We check that all the formats have the format and format_id fields\n        for i, format in enumerate(formats):\n            sanitize_string_field(format, 'format_id')\n            sanitize_numeric_fields(format)\n            format['url'] = sanitize_url(format['url'])\n            if not format.get('format_id'):\n                format['format_id'] = compat_str(i)\n            else:\n                # Sanitize format_id from characters used in format selector expression\n                format['format_id'] = re.sub(r'[\\s,/+\\[\\]()]', '_', format['format_id'])\n            format_id = format['format_id']\n            if format_id not in formats_dict:\n                formats_dict[format_id] = []\n            formats_dict[format_id].append(format)\n    \n        # Make sure all formats have unique format_id\n        for format_id, ambiguous_formats in formats_dict.items():\n            if len(ambiguous_formats) > 1:\n                for i, format in enumerate(ambiguous_formats):\n                    format['format_id'] = '%s-%d' % (format_id, i)\n    \n        for i, format in enumerate(formats):\n            if format.get('format') is None:\n                format['format'] = '{id} - {res}{note}'.format(\n                    id=format['format_id'],\n                    res=self.format_resolution(format),\n                    note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n                )\n            # Automatically determine file extension if missing\n            if format.get('ext') is None:\n                format['ext'] = determine_ext(format['url']).lower()\n            # Automatically determine protocol if missing (useful for format\n            # selection purposes)\n            if format.get('protocol') is None:\n                format['protocol'] = determine_protocol(format)\n            # Add HTTP headers, so that external programs can use them from the\n            # json output\n            full_format_info = info_dict.copy()\n            full_format_info.update(format)\n            format['http_headers'] = self._calc_headers(full_format_info)\n        # Remove private housekeeping stuff\n        if '__x_forwarded_for_ip' in info_dict:\n            del info_dict['__x_forwarded_for_ip']\n    \n        # TODO Central sorting goes here\n    \n        if formats[0] is not info_dict:\n            # only set the 'formats' fields if the original info_dict list them\n            # otherwise we end up with a circular reference, the first (and unique)\n            # element in the 'formats' field in info_dict is info_dict itself,\n            # which can't be exported to json\n            info_dict['formats'] = formats\n        if self.params.get('listformats'):\n            self.list_formats(info_dict)\n            return\n    \n        req_format = self.params.get('format')\n        if req_format is None:\n            req_format = self._default_format_spec(info_dict, download=download)\n            if self.params.get('verbose'):\n                self.to_stdout('[debug] Default format spec: %s' % req_format)\n    \n        format_selector = self.build_format_selector(req_format)\n    \n        # While in format selection we may need to have an access to the original\n        # format set in order to calculate some metrics or do some processing.\n        # For now we need to be able to guess whether original formats provided\n        # by extractor are incomplete or not (i.e. whether extractor provides only\n        # video-only or audio-only formats) for proper formats selection for\n        # extractors with such incomplete formats (see\n        # https://github.com/rg3/youtube-dl/pull/5556).\n        # Since formats may be filtered during format selection and may not match\n        # the original formats the results may be incorrect. Thus original formats\n        # or pre-calculated metrics should be passed to format selection routines\n        # as well.\n        # We will pass a context object containing all necessary additional data\n        # instead of just formats.\n        # This fixes incorrect format selection issue (see\n        # https://github.com/rg3/youtube-dl/issues/10083).\n        incomplete_formats = (\n            # All formats are video-only or\n            all(f.get('vcodec') != 'none' and f.get('acodec') == 'none' for f in formats) or\n            # all formats are audio-only\n            all(f.get('vcodec') == 'none' and f.get('acodec') != 'none' for f in formats))\n    \n        ctx = {\n            'formats': formats,\n            'incomplete_formats': incomplete_formats,\n        }\n    \n        formats_to_download = list(format_selector(ctx))\n        if not formats_to_download:\n            raise ExtractorError('requested format not available',\n>                                expected=True)\nE           youtube_dl.utils.ExtractorError: requested format not available\n\nyoutube_dl/YoutubeDL.py:1631: ExtractorError",
                "traceback": "youtube_dl/YoutubeDL.py:858: in process_ie_result\n    return self.process_video_result(ie_result, download=download)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test.test_YoutubeDL.YDL object at 0x103080fd0>\ninfo_dict = {'display_id': 'testid', 'extractor': 'testex', 'extractor_key': 'TestEx', 'formats': [{'ext': 'mp4', 'format': 'abc-c...8859-1,utf-8;q=0.7,*;q=0.7', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5', ...}, ...}], ...}\ndownload = True\n\n    def process_video_result(self, info_dict, download=True):\n        assert info_dict.get('_type', 'video') == 'video'\n    \n        if 'id' not in info_dict:\n            raise ExtractorError('Missing \"id\" field in extractor result')\n        if 'title' not in info_dict:\n            raise ExtractorError('Missing \"title\" field in extractor result')\n    \n        def report_force_conversion(field, field_not, conversion):\n            self.report_warning(\n                '\"%s\" field is not %s - forcing %s conversion, there is an error in extractor'\n                % (field, field_not, conversion))\n    \n        def sanitize_string_field(info, string_field):\n            field = info.get(string_field)\n            if field is None or isinstance(field, compat_str):\n                return\n            report_force_conversion(string_field, 'a string', 'string')\n            info[string_field] = compat_str(field)\n    \n        def sanitize_numeric_fields(info):\n            for numeric_field in self._NUMERIC_FIELDS:\n                field = info.get(numeric_field)\n                if field is None or isinstance(field, compat_numeric_types):\n                    continue\n                report_force_conversion(numeric_field, 'numeric', 'int')\n                info[numeric_field] = int_or_none(field)\n    \n        sanitize_string_field(info_dict, 'id')\n        sanitize_numeric_fields(info_dict)\n    \n        if 'playlist' not in info_dict:\n            # It isn't part of a playlist\n            info_dict['playlist'] = None\n            info_dict['playlist_index'] = None\n    \n        thumbnails = info_dict.get('thumbnails')\n        if thumbnails is None:\n            thumbnail = info_dict.get('thumbnail')\n            if thumbnail:\n                info_dict['thumbnails'] = thumbnails = [{'url': thumbnail}]\n        if thumbnails:\n            thumbnails.sort(key=lambda t: (\n                t.get('preference') if t.get('preference') is not None else -1,\n                t.get('width') if t.get('width') is not None else -1,\n                t.get('height') if t.get('height') is not None else -1,\n                t.get('id') if t.get('id') is not None else '', t.get('url')))\n            for i, t in enumerate(thumbnails):\n                t['url'] = sanitize_url(t['url'])\n                if t.get('width') and t.get('height'):\n                    t['resolution'] = '%dx%d' % (t['width'], t['height'])\n                if t.get('id') is None:\n                    t['id'] = '%d' % i\n    \n        if self.params.get('list_thumbnails'):\n            self.list_thumbnails(info_dict)\n            return\n    \n        thumbnail = info_dict.get('thumbnail')\n        if thumbnail:\n            info_dict['thumbnail'] = sanitize_url(thumbnail)\n        elif thumbnails:\n            info_dict['thumbnail'] = thumbnails[-1]['url']\n    \n        if 'display_id' not in info_dict and 'id' in info_dict:\n            info_dict['display_id'] = info_dict['id']\n    \n        if info_dict.get('upload_date') is None and info_dict.get('timestamp') is not None:\n            # Working around out-of-range timestamp values (e.g. negative ones on Windows,\n            # see http://bugs.python.org/issue1646728)\n            try:\n                upload_date = datetime.datetime.utcfromtimestamp(info_dict['timestamp'])\n                info_dict['upload_date'] = upload_date.strftime('%Y%m%d')\n            except (ValueError, OverflowError, OSError):\n                pass\n    \n        # Auto generate title fields corresponding to the *_number fields when missing\n        # in order to always have clean titles. This is very common for TV series.\n        for field in ('chapter', 'season', 'episode'):\n            if info_dict.get('%s_number' % field) is not None and not info_dict.get(field):\n                info_dict[field] = '%s %d' % (field.capitalize(), info_dict['%s_number' % field])\n    \n        for cc_kind in ('subtitles', 'automatic_captions'):\n            cc = info_dict.get(cc_kind)\n            if cc:\n                for _, subtitle in cc.items():\n                    for subtitle_format in subtitle:\n                        if subtitle_format.get('url'):\n                            subtitle_format['url'] = sanitize_url(subtitle_format['url'])\n                        if subtitle_format.get('ext') is None:\n                            subtitle_format['ext'] = determine_ext(subtitle_format['url']).lower()\n    \n        automatic_captions = info_dict.get('automatic_captions')\n        subtitles = info_dict.get('subtitles')\n    \n        if self.params.get('listsubtitles', False):\n            if 'automatic_captions' in info_dict:\n                self.list_subtitles(\n                    info_dict['id'], automatic_captions, 'automatic captions')\n            self.list_subtitles(info_dict['id'], subtitles, 'subtitles')\n            return\n    \n        info_dict['requested_subtitles'] = self.process_subtitles(\n            info_dict['id'], subtitles, automatic_captions)\n    \n        # We now pick which formats have to be downloaded\n        if info_dict.get('formats') is None:\n            # There's only one format available\n            formats = [info_dict]\n        else:\n            formats = info_dict['formats']\n    \n        if not formats:\n            raise ExtractorError('No video formats found!')\n    \n        def is_wellformed(f):\n            url = f.get('url')\n            if not url:\n                self.report_warning(\n                    '\"url\" field is missing or empty - skipping format, '\n                    'there is an error in extractor')\n                return False\n            if isinstance(url, bytes):\n                sanitize_string_field(f, 'url')\n            return True\n    \n        # Filter out malformed formats for better extraction robustness\n        formats = list(filter(is_wellformed, formats))\n    \n        formats_dict = {}\n    \n        # We check that all the formats have the format and format_id fields\n        for i, format in enumerate(formats):\n            sanitize_string_field(format, 'format_id')\n            sanitize_numeric_fields(format)\n            format['url'] = sanitize_url(format['url'])\n            if not format.get('format_id'):\n                format['format_id'] = compat_str(i)\n            else:\n                # Sanitize format_id from characters used in format selector expression\n                format['format_id'] = re.sub(r'[\\s,/+\\[\\]()]', '_', format['format_id'])\n            format_id = format['format_id']\n            if format_id not in formats_dict:\n                formats_dict[format_id] = []\n            formats_dict[format_id].append(format)\n    \n        # Make sure all formats have unique format_id\n        for format_id, ambiguous_formats in formats_dict.items():\n            if len(ambiguous_formats) > 1:\n                for i, format in enumerate(ambiguous_formats):\n                    format['format_id'] = '%s-%d' % (format_id, i)\n    \n        for i, format in enumerate(formats):\n            if format.get('format') is None:\n                format['format'] = '{id} - {res}{note}'.format(\n                    id=format['format_id'],\n                    res=self.format_resolution(format),\n                    note=' ({0})'.format(format['format_note']) if format.get('format_note') is not None else '',\n                )\n            # Automatically determine file extension if missing\n            if format.get('ext') is None:\n                format['ext'] = determine_ext(format['url']).lower()\n            # Automatically determine protocol if missing (useful for format\n            # selection purposes)\n            if format.get('protocol') is None:\n                format['protocol'] = determine_protocol(format)\n            # Add HTTP headers, so that external programs can use them from the\n            # json output\n            full_format_info = info_dict.copy()\n            full_format_info.update(format)\n            format['http_headers'] = self._calc_headers(full_format_info)\n        # Remove private housekeeping stuff\n        if '__x_forwarded_for_ip' in info_dict:\n            del info_dict['__x_forwarded_for_ip']\n    \n        # TODO Central sorting goes here\n    \n        if formats[0] is not info_dict:\n            # only set the 'formats' fields if the original info_dict list them\n            # otherwise we end up with a circular reference, the first (and unique)\n            # element in the 'formats' field in info_dict is info_dict itself,\n            # which can't be exported to json\n            info_dict['formats'] = formats\n        if self.params.get('listformats'):\n            self.list_formats(info_dict)\n            return\n    \n        req_format = self.params.get('format')\n        if req_format is None:\n            req_format = self._default_format_spec(info_dict, download=download)\n            if self.params.get('verbose'):\n                self.to_stdout('[debug] Default format spec: %s' % req_format)\n    \n        format_selector = self.build_format_selector(req_format)\n    \n        # While in format selection we may need to have an access to the original\n        # format set in order to calculate some metrics or do some processing.\n        # For now we need to be able to guess whether original formats provided\n        # by extractor are incomplete or not (i.e. whether extractor provides only\n        # video-only or audio-only formats) for proper formats selection for\n        # extractors with such incomplete formats (see\n        # https://github.com/rg3/youtube-dl/pull/5556).\n        # Since formats may be filtered during format selection and may not match\n        # the original formats the results may be incorrect. Thus original formats\n        # or pre-calculated metrics should be passed to format selection routines\n        # as well.\n        # We will pass a context object containing all necessary additional data\n        # instead of just formats.\n        # This fixes incorrect format selection issue (see\n        # https://github.com/rg3/youtube-dl/issues/10083).\n        incomplete_formats = (\n            # All formats are video-only or\n            all(f.get('vcodec') != 'none' and f.get('acodec') == 'none' for f in formats) or\n            # all formats are audio-only\n            all(f.get('vcodec') == 'none' and f.get('acodec') != 'none' for f in formats))\n    \n        ctx = {\n            'formats': formats,\n            'incomplete_formats': incomplete_formats,\n        }\n    \n        formats_to_download = list(format_selector(ctx))\n        if not formats_to_download:\n            raise ExtractorError('requested format not available',\n>                                expected=True)\nE           youtube_dl.utils.ExtractorError: requested format not available\n\nyoutube_dl/YoutubeDL.py:1631: ExtractorError",
                "test_function_decorators": []
            }
        ]
    }
}