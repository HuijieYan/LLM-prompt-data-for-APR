{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "SD2T/bgp_envs/repos/youtube-dl_12/youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import re\n    import operator\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    STR_OPERATORS = {\n        '=': operator.eq,\n        '^=': lambda attr, value: attr.startswith(value),\n        '$=': lambda attr, value: attr.endswith(value),\n        '*=': lambda attr, value: value in attr,\n    }\n    \n    def parse_filesize(value):\n        # implementation specific to parse_filesize function\n        pass\n    \n    operator_rex = re.compile(r'(%s)' % '|'.join(map(re.escape, OPERATORS.keys())))\n    str_operator_rex = re.compile(r'(%s)' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n    \n    m = operator_rex.search(filter_spec)\n    if m:\n        key = m.group('key')\n        op = OPERATORS[m.group('op')]\n        value = m.group('value')\n        none_inclusive = m.group('none_inclusive')\n    \n        def _filter(f):\n            actual_value = f.get(key)\n            if actual_value is None:\n                return none_inclusive\n            return op(actual_value, int(value))\n        return _filter\n    \n    m = str_operator_rex.search(filter_spec)\n    if m:\n        key = m.group('key')\n        str_op = STR_OPERATORS[m.group('op')]\n        value = m.group('value')\n        negation = m.group('negation')\n    \n        def _filter(f):\n            actual_value = f.get(key)\n            if actual_value is None:\n                return m.group('none_inclusive')\n            result = str_op(actual_value, value)\n            return not result if negation else result\n        return _filter\n    \n    raise ValueError('Invalid filter specification %r' % filter_spec)"
        }
    ]
}