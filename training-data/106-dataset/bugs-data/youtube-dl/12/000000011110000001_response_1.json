{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "SD2T/bgp_envs/repos/youtube-dl_12/youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import operator\n    import re\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    def _filter(f):\n        key, op, value = re.match(r'(\\[.*)([<>=!]=)(.*\\])', filter_spec).groups()\n        if op in ['<', '>', '<=', '>=', '=', '!=']:\n            comparison_value = int(value) if value.isdigit() else str(value).strip('[]')\n            actual_value = f.get(key.strip('[]'))\n            if actual_value is None:\n                return False\n            return {'<': operator.lt, '>': operator.gt, '<=': operator.le, '>=': operator.ge, '=': operator.eq, '!=': operator.ne}[op](actual_value, comparison_value)\n    \n        elif op in ['^=', '$=', '*=']:\n            actual_value = f.get(key.strip('[]'))\n            if actual_value is None:\n                return False\n            return {'^=': actual_value.startswith, '$=': actual_value.endswith, '*=': lambda x: value in actual_value}(value)\n    \n        else:\n            raise ValueError('Invalid filter specification %r' % filter_spec)\n    \n    return _filter"
        }
    ]
}