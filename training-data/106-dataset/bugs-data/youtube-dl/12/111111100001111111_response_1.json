{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "/youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import operator\n    import re\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n        '^=': lambda attr, value: attr.startswith(value),\n        '$=': lambda attr, value: attr.endswith(value),\n        '*=': lambda attr, value: value in attr,\n    }\n    \n    operator_rex = re.compile(r'''\n        \\s*(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps|format_id)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n    ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n    \n    str_operator_rex = re.compile(r'''\n        \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n        \\s*(?P<negation>!\\s*)?(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n        \\s*(?P<value>[a-zA-Z0-9._-]+)\n    ''' % '|'.join(map(re.escape, ['=', '^=', '$=', '*='])))\n    \n    m = operator_rex.search(filter_spec)\n    if not m:\n        m = str_operator_rex.search(filter_spec)\n    \n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n    \n    key = m.group('key')\n    op = m.group('op')\n    value = m.group('value')\n    \n    if op in ['=', '^=', '$=', '*=']:\n        str_op = OPERATORS[op]\n        if m.group('negation'):\n            op = lambda attr, value: not str_op\n        else:\n            op = str_op\n    \n    elif op in OPERATORS:\n        comparison_value = int(value) if key in ['width', 'height', 'tbr', 'abr', 'vbr', 'asr', 'filesize', 'filesize_approx', 'fps'] else value\n    \n    def _filter(f):\n        if key in f:\n            actual_value = f[key]\n            if actual_value is None:\n                return m.group('none_inclusive')\n            if op(actual_value, comparison_value):\n                return True\n        return False\n    \n    return _filter"
        }
    ]
}