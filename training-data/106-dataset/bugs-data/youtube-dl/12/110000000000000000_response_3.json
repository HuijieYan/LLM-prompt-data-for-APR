{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import operator\n    import re\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    m = re.match(r'(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)(?P<op><=|>=|<|>|!=|=)(?P<value>[0-9.]+[kKmMgGtTpPeEzZyY]i?[Bb]?)\\??$', filter_spec)\n    \n    if m:\n        try:\n            comparison_value = int(float(m.group('value')[:-2]) * (1024 ** ' kMGTPEZY'.index(m.group('value')[-2].upper())))\n        except ValueError:\n            if m.group('value')[-1].lower() == 'b':\n                comparison_value = int(float(m.group('value')[:-1]) * (1024 ** ' kMGTPEZY'.index(m.group('value')[-2].upper())))\n            else:\n                raise ValueError('Not a valid value')\n    \n        op = OPERATORS[m.group('op')]\n    \n        def _filter(f):\n            actual_value = f.get(m.group('key'))\n            if actual_value is None:\n                return bool(m.group('none_inclusive'))\n            return op(int(actual_value), comparison_value)\n        return _filter\n    \n    STR_OPERATORS = {\n        '=': operator.eq,\n        '^=': lambda attr, value: attr.startswith(value),\n        '$=': lambda attr, value: attr.endswith(value),\n        '*=': lambda attr, value: value in attr,\n    }\n    m = re.match(r'(?P<key>ext|acodec|vcodec|container|protocol|format_id)(?P<negation>!)?(?P<op>=|\\^=|\\$=|\\*=\\??)(?P<value>[a-zA-Z0-9._-]+)\\s*$', filter_spec)\n    \n    if m:\n        comparison_value = m.group('value')\n        str_op = STR_OPERATORS[m.group('op')]\n        \n        if m.group('negation'):\n            op = lambda attr, value: not str_op(attr, value)\n        else:\n            op = lambda attr, value: str_op(attr, value)\n    \n        def _filter(f):\n            actual_value = f.get(m.group('key'))\n            if actual_value is None:\n                return bool(m.group('none_inclusive'))\n            return op(actual_value, comparison_value)\n        return _filter\n    \n    raise ValueError('Invalid filter specification %r' % filter_spec)"
        }
    ]
}