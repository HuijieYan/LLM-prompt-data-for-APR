{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import operator\n    import re\n    def _filter_func(f, key, op, value, none_inclusive):\n        actual_value = f.get(key)\n        if actual_value is None:\n            return none_inclusive\n        if op == '=':\n            return actual_value == value\n        elif op == '!=':\n            return actual_value != value\n        elif op == '^=':\n            return actual_value.startswith(value)\n        elif op == '$=':\n            return actual_value.endswith(value)\n        elif op == '*=':\n            return value in actual_value\n        else:\n            raise ValueError('Invalid operator: %s' % op)\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n        $\n        ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n    \n    str_operator_rex = re.compile(r'''(?x)\n        \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n        \\s*(?P<negation>!\\s*)?(?P<op>[^0-9.]+)(?P<none_inclusive>\\s*\\?)?\n        \\s*(?P<value>[a-zA-Z0-9._-]+)\n        \\s*$\n        ''')\n    \n    match = operator_rex.search(filter_spec)\n    if match:\n        key, op, none_inclusive, value = match.group('key'), match.group('op'), match.group('none_inclusive'), match.group('value')\n        comparison_value = int(value) if op in ['<', '<=', '>', '>=', '='] else value\n        op_func = OPERATORS[op]\n        return lambda f: _filter_func(f, key, op_func, comparison_value, none_inclusive)\n    \n    match = str_operator_rex.search(filter_spec)\n    if match:\n        key, op, none_inclusive, value = match.group('key'), match.group('op'), match.group('none_inclusive'), match.group('value')\n        str_op_func = lambda attr, value: attr.startswith(value) if op == '^=' else (attr.endswith(value) if op == '$=' else (value in attr if op == '*=' else attr == value))\n        negation = match.group('negation')\n        op_func = lambda attr, value: not str_op_func(attr, value) if negation else str_op_func(attr, value)\n        return lambda f: _filter_func(f, key, op_func, value, none_inclusive)\n    \n    raise ValueError('Invalid filter specification %r' % filter_spec)"
        }
    ]
}