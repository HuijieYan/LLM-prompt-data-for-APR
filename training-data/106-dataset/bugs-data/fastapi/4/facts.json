{
    "1.1.1": "def get_openapi_path(\n    *, route: routing.APIRoute, model_name_map: Dict[Type, str]\n) -> Tuple[Dict, Dict, Dict]:\n    path = {}\n    security_schemes: Dict[str, Any] = {}\n    definitions: Dict[str, Any] = {}\n    assert route.methods is not None, \"Methods must be a list\"\n    assert route.response_class, \"A response class is needed to generate OpenAPI\"\n    route_response_media_type: Optional[str] = route.response_class.media_type\n    if route.include_in_schema:\n        for method in route.methods:\n            operation = get_openapi_operation_metadata(route=route, method=method)\n            parameters: List[Dict] = []\n            flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n            security_definitions, operation_security = get_openapi_security_definitions(\n                flat_dependant=flat_dependant\n            )\n            if operation_security:\n                operation.setdefault(\"security\", []).extend(operation_security)\n            if security_definitions:\n                security_schemes.update(security_definitions)\n            all_route_params = get_openapi_params(route.dependant)\n            operation_parameters = get_openapi_operation_parameters(all_route_params)\n            parameters.extend(operation_parameters)\n            if parameters:\n                operation[\"parameters\"] = parameters\n            if method in METHODS_WITH_BODY:\n                request_body_oai = get_openapi_operation_request_body(\n                    body_field=route.body_field, model_name_map=model_name_map\n                )\n                if request_body_oai:\n                    operation[\"requestBody\"] = request_body_oai\n            if route.callbacks:\n                callbacks = {}\n                for callback in route.callbacks:\n                    cb_path, cb_security_schemes, cb_definitions, = get_openapi_path(\n                        route=callback, model_name_map=model_name_map\n                    )\n                    callbacks[callback.name] = {callback.path: cb_path}\n                operation[\"callbacks\"] = callbacks\n            if route.responses:\n                for (additional_status_code, response) in route.responses.items():\n                    assert isinstance(\n                        response, dict\n                    ), \"An additional response must be a dict\"\n                    field = route.response_fields.get(additional_status_code)\n                    if field:\n                        response_schema, _, _ = field_schema(\n                            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                        )\n                        response.setdefault(\"content\", {}).setdefault(\n                            route_response_media_type or \"application/json\", {}\n                        )[\"schema\"] = response_schema\n                    status_text: Optional[str] = status_code_ranges.get(\n                        str(additional_status_code).upper()\n                    ) or http.client.responses.get(int(additional_status_code))\n                    response.setdefault(\n                        \"description\", status_text or \"Additional Response\"\n                    )\n                    status_code_key = str(additional_status_code).upper()\n                    if status_code_key == \"DEFAULT\":\n                        status_code_key = \"default\"\n                    operation.setdefault(\"responses\", {})[status_code_key] = response\n            status_code = str(route.status_code)\n            operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                \"description\"\n            ] = route.response_description\n            if (\n                route_response_media_type\n                and route.status_code not in STATUS_CODES_WITH_NO_BODY\n            ):\n                response_schema = {\"type\": \"string\"}\n                if lenient_issubclass(route.response_class, JSONResponse):\n                    if route.response_field:\n                        response_schema, _, _ = field_schema(\n                            route.response_field,\n                            model_name_map=model_name_map,\n                            ref_prefix=REF_PREFIX,\n                        )\n                    else:\n                        response_schema = {}\n                operation.setdefault(\"responses\", {}).setdefault(\n                    status_code, {}\n                ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n                    \"schema\"\n                ] = response_schema\n\n            http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n            if (all_route_params or route.body_field) and not any(\n                [\n                    status in operation[\"responses\"]\n                    for status in [http422, \"4XX\", \"default\"]\n                ]\n            ):\n                operation[\"responses\"][http422] = {\n                    \"description\": \"Validation Error\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\"$ref\": REF_PREFIX + \"HTTPValidationError\"}\n                        }\n                    },\n                }\n                if \"ValidationError\" not in definitions:\n                    definitions.update(\n                        {\n                            \"ValidationError\": validation_error_definition,\n                            \"HTTPValidationError\": validation_error_response_definition,\n                        }\n                    )\n            path[method.lower()] = operation\n    return path, security_schemes, definitions\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_4/fastapi/openapi/utils.py",
    "1.3.2": [
        "get_openapi_params(dependant: Dependant) -> List[ModelField]",
        "get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, List]",
        "get_openapi_operation_parameters(all_route_params: Sequence[ModelField]) -> List[Dict[str, Any]]",
        "get_openapi_operation_request_body() -> Optional[Dict]",
        "get_openapi_operation_metadata() -> Dict",
        "get_openapi_path() -> Tuple[Dict, Dict, Dict]"
    ],
    "1.4.1": [
        "def test_reused_param():\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == openapi_schema"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_4/tests/test_param_in_path_and_dependency.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert {'components': {'schemas': {'HTTPValidationError': {'properties': {'detail': {'items': {'$ref': '#/components/schemas/ValidationError'},\\n                                                                              'title': 'Detail',\\n                                                                              'type': 'array'}},\\n                                                    'title': 'HTTPValidationError',\\n                                                    'type': 'object'},\\n                            'ValidationError': {'properties': {'loc': {'items': {'type': 'string'},\\n                                                                       'title': 'Location',\\n                                                                       'type': 'array'},\\n                                                               'msg': {'title': 'Message',\\n                                                                       'type': 'string'},\\n                                                               'type': {'title': 'Error '\\n                                                                                 'Type',\\n                                                                        'type': 'string'}},\\n                                                'required': ['loc',\\n                                                             'msg',\\n                                                             'type'],\\n                                                'title': 'ValidationError',\\n                                                'type': 'object'}}},\\n 'info': {'title': 'FastAPI', 'version': '0.1.0'},\\n 'openapi': '3.0.2',\\n 'paths': {'/users/{user_id}': {'get': {'operationId': 'read_users_users__user_id__get',\\n                                        'parameters': [{'in': 'path',\\n                                                        'name': 'user_id',\\n                                                        'required': True,\\n                                                        'schema': {'title': 'User '\\n                                                                            'Id',\\n                                                                   'type': 'integer'}},\\n                                                       {'in': 'path',\\n                                                        'name': 'user_id',\\n                                                        'required': True,\\n                                                        'schema': {'title': 'User '\\n                                                                            'Id',\\n                                                                   'type': 'integer'}}],\\n                                        'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                              'description': 'Successful '\\n                                                                             'Response'},\\n                                                      '422': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}},\\n                                                              'description': 'Validation '\\n                                                                             'Error'}},\\n                                        'summary': 'Read Users'}}}} == {'components': {'schemas': {'HTTPValidationError': {'properties': {'detail': {'items': {'$ref': '#/components/schemas/ValidationError'},\\n                                                                              'title': 'Detail',\\n                                                                              'type': 'array'}},\\n                                                    'title': 'HTTPValidationError',\\n                                                    'type': 'object'},\\n                            'ValidationError': {'properties': {'loc': {'items': {'type': 'string'},\\n                                                                       'title': 'Location',\\n                                                                       'type': 'array'},\\n                                                               'msg': {'title': 'Message',\\n                                                                       'type': 'string'},\\n                                                               'type': {'title': 'Error '\\n                                                                                 'Type',\\n                                                                        'type': 'string'}},\\n                                                'required': ['loc',\\n                                                             'msg',\\n                                                             'type'],\\n                                                'title': 'ValidationError',\\n                                                'type': 'object'}}},\\n 'info': {'title': 'FastAPI', 'version': '0.1.0'},\\n 'openapi': '3.0.2',\\n 'paths': {'/users/{user_id}': {'get': {'operationId': 'read_users_users__user_id__get',\\n                                        'parameters': [{'in': 'path',\\n                                                        'name': 'user_id',\\n                                                        'required': True,\\n                                                        'schema': {'title': 'User '\\n                                                                            'Id',\\n                                                                   'type': 'integer'}}],\\n                                        'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                              'description': 'Successful '\\n                                                                             'Response'},\\n                                                      '422': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}},\\n                                                              'description': 'Validation '\\n                                                                             'Error'}},\\n                                        'summary': 'Read Users'}}}}\nE         Common items:\nE         {'components': {'schemas': {'HTTPValidationError': {'properties': {'detail': {'items': {'$ref': '#/components/schemas/ValidationError'},\nE                                                                                       'title': 'Detail',\nE                                                                                       'type': 'array'}},\nE                                                             'title': 'HTTPValidationError',\nE                                                             'type': 'object'},\nE                                     'ValidationError': {'properties': {'loc': {'items': {'type': 'string'},\nE                                                                                'title': 'Location',\nE                                                                                'type': 'array'},\nE                                                                        'msg': {'title': 'Message',\nE                                                                                'type': 'string'},\nE                                                                        'type': {'title': 'Error '\nE                                                                                          'Type',\nE                                                                                 'type': 'string'}},\nE                                                         'required': ['loc',\nE                                                                      'msg',\nE                                                                      'type'],\nE                                                         'title': 'ValidationError',\nE                                                         'type': 'object'}}},\nE          'info': {'title': 'FastAPI', 'version': '0.1.0'},\nE          'openapi': '3.0.2'}\nE         Differing items:\nE         {'paths': {'/users/{user_id}': {'get': {'operationId': 'read_users_users__user_id__get', 'parameters': [{'in': 'path',...on': 'Successful Response'}, '422': {'content': {...}, 'description': 'Validation Error'}}, 'summary': 'Read Users'}}}} != {'paths': {'/users/{user_id}': {'get': {'operationId': 'read_users_users__user_id__get', 'parameters': [{'in': 'path',...on': 'Successful Response'}, '422': {'content': {...}, 'description': 'Validation Error'}}, 'summary': 'Read Users'}}}}\nE         Full diff:\nE           {\nE            'components': {'schemas': {'HTTPValidationError': {'properties': {'detail': {'items': {'$ref': '#/components/schemas/ValidationError'},\nE                                                                                         'title': 'Detail',\nE                                                                                         'type': 'array'}},\nE                                                               'title': 'HTTPValidationError',\nE                                                               'type': 'object'},\nE                                       'ValidationError': {'properties': {'loc': {'items': {'type': 'string'},\nE                                                                                  'title': 'Location',\nE                                                                                  'type': 'array'},\nE                                                                          'msg': {'title': 'Message',\nE                                                                                  'type': 'string'},\nE                                                                          'type': {'title': 'Error '\nE                                                                                            'Type',\nE                                                                                   'type': 'string'}},\nE                                                           'required': ['loc',\nE                                                                        'msg',\nE                                                                        'type'],\nE                                                           'title': 'ValidationError',\nE                                                           'type': 'object'}}},\nE            'info': {'title': 'FastAPI',\nE                     'version': '0.1.0'},\nE            'openapi': '3.0.2',\nE            'paths': {'/users/{user_id}': {'get': {'operationId': 'read_users_users__user_id__get',\nE                                                   'parameters': [{'in': 'path',\nE                                                                   'name': 'user_id',\nE                                                                   'required': True,\nE                                                                   'schema': {'title': 'User '\nE                                                                                       'Id',\nE         +                                                                    'type': 'integer'}},\nE         +                                                        {'in': 'path',\nE         +                                                         'name': 'user_id',\nE         +                                                         'required': True,\nE         +                                                         'schema': {'title': 'User '\nE         +                                                                             'Id',\nE                                                                              'type': 'integer'}}],\nE                                                   'responses': {'200': {'content': {'application/json': {'schema': {}}},\nE                                                                         'description': 'Successful '\nE                                                                                        'Response'},\nE                                                                 '422': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}},\nE                                                                         'description': 'Validation '\nE                                                                                        'Error'}},\nE                                                   'summary': 'Read Users'}}},\nE           }"
        ]
    ],
    "2.1.2": [
        [
            "def test_reused_param():\n        response = client.get(\"/openapi.json\")\n        data = response.json()\n>       assert data == openapi_schema",
            "\ntests/test_param_in_path_and_dependency.py:88: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "route.methods": "{'GET'}",
                "route": "<fastapi.routing.APIRoute object at 0x10b3ee6a0>",
                "route.response_class": "<class 'starlette.responses.JSONResponse'>",
                "route.include_in_schema": "True",
                "route.dependant": "<fastapi.dependencies.models.Dependant object at 0x10b3ee7c0>",
                "model_name_map": "{}",
                "route.responses": "{}",
                "route.response_fields": "{}",
                "route.status_code": "200",
                "route.response_description": "'Successful Response'"
            },
            {
                "path": "array of shape 1",
                "security_schemes": "{}",
                "definitions": "{'ValidationError': {'title': 'ValidationError', 'type': 'object', 'properties': {'loc': {'title': 'Location', 'type': 'array', 'items': {'type': 'string'}}, 'msg': {'title': 'Message', 'type': 'string'}, 'type': {'title': 'Error Type', 'type': 'string'}}, 'required': ['loc', 'msg', 'type']}, 'HTTPValidationError': {'title': 'HTTPValidationError', 'type': 'object', 'properties': {'detail': {'title': 'Detail', 'type': 'array', 'items': {'$ref': '#/components/schemas/ValidationError'}}}}}",
                "route_response_media_type": "'application/json'",
                "method": "'GET'",
                "operation": "array of shape 4",
                "parameters": "[{'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}, {'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}]",
                "flat_dependant": "<fastapi.dependencies.models.Dependant object at 0x10b41fe50>",
                "security_definitions": "{}",
                "operation_security": "[]",
                "all_route_params": "[ModelField(name='user_id', type=int, required=True), ModelField(name='user_id', type=int, required=True)]",
                "operation_parameters": "[{'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}, {'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}]",
                "response_schema": "{}",
                "status_code": "'200'",
                "http422": "'422'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "route.methods": "set",
                "route": "APIRoute",
                "route.response_class": "type",
                "route.include_in_schema": "bool",
                "route.dependant": "Dependant",
                "model_name_map": "dict",
                "route.responses": "dict",
                "route.response_fields": "dict",
                "route.status_code": "int",
                "route.response_description": "str"
            },
            {
                "path": "dict",
                "security_schemes": "dict",
                "definitions": "dict",
                "route_response_media_type": "str",
                "method": "str",
                "operation": "dict",
                "parameters": "list",
                "flat_dependant": "Dependant",
                "security_definitions": "dict",
                "operation_security": "list",
                "all_route_params": "list",
                "operation_parameters": "list",
                "response_schema": "dict",
                "status_code": "str",
                "http422": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "route.methods": "{'GET'}",
                "route": "<fastapi.routing.APIRoute object at 0x10d3c3790>",
                "route.response_class": "<class 'starlette.responses.JSONResponse'>",
                "route.include_in_schema": "True",
                "route.dependant": "<fastapi.dependencies.models.Dependant object at 0x10d3c38b0>",
                "model_name_map": "{}",
                "route.responses": "{}",
                "route.response_fields": "{}",
                "route.status_code": "200",
                "route.response_description": "'Successful Response'"
            },
            {
                "path": "{'get': {'summary': 'Read Users', 'operationId': 'read_users_users__user_id__get', 'parameters': [{'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}",
                "security_schemes": "{}",
                "definitions": "{'ValidationError': {'title': 'ValidationError', 'type': 'object', 'properties': {'loc': {'title': 'Location', 'type': 'array', 'items': {'type': 'string'}}, 'msg': {'title': 'Message', 'type': 'string'}, 'type': {'title': 'Error Type', 'type': 'string'}}, 'required': ['loc', 'msg', 'type']}, 'HTTPValidationError': {'title': 'HTTPValidationError', 'type': 'object', 'properties': {'detail': {'title': 'Detail', 'type': 'array', 'items': {'$ref': '#/components/schemas/ValidationError'}}}}}",
                "route_response_media_type": "'application/json'",
                "method": "'GET'",
                "operation": "{'summary': 'Read Users', 'operationId': 'read_users_users__user_id__get', 'parameters': [{'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}",
                "parameters": "[{'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}, {'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}]",
                "flat_dependant": "<fastapi.dependencies.models.Dependant object at 0x10d407eb0>",
                "security_definitions": "{}",
                "operation_security": "[]",
                "all_route_params": "[ModelField(name='user_id', type=int, required=True), ModelField(name='user_id', type=int, required=True)]",
                "operation_parameters": "[{'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}, {'name': 'user_id', 'in': 'path', 'required': True, 'schema': {'title': 'User Id', 'type': 'integer'}}]",
                "response_schema": "{}",
                "status_code": "'200'",
                "http422": "'422'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "route.methods": "set",
                "route": "APIRoute",
                "route.response_class": "type",
                "route.include_in_schema": "bool",
                "route.dependant": "Dependant",
                "model_name_map": "dict",
                "route.responses": "dict",
                "route.response_fields": "dict",
                "route.status_code": "int",
                "route.response_description": "str"
            },
            {
                "path": "dict",
                "security_schemes": "dict",
                "definitions": "dict",
                "route_response_media_type": "str",
                "method": "str",
                "operation": "dict",
                "parameters": "list",
                "flat_dependant": "Dependant",
                "security_definitions": "dict",
                "operation_security": "list",
                "all_route_params": "list",
                "operation_parameters": "list",
                "response_schema": "dict",
                "status_code": "str",
                "http422": "str"
            }
        ]
    ],
    "3.1.1": [
        "The generated OpenAPI schema duplicates parameter IDs when used with dependencies\n"
    ],
    "3.1.2": [
        "Describe the bug\nThe generated OpenAPI schema duplicates parameter IDs when used with dependencies.\n\nTo Reproduce\nSteps to reproduce the behavior with a minimum self-contained file.\n\nCreate a file with:\nfrom fastapi import Depends, FastAPI\nfrom starlette.testclient import TestClient\n\napp = FastAPI()\n\n\nasync def user_exists(user_id: int):\n    return True\n\n\n@app.post(\"/users/{user_id}\", dependencies=[Depends(user_exists)])\nasync def bug(user_id: int):\n    pass\n\n\nclient = TestClient(app)\n\nopenapi_schema = {\n    \"openapi\": \"3.0.2\",\n    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n    \"paths\": {\n        \"/users/{user_id}\": {\n            \"post\": {\n                \"summary\": \"Bug\",\n                \"operationId\": \"bug_users__user_id__post\",\n                \"parameters\": [\n                    {\n                        \"required\": True,\n                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                        \"name\": \"user_id\",\n                        \"in\": \"path\",\n                    },\n                    # This duplicated user_id shouldn't be here\n                    # {\n                    #     \"required\": True,\n                    #     \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n                    #     \"name\": \"user_id\",\n                    #     \"in\": \"path\",\n                    # },\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\"application/json\": {\"schema\": {}}},\n                    },\n                    \"422\": {\n                        \"description\": \"Validation Error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                }\n                            }\n                        },\n                    },\n                },\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n                    }\n                },\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\"loc\", \"msg\", \"type\"],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\"type\": \"string\"},\n                    },\n                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                },\n            },\n        }\n    },\n}\n\n\ndef test_reused_param():\n    response = client.get(\"/openapi.json\")\n    data = response.json()\n    assert data == openapi_schema\nRun it with pytest.\nAlternatively, you can run it with Uvicorn go to /openapi.json, copy that and validate it at: https://editor.swagger.io/ . It should be valid.\n\nExpected behavior\nThe user_id used by the path operation and the dependency shouldn't be duplicated in the OpenAPI schema.\n\nEnvironment\nOS: all\nFastAPI Version [e.g. 0.3.0], get it with: 0.48.0\npython -c \"import fastapi; print(fastapi.__version__)\"\nPython version, get it with: 3.7\npython --version\n"
    ]
}