{
    "fastapi": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 158,
            "file_name": "openapi/utils.py",
            "replace_code": "def get_openapi_path(\n    *, route: routing.APIRoute, model_name_map: Dict[Type, str]\n) -> Tuple[Dict, Dict, Dict]:\n\n    path = {}\n    security_schemes: Dict[str, Any] = {}\n    definitions: Dict[str, Any] = {}\n    assert route.response_class, \"A response class is needed to generate OpenAPI\"\n    route_response_media_type: Optional[str] = route.response_class.media_type\n    if route.include_in_schema:\n        if 'GET' in route.methods:\n            method = 'get'\n            operation = get_openapi_operation_metadata(route=route, method=method)\n            if route.dependant:\n                all_route_params = get_openapi_params(route.dependant)\n                operation_parameters = get_openapi_operation_parameters(all_route_params)\n                parameters = operation_parameters\n                operation[\"parameters\"] = parameters\n            if route.response_fields:\n                response = {}\n                field = route.response_fields.get('200')\n                if field:\n                    response_schema, _, _ = field_schema(\n                        field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                    )\n                    response.setdefault(\"content\", {}).setdefault(\n                        route_response_media_type or \"application/json\", {}\n                    )[\"schema\"] = response_schema\n                response[\"description\"] = \"Successful Response\"\n                operation.setdefault(\"responses\", {}).setdefault('200', {}).update(response)\n            path[method] = operation\n    \n    return path, security_schemes, definitions"
        }
    ]
}