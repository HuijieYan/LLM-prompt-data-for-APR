{
    "fastapi": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 158,
            "file_name": "fastapi/openapi/utils.py",
            "replace_code": "def get_openapi_path(\n    *, route: routing.APIRoute, model_name_map: Dict[Type, str]\n) -> Tuple[Dict, Dict, Dict]:\n\n    path = {}\n    security_schemes: Dict[str, Any] = {}\n    definitions: Dict[str, Any] = {}\n    assert route.methods is not None, \"Methods must be a list\"\n    assert route.response_class, \"A response class is needed to generate OpenAPI\"\n    route_response_media_type: Optional[str] = route.response_class.media_type\n    if route.include_in_schema:\n        for method in route.methods:\n            operation = get_openapi_operation_metadata(route=route, method=method)\n            parameters: List[Dict] = []\n            flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n            security_definitions, operation_security = get_openapi_security_definitions(\n                flat_dependant=flat_dependant\n            )\n            if operation_security:\n                operation.setdefault(\"security\", []).extend(operation_security)\n            if security_definitions:\n                security_schemes.update(security_definitions)\n            all_route_params = get_openapi_params(route.dependant)\n            operation_parameters = get_openapi_operation_parameters(all_route_params)\n            if operation_parameters:\n                operation[\"parameters\"] = operation_parameters\n            if method in METHODS_WITH_BODY:\n                request_body_oai = get_openapi_operation_request_body(\n                    route.body_field, model_name_map=model_name_map\n                )\n                if request_body_oai:\n                    operation[\"requestBody\"] = request_body_oai\n            if route.callbacks:\n                callbacks = {}\n                for callback in route.callbacks:\n                    cb_path, cb_security_schemes, cb_definitions, = get_openapi_path(\n                        route=callback, model_name_map=model_name_map\n                    )\n                    callbacks[callback.name] = {callback.path: cb_path}\n                operation[\"callbacks\"] = callbacks\n            if route.responses:\n                for (status_code, response) in route.responses.items():\n                    field = route.response_fields.get(status_code)\n                    if field:\n                        response_schema, _, _ = field_schema(\n                            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                        )\n                        response.setdefault(\"content\", {}).setdefault(\n                            route_response_media_type or \"application/json\", {}\n                        )[\"schema\"] = response_schema\n                    status_text: Optional[str] = status_code_ranges.get(\n                        str(status_code).upper()\n                    ) or http.client.responses.get(int(status_code))\n                    response.setdefault(\n                        \"description\", status_text or \"Response\"\n                    )\n                    status_code_key = str(status_code).upper()\n                    if status_code_key == \"DEFAULT\":\n                        status_code_key = \"default\"\n                    operation.setdefault(\"responses\", {})[status_code_key] = response\n            path[method.lower()] = operation\n    return path, security_schemes, definitions"
        }
    ]
}