{
    "1.1.1": "def serialize_response(\n    *,\n    field: Field = None,\n    response: Response,\n    include: Set[str] = None,\n    exclude: Set[str] = set(),\n    by_alias: bool = True,\n    skip_defaults: bool = False,\n) -> Any:\n    if field:\n        errors = []\n        value, errors_ = field.validate(response, {}, loc=(\"response\",))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            skip_defaults=skip_defaults,\n        )\n    else:\n        return jsonable_encoder(response)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_10/fastapi/routing.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_return_defaults():\n    response = client.get(\"/\")\n    assert response.json() == {\"sub\": {}}"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_10/tests/test_skip_defaults.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert {'sub': {'a': 'foo'}, 'x': None} == {'sub': {}}\nE         Differing items:\nE         {'sub': {'a': 'foo'}} != {'sub': {}}\nE         Left contains 1 more item:\nE         {'x': None}\nE         Full diff:\nE         - {'sub': {}}\nE         + {'sub': {'a': 'foo'}, 'x': None}"
        ]
    ],
    "2.1.2": [
        [
            "def test_return_defaults():\n        response = client.get(\"/\")\n>       assert response.json() == {\"sub\": {}}",
            "\ntests/test_skip_defaults.py:29: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "field": "<Field(Response_get__get type=Model default=None)>",
                "field.validate": "<bound method Field.validate of <Field(Response_get__get type=Model default=None)>>",
                "response": "<Model x=None sub=<SubModel a='foo'>>",
                "exclude": "set()",
                "by_alias": "True",
                "skip_defaults": "True"
            },
            {
                "errors": "[]",
                "value": "<Model x=None sub=<SubModel a='foo'>>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "field": "Field",
                "field.validate": "method",
                "response": "Model",
                "exclude": "set",
                "by_alias": "bool",
                "skip_defaults": "bool"
            },
            {
                "errors": "list",
                "value": "Model"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "field": "<Field(Response_get__get type=Model default=None)>",
                "field.validate": "<bound method Field.validate of <Field(Response_get__get type=Model default=None)>>",
                "response": "<Model x=None sub=<SubModel a='foo'>>",
                "skip_defaults": "True",
                "response.dict": "<bound method BaseModel.dict of <Model x=None sub=<SubModel a='foo'>>>",
                "exclude": "set()",
                "by_alias": "True"
            },
            {
                "errors": "[]",
                "value": "{'sub': {}}"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "field": "Field",
                "field.validate": "method",
                "response": "Model",
                "skip_defaults": "bool",
                "response.dict": "method",
                "exclude": "set",
                "by_alias": "bool"
            },
            {
                "errors": "list",
                "value": "dict"
            }
        ]
    ],
    "3.1.1": [
        "response_model_skip_defaults doesn't appear to be working?\n"
    ],
    "3.1.2": [
        "Describe the bug\nIt's pretty straightforward, I've used the response_model_skip_defaults flag but it's returning the full model anyways. I'll try to post code examples but it's really barebones.\n\nTo Reproduce\nSteps to reproduce the behavior:\n\nCreate a file with '...'\nAdd a path operation function with '....'\nOpen the browser and call it with a payload of '....'\nSee error\nCode\nAcross a few different files...\n\nApp = FastAPI(debug=settings.debug)\nApp.add_middleware(RequestContextMiddleware)\nApp.add_middleware(ApiTokenMiddleware)\nApp.add_middleware(SentryMiddleware)\nApp.include_router(profile_router,\n    prefix='/org/{org_id:int}/groups/{group_id:int}')\n\n...\n\n@validate_token(scope='usermanagement')\n@profile_router.get('/profile', response_model=Profile, response_model_skip_defaults=True)\nasync def get_profile(org_id: int, group_id: int):\n    return Profile(description=\"These are words\")\n\n...\n\nclass ProfileContact(BaseModel):\n    email: EmailStr = None\n    phone: str = None\n    website: str = None\n\nclass ProfileAddress(BaseModel):\n    address: str = None\n    city: str = None\n    state: str = None\n    zip: str = None\n    country: str = None\n\nclass Profile(BaseModel):\n    first_name: str = None\n    last_name: str = None\n    title: str = None\n    company: str = None\n    licenses: str = None\n    headline: str = None\n    description: str = None\n    disclaimer: str = None\n    contact: ProfileContact = None\n    address: ProfileAddress = None\nsome shell stuff that works just fine:\n\nIn [1]: from profile_management.service.profiles.records import Profile\nIn [2]: x = Profile(description=\"Test stuff\")\n\nIn [3]: x.dict()\nOut[3]: \n{'first_name': None,\n 'last_name': None,\n 'title': None,\n 'company': None,\n 'licenses': None,\n 'headline': None,\n 'description': 'Test stuff',\n 'disclaimer': None,\n 'contact': None,\n 'address': None}\n\nIn [4]: x.dict(skip_defaults=True)\nOut[4]: {'description': 'Test stuff'}\n\nIn [5]: from fastapi.encoders import jsonable_encoder\n\nIn [6]: jsonable_encoder(x, skip_defaults=True)\nOut[6]: {'description': 'Test stuff'}\nNot sure why the same behavior isn't working at the router level\n\nEnvironment:\n\nOS: Windows\nFastAPI Version: 0.33.0\nPython version: 3.7.3\n"
    ]
}