{
    "fastapi": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 37,
            "file_name": "routing.py",
            "replace_code": "def serialize_response(\n    *,\n    field: Field = None,\n    response: Response,\n    include: Set[str] = None,\n    exclude: Set[str] = set(),\n    by_alias: bool = True,\n    skip_defaults: bool = False,\n) -> Any:\n    from typing import Any, Set\n    from pydantic import BaseModel, Field, EmailStr\n    from fastapi.encoders import jsonable_encoder\n    from fastapi.responses import Response\n    from fastapi.exceptions import ValidationError\n    if field:\n        errors = []\n        value, errors_ = field.validate(response, {}, loc=(\"response\",))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            skip_defaults=skip_defaults,\n        )\n    else:\n        encoded_response = jsonable_encoder(response, include=include, exclude=exclude, by_alias=by_alias, skip_defaults=skip_defaults)\n        return encoded_response"
        }
    ]
}