{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 89,
            "file_name": "utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    from pydantic import BaseModel, create_model, FieldInfo, ModelField, Type, cast\n    original_type = field.type_\n    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n        original_type = original_type.__pydantic_model__  # type: ignore\n    use_type = original_type\n    if lenient_issubclass(original_type, BaseModel):\n        original_type = cast(Type[BaseModel], original_type)\n        use_type = create_model(\n            original_type.__name__, __config__=original_type.__config__\n        )\n        for f in original_type.__fields__.values():\n            use_type.__fields__[f.name] = f\n        use_type.__validators__ = original_type.__validators__\n    new_field = ModelField(\n        name = field.name,\n        type_ = use_type,\n        class_validators = field.class_validators,\n        default = field.default,\n        required = field.required,\n        model_config = field.model_config,\n        field_info = field.field_info,\n        has_alias = field.has_alias,\n        alias = field.alias,\n        validators = field.validators,\n        parse_json = field.parse_json,\n        shape = field.shape,\n        sub_fields = [create_cloned_field(sub_field) for sub_field in field.sub_fields] if field.sub_fields else None,\n        key_field = create_cloned_field(field.key_field) if field.key_field else None\n    )\n    new_field.allow_none = field.allow_none\n    new_field.validate_always = field.validate_always\n    if PYDANTIC_1:\n        new_field.field_info = field.field_info\n    else:  # pragma: nocover\n        new_field.schema = field.schema  # type: ignore\n    new_field.populate_validators()\n    return new_field"
        }
    ]
}