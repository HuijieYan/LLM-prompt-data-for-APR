{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 89,
            "file_name": "utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    from pydantic.fields import ModelField\n    from pydantic.main import BaseModel\n    from pydantic.types import Type\n    if hasattr(field.type_, \"__fields__\"):\n        fields = {}\n        for name, sub_field in field.type_.__fields__.items():\n            fields[name] = create_cloned_field(sub_field)\n        return ModelField(\n            name=field.name,\n            type_=field.type_,\n            required=field.required,\n            model_config=field.model_config,\n            default=field.default,\n            alias=field.alias,\n            class_validators=field.class_validators,\n            field_info=field.field_info,\n            schema=field.schema,\n            sub_fields=fields,\n            key_field=create_cloned_field(field.key_field) if field.key_field else None,\n            validators=field.validators\n        )\n    else:\n        return field"
        }
    ]
}