{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 89,
            "file_name": "utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    from typing import Any, Union\n    from pydantic import BaseModel, ModelField, create_model, BaseConfig, FieldInfo\n    original_type = field.type_\n    use_type = original_type\n    if issubclass(original_type, BaseModel):\n        use_type = create_model(\n            original_type.__name__,\n            __config__=original_type.__config__,\n            **{f.name: (f.type_, ...) for f in original_type.__fields__.values()}\n        )\n    new_field = ModelField(\n        name=field.name,\n        type_=use_type,\n        class_validators={},\n        default=None,\n        required=False,\n        model_config=BaseConfig,\n        field_info=FieldInfo(None),\n    )\n    for attr in [\n        \"has_alias\",\n        \"alias\",\n        \"class_validators\",\n        \"default\",\n        \"required\",\n        \"model_config\",\n        \"allow_none\",\n        \"validate_always\",\n        \"validators\",\n        \"sub_fields\",\n        \"key_field\",\n        \"pre_validators\",\n        \"post_validators\",\n        \"whole_pre_validators\",\n        \"whole_post_validators\",\n        \"parse_json\",\n        \"shape\",\n    ]:\n        setattr(new_field, attr, getattr(field, attr, None))\n    return new_field"
        }
    ]
}