{
    "scrapy:14": {
        "/Volumes/SSD2T/bgp_envs/repos/scrapy_14/scrapy/utils/gz.py": {
            "buggy_functions": [
                {
                    "function_name": "is_gzipped",
                    "function_code": "def is_gzipped(response):\n    \"\"\"Return True if the response is gzipped, or False otherwise\"\"\"\n    ctype = response.headers.get('Content-Type', b'')\n    return ctype in (b'application/x-gzip', b'application/gzip')\n",
                    "decorators": [],
                    "docstring": "Return True if the response is gzipped, or False otherwise",
                    "start_line": 54,
                    "end_line": 57,
                    "variables": {
                        "ctype": [
                            56,
                            57
                        ],
                        "response.headers.get": [
                            56
                        ],
                        "response.headers": [
                            56
                        ],
                        "response": [
                            56
                        ]
                    },
                    "filtered_variables": {
                        "ctype": [
                            56,
                            57
                        ],
                        "response.headers.get": [
                            56
                        ],
                        "response.headers": [
                            56
                        ],
                        "response": [
                            56
                        ]
                    },
                    "diff_line_number": 57,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "ctype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "response.headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "response.headers": {
                                    "variable_value": "{b'Content-Type': [b'application/x-gzip;charset=utf-8']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "response": {
                                    "variable_value": "<200 http://www.example.com>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                }
                            },
                            {
                                "ctype": {
                                    "variable_value": "b'application/x-gzip;charset=utf-8'",
                                    "variable_type": "bytes",
                                    "variable_shape": "32"
                                },
                                "response.headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "response.headers": {
                                    "variable_value": "{b'Content-Type': [b'application/x-gzip;charset=utf-8']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "response": {
                                    "variable_value": "<200 http://www.example.com>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "ctype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "response.headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "response.headers": {
                                    "variable_value": "{b'Content-Type': [b'application/x-gzip;charset=utf-8']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "response": {
                                    "variable_value": "<200 http://www.example.com>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "_is_gzipped_re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_gzipped_re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "ctype": {
                                    "variable_value": "b'application/x-gzip;charset=utf-8'",
                                    "variable_type": "bytes",
                                    "variable_shape": "32"
                                },
                                "response.headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "response.headers": {
                                    "variable_value": "{b'Content-Type': [b'application/x-gzip;charset=utf-8']}",
                                    "variable_type": "Headers",
                                    "variable_shape": "1"
                                },
                                "response": {
                                    "variable_value": "<200 http://www.example.com>",
                                    "variable_type": "Response",
                                    "variable_shape": null
                                },
                                "_is_gzipped_re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_gzipped_re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def gunzip(data):\n    \"\"\"Gunzip the given data and return as much data as possible.\n\n    This is resilient to CRC checksum errors.\n    \"\"\"\n    f = GzipFile(fileobj=BytesIO(data))\n    output = b''\n    chunk = b'.'\n    while chunk:\n        try:\n            chunk = read1(f, 8196)\n            output += chunk\n        except (IOError, EOFError, struct.error):\n            # complete only if there is some data, otherwise re-raise\n            # see issue 87 about catching struct.error\n            # some pages are quite small so output is '' and f.extrabuf\n            # contains the whole page content\n            if output or getattr(f, 'extrabuf', None):\n                try:\n                    output += f.extrabuf\n                finally:\n                    break\n            else:\n                raise\n    return output",
                "def is_gzipped(response):\n    \"\"\"Return True if the response is gzipped, or False otherwise\"\"\"\n    ctype = response.headers.get('Content-Type', b'')\n    return ctype in (b'application/x-gzip', b'application/gzip')",
                "def read1(gzf, size=-1):\n    return gzf.read(size)",
                "def read1(gzf, size=-1):\n    return gzf.read1(size)"
            ],
            "inscope_function_signatures": [
                "gunzip(data)",
                "is_gzipped(response)",
                "read1(gzf, size=-1)",
                "read1(gzf, size=-1)"
            ],
            "variables_in_file": {
                "ImportError": [
                    5
                ],
                "six.PY2": [
                    19
                ],
                "six": [
                    19
                ],
                "gzf.read": [
                    21
                ],
                "gzf": [
                    24,
                    21
                ],
                "size": [
                    24,
                    21
                ],
                "gzf.read1": [
                    24
                ],
                "f": [
                    32,
                    44,
                    37,
                    46
                ],
                "GzipFile": [
                    32
                ],
                "BytesIO": [
                    32
                ],
                "data": [
                    32
                ],
                "output": [
                    33,
                    38,
                    44,
                    46,
                    51
                ],
                "chunk": [
                    34,
                    35,
                    37,
                    38
                ],
                "read1": [
                    37
                ],
                "IOError": [
                    39
                ],
                "EOFError": [
                    39
                ],
                "struct.error": [
                    39
                ],
                "struct": [
                    39
                ],
                "getattr": [
                    44
                ],
                "f.extrabuf": [
                    46
                ],
                "ctype": [
                    56,
                    57
                ],
                "response.headers.get": [
                    56
                ],
                "response.headers": [
                    56
                ],
                "response": [
                    56
                ]
            },
            "filtered_variables_in_file": {
                "six.PY2": [
                    19
                ],
                "six": [
                    19
                ],
                "gzf.read": [
                    21
                ],
                "gzf": [
                    24,
                    21
                ],
                "size": [
                    24,
                    21
                ],
                "gzf.read1": [
                    24
                ],
                "f": [
                    32,
                    44,
                    37,
                    46
                ],
                "GzipFile": [
                    32
                ],
                "BytesIO": [
                    32
                ],
                "data": [
                    32
                ],
                "output": [
                    33,
                    38,
                    44,
                    46,
                    51
                ],
                "chunk": [
                    34,
                    35,
                    37,
                    38
                ],
                "read1": [
                    37
                ],
                "struct.error": [
                    39
                ],
                "struct": [
                    39
                ],
                "f.extrabuf": [
                    46
                ],
                "ctype": [
                    56,
                    57
                ],
                "response.headers.get": [
                    56
                ],
                "response.headers": [
                    56
                ],
                "response": [
                    56
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/scrapy_14/tests/test_utils_gz.py",
                "test_function": "test_is_gzipped_with_charset",
                "test_function_code": "    def test_is_gzipped_with_charset(self):\n        hdrs = Headers({\"Content-Type\": \"application/x-gzip;charset=utf-8\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n        self.assertTrue(is_gzipped(r1))",
                "test_error": "AssertionError: False is not true",
                "full_test_error": "self = <tests.test_utils_gz.GunzipTest testMethod=test_is_gzipped_with_charset>\n\n    def test_is_gzipped_with_charset(self):\n        hdrs = Headers({\"Content-Type\": \"application/x-gzip;charset=utf-8\"})\n        r1 = Response(\"http://www.example.com\", headers=hdrs)\n>       self.assertTrue(is_gzipped(r1))\nE       AssertionError: False is not true\n\n/Volumes/SSD2T/bgp_envs/repos/scrapy_14/tests/test_utils_gz.py:68: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}