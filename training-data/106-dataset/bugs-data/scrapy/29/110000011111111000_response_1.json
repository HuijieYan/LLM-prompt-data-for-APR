{
    "scrapy": [
        {
            "bugID": 29,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 73,
            "file_name": "/scrapy/utils/request.py",
            "replace_code": "def request_httprepr(request):\n    from urllib.parse import urlsplit, urlunsplit\n    from twisted.web.http_headers import Headers\n    from scrapy.http.request import Request\n    from six import binary_type\n    \"\"\"Return the raw HTTP representation (as bytes) of the given request.\n    This is provided only for reference since it's not the actual stream of\n    bytes that will be sent when performing the request (that's controlled\n    by Twisted).\n    \"\"\"\n    parsed = urlsplit(request.url)\n    path = urlunsplit(('', '', parsed.path or '/', parsed.params, parsed.query))\n    \n    s = binary_type(request.method) + b\" \" + binary_type(path) + b\" HTTP/1.1\\r\\n\"\n    s += b\"Host: \" + binary_type(parsed.hostname) + b\"\\r\\n\"\n    \n    if request.headers:\n        s += request.headers.to_string() + b\"\\r\\n\"\n        \n    s += b\"\\r\\n\"\n    s += request.body if isinstance(request.body, bytes) else binary_type(request.body, 'utf-8')\n    \n    return s"
        }
    ]
}