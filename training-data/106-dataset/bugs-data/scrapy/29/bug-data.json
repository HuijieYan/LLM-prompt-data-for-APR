{
    "scrapy:29": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_29/scrapy/utils/request.py": {
            "buggy_functions": [
                {
                    "function_name": "request_httprepr",
                    "function_code": "def request_httprepr(request):\n    \"\"\"Return the raw HTTP representation (as bytes) of the given request.\n    This is provided only for reference since it's not the actual stream of\n    bytes that will be send when performing the request (that's controlled\n    by Twisted).\n    \"\"\"\n    parsed = urlparse_cached(request)\n    path = urlunparse(('', '', parsed.path or '/', parsed.params, parsed.query, ''))\n    s = to_bytes(request.method) + b\" \" + to_bytes(path) + b\" HTTP/1.1\\r\\n\"\n    s += b\"Host: \" + to_bytes(parsed.hostname) + b\"\\r\\n\"\n    if request.headers:\n        s += request.headers.to_string() + b\"\\r\\n\"\n    s += b\"\\r\\n\"\n    s += request.body\n    return s\n",
                    "decorators": [],
                    "docstring": "Return the raw HTTP representation (as bytes) of the given request.\nThis is provided only for reference since it's not the actual stream of\nbytes that will be send when performing the request (that's controlled\nby Twisted).",
                    "start_line": 73,
                    "variables": {
                        "parsed": [
                            80,
                            82,
                            79
                        ],
                        "urlparse_cached": [
                            79
                        ],
                        "request": [
                            79,
                            81,
                            83,
                            84,
                            86
                        ],
                        "path": [
                            80,
                            81
                        ],
                        "urlunparse": [
                            80
                        ],
                        "parsed.path": [
                            80
                        ],
                        "parsed.params": [
                            80
                        ],
                        "parsed.query": [
                            80
                        ],
                        "s": [
                            81,
                            82,
                            84,
                            85,
                            86,
                            87
                        ],
                        "to_bytes": [
                            81,
                            82
                        ],
                        "request.method": [
                            81
                        ],
                        "parsed.hostname": [
                            82
                        ],
                        "request.headers": [
                            83,
                            84
                        ],
                        "request.headers.to_string": [
                            84
                        ],
                        "request.body": [
                            86
                        ]
                    },
                    "filtered_variables": {
                        "parsed": [
                            80,
                            82,
                            79
                        ],
                        "urlparse_cached": [
                            79
                        ],
                        "request": [
                            79,
                            81,
                            83,
                            84,
                            86
                        ],
                        "path": [
                            80,
                            81
                        ],
                        "urlunparse": [
                            80
                        ],
                        "parsed.path": [
                            80
                        ],
                        "parsed.params": [
                            80
                        ],
                        "parsed.query": [
                            80
                        ],
                        "s": [
                            81,
                            82,
                            84,
                            85,
                            86,
                            87
                        ],
                        "to_bytes": [
                            81,
                            82
                        ],
                        "request.method": [
                            81
                        ],
                        "parsed.hostname": [
                            82
                        ],
                        "request.headers": [
                            83,
                            84
                        ],
                        "request.headers.to_string": [
                            84
                        ],
                        "request.body": [
                            86
                        ]
                    },
                    "diff_line_number": 82,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "parsed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request": {
                                    "variable_value": "<GET file:///tmp/foo.txt>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "parsed.hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.headers": {
                                    "variable_value": "{}",
                                    "variable_type": "Headers",
                                    "variable_shape": "0"
                                },
                                "request.headers.to_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.body": {
                                    "variable_value": "b''",
                                    "variable_type": "bytes",
                                    "variable_shape": "0"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "parsed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request": {
                                    "variable_value": "<GET file:///tmp/foo.txt>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "parsed.hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.headers": {
                                    "variable_value": "{}",
                                    "variable_type": "Headers",
                                    "variable_shape": "0"
                                },
                                "request.headers.to_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.body": {
                                    "variable_value": "b''",
                                    "variable_type": "bytes",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "parsed": {
                                    "variable_value": "ParseResult(scheme='file', netloc='', path='/tmp/foo.txt', params='', query='', fragment='')",
                                    "variable_type": "ParseResult",
                                    "variable_shape": "6"
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request": {
                                    "variable_value": "<GET file:///tmp/foo.txt>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": "'/tmp/foo.txt'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.path": {
                                    "variable_value": "'/tmp/foo.txt'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "parsed.params": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "parsed.query": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "s": {
                                    "variable_value": "b'GET /tmp/foo.txt HTTP/1.1\\r\\nHost: \\r\\n\\r\\n'",
                                    "variable_type": "bytes",
                                    "variable_shape": "37"
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "parsed.hostname": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.headers": {
                                    "variable_value": "{}",
                                    "variable_type": "Headers",
                                    "variable_shape": "0"
                                },
                                "request.headers.to_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.body": {
                                    "variable_value": "b''",
                                    "variable_type": "bytes",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "parsed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request": {
                                    "variable_value": "<GET ftp://localhost/tmp/foo.txt>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "parsed.hostname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.headers": {
                                    "variable_value": "{}",
                                    "variable_type": "Headers",
                                    "variable_shape": "0"
                                },
                                "request.headers.to_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.body": {
                                    "variable_value": "b''",
                                    "variable_type": "bytes",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "parsed": {
                                    "variable_value": "ParseResult(scheme='ftp', netloc='localhost', path='/tmp/foo.txt', params='', query='', fragment='')",
                                    "variable_type": "ParseResult",
                                    "variable_shape": "6"
                                },
                                "urlparse_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request": {
                                    "variable_value": "<GET ftp://localhost/tmp/foo.txt>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": "'/tmp/foo.txt'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed.path": {
                                    "variable_value": "'/tmp/foo.txt'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "parsed.params": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "parsed.query": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "s": {
                                    "variable_value": "b'GET /tmp/foo.txt HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n'",
                                    "variable_type": "bytes",
                                    "variable_shape": "46"
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.method": {
                                    "variable_value": "'GET'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "parsed.hostname": {
                                    "variable_value": "'localhost'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "request.headers": {
                                    "variable_value": "{}",
                                    "variable_type": "Headers",
                                    "variable_shape": "0"
                                },
                                "request.headers.to_string": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.body": {
                                    "variable_value": "b''",
                                    "variable_type": "bytes",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def request_fingerprint(request, include_headers=None):\n    \"\"\"\n    Return the request fingerprint.\n\n    The request fingerprint is a hash that uniquely identifies the resource the\n    request points to. For example, take the following two urls:\n\n    http://www.example.com/query?id=111&cat=222\n    http://www.example.com/query?cat=222&id=111\n\n    Even though those are two different URLs both point to the same resource\n    and are equivalent (ie. they should return the same response).\n\n    Another example are cookies used to store session ids. Suppose the\n    following page is only accesible to authenticated users:\n\n    http://www.example.com/members/offers.html\n\n    Lot of sites use a cookie to store the session id, which adds a random\n    component to the HTTP Request and thus should be ignored when calculating\n    the fingerprint.\n\n    For this reason, request headers are ignored by default when calculating\n    the fingeprint. If you want to include specific headers use the\n    include_headers argument, which is a list of Request headers to include.\n\n    \"\"\"\n    if include_headers:\n        include_headers = tuple([to_bytes(h.lower())\n                                 for h in sorted(include_headers)])\n    cache = _fingerprint_cache.setdefault(request, {})\n    if include_headers not in cache:\n        fp = hashlib.sha1()\n        fp.update(to_bytes(request.method))\n        fp.update(to_bytes(canonicalize_url(request.url)))\n        fp.update(request.body or b'')\n        if include_headers:\n            for hdr in include_headers:\n                if hdr in request.headers:\n                    fp.update(hdr)\n                    for v in request.headers.getlist(hdr):\n                        fp.update(v)\n        cache[include_headers] = fp.hexdigest()\n    return cache[include_headers]",
                "def request_authenticate(request, username, password):\n    \"\"\"Autenticate the given request (in place) using the HTTP basic access\n    authentication mechanism (RFC 2617) and the given username and password\n    \"\"\"\n    request.headers['Authorization'] = basic_auth_header(username, password)",
                "def request_httprepr(request):\n    \"\"\"Return the raw HTTP representation (as bytes) of the given request.\n    This is provided only for reference since it's not the actual stream of\n    bytes that will be send when performing the request (that's controlled\n    by Twisted).\n    \"\"\"\n    parsed = urlparse_cached(request)\n    path = urlunparse(('', '', parsed.path or '/', parsed.params, parsed.query, ''))\n    s = to_bytes(request.method) + b\" \" + to_bytes(path) + b\" HTTP/1.1\\r\\n\"\n    s += b\"Host: \" + to_bytes(parsed.hostname) + b\"\\r\\n\"\n    if request.headers:\n        s += request.headers.to_string() + b\"\\r\\n\"\n    s += b\"\\r\\n\"\n    s += request.body\n    return s"
            ],
            "inscope_function_signatures": [
                "request_fingerprint(request, include_headers=None)",
                "request_authenticate(request, username, password)",
                "request_httprepr(request)"
            ],
            "variables_in_file": {
                "_fingerprint_cache": [
                    50,
                    19
                ],
                "weakref.WeakKeyDictionary": [
                    19
                ],
                "weakref": [
                    19
                ],
                "include_headers": [
                    47,
                    48,
                    49,
                    51,
                    56,
                    57,
                    62,
                    63
                ],
                "tuple": [
                    48
                ],
                "to_bytes": [
                    48,
                    81,
                    82,
                    53,
                    54
                ],
                "h.lower": [
                    48
                ],
                "h": [
                    48,
                    49
                ],
                "sorted": [
                    49
                ],
                "cache": [
                    50,
                    51,
                    62,
                    63
                ],
                "_fingerprint_cache.setdefault": [
                    50
                ],
                "request": [
                    70,
                    79,
                    81,
                    50,
                    83,
                    84,
                    53,
                    54,
                    55,
                    86,
                    58,
                    60
                ],
                "fp": [
                    52,
                    53,
                    54,
                    55,
                    59,
                    61,
                    62
                ],
                "hashlib.sha1": [
                    52
                ],
                "hashlib": [
                    52
                ],
                "fp.update": [
                    53,
                    54,
                    55,
                    59,
                    61
                ],
                "request.method": [
                    81,
                    53
                ],
                "canonicalize_url": [
                    54
                ],
                "request.url": [
                    54
                ],
                "request.body": [
                    86,
                    55
                ],
                "hdr": [
                    57,
                    58,
                    59,
                    60
                ],
                "request.headers": [
                    70,
                    83,
                    84,
                    58,
                    60
                ],
                "v": [
                    60,
                    61
                ],
                "request.headers.getlist": [
                    60
                ],
                "fp.hexdigest": [
                    62
                ],
                "basic_auth_header": [
                    70
                ],
                "username": [
                    70
                ],
                "password": [
                    70
                ],
                "parsed": [
                    80,
                    82,
                    79
                ],
                "urlparse_cached": [
                    79
                ],
                "path": [
                    80,
                    81
                ],
                "urlunparse": [
                    80
                ],
                "parsed.path": [
                    80
                ],
                "parsed.params": [
                    80
                ],
                "parsed.query": [
                    80
                ],
                "s": [
                    81,
                    82,
                    84,
                    85,
                    86,
                    87
                ],
                "parsed.hostname": [
                    82
                ],
                "request.headers.to_string": [
                    84
                ]
            },
            "filtered_variables_in_file": {
                "_fingerprint_cache": [
                    50,
                    19
                ],
                "weakref.WeakKeyDictionary": [
                    19
                ],
                "weakref": [
                    19
                ],
                "include_headers": [
                    47,
                    48,
                    49,
                    51,
                    56,
                    57,
                    62,
                    63
                ],
                "to_bytes": [
                    48,
                    81,
                    82,
                    53,
                    54
                ],
                "h.lower": [
                    48
                ],
                "h": [
                    48,
                    49
                ],
                "cache": [
                    50,
                    51,
                    62,
                    63
                ],
                "_fingerprint_cache.setdefault": [
                    50
                ],
                "request": [
                    70,
                    79,
                    81,
                    50,
                    83,
                    84,
                    53,
                    54,
                    55,
                    86,
                    58,
                    60
                ],
                "fp": [
                    52,
                    53,
                    54,
                    55,
                    59,
                    61,
                    62
                ],
                "hashlib.sha1": [
                    52
                ],
                "hashlib": [
                    52
                ],
                "fp.update": [
                    53,
                    54,
                    55,
                    59,
                    61
                ],
                "request.method": [
                    81,
                    53
                ],
                "canonicalize_url": [
                    54
                ],
                "request.url": [
                    54
                ],
                "request.body": [
                    86,
                    55
                ],
                "hdr": [
                    57,
                    58,
                    59,
                    60
                ],
                "request.headers": [
                    70,
                    83,
                    84,
                    58,
                    60
                ],
                "v": [
                    60,
                    61
                ],
                "request.headers.getlist": [
                    60
                ],
                "fp.hexdigest": [
                    62
                ],
                "basic_auth_header": [
                    70
                ],
                "username": [
                    70
                ],
                "password": [
                    70
                ],
                "parsed": [
                    80,
                    82,
                    79
                ],
                "urlparse_cached": [
                    79
                ],
                "path": [
                    80,
                    81
                ],
                "urlunparse": [
                    80
                ],
                "parsed.path": [
                    80
                ],
                "parsed.params": [
                    80
                ],
                "parsed.query": [
                    80
                ],
                "s": [
                    81,
                    82,
                    84,
                    85,
                    86,
                    87
                ],
                "parsed.hostname": [
                    82
                ],
                "request.headers.to_string": [
                    84
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_29/tests/test_utils_request.py",
                "test_function": "test_request_httprepr_for_non_http_request",
                "test_function_code": "    def test_request_httprepr_for_non_http_request(self):\n        # the representation is not important but it must not fail.\n        request_httprepr(Request(\"file:///tmp/foo.txt\"))\n        request_httprepr(Request(\"ftp://localhost/tmp/foo.txt\"))",
                "test_error": "TypeError: to_bytes must receive a unicode, str or bytes object, got NoneType",
                "full_test_error": "self = <tests.test_utils_request.UtilsRequestTest testMethod=test_request_httprepr_for_non_http_request>\n\n    def test_request_httprepr_for_non_http_request(self):\n        # the representation is not important but it must not fail.\n>       request_httprepr(Request(\"file:///tmp/foo.txt\"))\n\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_29/tests/test_utils_request.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_29/scrapy/utils/request.py:82: in request_httprepr\n    s += b\"Host: \" + to_bytes(parsed.hostname) + b\"\\r\\n\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = None, encoding = None, errors = 'strict'\n\n    def to_bytes(text, encoding=None, errors='strict'):\n        \"\"\"Return the binary representation of `text`. If `text`\n        is already a bytes object, return it as-is.\"\"\"\n        if isinstance(text, bytes):\n            return text\n        if not isinstance(text, six.string_types):\n>           raise TypeError('to_bytes must receive a unicode, str or bytes '\n                            'object, got %s' % type(text).__name__)\nE           TypeError: to_bytes must receive a unicode, str or bytes object, got NoneType\n\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_29/scrapy/utils/python.py:116: TypeError",
                "traceback": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_29/scrapy/utils/request.py:82: in request_httprepr\n    s += b\"Host: \" + to_bytes(parsed.hostname) + b\"\\r\\n\"",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = None, encoding = None, errors = 'strict'\n\n    def to_bytes(text, encoding=None, errors='strict'):\n        \"\"\"Return the binary representation of `text`. If `text`\n        is already a bytes object, return it as-is.\"\"\"\n        if isinstance(text, bytes):\n            return text\n        if not isinstance(text, six.string_types):\n>           raise TypeError('to_bytes must receive a unicode, str or bytes '\n                            'object, got %s' % type(text).__name__)\nE           TypeError: to_bytes must receive a unicode, str or bytes object, got NoneType\n\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_29/scrapy/utils/python.py:116: TypeError",
                "test_function_decorators": []
            }
        ]
    }
}