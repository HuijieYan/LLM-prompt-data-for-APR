{
    "scrapy": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 71,
            "file_name": "contracts/__init__.py",
            "replace_code": "def _clean_req(self, request, method, results):\n    from functools import wraps\n    import sys\n    \"\"\" stop the request from returning objects and records any errors \"\"\"\n    cb = request.callback\n    \n    @wraps(cb)\n    def cb_wrapper(response):\n        try:\n            output = cb(response)\n            output = list(iterate_spider_output(output))\n        except Exception:\n            case = _create_testcase(method, 'callback')\n            results.addError(case, sys.exc_info())\n    \n    def eb_wrapper(failure):\n        case = _create_testcase(method, 'errback')\n        if hasattr(failure, 'getTracebackObject'):\n            exc_info = failure.value, type(failure.value), failure.getTracebackObject()\n        else:\n            exc_info = failure.value, type(failure.value), sys.exc_info()\n        results.addError(case, exc_info)\n    \n    request.callback = cb_wrapper\n    request.errback = eb_wrapper"
        }
    ]
}