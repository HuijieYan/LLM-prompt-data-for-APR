{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "mes/SSD2T/bgp_envs/repos/black_19/black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    from typing import Tuple\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    \n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        if not current_line.is_decorator:\n            self.previous_defs.append(current_line.depth)\n        if self.previous_line is None or self.previous_line.is_decorator:\n            return 0, 0\n        else:\n            newlines = 2\n            if current_line.depth:\n                newlines -= 1\n            return newlines, 0\n    elif current_line.is_flow_control:\n        return 0, 1\n    elif (self.previous_line and self.previous_line.is_import and not current_line.is_import and \n            current_line.depth == self.previous_line.depth):\n        return (1 if 1 else max_allowed), 0\n    elif (self.previous_line and self.previous_line.is_yield and \n            (not current_line.is_yield or current_line.depth != self.previous_line.depth)):\n        return (1 if 1 else max_allowed), 0\n    else:\n        return 0, 0"
        }
    ]
}