{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n\n    before = 0\n    after = 0\n    \n    if current_line.depth == 0:\n        before = 2\n    else:\n        before = 1 if current_line.depth else 2\n    \n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        if self.previous_line and self.previous_line.is_decorator:\n            return 0, 0\n        if self.previous_line and self.previous_line.is_def and not current_line.is_def:\n            before = 1 if current_line.depth else 2\n            return before, 0\n        newlines = 2\n        if current_line.depth:\n            newlines -= 1\n        return newlines, 0\n    \n    if current_line.is_flow_control:\n        return before, 1\n    \n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and current_line.depth == self.previous_line.depth\n    ):\n        return before or 1, 0\n    \n    if (\n        self.previous_line\n        and self.previous_line.is_yield\n        and (\n            not current_line.is_yield\n            or current_line.depth != self.previous_line.depth\n        )\n    ):\n        return before or 1, 0\n    \n    return before, after"
        }
    ]
}