{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    from typing import Tuple\n    max_allowed = 1 if current_line.depth else 2\n    newlines = 0\n    is_decorator = current_line.is_decorator\n    if (is_decorator or current_line.is_def or current_line.is_class) and self.previous_line:\n        if self.previous_line.is_decorator:\n            return 0, 0\n        if self.previous_line and self.previous_line.is_import and not current_line.is_import and current_line.depth == self.previous_line.depth:\n            return max(1 if current_line.depth else 2, self.previous_after), 0\n        if self.previous_line.is_yield and (not current_line.is_yield or current_line.depth != self.previous_line.depth):\n            return max(1 if current_line.depth else 2, self.previous_after), 0\n        if not is_decorator:\n            self.previous_defs.append(current_line.depth)\n        if self.previous_line.is_yield and self.previous_line.is_yield != current_line.is_yield:\n            newlines = 1\n        return newlines, max(0, self.previous_after)\n    return 0, 0"
        }
    ]
}