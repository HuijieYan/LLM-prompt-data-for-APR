{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "/black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n\n    max_allowed = 1 if current_line.depth else 2\n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        if current_line.is_decorator and (self.previous_line is None or self.previous_line.is_decorator):\n            return 0, 0\n        if self.previous_line and (\n            self.previous_line.is_import\n            or (self.previous_line.is_yield and current_line.depth != self.previous_line.depth)\n        ):\n            return max(1, current_line.leaves[0].prefix.count(\"\\n\")), 0\n        newlines = 2 - current_line.depth\n        return newlines, 0\n    if current_line.is_flow_control:\n        return int(bool(current_line.leaves)), 1\n    if current_line.is_import and (\n        not self.previous_line\n        or (\n            not self.previous_line.is_import\n            and current_line.depth == self.previous_line.depth\n        )\n    ):\n        return max(1, current_line.leaves[0].prefix.count(\"\\n\")), 0\n    if current_line.is_yield and (\n        not self.previous_line\n        or (not current_line.is_yield or current_line.depth != self.previous_line.depth)\n    ):\n        return max(1, current_line.leaves[0].prefix.count(\"\\n\")), 0\n    return (\n        max(1, current_line.leaves[0].prefix.count(\"\\n\"))\n        if current_line.leaves\n        else 0,\n        0,\n    )"
        }
    ]
}