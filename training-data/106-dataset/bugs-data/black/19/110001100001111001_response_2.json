{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n\n    before = 0\n    newlines = 0\n    \n    if current_line.depth == 0:\n        max_allowed = 2\n    else:\n        max_allowed = 1\n    \n    # Check for decorators, imports, yields, etc. and the previous line structure to determine new lines\n    if current_line.is_decorator:\n        if self.previous_line and self.previous_line.is_decorator:\n            newlines = 0\n        else:\n            newlines = max(0, max_allowed - before)\n            self.previous_defs.append(current_line.depth)\n    \n    elif current_line.is_def or current_line.is_class:\n        if not self.previous_line:\n            newlines = 0\n        else:\n            newlines = 2 if current_line.depth > 0 else 1\n            self.previous_defs.append(current_line.depth)\n    \n    elif current_line.is_flow_control:\n        newlines = before\n        before = 1\n    \n    elif current_line.is_import:\n        if self.previous_line and self.previous_line.is_import and current_line.depth == self.previous_line.depth:\n            before = max(1, before)\n        newlines = 0\n    \n    elif current_line.is_yield:\n        if self.previous_line and self.previous_line.is_yield and current_line.depth != self.previous_line.depth:\n            before = max(1, before)\n        newlines = 0\n    \n    return before, newlines"
        }
    ]
}