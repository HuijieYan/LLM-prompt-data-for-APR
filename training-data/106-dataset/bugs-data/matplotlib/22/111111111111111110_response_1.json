{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 6338,
            "file_name": "axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None,\n             cumulative=False, bottom=None, histtype='bar', align='mid',\n             orientation='vertical', rwidth=None, log=False,\n             color=None, label=None, stacked=False, **kwargs):\n    from datetime import datetime\n    import matplotlib as mpl\n    from matplotlib import pyplot as plt\n    from builtins import range\n    \"\"\"\n    Plot a histogram.\n    \n    Compute and draw the histogram of *x*.  The return value is a tuple\n    (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,\n    *patches1*,...]) if the input contains multiple data.  See the\n    documentation of the *weights* parameter to draw a histogram of\n    already-binned data.\n    \n    Multiple data can be provided via *x* as a list of datasets\n    of potentially different length ([*x0*, *x1*, ...]), or as\n    a 2-D ndarray in which each column is a dataset.  Note that\n    the ndarray form is transposed relative to the list form.\n    \n    Masked arrays are not supported.\n    \n    The *bins*, *range*, *weights*, and *density* parameters behave as in\n    `numpy.histogram`.\n    \n    ... (Other parameters)\n    \"\"\"\n    # Avoid shadowing the builtin.\n    bin_range = range\n    from builtins import range\n    \n    # code goes here\n    \n    \n    if np.isscalar(x):\n        x = [x]\n    \n    if bins is None:\n        bins = mpl.rcParams['hist.bins']\n    \n    # Validate string inputs here to avoid cluttering subsequent code.\n    \n    # basic input validation\n    input_empty = np.size(x) == 0\n    # Massage 'x' for processing.\n    x = np.atleast_1d(x)\n    \n    nx = len(x)  # number of datasets\n    \n    if bins is None:\n        bins = mpl.rcParams['hist.bins']\n    \n    # Validate string inputs here to avoid cluttering subsequent code.\n    colors = np.array([self._get_lines.get_next_color()\n                       for i in range(nx)])"
        }
    ]
}