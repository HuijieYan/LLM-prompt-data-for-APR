{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 6338,
            "file_name": "axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None,\n         cumulative=False, bottom=None, histtype='bar', align='mid',\n         orientation='vertical', rwidth=None, log=False,\n         color=None, label=None, stacked=False, **kwargs):\n    \n    # other parts of the function...\n\n\n    if np.isscalar(x):\n        x = [x]\n    \n    if bins is None:\n        bins = rcParams['hist.bins']\n    \n    # other parts of the function...\n    \n    hist_kwargs = dict()\n    \n    if bin_range is not None:\n        bin_range = self.convert_xunits(bin_range)\n    \n    # We need to do to 'weights' what was done to 'x'\n    if weights is not None:\n        w = cbook._reshape_2D(weights, 'weights')\n    else:\n        w = [None] * nx\n    \n    if len(w) != nx:\n        raise ValueError('weights should have the same shape as x')\n    \n    for xi, wi in zip(x, w):\n        if wi is not None and len(wi) != len(xi):\n            raise ValueError(\n                'weights should have the same shape as x')\n    \n    if color is None:\n        color = [self._get_lines.get_next_color() for i in range(nx)]\n    else:\n        color = mcolors.to_rgba_array(color)\n        if len(color) != nx:\n            error_message = (\n                \"color kwarg must have one color per data set. %d data \"\n                \"sets and %d colors were provided\" % (nx, len(color)))\n            raise ValueError(error_message)\n    \n    # Preprocessing datetime values before histogram calculation\n    if isinstance(x[0][0], datetime.datetime):\n        x = [[date.timestamp() for date in sublist] for sublist in x]\n    \n    # other parts of the function...\n    \n    # Calculate histogram\n    m, bins = np.histogram(x, bins, weights=w, **hist_kwargs)\n    \n    # other parts of the function...\n    \n    self.set_autoscalex_on(_saved_autoscalex)\n    self.set_autoscaley_on(_saved_autoscaley)\n    self._request_autoscale_view()\n    \n    if label is None:\n        labels = [None]\n    elif isinstance(label, str):\n        labels = [label]\n    elif not np.iterable(label):\n        labels = [str(label)]\n    else:\n        labels = [str(lab) for lab in label]\n    \n    for patch, lbl in itertools.zip_longest(patches, labels):\n        if patch:\n            p = patch[0]\n            p.update(kwargs)\n            if lbl is not None:\n                p.set_label(lbl)\n    \n            for p in patch[1:]:\n                p.update(kwargs)\n                p.set_label('_nolegend_')\n    \n    if nx == 1:\n        return m, bins, cbook.silent_list('Patch', patches[0])\n    else:\n        return m, bins, cbook.silent_list('Lists of Patches', patches)"
        }
    ]
}