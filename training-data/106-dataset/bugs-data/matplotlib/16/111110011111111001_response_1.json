{
    "matplotlib": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2779,
            "file_name": "/lib/matplotlib/transforms.py",
            "replace_code": "def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n    import numpy as np\n    \"\"\"\n    Modify the endpoints of a range as needed to avoid singularities.\n    \n    Parameters\n    ----------\n    ...  (same as before)\n    \n    Returns\n    -------\n    ...  (same as before)\n    \"\"\"\n    \n    if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n        return -expander, expander\n    \n    swapped = False\n    if vmax < vmin:\n        vmin, vmax = vmax, vmin\n        swapped = True\n    \n    maxabsvalue = max(abs(vmin), abs(vmax))\n    if maxabsvalue == np.inf:  # check for extreme values\n        vmin = -expander\n        vmax = expander\n    elif vmax - vmin <= maxabsvalue * tiny:\n        if vmax == 0 and vmin == 0:\n            vmin = -expander\n            vmax = expander\n        else:\n            vmin -= expander * np.abs(vmin)  # use numpy's abs to handle extreme values\n            vmax += expander * np.abs(vmax)\n    \n    if swapped and not increasing:\n        vmin, vmax = vmax, vmin\n    return vmin, vmax"
        }
    ]
}