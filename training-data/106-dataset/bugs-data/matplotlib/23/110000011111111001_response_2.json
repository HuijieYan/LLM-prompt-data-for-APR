{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1438,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None):\n\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n    \n    Depending on `.get_adjustable` this will modify either the Axes box\n    (position) or the view limits. In the former case, `.get_anchor`\n    will affect the position.\n    \n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n    \n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        defining the parameter to adjust in order to meet the required\n        aspect.\n    matplotlib.axes.Axes.set_anchor\n        defining the position in case of extra space.\n    \"\"\"\n    if position is None:\n        position = self.get_position(original=True)\n    \n    aspect = self.get_aspect()\n    \n    if aspect == 'auto':\n        self._set_position(position, which='active')\n        return\n    \n    if aspect == 'equal':\n        aspect = 1\n    \n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n    \n    if self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                               \"twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        return\n    \n    # self._adjustable == 'datalim'\n    \n    # reset active to original in case it had been changed by prior use\n    # of 'box'\n    self._set_position(position, which='active')\n    \n    x_trf = self.xaxis.get_transform()\n    y_trf = self.yaxis.get_transform()\n    dL = self.dataLim\n    x0, x1 = dL.intervalx\n    y0, y1 = dL.intervaly\n    xr = 1.05 * (x1 - x0)\n    yr = 1.05 * (y1 - y0)\n    \n    xmid = 0.5 * (x0 + x1)\n    ymid = 0.5 * (y0 + y1)\n    \n    # Adjusting x limits\n    if self._adjustable == 'datalim':\n        data_ratio = (yr / xr) * (fig_width / fig_height)\n        datalim_aspect = data_ratio / aspect\n        if datalim_aspect > 1:\n            xsize = xr\n            ysize = yr * datalim_aspect\n            xmax = xmid + 0.5 * xsize\n            xmin = xmid - 0.5 * xsize\n            self.set_xbound(*map(x_trf.inverted().transform, (xmin, xmax)))\n        else:\n            ysize = yr\n            xsize = xr / datalim_aspect\n            xmax = xmid + 0.5 * xsize\n            xmin = xmid - 0.5 * xsize\n            self.set_xbound(*map(x_trf.inverted().transform, (xmin, xmax)))\n    \n    # Adjusting y limits\n    if self._adjustable == 'datalim':\n        if datalim_aspect > 1:\n            ymax = ymid + 0.5 * yr\n            ymin = ymid - 0.5 * yr\n            self.set_ybound(*map(y_trf.inverted().transform, (ymin, ymax)))\n        else:\n            ymax = ymid + 0.5 * ysize\n            ymin = ymid - 0.5 * ysize\n            self.set_ybound(*map(y_trf.inverted().transform, (ymin, ymax)))"
        }
    ]
}