{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1438,
            "file_name": "/lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self):\n\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n    \n    Depending on `.get_adjustable` this will modify either the Axes box\n    (position) or the view limits. In the former case, `.get_anchor`\n    will affect the position.\n    \n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n    \n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        defining the parameter to adjust in order to meet the required\n        aspect.\n    matplotlib.axes.Axes.set_anchor\n        defining the position in case of extra space.\n    \"\"\"\n    if self._adjustable == 'datalim':\n        aspect = self.get_aspect()\n        fig_width, fig_height = self.get_figure().get_size_inches()\n        fig_aspect = fig_height / fig_width\n    \n        box_aspect = self.dataRatio * aspect\n        self._set_position(self.get_position(original=True), which='active')\n        self.set_xbound(*self.get_xbound())\n        self.set_ybound(*self.get_ybound())\n    \n        Xmin, Xmax = self.get_xbound()\n        Ymin, Ymax = self.get_ybound()\n        xsize = max(abs(Xmax - Xmin), 1e-30)\n        ysize = max(abs(Ymax - Ymin), 1e-30)\n    \n        l, b, w, h = self.get_position().bounds\n    \n        Ysize = box_aspect * xsize / fig_aspect\n        Y0 = 0.5 * (Ymin + Ymax) - Ysize / 2.0\n        Y1 = 0.5 * (Ymin + Ymax) + Ysize / 2.0\n        Y0, Y1 = np.asarray([Y0, Y1])[np.argsort([Y0, Y1])]  # Ensure Y0 < Y1\n        self.set_ybound(self.yaxis.get_transform().inverted().transform([Y0, Y1]))\n    \n        aspect *= h / w\n        xmin, xmax = self.get_xbound()\n        xmin, xmax = np.asarray([xmin, xmax])[np.argsort([xmin, xmax])]  # Ensure xmin < xmax\n        center = 0.5 * (xmin + xmax)\n        Xsize = aspect * ysize\n        X0 = center - Xsize / 2.0\n        X1 = center + Xsize / 2.0\n        X0, X1 = np.asarray([X0, X1])[np.argsort([X0, X1])]  # Ensure X0 < X1\n        self.set_xbound(self.xaxis.get_transform().inverted().transform([X0, X1]))\n    else:\n        # handle other cases\n        pass"
        }
    ]
}