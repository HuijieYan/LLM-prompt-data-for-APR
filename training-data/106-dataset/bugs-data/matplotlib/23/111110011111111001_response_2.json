{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1438,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None):\n\n    if position is None:\n        position = self.get_position(original=True)\n    \n    aspect = self.get_aspect()\n    \n    if aspect == 'auto':\n        self._set_position(position, which='active')\n        return\n    \n    if aspect == 'equal':\n        aspect = 1\n    \n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n    \n    if self._adjustable == 'datalim':\n        x0, x1 = map(self.xaxis.get_transform().inverted().transform, self.dataLim.intervalx)\n        y0, y1 = map(self.yaxis.get_transform().inverted().transform, self.dataLim.intervaly)\n    \n        xc = 0.5 * (x0 + x1)\n        yc = 0.5 * (y0 + y1)\n    \n        xsize = max(abs(x1 - x0), 1e-30)\n        ysize = max(abs(y1 - y0), 1e-30)\n    \n        box_aspect = fig_aspect * (ysize / xsize)\n        data_ratio = box_aspect / aspect\n    \n        Ysize = data_ratio * xsize\n        Xsize = ysize / data_ratio\n    \n        xm = 0\n        ym = 0\n    \n        adjy = Ysize > ysize\n        if (adjy and Ysize > ysize + ym) or (Xsize > xsize + xm):\n            if adjy:\n                y0 = yc - Ysize / 2.0\n                y1 = yc + Ysize / 2.0\n                self.set_ybound(*map(self.yaxis.get_transform().transform, (y0, y1)))\n            else:\n                x0 = xc - Xsize / 2.0\n                x1 = xc + Xsize / 2.0\n                self.set_xbound(*map(self.xaxis.get_transform().transform, (x0, x1)))\n    else:\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')"
        }
    ]
}