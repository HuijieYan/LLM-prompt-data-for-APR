{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1438,
            "file_name": "axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None):\n    # ... previous code ...\n\n\n    shared_x = self in self._shared_x_axes\n    shared_y = self in self._shared_y_axes\n    \n    if shared_y:\n        if self.yaxis_inverted():\n            self.set_xbound(*map(x_trf.inverted().transform, dL.intervalx))\n        else:\n            self.set_ybound(*map(y_trf.inverted().transform, dL.intervaly))\n    else:\n        if (ymarg > 0 and y_expander < 0) or (xmarg < 0 and y_expander > 0):\n            adjust_y = True\n        else:\n            adjust_y = False\n    \n    if adjust_y:\n        if self.yaxis_inverted():\n            self.set_xbound(*map(x_trf.inverted().transform, dL.intervalx))\n        else:\n            yc = 0.5 * (ymin + ymax)\n            y0 = yc - Ysize / 2.0\n            y1 = yc + Ysize / 2.0\n            self.set_ybound(*map(y_trf.inverted().transform, (y0, y1)))\n    else:\n        if self.yaxis_inverted():\n            xc = 0.5 * (xmin + xmax)\n            x0 = xc - Xsize / 2.0\n            x1 = xc + Xsize / 2.0\n            self.set_xbound(*map(x_trf.inverted().transform, (x0, x1)))\n        else:\n            self.set_ybound(*map(y_trf.inverted().transform, dL.intervaly))"
        }
    ]
}