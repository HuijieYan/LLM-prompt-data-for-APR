{
    "matplotlib": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 949,
            "file_name": "lib/matplotlib/projections/polar.py",
            "replace_code": "def draw(self, renderer):\n\n    thetamin, thetamax = np.rad2deg(self._realViewLim.intervalx)\n    if thetamin > thetamax:\n        thetamin, thetamax = thetamax, thetamin\n    rmin, rmax = ((self._realViewLim.intervaly - self._rorigin) * self.get_rsign())\n    if isinstance(self.patch, mpatches.Wedge):\n        center = self.transWedge.transform_point((0.5, 0.5))\n        self.patch.set_theta1(thetamin)\n        self.patch.set_theta2(thetamax)\n    \n        edge = self.transWedge.transform_point((1, 0))\n        radius = edge[0] - center[0]\n        width = min(radius * (rmax - rmin) / rmax, radius)\n        self.patch.set_theta(thetamin, thetamax)\n        self.patch.set_theta_min(thetamin)\n        self.patch.set_theta_max(thetamax)\n        self.patch.set_r(rmin)\n        self.patch.set_rmax(rmax)\n        self.patch.set_width(width)\n    \n        if 'inner' in self.spines:\n            inner_width = radius - width\n            self.spines['inner'].set_visible(inner_width != 0.0)\n    \n        visible = not _is_full_circle_deg(thetamin, thetamax)\n        for spine in ['start', 'end']:\n            if spine in self.spines:\n                self.spines[spine].set_visible(visible)\n    \n        if visible:\n            yaxis_text_transform = self._r_label_position + self.transData\n        else:\n            yaxis_text_transform = self._yaxis_transform\n            \n        self._yaxis_text_transform.set(yaxis_text_transform)\n        self.yaxis.reset_ticks()\n        self.yaxis.set_clip_path(self.patch)\n    \n    Axes.draw(self, renderer)"
        }
    ]
}