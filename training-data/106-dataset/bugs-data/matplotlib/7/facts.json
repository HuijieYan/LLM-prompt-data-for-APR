{
    "1.1.1": "def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n              vert_exag=1, dx=1, dy=1, **kwargs):\n    \n    # Calculate the \"hillshade\" intensity.\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n\n    # Blend the hillshade and rgb data using the specified mode\n    lookup = {\n            'hsv': self.blend_hsv,\n            'soft': self.blend_soft_light,\n            'overlay': self.blend_overlay,\n            }\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError as err:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'\n                             .format(lookup.keys)) from err\n\n    # Only apply result where hillshade intensity isn't masked\n    if hasattr(intensity, 'mask'):\n        mask = intensity.mask[..., 0]\n        for i in range(3):\n            blend[..., i][mask] = rgb[..., i][mask]\n\n    return blend\n",
    "1.1.2": "Use this light source to adjust the colors of the *rgb* input array to\ngive the impression of a shaded relief map with the given *elevation*.\n\nParameters\n----------\nrgb : array-like\n    An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\nelevation : array-like\n    An (M, N) array of the height values used to generate a shaded map.\nfraction : number\n    Increases or decreases the contrast of the hillshade.  Values\n    greater than one will cause intermediate values to move closer to\n    full illumination or shadow (and clipping any values that move\n    beyond 0 or 1). Note that this is not visually or mathematically\n    the same as vertical exaggeration.\nblend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n    The type of blending used to combine the colormapped data values\n    with the illumination intensity.  For backwards compatibility, this\n    defaults to \"hsv\". Note that for most topographic surfaces,\n    \"overlay\" or \"soft\" appear more visually realistic. If a\n    user-defined function is supplied, it is expected to combine an\n    MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n    array (also 0 to 1).  (Call signature\n    ``func(rgb, illum, **kwargs)``)\n    Additional kwargs supplied to this function will be passed on to\n    the *blend_mode* function.\nvert_exag : number, optional\n    The amount to exaggerate the elevation values by when calculating\n    illumination. This can be used either to correct for differences in\n    units between the x-y coordinate system and the elevation\n    coordinate system (e.g. decimal degrees vs. meters) or to\n    exaggerate or de-emphasize topography.\ndx : number, optional\n    The x-spacing (columns) of the input *elevation* grid.\ndy : number, optional\n    The y-spacing (rows) of the input *elevation* grid.\nAdditional kwargs are passed on to the *blend_mode* function.\n\nReturns\n-------\nndarray\n    An (m, n, 3) array of floats ranging between 0-1.",
    "1.2.1": "class LightSource()",
    "1.2.2": "Create a light source coming from the specified azimuth and elevation.\nAngles are in degrees, with the azimuth measured\nclockwise from north and elevation up from the zero plane of the surface.\n\n`shade` is used to produce \"shaded\" rgb values for a data array.\n`shade_rgb` can be used to combine an rgb image with an elevation map.\n`hillshade` produces an illumination map of a surface.",
    "1.2.3": [
        "hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.0)",
        "blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None, hsv_min_val=None, hsv_min_sat=None)",
        "blend_soft_light(self, rgb, intensity)",
        "blend_overlay(self, rgb, intensity)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_7/lib/matplotlib/colors.py",
    "1.3.2": [
        "hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.0)",
        "blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None, hsv_min_val=None, hsv_min_sat=None)",
        "blend_soft_light(self, rgb, intensity)",
        "blend_overlay(self, rgb, intensity)"
    ],
    "1.4.1": [
        "def test_light_source_shading_empty_mask():\n    y, x = np.mgrid[-1.2:1.2:8j, -1.2:1.2:8j]\n    z0 = 10 * np.cos(x**2 + y**2)\n    z1 = np.ma.array(z0)\n\n    cmap = plt.cm.copper\n    ls = mcolors.LightSource(315, 45)\n    rgb0 = ls.shade(z0, cmap)\n    rgb1 = ls.shade(z1, cmap)\n\n    assert_array_almost_equal(rgb0, rgb1)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_7/lib/matplotlib/tests/test_colors.py"
    ],
    "2.1.1": [
        [
            "E           IndexError: invalid index to scalar variable."
        ]
    ],
    "2.1.2": [
        [
            "def test_light_source_shading_empty_mask():\n        y, x = np.mgrid[-1.2:1.2:8j, -1.2:1.2:8j]\n        z0 = 10 * np.cos(x**2 + y**2)\n        z1 = np.ma.array(z0)\n    \n        cmap = plt.cm.copper\n        ls = mcolors.LightSource(315, 45)\n        rgb0 = ls.shade(z0, cmap)\n>       rgb1 = ls.shade(z1, cmap)\n\nlib/matplotlib/tests/test_colors.py:703: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/matplotlib/colors.py:1866: in shade\n    rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <matplotlib.colors.LightSource object at 0x1112b7f10>\nrgb = array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n  ...,\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])\nelevation = masked_array(\n  data=[[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854...33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854964, -9.65979312]],\n  mask=False,\n  fill_value=1e+20)\nfraction = 1, blend_mode = 'overlay', vert_exag = 1, dx = 1, dy = 1, kwargs = {}\nintensity = masked_array(\n  data=[[[0.93286093],\n         [0.90181886],\n         [0.89217264],\n         [0.84661419],\n         [0.... [0.09484714],\n         [0.02658046],\n         [0.01158178],\n         [0.02567518]]],\n  mask=False,\n  fill_value=1e+20)\nlookup = {'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x1112b7f10>>, 'overlay': <bou...2b7f10>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x1112b7f10>>}\nblend = array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.44560451, 0.28180036, 0.17946195, 1.        ],\n  ...,\n        [0.00572276, 0.00361908, 0.00230477, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])\n\n    def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n                  vert_exag=1, dx=1, dy=1, **kwargs):\n        \"\"\"\n        Use this light source to adjust the colors of the *rgb* input array to\n        give the impression of a shaded relief map with the given *elevation*.\n    \n        Parameters\n        ----------\n        rgb : array-like\n            An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n        elevation : array-like\n            An (M, N) array of the height values used to generate a shaded map.\n        fraction : number\n            Increases or decreases the contrast of the hillshade.  Values\n            greater than one will cause intermediate values to move closer to\n            full illumination or shadow (and clipping any values that move\n            beyond 0 or 1). Note that this is not visually or mathematically\n            the same as vertical exaggeration.\n        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n            The type of blending used to combine the colormapped data values\n            with the illumination intensity.  For backwards compatibility, this\n            defaults to \"hsv\". Note that for most topographic surfaces,\n            \"overlay\" or \"soft\" appear more visually realistic. If a\n            user-defined function is supplied, it is expected to combine an\n            MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n            array (also 0 to 1).  (Call signature\n            ``func(rgb, illum, **kwargs)``)\n            Additional kwargs supplied to this function will be passed on to\n            the *blend_mode* function.\n        vert_exag : number, optional\n            The amount to exaggerate the elevation values by when calculating\n            illumination. This can be used either to correct for differences in\n            units between the x-y coordinate system and the elevation\n            coordinate system (e.g. decimal degrees vs. meters) or to\n            exaggerate or de-emphasize topography.\n        dx : number, optional\n            The x-spacing (columns) of the input *elevation* grid.\n        dy : number, optional\n            The y-spacing (rows) of the input *elevation* grid.\n        Additional kwargs are passed on to the *blend_mode* function.\n    \n        Returns\n        -------\n        ndarray\n            An (m, n, 3) array of floats ranging between 0-1.\n        \"\"\"\n        # Calculate the \"hillshade\" intensity.\n        intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n        intensity = intensity[..., np.newaxis]\n    \n        # Blend the hillshade and rgb data using the specified mode\n        lookup = {\n                'hsv': self.blend_hsv,\n                'soft': self.blend_soft_light,\n                'overlay': self.blend_overlay,\n                }\n        if blend_mode in lookup:\n            blend = lookup[blend_mode](rgb, intensity, **kwargs)\n        else:\n            try:\n                blend = blend_mode(rgb, intensity, **kwargs)\n            except TypeError as err:\n                raise ValueError('\"blend_mode\" must be callable or one of {}'\n                                 .format(lookup.keys)) from err\n    \n        # Only apply result where hillshade intensity isn't masked\n        if hasattr(intensity, 'mask'):\n>           mask = intensity.mask[..., 0]",
            "\nlib/matplotlib/colors.py:1940: IndexError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self": "<matplotlib.colors.LightSource object at 0x110b11220>",
                "elevation": "array of shape 8",
                "vert_exag": "1",
                "dx": "1",
                "dy": "1",
                "fraction": "1",
                "blend_mode": "'overlay'",
                "rgb": "array of shape 8",
                "kwargs": "{}"
            },
            {
                "intensity": "array of shape 8",
                "lookup": "{'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x110b11220>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x110b11220>>, 'overlay': <bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x110b11220>>}",
                "blend": "array of shape 8"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self": "LightSource",
                "elevation": "ndarray",
                "vert_exag": "int",
                "dx": "int",
                "dy": "int",
                "fraction": "int",
                "blend_mode": "str",
                "rgb": "ndarray",
                "kwargs": "dict"
            },
            {
                "intensity": "ndarray",
                "lookup": "dict",
                "blend": "ndarray"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self": "<matplotlib.colors.LightSource object at 0x11d676fa0>",
                "elevation": "array of shape 8",
                "vert_exag": "1",
                "dx": "1",
                "dy": "1",
                "fraction": "1",
                "blend_mode": "'overlay'",
                "rgb": "array of shape 8",
                "kwargs": "{}"
            },
            {
                "intensity": "array of shape 8",
                "lookup": "{'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x11d676fa0>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x11d676fa0>>, 'overlay': <bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x11d676fa0>>}",
                "blend": "array of shape 8"
            }
        ],
        [
            {
                "self": "<matplotlib.colors.LightSource object at 0x11d676fa0>",
                "elevation": "array of shape 8",
                "vert_exag": "1",
                "dx": "1",
                "dy": "1",
                "fraction": "1",
                "blend_mode": "'overlay'",
                "rgb": "array of shape 8",
                "kwargs": "{}"
            },
            {
                "intensity": "array of shape 8",
                "lookup": "{'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x11d676fa0>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x11d676fa0>>, 'overlay': <bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x11d676fa0>>}",
                "blend": "array of shape 8",
                "intensity.mask": "False"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self": "LightSource",
                "elevation": "ndarray",
                "vert_exag": "int",
                "dx": "int",
                "dy": "int",
                "fraction": "int",
                "blend_mode": "str",
                "rgb": "ndarray",
                "kwargs": "dict"
            },
            {
                "intensity": "ndarray",
                "lookup": "dict",
                "blend": "ndarray"
            }
        ],
        [
            {
                "self": "LightSource",
                "elevation": "MaskedArray",
                "vert_exag": "int",
                "dx": "int",
                "dy": "int",
                "fraction": "int",
                "blend_mode": "str",
                "rgb": "ndarray",
                "kwargs": "dict"
            },
            {
                "intensity": "MaskedArray",
                "lookup": "dict",
                "blend": "ndarray",
                "intensity.mask": "bool_"
            }
        ]
    ],
    "3.1.1": [
        "LightSource.shade fails on a masked array\n"
    ],
    "3.1.2": [
        "Bug report\nBug summary\n\nshade fails on a masked array. The offender seems to be intensity = np.clip(intensity, 0, 1) in shade_normals, as np.clip returns a masked array with attribute mask=False and shade_rgb expects the mask attribute to be 2D.\n\nCode for reproduction\n\nimport numpy as np\nfrom matplotlib.colors import LightSource\nimport matplotlib.cm as cm\n\ndelta = 0.5\nx = np.arange(-3.0, 4.001, delta)\ny = np.arange(-4.0, 3.001, delta)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nZ = Z1 - Z2\n\nmask = np.zeros(Z.shape, dtype = bool)\n\nZ = np.ma.masked_array(Z, mask = mask)\n\nls = LightSource(azdeg = 45., altdeg = 0.)\n\nrgba = ls.shade(Z, cmap = cm.get_cmap())\nActual outcome\n\n  File \"/Users/kpenner/anaconda3/envs/mpl/lib/python3.8/site-packages/matplotlib/colors.py\", line 1869, in shade\n    rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode,\n  File \"/Users/kpenner/anaconda3/envs/mpl/lib/python3.8/site-packages/matplotlib/colors.py\", line 1943, in shade_rgb\n    mask = intensity.mask[..., 0]\nIndexError: invalid index to scalar variable.\nExpected outcome\n\nMatplotlib version\n\nMatplotlib version: 3.2.1+2358.g9e20541c9\nPython version: 3.8\nnumpy version: 1.18.4\n"
    ]
}