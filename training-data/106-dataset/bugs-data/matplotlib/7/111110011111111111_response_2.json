{
    "matplotlib": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1873,
            "file_name": "lib/matplotlib/colors.py",
            "replace_code": "def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n              vert_exag=1, dx=1, dy=1, **kwargs):\n    # Calculate the \"hillshade\" intensity.\n\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n    \n    # Handle intensity as a masked array\n    if isinstance(intensity, np.ma.MaskedArray):\n        mask = intensity.mask[..., 0]\n        intensity = np.ma.masked_array(intensity, mask=intensity.mask)\n    else:\n        mask = False\n    \n    # Blend the hillshade and rgb data using the specified mode\n    lookup = {\n            'hsv': self.blend_hsv,\n            'soft': self.blend_soft_light,\n            'overlay': self.blend_overlay,\n            }\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError as err:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'\n                             .format(lookup.keys)) from err\n    \n    # Only apply result where hillshade intensity isn't masked\n    if mask is not False:\n        for i in range(3):\n            blend[..., i][mask] = rgb[..., i][mask]\n    \n    return blend"
        }
    ]
}