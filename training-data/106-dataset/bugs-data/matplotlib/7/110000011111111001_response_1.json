{
    "matplotlib": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1873,
            "file_name": "lib/matplotlib/colors.py",
            "replace_code": "def shade_rgb(self, rgb, elevation, elevation_mask=None, fraction=1., blend_mode='hsv',\n              vert_exag=1, dx=1, dy=1, **kwargs):\n    import numpy as np\n    \"\"\"\n    Use this light source to adjust the colors of the *rgb* input array to\n    give the impression of a shaded relief map with the given *elevation*.\n    \n    Parameters\n    ----------\n    rgb : array-like\n        An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n    elevation : array-like\n        An (M, N) array of the height values used to generate a shaded map.\n    elevation_mask : array-like, optional\n        Mask array for the elevation values.\n    fraction : number\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data values\n        with the illumination intensity.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    Additional kwargs are passed on to the *blend_mode* function.\n    \n    Returns\n    -------\n    ndarray\n        An (m, n, 3) array of floats ranging between 0-1.\n    \"\"\"\n    # Calculate the \"hillshade\" intensity.\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n    \n    if np.ma.is_masked(intensity):\n        mask = np.ma.getmask(intensity)\n        for i in range(3):\n            rgb[..., i][mask] = 0  # Set masked values to 0 for each channel\n    \n    # Blend the hillshade and rgb data using the specified mode\n    lookup = {\n            'hsv': self.blend_hsv,\n            'soft': self.blend_soft_light,\n            'overlay': self.blend_overlay,\n            }\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError as err:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'\n                             .format(lookup.keys)) from err\n    \n    return blend"
        }
    ]
}