{
    "tornado:16": {
        "/Volumes/SSD2T/bgp_envs/repos/tornado_16/tornado/gen.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, *args, **kwargs):\n    if args and kwargs:\n        raise ValueError(\n            \"You must provide args or kwargs, not both\")\n\n    if kwargs:\n        self._unfinished = dict((f, k) for (k, f) in kwargs.items())\n        futures = list(kwargs.values())\n    else:\n        self._unfinished = dict((f, i) for (i, f) in enumerate(args))\n        futures = args\n\n    self._finished = collections.deque()\n    self.current_index = self.current_future = None\n    self._running_future = None\n\n    self_ref = weakref.ref(self)\n    for future in futures:\n        future.add_done_callback(functools.partial(\n            self._done_callback, self_ref))\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 323,
                    "end_line": 342,
                    "variables": {
                        "args": [
                            324,
                            333,
                            332
                        ],
                        "kwargs": [
                            328,
                            329,
                            330,
                            324
                        ],
                        "ValueError": [
                            325
                        ],
                        "self._unfinished": [
                            329,
                            332
                        ],
                        "self": [
                            329,
                            332,
                            335,
                            336,
                            337,
                            339,
                            342
                        ],
                        "dict": [
                            329,
                            332
                        ],
                        "f": [
                            329,
                            332
                        ],
                        "k": [
                            329
                        ],
                        "kwargs.items": [
                            329
                        ],
                        "futures": [
                            330,
                            340,
                            333
                        ],
                        "list": [
                            330
                        ],
                        "kwargs.values": [
                            330
                        ],
                        "i": [
                            332
                        ],
                        "enumerate": [
                            332
                        ],
                        "self._finished": [
                            335
                        ],
                        "collections.deque": [
                            335
                        ],
                        "collections": [
                            335
                        ],
                        "self.current_index": [
                            336
                        ],
                        "self.current_future": [
                            336
                        ],
                        "self._running_future": [
                            337
                        ],
                        "self_ref": [
                            339,
                            342
                        ],
                        "weakref.ref": [
                            339
                        ],
                        "weakref": [
                            339
                        ],
                        "future": [
                            340,
                            341
                        ],
                        "future.add_done_callback": [
                            341
                        ],
                        "functools.partial": [
                            341
                        ],
                        "functools": [
                            341
                        ],
                        "self._done_callback": [
                            342
                        ]
                    },
                    "filtered_variables": {
                        "args": [
                            324,
                            333,
                            332
                        ],
                        "kwargs": [
                            328,
                            329,
                            330,
                            324
                        ],
                        "self._unfinished": [
                            329,
                            332
                        ],
                        "self": [
                            329,
                            332,
                            335,
                            336,
                            337,
                            339,
                            342
                        ],
                        "f": [
                            329,
                            332
                        ],
                        "k": [
                            329
                        ],
                        "kwargs.items": [
                            329
                        ],
                        "futures": [
                            330,
                            340,
                            333
                        ],
                        "kwargs.values": [
                            330
                        ],
                        "i": [
                            332
                        ],
                        "self._finished": [
                            335
                        ],
                        "collections.deque": [
                            335
                        ],
                        "collections": [
                            335
                        ],
                        "self.current_index": [
                            336
                        ],
                        "self.current_future": [
                            336
                        ],
                        "self._running_future": [
                            337
                        ],
                        "self_ref": [
                            339,
                            342
                        ],
                        "weakref.ref": [
                            339
                        ],
                        "weakref": [
                            339
                        ],
                        "future": [
                            340,
                            341
                        ],
                        "future.add_done_callback": [
                            341
                        ],
                        "functools.partial": [
                            341
                        ],
                        "functools": [
                            341
                        ],
                        "self._done_callback": [
                            342
                        ]
                    },
                    "diff_line_number": 338,
                    "class_data": {
                        "signature": "class WaitIterator(object)",
                        "docstring": "Provides an iterator to yield the results of futures as they finish.\n\nYielding a set of futures like this:\n\n``results = yield [future1, future2]``\n\npauses the coroutine until both ``future1`` and ``future2``\nreturn, and then restarts the coroutine with the results of both\nfutures. If either future is an exception, the expression will\nraise that exception and all the results will be lost.\n\nIf you need to get the result of each future as soon as possible,\nor if you need the result of some futures even if others produce\nerrors, you can use ``WaitIterator``::\n\n  wait_iterator = gen.WaitIterator(future1, future2)\n  while not wait_iterator.done():\n      try:\n          result = yield wait_iterator.next()\n      except Exception as e:\n          print(\"Error {} from {}\".format(e, wait_iterator.current_future))\n      else:\n          print(\"Result {} recieved from {} at {}\".format(\n              result, wait_iterator.current_future,\n              wait_iterator.current_index))\n\nBecause results are returned as soon as they are available the\noutput from the iterator *will not be in the same order as the\ninput arguments*. If you need to know which future produced the\ncurrent result, you can use the attributes\n``WaitIterator.current_future``, or ``WaitIterator.current_index``\nto get the index of the future from the input list. (if keyword\narguments were used in the construction of the `WaitIterator`,\n``current_index`` will use the corresponding keyword).\n\n.. versionadded:: 4.1",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *args, **kwargs):\n    if args and kwargs:\n        raise ValueError('You must provide args or kwargs, not both')\n    if kwargs:\n        self._unfinished = dict(((f, k) for k, f in kwargs.items()))\n        futures = list(kwargs.values())\n    else:\n        self._unfinished = dict(((f, i) for i, f in enumerate(args)))\n        futures = args\n    self._finished = collections.deque()\n    self.current_index = self.current_future = None\n    self._running_future = None\n    self_ref = weakref.ref(self)\n    for future in futures:\n        future.add_done_callback(functools.partial(self._done_callback, self_ref))",
                            "def done(self):\n    \"\"\"Returns True if this iterator has no more results.\"\"\"\n    if self._finished or self._unfinished:\n        return False\n    self.current_index = self.current_future = None\n    return True",
                            "def next(self):\n    \"\"\"Returns a `.Future` that will yield the next available result.\n\n    Note that this `.Future` will not be the same object as any of\n    the inputs.\n    \"\"\"\n    self._running_future = TracebackFuture()\n    if self._finished:\n        self._return_result(self._finished.popleft())\n    return self._running_future",
                            "@staticmethod\ndef _done_callback(self_ref, done):\n    self = self_ref()\n    if self is not None:\n        if self._running_future and (not self._running_future.done()):\n            self._return_result(done)\n        else:\n            self._finished.append(done)",
                            "def _return_result(self, done):\n    \"\"\"Called set the returned future's state that of the future\n    we yielded, and set the current future for the iterator.\n    \"\"\"\n    chain_future(done, self._running_future)\n    self.current_future = done\n    self.current_index = self._unfinished.pop(done)"
                        ],
                        "constructor_variables": [
                            "_running_future",
                            "_finished",
                            "current_future",
                            "current_index",
                            "futures",
                            "_unfinished",
                            "self_ref"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, *args, **kwargs)",
                            "done(self)",
                            "next(self)",
                            "_done_callback(self_ref, done)",
                            "_return_result(self, done)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "args": {
                                    "variable_value": "(<tornado.concurrent.Future object at 0x104d0ef10>,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._unfinished": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.gen.WaitIterator object at 0x104d29090>",
                                    "variable_type": "WaitIterator",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.items": {
                                    "variable_value": "<built-in method items of dict object at 0x104cf9c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "futures": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.values": {
                                    "variable_value": "<built-in method values of dict object at 0x104cf9c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._finished": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "collections.deque": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.current_index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.current_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._running_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self_ref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weakref.ref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weakref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools.partial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._done_callback": {
                                    "variable_value": "<function WaitIterator._done_callback at 0x104c78170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            },
                            {
                                "args": {
                                    "variable_value": "(<tornado.concurrent.Future object at 0x104d0ef10>,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._unfinished": {
                                    "variable_value": "{<tornado.concurrent.Future object at 0x104d0ef10>: 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "<tornado.gen.WaitIterator object at 0x104d29090>",
                                    "variable_type": "WaitIterator",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.items": {
                                    "variable_value": "<built-in method items of dict object at 0x104cf9c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "futures": {
                                    "variable_value": "(<tornado.concurrent.Future object at 0x104d0ef10>,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "kwargs.values": {
                                    "variable_value": "<built-in method values of dict object at 0x104cf9c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._finished": {
                                    "variable_value": "deque([])",
                                    "variable_type": "deque",
                                    "variable_shape": null
                                },
                                "collections.deque": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.current_index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.current_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._running_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self_ref": {
                                    "variable_value": "<weakref at 0x104d11830; to 'WaitIterator' at 0x104d29090>",
                                    "variable_type": "weakref",
                                    "variable_shape": null
                                },
                                "weakref.ref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weakref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": "<tornado.concurrent.Future object at 0x104d0ef10>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "future.add_done_callback": {
                                    "variable_value": "<bound method Future.add_done_callback of <tornado.concurrent.Future object at 0x104d0ef10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "functools.partial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._done_callback": {
                                    "variable_value": "<function WaitIterator._done_callback at 0x104c78170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "args": {
                                    "variable_value": "(<tornado.concurrent.Future object at 0x10f30c210>,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._unfinished": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.gen.WaitIterator object at 0x10f30c350>",
                                    "variable_type": "WaitIterator",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10f2e5960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "futures": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.values": {
                                    "variable_value": "<built-in method values of dict object at 0x10f2e5960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._finished": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "collections.deque": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.current_index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.current_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._running_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self_ref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weakref.ref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weakref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools.partial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._done_callback": {
                                    "variable_value": "<function WaitIterator._done_callback at 0x10f181200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            },
                            {
                                "args": {
                                    "variable_value": "(<tornado.concurrent.Future object at 0x10f30c210>,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._unfinished": {
                                    "variable_value": "{<tornado.concurrent.Future object at 0x10f30c210>: 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "<tornado.gen.WaitIterator object at 0x10f30c350>",
                                    "variable_type": "WaitIterator",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10f2e5960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "futures": {
                                    "variable_value": "(<tornado.concurrent.Future object at 0x10f30c210>,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "kwargs.values": {
                                    "variable_value": "<built-in method values of dict object at 0x10f2e5960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._finished": {
                                    "variable_value": "deque([])",
                                    "variable_type": "deque",
                                    "variable_shape": null
                                },
                                "collections.deque": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.current_index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.current_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._running_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self_ref": {
                                    "variable_value": "<weakref at 0x10f2f6890; to 'WaitIterator' at 0x10f30c350>",
                                    "variable_type": "weakref",
                                    "variable_shape": null
                                },
                                "weakref.ref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weakref": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": "<tornado.concurrent.Future object at 0x10f30c210>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "future.add_done_callback": {
                                    "variable_value": "<bound method Future.add_done_callback of <tornado.concurrent.Future object at 0x10f30c210>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "functools.partial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._done_callback": {
                                    "variable_value": "<function WaitIterator._done_callback at 0x10f181200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "next",
                    "function_code": "def next(self):\n    \"\"\"Returns a `.Future` that will yield the next available result.\n\n    Note that this `.Future` will not be the same object as any of\n    the inputs.\n    \"\"\"\n    self._running_future = TracebackFuture()\n\n    if self._finished:\n        self._return_result(self._finished.popleft())\n\n    return self._running_future\n",
                    "decorators": [],
                    "docstring": "Returns a `.Future` that will yield the next available result.\n\nNote that this `.Future` will not be the same object as any of\nthe inputs.",
                    "start_line": 352,
                    "end_line": 363,
                    "variables": {
                        "self._running_future": [
                            363,
                            358
                        ],
                        "self": [
                            360,
                            361,
                            363,
                            358
                        ],
                        "TracebackFuture": [
                            358
                        ],
                        "self._finished": [
                            360,
                            361
                        ],
                        "self._return_result": [
                            361
                        ],
                        "self._finished.popleft": [
                            361
                        ]
                    },
                    "filtered_variables": {
                        "self._running_future": [
                            363,
                            358
                        ],
                        "self": [
                            360,
                            361,
                            363,
                            358
                        ],
                        "TracebackFuture": [
                            358
                        ],
                        "self._finished": [
                            360,
                            361
                        ],
                        "self._return_result": [
                            361
                        ],
                        "self._finished.popleft": [
                            361
                        ]
                    },
                    "diff_line_number": 358,
                    "class_data": {
                        "signature": "class WaitIterator(object)",
                        "docstring": "Provides an iterator to yield the results of futures as they finish.\n\nYielding a set of futures like this:\n\n``results = yield [future1, future2]``\n\npauses the coroutine until both ``future1`` and ``future2``\nreturn, and then restarts the coroutine with the results of both\nfutures. If either future is an exception, the expression will\nraise that exception and all the results will be lost.\n\nIf you need to get the result of each future as soon as possible,\nor if you need the result of some futures even if others produce\nerrors, you can use ``WaitIterator``::\n\n  wait_iterator = gen.WaitIterator(future1, future2)\n  while not wait_iterator.done():\n      try:\n          result = yield wait_iterator.next()\n      except Exception as e:\n          print(\"Error {} from {}\".format(e, wait_iterator.current_future))\n      else:\n          print(\"Result {} recieved from {} at {}\".format(\n              result, wait_iterator.current_future,\n              wait_iterator.current_index))\n\nBecause results are returned as soon as they are available the\noutput from the iterator *will not be in the same order as the\ninput arguments*. If you need to know which future produced the\ncurrent result, you can use the attributes\n``WaitIterator.current_future``, or ``WaitIterator.current_index``\nto get the index of the future from the input list. (if keyword\narguments were used in the construction of the `WaitIterator`,\n``current_index`` will use the corresponding keyword).\n\n.. versionadded:: 4.1",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *args, **kwargs):\n    if args and kwargs:\n        raise ValueError('You must provide args or kwargs, not both')\n    if kwargs:\n        self._unfinished = dict(((f, k) for k, f in kwargs.items()))\n        futures = list(kwargs.values())\n    else:\n        self._unfinished = dict(((f, i) for i, f in enumerate(args)))\n        futures = args\n    self._finished = collections.deque()\n    self.current_index = self.current_future = None\n    self._running_future = None\n    self_ref = weakref.ref(self)\n    for future in futures:\n        future.add_done_callback(functools.partial(self._done_callback, self_ref))",
                            "def done(self):\n    \"\"\"Returns True if this iterator has no more results.\"\"\"\n    if self._finished or self._unfinished:\n        return False\n    self.current_index = self.current_future = None\n    return True",
                            "def next(self):\n    \"\"\"Returns a `.Future` that will yield the next available result.\n\n    Note that this `.Future` will not be the same object as any of\n    the inputs.\n    \"\"\"\n    self._running_future = TracebackFuture()\n    if self._finished:\n        self._return_result(self._finished.popleft())\n    return self._running_future",
                            "@staticmethod\ndef _done_callback(self_ref, done):\n    self = self_ref()\n    if self is not None:\n        if self._running_future and (not self._running_future.done()):\n            self._return_result(done)\n        else:\n            self._finished.append(done)",
                            "def _return_result(self, done):\n    \"\"\"Called set the returned future's state that of the future\n    we yielded, and set the current future for the iterator.\n    \"\"\"\n    chain_future(done, self._running_future)\n    self.current_future = done\n    self.current_index = self._unfinished.pop(done)"
                        ],
                        "constructor_variables": [
                            "_running_future",
                            "_finished",
                            "current_future",
                            "current_index",
                            "futures",
                            "_unfinished",
                            "self_ref"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, *args, **kwargs)",
                            "done(self)",
                            "next(self)",
                            "_done_callback(self_ref, done)",
                            "_return_result(self, done)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self._running_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.gen.WaitIterator object at 0x103870dd0>",
                                    "variable_type": "WaitIterator",
                                    "variable_shape": null
                                },
                                "TracebackFuture": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._finished": {
                                    "variable_value": "deque([])",
                                    "variable_type": "deque",
                                    "variable_shape": null
                                },
                                "self._return_result": {
                                    "variable_value": "<bound method WaitIterator._return_result of <tornado.gen.WaitIterator object at 0x103870dd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._finished.popleft": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._running_future": {
                                    "variable_value": "<tornado.concurrent.Future object at 0x10388a650>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.gen.WaitIterator object at 0x103870dd0>",
                                    "variable_type": "WaitIterator",
                                    "variable_shape": null
                                },
                                "TracebackFuture": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._finished": {
                                    "variable_value": "deque([])",
                                    "variable_type": "deque",
                                    "variable_shape": null
                                },
                                "self._return_result": {
                                    "variable_value": "<bound method WaitIterator._return_result of <tornado.gen.WaitIterator object at 0x103870dd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._finished.popleft": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._running_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.gen.WaitIterator object at 0x10d598cd0>",
                                    "variable_type": "WaitIterator",
                                    "variable_shape": null
                                },
                                "TracebackFuture": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._running_future.add_done_callback": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._finished": {
                                    "variable_value": "deque([])",
                                    "variable_type": "deque",
                                    "variable_shape": null
                                },
                                "self._return_result": {
                                    "variable_value": "<bound method WaitIterator._return_result of <tornado.gen.WaitIterator object at 0x10d598cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._finished.popleft": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._running_future": {
                                    "variable_value": "<tornado.concurrent.Future object at 0x10d5b25d0>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.gen.WaitIterator object at 0x10d598cd0>",
                                    "variable_type": "WaitIterator",
                                    "variable_shape": null
                                },
                                "TracebackFuture": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._running_future.add_done_callback": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._finished": {
                                    "variable_value": "deque([])",
                                    "variable_type": "deque",
                                    "variable_shape": null
                                },
                                "self._return_result": {
                                    "variable_value": "<bound method WaitIterator._return_result of <tornado.gen.WaitIterator object at 0x10d598cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._finished.popleft": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def engine(func):\n    \"\"\"Callback-oriented decorator for asynchronous generators.\n\n    This is an older interface; for new code that does not need to be\n    compatible with versions of Tornado older than 3.0 the\n    `coroutine` decorator is recommended instead.\n\n    This decorator is similar to `coroutine`, except it does not\n    return a `.Future` and the ``callback`` argument is not treated\n    specially.\n\n    In most cases, functions decorated with `engine` should take\n    a ``callback`` argument and invoke it with their result when\n    they are finished.  One notable exception is the\n    `~tornado.web.RequestHandler` :ref:`HTTP verb methods <verbs>`,\n    which use ``self.finish()`` in place of a callback argument.\n    \"\"\"\n    func = _make_coroutine_wrapper(func, replace_callback=False)\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        future = func(*args, **kwargs)\n\n        def final_callback(future):\n            if future.result() is not None:\n                raise ReturnValueIgnoredError(\n                    \"@gen.engine functions cannot return values: %r\" %\n                    (future.result(),))\n        # The engine interface doesn't give us any way to return\n        # errors but to raise them into the stack context.\n        # Save the stack context here to use when the Future has resolved.\n        future.add_done_callback(stack_context.wrap(final_callback))\n    return wrapper",
                "def coroutine(func, replace_callback=True):\n    \"\"\"Decorator for asynchronous generators.\n\n    Any generator that yields objects from this module must be wrapped\n    in either this decorator or `engine`.\n\n    Coroutines may \"return\" by raising the special exception\n    `Return(value) <Return>`.  In Python 3.3+, it is also possible for\n    the function to simply use the ``return value`` statement (prior to\n    Python 3.3 generators were not allowed to also return values).\n    In all versions of Python a coroutine that simply wishes to exit\n    early may use the ``return`` statement without a value.\n\n    Functions with this decorator return a `.Future`.  Additionally,\n    they may be called with a ``callback`` keyword argument, which\n    will be invoked with the future's result when it resolves.  If the\n    coroutine fails, the callback will not be run and an exception\n    will be raised into the surrounding `.StackContext`.  The\n    ``callback`` argument is not visible inside the decorated\n    function; it is handled by the decorator itself.\n\n    From the caller's perspective, ``@gen.coroutine`` is similar to\n    the combination of ``@return_future`` and ``@gen.engine``.\n\n    .. warning::\n\n       When exceptions occur inside a coroutine, the exception\n       information will be stored in the `.Future` object. You must\n       examine the result of the `.Future` object, or the exception\n       may go unnoticed by your code. This means yielding the function\n       if called from another coroutine, using something like\n       `.IOLoop.run_sync` for top-level calls, or passing the `.Future`\n       to `.IOLoop.add_future`.\n\n    \"\"\"\n    return _make_coroutine_wrapper(func, replace_callback=True)",
                "def _make_coroutine_wrapper(func, replace_callback):\n    \"\"\"The inner workings of ``@gen.coroutine`` and ``@gen.engine``.\n\n    The two decorators differ in their treatment of the ``callback``\n    argument, so we cannot simply implement ``@engine`` in terms of\n    ``@coroutine``.\n    \"\"\"\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        future = TracebackFuture()\n\n        if replace_callback and 'callback' in kwargs:\n            callback = kwargs.pop('callback')\n            IOLoop.current().add_future(\n                future, lambda future: callback(future.result()))\n\n        try:\n            result = func(*args, **kwargs)\n        except (Return, StopIteration) as e:\n            result = getattr(e, 'value', None)\n        except Exception:\n            future.set_exc_info(sys.exc_info())\n            return future\n        else:\n            if isinstance(result, types.GeneratorType):\n                # Inline the first iteration of Runner.run.  This lets us\n                # avoid the cost of creating a Runner when the coroutine\n                # never actually yields, which in turn allows us to\n                # use \"optional\" coroutines in critical path code without\n                # performance penalty for the synchronous case.\n                try:\n                    orig_stack_contexts = stack_context._state.contexts\n                    yielded = next(result)\n                    if stack_context._state.contexts is not orig_stack_contexts:\n                        yielded = TracebackFuture()\n                        yielded.set_exception(\n                            stack_context.StackContextInconsistentError(\n                                'stack_context inconsistency (probably caused '\n                                'by yield within a \"with StackContext\" block)'))\n                except (StopIteration, Return) as e:\n                    future.set_result(getattr(e, 'value', None))\n                except Exception:\n                    future.set_exc_info(sys.exc_info())\n                else:\n                    Runner(result, future, yielded)\n                try:\n                    return future\n                finally:\n                    # Subtle memory optimization: if next() raised an exception,\n                    # the future's exc_info contains a traceback which\n                    # includes this stack frame.  This creates a cycle,\n                    # which will be collected at the next full GC but has\n                    # been shown to greatly increase memory usage of\n                    # benchmarks (relative to the refcount-based scheme\n                    # used in the absence of cycles).  We can avoid the\n                    # cycle by clearing the local variable after we return it.\n                    future = None\n        future.set_result(result)\n        return future\n    return wrapper",
                "def Task(func, *args, **kwargs):\n    \"\"\"Adapts a callback-based asynchronous function for use in coroutines.\n\n    Takes a function (and optional additional arguments) and runs it with\n    those arguments plus a ``callback`` keyword argument.  The argument passed\n    to the callback is returned as the result of the yield expression.\n\n    .. versionchanged:: 4.0\n       ``gen.Task`` is now a function that returns a `.Future`, instead of\n       a subclass of `YieldPoint`.  It still behaves the same way when\n       yielded.\n    \"\"\"\n    future = Future()\n\n    def handle_exception(typ, value, tb):\n        if future.done():\n            return False\n        future.set_exc_info((typ, value, tb))\n        return True\n\n    def set_result(result):\n        if future.done():\n            return\n        future.set_result(result)\n    with stack_context.ExceptionStackContext(handle_exception):\n        func(*args, callback=_argument_adapter(set_result), **kwargs)\n    return future",
                "def multi_future(children, quiet_exceptions=()):\n    \"\"\"Wait for multiple asynchronous futures in parallel.\n\n    Takes a list of ``Futures`` (but *not* other ``YieldPoints``) and returns\n    a new Future that resolves when all the other Futures are done.\n    If all the ``Futures`` succeeded, the returned Future's result is a list\n    of their results.  If any failed, the returned Future raises the exception\n    of the first one to fail.\n\n    Instead of a list, the argument may also be a dictionary whose values are\n    Futures, in which case a parallel dictionary is returned mapping the same\n    keys to their results.\n\n    It is not normally necessary to call `multi_future` explcitly,\n    since the engine will do so automatically when the generator\n    yields a list of `Futures`. However, calling it directly\n    allows you to use the ``quiet_exceptions`` argument to control\n    the logging of multiple exceptions.\n\n    This function is faster than the `Multi` `YieldPoint` because it\n    does not require the creation of a stack context.\n\n    .. versionadded:: 4.0\n\n    .. versionchanged:: 4.2\n       If multiple ``Futures`` fail, any exceptions after the first (which is\n       raised) will be logged. Added the ``quiet_exceptions``\n       argument to suppress this logging for selected exception types.\n    \"\"\"\n    if isinstance(children, dict):\n        keys = list(children.keys())\n        children = children.values()\n    else:\n        keys = None\n    assert all(is_future(i) for i in children)\n    unfinished_children = set(children)\n\n    future = Future()\n    if not children:\n        future.set_result({} if keys is not None else [])\n\n    def callback(f):\n        unfinished_children.remove(f)\n        if not unfinished_children:\n            result_list = []\n            for f in children:\n                try:\n                    result_list.append(f.result())\n                except Exception as e:\n                    if future.done():\n                        if not isinstance(e, quiet_exceptions):\n                            app_log.error(\"Multiple exceptions in yield list\",\n                                          exc_info=True)\n                    else:\n                        future.set_exc_info(sys.exc_info())\n            if not future.done():\n                if keys is not None:\n                    future.set_result(dict(zip(keys, result_list)))\n                else:\n                    future.set_result(result_list)\n\n    listening = set()\n    for f in children:\n        if f not in listening:\n            listening.add(f)\n            f.add_done_callback(callback)\n    return future",
                "def maybe_future(x):\n    \"\"\"Converts ``x`` into a `.Future`.\n\n    If ``x`` is already a `.Future`, it is simply returned; otherwise\n    it is wrapped in a new `.Future`.  This is suitable for use as\n    ``result = yield gen.maybe_future(f())`` when you don't know whether\n    ``f()`` returns a `.Future` or not.\n    \"\"\"\n    if is_future(x):\n        return x\n    else:\n        fut = Future()\n        fut.set_result(x)\n        return fut",
                "def with_timeout(timeout, future, io_loop=None, quiet_exceptions=()):\n    \"\"\"Wraps a `.Future` in a timeout.\n\n    Raises `TimeoutError` if the input future does not complete before\n    ``timeout``, which may be specified in any form allowed by\n    `.IOLoop.add_timeout` (i.e. a `datetime.timedelta` or an absolute time\n    relative to `.IOLoop.time`)\n\n    If the wrapped `.Future` fails after it has timed out, the exception\n    will be logged unless it is of a type contained in ``quiet_exceptions``\n    (which may be an exception type or a sequence of types).\n\n    Currently only supports Futures, not other `YieldPoint` classes.\n\n    .. versionadded:: 4.0\n\n    .. versionchanged:: 4.1\n       Added the ``quiet_exceptions`` argument and the logging of unhandled\n       exceptions.\n    \"\"\"\n    # TODO: allow yield points in addition to futures?\n    # Tricky to do with stack_context semantics.\n    #\n    # It's tempting to optimize this by cancelling the input future on timeout\n    # instead of creating a new one, but A) we can't know if we are the only\n    # one waiting on the input future, so cancelling it might disrupt other\n    # callers and B) concurrent futures can only be cancelled while they are\n    # in the queue, so cancellation cannot reliably bound our waiting time.\n    result = Future()\n    chain_future(future, result)\n    if io_loop is None:\n        io_loop = IOLoop.current()\n\n    def error_callback(future):\n        try:\n            future.result()\n        except Exception as e:\n            if not isinstance(e, quiet_exceptions):\n                app_log.error(\"Exception in Future %r after timeout\",\n                              future, exc_info=True)\n\n    def timeout_callback():\n        result.set_exception(TimeoutError(\"Timeout\"))\n        # In case the wrapped future goes on to fail, log it.\n        future.add_done_callback(error_callback)\n    timeout_handle = io_loop.add_timeout(\n        timeout, timeout_callback)\n    if isinstance(future, Future):\n        # We know this future will resolve on the IOLoop, so we don't\n        # need the extra thread-safety of IOLoop.add_future (and we also\n        # don't care about StackContext here.\n        future.add_done_callback(\n            lambda future: io_loop.remove_timeout(timeout_handle))\n    else:\n        # concurrent.futures.Futures may resolve on any thread, so we\n        # need to route them back to the IOLoop.\n        io_loop.add_future(\n            future, lambda future: io_loop.remove_timeout(timeout_handle))\n    return result",
                "def sleep(duration):\n    \"\"\"Return a `.Future` that resolves after the given number of seconds.\n\n    When used with ``yield`` in a coroutine, this is a non-blocking\n    analogue to `time.sleep` (which should not be used in coroutines\n    because it is blocking)::\n\n        yield gen.sleep(0.5)\n\n    Note that calling this function on its own does nothing; you must\n    wait on the `.Future` it returns (usually by yielding it).\n\n    .. versionadded:: 4.1\n    \"\"\"\n    f = Future()\n    IOLoop.current().call_later(duration, lambda: f.set_result(None))\n    return f",
                "def _argument_adapter(callback):\n    \"\"\"Returns a function that when invoked runs ``callback`` with one arg.\n\n    If the function returned by this function is called with exactly\n    one argument, that argument is passed to ``callback``.  Otherwise\n    the args tuple and kwargs dict are wrapped in an `Arguments` object.\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        if kwargs or len(args) > 1:\n            callback(Arguments(args, kwargs))\n        elif args:\n            callback(args[0])\n        else:\n            callback(None)\n    return wrapper",
                "def convert_yielded(yielded):\n    \"\"\"Convert a yielded object into a `.Future`.\n\n    The default implementation accepts lists, dictionaries, and Futures.\n\n    If the `~functools.singledispatch` library is available, this function\n    may be extended to support additional types. For example::\n\n        @convert_yielded.register(asyncio.Future)\n        def _(asyncio_future):\n            return tornado.platform.asyncio.to_tornado_future(asyncio_future)\n\n    .. versionadded:: 4.1\n    \"\"\"\n    # Lists and dicts containing YieldPoints were handled separately\n    # via Multi().\n    if isinstance(yielded, (list, dict)):\n        return multi_future(yielded)\n    elif is_future(yielded):\n        return yielded\n    else:\n        raise BadYieldError(\"yielded unknown object %r\" % (yielded,))",
                "@functools.wraps(func)\ndef wrapper(*args, **kwargs):\n    future = func(*args, **kwargs)\n\n    def final_callback(future):\n        if future.result() is not None:\n            raise ReturnValueIgnoredError(\n                \"@gen.engine functions cannot return values: %r\" %\n                (future.result(),))\n    # The engine interface doesn't give us any way to return\n    # errors but to raise them into the stack context.\n    # Save the stack context here to use when the Future has resolved.\n    future.add_done_callback(stack_context.wrap(final_callback))",
                "@functools.wraps(func)\ndef wrapper(*args, **kwargs):\n    future = TracebackFuture()\n\n    if replace_callback and 'callback' in kwargs:\n        callback = kwargs.pop('callback')\n        IOLoop.current().add_future(\n            future, lambda future: callback(future.result()))\n\n    try:\n        result = func(*args, **kwargs)\n    except (Return, StopIteration) as e:\n        result = getattr(e, 'value', None)\n    except Exception:\n        future.set_exc_info(sys.exc_info())\n        return future\n    else:\n        if isinstance(result, types.GeneratorType):\n            # Inline the first iteration of Runner.run.  This lets us\n            # avoid the cost of creating a Runner when the coroutine\n            # never actually yields, which in turn allows us to\n            # use \"optional\" coroutines in critical path code without\n            # performance penalty for the synchronous case.\n            try:\n                orig_stack_contexts = stack_context._state.contexts\n                yielded = next(result)\n                if stack_context._state.contexts is not orig_stack_contexts:\n                    yielded = TracebackFuture()\n                    yielded.set_exception(\n                        stack_context.StackContextInconsistentError(\n                            'stack_context inconsistency (probably caused '\n                            'by yield within a \"with StackContext\" block)'))\n            except (StopIteration, Return) as e:\n                future.set_result(getattr(e, 'value', None))\n            except Exception:\n                future.set_exc_info(sys.exc_info())\n            else:\n                Runner(result, future, yielded)\n            try:\n                return future\n            finally:\n                # Subtle memory optimization: if next() raised an exception,\n                # the future's exc_info contains a traceback which\n                # includes this stack frame.  This creates a cycle,\n                # which will be collected at the next full GC but has\n                # been shown to greatly increase memory usage of\n                # benchmarks (relative to the refcount-based scheme\n                # used in the absence of cycles).  We can avoid the\n                # cycle by clearing the local variable after we return it.\n                future = None\n    future.set_result(result)\n    return future",
                "def __init__(self, value=None):\n    super(Return, self).__init__()\n    self.value = value",
                "def __init__(self, *args, **kwargs):\n    if args and kwargs:\n        raise ValueError(\n            \"You must provide args or kwargs, not both\")\n\n    if kwargs:\n        self._unfinished = dict((f, k) for (k, f) in kwargs.items())\n        futures = list(kwargs.values())\n    else:\n        self._unfinished = dict((f, i) for (i, f) in enumerate(args))\n        futures = args\n\n    self._finished = collections.deque()\n    self.current_index = self.current_future = None\n    self._running_future = None\n\n    self_ref = weakref.ref(self)\n    for future in futures:\n        future.add_done_callback(functools.partial(\n            self._done_callback, self_ref))",
                "def done(self):\n    \"\"\"Returns True if this iterator has no more results.\"\"\"\n    if self._finished or self._unfinished:\n        return False\n    # Clear the 'current' values when iteration is done.\n    self.current_index = self.current_future = None\n    return True",
                "def next(self):\n    \"\"\"Returns a `.Future` that will yield the next available result.\n\n    Note that this `.Future` will not be the same object as any of\n    the inputs.\n    \"\"\"\n    self._running_future = TracebackFuture()\n\n    if self._finished:\n        self._return_result(self._finished.popleft())\n\n    return self._running_future",
                "@staticmethod\ndef _done_callback(self_ref, done):\n    self = self_ref()\n    if self is not None:\n        if self._running_future and not self._running_future.done():\n            self._return_result(done)\n        else:\n            self._finished.append(done)",
                "def _return_result(self, done):\n    \"\"\"Called set the returned future's state that of the future\n    we yielded, and set the current future for the iterator.\n    \"\"\"\n    chain_future(done, self._running_future)\n\n    self.current_future = done\n    self.current_index = self._unfinished.pop(done)",
                "def start(self, runner):\n    \"\"\"Called by the runner after the generator has yielded.\n\n    No other methods will be called on this object before ``start``.\n    \"\"\"\n    raise NotImplementedError()",
                "def is_ready(self):\n    \"\"\"Called by the runner to determine whether to resume the generator.\n\n    Returns a boolean; may be called more than once.\n    \"\"\"\n    raise NotImplementedError()",
                "def get_result(self):\n    \"\"\"Returns the value to use as the result of the yield expression.\n\n    This method will only be called once, and only after `is_ready`\n    has returned true.\n    \"\"\"\n    raise NotImplementedError()",
                "def __init__(self, key):\n    self.key = key",
                "def start(self, runner):\n    self.runner = runner\n    runner.register_callback(self.key)",
                "def is_ready(self):\n    return True",
                "def get_result(self):\n    return self.runner.result_callback(self.key)",
                "def __init__(self, key):\n    self.key = key",
                "def start(self, runner):\n    self.runner = runner",
                "def is_ready(self):\n    return self.runner.is_ready(self.key)",
                "def get_result(self):\n    return self.runner.pop_result(self.key)",
                "def __init__(self, keys):\n    self.keys = keys",
                "def start(self, runner):\n    self.runner = runner",
                "def is_ready(self):\n    return all(self.runner.is_ready(key) for key in self.keys)",
                "def get_result(self):\n    return [self.runner.pop_result(key) for key in self.keys]",
                "def handle_exception(typ, value, tb):\n    if future.done():\n        return False\n    future.set_exc_info((typ, value, tb))\n    return True",
                "def set_result(result):\n    if future.done():\n        return\n    future.set_result(result)",
                "def __init__(self, future, io_loop=None):\n    \"\"\"Adapts a `.Future` to the `YieldPoint` interface.\n\n    .. versionchanged:: 4.1\n       The ``io_loop`` argument is deprecated.\n    \"\"\"\n    self.future = future\n    self.io_loop = io_loop or IOLoop.current()",
                "def start(self, runner):\n    if not self.future.done():\n        self.runner = runner\n        self.key = object()\n        runner.register_callback(self.key)\n        self.io_loop.add_future(self.future, runner.result_callback(self.key))\n    else:\n        self.runner = None\n        self.result_fn = self.future.result",
                "def is_ready(self):\n    if self.runner is not None:\n        return self.runner.is_ready(self.key)\n    else:\n        return True",
                "def get_result(self):\n    if self.runner is not None:\n        return self.runner.pop_result(self.key).result()\n    else:\n        return self.result_fn()",
                "def __init__(self, children, quiet_exceptions=()):\n    self.keys = None\n    if isinstance(children, dict):\n        self.keys = list(children.keys())\n        children = children.values()\n    self.children = []\n    for i in children:\n        if is_future(i):\n            i = YieldFuture(i)\n        self.children.append(i)\n    assert all(isinstance(i, YieldPoint) for i in self.children)\n    self.unfinished_children = set(self.children)\n    self.quiet_exceptions = quiet_exceptions",
                "def start(self, runner):\n    for i in self.children:\n        i.start(runner)",
                "def is_ready(self):\n    finished = list(itertools.takewhile(\n        lambda i: i.is_ready(), self.unfinished_children))\n    self.unfinished_children.difference_update(finished)\n    return not self.unfinished_children",
                "def get_result(self):\n    result_list = []\n    exc_info = None\n    for f in self.children:\n        try:\n            result_list.append(f.get_result())\n        except Exception as e:\n            if exc_info is None:\n                exc_info = sys.exc_info()\n            else:\n                if not isinstance(e, self.quiet_exceptions):\n                    app_log.error(\"Multiple exceptions in yield list\",\n                                  exc_info=True)\n    if exc_info is not None:\n        raise_exc_info(exc_info)\n    if self.keys is not None:\n        return dict(zip(self.keys, result_list))\n    else:\n        return list(result_list)",
                "def callback(f):\n    unfinished_children.remove(f)\n    if not unfinished_children:\n        result_list = []\n        for f in children:\n            try:\n                result_list.append(f.result())\n            except Exception as e:\n                if future.done():\n                    if not isinstance(e, quiet_exceptions):\n                        app_log.error(\"Multiple exceptions in yield list\",\n                                      exc_info=True)\n                else:\n                    future.set_exc_info(sys.exc_info())\n        if not future.done():\n            if keys is not None:\n                future.set_result(dict(zip(keys, result_list)))\n            else:\n                future.set_result(result_list)",
                "def error_callback(future):\n    try:\n        future.result()\n    except Exception as e:\n        if not isinstance(e, quiet_exceptions):\n            app_log.error(\"Exception in Future %r after timeout\",\n                          future, exc_info=True)",
                "def timeout_callback():\n    result.set_exception(TimeoutError(\"Timeout\"))\n    # In case the wrapped future goes on to fail, log it.\n    future.add_done_callback(error_callback)",
                "def __init__(self, gen, result_future, first_yielded):\n    self.gen = gen\n    self.result_future = result_future\n    self.future = _null_future\n    self.yield_point = None\n    self.pending_callbacks = None\n    self.results = None\n    self.running = False\n    self.finished = False\n    self.had_exception = False\n    self.io_loop = IOLoop.current()\n    # For efficiency, we do not create a stack context until we\n    # reach a YieldPoint (stack contexts are required for the historical\n    # semantics of YieldPoints, but not for Futures).  When we have\n    # done so, this field will be set and must be called at the end\n    # of the coroutine.\n    self.stack_context_deactivate = None\n    if self.handle_yield(first_yielded):\n        self.run()",
                "def register_callback(self, key):\n    \"\"\"Adds ``key`` to the list of callbacks.\"\"\"\n    if self.pending_callbacks is None:\n        # Lazily initialize the old-style YieldPoint data structures.\n        self.pending_callbacks = set()\n        self.results = {}\n    if key in self.pending_callbacks:\n        raise KeyReuseError(\"key %r is already pending\" % (key,))\n    self.pending_callbacks.add(key)",
                "def is_ready(self, key):\n    \"\"\"Returns true if a result is available for ``key``.\"\"\"\n    if self.pending_callbacks is None or key not in self.pending_callbacks:\n        raise UnknownKeyError(\"key %r is not pending\" % (key,))\n    return key in self.results",
                "def set_result(self, key, result):\n    \"\"\"Sets the result for ``key`` and attempts to resume the generator.\"\"\"\n    self.results[key] = result\n    if self.yield_point is not None and self.yield_point.is_ready():\n        try:\n            self.future.set_result(self.yield_point.get_result())\n        except:\n            self.future.set_exc_info(sys.exc_info())\n        self.yield_point = None\n        self.run()",
                "def pop_result(self, key):\n    \"\"\"Returns the result for ``key`` and unregisters it.\"\"\"\n    self.pending_callbacks.remove(key)\n    return self.results.pop(key)",
                "def run(self):\n    \"\"\"Starts or resumes the generator, running until it reaches a\n    yield point that is not ready.\n    \"\"\"\n    if self.running or self.finished:\n        return\n    try:\n        self.running = True\n        while True:\n            future = self.future\n            if not future.done():\n                return\n            self.future = None\n            try:\n                orig_stack_contexts = stack_context._state.contexts\n                exc_info = None\n\n                try:\n                    value = future.result()\n                except Exception:\n                    self.had_exception = True\n                    exc_info = sys.exc_info()\n\n                if exc_info is not None:\n                    yielded = self.gen.throw(*exc_info)\n                    exc_info = None\n                else:\n                    yielded = self.gen.send(value)\n\n                if stack_context._state.contexts is not orig_stack_contexts:\n                    self.gen.throw(\n                        stack_context.StackContextInconsistentError(\n                            'stack_context inconsistency (probably caused '\n                            'by yield within a \"with StackContext\" block)'))\n            except (StopIteration, Return) as e:\n                self.finished = True\n                self.future = _null_future\n                if self.pending_callbacks and not self.had_exception:\n                    # If we ran cleanly without waiting on all callbacks\n                    # raise an error (really more of a warning).  If we\n                    # had an exception then some callbacks may have been\n                    # orphaned, so skip the check in that case.\n                    raise LeakedCallbackError(\n                        \"finished without waiting for callbacks %r\" %\n                        self.pending_callbacks)\n                self.result_future.set_result(getattr(e, 'value', None))\n                self.result_future = None\n                self._deactivate_stack_context()\n                return\n            except Exception:\n                self.finished = True\n                self.future = _null_future\n                self.result_future.set_exc_info(sys.exc_info())\n                self.result_future = None\n                self._deactivate_stack_context()\n                return\n            if not self.handle_yield(yielded):\n                return\n    finally:\n        self.running = False",
                "def handle_yield(self, yielded):\n    # Lists containing YieldPoints require stack contexts;\n    # other lists are handled via multi_future in convert_yielded.\n    if (isinstance(yielded, list) and\n            any(isinstance(f, YieldPoint) for f in yielded)):\n        yielded = Multi(yielded)\n    elif (isinstance(yielded, dict) and\n          any(isinstance(f, YieldPoint) for f in yielded.values())):\n        yielded = Multi(yielded)\n\n    if isinstance(yielded, YieldPoint):\n        # YieldPoints are too closely coupled to the Runner to go\n        # through the generic convert_yielded mechanism.\n        self.future = TracebackFuture()\n\n        def start_yield_point():\n            try:\n                yielded.start(self)\n                if yielded.is_ready():\n                    self.future.set_result(\n                        yielded.get_result())\n                else:\n                    self.yield_point = yielded\n            except Exception:\n                self.future = TracebackFuture()\n                self.future.set_exc_info(sys.exc_info())\n\n        if self.stack_context_deactivate is None:\n            # Start a stack context if this is the first\n            # YieldPoint we've seen.\n            with stack_context.ExceptionStackContext(\n                    self.handle_exception) as deactivate:\n                self.stack_context_deactivate = deactivate\n\n                def cb():\n                    start_yield_point()\n                    self.run()\n                self.io_loop.add_callback(cb)\n                return False\n        else:\n            start_yield_point()\n    else:\n        try:\n            self.future = convert_yielded(yielded)\n        except BadYieldError:\n            self.future = TracebackFuture()\n            self.future.set_exc_info(sys.exc_info())\n\n    if not self.future.done() or self.future is moment:\n        self.io_loop.add_future(\n            self.future, lambda f: self.run())\n        return False\n    return True",
                "def result_callback(self, key):\n    return stack_context.wrap(_argument_adapter(\n        functools.partial(self.set_result, key)))",
                "def handle_exception(self, typ, value, tb):\n    if not self.running and not self.finished:\n        self.future = TracebackFuture()\n        self.future.set_exc_info((typ, value, tb))\n        self.run()\n        return True\n    else:\n        return False",
                "def _deactivate_stack_context(self):\n    if self.stack_context_deactivate is not None:\n        self.stack_context_deactivate()\n        self.stack_context_deactivate = None",
                "def wrapper(*args, **kwargs):\n    if kwargs or len(args) > 1:\n        callback(Arguments(args, kwargs))\n    elif args:\n        callback(args[0])\n    else:\n        callback(None)",
                "def final_callback(future):\n    if future.result() is not None:\n        raise ReturnValueIgnoredError(\n            \"@gen.engine functions cannot return values: %r\" %\n            (future.result(),))",
                "def start_yield_point():\n    try:\n        yielded.start(self)\n        if yielded.is_ready():\n            self.future.set_result(\n                yielded.get_result())\n        else:\n            self.yield_point = yielded\n    except Exception:\n        self.future = TracebackFuture()\n        self.future.set_exc_info(sys.exc_info())",
                "def cb():\n    start_yield_point()\n    self.run()"
            ],
            "inscope_function_signatures": [
                "engine(func)",
                "coroutine(func, replace_callback=True)",
                "_make_coroutine_wrapper(func, replace_callback)",
                "Task(func, *args, **kwargs)",
                "multi_future(children, quiet_exceptions=())",
                "maybe_future(x)",
                "with_timeout(timeout, future, io_loop=None, quiet_exceptions=())",
                "sleep(duration)",
                "_argument_adapter(callback)",
                "convert_yielded(yielded)",
                "wrapper(*args, **kwargs)",
                "wrapper(*args, **kwargs)",
                "__init__(self, value=None)",
                "__init__(self, *args, **kwargs)",
                "done(self)",
                "next(self)",
                "_done_callback(self_ref, done)",
                "_return_result(self, done)",
                "start(self, runner)",
                "is_ready(self)",
                "get_result(self)",
                "__init__(self, key)",
                "start(self, runner)",
                "is_ready(self)",
                "get_result(self)",
                "__init__(self, key)",
                "start(self, runner)",
                "is_ready(self)",
                "get_result(self)",
                "__init__(self, keys)",
                "start(self, runner)",
                "is_ready(self)",
                "get_result(self)",
                "handle_exception(typ, value, tb)",
                "set_result(result)",
                "__init__(self, future, io_loop=None)",
                "start(self, runner)",
                "is_ready(self)",
                "get_result(self)",
                "__init__(self, children, quiet_exceptions=())",
                "start(self, runner)",
                "is_ready(self)",
                "get_result(self)",
                "callback(f)",
                "error_callback(future)",
                "timeout_callback()",
                "__init__(self, gen, result_future, first_yielded)",
                "register_callback(self, key)",
                "is_ready(self, key)",
                "set_result(self, key, result)",
                "pop_result(self, key)",
                "run(self)",
                "handle_yield(self, yielded)",
                "result_callback(self, key)",
                "handle_exception(self, typ, value, tb)",
                "_deactivate_stack_context(self)",
                "wrapper(*args, **kwargs)",
                "final_callback(future)",
                "start_yield_point()",
                "cb()"
            ],
            "variables_in_file": {
                "ImportError": [
                    97,
                    94
                ],
                "singledispatch": [
                    1033,
                    98,
                    1034
                ],
                "Exception": [
                    260,
                    101,
                    105,
                    906,
                    876,
                    109,
                    941,
                    239,
                    113,
                    117,
                    662,
                    599,
                    121,
                    218,
                    735
                ],
                "func": [
                    195,
                    205,
                    142,
                    144,
                    146,
                    215,
                    510
                ],
                "_make_coroutine_wrapper": [
                    195,
                    142
                ],
                "future": [
                    256,
                    521,
                    511,
                    651,
                    653,
                    146,
                    149,
                    663,
                    152,
                    156,
                    668,
                    669,
                    671,
                    673,
                    680,
                    207,
                    212,
                    340,
                    341,
                    728,
                    219,
                    220,
                    734,
                    738,
                    866,
                    867,
                    743,
                    746,
                    875,
                    238,
                    750,
                    240,
                    497,
                    242,
                    244,
                    500,
                    502,
                    756,
                    506,
                    508,
                    254,
                    255
                ],
                "args": [
                    324,
                    1001,
                    1002,
                    1003,
                    332,
                    333,
                    1004,
                    146,
                    215,
                    510
                ],
                "kwargs": [
                    324,
                    328,
                    329,
                    330,
                    1001,
                    1002,
                    209,
                    146,
                    210,
                    215,
                    510
                ],
                "future.result": [
                    875,
                    212,
                    149,
                    152,
                    734
                ],
                "ReturnValueIgnoredError": [
                    150
                ],
                "future.add_done_callback": [
                    156,
                    341,
                    750,
                    743
                ],
                "stack_context.wrap": [
                    156,
                    973
                ],
                "stack_context": [
                    229,
                    231,
                    871,
                    234,
                    973,
                    948,
                    886,
                    888,
                    156,
                    509
                ],
                "final_callback": [
                    156
                ],
                "functools.wraps": [
                    144,
                    205
                ],
                "functools": [
                    144,
                    341,
                    205,
                    974
                ],
                "wrapper": [
                    257,
                    157,
                    1007
                ],
                "TracebackFuture": [
                    931,
                    963,
                    358,
                    232,
                    942,
                    207,
                    978
                ],
                "replace_callback": [
                    209
                ],
                "callback": [
                    679,
                    1002,
                    1004,
                    1006,
                    210,
                    212
                ],
                "kwargs.pop": [
                    210
                ],
                "add_future": [
                    211
                ],
                "IOLoop.current": [
                    775,
                    522,
                    815,
                    211,
                    730
                ],
                "IOLoop": [
                    775,
                    522,
                    815,
                    211,
                    730
                ],
                "result": [
                    741,
                    230,
                    542,
                    727,
                    843,
                    242,
                    757,
                    215,
                    728,
                    217,
                    508,
                    222,
                    255
                ],
                "Return": [
                    216,
                    281,
                    891,
                    237
                ],
                "StopIteration": [
                    216,
                    891,
                    237
                ],
                "getattr": [
                    217,
                    902,
                    238
                ],
                "e": [
                    736,
                    902,
                    238,
                    664,
                    217,
                    603
                ],
                "future.set_exc_info": [
                    240,
                    219,
                    668,
                    502
                ],
                "sys.exc_info": [
                    964,
                    909,
                    878,
                    943,
                    240,
                    848,
                    601,
                    219,
                    668
                ],
                "sys": [
                    964,
                    909,
                    878,
                    943,
                    240,
                    848,
                    601,
                    219,
                    668
                ],
                "isinstance": [
                    736,
                    928,
                    1026,
                    579,
                    643,
                    746,
                    664,
                    571,
                    921,
                    603,
                    924,
                    925,
                    222,
                    922
                ],
                "types.GeneratorType": [
                    222
                ],
                "types": [
                    222
                ],
                "orig_stack_contexts": [
                    871,
                    229,
                    886,
                    231
                ],
                "stack_context._state.contexts": [
                    871,
                    229,
                    886,
                    231
                ],
                "stack_context._state": [
                    871,
                    229,
                    886,
                    231
                ],
                "yielded": [
                    1026,
                    1027,
                    1028,
                    1029,
                    1031,
                    913,
                    921,
                    922,
                    923,
                    924,
                    925,
                    926,
                    928,
                    935,
                    936,
                    938,
                    940,
                    961,
                    230,
                    232,
                    233,
                    881,
                    242,
                    884
                ],
                "next": [
                    230
                ],
                "yielded.set_exception": [
                    233
                ],
                "stack_context.StackContextInconsistentError": [
                    888,
                    234
                ],
                "future.set_result": [
                    673,
                    255,
                    653,
                    238,
                    508,
                    671
                ],
                "Runner": [
                    242
                ],
                "__init__": [
                    281
                ],
                "super": [
                    281
                ],
                "self": [
                    521,
                    522,
                    525,
                    526,
                    527,
                    528,
                    529,
                    531,
                    532,
                    535,
                    536,
                    541,
                    542,
                    544,
                    570,
                    572,
                    574,
                    578,
                    579,
                    580,
                    581,
                    584,
                    589,
                    590,
                    591,
                    596,
                    603,
                    608,
                    609,
                    281,
                    282,
                    806,
                    807,
                    808,
                    809,
                    810,
                    811,
                    812,
                    813,
                    814,
                    815,
                    821,
                    822,
                    823,
                    827,
                    829,
                    830,
                    831,
                    833,
                    837,
                    839,
                    329,
                    843,
                    332,
                    844,
                    846,
                    335,
                    336,
                    337,
                    848,
                    339,
                    849,
                    850,
                    342,
                    854,
                    855,
                    346,
                    349,
                    861,
                    864,
                    866,
                    869,
                    358,
                    360,
                    361,
                    363,
                    877,
                    367,
                    368,
                    369,
                    370,
                    881,
                    372,
                    884,
                    887,
                    378,
                    380,
                    381,
                    892,
                    893,
                    894,
                    901,
                    902,
                    903,
                    904,
                    907,
                    908,
                    909,
                    910,
                    911,
                    913,
                    916,
                    931,
                    935,
                    937,
                    940,
                    429,
                    942,
                    943,
                    432,
                    433,
                    945,
                    949,
                    950,
                    439,
                    954,
                    955,
                    449,
                    961,
                    963,
                    452,
                    964,
                    966,
                    455,
                    967,
                    968,
                    458,
                    974,
                    977,
                    978,
                    979,
                    980,
                    473,
                    986,
                    987,
                    476,
                    988,
                    479,
                    482
                ],
                "self.value": [
                    282
                ],
                "value": [
                    875,
                    979,
                    884,
                    502,
                    282
                ],
                "object": [
                    384,
                    797,
                    285,
                    527
                ],
                "ValueError": [
                    325
                ],
                "self._unfinished": [
                    329,
                    346,
                    332,
                    381
                ],
                "dict": [
                    609,
                    1026,
                    643,
                    329,
                    332,
                    571,
                    924,
                    671
                ],
                "f": [
                    676,
                    677,
                    678,
                    679,
                    774,
                    329,
                    775,
                    776,
                    332,
                    656,
                    659,
                    596,
                    661,
                    598,
                    922,
                    925
                ],
                "k": [
                    329
                ],
                "kwargs.items": [
                    329
                ],
                "futures": [
                    330,
                    340,
                    333
                ],
                "list": [
                    1026,
                    611,
                    644,
                    330,
                    588,
                    921,
                    572
                ],
                "kwargs.values": [
                    330
                ],
                "i": [
                    576,
                    577,
                    578,
                    579,
                    584,
                    585,
                    648,
                    332,
                    589,
                    575
                ],
                "enumerate": [
                    332
                ],
                "self._finished": [
                    360,
                    361,
                    335,
                    372,
                    346
                ],
                "collections.deque": [
                    335
                ],
                "collections": [
                    990,
                    335
                ],
                "self.current_index": [
                    336,
                    381,
                    349
                ],
                "self.current_future": [
                    336,
                    380,
                    349
                ],
                "self._running_future": [
                    358,
                    363,
                    337,
                    369,
                    378
                ],
                "self_ref": [
                    339,
                    342,
                    367
                ],
                "weakref.ref": [
                    339
                ],
                "weakref": [
                    339
                ],
                "functools.partial": [
                    341,
                    974
                ],
                "self._done_callback": [
                    342
                ],
                "self._return_result": [
                    361,
                    370
                ],
                "self._finished.popleft": [
                    361
                ],
                "self._running_future.done": [
                    369
                ],
                "done": [
                    370,
                    372,
                    378,
                    380,
                    381
                ],
                "self._finished.append": [
                    372
                ],
                "staticmethod": [
                    365
                ],
                "chain_future": [
                    728,
                    378
                ],
                "self._unfinished.pop": [
                    381
                ],
                "NotImplementedError": [
                    402,
                    395,
                    410
                ],
                "YieldPoint": [
                    928,
                    514,
                    547,
                    579,
                    461,
                    925,
                    442,
                    413,
                    922
                ],
                "self.key": [
                    449,
                    455,
                    458,
                    429,
                    527,
                    528,
                    433,
                    529,
                    439,
                    536,
                    542
                ],
                "key": [
                    832,
                    449,
                    482,
                    833,
                    837,
                    838,
                    839,
                    479,
                    843,
                    429,
                    974,
                    854,
                    855,
                    831
                ],
                "self.runner": [
                    482,
                    452,
                    535,
                    455,
                    458,
                    526,
                    432,
                    531,
                    439,
                    536,
                    476,
                    541,
                    542,
                    479
                ],
                "runner": [
                    452,
                    585,
                    526,
                    432,
                    433,
                    528,
                    529,
                    476
                ],
                "runner.register_callback": [
                    528,
                    433
                ],
                "self.runner.result_callback": [
                    439
                ],
                "self.runner.is_ready": [
                    536,
                    479,
                    455
                ],
                "self.runner.pop_result": [
                    458,
                    482,
                    542
                ],
                "self.keys": [
                    608,
                    609,
                    482,
                    473,
                    570,
                    572,
                    479
                ],
                "keys": [
                    644,
                    647,
                    653,
                    473,
                    670,
                    671
                ],
                "all": [
                    648,
                    579,
                    479
                ],
                "Future": [
                    774,
                    746,
                    651,
                    779,
                    782,
                    497,
                    694,
                    727
                ],
                "future.done": [
                    867,
                    500,
                    663,
                    506,
                    669
                ],
                "typ": [
                    979,
                    502
                ],
                "tb": [
                    979,
                    502
                ],
                "stack_context.ExceptionStackContext": [
                    948,
                    509
                ],
                "handle_exception": [
                    509
                ],
                "_argument_adapter": [
                    973,
                    510
                ],
                "set_result": [
                    510
                ],
                "self.future": [
                    521,
                    908,
                    525,
                    529,
                    532,
                    931,
                    808,
                    937,
                    942,
                    943,
                    961,
                    963,
                    964,
                    966,
                    968,
                    846,
                    848,
                    978,
                    979,
                    866,
                    869,
                    893
                ],
                "self.io_loop": [
                    967,
                    522,
                    815,
                    529,
                    955
                ],
                "io_loop": [
                    744,
                    522,
                    751,
                    755,
                    756,
                    729,
                    730
                ],
                "self.future.done": [
                    525,
                    966
                ],
                "self.io_loop.add_future": [
                    529,
                    967
                ],
                "runner.result_callback": [
                    529
                ],
                "self.result_fn": [
                    544,
                    532
                ],
                "self.future.result": [
                    532
                ],
                "children": [
                    643,
                    644,
                    645,
                    676,
                    648,
                    649,
                    652,
                    659,
                    571,
                    572,
                    573,
                    575
                ],
                "children.keys": [
                    644,
                    572
                ],
                "children.values": [
                    573,
                    645
                ],
                "self.children": [
                    578,
                    579,
                    580,
                    584,
                    596,
                    574
                ],
                "is_future": [
                    576,
                    691,
                    1028,
                    648
                ],
                "YieldFuture": [
                    577
                ],
                "self.children.append": [
                    578
                ],
                "self.unfinished_children": [
                    580,
                    589,
                    590,
                    591
                ],
                "set": [
                    649,
                    675,
                    580,
                    829
                ],
                "self.quiet_exceptions": [
                    603,
                    581
                ],
                "quiet_exceptions": [
                    664,
                    736,
                    581
                ],
                "i.start": [
                    585
                ],
                "finished": [
                    588,
                    590
                ],
                "itertools.takewhile": [
                    588
                ],
                "itertools": [
                    588
                ],
                "i.is_ready": [
                    589
                ],
                "self.unfinished_children.difference_update": [
                    590
                ],
                "result_list": [
                    609,
                    673,
                    611,
                    594,
                    658,
                    661,
                    598,
                    671
                ],
                "exc_info": [
                    872,
                    878,
                    880,
                    881,
                    882,
                    595,
                    600,
                    601,
                    606,
                    607
                ],
                "result_list.append": [
                    661,
                    598
                ],
                "f.get_result": [
                    598
                ],
                "app_log.error": [
                    665,
                    604,
                    737
                ],
                "app_log": [
                    665,
                    604,
                    737
                ],
                "raise_exc_info": [
                    607
                ],
                "zip": [
                    609,
                    671
                ],
                "unfinished_children": [
                    656,
                    649,
                    657
                ],
                "unfinished_children.remove": [
                    656
                ],
                "f.result": [
                    661
                ],
                "listening": [
                    675,
                    677,
                    678
                ],
                "listening.add": [
                    678
                ],
                "f.add_done_callback": [
                    679
                ],
                "x": [
                    691,
                    692,
                    695
                ],
                "fut": [
                    696,
                    694,
                    695
                ],
                "fut.set_result": [
                    695
                ],
                "result.set_exception": [
                    741
                ],
                "TimeoutError": [
                    741
                ],
                "error_callback": [
                    743
                ],
                "timeout_handle": [
                    744,
                    756,
                    751
                ],
                "io_loop.add_timeout": [
                    744
                ],
                "timeout": [
                    745
                ],
                "timeout_callback": [
                    745
                ],
                "io_loop.remove_timeout": [
                    756,
                    751
                ],
                "io_loop.add_future": [
                    755
                ],
                "call_later": [
                    775
                ],
                "duration": [
                    775
                ],
                "f.set_result": [
                    775
                ],
                "_null_future": [
                    808,
                    779,
                    908,
                    780,
                    893
                ],
                "_null_future.set_result": [
                    780
                ],
                "moment": [
                    794,
                    966,
                    782,
                    783
                ],
                "moment.__doc__": [
                    783
                ],
                "moment.set_result": [
                    794
                ],
                "self.gen": [
                    881,
                    884,
                    806,
                    887
                ],
                "gen": [
                    806
                ],
                "self.result_future": [
                    902,
                    903,
                    807,
                    909,
                    910
                ],
                "result_future": [
                    807
                ],
                "self.yield_point": [
                    809,
                    940,
                    844,
                    846,
                    849
                ],
                "self.pending_callbacks": [
                    833,
                    837,
                    901,
                    810,
                    854,
                    827,
                    829,
                    894,
                    831
                ],
                "self.results": [
                    839,
                    843,
                    811,
                    855,
                    830
                ],
                "self.running": [
                    864,
                    812,
                    977,
                    916,
                    861
                ],
                "self.finished": [
                    907,
                    813,
                    977,
                    892,
                    861
                ],
                "self.had_exception": [
                    894,
                    877,
                    814
                ],
                "self.stack_context_deactivate": [
                    945,
                    821,
                    950,
                    986,
                    987,
                    988
                ],
                "self.handle_yield": [
                    913,
                    822
                ],
                "first_yielded": [
                    822
                ],
                "self.run": [
                    968,
                    850,
                    980,
                    823,
                    954
                ],
                "KeyReuseError": [
                    832
                ],
                "self.pending_callbacks.add": [
                    833
                ],
                "UnknownKeyError": [
                    838
                ],
                "self.yield_point.is_ready": [
                    844
                ],
                "self.future.set_result": [
                    937,
                    846
                ],
                "self.yield_point.get_result": [
                    846
                ],
                "self.future.set_exc_info": [
                    848,
                    979,
                    964,
                    943
                ],
                "self.pending_callbacks.remove": [
                    854
                ],
                "self.results.pop": [
                    855
                ],
                "self.gen.throw": [
                    881,
                    887
                ],
                "self.gen.send": [
                    884
                ],
                "LeakedCallbackError": [
                    899
                ],
                "self.result_future.set_result": [
                    902
                ],
                "self._deactivate_stack_context": [
                    904,
                    911
                ],
                "self.result_future.set_exc_info": [
                    909
                ],
                "any": [
                    922,
                    925
                ],
                "Multi": [
                    923,
                    926
                ],
                "yielded.values": [
                    925
                ],
                "yielded.start": [
                    935
                ],
                "yielded.is_ready": [
                    936
                ],
                "yielded.get_result": [
                    938
                ],
                "self.handle_exception": [
                    949
                ],
                "deactivate": [
                    949,
                    950
                ],
                "start_yield_point": [
                    953,
                    958
                ],
                "self.io_loop.add_callback": [
                    955
                ],
                "cb": [
                    955
                ],
                "convert_yielded": [
                    961,
                    1034
                ],
                "BadYieldError": [
                    962,
                    1031
                ],
                "self.set_result": [
                    974
                ],
                "Arguments": [
                    1002,
                    990
                ],
                "collections.namedtuple": [
                    990
                ],
                "len": [
                    1001
                ],
                "multi_future": [
                    1027
                ]
            },
            "filtered_variables_in_file": {
                "singledispatch": [
                    1033,
                    98,
                    1034
                ],
                "func": [
                    195,
                    205,
                    142,
                    144,
                    146,
                    215,
                    510
                ],
                "_make_coroutine_wrapper": [
                    195,
                    142
                ],
                "future": [
                    256,
                    521,
                    511,
                    651,
                    653,
                    146,
                    149,
                    663,
                    152,
                    156,
                    668,
                    669,
                    671,
                    673,
                    680,
                    207,
                    212,
                    340,
                    341,
                    728,
                    219,
                    220,
                    734,
                    738,
                    866,
                    867,
                    743,
                    746,
                    875,
                    238,
                    750,
                    240,
                    497,
                    242,
                    244,
                    500,
                    502,
                    756,
                    506,
                    508,
                    254,
                    255
                ],
                "args": [
                    324,
                    1001,
                    1002,
                    1003,
                    332,
                    333,
                    1004,
                    146,
                    215,
                    510
                ],
                "kwargs": [
                    324,
                    328,
                    329,
                    330,
                    1001,
                    1002,
                    209,
                    146,
                    210,
                    215,
                    510
                ],
                "future.result": [
                    875,
                    212,
                    149,
                    152,
                    734
                ],
                "ReturnValueIgnoredError": [
                    150
                ],
                "future.add_done_callback": [
                    156,
                    341,
                    750,
                    743
                ],
                "stack_context.wrap": [
                    156,
                    973
                ],
                "stack_context": [
                    229,
                    231,
                    871,
                    234,
                    973,
                    948,
                    886,
                    888,
                    156,
                    509
                ],
                "final_callback": [
                    156
                ],
                "functools.wraps": [
                    144,
                    205
                ],
                "functools": [
                    144,
                    341,
                    205,
                    974
                ],
                "wrapper": [
                    257,
                    157,
                    1007
                ],
                "TracebackFuture": [
                    931,
                    963,
                    358,
                    232,
                    942,
                    207,
                    978
                ],
                "replace_callback": [
                    209
                ],
                "callback": [
                    679,
                    1002,
                    1004,
                    1006,
                    210,
                    212
                ],
                "kwargs.pop": [
                    210
                ],
                "add_future": [
                    211
                ],
                "IOLoop.current": [
                    775,
                    522,
                    815,
                    211,
                    730
                ],
                "IOLoop": [
                    775,
                    522,
                    815,
                    211,
                    730
                ],
                "result": [
                    741,
                    230,
                    542,
                    727,
                    843,
                    242,
                    757,
                    215,
                    728,
                    217,
                    508,
                    222,
                    255
                ],
                "Return": [
                    216,
                    281,
                    891,
                    237
                ],
                "e": [
                    736,
                    902,
                    238,
                    664,
                    217,
                    603
                ],
                "future.set_exc_info": [
                    240,
                    219,
                    668,
                    502
                ],
                "sys.exc_info": [
                    964,
                    909,
                    878,
                    943,
                    240,
                    848,
                    601,
                    219,
                    668
                ],
                "sys": [
                    964,
                    909,
                    878,
                    943,
                    240,
                    848,
                    601,
                    219,
                    668
                ],
                "types.GeneratorType": [
                    222
                ],
                "types": [
                    222
                ],
                "orig_stack_contexts": [
                    871,
                    229,
                    886,
                    231
                ],
                "stack_context._state.contexts": [
                    871,
                    229,
                    886,
                    231
                ],
                "stack_context._state": [
                    871,
                    229,
                    886,
                    231
                ],
                "yielded": [
                    1026,
                    1027,
                    1028,
                    1029,
                    1031,
                    913,
                    921,
                    922,
                    923,
                    924,
                    925,
                    926,
                    928,
                    935,
                    936,
                    938,
                    940,
                    961,
                    230,
                    232,
                    233,
                    881,
                    242,
                    884
                ],
                "yielded.set_exception": [
                    233
                ],
                "stack_context.StackContextInconsistentError": [
                    888,
                    234
                ],
                "future.set_result": [
                    673,
                    255,
                    653,
                    238,
                    508,
                    671
                ],
                "Runner": [
                    242
                ],
                "__init__": [
                    281
                ],
                "self": [
                    521,
                    522,
                    525,
                    526,
                    527,
                    528,
                    529,
                    531,
                    532,
                    535,
                    536,
                    541,
                    542,
                    544,
                    570,
                    572,
                    574,
                    578,
                    579,
                    580,
                    581,
                    584,
                    589,
                    590,
                    591,
                    596,
                    603,
                    608,
                    609,
                    281,
                    282,
                    806,
                    807,
                    808,
                    809,
                    810,
                    811,
                    812,
                    813,
                    814,
                    815,
                    821,
                    822,
                    823,
                    827,
                    829,
                    830,
                    831,
                    833,
                    837,
                    839,
                    329,
                    843,
                    332,
                    844,
                    846,
                    335,
                    336,
                    337,
                    848,
                    339,
                    849,
                    850,
                    342,
                    854,
                    855,
                    346,
                    349,
                    861,
                    864,
                    866,
                    869,
                    358,
                    360,
                    361,
                    363,
                    877,
                    367,
                    368,
                    369,
                    370,
                    881,
                    372,
                    884,
                    887,
                    378,
                    380,
                    381,
                    892,
                    893,
                    894,
                    901,
                    902,
                    903,
                    904,
                    907,
                    908,
                    909,
                    910,
                    911,
                    913,
                    916,
                    931,
                    935,
                    937,
                    940,
                    429,
                    942,
                    943,
                    432,
                    433,
                    945,
                    949,
                    950,
                    439,
                    954,
                    955,
                    449,
                    961,
                    963,
                    452,
                    964,
                    966,
                    455,
                    967,
                    968,
                    458,
                    974,
                    977,
                    978,
                    979,
                    980,
                    473,
                    986,
                    987,
                    476,
                    988,
                    479,
                    482
                ],
                "self.value": [
                    282
                ],
                "value": [
                    875,
                    979,
                    884,
                    502,
                    282
                ],
                "self._unfinished": [
                    329,
                    346,
                    332,
                    381
                ],
                "f": [
                    676,
                    677,
                    678,
                    679,
                    774,
                    329,
                    775,
                    776,
                    332,
                    656,
                    659,
                    596,
                    661,
                    598,
                    922,
                    925
                ],
                "k": [
                    329
                ],
                "kwargs.items": [
                    329
                ],
                "futures": [
                    330,
                    340,
                    333
                ],
                "kwargs.values": [
                    330
                ],
                "i": [
                    576,
                    577,
                    578,
                    579,
                    584,
                    585,
                    648,
                    332,
                    589,
                    575
                ],
                "self._finished": [
                    360,
                    361,
                    335,
                    372,
                    346
                ],
                "collections.deque": [
                    335
                ],
                "collections": [
                    990,
                    335
                ],
                "self.current_index": [
                    336,
                    381,
                    349
                ],
                "self.current_future": [
                    336,
                    380,
                    349
                ],
                "self._running_future": [
                    358,
                    363,
                    337,
                    369,
                    378
                ],
                "self_ref": [
                    339,
                    342,
                    367
                ],
                "weakref.ref": [
                    339
                ],
                "weakref": [
                    339
                ],
                "functools.partial": [
                    341,
                    974
                ],
                "self._done_callback": [
                    342
                ],
                "self._return_result": [
                    361,
                    370
                ],
                "self._finished.popleft": [
                    361
                ],
                "self._running_future.done": [
                    369
                ],
                "done": [
                    370,
                    372,
                    378,
                    380,
                    381
                ],
                "self._finished.append": [
                    372
                ],
                "chain_future": [
                    728,
                    378
                ],
                "self._unfinished.pop": [
                    381
                ],
                "YieldPoint": [
                    928,
                    514,
                    547,
                    579,
                    461,
                    925,
                    442,
                    413,
                    922
                ],
                "self.key": [
                    449,
                    455,
                    458,
                    429,
                    527,
                    528,
                    433,
                    529,
                    439,
                    536,
                    542
                ],
                "key": [
                    832,
                    449,
                    482,
                    833,
                    837,
                    838,
                    839,
                    479,
                    843,
                    429,
                    974,
                    854,
                    855,
                    831
                ],
                "self.runner": [
                    482,
                    452,
                    535,
                    455,
                    458,
                    526,
                    432,
                    531,
                    439,
                    536,
                    476,
                    541,
                    542,
                    479
                ],
                "runner": [
                    452,
                    585,
                    526,
                    432,
                    433,
                    528,
                    529,
                    476
                ],
                "runner.register_callback": [
                    528,
                    433
                ],
                "self.runner.result_callback": [
                    439
                ],
                "self.runner.is_ready": [
                    536,
                    479,
                    455
                ],
                "self.runner.pop_result": [
                    458,
                    482,
                    542
                ],
                "self.keys": [
                    608,
                    609,
                    482,
                    473,
                    570,
                    572,
                    479
                ],
                "keys": [
                    644,
                    647,
                    653,
                    473,
                    670,
                    671
                ],
                "Future": [
                    774,
                    746,
                    651,
                    779,
                    782,
                    497,
                    694,
                    727
                ],
                "future.done": [
                    867,
                    500,
                    663,
                    506,
                    669
                ],
                "typ": [
                    979,
                    502
                ],
                "tb": [
                    979,
                    502
                ],
                "stack_context.ExceptionStackContext": [
                    948,
                    509
                ],
                "handle_exception": [
                    509
                ],
                "_argument_adapter": [
                    973,
                    510
                ],
                "set_result": [
                    510
                ],
                "self.future": [
                    521,
                    908,
                    525,
                    529,
                    532,
                    931,
                    808,
                    937,
                    942,
                    943,
                    961,
                    963,
                    964,
                    966,
                    968,
                    846,
                    848,
                    978,
                    979,
                    866,
                    869,
                    893
                ],
                "self.io_loop": [
                    967,
                    522,
                    815,
                    529,
                    955
                ],
                "io_loop": [
                    744,
                    522,
                    751,
                    755,
                    756,
                    729,
                    730
                ],
                "self.future.done": [
                    525,
                    966
                ],
                "self.io_loop.add_future": [
                    529,
                    967
                ],
                "runner.result_callback": [
                    529
                ],
                "self.result_fn": [
                    544,
                    532
                ],
                "self.future.result": [
                    532
                ],
                "children": [
                    643,
                    644,
                    645,
                    676,
                    648,
                    649,
                    652,
                    659,
                    571,
                    572,
                    573,
                    575
                ],
                "children.keys": [
                    644,
                    572
                ],
                "children.values": [
                    573,
                    645
                ],
                "self.children": [
                    578,
                    579,
                    580,
                    584,
                    596,
                    574
                ],
                "is_future": [
                    576,
                    691,
                    1028,
                    648
                ],
                "YieldFuture": [
                    577
                ],
                "self.children.append": [
                    578
                ],
                "self.unfinished_children": [
                    580,
                    589,
                    590,
                    591
                ],
                "self.quiet_exceptions": [
                    603,
                    581
                ],
                "quiet_exceptions": [
                    664,
                    736,
                    581
                ],
                "i.start": [
                    585
                ],
                "finished": [
                    588,
                    590
                ],
                "itertools.takewhile": [
                    588
                ],
                "itertools": [
                    588
                ],
                "i.is_ready": [
                    589
                ],
                "self.unfinished_children.difference_update": [
                    590
                ],
                "result_list": [
                    609,
                    673,
                    611,
                    594,
                    658,
                    661,
                    598,
                    671
                ],
                "exc_info": [
                    872,
                    878,
                    880,
                    881,
                    882,
                    595,
                    600,
                    601,
                    606,
                    607
                ],
                "result_list.append": [
                    661,
                    598
                ],
                "f.get_result": [
                    598
                ],
                "app_log.error": [
                    665,
                    604,
                    737
                ],
                "app_log": [
                    665,
                    604,
                    737
                ],
                "raise_exc_info": [
                    607
                ],
                "unfinished_children": [
                    656,
                    649,
                    657
                ],
                "unfinished_children.remove": [
                    656
                ],
                "f.result": [
                    661
                ],
                "listening": [
                    675,
                    677,
                    678
                ],
                "listening.add": [
                    678
                ],
                "f.add_done_callback": [
                    679
                ],
                "x": [
                    691,
                    692,
                    695
                ],
                "fut": [
                    696,
                    694,
                    695
                ],
                "fut.set_result": [
                    695
                ],
                "result.set_exception": [
                    741
                ],
                "error_callback": [
                    743
                ],
                "timeout_handle": [
                    744,
                    756,
                    751
                ],
                "io_loop.add_timeout": [
                    744
                ],
                "timeout": [
                    745
                ],
                "timeout_callback": [
                    745
                ],
                "io_loop.remove_timeout": [
                    756,
                    751
                ],
                "io_loop.add_future": [
                    755
                ],
                "call_later": [
                    775
                ],
                "duration": [
                    775
                ],
                "f.set_result": [
                    775
                ],
                "_null_future": [
                    808,
                    779,
                    908,
                    780,
                    893
                ],
                "_null_future.set_result": [
                    780
                ],
                "moment": [
                    794,
                    966,
                    782,
                    783
                ],
                "moment.__doc__": [
                    783
                ],
                "moment.set_result": [
                    794
                ],
                "self.gen": [
                    881,
                    884,
                    806,
                    887
                ],
                "gen": [
                    806
                ],
                "self.result_future": [
                    902,
                    903,
                    807,
                    909,
                    910
                ],
                "result_future": [
                    807
                ],
                "self.yield_point": [
                    809,
                    940,
                    844,
                    846,
                    849
                ],
                "self.pending_callbacks": [
                    833,
                    837,
                    901,
                    810,
                    854,
                    827,
                    829,
                    894,
                    831
                ],
                "self.results": [
                    839,
                    843,
                    811,
                    855,
                    830
                ],
                "self.running": [
                    864,
                    812,
                    977,
                    916,
                    861
                ],
                "self.finished": [
                    907,
                    813,
                    977,
                    892,
                    861
                ],
                "self.had_exception": [
                    894,
                    877,
                    814
                ],
                "self.stack_context_deactivate": [
                    945,
                    821,
                    950,
                    986,
                    987,
                    988
                ],
                "self.handle_yield": [
                    913,
                    822
                ],
                "first_yielded": [
                    822
                ],
                "self.run": [
                    968,
                    850,
                    980,
                    823,
                    954
                ],
                "KeyReuseError": [
                    832
                ],
                "self.pending_callbacks.add": [
                    833
                ],
                "UnknownKeyError": [
                    838
                ],
                "self.yield_point.is_ready": [
                    844
                ],
                "self.future.set_result": [
                    937,
                    846
                ],
                "self.yield_point.get_result": [
                    846
                ],
                "self.future.set_exc_info": [
                    848,
                    979,
                    964,
                    943
                ],
                "self.pending_callbacks.remove": [
                    854
                ],
                "self.results.pop": [
                    855
                ],
                "self.gen.throw": [
                    881,
                    887
                ],
                "self.gen.send": [
                    884
                ],
                "LeakedCallbackError": [
                    899
                ],
                "self.result_future.set_result": [
                    902
                ],
                "self._deactivate_stack_context": [
                    904,
                    911
                ],
                "self.result_future.set_exc_info": [
                    909
                ],
                "Multi": [
                    923,
                    926
                ],
                "yielded.values": [
                    925
                ],
                "yielded.start": [
                    935
                ],
                "yielded.is_ready": [
                    936
                ],
                "yielded.get_result": [
                    938
                ],
                "self.handle_exception": [
                    949
                ],
                "deactivate": [
                    949,
                    950
                ],
                "start_yield_point": [
                    953,
                    958
                ],
                "self.io_loop.add_callback": [
                    955
                ],
                "cb": [
                    955
                ],
                "convert_yielded": [
                    961,
                    1034
                ],
                "BadYieldError": [
                    962,
                    1031
                ],
                "self.set_result": [
                    974
                ],
                "Arguments": [
                    1002,
                    990
                ],
                "collections.namedtuple": [
                    990
                ],
                "multi_future": [
                    1027
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/tornado_16/tornado/test/gen_test.py",
                "test_function": "test_no_ref",
                "test_function_code": "    @gen_test\n    def test_no_ref(self):\n        # In this usage, there is no direct hard reference to the\n        # WaitIterator itself, only the Future it returns. Since\n        # WaitIterator uses weak references internally to improve GC\n        # performance, this used to cause problems.\n        yield gen.with_timeout(datetime.timedelta(seconds=0.1),\n                               gen.WaitIterator(gen.sleep(0)).next())",
                "test_error": "tornado.gen.TimeoutError: Timeout",
                "full_test_error": "self = <tornado.test.gen_test.WaitIteratorTest testMethod=test_no_ref>\n\n    @gen_test\n    def test_no_ref(self):\n        # In this usage, there is no direct hard reference to the\n        # WaitIterator itself, only the Future it returns. Since\n        # WaitIterator uses weak references internally to improve GC\n        # performance, this used to cause problems.\n        yield gen.with_timeout(datetime.timedelta(seconds=0.1),\n>                              gen.WaitIterator(gen.sleep(0)).next())\n\ntornado/test/gen_test.py:1259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntornado/gen.py:875: in run\n    value = future.result()\ntornado/concurrent.py:211: in result\n    raise_exc_info(self._exc_info)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexc_info = (<class 'tornado.gen.TimeoutError'>, TimeoutError('Timeout'), None)\n\n>   ???\nE   tornado.gen.TimeoutError: Timeout\n\n<string>:3: TimeoutError",
                "traceback": "tornado/gen.py:875: in run\n    value = future.result()\ntornado/concurrent.py:211: in result\n    raise_exc_info(self._exc_info)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexc_info = (<class 'tornado.gen.TimeoutError'>, TimeoutError('Timeout'), None)\n\n>   ???\nE   tornado.gen.TimeoutError: Timeout\n\n<string>:3: TimeoutError",
                "test_function_decorators": [
                    "gen_test"
                ]
            }
        ]
    }
}