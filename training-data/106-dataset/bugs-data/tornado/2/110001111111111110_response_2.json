{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n    self,\n    start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n    headers: httputil.HTTPHeaders,\n    chunk: bytes = None,\n) -> \"Future[None]\":\n    from typing import Union, cast\n    from tornado import httputil, iostream\n    from tornado.concurrent import Future\n    \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n    lines = []\n    if self.is_client:\n        assert isinstance(start_line, httputil.RequestStartLine)\n        self._request_start_line = start_line\n        lines.append(b\"%s %s HTTP/1.1\" % (start_line.method.encode(), start_line.path.encode()))\n        # Client requests with a non-empty body must have either a\n        # Content-Length or a Transfer-Encoding.\n        self._chunking_output = (\n            start_line.method in (b\"POST\", b\"PUT\", b\"PATCH\")\n            and not b\"Content-Length\" in headers\n            and not b\"Transfer-Encoding\" in headers\n        )\n    else:\n        assert isinstance(start_line, httputil.ResponseStartLine)\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        lines.append(b\"HTTP/1.1 %d %s\" % (start_line.code, start_line.reason.encode()))\n        self._chunking_output = (\n            # TODO: should this use\n            # self._request_start_line.version or\n            # start_line.version?\n            self._request_start_line.version == b\"HTTP/1.1\"\n            # 1xx, 204 and 304 responses have no body (not even a zero-length\n            # body), and so should not have either Content-Length or\n            # Transfer-Encoding headers.\n            and start_line.code not in (204, 304)\n            and (start_line.code < 100 or start_line.code >= 200)\n            # No need to chunk the output if a Content-Length is specified.\n            and not b\"Content-Length\" in headers\n            # Applications are discouraged from touching Transfer-Encoding,\n            # but if they do, leave it alone.\n            and not b\"Transfer-Encoding\" in headers\n        )\n        # If connection to a 1.1 client will be closed, inform client\n        if (\n            self._request_start_line.version == b\"HTTP/1.1\"\n            and self._disconnect_on_finish\n        ):\n            headers[b\"Connection\"] = b\"close\"\n        # If a 1.0 client asked for keep-alive, add the header.\n        if (\n            self._request_start_line.version == b\"HTTP/1.0\"\n            and self._request_headers.get(b\"Connection\", b\"\").lower() == b\"keep-alive\"\n        ):\n            headers[b\"Connection\"] = b\"Keep-Alive\"\n    if self._chunking_output:\n        headers[b\"Transfer-Encoding\"] = b\"chunked\"\n    if not self.is_client and (\n        self._request_start_line.method == b\"HEAD\"\n        or cast(httputil.ResponseStartLine, start_line).code == 304\n    ):\n        self._expected_content_remaining = 0\n    elif b\"Content-Length\" in headers:\n        self._expected_content_remaining = int(headers[b\"Content-Length\"])\n    else:\n        self._expected_content_remaining = None\n    # TODO: headers are supposed to be of type str, but we still have some\n    # cases that let bytes slip through. Remove these calls when those\n    # are fixed.\n    header_lines = (\n        n.decode() + b\": \" + v.decode() for n, v in headers.get_all()\n    )\n    lines.extend(header_lines.encode() for l in header_lines)\n    for line in lines:\n        if b\"\\n\" in line:\n            raise ValueError(b\"Newline in header: \" + repr(line))\n    if self.stream.closed():\n        future = self._write_future = Future()\n        future.set_exception(iostream.StreamClosedError())\n        future.exception()\n    else:\n        future = self._write_future = Future()\n        data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n        if chunk:\n            data += self._format_chunk(chunk)\n        self._pending_write = self.stream.write(data)\n        iostream.IOLoop.current().add_future(self._pending_write, self._on_write_complete)\n    return future"
        }
    ]
}