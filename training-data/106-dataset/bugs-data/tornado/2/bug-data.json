{
    "tornado:2": {
        "/Volumes/SSD2T/bgp_envs/repos/tornado_2/tornado/http1connection.py": {
            "buggy_functions": [
                {
                    "function_name": "write_headers",
                    "function_code": "def write_headers(\n    self,\n    start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n    headers: httputil.HTTPHeaders,\n    chunk: bytes = None,\n) -> \"Future[None]\":\n    \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n    lines = []\n    if self.is_client:\n        assert isinstance(start_line, httputil.RequestStartLine)\n        self._request_start_line = start_line\n        lines.append(utf8(\"%s %s HTTP/1.1\" % (start_line[0], start_line[1])))\n        # Client requests with a non-empty body must have either a\n        # Content-Length or a Transfer-Encoding.\n        self._chunking_output = (\n            start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n            and \"Content-Length\" not in headers\n            and \"Transfer-Encoding\" not in headers\n        )\n    else:\n        assert isinstance(start_line, httputil.ResponseStartLine)\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        lines.append(utf8(\"HTTP/1.1 %d %s\" % (start_line[1], start_line[2])))\n        self._chunking_output = (\n            # TODO: should this use\n            # self._request_start_line.version or\n            # start_line.version?\n            self._request_start_line.version == \"HTTP/1.1\"\n            # 1xx, 204 and 304 responses have no body (not even a zero-length\n            # body), and so should not have either Content-Length or\n            # Transfer-Encoding headers.\n            and start_line.code not in (204, 304)\n            and (start_line.code < 100 or start_line.code >= 200)\n            # No need to chunk the output if a Content-Length is specified.\n            and \"Content-Length\" not in headers\n            # Applications are discouraged from touching Transfer-Encoding,\n            # but if they do, leave it alone.\n            and \"Transfer-Encoding\" not in headers\n        )\n        # If connection to a 1.1 client will be closed, inform client\n        if (\n            self._request_start_line.version == \"HTTP/1.1\"\n            and self._disconnect_on_finish\n        ):\n            headers[\"Connection\"] = \"close\"\n        # If a 1.0 client asked for keep-alive, add the header.\n        if (\n            self._request_start_line.version == \"HTTP/1.0\"\n            and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"\n        ):\n            headers[\"Connection\"] = \"Keep-Alive\"\n    if self._chunking_output:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n    if not self.is_client and (\n        self._request_start_line.method == \"HEAD\"\n        or cast(httputil.ResponseStartLine, start_line).code == 304\n    ):\n        self._expected_content_remaining = 0\n    elif \"Content-Length\" in headers:\n        self._expected_content_remaining = int(headers[\"Content-Length\"])\n    else:\n        self._expected_content_remaining = None\n    # TODO: headers are supposed to be of type str, but we still have some\n    # cases that let bytes slip through. Remove these native_str calls when those\n    # are fixed.\n    header_lines = (\n        native_str(n) + \": \" + native_str(v) for n, v in headers.get_all()\n    )\n    lines.extend(l.encode(\"latin1\") for l in header_lines)\n    for line in lines:\n        if b\"\\n\" in line:\n            raise ValueError(\"Newline in header: \" + repr(line))\n    future = None\n    if self.stream.closed():\n        future = self._write_future = Future()\n        future.set_exception(iostream.StreamClosedError())\n        future.exception()\n    else:\n        future = self._write_future = Future()\n        data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n        if chunk:\n            data += self._format_chunk(chunk)\n        self._pending_write = self.stream.write(data)\n        future_add_done_callback(self._pending_write, self._on_write_complete)\n    return future\n",
                    "decorators": [],
                    "docstring": "Implements `.HTTPConnection.write_headers`.",
                    "start_line": 376,
                    "end_line": 462,
                    "variables": {
                        "Union": [
                            378
                        ],
                        "httputil.RequestStartLine": [
                            385,
                            378
                        ],
                        "httputil": [
                            385,
                            396,
                            433,
                            378,
                            379
                        ],
                        "httputil.ResponseStartLine": [
                            433,
                            378,
                            396
                        ],
                        "httputil.HTTPHeaders": [
                            379
                        ],
                        "bytes": [
                            380
                        ],
                        "lines": [
                            387,
                            383,
                            457,
                            400,
                            446,
                            447
                        ],
                        "self.is_client": [
                            384,
                            431
                        ],
                        "self": [
                            384,
                            386,
                            390,
                            397,
                            398,
                            399,
                            401,
                            405,
                            419,
                            420,
                            425,
                            426,
                            429,
                            431,
                            432,
                            435,
                            437,
                            439,
                            451,
                            452,
                            456,
                            459,
                            460,
                            461
                        ],
                        "isinstance": [
                            385,
                            396
                        ],
                        "start_line": [
                            385,
                            386,
                            387,
                            391,
                            396,
                            399,
                            400,
                            433,
                            409,
                            410
                        ],
                        "self._request_start_line": [
                            386,
                            419,
                            425,
                            397,
                            432,
                            405
                        ],
                        "lines.append": [
                            400,
                            387
                        ],
                        "utf8": [
                            400,
                            387
                        ],
                        "self._chunking_output": [
                            401,
                            429,
                            390
                        ],
                        "start_line.method": [
                            391
                        ],
                        "headers": [
                            422,
                            392,
                            393,
                            428,
                            430,
                            436,
                            437,
                            444,
                            412,
                            415
                        ],
                        "self._request_headers": [
                            426,
                            398
                        ],
                        "self._response_start_line": [
                            399
                        ],
                        "self._request_start_line.version": [
                            425,
                            419,
                            405
                        ],
                        "start_line.code": [
                            409,
                            410
                        ],
                        "self._disconnect_on_finish": [
                            420
                        ],
                        "lower": [
                            426
                        ],
                        "self._request_headers.get": [
                            426
                        ],
                        "self._request_start_line.method": [
                            432
                        ],
                        "code": [
                            433
                        ],
                        "cast": [
                            433
                        ],
                        "self._expected_content_remaining": [
                            435,
                            437,
                            439
                        ],
                        "int": [
                            437
                        ],
                        "header_lines": [
                            443,
                            446
                        ],
                        "native_str": [
                            444
                        ],
                        "n": [
                            444
                        ],
                        "v": [
                            444
                        ],
                        "headers.get_all": [
                            444
                        ],
                        "lines.extend": [
                            446
                        ],
                        "l.encode": [
                            446
                        ],
                        "l": [
                            446
                        ],
                        "line": [
                            448,
                            449,
                            447
                        ],
                        "ValueError": [
                            449
                        ],
                        "repr": [
                            449
                        ],
                        "future": [
                            450,
                            452,
                            453,
                            454,
                            456,
                            462
                        ],
                        "self.stream.closed": [
                            451
                        ],
                        "self.stream": [
                            451,
                            460
                        ],
                        "self._write_future": [
                            456,
                            452
                        ],
                        "Future": [
                            456,
                            452
                        ],
                        "future.set_exception": [
                            453
                        ],
                        "iostream.StreamClosedError": [
                            453
                        ],
                        "iostream": [
                            453
                        ],
                        "future.exception": [
                            454
                        ],
                        "data": [
                            457,
                            459,
                            460
                        ],
                        "join": [
                            457
                        ],
                        "chunk": [
                            458,
                            459
                        ],
                        "self._format_chunk": [
                            459
                        ],
                        "self._pending_write": [
                            460,
                            461
                        ],
                        "self.stream.write": [
                            460
                        ],
                        "future_add_done_callback": [
                            461
                        ],
                        "self._on_write_complete": [
                            461
                        ]
                    },
                    "filtered_variables": {
                        "Union": [
                            378
                        ],
                        "httputil.RequestStartLine": [
                            385,
                            378
                        ],
                        "httputil": [
                            385,
                            396,
                            433,
                            378,
                            379
                        ],
                        "httputil.ResponseStartLine": [
                            433,
                            378,
                            396
                        ],
                        "httputil.HTTPHeaders": [
                            379
                        ],
                        "lines": [
                            387,
                            383,
                            457,
                            400,
                            446,
                            447
                        ],
                        "self.is_client": [
                            384,
                            431
                        ],
                        "self": [
                            384,
                            386,
                            390,
                            397,
                            398,
                            399,
                            401,
                            405,
                            419,
                            420,
                            425,
                            426,
                            429,
                            431,
                            432,
                            435,
                            437,
                            439,
                            451,
                            452,
                            456,
                            459,
                            460,
                            461
                        ],
                        "start_line": [
                            385,
                            386,
                            387,
                            391,
                            396,
                            399,
                            400,
                            433,
                            409,
                            410
                        ],
                        "self._request_start_line": [
                            386,
                            419,
                            425,
                            397,
                            432,
                            405
                        ],
                        "lines.append": [
                            400,
                            387
                        ],
                        "utf8": [
                            400,
                            387
                        ],
                        "self._chunking_output": [
                            401,
                            429,
                            390
                        ],
                        "start_line.method": [
                            391
                        ],
                        "headers": [
                            422,
                            392,
                            393,
                            428,
                            430,
                            436,
                            437,
                            444,
                            412,
                            415
                        ],
                        "self._request_headers": [
                            426,
                            398
                        ],
                        "self._response_start_line": [
                            399
                        ],
                        "self._request_start_line.version": [
                            425,
                            419,
                            405
                        ],
                        "start_line.code": [
                            409,
                            410
                        ],
                        "self._disconnect_on_finish": [
                            420
                        ],
                        "lower": [
                            426
                        ],
                        "self._request_headers.get": [
                            426
                        ],
                        "self._request_start_line.method": [
                            432
                        ],
                        "code": [
                            433
                        ],
                        "cast": [
                            433
                        ],
                        "self._expected_content_remaining": [
                            435,
                            437,
                            439
                        ],
                        "header_lines": [
                            443,
                            446
                        ],
                        "native_str": [
                            444
                        ],
                        "n": [
                            444
                        ],
                        "v": [
                            444
                        ],
                        "headers.get_all": [
                            444
                        ],
                        "lines.extend": [
                            446
                        ],
                        "l.encode": [
                            446
                        ],
                        "l": [
                            446
                        ],
                        "line": [
                            448,
                            449,
                            447
                        ],
                        "future": [
                            450,
                            452,
                            453,
                            454,
                            456,
                            462
                        ],
                        "self.stream.closed": [
                            451
                        ],
                        "self.stream": [
                            451,
                            460
                        ],
                        "self._write_future": [
                            456,
                            452
                        ],
                        "Future": [
                            456,
                            452
                        ],
                        "future.set_exception": [
                            453
                        ],
                        "iostream.StreamClosedError": [
                            453
                        ],
                        "iostream": [
                            453
                        ],
                        "future.exception": [
                            454
                        ],
                        "data": [
                            457,
                            459,
                            460
                        ],
                        "join": [
                            457
                        ],
                        "chunk": [
                            458,
                            459
                        ],
                        "self._format_chunk": [
                            459
                        ],
                        "self._pending_write": [
                            460,
                            461
                        ],
                        "self.stream.write": [
                            460
                        ],
                        "future_add_done_callback": [
                            461
                        ],
                        "self._on_write_complete": [
                            461
                        ]
                    },
                    "diff_line_number": 393,
                    "class_data": {
                        "signature": "class HTTP1Connection(httputil.HTTPConnection)",
                        "docstring": "Implements the HTTP/1.x protocol.\n\nThis class can be on its own for clients, or via `HTTP1ServerConnection`\nfor servers.",
                        "constructor_docstring": ":arg stream: an `.IOStream`\n:arg bool is_client: client or server\n:arg params: a `.HTTP1ConnectionParameters` instance or ``None``\n:arg context: an opaque application-defined object that can be accessed\n    as ``connection.context``.",
                        "functions": [
                            "def __init__(self, stream: iostream.IOStream, is_client: bool, params: HTTP1ConnectionParameters=None, context: object=None) -> None:\n    \"\"\"\n    :arg stream: an `.IOStream`\n    :arg bool is_client: client or server\n    :arg params: a `.HTTP1ConnectionParameters` instance or ``None``\n    :arg context: an opaque application-defined object that can be accessed\n        as ``connection.context``.\n    \"\"\"\n    self.is_client = is_client\n    self.stream = stream\n    if params is None:\n        params = HTTP1ConnectionParameters()\n    self.params = params\n    self.context = context\n    self.no_keep_alive = params.no_keep_alive\n    self._max_body_size = self.params.max_body_size or self.stream.max_buffer_size\n    self._body_timeout = self.params.body_timeout\n    self._write_finished = False\n    self._read_finished = False\n    self._finish_future = Future()\n    self._disconnect_on_finish = False\n    self._clear_callbacks()\n    self._request_start_line = None\n    self._response_start_line = None\n    self._request_headers = None\n    self._chunking_output = False\n    self._expected_content_remaining = None\n    self._pending_write = None",
                            "def read_response(self, delegate: httputil.HTTPMessageDelegate) -> Awaitable[bool]:\n    \"\"\"Read a single HTTP response.\n\n    Typical client-mode usage is to write a request using `write_headers`,\n    `write`, and `finish`, and then call ``read_response``.\n\n    :arg delegate: a `.HTTPMessageDelegate`\n\n    Returns a `.Future` that resolves to a bool after the full response has\n    been read. The result is true if the stream is still open.\n    \"\"\"\n    if self.params.decompress:\n        delegate = _GzipMessageDelegate(delegate, self.params.chunk_size)\n    return self._read_message(delegate)",
                            "async def _read_message(self, delegate: httputil.HTTPMessageDelegate) -> bool:\n    need_delegate_close = False\n    try:\n        header_future = self.stream.read_until_regex(b'\\r?\\n\\r?\\n', max_bytes=self.params.max_header_size)\n        if self.params.header_timeout is None:\n            header_data = await header_future\n        else:\n            try:\n                header_data = await gen.with_timeout(self.stream.io_loop.time() + self.params.header_timeout, header_future, quiet_exceptions=iostream.StreamClosedError)\n            except gen.TimeoutError:\n                self.close()\n                return False\n        start_line_str, headers = self._parse_headers(header_data)\n        if self.is_client:\n            resp_start_line = httputil.parse_response_start_line(start_line_str)\n            self._response_start_line = resp_start_line\n            start_line = resp_start_line\n            self._disconnect_on_finish = False\n        else:\n            req_start_line = httputil.parse_request_start_line(start_line_str)\n            self._request_start_line = req_start_line\n            self._request_headers = headers\n            start_line = req_start_line\n            self._disconnect_on_finish = not self._can_keep_alive(req_start_line, headers)\n        need_delegate_close = True\n        with _ExceptionLoggingContext(app_log):\n            header_recv_future = delegate.headers_received(start_line, headers)\n            if header_recv_future is not None:\n                await header_recv_future\n        if self.stream is None:\n            need_delegate_close = False\n            return False\n        skip_body = False\n        if self.is_client:\n            assert isinstance(start_line, httputil.ResponseStartLine)\n            if self._request_start_line is not None and self._request_start_line.method == 'HEAD':\n                skip_body = True\n            code = start_line.code\n            if code == 304:\n                skip_body = True\n            if code >= 100 and code < 200:\n                if 'Content-Length' in headers or 'Transfer-Encoding' in headers:\n                    raise httputil.HTTPInputError('Response code %d cannot have body' % code)\n                await self._read_message(delegate)\n        elif headers.get('Expect') == '100-continue' and (not self._write_finished):\n            self.stream.write(b'HTTP/1.1 100 (Continue)\\r\\n\\r\\n')\n        if not skip_body:\n            body_future = self._read_body(resp_start_line.code if self.is_client else 0, headers, delegate)\n            if body_future is not None:\n                if self._body_timeout is None:\n                    await body_future\n                else:\n                    try:\n                        await gen.with_timeout(self.stream.io_loop.time() + self._body_timeout, body_future, quiet_exceptions=iostream.StreamClosedError)\n                    except gen.TimeoutError:\n                        gen_log.info('Timeout reading body from %s', self.context)\n                        self.stream.close()\n                        return False\n        self._read_finished = True\n        if not self._write_finished or self.is_client:\n            need_delegate_close = False\n            with _ExceptionLoggingContext(app_log):\n                delegate.finish()\n        if not self._finish_future.done() and self.stream is not None and (not self.stream.closed()):\n            self.stream.set_close_callback(self._on_connection_close)\n            await self._finish_future\n        if self.is_client and self._disconnect_on_finish:\n            self.close()\n        if self.stream is None:\n            return False\n    except httputil.HTTPInputError as e:\n        gen_log.info('Malformed HTTP message from %s: %s', self.context, e)\n        if not self.is_client:\n            await self.stream.write(b'HTTP/1.1 400 Bad Request\\r\\n\\r\\n')\n        self.close()\n        return False\n    finally:\n        if need_delegate_close:\n            with _ExceptionLoggingContext(app_log):\n                delegate.on_connection_close()\n        header_future = None\n        self._clear_callbacks()\n    return True",
                            "def _clear_callbacks(self) -> None:\n    \"\"\"Clears the callback attributes.\n\n    This allows the request handler to be garbage collected more\n    quickly in CPython by breaking up reference cycles.\n    \"\"\"\n    self._write_callback = None\n    self._write_future = None\n    self._close_callback = None\n    if self.stream is not None:\n        self.stream.set_close_callback(None)",
                            "def set_close_callback(self, callback: Optional[Callable[[], None]]) -> None:\n    \"\"\"Sets a callback that will be run when the connection is closed.\n\n    Note that this callback is slightly different from\n    `.HTTPMessageDelegate.on_connection_close`: The\n    `.HTTPMessageDelegate` method is called when the connection is\n    closed while recieving a message. This callback is used when\n    there is not an active delegate (for example, on the server\n    side this callback is used if the client closes the connection\n    after sending its request but before receiving all the\n    response.\n    \"\"\"\n    self._close_callback = callback",
                            "def _on_connection_close(self) -> None:\n    if self._close_callback is not None:\n        callback = self._close_callback\n        self._close_callback = None\n        callback()\n    if not self._finish_future.done():\n        future_set_result_unless_cancelled(self._finish_future, None)\n    self._clear_callbacks()",
                            "def close(self) -> None:\n    if self.stream is not None:\n        self.stream.close()\n    self._clear_callbacks()\n    if not self._finish_future.done():\n        future_set_result_unless_cancelled(self._finish_future, None)",
                            "def detach(self) -> iostream.IOStream:\n    \"\"\"Take control of the underlying stream.\n\n    Returns the underlying `.IOStream` object and stops all further\n    HTTP processing.  May only be called during\n    `.HTTPMessageDelegate.headers_received`.  Intended for implementing\n    protocols like websockets that tunnel over an HTTP handshake.\n    \"\"\"\n    self._clear_callbacks()\n    stream = self.stream\n    self.stream = None\n    if not self._finish_future.done():\n        future_set_result_unless_cancelled(self._finish_future, None)\n    return stream",
                            "def set_body_timeout(self, timeout: float) -> None:\n    \"\"\"Sets the body timeout for a single request.\n\n    Overrides the value from `.HTTP1ConnectionParameters`.\n    \"\"\"\n    self._body_timeout = timeout",
                            "def set_max_body_size(self, max_body_size: int) -> None:\n    \"\"\"Sets the body size limit for a single request.\n\n    Overrides the value from `.HTTP1ConnectionParameters`.\n    \"\"\"\n    self._max_body_size = max_body_size",
                            "def write_headers(self, start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine], headers: httputil.HTTPHeaders, chunk: bytes=None) -> 'Future[None]':\n    \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n    lines = []\n    if self.is_client:\n        assert isinstance(start_line, httputil.RequestStartLine)\n        self._request_start_line = start_line\n        lines.append(utf8('%s %s HTTP/1.1' % (start_line[0], start_line[1])))\n        self._chunking_output = start_line.method in ('POST', 'PUT', 'PATCH') and 'Content-Length' not in headers and ('Transfer-Encoding' not in headers)\n    else:\n        assert isinstance(start_line, httputil.ResponseStartLine)\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        lines.append(utf8('HTTP/1.1 %d %s' % (start_line[1], start_line[2])))\n        self._chunking_output = self._request_start_line.version == 'HTTP/1.1' and start_line.code not in (204, 304) and (start_line.code < 100 or start_line.code >= 200) and ('Content-Length' not in headers) and ('Transfer-Encoding' not in headers)\n        if self._request_start_line.version == 'HTTP/1.1' and self._disconnect_on_finish:\n            headers['Connection'] = 'close'\n        if self._request_start_line.version == 'HTTP/1.0' and self._request_headers.get('Connection', '').lower() == 'keep-alive':\n            headers['Connection'] = 'Keep-Alive'\n    if self._chunking_output:\n        headers['Transfer-Encoding'] = 'chunked'\n    if not self.is_client and (self._request_start_line.method == 'HEAD' or cast(httputil.ResponseStartLine, start_line).code == 304):\n        self._expected_content_remaining = 0\n    elif 'Content-Length' in headers:\n        self._expected_content_remaining = int(headers['Content-Length'])\n    else:\n        self._expected_content_remaining = None\n    header_lines = (native_str(n) + ': ' + native_str(v) for n, v in headers.get_all())\n    lines.extend((l.encode('latin1') for l in header_lines))\n    for line in lines:\n        if b'\\n' in line:\n            raise ValueError('Newline in header: ' + repr(line))\n    future = None\n    if self.stream.closed():\n        future = self._write_future = Future()\n        future.set_exception(iostream.StreamClosedError())\n        future.exception()\n    else:\n        future = self._write_future = Future()\n        data = b'\\r\\n'.join(lines) + b'\\r\\n\\r\\n'\n        if chunk:\n            data += self._format_chunk(chunk)\n        self._pending_write = self.stream.write(data)\n        future_add_done_callback(self._pending_write, self._on_write_complete)\n    return future",
                            "def _format_chunk(self, chunk: bytes) -> bytes:\n    if self._expected_content_remaining is not None:\n        self._expected_content_remaining -= len(chunk)\n        if self._expected_content_remaining < 0:\n            self.stream.close()\n            raise httputil.HTTPOutputError('Tried to write more data than Content-Length')\n    if self._chunking_output and chunk:\n        return utf8('%x' % len(chunk)) + b'\\r\\n' + chunk + b'\\r\\n'\n    else:\n        return chunk",
                            "def write(self, chunk: bytes) -> 'Future[None]':\n    \"\"\"Implements `.HTTPConnection.write`.\n\n    For backwards compatibility it is allowed but deprecated to\n    skip `write_headers` and instead call `write()` with a\n    pre-encoded header block.\n    \"\"\"\n    future = None\n    if self.stream.closed():\n        future = self._write_future = Future()\n        self._write_future.set_exception(iostream.StreamClosedError())\n        self._write_future.exception()\n    else:\n        future = self._write_future = Future()\n        self._pending_write = self.stream.write(self._format_chunk(chunk))\n        future_add_done_callback(self._pending_write, self._on_write_complete)\n    return future",
                            "def finish(self) -> None:\n    \"\"\"Implements `.HTTPConnection.finish`.\"\"\"\n    if self._expected_content_remaining is not None and self._expected_content_remaining != 0 and (not self.stream.closed()):\n        self.stream.close()\n        raise httputil.HTTPOutputError('Tried to write %d bytes less than Content-Length' % self._expected_content_remaining)\n    if self._chunking_output:\n        if not self.stream.closed():\n            self._pending_write = self.stream.write(b'0\\r\\n\\r\\n')\n            self._pending_write.add_done_callback(self._on_write_complete)\n    self._write_finished = True\n    if not self._read_finished:\n        self._disconnect_on_finish = True\n    self.stream.set_nodelay(True)\n    if self._pending_write is None:\n        self._finish_request(None)\n    else:\n        future_add_done_callback(self._pending_write, self._finish_request)",
                            "def _on_write_complete(self, future: 'Future[None]') -> None:\n    exc = future.exception()\n    if exc is not None and (not isinstance(exc, iostream.StreamClosedError)):\n        future.result()\n    if self._write_callback is not None:\n        callback = self._write_callback\n        self._write_callback = None\n        self.stream.io_loop.add_callback(callback)\n    if self._write_future is not None:\n        future = self._write_future\n        self._write_future = None\n        future_set_result_unless_cancelled(future, None)",
                            "def _can_keep_alive(self, start_line: httputil.RequestStartLine, headers: httputil.HTTPHeaders) -> bool:\n    if self.params.no_keep_alive:\n        return False\n    connection_header = headers.get('Connection')\n    if connection_header is not None:\n        connection_header = connection_header.lower()\n    if start_line.version == 'HTTP/1.1':\n        return connection_header != 'close'\n    elif 'Content-Length' in headers or headers.get('Transfer-Encoding', '').lower() == 'chunked' or getattr(start_line, 'method', None) in ('HEAD', 'GET'):\n        return connection_header == 'keep-alive'\n    return False",
                            "def _finish_request(self, future: Optional['Future[None]']) -> None:\n    self._clear_callbacks()\n    if not self.is_client and self._disconnect_on_finish:\n        self.close()\n        return\n    self.stream.set_nodelay(False)\n    if not self._finish_future.done():\n        future_set_result_unless_cancelled(self._finish_future, None)",
                            "def _parse_headers(self, data: bytes) -> Tuple[str, httputil.HTTPHeaders]:\n    data_str = native_str(data.decode('latin1')).lstrip('\\r\\n')\n    eol = data_str.find('\\n')\n    start_line = data_str[:eol].rstrip('\\r')\n    headers = httputil.HTTPHeaders.parse(data_str[eol:])\n    return (start_line, headers)",
                            "def _read_body(self, code: int, headers: httputil.HTTPHeaders, delegate: httputil.HTTPMessageDelegate) -> Optional[Awaitable[None]]:\n    if 'Content-Length' in headers:\n        if 'Transfer-Encoding' in headers:\n            raise httputil.HTTPInputError('Response with both Transfer-Encoding and Content-Length')\n        if ',' in headers['Content-Length']:\n            pieces = re.split(',\\\\s*', headers['Content-Length'])\n            if any((i != pieces[0] for i in pieces)):\n                raise httputil.HTTPInputError('Multiple unequal Content-Lengths: %r' % headers['Content-Length'])\n            headers['Content-Length'] = pieces[0]\n        try:\n            content_length = int(headers['Content-Length'])\n        except ValueError:\n            raise httputil.HTTPInputError('Only integer Content-Length is allowed: %s' % headers['Content-Length'])\n        if cast(int, content_length) > self._max_body_size:\n            raise httputil.HTTPInputError('Content-Length too long')\n    else:\n        content_length = None\n    if code == 204:\n        if 'Transfer-Encoding' in headers or content_length not in (None, 0):\n            raise httputil.HTTPInputError('Response with code %d should not have body' % code)\n        content_length = 0\n    if content_length is not None:\n        return self._read_fixed_body(content_length, delegate)\n    if headers.get('Transfer-Encoding', '').lower() == 'chunked':\n        return self._read_chunked_body(delegate)\n    if self.is_client:\n        return self._read_body_until_close(delegate)\n    return None",
                            "async def _read_fixed_body(self, content_length: int, delegate: httputil.HTTPMessageDelegate) -> None:\n    while content_length > 0:\n        body = await self.stream.read_bytes(min(self.params.chunk_size, content_length), partial=True)\n        content_length -= len(body)\n        if not self._write_finished or self.is_client:\n            with _ExceptionLoggingContext(app_log):\n                ret = delegate.data_received(body)\n                if ret is not None:\n                    await ret",
                            "async def _read_chunked_body(self, delegate: httputil.HTTPMessageDelegate) -> None:\n    total_size = 0\n    while True:\n        chunk_len_str = await self.stream.read_until(b'\\r\\n', max_bytes=64)\n        chunk_len = int(chunk_len_str.strip(), 16)\n        if chunk_len == 0:\n            crlf = await self.stream.read_bytes(2)\n            if crlf != b'\\r\\n':\n                raise httputil.HTTPInputError('improperly terminated chunked request')\n            return\n        total_size += chunk_len\n        if total_size > self._max_body_size:\n            raise httputil.HTTPInputError('chunked body too large')\n        bytes_to_read = chunk_len\n        while bytes_to_read:\n            chunk = await self.stream.read_bytes(min(bytes_to_read, self.params.chunk_size), partial=True)\n            bytes_to_read -= len(chunk)\n            if not self._write_finished or self.is_client:\n                with _ExceptionLoggingContext(app_log):\n                    ret = delegate.data_received(chunk)\n                    if ret is not None:\n                        await ret\n        crlf = await self.stream.read_bytes(2)\n        assert crlf == b'\\r\\n'",
                            "async def _read_body_until_close(self, delegate: httputil.HTTPMessageDelegate) -> None:\n    body = await self.stream.read_until_close()\n    if not self._write_finished or self.is_client:\n        with _ExceptionLoggingContext(app_log):\n            ret = delegate.data_received(body)\n            if ret is not None:\n                await ret"
                        ],
                        "constructor_variables": [
                            "_request_headers",
                            "params",
                            "is_client",
                            "stream",
                            "_finish_future",
                            "_disconnect_on_finish",
                            "_body_timeout",
                            "context",
                            "_write_finished",
                            "_request_start_line",
                            "_chunking_output",
                            "_response_start_line",
                            "_expected_content_remaining",
                            "_pending_write",
                            "_max_body_size",
                            "no_keep_alive",
                            "_read_finished"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, stream: iostream.IOStream, is_client: bool, params: HTTP1ConnectionParameters=None, context: object=None) -> None",
                            "read_response(self, delegate: httputil.HTTPMessageDelegate) -> Awaitable[bool]",
                            "_read_message(self, delegate: httputil.HTTPMessageDelegate) -> bool",
                            "_clear_callbacks(self) -> None",
                            "set_close_callback(self, callback: Optional[Callable[[], None]]) -> None",
                            "_on_connection_close(self) -> None",
                            "close(self) -> None",
                            "detach(self) -> iostream.IOStream",
                            "set_body_timeout(self, timeout: float) -> None",
                            "set_max_body_size(self, max_body_size: int) -> None",
                            "write_headers(self, start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine], headers: httputil.HTTPHeaders, chunk: bytes=None) -> 'Future[None]'",
                            "_format_chunk(self, chunk: bytes) -> bytes",
                            "write(self, chunk: bytes) -> 'Future[None]'",
                            "finish(self) -> None",
                            "_on_write_complete(self, future: 'Future[None]') -> None",
                            "_can_keep_alive(self, start_line: httputil.RequestStartLine, headers: httputil.HTTPHeaders) -> bool",
                            "_finish_request(self, future: Optional['Future[None]']) -> None",
                            "_parse_headers(self, data: bytes) -> Tuple[str, httputil.HTTPHeaders]",
                            "_read_body(self, code: int, headers: httputil.HTTPHeaders, delegate: httputil.HTTPMessageDelegate) -> Optional[Awaitable[None]]",
                            "_read_fixed_body(self, content_length: int, delegate: httputil.HTTPMessageDelegate) -> None",
                            "_read_chunked_body(self, delegate: httputil.HTTPMessageDelegate) -> None",
                            "_read_body_until_close(self, delegate: httputil.HTTPMessageDelegate) -> None"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_client": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x105258090>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "'PUT'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x1052345d0>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x1052345d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x105234710>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x105258090>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x105258090>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "[b'PUT /redirect?url=/put&status=307 HTTP/1.1', b'Connection: close', b'Host: 127.0.0.1:64715', b'Accept-Encoding: gzip', b'Transfer-Encoding: chunked']",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "self.is_client": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x105258090>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x105723c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "'PUT'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x1052345d0>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": "<generator object HTTP1Connection.write_headers.<locals>.<genexpr> at 0x10520a650>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x1052345d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x105723c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "b'Transfer-Encoding: chunked'",
                                    "variable_type": "bytes",
                                    "variable_shape": "26"
                                },
                                "future": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x105234710>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": "<built-in method set_exception of _asyncio.Future object at 0x1052554d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": "<built-in method exception of _asyncio.Future object at 0x1052554d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "b'PUT /redirect?url=/put&status=307 HTTP/1.1\\r\\nConnection: close\\r\\nHost: 127.0.0.1:64715\\r\\nAccept-Encoding: gzip\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n'",
                                    "variable_type": "bytes",
                                    "variable_shape": "139"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x105258090>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x105258090>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_client": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x105234cd0>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=307, reason='Temporary Redirect')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='HTTP/1.1')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x10525ae50>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x104efdf90>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "307",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x10525ae50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x105234650>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "b'redirects can have bodies too'",
                                    "variable_type": "bytes",
                                    "variable_shape": "29"
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x105234cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x105234cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "[b'HTTP/1.1 307 Temporary Redirect', b'Server: TornadoServer/6.0.dev1', b'Content-Type: text/html; charset=UTF-8', b'Date: Mon, 11 Dec 2023 09:45:36 GMT', b'Location: /put', b'Content-Length: 29', b'Vary: Accept-Encoding', b'Connection: close']",
                                    "variable_type": "list",
                                    "variable_shape": "8"
                                },
                                "self.is_client": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x105234cd0>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=307, reason='Temporary Redirect')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='HTTP/1.1')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x105204690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x10525ae50>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x104efdf90>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=307, reason='Temporary Redirect')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "307",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": "<generator object HTTP1Connection.write_headers.<locals>.<genexpr> at 0x10520a5d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x10525ae50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x105204690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "b'Connection: close'",
                                    "variable_type": "bytes",
                                    "variable_shape": "17"
                                },
                                "future": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x105234650>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": "<built-in method set_exception of _asyncio.Future object at 0x105255d40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": "<built-in method exception of _asyncio.Future object at 0x105255d40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "b'HTTP/1.1 307 Temporary Redirect\\r\\nServer: TornadoServer/6.0.dev1\\r\\nContent-Type: text/html; charset=UTF-8\\r\\nDate: Mon, 11 Dec 2023 09:45:36 GMT\\r\\nLocation: /put\\r\\nContent-Length: 29\\r\\nVary: Accept-Encoding\\r\\nConnection: close\\r\\n\\r\\nredirects can have bodies too'",
                                    "variable_type": "bytes",
                                    "variable_shape": "251"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "b'redirects can have bodies too'",
                                    "variable_type": "bytes",
                                    "variable_shape": "29"
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x105234cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x105234cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_client": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x105234e50>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/put', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "'PUT'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x105234bd0>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x105234bd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x105234c90>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x105234e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x105234e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "[b'PUT /put HTTP/1.1', b'Connection: close', b'Accept-Encoding: gzip', b'Transfer-Encoding: chunked', b'Host: 127.0.0.1:64715']",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "self.is_client": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x105234e50>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/put', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/put', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x104f01eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "'PUT'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x105234bd0>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": "<generator object HTTP1Connection.write_headers.<locals>.<genexpr> at 0x10520a250>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x105234bd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104f01eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "b'Host: 127.0.0.1:64715'",
                                    "variable_type": "bytes",
                                    "variable_shape": "21"
                                },
                                "future": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x105234c90>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": "<built-in method set_exception of _asyncio.Future object at 0x10526e7a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": "<built-in method exception of _asyncio.Future object at 0x10526e7a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "b'PUT /put HTTP/1.1\\r\\nConnection: close\\r\\nAccept-Encoding: gzip\\r\\nTransfer-Encoding: chunked\\r\\nHost: 127.0.0.1:64715\\r\\n\\r\\n'",
                                    "variable_type": "bytes",
                                    "variable_shape": "114"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x105234e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x105234e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_client": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x107dd9d50>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "'PUT'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107dd9310>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x107dd9310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x107dd9790>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x107dd9d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x107dd9d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "[b'PUT /redirect?url=/put&status=307 HTTP/1.1', b'Connection: close', b'Host: 127.0.0.1:64720', b'Accept-Encoding: gzip', b'Transfer-Encoding: chunked']",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "self.is_client": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x107dd9d50>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x107c1c780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "'PUT'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107dd9310>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": "<generator object HTTP1Connection.write_headers.<locals>.<genexpr> at 0x107da05d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x107dd9310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x107c1c780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "b'Transfer-Encoding: chunked'",
                                    "variable_type": "bytes",
                                    "variable_shape": "26"
                                },
                                "future": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x107dd9790>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": "<built-in method set_exception of _asyncio.Future object at 0x107ded830>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": "<built-in method exception of _asyncio.Future object at 0x107ded830>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "b'PUT /redirect?url=/put&status=307 HTTP/1.1\\r\\nConnection: close\\r\\nHost: 127.0.0.1:64720\\r\\nAccept-Encoding: gzip\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n'",
                                    "variable_type": "bytes",
                                    "variable_shape": "139"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x107dd9d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x107dd9d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_client": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x1082ad950>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=307, reason='Temporary Redirect')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='HTTP/1.1')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107df8690>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x1078b7c10>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "307",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x107df8690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x107dd9750>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "b'redirects can have bodies too'",
                                    "variable_type": "bytes",
                                    "variable_shape": "29"
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x1082ad950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x1082ad950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "[b'HTTP/1.1 307 Temporary Redirect', b'Server: TornadoServer/6.0.dev1', b'Content-Type: text/html; charset=UTF-8', b'Date: Mon, 11 Dec 2023 09:45:41 GMT', b'Location: /put', b'Content-Length: 29', b'Vary: Accept-Encoding', b'Connection: close']",
                                    "variable_type": "list",
                                    "variable_shape": "8"
                                },
                                "self.is_client": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x1082ad950>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=307, reason='Temporary Redirect')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/redirect?url=/put&status=307', version='HTTP/1.1')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x107da72d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107df8690>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x1078b7c10>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=307, reason='Temporary Redirect')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "307",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": "<generator object HTTP1Connection.write_headers.<locals>.<genexpr> at 0x107da03d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x107df8690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x107da72d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "b'Connection: close'",
                                    "variable_type": "bytes",
                                    "variable_shape": "17"
                                },
                                "future": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x107dd9750>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": "<built-in method set_exception of _asyncio.Future object at 0x107e090e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": "<built-in method exception of _asyncio.Future object at 0x107e090e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "b'HTTP/1.1 307 Temporary Redirect\\r\\nServer: TornadoServer/6.0.dev1\\r\\nContent-Type: text/html; charset=UTF-8\\r\\nDate: Mon, 11 Dec 2023 09:45:41 GMT\\r\\nLocation: /put\\r\\nContent-Length: 29\\r\\nVary: Accept-Encoding\\r\\nConnection: close\\r\\n\\r\\nredirects can have bodies too'",
                                    "variable_type": "bytes",
                                    "variable_shape": "251"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "b'redirects can have bodies too'",
                                    "variable_type": "bytes",
                                    "variable_shape": "29"
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x1082ad950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x1082ad950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_client": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x107dd9d90>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/put', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "'PUT'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107dd9fd0>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x107dd9fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x107dd9790>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x107dd9d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x107dd9d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "[b'PUT /put HTTP/1.1', b'Connection: close', b'Accept-Encoding: gzip', b'Transfer-Encoding: chunked', b'Host: 127.0.0.1:64720']",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "self.is_client": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x107dd9d90>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/put', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/put', version='')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x107b512d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "'PUT'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107dd9fd0>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": "<generator object HTTP1Connection.write_headers.<locals>.<genexpr> at 0x107da01d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x107dd9fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x107b512d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "b'Host: 127.0.0.1:64720'",
                                    "variable_type": "bytes",
                                    "variable_shape": "21"
                                },
                                "future": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x107dd9790>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": "<built-in method set_exception of _asyncio.Future object at 0x107e09440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": "<built-in method exception of _asyncio.Future object at 0x107e09440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "b'PUT /put HTTP/1.1\\r\\nConnection: close\\r\\nAccept-Encoding: gzip\\r\\nTransfer-Encoding: chunked\\r\\nHost: 127.0.0.1:64720\\r\\n\\r\\n'",
                                    "variable_type": "bytes",
                                    "variable_shape": "114"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x107dd9d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x107dd9d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_client": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x107dd94d0>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=200, reason='OK')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/put', version='HTTP/1.1')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107dfbfd0>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107dfb710>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "200",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x107dfbfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x107dd96d0>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "b'Put body: '",
                                    "variable_type": "bytes",
                                    "variable_shape": "10"
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x107dd94d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x107dd94d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.RequestStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.ResponseStartLine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "httputil.HTTPHeaders": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": "[b'HTTP/1.1 200 OK', b'Server: TornadoServer/6.0.dev1', b'Content-Type: text/html; charset=UTF-8', b'Date: Mon, 11 Dec 2023 09:45:41 GMT', b'Content-Length: 10', b'Vary: Accept-Encoding', b'Connection: close']",
                                    "variable_type": "list",
                                    "variable_shape": "7"
                                },
                                "self.is_client": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.http1connection.HTTP1Connection object at 0x107dd94d0>",
                                    "variable_type": "HTTP1Connection",
                                    "variable_shape": null
                                },
                                "start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=200, reason='OK')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line": {
                                    "variable_value": "RequestStartLine(method='PUT', path='/put', version='HTTP/1.1')",
                                    "variable_type": "RequestStartLine",
                                    "variable_shape": "3"
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x107df0d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utf8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._chunking_output": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107dfbfd0>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._request_headers": {
                                    "variable_value": "<tornado.httputil.HTTPHeaders object at 0x107dfb710>",
                                    "variable_type": "HTTPHeaders",
                                    "variable_shape": null
                                },
                                "self._response_start_line": {
                                    "variable_value": "ResponseStartLine(version='', code=200, reason='OK')",
                                    "variable_type": "ResponseStartLine",
                                    "variable_shape": "3"
                                },
                                "self._request_start_line.version": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start_line.code": {
                                    "variable_value": "200",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._disconnect_on_finish": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._request_headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._request_start_line.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._expected_content_remaining": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "header_lines": {
                                    "variable_value": "<generator object HTTP1Connection.write_headers.<locals>.<genexpr> at 0x107da00d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "native_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.get_all": {
                                    "variable_value": "<bound method HTTPHeaders.get_all of <tornado.httputil.HTTPHeaders object at 0x107dfbfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "lines.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x107df0d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "l.encode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "b'Connection: close'",
                                    "variable_type": "bytes",
                                    "variable_shape": "17"
                                },
                                "future": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.closed": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stream": {
                                    "variable_value": "<tornado.iostream.IOStream object at 0x107dd96d0>",
                                    "variable_type": "IOStream",
                                    "variable_shape": null
                                },
                                "self._write_future": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.set_exception": {
                                    "variable_value": "<built-in method set_exception of _asyncio.Future object at 0x107e0f3b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "iostream.StreamClosedError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iostream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "future.exception": {
                                    "variable_value": "<built-in method exception of _asyncio.Future object at 0x107e0f3b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "b'HTTP/1.1 200 OK\\r\\nServer: TornadoServer/6.0.dev1\\r\\nContent-Type: text/html; charset=UTF-8\\r\\nDate: Mon, 11 Dec 2023 09:45:41 GMT\\r\\nContent-Length: 10\\r\\nVary: Accept-Encoding\\r\\nConnection: close\\r\\n\\r\\nPut body: '",
                                    "variable_type": "bytes",
                                    "variable_shape": "200"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "chunk": {
                                    "variable_value": "b'Put body: '",
                                    "variable_type": "bytes",
                                    "variable_shape": "10"
                                },
                                "self._format_chunk": {
                                    "variable_value": "<bound method HTTP1Connection._format_chunk of <tornado.http1connection.HTTP1Connection object at 0x107dd94d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._pending_write": {
                                    "variable_value": "<Future finished result=None>",
                                    "variable_type": "Future",
                                    "variable_shape": null
                                },
                                "self.stream.write": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "future_add_done_callback": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._on_write_complete": {
                                    "variable_value": "<bound method HTTP1Connection._on_write_complete of <tornado.http1connection.HTTP1Connection object at 0x107dd94d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self) -> None:\n    pass",
                "def __init__(self, logger: logging.Logger) -> None:\n    self.logger = logger",
                "def __enter__(self) -> None:\n    pass",
                "def __exit__(\n    self,\n    typ: Optional[Type[BaseException]],\n    value: Optional[BaseException],\n    tb: types.TracebackType,\n) -> None:\n    if value is not None:\n        assert typ is not None\n        self.logger.error(\"Uncaught exception\", exc_info=(typ, value, tb))\n        raise _QuietException",
                "def __init__(\n    self,\n    no_keep_alive: bool = False,\n    chunk_size: int = None,\n    max_header_size: int = None,\n    header_timeout: float = None,\n    max_body_size: int = None,\n    body_timeout: float = None,\n    decompress: bool = False,\n) -> None:\n    \"\"\"\n    :arg bool no_keep_alive: If true, always close the connection after\n        one request.\n    :arg int chunk_size: how much data to read into memory at once\n    :arg int max_header_size:  maximum amount of data for HTTP headers\n    :arg float header_timeout: how long to wait for all headers (seconds)\n    :arg int max_body_size: maximum amount of data for body\n    :arg float body_timeout: how long to wait while reading body (seconds)\n    :arg bool decompress: if true, decode incoming\n        ``Content-Encoding: gzip``\n    \"\"\"\n    self.no_keep_alive = no_keep_alive\n    self.chunk_size = chunk_size or 65536\n    self.max_header_size = max_header_size or 65536\n    self.header_timeout = header_timeout\n    self.max_body_size = max_body_size\n    self.body_timeout = body_timeout\n    self.decompress = decompress",
                "def __init__(\n    self,\n    stream: iostream.IOStream,\n    is_client: bool,\n    params: HTTP1ConnectionParameters = None,\n    context: object = None,\n) -> None:\n    \"\"\"\n    :arg stream: an `.IOStream`\n    :arg bool is_client: client or server\n    :arg params: a `.HTTP1ConnectionParameters` instance or ``None``\n    :arg context: an opaque application-defined object that can be accessed\n        as ``connection.context``.\n    \"\"\"\n    self.is_client = is_client\n    self.stream = stream\n    if params is None:\n        params = HTTP1ConnectionParameters()\n    self.params = params\n    self.context = context\n    self.no_keep_alive = params.no_keep_alive\n    # The body limits can be altered by the delegate, so save them\n    # here instead of just referencing self.params later.\n    self._max_body_size = self.params.max_body_size or self.stream.max_buffer_size\n    self._body_timeout = self.params.body_timeout\n    # _write_finished is set to True when finish() has been called,\n    # i.e. there will be no more data sent.  Data may still be in the\n    # stream's write buffer.\n    self._write_finished = False\n    # True when we have read the entire incoming body.\n    self._read_finished = False\n    # _finish_future resolves when all data has been written and flushed\n    # to the IOStream.\n    self._finish_future = Future()  # type: Future[None]\n    # If true, the connection should be closed after this request\n    # (after the response has been written in the server side,\n    # and after it has been read in the client)\n    self._disconnect_on_finish = False\n    self._clear_callbacks()\n    # Save the start lines after we read or write them; they\n    # affect later processing (e.g. 304 responses and HEAD methods\n    # have content-length but no bodies)\n    self._request_start_line = None  # type: Optional[httputil.RequestStartLine]\n    self._response_start_line = None  # type: Optional[httputil.ResponseStartLine]\n    self._request_headers = None  # type: Optional[httputil.HTTPHeaders]\n    # True if we are writing output with chunked encoding.\n    self._chunking_output = False\n    # While reading a body with a content-length, this is the\n    # amount left to read.\n    self._expected_content_remaining = None  # type: Optional[int]\n    # A Future for our outgoing writes, returned by IOStream.write.\n    self._pending_write = None  # type: Optional[Future[None]]",
                "def read_response(self, delegate: httputil.HTTPMessageDelegate) -> Awaitable[bool]:\n    \"\"\"Read a single HTTP response.\n\n    Typical client-mode usage is to write a request using `write_headers`,\n    `write`, and `finish`, and then call ``read_response``.\n\n    :arg delegate: a `.HTTPMessageDelegate`\n\n    Returns a `.Future` that resolves to a bool after the full response has\n    been read. The result is true if the stream is still open.\n    \"\"\"\n    if self.params.decompress:\n        delegate = _GzipMessageDelegate(delegate, self.params.chunk_size)\n    return self._read_message(delegate)",
                "async def _read_message(self, delegate: httputil.HTTPMessageDelegate) -> bool:\n    need_delegate_close = False\n    try:\n        header_future = self.stream.read_until_regex(\n            b\"\\r?\\n\\r?\\n\", max_bytes=self.params.max_header_size\n        )\n        if self.params.header_timeout is None:\n            header_data = await header_future\n        else:\n            try:\n                header_data = await gen.with_timeout(\n                    self.stream.io_loop.time() + self.params.header_timeout,\n                    header_future,\n                    quiet_exceptions=iostream.StreamClosedError,\n                )\n            except gen.TimeoutError:\n                self.close()\n                return False\n        start_line_str, headers = self._parse_headers(header_data)\n        if self.is_client:\n            resp_start_line = httputil.parse_response_start_line(start_line_str)\n            self._response_start_line = resp_start_line\n            start_line = (\n                resp_start_line\n            )  # type: Union[httputil.RequestStartLine, httputil.ResponseStartLine]\n            # TODO: this will need to change to support client-side keepalive\n            self._disconnect_on_finish = False\n        else:\n            req_start_line = httputil.parse_request_start_line(start_line_str)\n            self._request_start_line = req_start_line\n            self._request_headers = headers\n            start_line = req_start_line\n            self._disconnect_on_finish = not self._can_keep_alive(\n                req_start_line, headers\n            )\n        need_delegate_close = True\n        with _ExceptionLoggingContext(app_log):\n            header_recv_future = delegate.headers_received(start_line, headers)\n            if header_recv_future is not None:\n                await header_recv_future\n        if self.stream is None:\n            # We've been detached.\n            need_delegate_close = False\n            return False\n        skip_body = False\n        if self.is_client:\n            assert isinstance(start_line, httputil.ResponseStartLine)\n            if (\n                self._request_start_line is not None\n                and self._request_start_line.method == \"HEAD\"\n            ):\n                skip_body = True\n            code = start_line.code\n            if code == 304:\n                # 304 responses may include the content-length header\n                # but do not actually have a body.\n                # http://tools.ietf.org/html/rfc7230#section-3.3\n                skip_body = True\n            if code >= 100 and code < 200:\n                # 1xx responses should never indicate the presence of\n                # a body.\n                if \"Content-Length\" in headers or \"Transfer-Encoding\" in headers:\n                    raise httputil.HTTPInputError(\n                        \"Response code %d cannot have body\" % code\n                    )\n                # TODO: client delegates will get headers_received twice\n                # in the case of a 100-continue.  Document or change?\n                await self._read_message(delegate)\n        else:\n            if headers.get(\"Expect\") == \"100-continue\" and not self._write_finished:\n                self.stream.write(b\"HTTP/1.1 100 (Continue)\\r\\n\\r\\n\")\n        if not skip_body:\n            body_future = self._read_body(\n                resp_start_line.code if self.is_client else 0, headers, delegate\n            )\n            if body_future is not None:\n                if self._body_timeout is None:\n                    await body_future\n                else:\n                    try:\n                        await gen.with_timeout(\n                            self.stream.io_loop.time() + self._body_timeout,\n                            body_future,\n                            quiet_exceptions=iostream.StreamClosedError,\n                        )\n                    except gen.TimeoutError:\n                        gen_log.info(\"Timeout reading body from %s\", self.context)\n                        self.stream.close()\n                        return False\n        self._read_finished = True\n        if not self._write_finished or self.is_client:\n            need_delegate_close = False\n            with _ExceptionLoggingContext(app_log):\n                delegate.finish()\n        # If we're waiting for the application to produce an asynchronous\n        # response, and we're not detached, register a close callback\n        # on the stream (we didn't need one while we were reading)\n        if (\n            not self._finish_future.done()\n            and self.stream is not None\n            and not self.stream.closed()\n        ):\n            self.stream.set_close_callback(self._on_connection_close)\n            await self._finish_future\n        if self.is_client and self._disconnect_on_finish:\n            self.close()\n        if self.stream is None:\n            return False\n    except httputil.HTTPInputError as e:\n        gen_log.info(\"Malformed HTTP message from %s: %s\", self.context, e)\n        if not self.is_client:\n            await self.stream.write(b\"HTTP/1.1 400 Bad Request\\r\\n\\r\\n\")\n        self.close()\n        return False\n    finally:\n        if need_delegate_close:\n            with _ExceptionLoggingContext(app_log):\n                delegate.on_connection_close()\n        header_future = None  # type: ignore\n        self._clear_callbacks()\n    return True",
                "def _clear_callbacks(self) -> None:\n    \"\"\"Clears the callback attributes.\n\n    This allows the request handler to be garbage collected more\n    quickly in CPython by breaking up reference cycles.\n    \"\"\"\n    self._write_callback = None\n    self._write_future = None  # type: Optional[Future[None]]\n    self._close_callback = None  # type: Optional[Callable[[], None]]\n    if self.stream is not None:\n        self.stream.set_close_callback(None)",
                "def set_close_callback(self, callback: Optional[Callable[[], None]]) -> None:\n    \"\"\"Sets a callback that will be run when the connection is closed.\n\n    Note that this callback is slightly different from\n    `.HTTPMessageDelegate.on_connection_close`: The\n    `.HTTPMessageDelegate` method is called when the connection is\n    closed while recieving a message. This callback is used when\n    there is not an active delegate (for example, on the server\n    side this callback is used if the client closes the connection\n    after sending its request but before receiving all the\n    response.\n    \"\"\"\n    self._close_callback = callback",
                "def _on_connection_close(self) -> None:\n    # Note that this callback is only registered on the IOStream\n    # when we have finished reading the request and are waiting for\n    # the application to produce its response.\n    if self._close_callback is not None:\n        callback = self._close_callback\n        self._close_callback = None\n        callback()\n    if not self._finish_future.done():\n        future_set_result_unless_cancelled(self._finish_future, None)\n    self._clear_callbacks()",
                "def close(self) -> None:\n    if self.stream is not None:\n        self.stream.close()\n    self._clear_callbacks()\n    if not self._finish_future.done():\n        future_set_result_unless_cancelled(self._finish_future, None)",
                "def detach(self) -> iostream.IOStream:\n    \"\"\"Take control of the underlying stream.\n\n    Returns the underlying `.IOStream` object and stops all further\n    HTTP processing.  May only be called during\n    `.HTTPMessageDelegate.headers_received`.  Intended for implementing\n    protocols like websockets that tunnel over an HTTP handshake.\n    \"\"\"\n    self._clear_callbacks()\n    stream = self.stream\n    self.stream = None  # type: ignore\n    if not self._finish_future.done():\n        future_set_result_unless_cancelled(self._finish_future, None)\n    return stream",
                "def set_body_timeout(self, timeout: float) -> None:\n    \"\"\"Sets the body timeout for a single request.\n\n    Overrides the value from `.HTTP1ConnectionParameters`.\n    \"\"\"\n    self._body_timeout = timeout",
                "def set_max_body_size(self, max_body_size: int) -> None:\n    \"\"\"Sets the body size limit for a single request.\n\n    Overrides the value from `.HTTP1ConnectionParameters`.\n    \"\"\"\n    self._max_body_size = max_body_size",
                "def write_headers(\n    self,\n    start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n    headers: httputil.HTTPHeaders,\n    chunk: bytes = None,\n) -> \"Future[None]\":\n    \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n    lines = []\n    if self.is_client:\n        assert isinstance(start_line, httputil.RequestStartLine)\n        self._request_start_line = start_line\n        lines.append(utf8(\"%s %s HTTP/1.1\" % (start_line[0], start_line[1])))\n        # Client requests with a non-empty body must have either a\n        # Content-Length or a Transfer-Encoding.\n        self._chunking_output = (\n            start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n            and \"Content-Length\" not in headers\n            and \"Transfer-Encoding\" not in headers\n        )\n    else:\n        assert isinstance(start_line, httputil.ResponseStartLine)\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        lines.append(utf8(\"HTTP/1.1 %d %s\" % (start_line[1], start_line[2])))\n        self._chunking_output = (\n            # TODO: should this use\n            # self._request_start_line.version or\n            # start_line.version?\n            self._request_start_line.version == \"HTTP/1.1\"\n            # 1xx, 204 and 304 responses have no body (not even a zero-length\n            # body), and so should not have either Content-Length or\n            # Transfer-Encoding headers.\n            and start_line.code not in (204, 304)\n            and (start_line.code < 100 or start_line.code >= 200)\n            # No need to chunk the output if a Content-Length is specified.\n            and \"Content-Length\" not in headers\n            # Applications are discouraged from touching Transfer-Encoding,\n            # but if they do, leave it alone.\n            and \"Transfer-Encoding\" not in headers\n        )\n        # If connection to a 1.1 client will be closed, inform client\n        if (\n            self._request_start_line.version == \"HTTP/1.1\"\n            and self._disconnect_on_finish\n        ):\n            headers[\"Connection\"] = \"close\"\n        # If a 1.0 client asked for keep-alive, add the header.\n        if (\n            self._request_start_line.version == \"HTTP/1.0\"\n            and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"\n        ):\n            headers[\"Connection\"] = \"Keep-Alive\"\n    if self._chunking_output:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n    if not self.is_client and (\n        self._request_start_line.method == \"HEAD\"\n        or cast(httputil.ResponseStartLine, start_line).code == 304\n    ):\n        self._expected_content_remaining = 0\n    elif \"Content-Length\" in headers:\n        self._expected_content_remaining = int(headers[\"Content-Length\"])\n    else:\n        self._expected_content_remaining = None\n    # TODO: headers are supposed to be of type str, but we still have some\n    # cases that let bytes slip through. Remove these native_str calls when those\n    # are fixed.\n    header_lines = (\n        native_str(n) + \": \" + native_str(v) for n, v in headers.get_all()\n    )\n    lines.extend(l.encode(\"latin1\") for l in header_lines)\n    for line in lines:\n        if b\"\\n\" in line:\n            raise ValueError(\"Newline in header: \" + repr(line))\n    future = None\n    if self.stream.closed():\n        future = self._write_future = Future()\n        future.set_exception(iostream.StreamClosedError())\n        future.exception()\n    else:\n        future = self._write_future = Future()\n        data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n        if chunk:\n            data += self._format_chunk(chunk)\n        self._pending_write = self.stream.write(data)\n        future_add_done_callback(self._pending_write, self._on_write_complete)\n    return future",
                "def _format_chunk(self, chunk: bytes) -> bytes:\n    if self._expected_content_remaining is not None:\n        self._expected_content_remaining -= len(chunk)\n        if self._expected_content_remaining < 0:\n            # Close the stream now to stop further framing errors.\n            self.stream.close()\n            raise httputil.HTTPOutputError(\n                \"Tried to write more data than Content-Length\"\n            )\n    if self._chunking_output and chunk:\n        # Don't write out empty chunks because that means END-OF-STREAM\n        # with chunked encoding\n        return utf8(\"%x\" % len(chunk)) + b\"\\r\\n\" + chunk + b\"\\r\\n\"\n    else:\n        return chunk",
                "def write(self, chunk: bytes) -> \"Future[None]\":\n    \"\"\"Implements `.HTTPConnection.write`.\n\n    For backwards compatibility it is allowed but deprecated to\n    skip `write_headers` and instead call `write()` with a\n    pre-encoded header block.\n    \"\"\"\n    future = None\n    if self.stream.closed():\n        future = self._write_future = Future()\n        self._write_future.set_exception(iostream.StreamClosedError())\n        self._write_future.exception()\n    else:\n        future = self._write_future = Future()\n        self._pending_write = self.stream.write(self._format_chunk(chunk))\n        future_add_done_callback(self._pending_write, self._on_write_complete)\n    return future",
                "def finish(self) -> None:\n    \"\"\"Implements `.HTTPConnection.finish`.\"\"\"\n    if (\n        self._expected_content_remaining is not None\n        and self._expected_content_remaining != 0\n        and not self.stream.closed()\n    ):\n        self.stream.close()\n        raise httputil.HTTPOutputError(\n            \"Tried to write %d bytes less than Content-Length\"\n            % self._expected_content_remaining\n        )\n    if self._chunking_output:\n        if not self.stream.closed():\n            self._pending_write = self.stream.write(b\"0\\r\\n\\r\\n\")\n            self._pending_write.add_done_callback(self._on_write_complete)\n    self._write_finished = True\n    # If the app finished the request while we're still reading,\n    # divert any remaining data away from the delegate and\n    # close the connection when we're done sending our response.\n    # Closing the connection is the only way to avoid reading the\n    # whole input body.\n    if not self._read_finished:\n        self._disconnect_on_finish = True\n    # No more data is coming, so instruct TCP to send any remaining\n    # data immediately instead of waiting for a full packet or ack.\n    self.stream.set_nodelay(True)\n    if self._pending_write is None:\n        self._finish_request(None)\n    else:\n        future_add_done_callback(self._pending_write, self._finish_request)",
                "def _on_write_complete(self, future: \"Future[None]\") -> None:\n    exc = future.exception()\n    if exc is not None and not isinstance(exc, iostream.StreamClosedError):\n        future.result()\n    if self._write_callback is not None:\n        callback = self._write_callback\n        self._write_callback = None\n        self.stream.io_loop.add_callback(callback)\n    if self._write_future is not None:\n        future = self._write_future\n        self._write_future = None\n        future_set_result_unless_cancelled(future, None)",
                "def _can_keep_alive(\n    self, start_line: httputil.RequestStartLine, headers: httputil.HTTPHeaders\n) -> bool:\n    if self.params.no_keep_alive:\n        return False\n    connection_header = headers.get(\"Connection\")\n    if connection_header is not None:\n        connection_header = connection_header.lower()\n    if start_line.version == \"HTTP/1.1\":\n        return connection_header != \"close\"\n    elif (\n        \"Content-Length\" in headers\n        or headers.get(\"Transfer-Encoding\", \"\").lower() == \"chunked\"\n        or getattr(start_line, \"method\", None) in (\"HEAD\", \"GET\")\n    ):\n        # start_line may be a request or response start line; only\n        # the former has a method attribute.\n        return connection_header == \"keep-alive\"\n    return False",
                "def _finish_request(self, future: Optional[\"Future[None]\"]) -> None:\n    self._clear_callbacks()\n    if not self.is_client and self._disconnect_on_finish:\n        self.close()\n        return\n    # Turn Nagle's algorithm back on, leaving the stream in its\n    # default state for the next request.\n    self.stream.set_nodelay(False)\n    if not self._finish_future.done():\n        future_set_result_unless_cancelled(self._finish_future, None)",
                "def _parse_headers(self, data: bytes) -> Tuple[str, httputil.HTTPHeaders]:\n    # The lstrip removes newlines that some implementations sometimes\n    # insert between messages of a reused connection.  Per RFC 7230,\n    # we SHOULD ignore at least one empty line before the request.\n    # http://tools.ietf.org/html/rfc7230#section-3.5\n    data_str = native_str(data.decode(\"latin1\")).lstrip(\"\\r\\n\")\n    # RFC 7230 section allows for both CRLF and bare LF.\n    eol = data_str.find(\"\\n\")\n    start_line = data_str[:eol].rstrip(\"\\r\")\n    headers = httputil.HTTPHeaders.parse(data_str[eol:])\n    return start_line, headers",
                "def _read_body(\n    self,\n    code: int,\n    headers: httputil.HTTPHeaders,\n    delegate: httputil.HTTPMessageDelegate,\n) -> Optional[Awaitable[None]]:\n    if \"Content-Length\" in headers:\n        if \"Transfer-Encoding\" in headers:\n            # Response cannot contain both Content-Length and\n            # Transfer-Encoding headers.\n            # http://tools.ietf.org/html/rfc7230#section-3.3.3\n            raise httputil.HTTPInputError(\n                \"Response with both Transfer-Encoding and Content-Length\"\n            )\n        if \",\" in headers[\"Content-Length\"]:\n            # Proxies sometimes cause Content-Length headers to get\n            # duplicated.  If all the values are identical then we can\n            # use them but if they differ it's an error.\n            pieces = re.split(r\",\\s*\", headers[\"Content-Length\"])\n            if any(i != pieces[0] for i in pieces):\n                raise httputil.HTTPInputError(\n                    \"Multiple unequal Content-Lengths: %r\"\n                    % headers[\"Content-Length\"]\n                )\n            headers[\"Content-Length\"] = pieces[0]\n\n        try:\n            content_length = int(headers[\"Content-Length\"])  # type: Optional[int]\n        except ValueError:\n            # Handles non-integer Content-Length value.\n            raise httputil.HTTPInputError(\n                \"Only integer Content-Length is allowed: %s\"\n                % headers[\"Content-Length\"]\n            )\n\n        if cast(int, content_length) > self._max_body_size:\n            raise httputil.HTTPInputError(\"Content-Length too long\")\n    else:\n        content_length = None\n\n    if code == 204:\n        # This response code is not allowed to have a non-empty body,\n        # and has an implicit length of zero instead of read-until-close.\n        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3\n        if \"Transfer-Encoding\" in headers or content_length not in (None, 0):\n            raise httputil.HTTPInputError(\n                \"Response with code %d should not have body\" % code\n            )\n        content_length = 0\n\n    if content_length is not None:\n        return self._read_fixed_body(content_length, delegate)\n    if headers.get(\"Transfer-Encoding\", \"\").lower() == \"chunked\":\n        return self._read_chunked_body(delegate)\n    if self.is_client:\n        return self._read_body_until_close(delegate)\n    return None",
                "async def _read_fixed_body(\n    self, content_length: int, delegate: httputil.HTTPMessageDelegate\n) -> None:\n    while content_length > 0:\n        body = await self.stream.read_bytes(\n            min(self.params.chunk_size, content_length), partial=True\n        )\n        content_length -= len(body)\n        if not self._write_finished or self.is_client:\n            with _ExceptionLoggingContext(app_log):\n                ret = delegate.data_received(body)\n                if ret is not None:\n                    await ret",
                "async def _read_chunked_body(self, delegate: httputil.HTTPMessageDelegate) -> None:\n    # TODO: \"chunk extensions\" http://tools.ietf.org/html/rfc2616#section-3.6.1\n    total_size = 0\n    while True:\n        chunk_len_str = await self.stream.read_until(b\"\\r\\n\", max_bytes=64)\n        chunk_len = int(chunk_len_str.strip(), 16)\n        if chunk_len == 0:\n            crlf = await self.stream.read_bytes(2)\n            if crlf != b\"\\r\\n\":\n                raise httputil.HTTPInputError(\n                    \"improperly terminated chunked request\"\n                )\n            return\n        total_size += chunk_len\n        if total_size > self._max_body_size:\n            raise httputil.HTTPInputError(\"chunked body too large\")\n        bytes_to_read = chunk_len\n        while bytes_to_read:\n            chunk = await self.stream.read_bytes(\n                min(bytes_to_read, self.params.chunk_size), partial=True\n            )\n            bytes_to_read -= len(chunk)\n            if not self._write_finished or self.is_client:\n                with _ExceptionLoggingContext(app_log):\n                    ret = delegate.data_received(chunk)\n                    if ret is not None:\n                        await ret\n        # chunk ends with \\r\\n\n        crlf = await self.stream.read_bytes(2)\n        assert crlf == b\"\\r\\n\"",
                "async def _read_body_until_close(\n    self, delegate: httputil.HTTPMessageDelegate\n) -> None:\n    body = await self.stream.read_until_close()\n    if not self._write_finished or self.is_client:\n        with _ExceptionLoggingContext(app_log):\n            ret = delegate.data_received(body)\n            if ret is not None:\n                await ret",
                "def __init__(self, delegate: httputil.HTTPMessageDelegate, chunk_size: int) -> None:\n    self._delegate = delegate\n    self._chunk_size = chunk_size\n    self._decompressor = None  # type: Optional[GzipDecompressor]",
                "def headers_received(\n    self,\n    start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n    headers: httputil.HTTPHeaders,\n) -> Optional[Awaitable[None]]:\n    if headers.get(\"Content-Encoding\") == \"gzip\":\n        self._decompressor = GzipDecompressor()\n        # Downstream delegates will only see uncompressed data,\n        # so rename the content-encoding header.\n        # (but note that curl_httpclient doesn't do this).\n        headers.add(\"X-Consumed-Content-Encoding\", headers[\"Content-Encoding\"])\n        del headers[\"Content-Encoding\"]\n    return self._delegate.headers_received(start_line, headers)",
                "async def data_received(self, chunk: bytes) -> None:\n    if self._decompressor:\n        compressed_data = chunk\n        while compressed_data:\n            decompressed = self._decompressor.decompress(\n                compressed_data, self._chunk_size\n            )\n            if decompressed:\n                ret = self._delegate.data_received(decompressed)\n                if ret is not None:\n                    await ret\n            compressed_data = self._decompressor.unconsumed_tail\n    else:\n        ret = self._delegate.data_received(chunk)\n        if ret is not None:\n            await ret",
                "def finish(self) -> None:\n    if self._decompressor is not None:\n        tail = self._decompressor.flush()\n        if tail:\n            # The tail should always be empty: decompress returned\n            # all that it can in data_received and the only\n            # purpose of the flush call is to detect errors such\n            # as truncated input. If we did legitimately get a new\n            # chunk at this point we'd need to change the\n            # interface to make finish() a coroutine.\n            raise ValueError(\n                \"decompressor.flush returned data; possile truncated input\"\n            )\n    return self._delegate.finish()",
                "def on_connection_close(self) -> None:\n    return self._delegate.on_connection_close()",
                "def __init__(\n    self,\n    stream: iostream.IOStream,\n    params: HTTP1ConnectionParameters = None,\n    context: object = None,\n) -> None:\n    \"\"\"\n    :arg stream: an `.IOStream`\n    :arg params: a `.HTTP1ConnectionParameters` or None\n    :arg context: an opaque application-defined object that is accessible\n        as ``connection.context``\n    \"\"\"\n    self.stream = stream\n    if params is None:\n        params = HTTP1ConnectionParameters()\n    self.params = params\n    self.context = context\n    self._serving_future = None  # type: Optional[Future[None]]",
                "async def close(self) -> None:\n    \"\"\"Closes the connection.\n\n    Returns a `.Future` that resolves after the serving loop has exited.\n    \"\"\"\n    self.stream.close()\n    # Block until the serving loop is done, but ignore any exceptions\n    # (start_serving is already responsible for logging them).\n    assert self._serving_future is not None\n    try:\n        await self._serving_future\n    except Exception:\n        pass",
                "def start_serving(self, delegate: httputil.HTTPServerConnectionDelegate) -> None:\n    \"\"\"Starts serving requests on this connection.\n\n    :arg delegate: a `.HTTPServerConnectionDelegate`\n    \"\"\"\n    assert isinstance(delegate, httputil.HTTPServerConnectionDelegate)\n    fut = gen.convert_yielded(self._server_request_loop(delegate))\n    self._serving_future = fut\n    # Register the future on the IOLoop so its errors get logged.\n    self.stream.io_loop.add_future(fut, lambda f: f.result())",
                "async def _server_request_loop(\n    self, delegate: httputil.HTTPServerConnectionDelegate\n) -> None:\n    try:\n        while True:\n            conn = HTTP1Connection(self.stream, False, self.params, self.context)\n            request_delegate = delegate.start_request(self, conn)\n            try:\n                ret = await conn.read_response(request_delegate)\n            except (\n                iostream.StreamClosedError,\n                iostream.UnsatisfiableReadError,\n                asyncio.CancelledError,\n            ):\n                return\n            except _QuietException:\n                # This exception was already logged.\n                conn.close()\n                return\n            except Exception:\n                gen_log.error(\"Uncaught exception\", exc_info=True)\n                conn.close()\n                return\n            if not ret:\n                return\n            await asyncio.sleep(0)\n    finally:\n        delegate.on_close(self)"
            ],
            "inscope_function_signatures": [
                "__init__(self) -> None",
                "__init__(self, logger: logging.Logger) -> None",
                "__enter__(self) -> None",
                "__exit__(self, typ: Optional[Type[BaseException]], value: Optional[BaseException], tb: types.TracebackType) -> None",
                "__init__(self, no_keep_alive: bool=False, chunk_size: int=None, max_header_size: int=None, header_timeout: float=None, max_body_size: int=None, body_timeout: float=None, decompress: bool=False) -> None",
                "__init__(self, stream: iostream.IOStream, is_client: bool, params: HTTP1ConnectionParameters=None, context: object=None) -> None",
                "read_response(self, delegate: httputil.HTTPMessageDelegate) -> Awaitable[bool]",
                "_read_message(self, delegate: httputil.HTTPMessageDelegate) -> bool",
                "_clear_callbacks(self) -> None",
                "set_close_callback(self, callback: Optional[Callable[[], None]]) -> None",
                "_on_connection_close(self) -> None",
                "close(self) -> None",
                "detach(self) -> iostream.IOStream",
                "set_body_timeout(self, timeout: float) -> None",
                "set_max_body_size(self, max_body_size: int) -> None",
                "write_headers(self, start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine], headers: httputil.HTTPHeaders, chunk: bytes=None) -> 'Future[None]'",
                "_format_chunk(self, chunk: bytes) -> bytes",
                "write(self, chunk: bytes) -> 'Future[None]'",
                "finish(self) -> None",
                "_on_write_complete(self, future: 'Future[None]') -> None",
                "_can_keep_alive(self, start_line: httputil.RequestStartLine, headers: httputil.HTTPHeaders) -> bool",
                "_finish_request(self, future: Optional['Future[None]']) -> None",
                "_parse_headers(self, data: bytes) -> Tuple[str, httputil.HTTPHeaders]",
                "_read_body(self, code: int, headers: httputil.HTTPHeaders, delegate: httputil.HTTPMessageDelegate) -> Optional[Awaitable[None]]",
                "_read_fixed_body(self, content_length: int, delegate: httputil.HTTPMessageDelegate) -> None",
                "_read_chunked_body(self, delegate: httputil.HTTPMessageDelegate) -> None",
                "_read_body_until_close(self, delegate: httputil.HTTPMessageDelegate) -> None",
                "__init__(self, delegate: httputil.HTTPMessageDelegate, chunk_size: int) -> None",
                "headers_received(self, start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine], headers: httputil.HTTPHeaders) -> Optional[Awaitable[None]]",
                "data_received(self, chunk: bytes) -> None",
                "finish(self) -> None",
                "on_connection_close(self) -> None",
                "__init__(self, stream: iostream.IOStream, params: HTTP1ConnectionParameters=None, context: object=None) -> None",
                "close(self) -> None",
                "start_serving(self, delegate: httputil.HTTPServerConnectionDelegate) -> None",
                "_server_request_loop(self, delegate: httputil.HTTPServerConnectionDelegate) -> None"
            ],
            "variables_in_file": {
                "Exception": [
                    792,
                    825,
                    42
                ],
                "object": [
                    71,
                    47,
                    117,
                    759,
                    766
                ],
                "logging.Logger": [
                    53
                ],
                "logging": [
                    53
                ],
                "self.logger": [
                    67,
                    54
                ],
                "self": [
                    512,
                    513,
                    514,
                    520,
                    521,
                    524,
                    525,
                    526,
                    528,
                    534,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    546,
                    564,
                    565,
                    54,
                    566,
                    570,
                    571,
                    572,
                    67,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    621,
                    637,
                    126,
                    127,
                    639,
                    640,
                    130,
                    131,
                    132,
                    641,
                    135,
                    136,
                    648,
                    649,
                    140,
                    652,
                    142,
                    145,
                    149,
                    150,
                    662,
                    665,
                    154,
                    155,
                    156,
                    158,
                    672,
                    161,
                    163,
                    676,
                    677,
                    680,
                    686,
                    176,
                    177,
                    178,
                    692,
                    693,
                    183,
                    184,
                    186,
                    191,
                    705,
                    706,
                    707,
                    196,
                    198,
                    199,
                    201,
                    715,
                    206,
                    209,
                    210,
                    721,
                    212,
                    724,
                    727,
                    728,
                    731,
                    220,
                    734,
                    736,
                    225,
                    228,
                    229,
                    741,
                    742,
                    753,
                    756,
                    247,
                    249,
                    250,
                    252,
                    253,
                    256,
                    261,
                    774,
                    777,
                    266,
                    267,
                    778,
                    269,
                    270,
                    779,
                    786,
                    789,
                    278,
                    279,
                    280,
                    791,
                    282,
                    283,
                    284,
                    285,
                    286,
                    289,
                    290,
                    291,
                    292,
                    801,
                    802,
                    804,
                    299,
                    811,
                    812,
                    308,
                    309,
                    310,
                    311,
                    312,
                    833,
                    326,
                    332,
                    333,
                    334,
                    336,
                    337,
                    338,
                    341,
                    342,
                    343,
                    344,
                    345,
                    355,
                    356,
                    357,
                    358,
                    359,
                    367,
                    374,
                    384,
                    386,
                    390,
                    397,
                    398,
                    399,
                    401,
                    405,
                    419,
                    420,
                    425,
                    426,
                    429,
                    431,
                    432,
                    435,
                    437,
                    439,
                    451,
                    452,
                    456,
                    459,
                    460,
                    461,
                    465,
                    466,
                    467,
                    469,
                    473,
                    488,
                    489,
                    490,
                    491,
                    493,
                    494,
                    495,
                    501,
                    502,
                    503,
                    505,
                    508,
                    510,
                    511
                ],
                "logger": [
                    54
                ],
                "Optional": [
                    713,
                    591,
                    563,
                    314,
                    61,
                    62
                ],
                "Type": [
                    61
                ],
                "BaseException": [
                    61,
                    62
                ],
                "types.TracebackType": [
                    63
                ],
                "types": [
                    63
                ],
                "value": [
                    65,
                    67
                ],
                "typ": [
                    66,
                    67
                ],
                "self.logger.error": [
                    67
                ],
                "tb": [
                    67
                ],
                "_QuietException": [
                    68,
                    821
                ],
                "bool": [
                    545,
                    165,
                    77,
                    115,
                    83,
                    180
                ],
                "int": [
                    704,
                    613,
                    645,
                    588,
                    621,
                    78,
                    79,
                    81,
                    369,
                    437,
                    663
                ],
                "float": [
                    80,
                    82,
                    362
                ],
                "self.no_keep_alive": [
                    96,
                    132
                ],
                "no_keep_alive": [
                    96
                ],
                "self.chunk_size": [
                    97
                ],
                "chunk_size": [
                    97,
                    706
                ],
                "self.max_header_size": [
                    98
                ],
                "max_header_size": [
                    98
                ],
                "self.header_timeout": [
                    99
                ],
                "header_timeout": [
                    99
                ],
                "self.max_body_size": [
                    100
                ],
                "max_body_size": [
                    100,
                    374
                ],
                "self.body_timeout": [
                    101
                ],
                "body_timeout": [
                    101
                ],
                "self.decompress": [
                    102
                ],
                "decompress": [
                    102
                ],
                "httputil.HTTPConnection": [
                    105
                ],
                "httputil": [
                    385,
                    645,
                    396,
                    658,
                    667,
                    795,
                    288,
                    544,
                    673,
                    800,
                    165,
                    807,
                    433,
                    690,
                    180,
                    700,
                    574,
                    704,
                    583,
                    200,
                    711,
                    712,
                    589,
                    590,
                    208,
                    597,
                    470,
                    606,
                    226,
                    616,
                    105,
                    378,
                    622,
                    242,
                    631,
                    506,
                    379
                ],
                "iostream.IOStream": [
                    114,
                    347,
                    764
                ],
                "iostream": [
                    193,
                    453,
                    263,
                    490,
                    816,
                    817,
                    114,
                    532,
                    347,
                    764
                ],
                "HTTP1ConnectionParameters": [
                    776,
                    129,
                    116,
                    765
                ],
                "self.is_client": [
                    384,
                    225,
                    290,
                    640,
                    199,
                    680,
                    652,
                    270,
                    431,
                    565,
                    693,
                    284,
                    253,
                    126
                ],
                "is_client": [
                    126
                ],
                "self.stream": [
                    512,
                    261,
                    774,
                    135,
                    648,
                    267,
                    511,
                    524,
                    786,
                    662,
                    279,
                    280,
                    537,
                    282,
                    665,
                    286,
                    291,
                    676,
                    804,
                    811,
                    686,
                    692,
                    183,
                    312,
                    311,
                    570,
                    191,
                    451,
                    460,
                    341,
                    342,
                    469,
                    220,
                    356,
                    357,
                    488,
                    494,
                    503,
                    505,
                    250,
                    127
                ],
                "stream": [
                    360,
                    356,
                    774,
                    127
                ],
                "params": [
                    128,
                    129,
                    130,
                    132,
                    775,
                    776,
                    777
                ],
                "self.params": [
                    130,
                    546,
                    677,
                    135,
                    136,
                    649,
                    777,
                    811,
                    176,
                    177,
                    184,
                    186,
                    191
                ],
                "self.context": [
                    289,
                    131,
                    778,
                    266,
                    811
                ],
                "context": [
                    778,
                    131
                ],
                "params.no_keep_alive": [
                    132
                ],
                "self._max_body_size": [
                    672,
                    621,
                    374,
                    135
                ],
                "self.params.max_body_size": [
                    135
                ],
                "self.stream.max_buffer_size": [
                    135
                ],
                "self._body_timeout": [
                    136,
                    256,
                    261,
                    367
                ],
                "self.params.body_timeout": [
                    136
                ],
                "self._write_finished": [
                    514,
                    680,
                    140,
                    652,
                    270,
                    693,
                    249
                ],
                "self._read_finished": [
                    520,
                    269,
                    142
                ],
                "self._finish_future": [
                    358,
                    359,
                    336,
                    145,
                    337,
                    278,
                    344,
                    345,
                    283,
                    572,
                    571
                ],
                "Future": [
                    452,
                    456,
                    489,
                    493,
                    145
                ],
                "self._disconnect_on_finish": [
                    420,
                    521,
                    206,
                    212,
                    149,
                    565,
                    284
                ],
                "self._clear_callbacks": [
                    355,
                    299,
                    338,
                    564,
                    150,
                    343
                ],
                "self._request_start_line": [
                    386,
                    419,
                    228,
                    229,
                    425,
                    397,
                    432,
                    209,
                    405,
                    154
                ],
                "self._response_start_line": [
                    201,
                    155,
                    399
                ],
                "self._request_headers": [
                    426,
                    210,
                    156,
                    398
                ],
                "self._chunking_output": [
                    390,
                    510,
                    429,
                    401,
                    473,
                    158
                ],
                "self._expected_content_remaining": [
                    161,
                    465,
                    466,
                    435,
                    467,
                    437,
                    501,
                    439,
                    502,
                    508
                ],
                "self._pending_write": [
                    512,
                    513,
                    163,
                    460,
                    461,
                    494,
                    495,
                    525,
                    528
                ],
                "httputil.HTTPMessageDelegate": [
                    704,
                    165,
                    645,
                    590,
                    658,
                    690,
                    180,
                    700
                ],
                "self.params.decompress": [
                    176
                ],
                "delegate": [
                    800,
                    641,
                    705,
                    801,
                    833,
                    637,
                    297,
                    682,
                    695,
                    812,
                    654,
                    177,
                    178,
                    273,
                    247,
                    217,
                    253,
                    639
                ],
                "_GzipMessageDelegate": [
                    177
                ],
                "self.params.chunk_size": [
                    177,
                    649,
                    677
                ],
                "self._read_message": [
                    178,
                    247
                ],
                "Awaitable": [
                    713,
                    165,
                    591
                ],
                "need_delegate_close": [
                    295,
                    271,
                    181,
                    215,
                    222
                ],
                "header_future": [
                    192,
                    298,
                    187,
                    183
                ],
                "self.stream.read_until_regex": [
                    183
                ],
                "self.params.max_header_size": [
                    184
                ],
                "self.params.header_timeout": [
                    186,
                    191
                ],
                "header_data": [
                    187,
                    198,
                    190
                ],
                "gen.with_timeout": [
                    260,
                    190
                ],
                "gen": [
                    801,
                    195,
                    260,
                    265,
                    190
                ],
                "self.stream.io_loop.time": [
                    261,
                    191
                ],
                "self.stream.io_loop": [
                    537,
                    804,
                    261,
                    191
                ],
                "iostream.StreamClosedError": [
                    193,
                    453,
                    263,
                    490,
                    816,
                    532
                ],
                "gen.TimeoutError": [
                    265,
                    195
                ],
                "self.close": [
                    566,
                    196,
                    285,
                    292
                ],
                "start_line_str": [
                    200,
                    198,
                    208
                ],
                "headers": [
                    392,
                    393,
                    412,
                    415,
                    548,
                    422,
                    554,
                    555,
                    428,
                    430,
                    436,
                    437,
                    444,
                    198,
                    583,
                    584,
                    714,
                    719,
                    592,
                    593,
                    210,
                    720,
                    721,
                    213,
                    600,
                    217,
                    604,
                    608,
                    610,
                    613,
                    618,
                    241,
                    630,
                    249,
                    253,
                    638
                ],
                "self._parse_headers": [
                    198
                ],
                "resp_start_line": [
                    200,
                    201,
                    203,
                    253
                ],
                "httputil.parse_response_start_line": [
                    200
                ],
                "start_line": [
                    385,
                    386,
                    387,
                    391,
                    396,
                    399,
                    400,
                    409,
                    410,
                    551,
                    556,
                    433,
                    582,
                    584,
                    202,
                    721,
                    211,
                    217,
                    226,
                    232
                ],
                "req_start_line": [
                    208,
                    209,
                    211,
                    213
                ],
                "httputil.parse_request_start_line": [
                    208
                ],
                "self._can_keep_alive": [
                    212
                ],
                "_ExceptionLoggingContext": [
                    296,
                    681,
                    653,
                    272,
                    694,
                    216
                ],
                "app_log": [
                    296,
                    681,
                    653,
                    272,
                    694,
                    216
                ],
                "header_recv_future": [
                    217,
                    218,
                    219
                ],
                "delegate.headers_received": [
                    217
                ],
                "skip_body": [
                    224,
                    251,
                    237,
                    231
                ],
                "isinstance": [
                    800,
                    385,
                    226,
                    396,
                    532
                ],
                "httputil.ResponseStartLine": [
                    226,
                    711,
                    396,
                    433,
                    378
                ],
                "self._request_start_line.method": [
                    432,
                    229
                ],
                "code": [
                    232,
                    233,
                    238,
                    433,
                    626,
                    243,
                    632
                ],
                "start_line.code": [
                    232,
                    409,
                    410
                ],
                "httputil.HTTPInputError": [
                    288,
                    673,
                    616,
                    622,
                    242,
                    597,
                    631,
                    667,
                    606
                ],
                "headers.get": [
                    548,
                    714,
                    555,
                    249,
                    638
                ],
                "self.stream.write": [
                    512,
                    291,
                    460,
                    494,
                    250
                ],
                "body_future": [
                    257,
                    252,
                    262,
                    255
                ],
                "self._read_body": [
                    252
                ],
                "resp_start_line.code": [
                    253
                ],
                "gen_log.info": [
                    289,
                    266
                ],
                "gen_log": [
                    289,
                    266,
                    826
                ],
                "self.stream.close": [
                    267,
                    786,
                    469,
                    342,
                    505
                ],
                "delegate.finish": [
                    273
                ],
                "self._finish_future.done": [
                    358,
                    336,
                    278,
                    344,
                    571
                ],
                "self.stream.closed": [
                    451,
                    488,
                    503,
                    280,
                    511
                ],
                "self.stream.set_close_callback": [
                    312,
                    282
                ],
                "self._on_connection_close": [
                    282
                ],
                "e": [
                    289
                ],
                "delegate.on_connection_close": [
                    297
                ],
                "self._write_callback": [
                    536,
                    308,
                    534,
                    535
                ],
                "self._write_future": [
                    452,
                    456,
                    489,
                    490,
                    491,
                    493,
                    309,
                    538,
                    539,
                    540
                ],
                "self._close_callback": [
                    326,
                    332,
                    333,
                    334,
                    310
                ],
                "Callable": [
                    314
                ],
                "callback": [
                    326,
                    333,
                    335,
                    535,
                    537
                ],
                "future_set_result_unless_cancelled": [
                    359,
                    337,
                    345,
                    572,
                    541
                ],
                "timeout": [
                    367
                ],
                "Union": [
                    378,
                    711
                ],
                "httputil.RequestStartLine": [
                    544,
                    385,
                    378,
                    711
                ],
                "httputil.HTTPHeaders": [
                    544,
                    583,
                    712,
                    589,
                    379,
                    574
                ],
                "bytes": [
                    480,
                    464,
                    723,
                    380,
                    574
                ],
                "lines": [
                    387,
                    383,
                    457,
                    400,
                    446,
                    447
                ],
                "lines.append": [
                    400,
                    387
                ],
                "utf8": [
                    400,
                    387,
                    476
                ],
                "start_line.method": [
                    391
                ],
                "self._request_start_line.version": [
                    425,
                    419,
                    405
                ],
                "lower": [
                    426,
                    555,
                    638
                ],
                "self._request_headers.get": [
                    426
                ],
                "cast": [
                    433,
                    621
                ],
                "header_lines": [
                    443,
                    446
                ],
                "native_str": [
                    579,
                    444
                ],
                "n": [
                    444
                ],
                "v": [
                    444
                ],
                "headers.get_all": [
                    444
                ],
                "lines.extend": [
                    446
                ],
                "l.encode": [
                    446
                ],
                "l": [
                    446
                ],
                "line": [
                    448,
                    449,
                    447
                ],
                "ValueError": [
                    449,
                    614,
                    750
                ],
                "repr": [
                    449
                ],
                "future": [
                    450,
                    452,
                    453,
                    454,
                    487,
                    456,
                    489,
                    493,
                    462,
                    496,
                    531,
                    533,
                    539,
                    541
                ],
                "future.set_exception": [
                    453
                ],
                "future.exception": [
                    531,
                    454
                ],
                "data": [
                    457,
                    579,
                    459,
                    460
                ],
                "join": [
                    457
                ],
                "chunk": [
                    736,
                    676,
                    679,
                    458,
                    459,
                    682,
                    494,
                    466,
                    725,
                    473,
                    476,
                    478
                ],
                "self._format_chunk": [
                    459,
                    494
                ],
                "future_add_done_callback": [
                    528,
                    461,
                    495
                ],
                "self._on_write_complete": [
                    513,
                    461,
                    495
                ],
                "len": [
                    466,
                    651,
                    476,
                    679
                ],
                "httputil.HTTPOutputError": [
                    506,
                    470
                ],
                "self._write_future.set_exception": [
                    490
                ],
                "self._write_future.exception": [
                    491
                ],
                "self._pending_write.add_done_callback": [
                    513
                ],
                "self.stream.set_nodelay": [
                    570,
                    524
                ],
                "self._finish_request": [
                    528,
                    526
                ],
                "exc": [
                    531,
                    532
                ],
                "future.result": [
                    533
                ],
                "self.stream.io_loop.add_callback": [
                    537
                ],
                "self.params.no_keep_alive": [
                    546
                ],
                "connection_header": [
                    548,
                    549,
                    550,
                    552,
                    560
                ],
                "connection_header.lower": [
                    550
                ],
                "start_line.version": [
                    551
                ],
                "getattr": [
                    556
                ],
                "data_str": [
                    579,
                    581,
                    582,
                    583
                ],
                "lstrip": [
                    579
                ],
                "data.decode": [
                    579
                ],
                "eol": [
                    581,
                    582,
                    583
                ],
                "data_str.find": [
                    581
                ],
                "rstrip": [
                    582
                ],
                "httputil.HTTPHeaders.parse": [
                    583
                ],
                "Tuple": [
                    574
                ],
                "str": [
                    574
                ],
                "pieces": [
                    610,
                    604,
                    605
                ],
                "re.split": [
                    604
                ],
                "re": [
                    604
                ],
                "any": [
                    605
                ],
                "i": [
                    605
                ],
                "content_length": [
                    613,
                    647,
                    649,
                    651,
                    621,
                    624,
                    630,
                    634,
                    636,
                    637
                ],
                "self._read_fixed_body": [
                    637
                ],
                "self._read_chunked_body": [
                    639
                ],
                "self._read_body_until_close": [
                    641
                ],
                "body": [
                    648,
                    651,
                    654,
                    692,
                    695
                ],
                "self.stream.read_bytes": [
                    648,
                    665,
                    676,
                    686
                ],
                "min": [
                    649,
                    677
                ],
                "ret": [
                    736,
                    737,
                    738,
                    682,
                    683,
                    684,
                    829,
                    654,
                    655,
                    656,
                    814,
                    695,
                    696,
                    697,
                    731,
                    732,
                    733
                ],
                "delegate.data_received": [
                    682,
                    654,
                    695
                ],
                "total_size": [
                    672,
                    660,
                    671
                ],
                "chunk_len_str": [
                    662,
                    663
                ],
                "self.stream.read_until": [
                    662
                ],
                "chunk_len": [
                    664,
                    671,
                    674,
                    663
                ],
                "chunk_len_str.strip": [
                    663
                ],
                "crlf": [
                    665,
                    666,
                    686,
                    687
                ],
                "bytes_to_read": [
                    674,
                    675,
                    677,
                    679
                ],
                "self.stream.read_until_close": [
                    692
                ],
                "self._delegate": [
                    736,
                    705,
                    721,
                    753,
                    756,
                    731
                ],
                "self._chunk_size": [
                    728,
                    706
                ],
                "self._decompressor": [
                    707,
                    741,
                    742,
                    715,
                    724,
                    727,
                    734
                ],
                "GzipDecompressor": [
                    715
                ],
                "headers.add": [
                    719
                ],
                "self._delegate.headers_received": [
                    721
                ],
                "compressed_data": [
                    728,
                    734,
                    725,
                    726
                ],
                "decompressed": [
                    730,
                    731,
                    727
                ],
                "self._decompressor.decompress": [
                    727
                ],
                "self._delegate.data_received": [
                    736,
                    731
                ],
                "self._decompressor.unconsumed_tail": [
                    734
                ],
                "tail": [
                    742,
                    743
                ],
                "self._decompressor.flush": [
                    742
                ],
                "self._delegate.finish": [
                    753
                ],
                "self._delegate.on_connection_close": [
                    756
                ],
                "self._serving_future": [
                    802,
                    779,
                    789,
                    791
                ],
                "httputil.HTTPServerConnectionDelegate": [
                    800,
                    795,
                    807
                ],
                "fut": [
                    801,
                    802,
                    804
                ],
                "gen.convert_yielded": [
                    801
                ],
                "self._server_request_loop": [
                    801
                ],
                "self.stream.io_loop.add_future": [
                    804
                ],
                "f.result": [
                    804
                ],
                "f": [
                    804
                ],
                "conn": [
                    811,
                    812,
                    814,
                    823,
                    827
                ],
                "HTTP1Connection": [
                    811
                ],
                "request_delegate": [
                    812,
                    814
                ],
                "delegate.start_request": [
                    812
                ],
                "conn.read_response": [
                    814
                ],
                "iostream.UnsatisfiableReadError": [
                    817
                ],
                "asyncio.CancelledError": [
                    818
                ],
                "asyncio": [
                    818,
                    831
                ],
                "conn.close": [
                    827,
                    823
                ],
                "gen_log.error": [
                    826
                ],
                "asyncio.sleep": [
                    831
                ],
                "delegate.on_close": [
                    833
                ]
            },
            "filtered_variables_in_file": {
                "logging.Logger": [
                    53
                ],
                "logging": [
                    53
                ],
                "self.logger": [
                    67,
                    54
                ],
                "self": [
                    512,
                    513,
                    514,
                    520,
                    521,
                    524,
                    525,
                    526,
                    528,
                    534,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    546,
                    564,
                    565,
                    54,
                    566,
                    570,
                    571,
                    572,
                    67,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    621,
                    637,
                    126,
                    127,
                    639,
                    640,
                    130,
                    131,
                    132,
                    641,
                    135,
                    136,
                    648,
                    649,
                    140,
                    652,
                    142,
                    145,
                    149,
                    150,
                    662,
                    665,
                    154,
                    155,
                    156,
                    158,
                    672,
                    161,
                    163,
                    676,
                    677,
                    680,
                    686,
                    176,
                    177,
                    178,
                    692,
                    693,
                    183,
                    184,
                    186,
                    191,
                    705,
                    706,
                    707,
                    196,
                    198,
                    199,
                    201,
                    715,
                    206,
                    209,
                    210,
                    721,
                    212,
                    724,
                    727,
                    728,
                    731,
                    220,
                    734,
                    736,
                    225,
                    228,
                    229,
                    741,
                    742,
                    753,
                    756,
                    247,
                    249,
                    250,
                    252,
                    253,
                    256,
                    261,
                    774,
                    777,
                    266,
                    267,
                    778,
                    269,
                    270,
                    779,
                    786,
                    789,
                    278,
                    279,
                    280,
                    791,
                    282,
                    283,
                    284,
                    285,
                    286,
                    289,
                    290,
                    291,
                    292,
                    801,
                    802,
                    804,
                    299,
                    811,
                    812,
                    308,
                    309,
                    310,
                    311,
                    312,
                    833,
                    326,
                    332,
                    333,
                    334,
                    336,
                    337,
                    338,
                    341,
                    342,
                    343,
                    344,
                    345,
                    355,
                    356,
                    357,
                    358,
                    359,
                    367,
                    374,
                    384,
                    386,
                    390,
                    397,
                    398,
                    399,
                    401,
                    405,
                    419,
                    420,
                    425,
                    426,
                    429,
                    431,
                    432,
                    435,
                    437,
                    439,
                    451,
                    452,
                    456,
                    459,
                    460,
                    461,
                    465,
                    466,
                    467,
                    469,
                    473,
                    488,
                    489,
                    490,
                    491,
                    493,
                    494,
                    495,
                    501,
                    502,
                    503,
                    505,
                    508,
                    510,
                    511
                ],
                "logger": [
                    54
                ],
                "Optional": [
                    713,
                    591,
                    563,
                    314,
                    61,
                    62
                ],
                "Type": [
                    61
                ],
                "types.TracebackType": [
                    63
                ],
                "types": [
                    63
                ],
                "value": [
                    65,
                    67
                ],
                "typ": [
                    66,
                    67
                ],
                "self.logger.error": [
                    67
                ],
                "tb": [
                    67
                ],
                "_QuietException": [
                    68,
                    821
                ],
                "self.no_keep_alive": [
                    96,
                    132
                ],
                "no_keep_alive": [
                    96
                ],
                "self.chunk_size": [
                    97
                ],
                "chunk_size": [
                    97,
                    706
                ],
                "self.max_header_size": [
                    98
                ],
                "max_header_size": [
                    98
                ],
                "self.header_timeout": [
                    99
                ],
                "header_timeout": [
                    99
                ],
                "self.max_body_size": [
                    100
                ],
                "max_body_size": [
                    100,
                    374
                ],
                "self.body_timeout": [
                    101
                ],
                "body_timeout": [
                    101
                ],
                "self.decompress": [
                    102
                ],
                "decompress": [
                    102
                ],
                "httputil.HTTPConnection": [
                    105
                ],
                "httputil": [
                    385,
                    645,
                    396,
                    658,
                    667,
                    795,
                    288,
                    544,
                    673,
                    800,
                    165,
                    807,
                    433,
                    690,
                    180,
                    700,
                    574,
                    704,
                    583,
                    200,
                    711,
                    712,
                    589,
                    590,
                    208,
                    597,
                    470,
                    606,
                    226,
                    616,
                    105,
                    378,
                    622,
                    242,
                    631,
                    506,
                    379
                ],
                "iostream.IOStream": [
                    114,
                    347,
                    764
                ],
                "iostream": [
                    193,
                    453,
                    263,
                    490,
                    816,
                    817,
                    114,
                    532,
                    347,
                    764
                ],
                "HTTP1ConnectionParameters": [
                    776,
                    129,
                    116,
                    765
                ],
                "self.is_client": [
                    384,
                    225,
                    290,
                    640,
                    199,
                    680,
                    652,
                    270,
                    431,
                    565,
                    693,
                    284,
                    253,
                    126
                ],
                "is_client": [
                    126
                ],
                "self.stream": [
                    512,
                    261,
                    774,
                    135,
                    648,
                    267,
                    511,
                    524,
                    786,
                    662,
                    279,
                    280,
                    537,
                    282,
                    665,
                    286,
                    291,
                    676,
                    804,
                    811,
                    686,
                    692,
                    183,
                    312,
                    311,
                    570,
                    191,
                    451,
                    460,
                    341,
                    342,
                    469,
                    220,
                    356,
                    357,
                    488,
                    494,
                    503,
                    505,
                    250,
                    127
                ],
                "stream": [
                    360,
                    356,
                    774,
                    127
                ],
                "params": [
                    128,
                    129,
                    130,
                    132,
                    775,
                    776,
                    777
                ],
                "self.params": [
                    130,
                    546,
                    677,
                    135,
                    136,
                    649,
                    777,
                    811,
                    176,
                    177,
                    184,
                    186,
                    191
                ],
                "self.context": [
                    289,
                    131,
                    778,
                    266,
                    811
                ],
                "context": [
                    778,
                    131
                ],
                "params.no_keep_alive": [
                    132
                ],
                "self._max_body_size": [
                    672,
                    621,
                    374,
                    135
                ],
                "self.params.max_body_size": [
                    135
                ],
                "self.stream.max_buffer_size": [
                    135
                ],
                "self._body_timeout": [
                    136,
                    256,
                    261,
                    367
                ],
                "self.params.body_timeout": [
                    136
                ],
                "self._write_finished": [
                    514,
                    680,
                    140,
                    652,
                    270,
                    693,
                    249
                ],
                "self._read_finished": [
                    520,
                    269,
                    142
                ],
                "self._finish_future": [
                    358,
                    359,
                    336,
                    145,
                    337,
                    278,
                    344,
                    345,
                    283,
                    572,
                    571
                ],
                "Future": [
                    452,
                    456,
                    489,
                    493,
                    145
                ],
                "self._disconnect_on_finish": [
                    420,
                    521,
                    206,
                    212,
                    149,
                    565,
                    284
                ],
                "self._clear_callbacks": [
                    355,
                    299,
                    338,
                    564,
                    150,
                    343
                ],
                "self._request_start_line": [
                    386,
                    419,
                    228,
                    229,
                    425,
                    397,
                    432,
                    209,
                    405,
                    154
                ],
                "self._response_start_line": [
                    201,
                    155,
                    399
                ],
                "self._request_headers": [
                    426,
                    210,
                    156,
                    398
                ],
                "self._chunking_output": [
                    390,
                    510,
                    429,
                    401,
                    473,
                    158
                ],
                "self._expected_content_remaining": [
                    161,
                    465,
                    466,
                    435,
                    467,
                    437,
                    501,
                    439,
                    502,
                    508
                ],
                "self._pending_write": [
                    512,
                    513,
                    163,
                    460,
                    461,
                    494,
                    495,
                    525,
                    528
                ],
                "httputil.HTTPMessageDelegate": [
                    704,
                    165,
                    645,
                    590,
                    658,
                    690,
                    180,
                    700
                ],
                "self.params.decompress": [
                    176
                ],
                "delegate": [
                    800,
                    641,
                    705,
                    801,
                    833,
                    637,
                    297,
                    682,
                    695,
                    812,
                    654,
                    177,
                    178,
                    273,
                    247,
                    217,
                    253,
                    639
                ],
                "_GzipMessageDelegate": [
                    177
                ],
                "self.params.chunk_size": [
                    177,
                    649,
                    677
                ],
                "self._read_message": [
                    178,
                    247
                ],
                "Awaitable": [
                    713,
                    165,
                    591
                ],
                "need_delegate_close": [
                    295,
                    271,
                    181,
                    215,
                    222
                ],
                "header_future": [
                    192,
                    298,
                    187,
                    183
                ],
                "self.stream.read_until_regex": [
                    183
                ],
                "self.params.max_header_size": [
                    184
                ],
                "self.params.header_timeout": [
                    186,
                    191
                ],
                "header_data": [
                    187,
                    198,
                    190
                ],
                "gen.with_timeout": [
                    260,
                    190
                ],
                "gen": [
                    801,
                    195,
                    260,
                    265,
                    190
                ],
                "self.stream.io_loop.time": [
                    261,
                    191
                ],
                "self.stream.io_loop": [
                    537,
                    804,
                    261,
                    191
                ],
                "iostream.StreamClosedError": [
                    193,
                    453,
                    263,
                    490,
                    816,
                    532
                ],
                "gen.TimeoutError": [
                    265,
                    195
                ],
                "self.close": [
                    566,
                    196,
                    285,
                    292
                ],
                "start_line_str": [
                    200,
                    198,
                    208
                ],
                "headers": [
                    392,
                    393,
                    412,
                    415,
                    548,
                    422,
                    554,
                    555,
                    428,
                    430,
                    436,
                    437,
                    444,
                    198,
                    583,
                    584,
                    714,
                    719,
                    592,
                    593,
                    210,
                    720,
                    721,
                    213,
                    600,
                    217,
                    604,
                    608,
                    610,
                    613,
                    618,
                    241,
                    630,
                    249,
                    253,
                    638
                ],
                "self._parse_headers": [
                    198
                ],
                "resp_start_line": [
                    200,
                    201,
                    203,
                    253
                ],
                "httputil.parse_response_start_line": [
                    200
                ],
                "start_line": [
                    385,
                    386,
                    387,
                    391,
                    396,
                    399,
                    400,
                    409,
                    410,
                    551,
                    556,
                    433,
                    582,
                    584,
                    202,
                    721,
                    211,
                    217,
                    226,
                    232
                ],
                "req_start_line": [
                    208,
                    209,
                    211,
                    213
                ],
                "httputil.parse_request_start_line": [
                    208
                ],
                "self._can_keep_alive": [
                    212
                ],
                "_ExceptionLoggingContext": [
                    296,
                    681,
                    653,
                    272,
                    694,
                    216
                ],
                "app_log": [
                    296,
                    681,
                    653,
                    272,
                    694,
                    216
                ],
                "header_recv_future": [
                    217,
                    218,
                    219
                ],
                "delegate.headers_received": [
                    217
                ],
                "skip_body": [
                    224,
                    251,
                    237,
                    231
                ],
                "httputil.ResponseStartLine": [
                    226,
                    711,
                    396,
                    433,
                    378
                ],
                "self._request_start_line.method": [
                    432,
                    229
                ],
                "code": [
                    232,
                    233,
                    238,
                    433,
                    626,
                    243,
                    632
                ],
                "start_line.code": [
                    232,
                    409,
                    410
                ],
                "httputil.HTTPInputError": [
                    288,
                    673,
                    616,
                    622,
                    242,
                    597,
                    631,
                    667,
                    606
                ],
                "headers.get": [
                    548,
                    714,
                    555,
                    249,
                    638
                ],
                "self.stream.write": [
                    512,
                    291,
                    460,
                    494,
                    250
                ],
                "body_future": [
                    257,
                    252,
                    262,
                    255
                ],
                "self._read_body": [
                    252
                ],
                "resp_start_line.code": [
                    253
                ],
                "gen_log.info": [
                    289,
                    266
                ],
                "gen_log": [
                    289,
                    266,
                    826
                ],
                "self.stream.close": [
                    267,
                    786,
                    469,
                    342,
                    505
                ],
                "delegate.finish": [
                    273
                ],
                "self._finish_future.done": [
                    358,
                    336,
                    278,
                    344,
                    571
                ],
                "self.stream.closed": [
                    451,
                    488,
                    503,
                    280,
                    511
                ],
                "self.stream.set_close_callback": [
                    312,
                    282
                ],
                "self._on_connection_close": [
                    282
                ],
                "e": [
                    289
                ],
                "delegate.on_connection_close": [
                    297
                ],
                "self._write_callback": [
                    536,
                    308,
                    534,
                    535
                ],
                "self._write_future": [
                    452,
                    456,
                    489,
                    490,
                    491,
                    493,
                    309,
                    538,
                    539,
                    540
                ],
                "self._close_callback": [
                    326,
                    332,
                    333,
                    334,
                    310
                ],
                "Callable": [
                    314
                ],
                "callback": [
                    326,
                    333,
                    335,
                    535,
                    537
                ],
                "future_set_result_unless_cancelled": [
                    359,
                    337,
                    345,
                    572,
                    541
                ],
                "timeout": [
                    367
                ],
                "Union": [
                    378,
                    711
                ],
                "httputil.RequestStartLine": [
                    544,
                    385,
                    378,
                    711
                ],
                "httputil.HTTPHeaders": [
                    544,
                    583,
                    712,
                    589,
                    379,
                    574
                ],
                "lines": [
                    387,
                    383,
                    457,
                    400,
                    446,
                    447
                ],
                "lines.append": [
                    400,
                    387
                ],
                "utf8": [
                    400,
                    387,
                    476
                ],
                "start_line.method": [
                    391
                ],
                "self._request_start_line.version": [
                    425,
                    419,
                    405
                ],
                "lower": [
                    426,
                    555,
                    638
                ],
                "self._request_headers.get": [
                    426
                ],
                "cast": [
                    433,
                    621
                ],
                "header_lines": [
                    443,
                    446
                ],
                "native_str": [
                    579,
                    444
                ],
                "n": [
                    444
                ],
                "v": [
                    444
                ],
                "headers.get_all": [
                    444
                ],
                "lines.extend": [
                    446
                ],
                "l.encode": [
                    446
                ],
                "l": [
                    446
                ],
                "line": [
                    448,
                    449,
                    447
                ],
                "future": [
                    450,
                    452,
                    453,
                    454,
                    487,
                    456,
                    489,
                    493,
                    462,
                    496,
                    531,
                    533,
                    539,
                    541
                ],
                "future.set_exception": [
                    453
                ],
                "future.exception": [
                    531,
                    454
                ],
                "data": [
                    457,
                    579,
                    459,
                    460
                ],
                "join": [
                    457
                ],
                "chunk": [
                    736,
                    676,
                    679,
                    458,
                    459,
                    682,
                    494,
                    466,
                    725,
                    473,
                    476,
                    478
                ],
                "self._format_chunk": [
                    459,
                    494
                ],
                "future_add_done_callback": [
                    528,
                    461,
                    495
                ],
                "self._on_write_complete": [
                    513,
                    461,
                    495
                ],
                "httputil.HTTPOutputError": [
                    506,
                    470
                ],
                "self._write_future.set_exception": [
                    490
                ],
                "self._write_future.exception": [
                    491
                ],
                "self._pending_write.add_done_callback": [
                    513
                ],
                "self.stream.set_nodelay": [
                    570,
                    524
                ],
                "self._finish_request": [
                    528,
                    526
                ],
                "exc": [
                    531,
                    532
                ],
                "future.result": [
                    533
                ],
                "self.stream.io_loop.add_callback": [
                    537
                ],
                "self.params.no_keep_alive": [
                    546
                ],
                "connection_header": [
                    548,
                    549,
                    550,
                    552,
                    560
                ],
                "connection_header.lower": [
                    550
                ],
                "start_line.version": [
                    551
                ],
                "data_str": [
                    579,
                    581,
                    582,
                    583
                ],
                "lstrip": [
                    579
                ],
                "data.decode": [
                    579
                ],
                "eol": [
                    581,
                    582,
                    583
                ],
                "data_str.find": [
                    581
                ],
                "rstrip": [
                    582
                ],
                "httputil.HTTPHeaders.parse": [
                    583
                ],
                "Tuple": [
                    574
                ],
                "pieces": [
                    610,
                    604,
                    605
                ],
                "re.split": [
                    604
                ],
                "re": [
                    604
                ],
                "i": [
                    605
                ],
                "content_length": [
                    613,
                    647,
                    649,
                    651,
                    621,
                    624,
                    630,
                    634,
                    636,
                    637
                ],
                "self._read_fixed_body": [
                    637
                ],
                "self._read_chunked_body": [
                    639
                ],
                "self._read_body_until_close": [
                    641
                ],
                "body": [
                    648,
                    651,
                    654,
                    692,
                    695
                ],
                "self.stream.read_bytes": [
                    648,
                    665,
                    676,
                    686
                ],
                "ret": [
                    736,
                    737,
                    738,
                    682,
                    683,
                    684,
                    829,
                    654,
                    655,
                    656,
                    814,
                    695,
                    696,
                    697,
                    731,
                    732,
                    733
                ],
                "delegate.data_received": [
                    682,
                    654,
                    695
                ],
                "total_size": [
                    672,
                    660,
                    671
                ],
                "chunk_len_str": [
                    662,
                    663
                ],
                "self.stream.read_until": [
                    662
                ],
                "chunk_len": [
                    664,
                    671,
                    674,
                    663
                ],
                "chunk_len_str.strip": [
                    663
                ],
                "crlf": [
                    665,
                    666,
                    686,
                    687
                ],
                "bytes_to_read": [
                    674,
                    675,
                    677,
                    679
                ],
                "self.stream.read_until_close": [
                    692
                ],
                "self._delegate": [
                    736,
                    705,
                    721,
                    753,
                    756,
                    731
                ],
                "self._chunk_size": [
                    728,
                    706
                ],
                "self._decompressor": [
                    707,
                    741,
                    742,
                    715,
                    724,
                    727,
                    734
                ],
                "GzipDecompressor": [
                    715
                ],
                "headers.add": [
                    719
                ],
                "self._delegate.headers_received": [
                    721
                ],
                "compressed_data": [
                    728,
                    734,
                    725,
                    726
                ],
                "decompressed": [
                    730,
                    731,
                    727
                ],
                "self._decompressor.decompress": [
                    727
                ],
                "self._delegate.data_received": [
                    736,
                    731
                ],
                "self._decompressor.unconsumed_tail": [
                    734
                ],
                "tail": [
                    742,
                    743
                ],
                "self._decompressor.flush": [
                    742
                ],
                "self._delegate.finish": [
                    753
                ],
                "self._delegate.on_connection_close": [
                    756
                ],
                "self._serving_future": [
                    802,
                    779,
                    789,
                    791
                ],
                "httputil.HTTPServerConnectionDelegate": [
                    800,
                    795,
                    807
                ],
                "fut": [
                    801,
                    802,
                    804
                ],
                "gen.convert_yielded": [
                    801
                ],
                "self._server_request_loop": [
                    801
                ],
                "self.stream.io_loop.add_future": [
                    804
                ],
                "f.result": [
                    804
                ],
                "f": [
                    804
                ],
                "conn": [
                    811,
                    812,
                    814,
                    823,
                    827
                ],
                "HTTP1Connection": [
                    811
                ],
                "request_delegate": [
                    812,
                    814
                ],
                "delegate.start_request": [
                    812
                ],
                "conn.read_response": [
                    814
                ],
                "iostream.UnsatisfiableReadError": [
                    817
                ],
                "asyncio.CancelledError": [
                    818
                ],
                "asyncio": [
                    818,
                    831
                ],
                "conn.close": [
                    827,
                    823
                ],
                "gen_log.error": [
                    826
                ],
                "asyncio.sleep": [
                    831
                ],
                "delegate.on_close": [
                    833
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/tornado_2/tornado/test/httpclient_test.py",
                "test_function": "test_redirect_put_without_body",
                "test_function_code": "    def test_redirect_put_without_body(self):\n        # This \"without body\" edge case is similar to what happens with body_producer.\n        response = self.fetch(\n            \"/redirect?url=/put&status=307\",\n            method=\"PUT\",\n            allow_nonstandard_methods=True,\n        )\n        self.assertEqual(response.body, b\"Put body: \")",
                "test_error": "tornado.util.TimeoutError: Operation timed out after 5 seconds",
                "full_test_error": "self = <tornado.test.httpclient_test.HTTPClientCommonTestCase testMethod=test_redirect_put_without_body>\n\n    def test_redirect_put_without_body(self):\n        # This \"without body\" edge case is similar to what happens with body_producer.\n        response = self.fetch(\n            \"/redirect?url=/put&status=307\",\n            method=\"PUT\",\n>           allow_nonstandard_methods=True,\n        )\n\ntornado/test/httpclient_test.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntornado/testing.py:437: in fetch\n    timeout=get_async_test_timeout(),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tornado.platform.asyncio.AsyncIOLoop object at 0x10c268990>\nfunc = <function AsyncHTTPTestCase.fetch.<locals>.<lambda> at 0x10c24eb00>\ntimeout = 5\n\n    def run_sync(self, func: Callable, timeout: float = None) -> Any:\n        \"\"\"Starts the `IOLoop`, runs the given function, and stops the loop.\n    \n        The function must return either an awaitable object or\n        ``None``. If the function returns an awaitable object, the\n        `IOLoop` will run until the awaitable is resolved (and\n        `run_sync()` will return the awaitable's result). If it raises\n        an exception, the `IOLoop` will stop and the exception will be\n        re-raised to the caller.\n    \n        The keyword-only argument ``timeout`` may be used to set\n        a maximum duration for the function.  If the timeout expires,\n        a `tornado.util.TimeoutError` is raised.\n    \n        This method is useful to allow asynchronous calls in a\n        ``main()`` function::\n    \n            async def main():\n                # do stuff...\n    \n            if __name__ == '__main__':\n                IOLoop.current().run_sync(main)\n    \n        .. versionchanged:: 4.3\n           Returning a non-``None``, non-awaitable value is now an error.\n    \n        .. versionchanged:: 5.0\n           If a timeout occurs, the ``func`` coroutine will be cancelled.\n    \n        \"\"\"\n        future_cell = [None]  # type: List[Optional[Future]]\n    \n        def run() -> None:\n            try:\n                result = func()\n                if result is not None:\n                    from tornado.gen import convert_yielded\n    \n                    result = convert_yielded(result)\n            except Exception:\n                fut = Future()  # type: Future[Any]\n                future_cell[0] = fut\n                future_set_exc_info(fut, sys.exc_info())\n            else:\n                if is_future(result):\n                    future_cell[0] = result\n                else:\n                    fut = Future()\n                    future_cell[0] = fut\n                    fut.set_result(result)\n            assert future_cell[0] is not None\n            self.add_future(future_cell[0], lambda future: self.stop())\n    \n        self.add_callback(run)\n        if timeout is not None:\n    \n            def timeout_callback() -> None:\n                # If we can cancel the future, do so and wait on it. If not,\n                # Just stop the loop and return with the task still pending.\n                # (If we neither cancel nor wait for the task, a warning\n                # will be logged).\n                assert future_cell[0] is not None\n                if not future_cell[0].cancel():\n                    self.stop()\n    \n            timeout_handle = self.add_timeout(self.time() + timeout, timeout_callback)\n        self.start()\n        if timeout is not None:\n            self.remove_timeout(timeout_handle)\n        assert future_cell[0] is not None\n        if future_cell[0].cancelled() or not future_cell[0].done():\n>           raise TimeoutError(\"Operation timed out after %s seconds\" % timeout)\nE           tornado.util.TimeoutError: Operation timed out after 5 seconds\n\ntornado/ioloop.py:530: TimeoutError",
                "traceback": "tornado/testing.py:437: in fetch\n    timeout=get_async_test_timeout(),",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tornado.platform.asyncio.AsyncIOLoop object at 0x10c268990>\nfunc = <function AsyncHTTPTestCase.fetch.<locals>.<lambda> at 0x10c24eb00>\ntimeout = 5\n\n    def run_sync(self, func: Callable, timeout: float = None) -> Any:\n        \"\"\"Starts the `IOLoop`, runs the given function, and stops the loop.\n    \n        The function must return either an awaitable object or\n        ``None``. If the function returns an awaitable object, the\n        `IOLoop` will run until the awaitable is resolved (and\n        `run_sync()` will return the awaitable's result). If it raises\n        an exception, the `IOLoop` will stop and the exception will be\n        re-raised to the caller.\n    \n        The keyword-only argument ``timeout`` may be used to set\n        a maximum duration for the function.  If the timeout expires,\n        a `tornado.util.TimeoutError` is raised.\n    \n        This method is useful to allow asynchronous calls in a\n        ``main()`` function::\n    \n            async def main():\n                # do stuff...\n    \n            if __name__ == '__main__':\n                IOLoop.current().run_sync(main)\n    \n        .. versionchanged:: 4.3\n           Returning a non-``None``, non-awaitable value is now an error.\n    \n        .. versionchanged:: 5.0\n           If a timeout occurs, the ``func`` coroutine will be cancelled.\n    \n        \"\"\"\n        future_cell = [None]  # type: List[Optional[Future]]\n    \n        def run() -> None:\n            try:\n                result = func()\n                if result is not None:\n                    from tornado.gen import convert_yielded\n    \n                    result = convert_yielded(result)\n            except Exception:\n                fut = Future()  # type: Future[Any]\n                future_cell[0] = fut\n                future_set_exc_info(fut, sys.exc_info())\n            else:\n                if is_future(result):\n                    future_cell[0] = result\n                else:\n                    fut = Future()\n                    future_cell[0] = fut\n                    fut.set_result(result)\n            assert future_cell[0] is not None\n            self.add_future(future_cell[0], lambda future: self.stop())\n    \n        self.add_callback(run)\n        if timeout is not None:\n    \n            def timeout_callback() -> None:\n                # If we can cancel the future, do so and wait on it. If not,\n                # Just stop the loop and return with the task still pending.\n                # (If we neither cancel nor wait for the task, a warning\n                # will be logged).\n                assert future_cell[0] is not None\n                if not future_cell[0].cancel():\n                    self.stop()\n    \n            timeout_handle = self.add_timeout(self.time() + timeout, timeout_callback)\n        self.start()\n        if timeout is not None:\n            self.remove_timeout(timeout_handle)\n        assert future_cell[0] is not None\n        if future_cell[0].cancelled() or not future_cell[0].done():\n>           raise TimeoutError(\"Operation timed out after %s seconds\" % timeout)\nE           tornado.util.TimeoutError: Operation timed out after 5 seconds\n\ntornado/ioloop.py:530: TimeoutError",
                "test_function_decorators": []
            }
        ]
    }
}