{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 376,
            "file_name": "http1connection.py",
            "replace_code": "def write_headers(\n    self,\n    start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n    headers: httputil.HTTPHeaders,\n    chunk: bytes = None,\n) -> \"Future[None]\":\n    from typing import Union, cast\n    from tornado import httputil, iostream\n    from tornado.concurrent import Future\n    from tornado.ioloop import IOLoop\n    from tornado.iostream import StreamClosedError\n    from tornado.escape import utf8, native_str\n    \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n    lines = []\n    if self.is_client:\n        assert isinstance(start_line, httputil.RequestStartLine)\n        self._request_start_line = start_line\n        lines.append(utf8(\"%s %s HTTP/1.1\" % (start_line.method, start_line.target)))\n        # Client requests with a non-empty body must have either a\n        # Content-Length or a Transfer-Encoding.\n        self._chunking_output = (\n            start_line.method in (\"POST\", \"PUT\", \"PATCH\")\n            and \"Content-Length\" not in headers\n            and \"Transfer-Encoding\" not in headers\n        )\n    else:\n        assert isinstance(start_line, httputil.ResponseStartLine)\n        assert self._request_start_line is not None\n        assert self._request_headers is not None\n        self._response_start_line = start_line\n        lines.append(utf8(\"HTTP/1.1 %d %s\" % (start_line.code, start_line.reason)))\n        self._chunking_output = (\n            self._request_start_line.version == \"HTTP/1.1\"\n            and start_line.code not in (204, 304)\n            and (start_line.code < 100 or start_line.code >= 200)\n            and \"Content-Length\" not in headers\n            and \"Transfer-Encoding\" not in headers\n        )\n        if (\n            self._request_start_line.version == \"HTTP/1.1\"\n            and self._disconnect_on_finish\n        ):\n            headers[\"Connection\"] = \"close\"\n        if (\n            self._request_start_line.version == \"HTTP/1.0\"\n            and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\"\n        ):\n            headers[\"Connection\"] = \"Keep-Alive\"\n    if self._chunking_output:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n    if not self.is_client and (\n        self._request_start_line.method == \"HEAD\"\n        or cast(httputil.ResponseStartLine, start_line).code == 304\n    ):\n        self._expected_content_remaining = 0\n    elif \"Content-Length\" in headers:\n        self._expected_content_remaining = int(headers[\"Content-Length\"])\n    else:\n        self._expected_content_remaining = None\n    header_lines = [\n        native_str(n) + \": \" + native_str(v) for n, v in headers.get_all()\n    ]\n    lines.extend((l.encode(\"latin1\") + b\"\\r\\n\") for l in header_lines)\n    for line in lines:\n        if b\"\\n\" in line:\n            raise ValueError(\"Newline in header: \" + repr(line))\n    \n    if self.stream.closed():\n        future = Future()\n        future.set_exception(iostream.StreamClosedError())\n        future.exception()\n    else:\n        future = Future()\n        data = b\"\".join(lines) + b\"\\r\\n\"\n        if chunk:\n            data += self._format_chunk(chunk)\n        self.stream.write(data, callback=self._on_write_complete)\n    return future"
        }
    ]
}