{
    "tornado": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 376,
            "file_name": "tornado/http1connection.py",
            "replace_code": "def write_headers(\n        self,\n        start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n        headers: httputil.HTTPHeaders,\n        chunk: bytes = None,\n    ) -> \"Future[None]\":\n    from typing import Union\n    import httputil\n    import tornado\n    from tornado import httputil, iostream\n    from tornado.ioloop import IOLoop\n    from tornado.concurrent import Future, future_add_done_callback\n    from tornado.httputil import HTTPHeaders, RequestStartLine, ResponseStartLine\n    from tornado.iostream import IOStream\n    \"\"\"Implements `.HTTPConnection.write_headers`.\"\"\"\n    lines = []\n    is_request = isinstance(start_line, httputil.RequestStartLine)\n    if is_request:\n        method = start_line.method\n        path = start_line.path\n    else:\n        method = self._request_start_line.method\n        path = self._request_start_line.path\n    \n    if self.is_client:\n        self._request_start_line = start_line\n        lines.append(tornado.escape.utf8(f\"{method} {path} HTTP/1.1\"))\n    \n        if method in (\"POST\", \"PUT\", \"PATCH\") and 'Content-Length' not in headers and 'Transfer-Encoding' not in headers:\n            self._chunking_output = True\n    \n    else:\n        self._response_start_line = start_line\n        lines.append(tornado.escape.utf8(f\"HTTP/1.1 {start_line.code} {start_line.reason}\"))\n        \n        if self._request_start_line.version == \"HTTP/1.1\" and self._disconnect_on_finish:\n            headers[\"Connection\"] = \"close\"\n        if self._request_start_line.version == \"HTTP/1.0\" and self._request_headers.get(\"Connection\", \"\").lower() == \"keep-alive\":\n            headers[\"Connection\"] = \"Keep-Alive\"\n    \n        if (start_line.code not in (204, 304) and (start_line.code < 100 or start_line.code >= 200)\n                and 'Content-Length' not in headers and 'Transfer-Encoding' not in headers):\n            self._chunking_output = True\n    \n    if self._chunking_output:\n        headers[\"Transfer-Encoding\"] = \"chunked\"\n    \n    if not is_request and (self._request_start_line.method == \"HEAD\" or start_line.code == 304):\n        self._expected_content_remaining = 0\n    elif 'Content-Length' in headers:\n        self._expected_content_remaining = int(headers['Content-Length'])\n    else:\n        self._expected_content_remaining = None\n    \n    if headers.get_all():\n        header_lines = (f'{n}: {v}' for n, v in headers.get_all())\n        lines.extend([tornado.escape.utf8(line) for line in header_lines])\n    \n    for line in lines:\n        if b\"\\n\" in line:\n            raise ValueError(\"Newline in header: \" + repr(line))\n    \n    future = Future()\n    \n    if self.stream.closed():\n        future.set_exception(iostream.StreamClosedError())\n    else:\n        data = b\"\\r\\n\".join(lines) + b\"\\r\\n\\r\\n\"\n        if chunk:\n            data += self._format_chunk(chunk)\n        self._pending_write = self.stream.write(data)\n        future_add_done_callback(self._pending_write, self._on_write_complete)\n    \n    return future"
        }
    ]
}