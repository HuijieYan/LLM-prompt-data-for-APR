{
    "tornado:9": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tornado_9/tornado/httputil.py": {
            "buggy_functions": [
                {
                    "function_name": "url_concat",
                    "function_code": "def url_concat(url, args):\n    \"\"\"Concatenate url and arguments regardless of whether\n    url has existing query parameters.\n\n    ``args`` may be either a dictionary or a list of key-value pairs\n    (the latter allows for multiple values with the same key.\n\n    >>> url_concat(\"http://example.com/foo\", dict(c=\"d\"))\n    'http://example.com/foo?c=d'\n    >>> url_concat(\"http://example.com/foo?a=b\", dict(c=\"d\"))\n    'http://example.com/foo?a=b&c=d'\n    >>> url_concat(\"http://example.com/foo?a=b\", [(\"c\", \"d\"), (\"c\", \"d2\")])\n    'http://example.com/foo?a=b&c=d&c=d2'\n    \"\"\"\n    parsed_url = urlparse(url)\n    if isinstance(args, dict):\n        parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n        parsed_query.extend(args.items())\n    elif isinstance(args, list) or isinstance(args, tuple):\n        parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n        parsed_query.extend(args)\n    else:\n        err = \"'args' parameter should be dict, list or tuple. Not {0}\".format(\n            type(args))\n        raise TypeError(err)\n    final_query = urlencode(parsed_query)\n    url = urlunparse((\n        parsed_url[0],\n        parsed_url[1],\n        parsed_url[2],\n        parsed_url[3],\n        final_query,\n        parsed_url[5]))\n    return url\n",
                    "decorators": [],
                    "docstring": "Concatenate url and arguments regardless of whether\nurl has existing query parameters.\n\n``args`` may be either a dictionary or a list of key-value pairs\n(the latter allows for multiple values with the same key.\n\n>>> url_concat(\"http://example.com/foo\", dict(c=\"d\"))\n'http://example.com/foo?c=d'\n>>> url_concat(\"http://example.com/foo?a=b\", dict(c=\"d\"))\n'http://example.com/foo?a=b&c=d'\n>>> url_concat(\"http://example.com/foo?a=b\", [(\"c\", \"d\"), (\"c\", \"d2\")])\n'http://example.com/foo?a=b&c=d&c=d2'",
                    "start_line": 592,
                    "end_line": 625,
                    "variables": {
                        "parsed_url": [
                            608,
                            611,
                            619,
                            620,
                            621,
                            622,
                            624,
                            606
                        ],
                        "urlparse": [
                            606
                        ],
                        "url": [
                            625,
                            618,
                            606
                        ],
                        "isinstance": [
                            610,
                            607
                        ],
                        "args": [
                            609,
                            610,
                            612,
                            615,
                            607
                        ],
                        "dict": [
                            607
                        ],
                        "parsed_query": [
                            608,
                            609,
                            611,
                            612,
                            617
                        ],
                        "parse_qsl": [
                            608,
                            611
                        ],
                        "parsed_url.query": [
                            608,
                            611
                        ],
                        "parsed_query.extend": [
                            609,
                            612
                        ],
                        "args.items": [
                            609
                        ],
                        "list": [
                            610
                        ],
                        "tuple": [
                            610
                        ],
                        "err": [
                            616,
                            614
                        ],
                        "format": [
                            614
                        ],
                        "type": [
                            615
                        ],
                        "TypeError": [
                            616
                        ],
                        "final_query": [
                            617,
                            623
                        ],
                        "urlencode": [
                            617
                        ],
                        "urlunparse": [
                            618
                        ]
                    },
                    "filtered_variables": {
                        "parsed_url": [
                            608,
                            611,
                            619,
                            620,
                            621,
                            622,
                            624,
                            606
                        ],
                        "urlparse": [
                            606
                        ],
                        "url": [
                            625,
                            618,
                            606
                        ],
                        "args": [
                            609,
                            610,
                            612,
                            615,
                            607
                        ],
                        "parsed_query": [
                            608,
                            609,
                            611,
                            612,
                            617
                        ],
                        "parse_qsl": [
                            608,
                            611
                        ],
                        "parsed_url.query": [
                            608,
                            611
                        ],
                        "parsed_query.extend": [
                            609,
                            612
                        ],
                        "args.items": [
                            609
                        ],
                        "err": [
                            616,
                            614
                        ],
                        "final_query": [
                            617,
                            623
                        ],
                        "urlencode": [
                            617
                        ],
                        "urlunparse": [
                            618
                        ]
                    },
                    "diff_line_number": 605,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "parsed_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'https://localhost/path?r=1&t=2'",
                                    "variable_type": "str",
                                    "variable_shape": "30"
                                },
                                "args": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "parsed_query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_qsl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_url.query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_query.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "args": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'https://localhost/path?r=1&t=2'",
                                    "variable_type": "str",
                                    "variable_shape": "30"
                                },
                                "parsed_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_qsl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_url.query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_query.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "args": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url": {
                                    "variable_value": "'https://localhost/path?r=1&t=2'",
                                    "variable_type": "str",
                                    "variable_shape": "30"
                                },
                                "parsed_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parse_qsl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_url.query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parsed_query.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "final_query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlencode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlunparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def url_concat(url, args):\n    \"\"\"Concatenate url and arguments regardless of whether\n    url has existing query parameters.\n\n    ``args`` may be either a dictionary or a list of key-value pairs\n    (the latter allows for multiple values with the same key.\n\n    >>> url_concat(\"http://example.com/foo\", dict(c=\"d\"))\n    'http://example.com/foo?c=d'\n    >>> url_concat(\"http://example.com/foo?a=b\", dict(c=\"d\"))\n    'http://example.com/foo?a=b&c=d'\n    >>> url_concat(\"http://example.com/foo?a=b\", [(\"c\", \"d\"), (\"c\", \"d2\")])\n    'http://example.com/foo?a=b&c=d&c=d2'\n    \"\"\"\n    parsed_url = urlparse(url)\n    if isinstance(args, dict):\n        parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n        parsed_query.extend(args.items())\n    elif isinstance(args, list) or isinstance(args, tuple):\n        parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n        parsed_query.extend(args)\n    else:\n        err = \"'args' parameter should be dict, list or tuple. Not {0}\".format(\n            type(args))\n        raise TypeError(err)\n    final_query = urlencode(parsed_query)\n    url = urlunparse((\n        parsed_url[0],\n        parsed_url[1],\n        parsed_url[2],\n        parsed_url[3],\n        final_query,\n        parsed_url[5]))\n    return url",
                "def _parse_request_range(range_header):\n    \"\"\"Parses a Range header.\n\n    Returns either ``None`` or tuple ``(start, end)``.\n    Note that while the HTTP headers use inclusive byte positions,\n    this method returns indexes suitable for use in slices.\n\n    >>> start, end = _parse_request_range(\"bytes=1-2\")\n    >>> start, end\n    (1, 3)\n    >>> [0, 1, 2, 3, 4][start:end]\n    [1, 2]\n    >>> _parse_request_range(\"bytes=6-\")\n    (6, None)\n    >>> _parse_request_range(\"bytes=-6\")\n    (-6, None)\n    >>> _parse_request_range(\"bytes=-0\")\n    (None, 0)\n    >>> _parse_request_range(\"bytes=\")\n    (None, None)\n    >>> _parse_request_range(\"foo=42\")\n    >>> _parse_request_range(\"bytes=1-2,6-10\")\n\n    Note: only supports one range (ex, ``bytes=1-2,6-10`` is not allowed).\n\n    See [0] for the details of the range header.\n\n    [0]: http://greenbytes.de/tech/webdav/draft-ietf-httpbis-p5-range-latest.html#byte.ranges\n    \"\"\"\n    unit, _, value = range_header.partition(\"=\")\n    unit, value = unit.strip(), value.strip()\n    if unit != \"bytes\":\n        return None\n    start_b, _, end_b = value.partition(\"-\")\n    try:\n        start = _int_or_none(start_b)\n        end = _int_or_none(end_b)\n    except ValueError:\n        return None\n    if end is not None:\n        if start is None:\n            if end != 0:\n                start = -end\n                end = None\n        else:\n            end += 1\n    return (start, end)",
                "def _get_content_range(start, end, total):\n    \"\"\"Returns a suitable Content-Range header:\n\n    >>> print(_get_content_range(None, 1, 4))\n    bytes 0-0/4\n    >>> print(_get_content_range(1, 3, 4))\n    bytes 1-2/4\n    >>> print(_get_content_range(None, None, 4))\n    bytes 0-3/4\n    \"\"\"\n    start = start or 0\n    end = (end or total) - 1\n    return \"bytes %s-%s/%s\" % (start, end, total)",
                "def _int_or_none(val):\n    val = val.strip()\n    if val == \"\":\n        return None\n    return int(val)",
                "def parse_body_arguments(content_type, body, arguments, files, headers=None):\n    \"\"\"Parses a form request body.\n\n    Supports ``application/x-www-form-urlencoded`` and\n    ``multipart/form-data``.  The ``content_type`` parameter should be\n    a string and ``body`` should be a byte string.  The ``arguments``\n    and ``files`` parameters are dictionaries that will be updated\n    with the parsed contents.\n    \"\"\"\n    if headers and 'Content-Encoding' in headers:\n        gen_log.warning(\"Unsupported Content-Encoding: %s\",\n                        headers['Content-Encoding'])\n        return\n    if content_type.startswith(\"application/x-www-form-urlencoded\"):\n        try:\n            uri_arguments = parse_qs_bytes(native_str(body), keep_blank_values=True)\n        except Exception as e:\n            gen_log.warning('Invalid x-www-form-urlencoded body: %s', e)\n            uri_arguments = {}\n        for name, values in uri_arguments.items():\n            if values:\n                arguments.setdefault(name, []).extend(values)\n    elif content_type.startswith(\"multipart/form-data\"):\n        try:\n            fields = content_type.split(\";\")\n            for field in fields:\n                k, sep, v = field.strip().partition(\"=\")\n                if k == \"boundary\" and v:\n                    parse_multipart_form_data(utf8(v), body, arguments, files)\n                    break\n            else:\n                raise ValueError(\"multipart boundary not found\")\n        except Exception as e:\n            gen_log.warning(\"Invalid multipart/form-data: %s\", e)",
                "def parse_multipart_form_data(boundary, data, arguments, files):\n    \"\"\"Parses a ``multipart/form-data`` body.\n\n    The ``boundary`` and ``data`` parameters are both byte strings.\n    The dictionaries given in the arguments and files parameters\n    will be updated with the contents of the body.\n    \"\"\"\n    # The standard allows for the boundary to be quoted in the header,\n    # although it's rare (it happens at least for google app engine\n    # xmpp).  I think we're also supposed to handle backslash-escapes\n    # here but I'll save that until we see a client that uses them\n    # in the wild.\n    if boundary.startswith(b'\"') and boundary.endswith(b'\"'):\n        boundary = boundary[1:-1]\n    final_boundary_index = data.rfind(b\"--\" + boundary + b\"--\")\n    if final_boundary_index == -1:\n        gen_log.warning(\"Invalid multipart/form-data: no final boundary\")\n        return\n    parts = data[:final_boundary_index].split(b\"--\" + boundary + b\"\\r\\n\")\n    for part in parts:\n        if not part:\n            continue\n        eoh = part.find(b\"\\r\\n\\r\\n\")\n        if eoh == -1:\n            gen_log.warning(\"multipart/form-data missing headers\")\n            continue\n        headers = HTTPHeaders.parse(part[:eoh].decode(\"utf-8\"))\n        disp_header = headers.get(\"Content-Disposition\", \"\")\n        disposition, disp_params = _parse_header(disp_header)\n        if disposition != \"form-data\" or not part.endswith(b\"\\r\\n\"):\n            gen_log.warning(\"Invalid multipart/form-data\")\n            continue\n        value = part[eoh + 4:-2]\n        if not disp_params.get(\"name\"):\n            gen_log.warning(\"multipart/form-data value missing name\")\n            continue\n        name = disp_params[\"name\"]\n        if disp_params.get(\"filename\"):\n            ctype = headers.get(\"Content-Type\", \"application/unknown\")\n            files.setdefault(name, []).append(HTTPFile(  # type: ignore\n                filename=disp_params[\"filename\"], body=value,\n                content_type=ctype))\n        else:\n            arguments.setdefault(name, []).append(value)",
                "def format_timestamp(ts):\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    if isinstance(ts, numbers.Real):\n        pass\n    elif isinstance(ts, (tuple, time.struct_time)):\n        ts = calendar.timegm(ts)\n    elif isinstance(ts, datetime.datetime):\n        ts = calendar.timegm(ts.utctimetuple())\n    else:\n        raise TypeError(\"unknown timestamp type: %r\" % ts)\n    return email.utils.formatdate(ts, usegmt=True)",
                "def parse_request_start_line(line):\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    try:\n        method, path, version = line.split(\" \")\n    except ValueError:\n        raise HTTPInputError(\"Malformed HTTP request line\")\n    if not re.match(r\"^HTTP/1\\.[0-9]$\", version):\n        raise HTTPInputError(\n            \"Malformed HTTP version in HTTP Request-Line: %r\" % version)\n    return RequestStartLine(method, path, version)",
                "def parse_response_start_line(line):\n    \"\"\"Returns a (version, code, reason) tuple for an HTTP 1.x response line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_response_start_line(\"HTTP/1.1 200 OK\")\n    ResponseStartLine(version='HTTP/1.1', code=200, reason='OK')\n    \"\"\"\n    line = native_str(line)\n    match = re.match(\"(HTTP/1.[0-9]) ([0-9]+) ([^\\r]*)\", line)\n    if not match:\n        raise HTTPInputError(\"Error parsing response start line\")\n    return ResponseStartLine(match.group(1), int(match.group(2)),\n                             match.group(3))",
                "def _parseparam(s):\n    while s[:1] == ';':\n        s = s[1:]\n        end = s.find(';')\n        while end > 0 and (s.count('\"', 0, end) - s.count('\\\\\"', 0, end)) % 2:\n            end = s.find(';', end + 1)\n        if end < 0:\n            end = len(s)\n        f = s[:end]\n        yield f.strip()\n        s = s[end:]",
                "def _parse_header(line):\n    \"\"\"Parse a Content-type like header.\n\n    Return the main content-type and a dictionary of options.\n\n    \"\"\"\n    parts = _parseparam(';' + line)\n    key = next(parts)\n    pdict = {}\n    for p in parts:\n        i = p.find('=')\n        if i >= 0:\n            name = p[:i].strip().lower()\n            value = p[i + 1:].strip()\n            if len(value) >= 2 and value[0] == value[-1] == '\"':\n                value = value[1:-1]\n                value = value.replace('\\\\\\\\', '\\\\').replace('\\\\\"', '\"')\n            pdict[name] = value\n        else:\n            pdict[p] = None\n    return key, pdict",
                "def _encode_header(key, pdict):\n    \"\"\"Inverse of _parse_header.\n\n    >>> _encode_header('permessage-deflate',\n    ...     {'client_max_window_bits': 15, 'client_no_context_takeover': None})\n    'permessage-deflate; client_max_window_bits=15; client_no_context_takeover'\n    \"\"\"\n    if not pdict:\n        return key\n    out = [key]\n    # Sort the parameters just to make it easy to test.\n    for k, v in sorted(pdict.items()):\n        if v is None:\n            out.append(k)\n        else:\n            # TODO: quote if necessary.\n            out.append('%s=%s' % (k, v))\n    return '; '.join(out)",
                "def doctests():\n    import doctest\n    return doctest.DocTestSuite()",
                "def split_host_and_port(netloc):\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = re.match(r'^(.+):(\\d+)$', netloc)\n    if match:\n        host = match.group(1)\n        port = int(match.group(2))\n    else:\n        host = netloc\n        port = None\n    return (host, port)",
                "def _unquote_cookie(str):\n    \"\"\"Handle double quotes and escaping in cookie values.\n\n    This method is copied verbatim from the Python 3.5 standard\n    library (http.cookies._unquote) so we don't have to depend on\n    non-public interfaces.\n    \"\"\"\n    # If there aren't any doublequotes,\n    # then there can't be any special characters.  See RFC 2109.\n    if str is None or len(str) < 2:\n        return str\n    if str[0] != '\"' or str[-1] != '\"':\n        return str\n\n    # We have to assume that we must decode this string.\n    # Down to work.\n\n    # Remove the \"s\n    str = str[1:-1]\n\n    # Check for special sequences.  Examples:\n    #    \\012 --> \\n\n    #    \\\"   --> \"\n    #\n    i = 0\n    n = len(str)\n    res = []\n    while 0 <= i < n:\n        o_match = _OctalPatt.search(str, i)\n        q_match = _QuotePatt.search(str, i)\n        if not o_match and not q_match:              # Neither matched\n            res.append(str[i:])\n            break\n        # else:\n        j = k = -1\n        if o_match:\n            j = o_match.start(0)\n        if q_match:\n            k = q_match.start(0)\n        if q_match and (not o_match or k < j):     # QuotePatt matched\n            res.append(str[i:k])\n            res.append(str[k + 1])\n            i = k + 2\n        else:                                      # OctalPatt matched\n            res.append(str[i:j])\n            res.append(chr(int(str[j + 1:j + 4], 8)))\n            i = j + 4\n    return _nulljoin(res)",
                "def parse_cookie(cookie):\n    \"\"\"Parse a ``Cookie`` HTTP header into a dict of name/value pairs.\n\n    This function attempts to mimic browser cookie parsing behavior;\n    it specifically does not follow any of the cookie-related RFCs\n    (because browsers don't either).\n\n    The algorithm used is identical to that used by Django version 1.9.10.\n\n    .. versionadded:: 4.4.2\n    \"\"\"\n    cookiedict = {}\n    for chunk in cookie.split(str(';')):\n        if str('=') in chunk:\n            key, val = chunk.split(str('='), 1)\n        else:\n            # Assume an empty name per\n            # https://bugzilla.mozilla.org/show_bug.cgi?id=169091\n            key, val = str(''), chunk\n        key, val = key.strip(), val.strip()\n        if key or val:\n            # unquote using Python's algorithm.\n            cookiedict[key] = _unquote_cookie(val)\n    return cookiedict",
                "def __init__(self, size):\n    super(_NormalizedHeaderCache, self).__init__()\n    self.size = size\n    self.queue = collections.deque()",
                "def __missing__(self, key):\n    normalized = \"-\".join([w.capitalize() for w in key.split(\"-\")])\n    self[key] = normalized\n    self.queue.append(key)\n    if len(self.queue) > self.size:\n        # Limit the size of the cache.  LRU would be better, but this\n        # simpler approach should be fine.  In Python 2.7+ we could\n        # use OrderedDict (or in 3.2+, @functools.lru_cache).\n        old_key = self.queue.popleft()\n        del self[old_key]\n    return normalized",
                "def __init__(self, *args, **kwargs):\n    self._dict = {}  # type: typing.Dict[str, str]\n    self._as_list = {}  # type: typing.Dict[str, typing.List[str]]\n    self._last_key = None\n    if (len(args) == 1 and len(kwargs) == 0 and\n            isinstance(args[0], HTTPHeaders)):\n        # Copy constructor\n        for k, v in args[0].get_all():\n            self.add(k, v)\n    else:\n        # Dict-style initialization\n        self.update(*args, **kwargs)",
                "def add(self, name, value):\n    # type: (str, str) -> None\n    \"\"\"Adds a new value for the given key.\"\"\"\n    norm_name = _normalized_headers[name]\n    self._last_key = norm_name\n    if norm_name in self:\n        self._dict[norm_name] = (native_str(self[norm_name]) + ',' +\n                                 native_str(value))\n        self._as_list[norm_name].append(value)\n    else:\n        self[norm_name] = value",
                "def get_list(self, name):\n    \"\"\"Returns all values for the given header as a list.\"\"\"\n    norm_name = _normalized_headers[name]\n    return self._as_list.get(norm_name, [])",
                "def get_all(self):\n    # type: () -> typing.Iterable[typing.Tuple[str, str]]\n    \"\"\"Returns an iterable of all (name, value) pairs.\n\n    If a header has multiple values, multiple pairs will be\n    returned with the same name.\n    \"\"\"\n    for name, values in self._as_list.items():\n        for value in values:\n            yield (name, value)",
                "def parse_line(self, line):\n    \"\"\"Updates the dictionary with a single header line.\n\n    >>> h = HTTPHeaders()\n    >>> h.parse_line(\"Content-Type: text/html\")\n    >>> h.get('content-type')\n    'text/html'\n    \"\"\"\n    if line[0].isspace():\n        # continuation of a multi-line header\n        new_part = ' ' + line.lstrip()\n        self._as_list[self._last_key][-1] += new_part\n        self._dict[self._last_key] += new_part\n    else:\n        name, value = line.split(\":\", 1)\n        self.add(name, value.strip())",
                "@classmethod\ndef parse(cls, headers):\n    \"\"\"Returns a dictionary from HTTP header text.\n\n    >>> h = HTTPHeaders.parse(\"Content-Type: text/html\\\\r\\\\nContent-Length: 42\\\\r\\\\n\")\n    >>> sorted(h.items())\n    [('Content-Length', '42'), ('Content-Type', 'text/html')]\n    \"\"\"\n    h = cls()\n    for line in _CRLF_RE.split(headers):\n        if line:\n            h.parse_line(line)\n    return h",
                "def __setitem__(self, name, value):\n    norm_name = _normalized_headers[name]\n    self._dict[norm_name] = value\n    self._as_list[norm_name] = [value]",
                "def __getitem__(self, name):\n    # type: (str) -> str\n    return self._dict[_normalized_headers[name]]",
                "def __delitem__(self, name):\n    norm_name = _normalized_headers[name]\n    del self._dict[norm_name]\n    del self._as_list[norm_name]",
                "def __len__(self):\n    return len(self._dict)",
                "def __iter__(self):\n    return iter(self._dict)",
                "def copy(self):\n    # defined in dict but not in MutableMapping.\n    return HTTPHeaders(self)",
                "def __str__(self):\n    lines = []\n    for name, value in self.get_all():\n        lines.append(\"%s: %s\\n\" % (name, value))\n    return \"\".join(lines)",
                "def __init__(self, method=None, uri=None, version=\"HTTP/1.0\", headers=None,\n             body=None, host=None, files=None, connection=None,\n             start_line=None, server_connection=None):\n    if start_line is not None:\n        method, uri, version = start_line\n    self.method = method\n    self.uri = uri\n    self.version = version\n    self.headers = headers or HTTPHeaders()\n    self.body = body or b\"\"\n\n    # set remote IP and protocol\n    context = getattr(connection, 'context', None)\n    self.remote_ip = getattr(context, 'remote_ip', None)\n    self.protocol = getattr(context, 'protocol', \"http\")\n\n    self.host = host or self.headers.get(\"Host\") or \"127.0.0.1\"\n    self.host_name = split_host_and_port(self.host.lower())[0]\n    self.files = files or {}\n    self.connection = connection\n    self.server_connection = server_connection\n    self._start_time = time.time()\n    self._finish_time = None\n\n    self.path, sep, self.query = uri.partition('?')\n    self.arguments = parse_qs_bytes(self.query, keep_blank_values=True)\n    self.query_arguments = copy.deepcopy(self.arguments)\n    self.body_arguments = {}",
                "def supports_http_1_1(self):\n    \"\"\"Returns True if this request supports HTTP/1.1 semantics.\n\n    .. deprecated:: 4.0\n       Applications are less likely to need this information with the\n       introduction of `.HTTPConnection`.  If you still need it, access\n       the ``version`` attribute directly.\n    \"\"\"\n    return self.version == \"HTTP/1.1\"",
                "@property\ndef cookies(self):\n    \"\"\"A dictionary of Cookie.Morsel objects.\"\"\"\n    if not hasattr(self, \"_cookies\"):\n        self._cookies = Cookie.SimpleCookie()\n        if \"Cookie\" in self.headers:\n            try:\n                parsed = parse_cookie(self.headers[\"Cookie\"])\n            except Exception:\n                pass\n            else:\n                for k, v in parsed.items():\n                    try:\n                        self._cookies[k] = v\n                    except Exception:\n                        # SimpleCookie imposes some restrictions on keys;\n                        # parse_cookie does not. Discard any cookies\n                        # with disallowed keys.\n                        pass\n    return self._cookies",
                "def write(self, chunk, callback=None):\n    \"\"\"Writes the given chunk to the response stream.\n\n    .. deprecated:: 4.0\n       Use ``request.connection`` and the `.HTTPConnection` methods\n       to write the response.\n    \"\"\"\n    assert isinstance(chunk, bytes)\n    assert self.version.startswith(\"HTTP/1.\"), \\\n        \"deprecated interface only supported in HTTP/1.x\"\n    self.connection.write(chunk, callback=callback)",
                "def finish(self):\n    \"\"\"Finishes this HTTP request on the open connection.\n\n    .. deprecated:: 4.0\n       Use ``request.connection`` and the `.HTTPConnection` methods\n       to write the response.\n    \"\"\"\n    self.connection.finish()\n    self._finish_time = time.time()",
                "def full_url(self):\n    \"\"\"Reconstructs the full URL for this request.\"\"\"\n    return self.protocol + \"://\" + self.host + self.uri",
                "def request_time(self):\n    \"\"\"Returns the amount of time it took for this request to execute.\"\"\"\n    if self._finish_time is None:\n        return time.time() - self._start_time\n    else:\n        return self._finish_time - self._start_time",
                "def get_ssl_certificate(self, binary_form=False):\n    \"\"\"Returns the client's SSL certificate, if any.\n\n    To use client certificates, the HTTPServer's\n    `ssl.SSLContext.verify_mode` field must be set, e.g.::\n\n        ssl_ctx = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        ssl_ctx.load_cert_chain(\"foo.crt\", \"foo.key\")\n        ssl_ctx.load_verify_locations(\"cacerts.pem\")\n        ssl_ctx.verify_mode = ssl.CERT_REQUIRED\n        server = HTTPServer(app, ssl_options=ssl_ctx)\n\n    By default, the return value is a dictionary (or None, if no\n    client certificate is present).  If ``binary_form`` is true, a\n    DER-encoded form of the certificate is returned instead.  See\n    SSLSocket.getpeercert() in the standard library for more\n    details.\n    http://docs.python.org/library/ssl.html#sslsocket-objects\n    \"\"\"\n    try:\n        return self.connection.stream.socket.getpeercert(\n            binary_form=binary_form)\n    except SSLError:\n        return None",
                "def _parse_body(self):\n    parse_body_arguments(\n        self.headers.get(\"Content-Type\", \"\"), self.body,\n        self.body_arguments, self.files,\n        self.headers)\n\n    for k, v in self.body_arguments.items():\n        self.arguments.setdefault(k, []).extend(v)",
                "def __repr__(self):\n    attrs = (\"protocol\", \"host\", \"method\", \"uri\", \"version\", \"remote_ip\")\n    args = \", \".join([\"%s=%r\" % (n, getattr(self, n)) for n in attrs])\n    return \"%s(%s, headers=%s)\" % (\n        self.__class__.__name__, args, dict(self.headers))",
                "def start_request(self, server_conn, request_conn):\n    \"\"\"This method is called by the server when a new request has started.\n\n    :arg server_conn: is an opaque object representing the long-lived\n        (e.g. tcp-level) connection.\n    :arg request_conn: is a `.HTTPConnection` object for a single\n        request/response exchange.\n\n    This method should return a `.HTTPMessageDelegate`.\n    \"\"\"\n    raise NotImplementedError()",
                "def on_close(self, server_conn):\n    \"\"\"This method is called when a connection has been closed.\n\n    :arg server_conn: is a server connection that has previously been\n        passed to ``start_request``.\n    \"\"\"\n    pass",
                "def headers_received(self, start_line, headers):\n    \"\"\"Called when the HTTP headers have been received and parsed.\n\n    :arg start_line: a `.RequestStartLine` or `.ResponseStartLine`\n        depending on whether this is a client or server message.\n    :arg headers: a `.HTTPHeaders` instance.\n\n    Some `.HTTPConnection` methods can only be called during\n    ``headers_received``.\n\n    May return a `.Future`; if it does the body will not be read\n    until it is done.\n    \"\"\"\n    pass",
                "def data_received(self, chunk):\n    \"\"\"Called when a chunk of data has been received.\n\n    May return a `.Future` for flow control.\n    \"\"\"\n    pass",
                "def finish(self):\n    \"\"\"Called after the last chunk of data has been received.\"\"\"\n    pass",
                "def on_connection_close(self):\n    \"\"\"Called if the connection is closed without finishing the request.\n\n    If ``headers_received`` is called, either ``finish`` or\n    ``on_connection_close`` will be called, but not both.\n    \"\"\"\n    pass",
                "def write_headers(self, start_line, headers, chunk=None, callback=None):\n    \"\"\"Write an HTTP header block.\n\n    :arg start_line: a `.RequestStartLine` or `.ResponseStartLine`.\n    :arg headers: a `.HTTPHeaders` instance.\n    :arg chunk: the first (optional) chunk of data.  This is an optimization\n        so that small responses can be written in the same call as their\n        headers.\n    :arg callback: a callback to be run when the write is complete.\n\n    The ``version`` field of ``start_line`` is ignored.\n\n    Returns a `.Future` if no callback is given.\n    \"\"\"\n    raise NotImplementedError()",
                "def write(self, chunk, callback=None):\n    \"\"\"Writes a chunk of body data.\n\n    The callback will be run when the write is complete.  If no callback\n    is given, returns a Future.\n    \"\"\"\n    raise NotImplementedError()",
                "def finish(self):\n    \"\"\"Indicates that the last body data has been written.\n    \"\"\"\n    raise NotImplementedError()"
            ],
            "inscope_function_signatures": [
                "url_concat(url, args)",
                "_parse_request_range(range_header)",
                "_get_content_range(start, end, total)",
                "_int_or_none(val)",
                "parse_body_arguments(content_type, body, arguments, files, headers=None)",
                "parse_multipart_form_data(boundary, data, arguments, files)",
                "format_timestamp(ts)",
                "parse_request_start_line(line)",
                "parse_response_start_line(line)",
                "_parseparam(s)",
                "_parse_header(line)",
                "_encode_header(key, pdict)",
                "doctests()",
                "split_host_and_port(netloc)",
                "_unquote_cookie(str)",
                "parse_cookie(cookie)",
                "__init__(self, size)",
                "__missing__(self, key)",
                "__init__(self, *args, **kwargs)",
                "add(self, name, value)",
                "get_list(self, name)",
                "get_all(self)",
                "parse_line(self, line)",
                "parse(cls, headers)",
                "__setitem__(self, name, value)",
                "__getitem__(self, name)",
                "__delitem__(self, name)",
                "__len__(self)",
                "__iter__(self)",
                "copy(self)",
                "__str__(self)",
                "__init__(self, method=None, uri=None, version='HTTP/1.0', headers=None, body=None, host=None, files=None, connection=None, start_line=None, server_connection=None)",
                "supports_http_1_1(self)",
                "cookies(self)",
                "write(self, chunk, callback=None)",
                "finish(self)",
                "full_url(self)",
                "request_time(self)",
                "get_ssl_certificate(self, binary_form=False)",
                "_parse_body(self)",
                "__repr__(self)",
                "start_request(self, server_conn, request_conn)",
                "on_close(self, server_conn)",
                "headers_received(self, start_line, headers)",
                "data_received(self, chunk)",
                "finish(self)",
                "on_connection_close(self)",
                "write_headers(self, start_line, headers, chunk=None, callback=None)",
                "write(self, chunk, callback=None)",
                "finish(self)"
            ],
            "variables_in_file": {
                "PY3": [
                    38
                ],
                "responses": [
                    51
                ],
                "ImportError": [
                    65,
                    55
                ],
                "Exception": [
                    387,
                    483,
                    744,
                    393,
                    728,
                    57,
                    474
                ],
                "SSLError": [
                    61,
                    455
                ],
                "_SSLError": [
                    61
                ],
                "_CRLF_RE": [
                    203,
                    71
                ],
                "re.compile": [
                    941,
                    942,
                    71
                ],
                "re": [
                    931,
                    71,
                    941,
                    942,
                    850,
                    831
                ],
                "dict": [
                    74,
                    607,
                    471
                ],
                "__init__": [
                    86
                ],
                "super": [
                    86
                ],
                "_NormalizedHeaderCache": [
                    86,
                    103
                ],
                "self": [
                    384,
                    386,
                    135,
                    136,
                    137,
                    392,
                    142,
                    398,
                    145,
                    408,
                    153,
                    154,
                    155,
                    410,
                    157,
                    159,
                    419,
                    164,
                    420,
                    424,
                    428,
                    173,
                    429,
                    431,
                    469,
                    188,
                    189,
                    192,
                    471,
                    453,
                    460,
                    461,
                    462,
                    464,
                    465,
                    347,
                    212,
                    213,
                    86,
                    87,
                    88,
                    217,
                    345,
                    346,
                    92,
                    93,
                    94,
                    221,
                    222,
                    225,
                    98,
                    99,
                    228,
                    348,
                    349,
                    353,
                    232,
                    354,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    362,
                    241,
                    364,
                    365,
                    366,
                    367,
                    377,
                    382,
                    383
                ],
                "self.size": [
                    94,
                    87
                ],
                "size": [
                    87
                ],
                "self.queue": [
                    88,
                    98,
                    93,
                    94
                ],
                "collections.deque": [
                    88
                ],
                "collections": [
                    88,
                    106,
                    837,
                    815
                ],
                "normalized": [
                    100,
                    91,
                    92
                ],
                "join": [
                    943,
                    243,
                    916,
                    469,
                    91
                ],
                "w.capitalize": [
                    91
                ],
                "w": [
                    91
                ],
                "key.split": [
                    91
                ],
                "key": [
                    896,
                    907,
                    908,
                    1010,
                    883,
                    1014,
                    1015,
                    1016,
                    1018,
                    91,
                    92,
                    93
                ],
                "self.queue.append": [
                    93
                ],
                "len": [
                    225,
                    870,
                    138,
                    971,
                    890,
                    955,
                    94
                ],
                "old_key": [
                    98,
                    99
                ],
                "self.queue.popleft": [
                    98
                ],
                "_normalized_headers": [
                    163,
                    103,
                    211,
                    152,
                    217,
                    220
                ],
                "collections.MutableMapping": [
                    106
                ],
                "self._dict": [
                    225,
                    228,
                    135,
                    212,
                    221,
                    217,
                    155,
                    189
                ],
                "self._as_list": [
                    164,
                    136,
                    173,
                    213,
                    188,
                    157,
                    222
                ],
                "self._last_key": [
                    137,
                    153,
                    188,
                    189
                ],
                "args": [
                    609,
                    610,
                    612,
                    615,
                    138,
                    139,
                    141,
                    145,
                    469,
                    471,
                    607
                ],
                "kwargs": [
                    145,
                    138
                ],
                "isinstance": [
                    610,
                    804,
                    806,
                    808,
                    139,
                    407,
                    607
                ],
                "HTTPHeaders": [
                    232,
                    139,
                    348,
                    774
                ],
                "k": [
                    738,
                    739,
                    390,
                    392,
                    141,
                    142,
                    910,
                    464,
                    465,
                    912,
                    915,
                    980,
                    984,
                    985,
                    986,
                    987,
                    988
                ],
                "v": [
                    738,
                    739,
                    740,
                    390,
                    392,
                    141,
                    142,
                    910,
                    464,
                    465,
                    911,
                    915
                ],
                "get_all": [
                    141
                ],
                "self.add": [
                    192,
                    142
                ],
                "self.update": [
                    145
                ],
                "norm_name": [
                    163,
                    164,
                    222,
                    211,
                    212,
                    213,
                    152,
                    153,
                    154,
                    155,
                    220,
                    157,
                    221,
                    159
                ],
                "name": [
                    192,
                    163,
                    173,
                    893,
                    175,
                    784,
                    241,
                    242,
                    211,
                    787,
                    888,
                    791,
                    152,
                    217,
                    731,
                    220,
                    733,
                    191
                ],
                "native_str": [
                    849,
                    155,
                    156,
                    727
                ],
                "value": [
                    780,
                    788,
                    791,
                    156,
                    157,
                    670,
                    671,
                    159,
                    674,
                    174,
                    175,
                    191,
                    192,
                    212,
                    213,
                    241,
                    242,
                    889,
                    890,
                    891,
                    892,
                    893
                ],
                "append": [
                    787,
                    157,
                    791
                ],
                "self._as_list.get": [
                    164
                ],
                "values": [
                    173,
                    174,
                    731,
                    732,
                    733
                ],
                "self._as_list.items": [
                    173
                ],
                "isspace": [
                    185
                ],
                "line": [
                    203,
                    204,
                    205,
                    849,
                    850,
                    882,
                    185,
                    187,
                    828,
                    191
                ],
                "new_part": [
                    187,
                    188,
                    189
                ],
                "line.lstrip": [
                    187
                ],
                "line.split": [
                    828,
                    191
                ],
                "value.strip": [
                    192,
                    671
                ],
                "h": [
                    202,
                    205,
                    206
                ],
                "cls": [
                    202
                ],
                "_CRLF_RE.split": [
                    203
                ],
                "headers": [
                    774,
                    775,
                    203,
                    721,
                    786,
                    723,
                    348
                ],
                "h.parse_line": [
                    205
                ],
                "classmethod": [
                    194
                ],
                "iter": [
                    228
                ],
                "__copy__": [
                    237
                ],
                "copy": [
                    237,
                    366
                ],
                "lines": [
                    240,
                    242,
                    243
                ],
                "self.get_all": [
                    241
                ],
                "lines.append": [
                    242
                ],
                "__unicode__": [
                    245
                ],
                "__str__": [
                    245
                ],
                "object": [
                    248,
                    557,
                    491,
                    517
                ],
                "start_line": [
                    344,
                    343
                ],
                "method": [
                    344,
                    345,
                    834,
                    828
                ],
                "uri": [
                    344,
                    346,
                    364
                ],
                "version": [
                    833,
                    834,
                    344,
                    347,
                    828,
                    831
                ],
                "self.method": [
                    345
                ],
                "self.uri": [
                    424,
                    346
                ],
                "self.version": [
                    408,
                    377,
                    347
                ],
                "self.headers": [
                    384,
                    386,
                    356,
                    460,
                    462,
                    471,
                    348
                ],
                "self.body": [
                    460,
                    349
                ],
                "body": [
                    740,
                    349,
                    727
                ],
                "context": [
                    352,
                    353,
                    354
                ],
                "getattr": [
                    352,
                    353,
                    354,
                    469
                ],
                "connection": [
                    352,
                    359
                ],
                "self.remote_ip": [
                    353
                ],
                "self.protocol": [
                    424,
                    354
                ],
                "self.host": [
                    424,
                    356,
                    357
                ],
                "host": [
                    936,
                    938,
                    356,
                    933
                ],
                "self.headers.get": [
                    460,
                    356
                ],
                "self.host_name": [
                    357
                ],
                "split_host_and_port": [
                    357
                ],
                "self.host.lower": [
                    357
                ],
                "self.files": [
                    461,
                    358
                ],
                "files": [
                    787,
                    740,
                    358
                ],
                "self.connection": [
                    410,
                    419,
                    453,
                    359
                ],
                "self.server_connection": [
                    360
                ],
                "server_connection": [
                    360
                ],
                "self._start_time": [
                    361,
                    429,
                    431
                ],
                "time.time": [
                    361,
                    420,
                    429
                ],
                "time": [
                    361,
                    420,
                    429,
                    806
                ],
                "self._finish_time": [
                    362,
                    428,
                    420,
                    431
                ],
                "self.path": [
                    364
                ],
                "sep": [
                    738,
                    364
                ],
                "self.query": [
                    364,
                    365
                ],
                "uri.partition": [
                    364
                ],
                "self.arguments": [
                    465,
                    365,
                    366
                ],
                "parse_qs_bytes": [
                    365,
                    727
                ],
                "self.query_arguments": [
                    366
                ],
                "copy.deepcopy": [
                    366
                ],
                "self.body_arguments": [
                    464,
                    461,
                    367
                ],
                "hasattr": [
                    382
                ],
                "self._cookies": [
                    392,
                    398,
                    383
                ],
                "Cookie.SimpleCookie": [
                    383
                ],
                "Cookie": [
                    383
                ],
                "parsed": [
                    386,
                    390
                ],
                "parse_cookie": [
                    386
                ],
                "parsed.items": [
                    390
                ],
                "property": [
                    379
                ],
                "chunk": [
                    1008,
                    1009,
                    1010,
                    1014,
                    407,
                    410
                ],
                "bytes": [
                    407
                ],
                "self.version.startswith": [
                    408
                ],
                "self.connection.write": [
                    410
                ],
                "callback": [
                    410
                ],
                "self.connection.finish": [
                    419
                ],
                "self.connection.stream.socket.getpeercert": [
                    453
                ],
                "self.connection.stream.socket": [
                    453
                ],
                "self.connection.stream": [
                    453
                ],
                "binary_form": [
                    454
                ],
                "parse_body_arguments": [
                    459
                ],
                "self.body_arguments.items": [
                    464
                ],
                "extend": [
                    465,
                    733
                ],
                "self.arguments.setdefault": [
                    465
                ],
                "attrs": [
                    468,
                    469
                ],
                "n": [
                    973,
                    971,
                    469
                ],
                "self.__class__.__name__": [
                    471
                ],
                "self.__class__": [
                    471
                ],
                "NotImplementedError": [
                    576,
                    506,
                    584,
                    589
                ],
                "parsed_url": [
                    608,
                    611,
                    619,
                    620,
                    621,
                    622,
                    624,
                    606
                ],
                "urlparse": [
                    606
                ],
                "url": [
                    625,
                    618,
                    606
                ],
                "parsed_query": [
                    608,
                    609,
                    611,
                    612,
                    617
                ],
                "parse_qsl": [
                    608,
                    611
                ],
                "parsed_url.query": [
                    608,
                    611
                ],
                "parsed_query.extend": [
                    609,
                    612
                ],
                "args.items": [
                    609
                ],
                "list": [
                    610
                ],
                "tuple": [
                    610,
                    806
                ],
                "err": [
                    616,
                    614
                ],
                "format": [
                    614
                ],
                "type": [
                    615
                ],
                "TypeError": [
                    616,
                    811
                ],
                "final_query": [
                    617,
                    623
                ],
                "urlencode": [
                    617
                ],
                "urlunparse": [
                    618
                ],
                "ObjectDict": [
                    628
                ],
                "unit": [
                    672,
                    670,
                    671
                ],
                "_": [
                    674,
                    670
                ],
                "range_header.partition": [
                    670
                ],
                "range_header": [
                    670
                ],
                "unit.strip": [
                    671
                ],
                "start_b": [
                    674,
                    676
                ],
                "end_b": [
                    674,
                    677
                ],
                "value.partition": [
                    674
                ],
                "start": [
                    676,
                    681,
                    683,
                    687,
                    700,
                    702
                ],
                "_int_or_none": [
                    676,
                    677
                ],
                "end": [
                    866,
                    867,
                    868,
                    677,
                    869,
                    870,
                    680,
                    871,
                    682,
                    683,
                    684,
                    873,
                    686,
                    687,
                    701,
                    702
                ],
                "ValueError": [
                    829,
                    678,
                    743
                ],
                "total": [
                    701,
                    702
                ],
                "val": [
                    706,
                    707,
                    709,
                    1010,
                    1014,
                    1015,
                    1016,
                    1018
                ],
                "val.strip": [
                    706,
                    1015
                ],
                "int": [
                    853,
                    709,
                    934,
                    991
                ],
                "gen_log.warning": [
                    772,
                    745,
                    778,
                    782,
                    722,
                    729,
                    764
                ],
                "gen_log": [
                    772,
                    745,
                    778,
                    782,
                    722,
                    729,
                    764
                ],
                "content_type.startswith": [
                    725,
                    734
                ],
                "content_type": [
                    736,
                    725,
                    734
                ],
                "uri_arguments": [
                    730,
                    731,
                    727
                ],
                "e": [
                    729,
                    745
                ],
                "uri_arguments.items": [
                    731
                ],
                "arguments.setdefault": [
                    733,
                    791
                ],
                "arguments": [
                    740,
                    733,
                    791
                ],
                "fields": [
                    736,
                    737
                ],
                "content_type.split": [
                    736
                ],
                "field": [
                    737,
                    738
                ],
                "partition": [
                    738
                ],
                "field.strip": [
                    738
                ],
                "parse_multipart_form_data": [
                    740
                ],
                "utf8": [
                    740
                ],
                "boundary.startswith": [
                    760
                ],
                "boundary": [
                    760,
                    761,
                    762,
                    766
                ],
                "boundary.endswith": [
                    760
                ],
                "final_boundary_index": [
                    762,
                    763,
                    766
                ],
                "data.rfind": [
                    762
                ],
                "data": [
                    762,
                    766
                ],
                "parts": [
                    882,
                    883,
                    885,
                    766,
                    767
                ],
                "split": [
                    766
                ],
                "part": [
                    768,
                    770,
                    774,
                    777,
                    780,
                    767
                ],
                "eoh": [
                    770,
                    771,
                    780,
                    774
                ],
                "part.find": [
                    770
                ],
                "HTTPHeaders.parse": [
                    774
                ],
                "decode": [
                    774
                ],
                "disp_header": [
                    776,
                    775
                ],
                "headers.get": [
                    786,
                    775
                ],
                "disposition": [
                    776,
                    777
                ],
                "disp_params": [
                    776,
                    781,
                    784,
                    785,
                    788
                ],
                "_parse_header": [
                    776
                ],
                "part.endswith": [
                    777
                ],
                "disp_params.get": [
                    785,
                    781
                ],
                "ctype": [
                    786,
                    789
                ],
                "files.setdefault": [
                    787
                ],
                "HTTPFile": [
                    787
                ],
                "ts": [
                    804,
                    806,
                    807,
                    808,
                    809,
                    811,
                    812
                ],
                "numbers.Real": [
                    804
                ],
                "numbers": [
                    804
                ],
                "time.struct_time": [
                    806
                ],
                "calendar.timegm": [
                    809,
                    807
                ],
                "calendar": [
                    809,
                    807
                ],
                "datetime.datetime": [
                    808
                ],
                "datetime": [
                    808
                ],
                "ts.utctimetuple": [
                    809
                ],
                "email.utils.formatdate": [
                    812
                ],
                "email.utils": [
                    812
                ],
                "email": [
                    812
                ],
                "RequestStartLine": [
                    834,
                    815
                ],
                "collections.namedtuple": [
                    837,
                    815
                ],
                "path": [
                    834,
                    828
                ],
                "HTTPInputError": [
                    832,
                    852,
                    830
                ],
                "re.match": [
                    850,
                    931,
                    831
                ],
                "ResponseStartLine": [
                    853,
                    837
                ],
                "match": [
                    931,
                    932,
                    933,
                    934,
                    850,
                    851,
                    853,
                    854
                ],
                "match.group": [
                    934,
                    853,
                    854,
                    933
                ],
                "s": [
                    864,
                    865,
                    866,
                    867,
                    868,
                    870,
                    871,
                    873
                ],
                "s.find": [
                    866,
                    868
                ],
                "s.count": [
                    867
                ],
                "f": [
                    872,
                    871
                ],
                "f.strip": [
                    872
                ],
                "_parseparam": [
                    882
                ],
                "next": [
                    883
                ],
                "pdict": [
                    896,
                    906,
                    910,
                    884,
                    893,
                    895
                ],
                "p": [
                    885,
                    886,
                    888,
                    889,
                    895
                ],
                "i": [
                    992,
                    970,
                    973,
                    974,
                    975,
                    977,
                    886,
                    887,
                    888,
                    889,
                    986,
                    988,
                    990
                ],
                "p.find": [
                    886
                ],
                "lower": [
                    888
                ],
                "strip": [
                    888,
                    889
                ],
                "replace": [
                    892
                ],
                "value.replace": [
                    892
                ],
                "out": [
                    912,
                    916,
                    915,
                    908
                ],
                "sorted": [
                    910
                ],
                "pdict.items": [
                    910
                ],
                "out.append": [
                    912,
                    915
                ],
                "doctest.DocTestSuite": [
                    921
                ],
                "doctest": [
                    921
                ],
                "netloc": [
                    936,
                    931
                ],
                "port": [
                    937,
                    938,
                    934
                ],
                "_OctalPatt": [
                    941,
                    974
                ],
                "_QuotePatt": [
                    942,
                    975
                ],
                "_nulljoin": [
                    993,
                    943
                ],
                "str": [
                    964,
                    987,
                    971,
                    974,
                    975,
                    1008,
                    977,
                    1009,
                    1010,
                    990,
                    1014,
                    986,
                    955,
                    956,
                    957,
                    958,
                    991
                ],
                "res": [
                    993,
                    972,
                    977,
                    986,
                    987,
                    990,
                    991
                ],
                "o_match": [
                    974,
                    976,
                    981,
                    982,
                    985
                ],
                "_OctalPatt.search": [
                    974
                ],
                "q_match": [
                    975,
                    976,
                    983,
                    984,
                    985
                ],
                "_QuotePatt.search": [
                    975
                ],
                "res.append": [
                    977,
                    986,
                    987,
                    990,
                    991
                ],
                "j": [
                    992,
                    980,
                    982,
                    985,
                    990,
                    991
                ],
                "o_match.start": [
                    982
                ],
                "q_match.start": [
                    984
                ],
                "chr": [
                    991
                ],
                "cookiedict": [
                    1018,
                    1019,
                    1007
                ],
                "cookie.split": [
                    1008
                ],
                "cookie": [
                    1008
                ],
                "chunk.split": [
                    1010
                ],
                "key.strip": [
                    1015
                ],
                "_unquote_cookie": [
                    1018
                ]
            },
            "filtered_variables_in_file": {
                "PY3": [
                    38
                ],
                "responses": [
                    51
                ],
                "SSLError": [
                    61,
                    455
                ],
                "_SSLError": [
                    61
                ],
                "_CRLF_RE": [
                    203,
                    71
                ],
                "re.compile": [
                    941,
                    942,
                    71
                ],
                "re": [
                    931,
                    71,
                    941,
                    942,
                    850,
                    831
                ],
                "__init__": [
                    86
                ],
                "_NormalizedHeaderCache": [
                    86,
                    103
                ],
                "self": [
                    384,
                    386,
                    135,
                    136,
                    137,
                    392,
                    142,
                    398,
                    145,
                    408,
                    153,
                    154,
                    155,
                    410,
                    157,
                    159,
                    419,
                    164,
                    420,
                    424,
                    428,
                    173,
                    429,
                    431,
                    469,
                    188,
                    189,
                    192,
                    471,
                    453,
                    460,
                    461,
                    462,
                    464,
                    465,
                    347,
                    212,
                    213,
                    86,
                    87,
                    88,
                    217,
                    345,
                    346,
                    92,
                    93,
                    94,
                    221,
                    222,
                    225,
                    98,
                    99,
                    228,
                    348,
                    349,
                    353,
                    232,
                    354,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    362,
                    241,
                    364,
                    365,
                    366,
                    367,
                    377,
                    382,
                    383
                ],
                "self.size": [
                    94,
                    87
                ],
                "size": [
                    87
                ],
                "self.queue": [
                    88,
                    98,
                    93,
                    94
                ],
                "collections.deque": [
                    88
                ],
                "collections": [
                    88,
                    106,
                    837,
                    815
                ],
                "normalized": [
                    100,
                    91,
                    92
                ],
                "join": [
                    943,
                    243,
                    916,
                    469,
                    91
                ],
                "w.capitalize": [
                    91
                ],
                "w": [
                    91
                ],
                "key.split": [
                    91
                ],
                "key": [
                    896,
                    907,
                    908,
                    1010,
                    883,
                    1014,
                    1015,
                    1016,
                    1018,
                    91,
                    92,
                    93
                ],
                "self.queue.append": [
                    93
                ],
                "old_key": [
                    98,
                    99
                ],
                "self.queue.popleft": [
                    98
                ],
                "_normalized_headers": [
                    163,
                    103,
                    211,
                    152,
                    217,
                    220
                ],
                "collections.MutableMapping": [
                    106
                ],
                "self._dict": [
                    225,
                    228,
                    135,
                    212,
                    221,
                    217,
                    155,
                    189
                ],
                "self._as_list": [
                    164,
                    136,
                    173,
                    213,
                    188,
                    157,
                    222
                ],
                "self._last_key": [
                    137,
                    153,
                    188,
                    189
                ],
                "args": [
                    609,
                    610,
                    612,
                    615,
                    138,
                    139,
                    141,
                    145,
                    469,
                    471,
                    607
                ],
                "kwargs": [
                    145,
                    138
                ],
                "HTTPHeaders": [
                    232,
                    139,
                    348,
                    774
                ],
                "k": [
                    738,
                    739,
                    390,
                    392,
                    141,
                    142,
                    910,
                    464,
                    465,
                    912,
                    915,
                    980,
                    984,
                    985,
                    986,
                    987,
                    988
                ],
                "v": [
                    738,
                    739,
                    740,
                    390,
                    392,
                    141,
                    142,
                    910,
                    464,
                    465,
                    911,
                    915
                ],
                "get_all": [
                    141
                ],
                "self.add": [
                    192,
                    142
                ],
                "self.update": [
                    145
                ],
                "norm_name": [
                    163,
                    164,
                    222,
                    211,
                    212,
                    213,
                    152,
                    153,
                    154,
                    155,
                    220,
                    157,
                    221,
                    159
                ],
                "name": [
                    192,
                    163,
                    173,
                    893,
                    175,
                    784,
                    241,
                    242,
                    211,
                    787,
                    888,
                    791,
                    152,
                    217,
                    731,
                    220,
                    733,
                    191
                ],
                "native_str": [
                    849,
                    155,
                    156,
                    727
                ],
                "value": [
                    780,
                    788,
                    791,
                    156,
                    157,
                    670,
                    671,
                    159,
                    674,
                    174,
                    175,
                    191,
                    192,
                    212,
                    213,
                    241,
                    242,
                    889,
                    890,
                    891,
                    892,
                    893
                ],
                "append": [
                    787,
                    157,
                    791
                ],
                "self._as_list.get": [
                    164
                ],
                "values": [
                    173,
                    174,
                    731,
                    732,
                    733
                ],
                "self._as_list.items": [
                    173
                ],
                "isspace": [
                    185
                ],
                "line": [
                    203,
                    204,
                    205,
                    849,
                    850,
                    882,
                    185,
                    187,
                    828,
                    191
                ],
                "new_part": [
                    187,
                    188,
                    189
                ],
                "line.lstrip": [
                    187
                ],
                "line.split": [
                    828,
                    191
                ],
                "value.strip": [
                    192,
                    671
                ],
                "h": [
                    202,
                    205,
                    206
                ],
                "cls": [
                    202
                ],
                "_CRLF_RE.split": [
                    203
                ],
                "headers": [
                    774,
                    775,
                    203,
                    721,
                    786,
                    723,
                    348
                ],
                "h.parse_line": [
                    205
                ],
                "__copy__": [
                    237
                ],
                "copy": [
                    237,
                    366
                ],
                "lines": [
                    240,
                    242,
                    243
                ],
                "self.get_all": [
                    241
                ],
                "lines.append": [
                    242
                ],
                "__unicode__": [
                    245
                ],
                "__str__": [
                    245
                ],
                "start_line": [
                    344,
                    343
                ],
                "method": [
                    344,
                    345,
                    834,
                    828
                ],
                "uri": [
                    344,
                    346,
                    364
                ],
                "version": [
                    833,
                    834,
                    344,
                    347,
                    828,
                    831
                ],
                "self.method": [
                    345
                ],
                "self.uri": [
                    424,
                    346
                ],
                "self.version": [
                    408,
                    377,
                    347
                ],
                "self.headers": [
                    384,
                    386,
                    356,
                    460,
                    462,
                    471,
                    348
                ],
                "self.body": [
                    460,
                    349
                ],
                "body": [
                    740,
                    349,
                    727
                ],
                "context": [
                    352,
                    353,
                    354
                ],
                "connection": [
                    352,
                    359
                ],
                "self.remote_ip": [
                    353
                ],
                "self.protocol": [
                    424,
                    354
                ],
                "self.host": [
                    424,
                    356,
                    357
                ],
                "host": [
                    936,
                    938,
                    356,
                    933
                ],
                "self.headers.get": [
                    460,
                    356
                ],
                "self.host_name": [
                    357
                ],
                "split_host_and_port": [
                    357
                ],
                "self.host.lower": [
                    357
                ],
                "self.files": [
                    461,
                    358
                ],
                "files": [
                    787,
                    740,
                    358
                ],
                "self.connection": [
                    410,
                    419,
                    453,
                    359
                ],
                "self.server_connection": [
                    360
                ],
                "server_connection": [
                    360
                ],
                "self._start_time": [
                    361,
                    429,
                    431
                ],
                "time.time": [
                    361,
                    420,
                    429
                ],
                "time": [
                    361,
                    420,
                    429,
                    806
                ],
                "self._finish_time": [
                    362,
                    428,
                    420,
                    431
                ],
                "self.path": [
                    364
                ],
                "sep": [
                    738,
                    364
                ],
                "self.query": [
                    364,
                    365
                ],
                "uri.partition": [
                    364
                ],
                "self.arguments": [
                    465,
                    365,
                    366
                ],
                "parse_qs_bytes": [
                    365,
                    727
                ],
                "self.query_arguments": [
                    366
                ],
                "copy.deepcopy": [
                    366
                ],
                "self.body_arguments": [
                    464,
                    461,
                    367
                ],
                "self._cookies": [
                    392,
                    398,
                    383
                ],
                "Cookie.SimpleCookie": [
                    383
                ],
                "Cookie": [
                    383
                ],
                "parsed": [
                    386,
                    390
                ],
                "parse_cookie": [
                    386
                ],
                "parsed.items": [
                    390
                ],
                "chunk": [
                    1008,
                    1009,
                    1010,
                    1014,
                    407,
                    410
                ],
                "self.version.startswith": [
                    408
                ],
                "self.connection.write": [
                    410
                ],
                "callback": [
                    410
                ],
                "self.connection.finish": [
                    419
                ],
                "self.connection.stream.socket.getpeercert": [
                    453
                ],
                "self.connection.stream.socket": [
                    453
                ],
                "self.connection.stream": [
                    453
                ],
                "binary_form": [
                    454
                ],
                "parse_body_arguments": [
                    459
                ],
                "self.body_arguments.items": [
                    464
                ],
                "extend": [
                    465,
                    733
                ],
                "self.arguments.setdefault": [
                    465
                ],
                "attrs": [
                    468,
                    469
                ],
                "n": [
                    973,
                    971,
                    469
                ],
                "self.__class__.__name__": [
                    471
                ],
                "self.__class__": [
                    471
                ],
                "parsed_url": [
                    608,
                    611,
                    619,
                    620,
                    621,
                    622,
                    624,
                    606
                ],
                "urlparse": [
                    606
                ],
                "url": [
                    625,
                    618,
                    606
                ],
                "parsed_query": [
                    608,
                    609,
                    611,
                    612,
                    617
                ],
                "parse_qsl": [
                    608,
                    611
                ],
                "parsed_url.query": [
                    608,
                    611
                ],
                "parsed_query.extend": [
                    609,
                    612
                ],
                "args.items": [
                    609
                ],
                "err": [
                    616,
                    614
                ],
                "final_query": [
                    617,
                    623
                ],
                "urlencode": [
                    617
                ],
                "urlunparse": [
                    618
                ],
                "ObjectDict": [
                    628
                ],
                "unit": [
                    672,
                    670,
                    671
                ],
                "_": [
                    674,
                    670
                ],
                "range_header.partition": [
                    670
                ],
                "range_header": [
                    670
                ],
                "unit.strip": [
                    671
                ],
                "start_b": [
                    674,
                    676
                ],
                "end_b": [
                    674,
                    677
                ],
                "value.partition": [
                    674
                ],
                "start": [
                    676,
                    681,
                    683,
                    687,
                    700,
                    702
                ],
                "_int_or_none": [
                    676,
                    677
                ],
                "end": [
                    866,
                    867,
                    868,
                    677,
                    869,
                    870,
                    680,
                    871,
                    682,
                    683,
                    684,
                    873,
                    686,
                    687,
                    701,
                    702
                ],
                "total": [
                    701,
                    702
                ],
                "val": [
                    706,
                    707,
                    709,
                    1010,
                    1014,
                    1015,
                    1016,
                    1018
                ],
                "val.strip": [
                    706,
                    1015
                ],
                "gen_log.warning": [
                    772,
                    745,
                    778,
                    782,
                    722,
                    729,
                    764
                ],
                "gen_log": [
                    772,
                    745,
                    778,
                    782,
                    722,
                    729,
                    764
                ],
                "content_type.startswith": [
                    725,
                    734
                ],
                "content_type": [
                    736,
                    725,
                    734
                ],
                "uri_arguments": [
                    730,
                    731,
                    727
                ],
                "e": [
                    729,
                    745
                ],
                "uri_arguments.items": [
                    731
                ],
                "arguments.setdefault": [
                    733,
                    791
                ],
                "arguments": [
                    740,
                    733,
                    791
                ],
                "fields": [
                    736,
                    737
                ],
                "content_type.split": [
                    736
                ],
                "field": [
                    737,
                    738
                ],
                "partition": [
                    738
                ],
                "field.strip": [
                    738
                ],
                "parse_multipart_form_data": [
                    740
                ],
                "utf8": [
                    740
                ],
                "boundary.startswith": [
                    760
                ],
                "boundary": [
                    760,
                    761,
                    762,
                    766
                ],
                "boundary.endswith": [
                    760
                ],
                "final_boundary_index": [
                    762,
                    763,
                    766
                ],
                "data.rfind": [
                    762
                ],
                "data": [
                    762,
                    766
                ],
                "parts": [
                    882,
                    883,
                    885,
                    766,
                    767
                ],
                "split": [
                    766
                ],
                "part": [
                    768,
                    770,
                    774,
                    777,
                    780,
                    767
                ],
                "eoh": [
                    770,
                    771,
                    780,
                    774
                ],
                "part.find": [
                    770
                ],
                "HTTPHeaders.parse": [
                    774
                ],
                "decode": [
                    774
                ],
                "disp_header": [
                    776,
                    775
                ],
                "headers.get": [
                    786,
                    775
                ],
                "disposition": [
                    776,
                    777
                ],
                "disp_params": [
                    776,
                    781,
                    784,
                    785,
                    788
                ],
                "_parse_header": [
                    776
                ],
                "part.endswith": [
                    777
                ],
                "disp_params.get": [
                    785,
                    781
                ],
                "ctype": [
                    786,
                    789
                ],
                "files.setdefault": [
                    787
                ],
                "HTTPFile": [
                    787
                ],
                "ts": [
                    804,
                    806,
                    807,
                    808,
                    809,
                    811,
                    812
                ],
                "numbers.Real": [
                    804
                ],
                "numbers": [
                    804
                ],
                "time.struct_time": [
                    806
                ],
                "calendar.timegm": [
                    809,
                    807
                ],
                "calendar": [
                    809,
                    807
                ],
                "datetime.datetime": [
                    808
                ],
                "datetime": [
                    808
                ],
                "ts.utctimetuple": [
                    809
                ],
                "email.utils.formatdate": [
                    812
                ],
                "email.utils": [
                    812
                ],
                "email": [
                    812
                ],
                "RequestStartLine": [
                    834,
                    815
                ],
                "collections.namedtuple": [
                    837,
                    815
                ],
                "path": [
                    834,
                    828
                ],
                "HTTPInputError": [
                    832,
                    852,
                    830
                ],
                "re.match": [
                    850,
                    931,
                    831
                ],
                "ResponseStartLine": [
                    853,
                    837
                ],
                "match": [
                    931,
                    932,
                    933,
                    934,
                    850,
                    851,
                    853,
                    854
                ],
                "match.group": [
                    934,
                    853,
                    854,
                    933
                ],
                "s": [
                    864,
                    865,
                    866,
                    867,
                    868,
                    870,
                    871,
                    873
                ],
                "s.find": [
                    866,
                    868
                ],
                "s.count": [
                    867
                ],
                "f": [
                    872,
                    871
                ],
                "f.strip": [
                    872
                ],
                "_parseparam": [
                    882
                ],
                "pdict": [
                    896,
                    906,
                    910,
                    884,
                    893,
                    895
                ],
                "p": [
                    885,
                    886,
                    888,
                    889,
                    895
                ],
                "i": [
                    992,
                    970,
                    973,
                    974,
                    975,
                    977,
                    886,
                    887,
                    888,
                    889,
                    986,
                    988,
                    990
                ],
                "p.find": [
                    886
                ],
                "lower": [
                    888
                ],
                "strip": [
                    888,
                    889
                ],
                "replace": [
                    892
                ],
                "value.replace": [
                    892
                ],
                "out": [
                    912,
                    916,
                    915,
                    908
                ],
                "pdict.items": [
                    910
                ],
                "out.append": [
                    912,
                    915
                ],
                "doctest.DocTestSuite": [
                    921
                ],
                "doctest": [
                    921
                ],
                "netloc": [
                    936,
                    931
                ],
                "port": [
                    937,
                    938,
                    934
                ],
                "_OctalPatt": [
                    941,
                    974
                ],
                "_QuotePatt": [
                    942,
                    975
                ],
                "_nulljoin": [
                    993,
                    943
                ],
                "res": [
                    993,
                    972,
                    977,
                    986,
                    987,
                    990,
                    991
                ],
                "o_match": [
                    974,
                    976,
                    981,
                    982,
                    985
                ],
                "_OctalPatt.search": [
                    974
                ],
                "q_match": [
                    975,
                    976,
                    983,
                    984,
                    985
                ],
                "_QuotePatt.search": [
                    975
                ],
                "res.append": [
                    977,
                    986,
                    987,
                    990,
                    991
                ],
                "j": [
                    992,
                    980,
                    982,
                    985,
                    990,
                    991
                ],
                "o_match.start": [
                    982
                ],
                "q_match.start": [
                    984
                ],
                "cookiedict": [
                    1018,
                    1019,
                    1007
                ],
                "cookie.split": [
                    1008
                ],
                "cookie": [
                    1008
                ],
                "chunk.split": [
                    1010
                ],
                "key.strip": [
                    1015
                ],
                "_unquote_cookie": [
                    1018
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tornado_9/tornado/test/httputil_test.py",
                "test_function": "test_url_concat_none_params",
                "test_function_code": "    def test_url_concat_none_params(self):\n        url = url_concat(\n            \"https://localhost/path?r=1&t=2\",\n            None,\n        )\n        self.assertEqual(url, \"https://localhost/path?r=1&t=2\")",
                "test_error": "TypeError: 'args' parameter should be dict, list or tuple. Not <class 'NoneType'>",
                "full_test_error": "self = <tornado.test.httputil_test.TestUrlConcat testMethod=test_url_concat_none_params>\n\n    def test_url_concat_none_params(self):\n        url = url_concat(\n            \"https://localhost/path?r=1&t=2\",\n>           None,\n        )\n\ntornado/test/httputil_test.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = 'https://localhost/path?r=1&t=2', args = None\n\n    def url_concat(url, args):\n        \"\"\"Concatenate url and arguments regardless of whether\n        url has existing query parameters.\n    \n        ``args`` may be either a dictionary or a list of key-value pairs\n        (the latter allows for multiple values with the same key.\n    \n        >>> url_concat(\"http://example.com/foo\", dict(c=\"d\"))\n        'http://example.com/foo?c=d'\n        >>> url_concat(\"http://example.com/foo?a=b\", dict(c=\"d\"))\n        'http://example.com/foo?a=b&c=d'\n        >>> url_concat(\"http://example.com/foo?a=b\", [(\"c\", \"d\"), (\"c\", \"d2\")])\n        'http://example.com/foo?a=b&c=d&c=d2'\n        \"\"\"\n        parsed_url = urlparse(url)\n        if isinstance(args, dict):\n            parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n            parsed_query.extend(args.items())\n        elif isinstance(args, list) or isinstance(args, tuple):\n            parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n            parsed_query.extend(args)\n        else:\n            err = \"'args' parameter should be dict, list or tuple. Not {0}\".format(\n                type(args))\n>           raise TypeError(err)\nE           TypeError: 'args' parameter should be dict, list or tuple. Not <class 'NoneType'>\n\ntornado/httputil.py:616: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}