{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    # If total and n are defined and n is greater than total, reset total\n\n    if total and n > total:\n        total = None\n    \n    # Function to format elapsed time into a string and calculate remaining time\n    def format_interval(t):\n        # ... omitted code ...\n        pass\n    \n    # If rate is not manual, calculate it\n    if rate is None and elapsed:\n        rate = n / elapsed\n    inv_rate = 1 / rate if (rate and (rate < 1)) else None\n    \n    # Function to format the size of the rate\n    def format_sizeof(num, suffix=''):\n        # ... omitted code ...\n        pass\n        \n    rate_fmt = ((format_sizeof(inv_rate if inv_rate else rate)\n                if unit_scale else\n                '{0:5.2f}'.format(inv_rate if inv_rate else rate))\n                if rate else '?') \\\n        + ('s' if inv_rate else unit) + '/' + (unit if inv_rate else 's')\n    \n    # Format numbers depending on unit scale\n    if unit_scale:\n        n_fmt = format_sizeof(n)\n        total_fmt = format_sizeof(total) if total else None\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total)\n    \n    # If total is available, calculate percentage and remaining time\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = format_interval((total - n) / rate) if rate else '?'\n        # Format left and right sides of the bar\n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(\n                n_fmt, total_fmt, format_interval(elapsed), remaining_str, rate_fmt)\n        # If ncols is 0 or bar_format exists, return the formatted bar\n        if ncols == 0 or bar_format:\n            if bar_format and '{bar}' in bar_format:\n                # Use custom bar formatting and populate a dict with progress indicators\n                bar_args = {'n': n, 'n_fmt': n_fmt, 'total': total, 'total_fmt': total_fmt, 'percentage': percentage, \n                            'rate': rate if inv_rate is None else inv_rate, 'rate_noinv': rate, 'rate_noinv_fmt': \n                            ((format_sizeof(rate) if unit_scale else '{0:5.2f}'.format(rate)) if rate else '?') + 'it/s', \n                            'rate_fmt': rate_fmt, 'elapsed': format_interval(elapsed), 'remaining': remaining_str, \n                            'l_bar': l_bar, 'r_bar': r_bar, 'desc': prefix if prefix else ''}\n                l_bar_user, r_bar_user = bar_format.split('{bar}')  # Split the bar_format\n                return l_bar.format(**bar_args) + full_bar.format(**bar_args) + r_bar.format(**bar_args)\n        # Format the progress bar\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n        # Calculate the length of the bar and format it\n        if ascii:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 10), 10)\n            bar = '#' * bar_length\n            frac_bar = chr(48 + frac_bar_length) if frac_bar_length else ' '\n        else:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n            bar = chr(0x2588) * bar_length\n            frac_bar = chr(0x2590 - frac_bar_length) if frac_bar_length else ' '\n        # Formulate the full bar and return it\n        full_bar = bar + frac_bar\n        return l_bar + full_bar + r_bar\n    # If total is not available, return the prefix and stats\n    else:\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(\n            n_fmt, unit, format_interval(elapsed), rate_fmt)"
        }
    ]
}