{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 0,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 0,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n\n    # Calculate elapsed time string\n\n    elapsed_str = \"{:02d}:{:02d}\".format(int(elapsed/60), int(elapsed % 60))  # format elapsed time\n    \n    # Calculate rate if not provided\n    if rate is None and elapsed:\n        rate = n / elapsed\n    \n    rate_fmt = '{0:5.2f}{1}/{2}'.format(rate, unit, 's' if rate < 1 else unit)  # format the rate\n    \n    # Calculate progress stats if total is known\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = \"{:02d}:{:02d}\".format(int((total - n) / rate / 60), int((total - n) / rate % 60))\n        \n        # Format the left and right sides of the bar\n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(n, total, elapsed_str, remaining_str, rate_fmt)\n    \n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n    \n        if bar_format:\n            bar_args = {'n': n, 'n_fmt': n, 'total': total, 'total_fmt': total, 'percentage': percentage, 'rate': rate,\n                        'rate_noinv': rate, 'rate_fmt': rate_fmt, 'elapsed': elapsed_str, 'remaining': remaining_str,\n                        'l_bar': l_bar, 'r_bar': r_bar, 'desc': prefix if prefix else ''}\n            return bar_format.format(**bar_args)\n    \n        # Format progress bar\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n        bar_length = int(frac * N_BARS)\n        \n        if ascii:\n            bar = ('#' * bar_length) + ('-' * (N_BARS - bar_length))\n        else:\n            bar = '\u2588' * bar_length + ' ' * (N_BARS - bar_length)\n    \n        full_bar = l_bar + bar + r_bar\n        return full_bar\n    else:\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(n, unit, elapsed_str, rate_fmt)"
        }
    ]
}