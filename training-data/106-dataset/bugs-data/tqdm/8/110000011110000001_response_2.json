{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    # ... (other parameters and code remain the same)\n\n\n    if bar_format:\n        # Custom bar formatting\n        bar_args = {\n            # ... (other bar_args remain the same)\n            'desc': prefix if prefix else '',\n            'bar': '',\n        }\n        if '{bar}' in bar_format:\n            # Format left/right sides of the bar\n            l_bar_user, r_bar_user = bar_format.split('{bar}')\n            l_bar = l_bar.format(**bar_args)\n            r_bar = r_bar.format(**bar_args)\n    \n            # Calculate the remaining space for the bar\n            N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n    \n            # Format the remaining space for the progress bar\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 10), 10)\n            if ascii:\n                bar = '#' * bar_length\n                frac_bar = chr(48 + frac_bar_length) if frac_bar_length else ' '\n            else:\n                bar = _unich(0x2588) * bar_length\n                frac_bar = _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n    \n            if bar_length < N_BARS:\n                full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 1, 0)\n            else:\n                full_bar = bar + ' ' * max(N_BARS - bar_length, 0)\n    \n            # Combine the bar parts\n            bar_args['bar'] = full_bar\n        else:\n            l_bar = l_bar.format(**bar_args)\n            r_bar = r_bar.format(**bar_args)\n    \n    return l_bar + r_bar"
        }
    ]
}