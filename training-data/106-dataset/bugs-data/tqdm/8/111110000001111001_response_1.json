{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "/tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                     ascii=False, unit='it', unit_scale=False, rate=None,\n                     bar_format=None):\n\n\n    if total and n > total:\n        total = None\n    \n    elapsed_str = '{:0>2}:{:0>2}'.format(\n        int(elapsed / 60), int(elapsed % 60))\n    \n    if rate is None and elapsed:\n        rate = n / elapsed\n    \n    rate_fmt = '{:.2f}'.format(rate) + (unit if rate else '?') + '/' + ('s' if rate and rate < 1 else unit)\n    \n    n_fmt = str(n)\n    total_fmt = str(total) if total else None\n    \n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = '{:0>2}:{:0>2}'.format(int((total - n) / rate / 60), int((total - n) / rate % 60))\n    \n        l_bar = (prefix if prefix else '') + \\\n            '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n    \n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n    \n        if bar_format:\n            if '{bar}' in bar_format:\n                l_bar_user, r_bar_user = bar_format.split('{bar}')\n                bar = l_bar_user + '#' * (ncols - len(l_bar_user) - len(r_bar_user)) + r_bar_user\n            else:\n                bar = bar_format\n    \n            return bar.format(bar=bar, n=n, n_fmt=n_fmt, total=total, total_fmt=total_fmt, percentage=percentage,\n                              rate=rate if rate else '?', elapsed=elapsed_str, remaining=remaining_str,\n                              desc=prefix if prefix else '')\n    \n        # Formatting progress bar\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n    \n        if ascii:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 10), 10)\n            bar = '#' * bar_length\n            frac_bar = '#' if frac_bar_length else ' '\n        else:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n            bar = _unich(0x2588) * bar_length\n            frac_bar = _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n    \n        if bar_length < N_BARS:\n            full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 1, 0)\n        else:\n            full_bar = bar + ' ' * max(N_BARS - bar_length, 0)\n    \n        return l_bar + full_bar + r_bar\n        pass\n    \n    else:\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(n_fmt, unit, elapsed_str, rate_fmt)   "
        }
    ]
}