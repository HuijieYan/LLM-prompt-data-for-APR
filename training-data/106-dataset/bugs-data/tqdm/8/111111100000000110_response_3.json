{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                     ascii=False, unit='it', unit_scale=False, rate=None,\n                     bar_format=None):\n\n    def format_interval(t):\n        # ... omitted code ...\n        pass\n    \n    def format_sizeof(num, suffix=''):\n        # ... omitted code ...\n        pass\n    \n    def format_sizeof(num, suffix=''):\n        # sanity check: total\n        if total and n > total:\n            total = None\n        elapsed_str = format_interval(elapsed)\n        rate_fmt = '{0:5.2f}s/{1}s'.format(rate, unit) if rate else '?'\n        if unit_scale:\n            n_fmt = format_sizeof(n)\n            total_fmt = format_sizeof(total) if total else ''\n        else:\n            n_fmt = str(n)\n            total_fmt = str(total) if total else str(n)\n        if total:\n            frac = n / total\n            percentage = frac * 100\n            remaining_str = format_interval((total - n) / rate) if rate else '?'\n            l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n            r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(\n                    n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n            if ncols == 0:\n                return l_bar[:-1] + r_bar[1:]\n            if bar_format:\n                bar_args = {'n': n,\n                            'n_fmt': n_fmt,\n                            'total': total,\n                            'total_fmt': total_fmt,\n                            'percentage': percentage,\n                            'rate': rate,\n                            'rate_noinv': rate,\n                            'rate_noinv_fmt': '{0:5.2f}it/s'.format(rate) if rate else '?it/s',\n                            'rate_fmt': rate_fmt,\n                            'elapsed': elapsed_str,\n                            'remaining': remaining_str,\n                            'l_bar': l_bar,\n                            'r_bar': r_bar,\n                            'desc': prefix if prefix else ''}\n                if '{bar}' in bar_format:\n                    l_bar_user, r_bar_user = bar_format.split('{bar}')\n                    l_bar, r_bar = l_bar.format(**bar_args), r_bar.format(**bar_args)\n                else:\n                    return bar_format.format(**bar_args)\n            N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 10), 10)\n            bar = '#' * bar_length\n            frac_bar = str(48 + frac_bar_length) if frac_bar_length else ' '\n            if bar_length < N_BARS:\n                full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 1, 0)\n            else:\n                full_bar = bar + ' ' * max(N_BARS - bar_length, 0)\n            return l_bar + full_bar + r_bar\n        else:\n            return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(n_fmt, unit, elapsed_str, rate_fmt)"
        }
    ]
}