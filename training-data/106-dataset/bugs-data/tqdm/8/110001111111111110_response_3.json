{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    ... (omitted code) ...\n    \"\"\"\n    \n    remaining_str = f\"{(total - n) / rate:.0f}\" if rate else '?'\n    inv_rate = 1 / rate if (rate and (rate < 1)) else None\n    rate_fmt = ((format_sizeof(inv_rate if inv_rate else rate)\n                 if unit_scale else\n                 f'{inv_rate if inv_rate else rate:5.2f}')\n                 if rate else '?') \\\n        + ('s' if inv_rate else unit) + '/' + (unit if inv_rate else 's')\n    \n    if unit_scale:\n        n_fmt = format_sizeof(n)\n        total_fmt = format_sizeof(total) if total else None\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total) if total else None\n    \n    if total:\n        percentage = (n / total) * 100\n        remaining_str = format_interval((total - n) / rate) if rate else '?'\n        l_bar = (f\"{prefix}%3.0f|\" % percentage) if prefix else f\"{percentage:3.0f}%|\"\n        r_bar = f\"| {n_fmt}/{total_fmt} [{format_interval(elapsed)}<{remaining_str}, {rate_fmt}]\"\n        \n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n    \n        if bar_format:\n            l_bar_user, r_bar_user = bar_format.split('{bar}')\n            full_bar = f\"{l_bar_user}{l_bar}{r_bar}{r_bar_user}\"\n            return full_bar.format(**locals())\n    \n        N_BARS = max(ncols - len(l_bar) - len(r_bar), 1) if ncols else 10\n    \n        if ascii:\n            bar_length, frac_bar_length = divmod(int((n / total) * N_BARS * 10), 10)\n            bar = '#' * bar_length\n            frac_bar = str(48 + frac_bar_length) if frac_bar_length else ' '\n        else:\n            bar_length, frac_bar_length = divmod(int((n / total) * N_BARS * 8), 8)\n            bar = chr(9608) * bar_length\n            frac_bar = unichr(9600 + frac_bar_length) if frac_bar_length else ' '\n    \n        full_bar = (bar + frac_bar).ljust(N_BARS, ' ')\n        return l_bar + full_bar + r_bar\n    else:\n        return (f\"{prefix}{n_fmt}{unit} [{format_interval(elapsed)}, {rate_fmt}]\")"
        }
    ]
}