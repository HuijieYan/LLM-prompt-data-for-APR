{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    \n    Parameters\n    ----------\n    # ... (other parameters)\n    \n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: '{l_bar}{bar}{r_bar}'], where l_bar is\n        '{desc}{percentage:3.0f}%|' and r_bar is\n        '| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'\n        Possible vars: bar, n, n_fmt, total, total_fmt, percentage,\n        rate, rate_fmt, elapsed, remaining, l_bar, r_bar, desc.\n    \n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n    \n    # ... (other code)\n    \n    if bar_format:\n        # Custom bar formatting\n        bar_args = {'n': n,\n                    'n_fmt': format_sizeof(n),\n                    'total': total,\n                    'total_fmt': format_sizeof(total) if total else None,\n                    'percentage': percentage,\n                    'rate': rate if inv_rate is None else inv_rate,\n                    'rate_noinv': rate,\n                    'rate_noinv_fmt': ((format_sizeof(rate)\n                                        if unit_scale else\n                                        '{0:5.2f}'.format(rate))\n                                        if rate else '?') + 'it/s',\n                    'rate_fmt': rate_fmt,\n                    'elapsed': elapsed_str,\n                    'remaining': remaining_str,\n                    'l_bar': prefix if prefix else '',\n                    'r_bar': ''\n                    }\n    \n        # Interpolate supplied bar format with the dictionary\n        return bar_format.format(**bar_args)"
        }
    ]
}