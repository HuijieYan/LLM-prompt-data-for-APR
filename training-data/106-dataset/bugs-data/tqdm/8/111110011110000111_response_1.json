{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None):\n\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    ...\n    \n    Parameters\n    ----------\n    ...\n    \n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n    \n    # sanity check: total\n    if total and n > total:\n        total = None\n    \n    format_interval = tqdm.format_interval\n    \n    # Calculate elapsed time\n    elapsed_str = format_interval(elapsed)\n    \n    # ... Other parts of the code remain the same ...\n    \n    if ncols == 0:\n        return prefix + '{0}{1} [{2}, {3}]'.format(n_fmt, unit, elapsed_str, rate_fmt)\n    \n    if bar_format:\n        l_bar, r_bar = '', ''\n        if '{bar}' in bar_format:\n            # Format left/right sides of the bar\n            l_bar, r_bar = bar_format.split('{bar}')\n            l_bar = l_bar.format(**bar_args)\n            r_bar = r_bar.format(**bar_args)\n        else:\n            # No progress bar, just format and return\n            return bar_format.format(**bar_args)\n    \n        # Formatting progress bar\n        remaining_space = ncols - len(l_bar) - len(r_bar)\n    \n        N_BARS = max(1, remaining_space) if ncols else 10\n    \n        # Format bar depending on availability of unicode/ascii chars\n        if ascii:\n            # Format bar for ASCII characters\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 10), 10)\n    \n            bar = '#' * bar_length\n            frac_bar = chr(48 + frac_bar_length) if frac_bar_length else ' '\n        else:\n            # Format bar for Unicode characters\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n    \n            bar = _unich(0x2588) * bar_length\n            frac_bar = _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n    \n        # Whitespace padding\n        if bar_length < N_BARS:\n            full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 1, 0)\n        else:\n            full_bar = bar + ' ' * max(N_BARS - bar_length, 0)\n    \n        # Piece together the bar parts\n        return l_bar + full_bar + r_bar\n    else:\n        return prefix + '{0}{1} [{2}, {3}]'.format(n_fmt, unit, elapsed_str, rate_fmt)"
        }
    ]
}