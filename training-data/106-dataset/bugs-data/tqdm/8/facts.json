{
    "1.1.1": "@staticmethod\ndef format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    \n\n    # sanity check: total\n    if total and n > total:\n        total = None\n\n    format_interval = tqdm.format_interval\n    elapsed_str = format_interval(elapsed)\n\n    # if unspecified, attempt to use rate = average speed\n    # (we allow manual override since predicting time is an arcane art)\n    if rate is None and elapsed:\n        rate = n / elapsed\n    inv_rate = 1 / rate if (rate and (rate < 1)) else None\n    format_sizeof = tqdm.format_sizeof\n    rate_fmt = ((format_sizeof(inv_rate if inv_rate else rate)\n                if unit_scale else\n                '{0:5.2f}'.format(inv_rate if inv_rate else rate))\n                if rate else '?') \\\n        + ('s' if inv_rate else unit) + '/' + (unit if inv_rate else 's')\n\n    if unit_scale:\n        n_fmt = format_sizeof(n)\n        total_fmt = format_sizeof(total) if total else None\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total)\n\n    # total is known: we can predict some stats\n    if total:\n        # fractional and percentage progress\n        frac = n / total\n        percentage = frac * 100\n\n        remaining_str = format_interval((total - n) / rate) \\\n            if rate else '?'\n\n        # format the stats displayed to the left and right sides of the bar\n        l_bar = (prefix if prefix else '') + \\\n            '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(\n                n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        if bar_format:\n            # Custom bar formatting\n            # Populate a dict with all available progress indicators\n            bar_args = {'n': n,\n                        'n_fmt': n_fmt,\n                        'total': total,\n                        'total_fmt': total_fmt,\n                        'percentage': percentage,\n                        'rate': rate if inv_rate is None else inv_rate,\n                        'rate_noinv': rate,\n                        'rate_noinv_fmt': ((format_sizeof(rate)\n                                                if unit_scale else\n                                                '{0:5.2f}'.format(rate))\n                                                if rate else '?') + 'it/s',\n                        'rate_fmt': rate_fmt,\n                        'elapsed': elapsed_str,\n                        'remaining': remaining_str,\n                        'l_bar': l_bar,\n                        'r_bar': r_bar,\n                        'desc': prefix if prefix else '',\n                        # 'bar': full_bar  # replaced by procedure below\n                        }\n\n            # Interpolate supplied bar format with the dict\n            if '{bar}' in bar_format:\n                # Format left/right sides of the bar, and format the bar\n                # later in the remaining space (avoid breaking display)\n                l_bar_user, r_bar_user = bar_format.split('{bar}')\n                l_bar, r_bar = l_bar.format(**bar_args), r_bar.format(**bar_args)\n            else:\n                # Else no progress bar, we can just format and return\n                return bar_format.format(**bar_args)\n\n        # Formatting progress bar\n        # space available for bar's display\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols \\\n            else 10\n\n        # format bar depending on availability of unicode/ascii chars\n        if ascii:\n            bar_length, frac_bar_length = divmod(\n                int(frac * N_BARS * 10), 10)\n\n            bar = '#' * bar_length\n            frac_bar = chr(48 + frac_bar_length) if frac_bar_length \\\n                else ' '\n\n        else:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n\n            bar = _unich(0x2588) * bar_length\n            frac_bar = _unich(0x2590 - frac_bar_length) \\\n                if frac_bar_length else ' '\n\n        # whitespace padding\n        if bar_length < N_BARS:\n            full_bar = bar + frac_bar + \\\n                ' ' * max(N_BARS - bar_length - 1, 0)\n        else:\n            full_bar = bar + \\\n                ' ' * max(N_BARS - bar_length, 0)\n\n        # Piece together the bar parts\n        return l_bar + full_bar + r_bar\n\n    # no total: no progressbar, ETA, just progress stats\n    else:\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(\n            n_fmt, unit, elapsed_str, rate_fmt)\n",
    "1.1.2": "Return a string-based progress bar given some parameters\n\nParameters\n----------\nn  : int\n    Number of finished iterations.\ntotal  : int\n    The expected total number of iterations. If meaningless (), only\n    basic progress statistics are displayed (no ETA).\nelapsed  : float\n    Number of seconds passed since start.\nncols  : int, optional\n    The width of the entire output message. If specified,\n    dynamically resizes the progress meter to stay within this bound\n    [default: None]. The fallback meter width is 10 for the progress\n    bar + no limit for the iterations counter and statistics. If 0,\n    will not print any meter (only stats).\nprefix  : str, optional\n    Prefix message (included in total width) [default: ''].\nascii  : bool, optional\n    If not set, use unicode (smooth blocks) to fill the meter\n    [default: False]. The fallback is to use ASCII characters\n    (1-9 #).\nunit  : str, optional\n    The iteration unit [default: 'it'].\nunit_scale  : bool, optional\n    If set, the number of iterations will printed with an\n    appropriate SI metric prefix (K = 10^3, M = 10^6, etc.)\n    [default: False].\nrate  : float, optional\n    Manual override for iteration rate.\n    If [default: None], uses n/elapsed.\nbar_format  : str, optional\n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where l_bar is\n    '{desc}{percentage:3.0f}%|' and r_bar is\n    '| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'\n    Possible vars: bar, n, n_fmt, total, total_fmt, percentage,\n    rate, rate_fmt, elapsed, remaining, l_bar, r_bar, desc.\n\nReturns\n-------\nout  : Formatted meter and stats, ready to display.",
    "1.2.1": "class tqdm(object)",
    "1.2.2": "Decorate an iterable object, returning an iterator which acts exactly\nlike the original iterable, but prints a dynamically updating\nprogressbar every time a value is requested.",
    "1.2.3": [
        "format_sizeof(num, suffix='')",
        "format_interval(t)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_8/tqdm/_tqdm.py",
    "1.3.2": [
        "format_sizeof(num, suffix='')",
        "format_interval(t)"
    ],
    "1.4.1": [
        "def test_format_meter():\n    \"\"\" Test statistics and progress bar formatting \"\"\"\n    try:\n        unich = unichr\n    except NameError:\n        unich = chr\n\n    format_meter = tqdm.format_meter\n\n    assert format_meter(0, 1000, 13) == \\\n        \"  0%|          | 0/1000 [00:13<?, ?it/s]\"\n    assert format_meter(0, 1000, 13, ncols=68, prefix='desc: ') == \\\n        \"desc:   0%|                                | 0/1000 [00:13<?, ?it/s]\"\n    assert format_meter(231, 1000, 392) == \\\n        \" 23%|\" + unich(0x2588) * 2 + unich(0x258e) + \\\n        \"       | 231/1000 [06:32<21:44,  1.70s/it]\"\n    assert format_meter(10000, 1000, 13) == \\\n        \"10000it [00:13, 769.23it/s]\"\n    assert format_meter(231, 1000, 392, ncols=56, ascii=True) == \\\n        \" 23%|\" + '#' * 3 + '6' + \\\n        \"            | 231/1000 [06:32<21:44,  1.70s/it]\"\n    assert format_meter(100000, 1000, 13, unit_scale=True, unit='iB') == \\\n        \"100KiB [00:13, 7.69KiB/s]\"\n    assert format_meter(100, 1000, 12, ncols=0, rate=7.33) == \\\n        \" 10% 100/1000 [00:12<02:02,  7.33it/s]\"\n    # Check that bar_format correctly adapts {bar} size to the rest\n    assert format_meter(20, 100, 12, ncols=13, rate=8.1,\n                        bar_format=r'{l_bar}{bar}|{n_fmt}/{total_fmt}') == \\\n        \" 20%|\" + unich(0x258f) + \"|20/100\"\n    assert format_meter(20, 100, 12, ncols=14, rate=8.1,\n                        bar_format=r'{l_bar}{bar}|{n_fmt}/{total_fmt}') == \\\n        \" 20%|\" + unich(0x258d) + \" |20/100\""
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/tqdm_8/tqdm/tests/tests_tqdm.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert ' 20%|\u258f| 20/100 [00:12<00:09,  8.10it/s]' == ' 20%|\u258f|20/100'\nE         -  20%|\u258f|20/100\nE         +  20%|\u258f| 20/100 [00:12<00:09,  8.10it/s]"
        ]
    ],
    "2.1.2": [
        [
            "def test_format_meter():\n        \"\"\" Test statistics and progress bar formatting \"\"\"\n        try:\n            unich = unichr\n        except NameError:\n            unich = chr\n    \n        format_meter = tqdm.format_meter\n    \n        assert format_meter(0, 1000, 13) == \\\n            \"  0%|          | 0/1000 [00:13<?, ?it/s]\"\n        assert format_meter(0, 1000, 13, ncols=68, prefix='desc: ') == \\\n            \"desc:   0%|                                | 0/1000 [00:13<?, ?it/s]\"\n        assert format_meter(231, 1000, 392) == \\\n            \" 23%|\" + unich(0x2588) * 2 + unich(0x258e) + \\\n            \"       | 231/1000 [06:32<21:44,  1.70s/it]\"\n        assert format_meter(10000, 1000, 13) == \\\n            \"10000it [00:13, 769.23it/s]\"\n        assert format_meter(231, 1000, 392, ncols=56, ascii=True) == \\\n            \" 23%|\" + '#' * 3 + '6' + \\\n            \"            | 231/1000 [06:32<21:44,  1.70s/it]\"\n        assert format_meter(100000, 1000, 13, unit_scale=True, unit='iB') == \\\n            \"100KiB [00:13, 7.69KiB/s]\"\n        assert format_meter(100, 1000, 12, ncols=0, rate=7.33) == \\\n            \" 10% 100/1000 [00:12<02:02,  7.33it/s]\"\n        # Check that bar_format correctly adapts {bar} size to the rest\n>       assert format_meter(20, 100, 12, ncols=13, rate=8.1,\n                            bar_format=r'{l_bar}{bar}|{n_fmt}/{total_fmt}') == \\\n            \" 20%|\" + unich(0x258f) + \"|20/100\"",
            "\ntqdm/tests/tests_tqdm.py:218: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "total": "1000",
                "n": "0",
                "elapsed": "13",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''"
            },
            {
                "elapsed_str": "'00:13'",
                "rate": "0.0",
                "rate_fmt": "'?it/s'",
                "n_fmt": "'0'",
                "total_fmt": "'1000'",
                "frac": "0.0",
                "percentage": "0.0",
                "remaining_str": "'?'",
                "l_bar": "'  0%",
                "r_bar": "'",
                "N_BARS": "10",
                "bar_length": "0",
                "frac_bar_length": "0",
                "bar": "''",
                "frac_bar": "' '",
                "full_bar": "'          '"
            }
        ],
        [
            {
                "total": "1000",
                "n": "0",
                "elapsed": "13",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "'desc: '",
                "ncols": "68"
            },
            {
                "elapsed_str": "'00:13'",
                "rate": "0.0",
                "rate_fmt": "'?it/s'",
                "n_fmt": "'0'",
                "total_fmt": "'1000'",
                "frac": "0.0",
                "percentage": "0.0",
                "remaining_str": "'?'",
                "l_bar": "'desc:   0%",
                "r_bar": "'",
                "N_BARS": "32",
                "bar_length": "0",
                "frac_bar_length": "0",
                "bar": "''",
                "frac_bar": "' '",
                "full_bar": "'                                '"
            }
        ],
        [
            {
                "total": "1000",
                "n": "231",
                "elapsed": "392",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''"
            },
            {
                "elapsed_str": "'06:32'",
                "rate": "0.5892857142857143",
                "inv_rate": "1.696969696969697",
                "rate_fmt": "' 1.70s/it'",
                "n_fmt": "'231'",
                "total_fmt": "'1000'",
                "frac": "0.231",
                "percentage": "23.1",
                "remaining_str": "'21:44'",
                "l_bar": "' 23%",
                "r_bar": "'",
                "N_BARS": "10",
                "bar_length": "2",
                "frac_bar_length": "2",
                "bar": "'\u2588\u2588'",
                "frac_bar": "'\u258e'",
                "full_bar": "'\u2588\u2588\u258e       '"
            }
        ],
        [
            {
                "total": "1000",
                "n": "231",
                "elapsed": "392",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''",
                "ncols": "56"
            },
            {
                "elapsed_str": "'06:32'",
                "rate": "0.5892857142857143",
                "inv_rate": "1.696969696969697",
                "rate_fmt": "' 1.70s/it'",
                "n_fmt": "'231'",
                "total_fmt": "'1000'",
                "frac": "0.231",
                "percentage": "23.1",
                "remaining_str": "'21:44'",
                "l_bar": "' 23%",
                "r_bar": "'",
                "N_BARS": "16",
                "bar_length": "3",
                "frac_bar_length": "6",
                "bar": "'###'",
                "frac_bar": "'6'",
                "full_bar": "'###6            '"
            }
        ],
        [
            {
                "total": "1000",
                "n": "100",
                "elapsed": "12",
                "rate": "7.33",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''",
                "ncols": "0"
            },
            {
                "elapsed_str": "'00:12'",
                "rate_fmt": "' 7.33it/s'",
                "n_fmt": "'100'",
                "total_fmt": "'1000'",
                "frac": "0.1",
                "percentage": "10.0",
                "remaining_str": "'02:02'",
                "l_bar": "' 10%",
                "r_bar": "'"
            }
        ],
        [
            {
                "total": "100",
                "n": "20",
                "elapsed": "12",
                "rate": "8.1",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''",
                "ncols": "13",
                "bar_format": "'{l_bar}{bar}"
            },
            {
                "elapsed_str": "'00:12'",
                "rate_fmt": "' 8.10it/s'",
                "n_fmt": "'20'",
                "total_fmt": "'100'",
                "frac": "0.2",
                "percentage": "20.0",
                "remaining_str": "'00:09'",
                "l_bar": "' 20%",
                "r_bar": "'",
                "bar_args": "{'n': 20, 'n_fmt': '20', 'total': 100, 'total_fmt': '100', 'percentage': 20.0, 'rate': 8.1, 'rate_noinv': 8.1, 'rate_noinv_fmt': ' 8.10it/s', 'rate_fmt': ' 8.10it/s', 'elapsed': '00:12', 'remaining': '00:09', 'l_bar': ' 20%",
                "l_bar_user": "'{l_bar}'",
                "r_bar_user": "'",
                "N_BARS": "1",
                "bar_length": "0",
                "frac_bar_length": "1",
                "bar": "''",
                "frac_bar": "'\u258f'",
                "full_bar": "'\u258f'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str"
            },
            {
                "elapsed_str": "str",
                "rate": "float",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int"
            },
            {
                "elapsed_str": "str",
                "rate": "float",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str"
            },
            {
                "elapsed_str": "str",
                "rate": "float",
                "inv_rate": "float",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int"
            },
            {
                "elapsed_str": "str",
                "rate": "float",
                "inv_rate": "float",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "rate": "float",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int"
            },
            {
                "elapsed_str": "str",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "rate": "float",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int",
                "bar_format": "str"
            },
            {
                "elapsed_str": "str",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "bar_args": "dict",
                "l_bar_user": "str",
                "r_bar_user": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "total": "1000",
                "n": "0",
                "elapsed": "13",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''"
            },
            {
                "elapsed_str": "'00:13'",
                "rate": "0.0",
                "rate_fmt": "'?it/s'",
                "n_fmt": "'0'",
                "total_fmt": "'1000'",
                "frac": "0.0",
                "percentage": "0.0",
                "remaining_str": "'?'",
                "l_bar": "'  0%",
                "r_bar": "'",
                "N_BARS": "10",
                "bar_length": "0",
                "frac_bar_length": "0",
                "bar": "''",
                "frac_bar": "' '",
                "full_bar": "'          '"
            }
        ],
        [
            {
                "total": "1000",
                "n": "0",
                "elapsed": "13",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "'desc: '",
                "ncols": "68"
            },
            {
                "elapsed_str": "'00:13'",
                "rate": "0.0",
                "rate_fmt": "'?it/s'",
                "n_fmt": "'0'",
                "total_fmt": "'1000'",
                "frac": "0.0",
                "percentage": "0.0",
                "remaining_str": "'?'",
                "l_bar": "'desc:   0%",
                "r_bar": "'",
                "N_BARS": "32",
                "bar_length": "0",
                "frac_bar_length": "0",
                "bar": "''",
                "frac_bar": "' '",
                "full_bar": "'                                '"
            }
        ],
        [
            {
                "total": "1000",
                "n": "231",
                "elapsed": "392",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''"
            },
            {
                "elapsed_str": "'06:32'",
                "rate": "0.5892857142857143",
                "inv_rate": "1.696969696969697",
                "rate_fmt": "' 1.70s/it'",
                "n_fmt": "'231'",
                "total_fmt": "'1000'",
                "frac": "0.231",
                "percentage": "23.1",
                "remaining_str": "'21:44'",
                "l_bar": "' 23%",
                "r_bar": "'",
                "N_BARS": "10",
                "bar_length": "2",
                "frac_bar_length": "2",
                "bar": "'\u2588\u2588'",
                "frac_bar": "'\u258e'",
                "full_bar": "'\u2588\u2588\u258e       '"
            }
        ],
        [
            {
                "total": "1000",
                "n": "231",
                "elapsed": "392",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''",
                "ncols": "56"
            },
            {
                "elapsed_str": "'06:32'",
                "rate": "0.5892857142857143",
                "inv_rate": "1.696969696969697",
                "rate_fmt": "' 1.70s/it'",
                "n_fmt": "'231'",
                "total_fmt": "'1000'",
                "frac": "0.231",
                "percentage": "23.1",
                "remaining_str": "'21:44'",
                "l_bar": "' 23%",
                "r_bar": "'",
                "N_BARS": "16",
                "bar_length": "3",
                "frac_bar_length": "6",
                "bar": "'###'",
                "frac_bar": "'6'",
                "full_bar": "'###6            '"
            }
        ],
        [
            {
                "total": "1000",
                "n": "100",
                "elapsed": "12",
                "rate": "7.33",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''",
                "ncols": "0"
            },
            {
                "elapsed_str": "'00:12'",
                "rate_fmt": "' 7.33it/s'",
                "n_fmt": "'100'",
                "total_fmt": "'1000'",
                "frac": "0.1",
                "percentage": "10.0",
                "remaining_str": "'02:02'",
                "l_bar": "' 10%",
                "r_bar": "'"
            }
        ],
        [
            {
                "total": "100",
                "n": "20",
                "elapsed": "12",
                "rate": "8.1",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''",
                "ncols": "13",
                "bar_format": "'{l_bar}{bar}"
            },
            {
                "elapsed_str": "'00:12'",
                "rate_fmt": "' 8.10it/s'",
                "n_fmt": "'20'",
                "total_fmt": "'100'",
                "frac": "0.2",
                "percentage": "20.0",
                "remaining_str": "'00:09'",
                "l_bar": "' 20%",
                "r_bar": "'",
                "bar_args": "{'n': 20, 'n_fmt': '20', 'total': 100, 'total_fmt': '100', 'percentage': 20.0, 'rate': 8.1, 'rate_noinv': 8.1, 'rate_noinv_fmt': ' 8.10it/s', 'rate_fmt': ' 8.10it/s', 'elapsed': '00:12', 'remaining': '00:09', 'l_bar': ' 20%",
                "l_bar_user": "'{l_bar}'",
                "r_bar_user": "'",
                "N_BARS": "1",
                "bar_length": "0",
                "frac_bar_length": "1",
                "bar": "''",
                "frac_bar": "'\u258f'",
                "full_bar": "'\u258f'"
            }
        ],
        [
            {
                "total": "100",
                "n": "20",
                "elapsed": "12",
                "rate": "8.1",
                "unit_scale": "False",
                "unit": "'it'",
                "prefix": "''",
                "ncols": "14",
                "bar_format": "'{l_bar}{bar}"
            },
            {
                "elapsed_str": "'00:12'",
                "rate_fmt": "' 8.10it/s'",
                "n_fmt": "'20'",
                "total_fmt": "'100'",
                "frac": "0.2",
                "percentage": "20.0",
                "remaining_str": "'00:09'",
                "l_bar": "' 20%",
                "r_bar": "'",
                "bar_args": "{'n': 20, 'n_fmt': '20', 'total': 100, 'total_fmt': '100', 'percentage': 20.0, 'rate': 8.1, 'rate_noinv': 8.1, 'rate_noinv_fmt': ' 8.10it/s', 'rate_fmt': ' 8.10it/s', 'elapsed': '00:12', 'remaining': '00:09', 'l_bar': ' 20%",
                "l_bar_user": "'{l_bar}'",
                "r_bar_user": "'",
                "N_BARS": "2",
                "bar_length": "0",
                "frac_bar_length": "3",
                "bar": "''",
                "frac_bar": "'\u258d'",
                "full_bar": "'\u258d '"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str"
            },
            {
                "elapsed_str": "str",
                "rate": "float",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int"
            },
            {
                "elapsed_str": "str",
                "rate": "float",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str"
            },
            {
                "elapsed_str": "str",
                "rate": "float",
                "inv_rate": "float",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int"
            },
            {
                "elapsed_str": "str",
                "rate": "float",
                "inv_rate": "float",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "rate": "float",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int"
            },
            {
                "elapsed_str": "str",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "rate": "float",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int",
                "bar_format": "str"
            },
            {
                "elapsed_str": "str",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "bar_args": "dict",
                "l_bar_user": "str",
                "r_bar_user": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ],
        [
            {
                "total": "int",
                "n": "int",
                "elapsed": "int",
                "rate": "float",
                "unit_scale": "bool",
                "unit": "str",
                "prefix": "str",
                "ncols": "int",
                "bar_format": "str"
            },
            {
                "elapsed_str": "str",
                "rate_fmt": "str",
                "n_fmt": "str",
                "total_fmt": "str",
                "frac": "float",
                "percentage": "float",
                "remaining_str": "str",
                "l_bar": "str",
                "r_bar": "str",
                "bar_args": "dict",
                "l_bar_user": "str",
                "r_bar_user": "str",
                "N_BARS": "int",
                "bar_length": "int",
                "frac_bar_length": "int",
                "bar": "str",
                "frac_bar": "str",
                "full_bar": "str"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}