{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "/tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    ... (other comments)\n    \n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n    \n    # (previous code remains the same)\n    \n    if bar_format:\n        # Custom bar formatting\n        # Populate a dict with all available progress indicators\n        bar_args = {'n': n,\n                    'n_fmt': n_fmt,\n                    'total': total,\n                    'total_fmt': total_fmt,\n                    'percentage': percentage,\n                    'rate': rate if inv_rate is None else inv_rate,\n                    'rate_noinv': rate,\n                    'rate_noinv_fmt': ((format_sizeof(rate)\n                                        if unit_scale else\n                                        '{0:5.2f}'.format(rate))\n                                        if rate else '?') + unit,\n                    'rate_fmt': rate_fmt,\n                    'elapsed': elapsed_str,\n                    'remaining': remaining_str,\n                    'l_bar': prefix if prefix else '',\n                    'r_bar': '| {0}/{1} [{2}<{3}, {4}]'.format(\n                        n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt),\n                    'desc': ''\n                    }\n    \n        # Interpolate supplied bar format with the dict\n        l_bar_user, r_bar_user = bar_format.split('{bar}')\n        bar_length = ncols - len(l_bar_user.format(**bar_args)) - len(r_bar_user.format(**bar_args))\n    \n        bar = _unich(0x2588) * int(bar_length * frac)\n        frac_bar = _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n    \n        # Piece together the bar parts\n        full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 2, 0)\n    \n        return l_bar_user.format(**bar_args) + full_bar + r_bar_user.format(**bar_args)"
        }
    ]
}