{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    \n    Parameters\n    ----------\n    \n    # existing parameters\n    \n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: '{l_bar}{bar}{r_bar}'], where l_bar is\n        '{desc}{percentage:3.0f}%|' and r_bar is\n        '| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'\n        Possible vars: bar, n, n_fmt, total, total_fmt, percentage,\n        rate, rate_fmt, elapsed, remaining, l_bar, r_bar, desc.\n    \n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n    \n    if bar_format:\n        bar_args = {\n            'n': n,\n            'n_fmt': str(n),\n            'total': total,\n            'total_fmt': str(total),\n            'percentage': (n / total) * 100,\n            'rate': rate,\n            'rate_fmt': f'{rate:5.2f}s/it' if rate else '?it/s',\n            'elapsed_str': format_interval(elapsed),\n            'remaining_str': format_interval((total - n) / rate) if rate else '?',\n            'desc': prefix,\n            'bar': '#' * int((n / total) * 10)  # Adapt bar size based on percentage\n        }\n        \n        l_bar, r_bar = bar_format.format(**bar_args).split('{bar}')\n        full_bar = l_bar + bar_args['bar'] + r_bar\n    \n        return full_bar\n    \n    else:\n        # existing code for formatting progress bar without bar_format\n        pass"
        }
    ]
}