{
    "tqdm": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 24,
            "file_name": "contrib/__init__.py",
            "replace_code": "def tenumerate(iterable, start=0, total=None, tqdm_class=tqdm_auto,\n               **tqdm_kwargs):\n    import numpy as np\n    \"\"\"\n    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n    \n    Parameters\n    ----------\n    iterable : iterable\n        Input iterable to enumerate.\n    start : int, optional\n        Start index for enumeration.\n    total : int, optional\n        Total number of iterations, if known.\n    tqdm_class  : [default: tqdm.auto.tqdm].\n        Class to use for creating the progress bar.\n    tqdm_kwargs : dict, optional\n        Additional keyword arguments for tqdm.\n    \n    Returns\n    -------\n    enumerate object or np.ndenumerate object\n        Enumerate object if input is not an ndarray, else np.ndenumerate object.\n    \"\"\"\n    try:\n        import numpy as np\n    except ImportError:\n        pass\n    else:\n        if isinstance(iterable, np.ndarray):\n            return tqdm_class(np.ndenumerate(iterable), total=total or len(iterable), **tqdm_kwargs)\n    return enumerate(tqdm_class(iterable, start=start, **tqdm_kwargs))"
        }
    ]
}