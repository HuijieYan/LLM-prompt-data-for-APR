{
    "tqdm": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 24,
            "file_name": "contrib/__init__.py",
            "replace_code": "def tenumerate(iterable, start=0, total=None, tqdm_class=tqdm, **tqdm_kwargs):\n    from tqdm import tqdm\n    import numpy as np\n    \"\"\"\n    Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\n    \n    Parameters\n    ----------\n    iterable : sequence\n        The sequence to be enumerated.\n    start : int, optional\n        The starting index, usually 0 or 1. Default is 0.\n    total : int, optional\n        Total number of items. If not specified, len(iterable) is used.\n    tqdm_class : class, optional\n        Class to be used for displaying the progress bar. Default is tqdm.\n    **tqdm_kwargs : \n        Additional keyword arguments to be passed to the tqdm class.\n    \"\"\"    \n    try:\n        import numpy as np\n        if isinstance(iterable, np.ndarray):\n            return tqdm_class(np.ndenumerate(iterable), total=total or len(iterable), **tqdm_kwargs)\n    except ImportError:\n        pass\n    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))"
        }
    ]
}