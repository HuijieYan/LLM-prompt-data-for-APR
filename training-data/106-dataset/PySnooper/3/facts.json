{
    "1.1.1": "def get_write_function(output):\n    if output is None:\n        def write(s):\n            stderr = sys.stderr\n            stderr.write(s)\n    elif isinstance(output, (pycompat.PathLike, str)):\n        def write(s):\n            with open(output_path, 'a') as output_file:\n                output_file.write(s)\n    else:\n        assert isinstance(output, utils.WritableStream)\n        def write(s):\n            output.write(s)\n\n    return write\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pysnooper/pysnooper.py",
    "1.3.2": [
        "write(s)",
        "write(s)",
        "write(s)"
    ],
    "1.4.1": [
        "def test_file_output():\n\n    with temp_file_tools.create_temp_folder(prefix='pysnooper') as folder:\n        path = folder / 'foo.log'\n        @pysnooper.snoop(str(path))\n        def my_function(foo):\n            x = 7\n            y = 8\n            return y + x\n        result = my_function('baba')\n        assert result == 15\n        output = path.open().read()\n        assert_output(\n            output,\n            (\n                VariableEntry('foo', value_regex=\"u?'baba'\"),\n                CallEntry(),\n                LineEntry('x = 7'),\n                VariableEntry('x', '7'),\n                LineEntry('y = 8'),\n                VariableEntry('y', '8'),\n                LineEntry('return y + x'),\n                ReturnEntry('return y + x'),\n            )\n        )"
    ],
    "1.4.2": [
        "tests/test_pysnooper.py"
    ],
    "2.1.1": [
        [
            "E       NameError: name 'output_path' is not defined"
        ]
    ],
    "2.1.2": [
        [
            "def test_file_output():\n    \n        with temp_file_tools.create_temp_folder(prefix='pysnooper') as folder:\n            path = folder / 'foo.log'\n            @pysnooper.snoop(str(path))\n            def my_function(foo):\n                x = 7\n                y = 8\n                return y + x\n>           result = my_function('baba')\n\ntests/test_pysnooper.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/PySnooper_3/lib/python3.8/site-packages/decorator.py:232: in fun\n    return caller(func, *(extras + args), **kw)\npysnooper/pysnooper.py:72: in decorate\n    return function(*args, **kwargs)\ntests/test_pysnooper.py:178: in my_function\n    @pysnooper.snoop(str(path))\npysnooper/tracer.py:173: in trace\n    self.write('{indent}{newish_string}{name} = {value_repr}'.format(\npysnooper/tracer.py:114: in write\n    self._write(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = \"Starting var:.. foo = 'baba'\\n\"\n\n    def write(s):\n>       with open(output_path, 'a') as output_file:",
            "\npysnooper/pysnooper.py:26: NameError"
        ]
    ],
    "2.1.3": [
        [
            {
                "output": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooperleut8y32/foo.log'"
            },
            {
                "write": "<function get_write_function.<locals>.write at 0x10c5bf3a0>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "output": "str"
            },
            {
                "write": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "output": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnoopere861sg2m/foo.log'"
            },
            {
                "write": "<function get_write_function.<locals>.write at 0x10301c3a0>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "output": "str"
            },
            {
                "write": "function"
            }
        ]
    ],
    "3.1.1": [
        "NameError: global name 'output_path' is not defined\n"
    ],
    "3.1.2": [
        "PySnooper/pysnooper/pysnooper.py\n\nLine 26 in 6e3d797\n\n with open(output_path, 'a') as output_file: \nshould probably read\n\nwith open(output, 'a') as output_file:\n"
    ]
}