{
    "fastapi": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 158,
            "file_name": "fastapi/openapi/utils.py",
            "replace_code": "def get_openapi_path(\n    *, route: routing.APIRoute, model_name_map: Dict[Type, str]\n) -> Tuple[Dict, Dict, Dict]:\n    # existing code\n\n    # simplified response handling\n    responses = route.responses or {}\n    for (status, response) in responses.items():\n        assert isinstance(response, dict), \"An additional response must be a dict\"\n        field = route.response_fields.get(status)\n        if field:\n            response_schema, _, _ = field_schema(field, model_name_map=model_name_map, ref_prefix=REF_PREFIX)\n            response.setdefault(\"content\", {}).setdefault(route_response_media_type or \"application/json\", {})[\"schema\"] = response_schema\n        status_text: Optional[str] = status_code_ranges.get(str(status).upper()) or http.client.responses.get(int(status))\n        response.setdefault(\"description\", status_text or \"Additional Response\")\n        status_code_key = str(status).upper()\n        if status_code_key == \"DEFAULT\":\n            status_code_key = \"default\"\n        operation.setdefault(\"responses\", {})[status_code_key] = response\n    \n    # remaining code\n    return path, security_schemes, definitions",
            "imports": []
        }
    ]
}