{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: Field) -> Field:\n    use_type = field.type_\n    if issubclass(field.type_, BaseModel):\n        use_type = create_model(\n            field.type_.__name__,\n            __config__=field.type_.__config__,\n            **field.type_.__annotations__,\n        )\n    new_field = Field(\n        name=field.name,\n        type_=use_type,\n        default=field.default,\n        required=field.required,\n        model_config=field.model_config,\n        field_info=FieldInfo(None),\n        alias=field.alias,\n        class_validators=field.class_validators,\n        default=field.default,\n        required=field.required,\n        model_config=field.model_config,\n        schema=FieldInfo(None),\n        has_alias=field.has_alias,\n        allow_none=field.allow_none,\n        validate_always=field.validate_always,\n        validators=field.validators,\n        sub_fields=[\n            create_cloned_field(sub_field) for sub_field in field.sub_fields\n        ] if field.sub_fields else None,\n        key_field=create_cloned_field(field.key_field) if field.key_field else None,\n    )\n    return new_field",
            "imports": [
                "from pydantic import BaseModel, create_model, Field"
            ]
        }
    ]
}