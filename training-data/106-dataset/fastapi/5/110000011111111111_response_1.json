{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    original_type = field.type_\n    use_type = original_type\n    if lenient_issubclass(original_type, BaseModel):\n        original_type = cast(Type[BaseModel], original_type)\n        use_type = create_model(\n            original_type.__name__, __config__=original_type.__config__,\n            **original_type.__fields__\n        )\n    if PYDANTIC_1:\n        new_field = ModelField(\n            name=field.name,\n            type_=use_type,\n            class_validators=field.class_validators,\n            default=field.default,\n            required=field.required,\n            model_config=field.model_config,\n            field_info=field.field_info,\n        )\n    else:  # pragma: nocover\n        new_field = ModelField(  # type: ignore\n            name=field.name,\n            type_=use_type,\n            class_validators=field.class_validators,\n            default=field.default,\n            required=field.required,\n            model_config=field.model_config,\n            schema=FieldInfo(None),\n        )\n    new_field.has_alias = field.has_alias\n    new_field.alias = field.alias\n    new_field.validators = field.validators\n    new_field.parse_json = field.parse_json\n    new_field.shape = field.shape\n    new_field.validators = field.validators\n    if PYDANTIC_1:\n        new_field.set_validators(field.validators)\n    else:  # pragma: nocover\n        new_field.set_validators(field.validators)\n\n    return new_field",
            "import_list": [
                "from pydantic import BaseModel, create_model, FieldInfo, Field, BaseConfig, ModelField, PYDANTIC_1",
                "from typing import Type, cast"
            ]
        }
    ]
}