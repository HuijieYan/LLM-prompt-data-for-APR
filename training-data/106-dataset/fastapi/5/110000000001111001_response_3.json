{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n\n    original_type = field.type_\n    use_type = original_type\n    if is_dataclass(original_type):\n        original_type = original_type.__pydantic_model__\n    if issubclass(original_type, BaseModel):\n        copied_model_type = create_model(\n            original_type.__name__,\n            __config__=original_type.__config__,\n            __validators__=original_type.__validators__,\n        )\n        sub_fields = {}\n        for f in original_type.__fields__.values():\n            sub_fields[f.name] = f\n        copied_model_type.__fields__ = sub_fields\n        use_type = copied_model_type\n    \n    new_field = ModelField(\n        name=field.name,\n        type_=use_type,\n        class_validators={},\n        default=None,\n        required=field.required,\n        model_config=field.model_config or BaseConfig,\n        field_info=field.field_info or FieldInfo(None),\n        schema=field.schema or FieldInfo(None),\n    )\n    \n    # Copy other attributes if needed\n    \n    return new_field"
        }
    ]
}