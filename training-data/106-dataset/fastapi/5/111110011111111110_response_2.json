{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    original_type = field.type_\n    use_type = original_type\n    if original_type in [str, int, float, bool]:\n        new_field = ModelField(\n            name=field.name,\n            type_=Field(use_type, alias=field.alias),\n            default=None,\n            required=field.required,\n        )\n    elif field.type_.__name__ == 'Optional':\n        field_type = field.type_.__args__[0]\n        new_field = ModelField(\n            name=field.name,\n            type_=Field(field_type, alias=field.alias, default=None),\n            default=None,\n            required=field.required,\n        )\n    else:\n        field_type_params_info = original_type.__annotations__\n        set_pydantic_model_as_field_type = {\n            \"alias\": field.alias,\n            'default': None,\n            'required': field.required\n        }\n        all_field_values = {**field_type_params_info, **set_pydantic_model_as_field_type}\n        new_field = ModelField(name=field.name, type_=Field(**all_field_values))\n    return new_field",
            "import_list": [
                "from pydantic import BaseModel, Field"
            ]
        }
    ]
}