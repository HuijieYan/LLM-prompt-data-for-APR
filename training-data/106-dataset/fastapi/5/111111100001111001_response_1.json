{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    original_type = field.type_\n    if isinstance(original_type, type) and issubclass(original_type, BaseModel):\n        use_type = cast(Type[BaseModel], original_type)\n        use_type = create_model(\n            original_type.__name__,\n            __config__=original_type.__config__,\n            __module__=original_type.__module__,\n            __validators__=original_type.__validators__,\n            **{f.name: f for f in original_type.__fields__.values()},\n        )\n        new_field = ModelField(\n            name=field.name,\n            type_=use_type,\n            class_validators={},\n            default=None,\n            required=False,\n            model_config=BaseConfig,\n            field_info=FieldInfo(None),\n        )\n    else:\n        new_field = field.copy()\n    \n    new_field.has_alias = field.has_alias\n    new_field.alias = field.alias\n    new_field.class_validators = field.class_validators\n    new_field.default = field.default\n    new_field.required = field.required\n    new_field.model_config = field.model_config\n    new_field.field_info = field.field_info\n    new_field.allow_none = field.allow_none\n    new_field.validate_always = field.validate_always\n    new_field.sub_fields = [\n        create_cloned_field(sub_field) for sub_field in field.sub_fields\n    ]\n    new_field.key_field = create_cloned_field(field.key_field)\n    new_field.validators = field.validators\n    new_field.pre_validators = field.pre_validators\n    new_field.post_validators = field.post_validators\n    new_field.whole_pre_validators = field.whole_pre_validators\n    new_field.whole_post_validators = field.whole_post_validators\n    new_field.parse_json = field.parse_json\n    new_field.shape = field.shape\n    new_field.populate_validators()\n    \n    return new_field",
            "import_list": [
                "from typing import Any, Type, cast, Optional",
                "from pydantic import BaseModel, create_model, FieldInfo, ModelField, BaseConfig"
            ]
        }
    ]
}