{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n\n    new_field = ModelField(\n        name=field.name,\n        type_=field.type_,\n        class_validators=field.class_validators,\n        default=field.default,\n        required=field.required,\n        model_config=field.model_config,\n        field_info=field.field_info,\n        has_alias=field.has_alias,\n        alias=field.alias,\n        allow_none=field.allow_none,\n        validate_always=field.validate_always,\n        validators=field.validators,\n        parse_json=field.parse_json,\n        shape=field.shape,\n    )\n    \n    if field.sub_fields:\n        new_field.sub_fields = [\n            create_cloned_field(sub_field) for sub_field in field.sub_fields\n        ]\n    \n    if field.key_field:\n        new_field.key_field = create_cloned_field(field.key_field)\n    \n    if PYDANTIC_1:\n        new_field.field_info = field.field_info\n        new_field.pre_validators = field.pre_validators\n        new_field.post_validators = field.post_validators\n    else:  # pragma: nocover\n        new_field.schema = field.schema  # type: ignore\n        new_field.whole_pre_validators = field.whole_pre_validators  # type: ignore\n        new_field.whole_post_validators = field.whole_post_validators  # type: ignore\n    \n    try:\n        new_field.populate_validators()\n    except AttributeError:  # pragma: nocover\n        # TODO: remove when removing support for Pydantic < 1.0.0\n        new_field._populate_validators()  # type: ignore\n    \n    return new_field"
        }
    ]
}