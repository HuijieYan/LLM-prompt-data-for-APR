{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    original_type = field.type_\n    use_type = original_type\n    if issubclass(original_type, BaseModel):\n        original_type = original_type.__pydantic_model__\n        use_type = create_model(\n            original_type.__name__,\n            __config__=original_type.__config__,\n            __module__=original_type.__module__,\n            **{f.name: (f.type_, ...) for f in original_type.__fields__.values()},\n        )\n    new_field = ModelField(\n        name=field.name,\n        type_=use_type,\n        class_validators=field.class_validators,\n        default=None,\n        required=field.required,\n        model_config=BaseConfig,\n        field_info=FieldInfo(extra={}),\n    )\n    new_field.has_alias = field.has_alias\n    new_field.alias = field.alias\n    new_field.validators = field.validators\n    new_field.allow_none = field.allow_none\n    new_field.validate_always = field.validate_always\n    new_field.sub_fields = [\n        create_cloned_field(sub_field) for sub_field in field.sub_fields\n    ]\n    new_field.key_field = create_cloned_field(field.key_field) if field.key_field else None\n    return new_field",
            "imports": [
                "from pydantic import BaseModel, create_model, Field, BaseConfig, FieldInfo, ModelField",
                "from typing import Type"
            ]
        }
    ]
}