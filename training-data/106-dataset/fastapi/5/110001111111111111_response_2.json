{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    original_type = field.type_\n    use_type = original_type\n    if lenient_issubclass(original_type, BaseModel):\n        if PYDANTIC_1:\n            new_field = ModelField(  # type: ignore\n                name=field.name,\n                type_=use_type,\n                class_validators={},\n                default=None,\n                required=False,\n                model_config=BaseConfig,\n                field_info=FieldInfo(None),\n            )\n        else:\n            new_field = ModelField(  # type: ignore\n                name=field.name,\n                type_=use_type,\n                class_validators={},\n                default=None,\n                required=False,\n                model_config=BaseConfig,\n                schema=FieldInfo(None),\n            )\n        new_field.has_alias = field.has_alias\n        new_field.alias = field.alias\n        new_field.class_validators = field.class_validators\n        new_field.default = field.default\n        new_field.required = field.required\n        new_field.model_config = field.model_config\n        if PYDANTIC_1:\n            new_field.field_info = field.field_info\n        else:\n            new_field.schema = field.schema  # type: ignore\n        new_field.allow_none = field.allow_none\n        new_field.validate_always = field.validate_always\n        if field.sub_fields:\n            new_field.sub_fields = [\n                create_cloned_field(sub_field) for sub_field in field.sub_fields\n            ]\n        if field.key_field:\n            new_field.key_field = create_cloned_field(field.key_field)\n        new_field.validators = field.validators\n        if PYDANTIC_1:\n            new_field.pre_validators = field.pre_validators\n            new_field.post_validators = field.post_validators\n        else:\n            new_field.whole_pre_validators = field.whole_pre_validators  # type: ignore\n            new_field.whole_post_validators = field.whole_post_validators  # type: ignore\n        new_field.parse_json = field.parse_json\n        new_field.shape = field.shape\n        try:\n            new_field.populate_validators()\n        except AttributeError:\n            new_field._populate_validators()  # type: ignore\n        return new_field\n    else:\n        return field",
            "import_list": []
        }
    ]
}