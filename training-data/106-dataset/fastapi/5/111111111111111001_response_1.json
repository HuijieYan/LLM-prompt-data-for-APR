{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    from pydantic import BaseModel, create_model, BaseModel as PydanticBaseModel, FieldInfo, ModelField\n    from typing import Type\n    original_type = field.type_\n    use_type = original_type\n    if issubclass(original_type, BaseModel):\n        use_type = original_type\n        new_field = ModelField(\n            name=field.name,\n            type_=use_type,\n            class_validators=field.class_validators,\n            default=field.default,\n            required=field.required,\n            model_config=original_type.__config__,\n            field_info=field.field_info,\n            has_alias=field.has_alias,\n            alias=field.alias,\n            validators=field.validators,\n            parse_json=field.parse_json,\n            shape=field.shape,\n            allow_none=field.allow_none,\n            validate_always=field.validate_always\n        )\n        if field.sub_fields:\n            new_field.sub_fields = [\n                create_cloned_field(sub_field) for sub_field in field.sub_fields\n            ]\n        if field.key_field:\n            new_field.key_field = create_cloned_field(field.key_field)\n        return new_field\n    else:\n        raise ValueError(\"Unsupported type for ModelField creation\")"
        }
    ]
}