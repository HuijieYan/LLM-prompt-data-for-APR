{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    original_type = field.type_\n    use_type = original_type\n    if lenient_issubclass(original_type, BaseModel):\n        use_type = create_model(\n            original_type.__name__,\n            __config__=original_type.__config__,\n            **{f.name: (f.type_, ...) for f in original_type.__fields__.values()}\n        )\n    new_field = ModelField(\n        name=field.name,\n        type_=use_type,\n        class_validators=field.class_validators,\n        default=None,\n        required=False,\n        model_config=field.model_config,\n        field_info=FieldInfo(None),\n        schema=FieldInfo(None) if not PYDANTIC_1 else None,\n    )\n    for f in field.validators:\n        new_field.add_validator(f)\n    if field.sub_fields:\n        new_field.sub_fields = [create_cloned_field(sub_field) for sub_field in field.sub_fields]\n    if field.key_field:\n        new_field.key_field = create_cloned_field(field.key_field)\n    return new_field",
            "import_list": [
                "from pydantic import create_model",
                "from pydantic.fields import ModelField, FieldInfo, Field, SHAPE_MAPPING",
                "from typing import Type, List"
            ]
        }
    ]
}