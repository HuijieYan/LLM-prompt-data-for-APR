{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    use_type = field.type_\n    field_info = FieldInfo(None)\n    if hasattr(use_type, \"__pydantic_model__\"):\n        use_type = use_type.__pydantic_model__  # type: ignore\n    if PYDANTIC_1:\n        new_field = ModelField(\n            name=field.name,\n            type_=use_type,\n            required=field.required,\n            model_config=BaseConfig,\n            field_info=FieldInfo(None)\n        )\n    else:\n        new_field = ModelField(  # type: ignore\n            name=field.name,\n            type_=use_type,\n            required=field.required,\n            model_config=BaseConfig,\n            schema=FieldInfo(None),\n        )\n        new_field.has_alias = field.has_alias\n    new_field.class_validators = field.class_validators\n    new_field.default = field.default\n    new_field.alias = field.alias\n    new_field.required = field.required\n    new_field.model_config = field.model_config\n\n    # Handle sub_fields and key_field\n    if field.sub_fields:\n        new_field.sub_fields = [create_cloned_field(sub_field) for sub_field in field.sub_fields]\n    if field.key_field:\n        new_field.key_field = create_cloned_field(field.key_field)\n\n    # Handle validators\n    new_field.validators = field.validators\n    if PYDANTIC_1:\n        new_field.pre_validators = field.pre_validators\n        new_field.post_validators = field.post_validators\n    else:\n        new_field.whole_pre_validators = field.whole_pre_validators  # type: ignore\n        new_field.whole_post_validators = field.whole_post_validators  # type: ignore\n\n    # Handle other field attributes\n    new_field.allow_none = field.allow_none\n    new_field.validate_always = field.validate_always\n    new_field.parse_json = field.parse_json\n    new_field.shape = field.shape\n\n    try:\n        new_field.populate_validators()\n    except AttributeError:  # pragma: nocover\n        new_field._populate_validators()  # type: ignore\n    return new_field",
            "import_list": [
                "from typing import Type, cast",
                "from pydantic import BaseModel, create_model, Field",
                "from pydantic.fields import ModelField",
                "from pydantic.class_validators import gather_all_validators",
                "from pydantic.fields import determine_child_type",
                "from pydantic.json import update_not_implemented",
                "from pydantic.typing import ForwardRef",
                "from pydantic.main import ModelMetaclass",
                "from pydantic.utils import update_field_forward_refs, lenient_issubclass"
            ]
        }
    ]
}