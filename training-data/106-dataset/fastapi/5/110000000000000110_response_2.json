{
    "fastapi": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 89,
            "file_name": "fastapi/utils.py",
            "replace_code": "def create_cloned_field(field: ModelField) -> ModelField:\n    original_type = field.type_\n    \n    if hasattr(original_type, \"__pydantic_model__\"):\n        original_type = original_type.__pydantic_model__  # type: ignore\n    \n    use_type = original_type\n    \n    if issubclass(original_type, BaseModel):\n        original_type = cast(Type[BaseModel], original_type)\n        use_type = create_model(\n            original_type.__name__, __config__=original_type.__config__\n        )\n        use_type.__fields__ = original_type.__fields__\n        use_type.__validators__ = original_type.__validators__\n    \n    if PYDANTIC_1:\n        new_field = ModelField(\n            name=field.name,\n            type_=use_type,\n            class_validators={},\n            default=None,\n            required=False,\n            model_config=BaseConfig,\n            field_info=FieldInfo(None),\n        )\n    else:  \n        new_field = ModelField(  \n            name=field.name,\n            type_=use_type,\n            class_validators={},\n            default=None,\n            required=False,\n            model_config=BaseConfig,\n            schema=FieldInfo(None),\n        )\n    \n    # Copy field attributes\n    for attr in [\"has_alias\", \"alias\", \"class_validators\", \"default\", \"required\", \"model_config\",\n                 \"field_info\", \"schema\", \"allow_none\", \"validate_always\", \"validators\", \"shape\", \n                 \"sub_fields\", \"key_field\", \"pre_validators\", \"post_validators\", \n                 \"whole_pre_validators\", \"whole_post_validators\", \"parse_json\"]:\n        setattr(new_field, attr, getattr(field, attr))\n    \n    if field.sub_fields:\n        new_field.sub_fields = [create_cloned_field(sub_field) for sub_field in field.sub_fields]\n    \n    if field.key_field:\n        new_field.key_field = create_cloned_field(field.key_field)\n    \n    # Try to populate validators\n    try:\n        new_field.populate_validators()\n    except AttributeError:\n        # For compatibility with older versions of Pydantic\n        new_field._populate_validators()  # type: ignore\n    \n    return new_field",
            "imports": [
                "from typing import Type, cast",
                "from pydantic import BaseModel, create_model, FieldInfo, BaseModel, Field",
                "from pydantic.fields import ModelField"
            ]
        }
    ]
}