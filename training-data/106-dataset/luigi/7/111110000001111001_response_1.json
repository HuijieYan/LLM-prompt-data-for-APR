{
    "luigi": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 761,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def add_task(self, task_id=None, status=PENDING, runnable=True,\n                 deps=None, new_deps=None, expl=None, resources=None,\n                 priority=0, family='', module=None, params=None,\n                 assistant=False, tracking_url=None, worker=None, batchable=None,\n                 batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n        \"\"\"\n        * add task identified by task_id if it doesn't exist\n        * if deps is not None, update dependency list\n        * update status of task\n        * add additional workers/stakeholders\n        * update priority when needed\n        \"\"\"\n        # Worker assignment and retry policy update\n        assert worker is not None\n        worker_id = worker\n        worker = self._state.get_worker(worker_id)\n        retry_policy = self._generate_retry_policy(retry_policy_dict)\n\n        # Fetch or create a default task\n        _default_task = self._make_task(\n            task_id=task_id, status=PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params,\n        )\n        task = self._state.get_task(task_id, setdefault=_default_task)\n\n        if task is None or (task.status != RUNNING and not worker.enabled):\n            return\n\n        # Update task properties\n        task.update(task_id=task_id, status=status, params=params, deps=deps, resources=resources, priority=priority,\n                    family=family, module=module, assistant=assistant, tracking_url=tracking_url, expl=expl,\n                    batchable=batchable, batch_id=batch_id, retry_policy=retry_policy, owners=owners)\n\n        # Update task history and status\n        if status != task.status:\n            self._update_task_history(task, status)\n\n        if status in [FAILED, SUSPENDED]:\n            if status == FAILED and self._config.batch_emails:\n                self._email_batcher.add_failure(task.pretty_id, task.family, task.params, expl, owners)\n                if task.status == DISABLED:\n                    self._email_batcher.add_disable(task.pretty_id, task.family, task.params, owners)\n\n        if deps is not None:\n            task.deps = set(deps)\n\n        if new_deps is not None:\n            task.deps.update(new_deps)\n\n        if resources is not None:\n            task.resources = resources\n\n        # Update priority and stakeholders\n        self._update_priority(task, priority, worker_id)\n        if not assistant:\n            task.stakeholders.add(worker_id)\n            for dep in task.deps or []:\n                t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n                t.stakeholders.add(worker_id)\n\n        # Update worker and task state\n        if runnable and status != FAILED and worker.enabled:\n            task.workers.add(worker_id)\n            worker.tasks.add(task)\n            task.runnable = runnable",
            "import_list": []
        }
    ]
}