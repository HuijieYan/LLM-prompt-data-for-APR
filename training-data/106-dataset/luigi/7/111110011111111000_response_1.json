{
    "luigi": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 761,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def add_task(self, worker, task_id, status=Scheduler.PENDING, deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, batchable=None,\n             batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    assert worker is not None\n    worker_obj = self._update_worker(worker)\n    retry_policy = self._generate_retry_policy(retry_policy_dict)\n    \n    if worker_obj.enabled:\n        _default_task = self._make_task(\n            task_id=task_id, status=Scheduler.PENDING, deps=deps, resources=resources,\n            priority=priority, family=family, module=module, params=params,\n        )\n    else:\n        _default_task = None\n    \n    task = self._state.get_task(task_id, setdefault=_default_task)\n    \n    if task is None or (task.status != Scheduler.RUNNING and not worker_obj.enabled):\n        return\n    \n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n    \n    if batch_id is not None:\n        task.batch_id = batch_id\n    if status == Scheduler.RUNNING and not task.worker_running:\n        task.worker_running = worker\n        if batch_id:\n            task.resources_running = self._state.get_batch_running_tasks(batch_id)[0].resources_running\n        task.time_running = time.time()\n    \n    if tracking_url is not None or task.status != Scheduler.RUNNING:\n        task.tracking_url = tracking_url\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.tracking_url = tracking_url\n    \n    if batchable is not None:\n        task.batchable = batchable\n    \n    if task.remove is not None:\n        task.remove = None\n    \n    if expl is not None:\n        task.expl = expl\n        if task.batch_id is not None:\n            for batch_task in self._state.get_batch_running_tasks(task.batch_id):\n                batch_task.expl = expl\n    \n    if not (task.status in (Scheduler.RUNNING, Scheduler.BATCH_RUNNING) and status == Scheduler.PENDING) or new_deps:\n        if status == Scheduler.PENDING or status != task.status:\n            self._update_task_history(task, status)\n        self._state.set_status(task, Scheduler.PENDING if status == Scheduler.SUSPENDED else status, self._config)\n    \n    if status == Scheduler.FAILED and self._config.batch_emails:\n        batched_params, _ = self._state.get_batcher(worker, family)\n        if batched_params:\n            unbatched_params = {\n                param: value\n                for param, value in six.iteritems(task.params)\n                if param not in batched_params\n            }\n        else:\n            unbatched_params = task.params\n        try:\n            expl_raw = json.loads(expl)\n        except ValueError:\n            expl_raw = expl\n    \n        self._email_batcher.add_failure(\n            task.pretty_id, task.family, unbatched_params, expl_raw, owners)\n        if task.status == Scheduler.DISABLED:\n            self._email_batcher.add_disable(\n                task.pretty_id, task.family, unbatched_params, owners)\n    \n    if deps is not None:\n        task.deps = set(deps)\n    \n    if new_deps is not None:\n        task.deps.update(new_deps)\n    \n    if resources is not None:\n        task.resources = resources\n    \n    if worker_obj.enabled and not assistant:\n        task.stakeholders.add(worker)\n    \n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=Scheduler.UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker)\n    \n    self._update_priority(task, priority, worker)\n    \n    task.retry_policy = retry_policy\n    \n    if runnable and status != Scheduler.FAILED and worker_obj.enabled:\n        task.workers.add(worker)\n        self._state.get_worker(worker).tasks.add(task)\n        task.runnable = runnable"
        }
    ]
}