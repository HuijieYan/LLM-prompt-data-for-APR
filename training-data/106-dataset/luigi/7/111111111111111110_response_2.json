{
    "luigi": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 761,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def add_task(self, worker, task_id=None, status='PENDING', runnable=True,\n                 deps=None, new_deps=None, expl=None, resources=None,\n                 priority=0, family='', module=None, params=None,\n                 assistant=False, tracking_url=None, batchable=None,\n                 batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n        \"\"\"\n        * add task identified by task_id if it doesn't exist\n        * if deps is not None, update dependency list\n        * update status of task\n        * add additional workers/stakeholders\n        * update priority when needed\n        \"\"\"\n\n        assert worker is not None\n        worker_object = self.get_worker(worker)\n        task = Task(id=task_id, status=status, deps=deps, resources=resources, \n                    priority=priority, family=family, module=module, params=params)\n        \n        if worker_object.enabled:\n            default_task = task\n        else:\n            default_task = None\n    \n        existing_task = self.get_task(task_id, default=default_task)\n    \n        if existing_task is None or (existing_task.status != 'RUNNING' and not worker_object.enabled):\n            return\n        \n        # update task status and other attributes\n        # ...\n    \n        # update the task in the scheduler state\n        self.set_status(task, 'PENDING' if status == 'SUSPENDED' else status)\n    \n        # update the task history\n        self._update_task_history(task, status)\n\n        # add or update dependencies\n        if deps is not None:\n            task.deps = set(deps)\n        if new_deps is not None:\n            task.deps.update(new_deps)\n    \n        # update resources if provided\n        if resources is not None:\n            task.resources = resources\n    \n        # add the worker as a stakeholder if it's not an assistant\n        if worker_object.enabled and not assistant:\n            task.stakeholders.add(worker)\n            for dep in task.deps or []:\n                dep_task = self.get_task(dep, setdefault=Task(id=dep, status='UNKNOWN', deps=None, priority=priority))\n                dep_task.stakeholders.add(worker)\n    \n        # update priority\n        self._update_priority(task, priority, worker)\n    \n        # set the retry policy\n        task.retry_policy = RetryPolicy(retry_count=retry_policy_dict.get('retry_count', 3), \n                                       disable_hard_timeout=retry_policy_dict.get('disable_hard_timeout', 3600), \n                                       disable_window=retry_policy_dict.get('disable_window', 10))\n    \n        # update the worker's tasks\n        if runnable and status != 'FAILED' and worker_object.enabled:\n            task.workers.add(worker)\n            worker_object.tasks.add(task)\n            task.runnable = runnable",
            "imports": [
                "from luigi.scheduler import Task, RetryPolicy"
            ]
        }
    ]
}