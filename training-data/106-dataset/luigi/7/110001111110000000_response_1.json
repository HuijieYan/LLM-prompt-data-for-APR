{
    "luigi": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 761,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def add_task(self, task_id=None, status='PENDING', runnable=True, deps=None, new_deps=None,\n             expl=None, resources=None, priority=0, family='', module=None, params=None,\n             assistant=False, tracking_url=None, worker=None, batchable=None,\n             batch_id=None, retry_policy_dict=None, owners=None, **kwargs):\n    import time\n    import json\n    import six\n\n    worker_id = worker\n    worker = self.get_worker(worker_id)\n    retry_policy = self._generate_retry_policy(retry_policy_dict)\n\n    _default_task = self._make_task(\n        task_id=task_id, status='PENDING', deps=deps, resources=resources, priority=priority, family=family, module=module, params=params\n    )\n\n    task = self.get_task(task_id, setdefault=_default_task)\n\n    if task is None or (task.status != 'RUNNING' and not worker.enabled):\n        return\n\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = params if params is not None else {}\n\n    if batch_id is not None:\n        task.batch_id = batch_id\n    if status == 'RUNNING' and not task.worker_running:\n        task.worker_running = worker_id\n        if batch_id:\n            task.resources_running = self.get_batch_running_tasks(batch_id)[0].resources_running\n        task.time_running = time.time()\n\n    if tracking_url is not None or task.status != 'RUNNING':\n        task.tracking_url = tracking_url\n        if task.batch_id is not None:\n            for batch_task in self.get_batch_running_tasks(task.batch_id):\n                batch_task.tracking_url = tracking_url\n\n    if batchable is not None:\n        task.batchable = batchable\n\n    if task.remove is not None:\n        task.remove = None\n\n    if expl is not None:\n        task.expl = expl\n        if task.batch_id is not None:\n            for batch_task in self.get_batch_running_tasks(task.batch_id):\n                batch_task.expl = expl\n\n    if not (task.status in ('RUNNING', 'BATCH_RUNNING') and status == 'PENDING') or new_deps:\n        if status == 'PENDING' or status != task.status:\n            self._update_task_history(task, status)\n        self.set_status(task, 'PENDING' if status == 'SUSPENDED' else status, config=None)\n\n    if status == 'FAILED' and self._config.get('batch_emails'):\n        batched_params, _ = self.get_batcher(worker_id, family)\n        if batched_params:\n            unbatched_params = {param: value for param, value in six.iteritems(task.params) if param not in batched_params}\n        else:\n            unbatched_params = task.params\n        try:\n            expl_raw = json.loads(expl)\n        except ValueError:\n            expl_raw = expl\n\n        self._email_batcher.add_failure(task.pretty_id, task.family, unbatched_params, expl_raw, owners)\n        if task.status == 'DISABLED':\n            self._email_batcher.add_disable(task.pretty_id, task.family, unbatched_params, owners)\n\n    if deps is not None:\n        task.deps = set(deps)\n\n    if new_deps is not None:\n        task.deps.update(new_deps)\n\n    if resources is not None:\n        task.resources = resources\n\n    if worker.enabled and not assistant:\n        task.stakeholders.add(worker_id)\n\n        for dep in task.deps or []:\n            t = self.get_task(dep, setdefault=self._make_task(task_id=dep, status='UNKNOWN', deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n\n    self._update_priority(task, priority, worker_id)\n\n    task.retry_policy = retry_policy\n\n    if runnable and status != 'FAILED' and worker.enabled:\n        task.workers.add(worker_id)\n        self.get_worker(worker_id).tasks.add(task)\n        task.runnable = runnable",
            "import_list": [
                "import time",
                "import json",
                "import six"
            ]
        }
    ]
}