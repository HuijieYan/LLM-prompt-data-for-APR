{
    "luigi": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 761,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def add_task(self, task_id=None, status=\"PENDING\", runnable=True,\n                 deps=None, new_deps=None, expl=None, resources=None,\n                 priority=0, family='', module=None, params=None,\n                 assistant=False, tracking_url=None, worker=None, batchable=None,\n                 batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n        \n        assert worker is not None\n        worker_id = worker\n        self._update_worker(worker_id)\n        retry_policy = self._generate_retry_policy(retry_policy_dict)\n\n        if runnable and status != \"FAILED\" and worker.enabled:\n            _default_task = self._make_task(\n                task_id=task_id, status=\"PENDING\", deps=deps, resources=resources,\n                priority=priority, family=family, module=module, params=params\n            )\n\n            task = self._state.get_task(task_id, setdefault=_default_task)\n\n            if task is None or (task.status != \"RUNNING\" and not worker.enabled):\n                return",
            "imports": [
                "from functools import partial"
            ]
        }
    ]
}