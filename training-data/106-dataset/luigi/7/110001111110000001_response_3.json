{
    "luigi": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 761,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def add_task(self, task_id=None, status='PENDING', runnable=True,\n             deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None,\n             assistant=False, tracking_url=None, worker=None, batchable=None,\n             batch_id=None, retry_policy_dict={}, owners=None, **kwargs):\n    # (previous code omitted)\n    \n\n    if task is None or (task.status != 'RUNNING' and not worker.enabled):\n        return\n    \n    # for setting priority, we'll sometimes create tasks with unset family and params\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n    \n    if batch_id is not None:\n        task.batch_id = batch_id\n    if status == 'RUNNING' and not task.worker_running:\n        task.worker_running = worker_id\n        if batch_id:\n            task.resources_running = self.get_batch_running_tasks(batch_id)[0].resources_running\n        task.time_running = time.time()\n    \n    if tracking_url is not None or task.status != 'RUNNING':\n        task.tracking_url = tracking_url\n        if task.batch_id is not None:\n            for batch_task in self.get_batch_running_tasks(task.batch_id):\n                batch_task.tracking_url = tracking_url\n    \n    if batchable is not None:\n        task.batchable = batchable\n    \n    if task.remove is not None:\n        task.remove = None  # unmark task for removal so it isn't removed after being added\n    \n    if expl is not None:\n        task.expl = expl\n        if task.batch_id is not None:\n            for batch_task in self.get_batch_running_tasks(task.batch_id):\n                batch_task.expl = expl\n    \n    if not (task.status in ('RUNNING', 'BATCH_RUNNING') and status == 'PENDING') or new_deps:\n        # (previous code omitted)\n        pass"
        }
    ]
}