{
    "1.1.1": "def run(self):\n    \n    if not (self.table):\n        raise Exception(\"table need to be specified\")\n\n    path = self.s3_load_path()\n    connection = self.output().connect()\n    if not self.does_table_exist(connection):\n        # try creating table\n        logger.info(\"Creating table %s\", self.table)\n        connection.reset()\n        self.create_table(connection)\n    elif self.do_truncate_table():\n        logger.info(\"Truncating table %s\", self.table)\n        self.truncate_table(connection)\n\n    logger.info(\"Inserting file: %s\", path)\n    cursor = connection.cursor()\n    self.init_copy(connection)\n    self.copy(cursor, path)\n    self.output().touch(connection)\n    connection.commit()\n\n    # commit and clean up\n    connection.close()\n",
    "1.1.2": "If the target table doesn't exist, self.create_table\nwill be called to attempt to create the table.",
    "1.2.1": "class S3CopyToTable(rdbms.CopyToTable)",
    "1.2.2": "Template task for inserting a data set into Redshift from s3.\n\nUsage:\n\n* Subclass and override the required attributes:\n  * `host`,\n  * `database`,\n  * `user`,\n  * `password`,\n  * `table`,\n  * `columns`,\n  * `aws_access_key_id`,\n  * `aws_secret_access_key`,\n  * `s3_load_path`.",
    "1.2.3": [
        "s3_load_path(self)",
        "do_truncate_table(self)",
        "truncate_table(self, connection)",
        "create_table(self, connection)",
        "copy(self, cursor, f)",
        "output(self)",
        "does_table_exist(self, connection)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "luigi/contrib/redshift.py",
    "1.3.2": [
        "s3_load_path(self)",
        "do_truncate_table(self)",
        "truncate_table(self, connection)",
        "create_table(self, connection)",
        "copy(self, cursor, f)",
        "output(self)",
        "does_table_exist(self, connection)",
        "copy(self, cursor, f)",
        "output(self)"
    ],
    "1.4.1": [
        "    @mock.patch(\"luigi.contrib.redshift.S3CopyToTable.copy\")\n    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_to_table(self, mock_redshift_target, mock_copy):\n        task = DummyS3CopyToTable()\n        task.run()\n\n        # The mocked connection cursor passed to\n        # S3CopyToTable.copy(self, cursor, f).\n        mock_cursor = (mock_redshift_target.return_value\n                                           .connect\n                                           .return_value\n                                           .cursor\n                                           .return_value)\n\n        # `mock_redshift_target` is the mocked `RedshiftTarget` object\n        # returned by S3CopyToTable.output(self).\n        mock_redshift_target.assert_called_with(database=task.database,\n                                                host=task.host,\n                                                update_id='DummyS3CopyToTable()',\n                                                user=task.user,\n                                                table=task.table,\n                                                password=task.password)\n\n        # Check if the `S3CopyToTable.s3_load_path` class attribute was\n        # successfully referenced in the `S3CopyToTable.run` method, which is\n        # in-turn passed to `S3CopyToTable.copy` and other functions in `run`\n        # (see issue #995).\n        mock_copy.assert_called_with(mock_cursor, task.s3_load_path)\n\n        # Check the SQL query in `S3CopyToTable.does_table_exist`.\n        mock_cursor.execute.assert_called_with(\"select 1 as table_exists \"\n                                               \"from pg_table_def \"\n                                               \"where tablename = %s limit 1\",\n                                               (task.table,))\n\n        return"
    ],
    "1.4.2": [
        "test/contrib/redshift_test.py"
    ],
    "2.1.1": [
        [
            "E       TypeError: 'str' object is not callable"
        ]
    ],
    "2.1.2": [
        [
            "self = <contrib.redshift_test.TestS3CopyToTable testMethod=test_s3_copy_to_table>\nmock_redshift_target = <MagicMock name='RedshiftTarget' id='4524188432'>\nmock_copy = <MagicMock name='copy' id='4524270064'>\n\n    @mock.patch(\"luigi.contrib.redshift.S3CopyToTable.copy\")\n    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_to_table(self, mock_redshift_target, mock_copy):\n        task = DummyS3CopyToTable()\n>       task.run()\n\ntest/contrib/redshift_test.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DummyS3CopyToTable()\n\n    def run(self):\n        \"\"\"\n        If the target table doesn't exist, self.create_table\n        will be called to attempt to create the table.\n        \"\"\"\n        if not (self.table):\n            raise Exception(\"table need to be specified\")\n    \n>       path = self.s3_load_path()",
            "\nluigi/contrib/redshift.py:166: TypeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "self.table": "'dummy_table'",
                "self": "DummyS3CopyToTable()",
                "self.s3_load_path": "'s3://bucket/key'",
                "self.output": "<bound method S3CopyToTable.output of DummyS3CopyToTable()>",
                "self.does_table_exist": "<bound method S3CopyToTable.does_table_exist of DummyS3CopyToTable()>",
                "self.create_table": "<bound method S3CopyToTable.create_table of DummyS3CopyToTable()>",
                "self.do_truncate_table": "<bound method S3CopyToTable.do_truncate_table of DummyS3CopyToTable()>",
                "self.truncate_table": "<bound method S3CopyToTable.truncate_table of DummyS3CopyToTable()>",
                "self.init_copy": "<bound method CopyToTable.init_copy of DummyS3CopyToTable()>",
                "self.copy": "<MagicMock name='copy' id='4449051312'>"
            },
            {
                "path": "'s3://bucket/key'",
                "connection": "<MagicMock name='RedshiftTarget().connect()' id='4449153856'>",
                "connection.reset": "<MagicMock name='RedshiftTarget().connect().reset' id='4449163872'>",
                "cursor": "<MagicMock name='RedshiftTarget().connect().cursor()' id='4449181120'>",
                "connection.cursor": "<MagicMock name='RedshiftTarget().connect().cursor' id='4449165856'>",
                "connection.commit": "<MagicMock name='RedshiftTarget().connect().commit' id='4449356864'>",
                "connection.close": "<MagicMock name='RedshiftTarget().connect().close' id='4449393392'>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.table": "str",
                "self": "DummyS3CopyToTable",
                "self.s3_load_path": "str",
                "self.output": "method",
                "self.does_table_exist": "method",
                "self.create_table": "method",
                "self.do_truncate_table": "method",
                "self.truncate_table": "method",
                "self.init_copy": "method",
                "self.copy": "MagicMock"
            },
            {
                "path": "str",
                "connection": "MagicMock",
                "connection.reset": "MagicMock",
                "cursor": "MagicMock",
                "connection.cursor": "MagicMock",
                "connection.commit": "MagicMock",
                "connection.close": "MagicMock"
            }
        ]
    ],
    "3.1.1": [
        "S3CopyToTable.s3_load_path TypeError\n"
    ],
    "3.1.2": [
        "I encountered this TypeError when subclassing S3CopyToTable:\n...\nTraceback (most recent call last):\n  File \"/home/kian/workspaces/contrib/luigi/luigi/worker.py\", line 137, in run\n    new_deps = self._run_get_new_deps()\n  File \"/home/kian/workspaces/contrib/luigi/luigi/worker.py\", line 88, in _run_get_new_deps\n    task_gen = self.task.run()\n  File \"/home/kian/workspaces/contrib/luigi/luigi/contrib/redshift.py\", line 166, in run\n    path = self.s3_load_path()\nTypeError: 'str' object is not callable\nINFO: Skipping error email. Set `error-email` in the `core` section of the luigi config file to receive error emails.\nDEBUG: 1 running tasks, waiting for next task to finish\nDEBUG: Asking scheduler for work...\nINFO: Done\nINFO: There are no more tasks to run at this time\nINFO: Worker Worker(salt=532581476, workers=1, host=..., username=kian, pid=23435) was stopped. Shutting down Keep-Alive thread\n\nwhich was fixed by changing https://github.com/spotify/luigi/blob/master/luigi/contrib/redshift.py#L166 from:\npath = self.s3_load_path()\n\nto\npath = self.s3_load_path\n\n(I submitted this fix as PR #996)\n\nas per the other class properties, which as far as i can tell, aren't explicitly referenced as methods either (otherwise they too would raise the above exception?).\n\nThe snippet I used to generate the above error:\nimport luigi\n\nfrom luigi.s3 import S3Target, S3Client                                                                          \nfrom luigi.contrib.redshift import S3CopyToTable                                                                 \n\n\nclass MyS3Task(luigi.Task): \n    local_tsv = luigi.Parameter()\n    s3_load_path = luigi.Parameter()                                                                             \n    client = luigi.Parameter()\n\n    def output(self):\n        return S3Target(self.s3_load_path, client=self.client)\n\n    def run(self):\n        self.client.put(self.local_tsv, self.output().path)\n        return\n\n\nclass MyRedshiftTask(S3CopyToTable):\n    host = luigi.Parameter()\n    database = luigi.Parameter()\n    user = luigi.Parameter()\n    password = luigi.Parameter()\n    table = luigi.Parameter()\n    local_tsv = luigi.Parameter()\n\n    aws_access_key_id = luigi.Parameter()\n    aws_secret_access_key = luigi.Parameter()\n\n    columns = [(\"x\", \"INT\"),\n               (\"y\", \"INT\")]\n\n    s3_load_path = luigi.Parameter()\n    copy_options = \"IGNOREHEADER 1\"\n\n    def requires(self):\n        client = S3Client(self.aws_access_key_id, self.aws_secret_access_key)\n        return MyS3Task(s3_load_path=self.s3_load_path,\n                        local_tsv=self.local_tsv, client=client)\n\n\nif __name__ == '__main__':\n    luigi.run()\n\nwhich was run from the command line using:\npython ./luigi_example.py --local-scheduler MyRedshiftTask \\\n    --host \"<REDSHIFT ENDPOINT>:5439\" \\\n    --database \"dev\" \\\n    --user \"<USERNAME>\" \\\n    --password \"<HIDDEN>\" \\\n    --table \"test_redshift_table_5439\" \\\n    --aws-access-key-id \"<HIDDEN>\" \\\n    --aws-secret-access-key \"<HIDDEN>\" \\\n    --s3-load-path \"s3://bucket-5439/test.tsv\" \\\n    --local-tsv \"./test.tsv\" \\\n\nwhere test.tsv (tab-separated values) contained:\nx   y\n1   2\n10  20\n100 200\n"
    ]
}