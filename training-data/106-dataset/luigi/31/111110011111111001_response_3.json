{
    "luigi": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 624,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, worker, host=None, assistant=False, **kwargs):\n    # ... (previous code)\n\n\n    for task in tasks:\n        if task.status != RUNNABLE or not self._schedulable(task) or not self._has_resources(task.resources, greedy_resources):\n            continue\n    \n        in_workers = assistant or worker in task.workers\n    \n        if in_workers and self._has_resources(task.resources, used_resources):\n            best_task = task\n            break\n        else:\n            workers = itertools.chain(task.workers, [worker]) if assistant else task.workers\n            for task_worker in workers:\n                if greedy_workers.get(task_worker, 0) > 0:\n                    # use up a worker\n                    greedy_workers[task_worker] -= 1\n    \n                    # keep track of the resources used in greedy scheduling\n                    for resource, amount in six.iteritems((task.resources or {})):\n                        greedy_resources[resource] += amount\n    \n                    best_task = task\n                    break\n    \n    # ... (remaining code)\n    \n    return reply"
        }
    ]
}