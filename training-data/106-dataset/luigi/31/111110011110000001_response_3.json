{
    "luigi": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 624,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, worker, host=None, assistant=False, **kwargs):\n        # TODO: remove any expired nodes\n\n        self.update(worker, {'host': host})\n        if assistant:\n            self.add_worker(worker, [('assistant', assistant)])\n        \n        best_task = None\n        pending_tasks = []\n        \n        used_resources = self._used_resources()\n        pending_tasks = self._state.get_pending_tasks()\n        pending_tasks = sorted(pending_tasks, key=self._rank(), reverse=True)\n        \n        for task in pending_tasks:\n            if self._schedulable(task) and self._has_resources(task.resources, used_resources):\n                best_task = task\n                break\n\n        reply = {\n            'n_pending_tasks': len(pending_tasks),\n            'task_id': None,\n        }\n\n        if best_task:\n            self._state.set_status(best_task, RUNNING, self._config)\n            best_task.worker_running = worker\n            best_task.time_running = time.time()\n            self._update_task_history(best_task.id, RUNNING, host=host)\n    \n            reply['task_id'] = best_task.id\n            reply['task_family'] = best_task.family\n            reply['task_module'] = getattr(best_task, 'module', None)\n            reply['task_params'] = best_task.params\n        \n        return reply",
            "import_list": []
        }
    ]
}