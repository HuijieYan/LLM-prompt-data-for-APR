{
    "luigi": [
        {
            "bugID": 31,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 624,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, worker, host=None, assistant=False, **kwargs):\n        pending_tasks = self._state.get_pending_tasks()\n        first_task = next((task for task in pending_tasks if not task.depends_on()), None)\n\n        if first_task:\n            self._prepare_worker(worker, host, assistant)\n            self._state.assign_task(first_task, worker)\n            return {\n                'task_id': first_task.task_id,\n                'task_family': first_task.task_family,\n                'task_module': first_task.task_module,\n                'task_params': first_task.task_params,\n                'n_pending_tasks': self._state.count_pending_tasks(),\n                'running_tasks': self._state.get_running_tasks(worker),\n                'n_unique_pending': self._state.count_unique_pending_tasks()\n            }\n        else:\n            return {\n                'task_id': None,\n                'n_pending_tasks': self._state.count_pending_tasks(),\n                'running_tasks': self._state.get_running_tasks(worker),\n                'n_unique_pending': self._state.count_unique_pending_tasks()\n            }",
            "imports": []
        }
    ]
}