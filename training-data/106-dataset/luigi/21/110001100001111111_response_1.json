{
    "luigi": [
        {
            "bugID": 21,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 327,
            "file_name": "luigi/interface.py",
            "replace_code": "def run(cmdline_args=None, main_task_cls=None, worker_scheduler_factory=None, use_dynamic_argparse=False, local_scheduler=False, override_defaults=None):\n    \"\"\"\n    Please don't use. Instead use `luigi` binary.\n\n    Run from cmdline using argparse.\n\n    :param cmdline_args: list of command line arguments\n    :param main_task_cls: class representing the main task\n    :param worker_scheduler_factory: factory for worker and scheduler\n    :param use_dynamic_argparse: whether to use dynamic argparse\n    :param local_scheduler: whether to use a local scheduler\n    :param override_defaults: dict of parameter and value overrides\n    \"\"\"\n    if override_defaults:\n        cmdline_args = cmdline_args + CmdlineParser().from_dict(override_defaults)\n\n    if use_dynamic_argparse:\n        interface = DynamicArgParseInterface()\n    else:\n        interface = ArgParseInterface()\n\n    # Run the main task using the provided command line arguments\n    ctx = run_with_ctx(\n        cmdline_args,\n        worker_scheduler_factory=worker_scheduler_factory,\n        set_global_defaults=not bool(main_task_cls),\n        local_scheduler=local_scheduler,\n    )\n\n    # Set up interface logging\n    setup_interface_logging()\n\n    return ctx",
            "imports": [
                "from luigi.cmdline_parser import CmdlineParser",
                "from luigi.interface import run_with_ctx, setup_interface_logging"
            ]
        }
    ]
}