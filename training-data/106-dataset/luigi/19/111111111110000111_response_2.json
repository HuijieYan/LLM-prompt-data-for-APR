{
    "luigi": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def set_status(self, task, new_status, config=None):\n        if new_status == TaskStatus.FAILED:\n            assert config is not None\n    \n        if new_status == TaskStatus.DISABLED and task.status == TaskStatus.RUNNING:\n            return\n    \n        if task.status == TaskStatus.DISABLED:\n            if new_status == TaskStatus.DONE:\n                self.re_enable(task)\n    \n            # don't allow workers to override a scheduler disable\n            elif task.scheduler_disable_time is not None:\n                return\n    \n        if new_status == TaskStatus.FAILED and task.can_disable():\n            self.add_failure(task)\n            if self.has_excessive_failures(task):\n                task.scheduler_disable_time = time.time()\n                new_status = TaskStatus.DISABLED\n                # notifications.send_error_email(...)\n        elif new_status == TaskStatus.DISABLED:\n            task.scheduler_disable_time = None\n    \n        self._status_tasks[task.status].pop(task.id)\n        self._status_tasks[new_status.value][task.id] = task\n        task.status = new_status",
            "import_list": [
                "from enum import Enum"
            ]
        }
    ]
}