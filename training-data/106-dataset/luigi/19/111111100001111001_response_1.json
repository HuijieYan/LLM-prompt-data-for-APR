{
    "luigi": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def set_status(self, task, new_status, config=None):\n    FAILED = 'FAILED'\n    DISABLED = 'DISABLED'\n\n    if new_status == FAILED:\n        assert config is not None\n\n    if new_status == DISABLED and task['status'] == 'RUNNING':\n        return\n\n    if task['status'] == DISABLED:\n        if new_status == 'DONE':\n            self.re_enable(task)\n        elif 'scheduler_disable_time' in task and task['scheduler_disable_time'] is not None:\n            return\n\n    if new_status == FAILED and task['disable_failures'] is not None and task['disable_window'] is not None and task['disable_persist'] is not None:\n        task['failures'] += 1\n        if task['failures'] > task['disable_failures']:\n            task['scheduler_disable_time'] = time.time()\n            new_status = DISABLED\n            if 'notifications' in globals() and 'send_error_email' in notifications.__dict__:\n                notifications.send_error_email(\n                    'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task['id']),\n                    '{task} failed {failures} times in the last {window} seconds, so it is being '\n                    'disabled for {persist} seconds'.format(\n                        failures=task['disable_failures'],\n                        task=task['id'],\n                        window=task['disable_window'],\n                        persist=task['disable_persist'],\n                    )\n                )\n    elif new_status == DISABLED:\n        task['scheduler_disable_time'] = None\n\n    self._status_tasks[task['status']].pop(task['id'])\n    self._status_tasks[new_status][task['id']] = task\n    task['status'] = new_status",
            "imports": []
        }
    ]
}