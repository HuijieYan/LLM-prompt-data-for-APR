{
    "luigi": [
        {
            "bugID": 33,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 313,
            "file_name": "luigi/task.py",
            "replace_code": "def get_param_values(cls, params, args, kwargs):\n    \"\"\"\n    Get the values of the parameters from the args and kwargs.\n\n    :param params: list of (param_name, Parameter).\n    :param args: positional arguments\n    :param kwargs: keyword arguments.\n    :returns: list of `(name, value)` tuples, one for each parameter.\n    \"\"\"\n    result = {}\n\n    params_dict = dict(params)\n\n    task_name = cls.task_family\n\n    exc_desc = '%s[args=%s, kwargs=%s]' % (task_name, args, kwargs)\n\n    positional_params = [(n, p) for n, p in params if p.significant]\n\n    for i, (param_name, param_obj) in enumerate(positional_params):\n        if i < len(args):\n            result[param_name] = args[i]\n        else:\n            if param_name in kwargs:\n                result[param_name] = kwargs[param_name]\n            else:\n                if not param_obj.has_task_value(task_name, param_name):\n                    raise parameter.MissingParameterException(\n                        \"%s: requires the '%s' parameter to be set\" % (exc_desc, param_name))\n                result[param_name] = param_obj.task_value(task_name, param_name)\n\n    for param_name, arg in kwargs.items():\n        if param_name not in params_dict:\n            raise parameter.UnknownParameterException('%s: unknown parameter %s' % (exc_desc, param_name))\n        if param_name in result:\n            raise parameter.DuplicateParameterException('%s: parameter %s was already set as a positional parameter' % (exc_desc, param_name))\n        result[param_name] = arg\n\n    return [(param_name, list_to_tuple(result[param_name])) for param_name, param_obj in params]",
            "imports": []
        }
    ]
}