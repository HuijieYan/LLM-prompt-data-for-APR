{
    "luigi": [
        {
            "bugID": 33,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 313,
            "file_name": "luigi/task.py",
            "replace_code": "def get_param_values(cls, params, args, kwargs):\n    \"\"\"\n    Get the values of the parameters from the args and kwargs.\n\n    :param params: list of (param_name, Parameter).\n    :param args: positional arguments\n    :param kwargs: keyword arguments.\n    :returns: list of `(name, value)` tuples, one for each parameter.\n    \"\"\"\n    result = {}\n\n    task_name = cls.task_family\n\n    # Extract global and local parameters\n    global_params = {param_name: param for param_name, param in params if getattr(param, 'is_global', False)}\n    local_params = {param_name: param for param_name, param in params if not getattr(param, 'is_global', False)}\n\n    # Fill in the positional arguments\n    positional_params = [(n, p) for n, p in local_params.items() if p.significant]\n    for i, arg in enumerate(args):\n        if i >= len(positional_params):\n            raise parameter.UnknownParameterException('takes at most %d parameters (%d given)' % (len(positional_params), len(args)))\n        param_name, param_obj = positional_params[i]\n        result[param_name] = arg\n\n    # Then the optional arguments\n    for param_name, arg in kwargs.items():\n        if param_name in result:\n            raise parameter.DuplicateParameterException('parameter %s was already set as a positional parameter' % (param_name))\n        if param_name not in local_params:\n            raise parameter.UnknownParameterException('unknown parameter %s' % (param_name))\n        result[param_name] = arg\n\n    # Then use the defaults for anything not filled in\n    for param_name, param_obj in local_params.items():\n        if param_name not in result:\n            if not param_obj.has_task_value(task_name, param_name):\n                raise parameter.MissingParameterException(\"requires the '%s' parameter to be set\" % (param_name))\n            result[param_name] = param_obj.task_value(task_name, param_name)\n\n    # Include global parameters in the result\n    result.update({param_name: param_obj.task_value(task_name, param_name) for param_name, param_obj in global_params.items()})\n\n    return [(param_name, result[param_name]) for param_name in params]",
            "imports": []
        }
    ]
}