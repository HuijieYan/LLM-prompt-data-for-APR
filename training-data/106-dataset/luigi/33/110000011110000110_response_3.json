{
    "luigi": [
        {
            "bugID": 33,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 313,
            "file_name": "luigi/task.py",
            "replace_code": "def get_param_values(cls, params, args, kwargs):\n    \"\"\"\n    Get the values of the parameters from the args and kwargs.\n\n    :param params: list of (param_name, Parameter).\n    :param args: positional arguments\n    :param kwargs: keyword arguments.\n    :returns: list of `(name, value)` tuples, one for each parameter.\n    \"\"\"\n    positional_params = [p for p in params if p.significant]\n\n    params_dict = {p.name: p for p in params}\n\n    result = {}\n\n    task_name = cls.__name__\n\n    # Fill in the positional arguments\n    for i, arg in enumerate(args):\n        if i >= len(positional_params):\n            raise ValueError(f'{task_name} only takes {len(positional_params)} positional parameters')\n        param = positional_params[i]\n        result[param.name] = arg\n\n    # Then the optional arguments\n    for param_name, arg in kwargs.items():\n        if param_name in result:\n            raise ValueError(f'{param_name} is already set as a positional parameter')\n        if param_name not in params_dict:\n            raise ValueError(f'{param_name} is an unknown parameter')\n        result[param_name] = arg\n\n    # Then use the defaults for anything not filled in\n    for param in params:\n        if param.name not in result:\n            if not param.has_task_value(cls.__name__, param.name):\n                raise ValueError(f'{param.name} is required')\n\n    def list_to_tuple(x):\n        \"\"\" Make tuples out of lists and sets to allow hashing \"\"\"\n        if isinstance(x, (list, set)):\n            return tuple(x)\n        else:\n            return x\n\n    # Sort it by the correct order and make a list\n    return [(param.name, list_to_tuple(result[param.name])) for param in params]",
            "imports": []
        }
    ]
}