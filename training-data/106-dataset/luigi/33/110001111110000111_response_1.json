{
    "luigi": [
        {
            "bugID": 33,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 313,
            "file_name": "luigi/task.py",
            "replace_code": "def get_param_values(cls, params, args, kwargs):\n    result = {}\n\n    global_params = {param_name: param_obj for param_name, param_obj in params if param_obj.is_global}\n    local_params = [(param_name, param_obj) for param_name, param_obj in params if not param_obj.is_global]\n\n    # Retrieve any global parameters from kwargs\n    for param_name, param_obj in global_params.items():\n        if param_obj.significant:\n            if param_name in kwargs:\n                result[param_name] = kwargs[param_name]\n            else:\n                result[param_name] = param_obj.default\n\n    # Evaluate positional arguments\n    for i, arg in enumerate(args):\n        if i < len(local_params):  # Ensure the number of positional arguments doesn't exceed the number of local parameters\n            param_name, param_obj = local_params[i]\n            if param_obj.significant:\n                result[param_name] = arg\n        else:\n            raise parameter.UnknownParameterException(\"%s: takes at most %d parameters (%d given)\" % (cls.task_family, len(local_params), len(args)))\n\n    # Evaluate any remaining keyword arguments\n    for param_name, arg in kwargs.items():\n        if param_name in result:\n            raise parameter.DuplicateParameterException(\"%s: parameter %s was already set as a positional parameter\" % (cls.task_family, param_name))\n        if param_name in global_params:\n            raise parameter.UnknownParameterException(\"%s: expected local parameter, but global parameter %s provided\" % (cls.task_family, param_name))\n        if param_name not in dict(params):\n            raise parameter.UnknownParameterException(\"%s: unknown local parameter %s\" % (cls.task_family, param_name))\n        result[param_name] = arg\n\n    # Fill in the defaults for any parameters that have not been filled in\n    for param_name, param_obj in local_params:\n        if param_name not in result:\n            if not param_obj.has_task_value(cls.task_family, param_name):\n                raise parameter.MissingParameterException(\"%s: requires the '%s' parameter to be set\" % (cls.task_family, param_name))\n            result[param_name] = param_obj.task_value(cls.task_family, param_name)\n\n    return [(param_name, list_to_tuple(result[param_name])) for param_name, param_obj in params]",
            "imports": []
        }
    ]
}