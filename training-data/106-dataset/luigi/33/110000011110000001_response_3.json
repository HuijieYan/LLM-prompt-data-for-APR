{
    "luigi": [
        {
            "bugID": 33,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 313,
            "file_name": "luigi/task.py",
            "replace_code": "def get_param_values(cls, params, args, kwargs):\n    \"\"\"\n    Get the values of the parameters from the args and kwargs.\n\n    :param params: list of (param_name, Parameter).\n    :param args: positional arguments\n    :param kwargs: keyword arguments.\n    :returns: list of `(name, value)` tuples, one for each parameter.\n    \"\"\"\n    result = {}\n\n    params_dict = dict(params)\n    task_name = cls.task_family\n\n    # Non-reprable arguments detection can be added here if required\n\n    # Separate the global parameters from the positional parameters\n    global_params = [param for param in params if param[1].is_global]\n    positional_params = [param for param in params if not param[1].is_global and param[1].significant]\n\n    # Handle positional arguments\n    for i, arg in enumerate(args):\n        if i >= len(positional_params):\n            raise parameter.UnknownParameterException(f\"{cls.task_family}[args={args}, kwargs={kwargs}]: takes at most {len(positional_params)} parameters ({len(args)} given)\")\n        param_name, param_obj = positional_params[i]\n        result[param_name] = arg\n\n    # Handle the keyword arguments\n    for param_name, arg in six.iteritems(kwargs):\n        if param_name in result:\n            raise parameter.DuplicateParameterException(f\"{cls.task_family}[args={args}, kwargs={kwargs}]: parameter {param_name} was already set as a positional parameter\")\n        if param_name not in params_dict:\n            raise parameter.UnknownParameterException(f\"{cls.task_family}[args={args}, kwargs={kwargs}]: unknown parameter {param_name}\")\n        result[param_name] = arg\n\n    # Use the defaults for any parameter not filled in\n    for param_name, param_obj in params:\n        if param_name not in result:\n            if not param_obj.has_task_value(task_name, param_name):\n                raise parameter.MissingParameterException(f\"{cls.task_family}[args={args}, kwargs={kwargs}]: requires the '{param_name}' parameter to be set\")\n            result[param_name] = param_obj.task_value(task_name, param_name)\n\n    def list_to_tuple(x):\n        \"\"\" Make tuples out of lists and sets to allow hashing \"\"\"\n        if isinstance(x, list) or isinstance(x, set):\n            return tuple(x)\n        else:\n            return x\n\n    # Sort the result by correct order and make a list\n    return [(param_name, list_to_tuple(result[param_name])) for param_name, _ in params]",
            "import_list": []
        }
    ]
}