{
    "luigi": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def set_status(self, task, new_status, config=None):\n    if new_status == FAILED:\n        assert config is not None\n\n    if new_status == DISABLED and task.status == RUNNING:\n        return\n\n    if task.status == DISABLED and new_status == DONE:\n        self.re_enable(task, config)\n        \n    # don't allow workers to override a scheduler disable\n    elif task.status == DISABLED and (time.time() - task.scheduler_disable_time) < config.disable_persist:\n        return\n\n    if new_status == FAILED and task.can_disable() and task.status != DISABLED:\n        task.add_failure()\n\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n\n            notifications.send_error_email(\n                'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                '{task} failed {failures} times in the last {window} seconds, so it is being '\n                'disabled for {persist} seconds'.format(\n                    failures=config.disable_failures,\n                    task=task.id,\n                    window=config.disable_window,\n                    persist=config.disable_persist,\n                )\n            )\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = time.time()\n\n    # edit the dictionary by either setting\u00a0the value of a new key-value pair that didn't exist before, or updating the value of the key that exists.\n    self._status_tasks[new_status][task.id] = task\n    if task.status in self._status_tasks and task.id in self._status_tasks[task.status]:\n        del self._status_tasks[task.status][task.id]\n        \n    task.status = new_status",
            "import_list": []
        }
    ]
}