{
    "luigi": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def set_status(self, task, new_status, config=None):\n    from notifications_module import send_error_email\n    from constants_module import FAILED, DISABLED\n    import time\n    if new_status == FAILED:\n        assert config is not None\n    \n    if new_status == DISABLED and task.get_status() == 'RUNNING':  # assuming get_status and set_status methods are defined in the Task class\n        return\n    \n    if task.get_status() == DISABLED:\n        if new_status == 'DONE':  # assuming 'DONE' is a valid status\n            self.re_enable(task)\n    \n        # don't allow workers to override a scheduler disable\n        elif task.get_scheduler_disable_time() is not None:  #assuming get_scheduler_disable_time method is defined in the Task class\n            return\n    \n    if new_status == FAILED and task.can_disable() and task.get_status() != DISABLED:\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.set_scheduler_disable_time(time.time())  #assuming set_scheduler_disable_time is a method in the Task class\n            new_status = DISABLED\n            send_error_email(\n                'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.get_id()),  #assuming get_id returns the id of the task\n                '{task} failed {failures} times in the last {window} seconds, so it is being '\n                'disabled for {persist} seconds'.format(\n                    failures=config.disable_failures,\n                    task=task.get_id(),\n                    window=config.disable_window,\n                    persist=config.disable_persist,\n                ))\n    elif new_status == DISABLED:\n        task.set_scheduler_disable_time(None)  #assuming set_scheduler_disable_time is a method in the Task class\n    \n    self._status_tasks[task.get_status()].pop(task.get_id())  #assuming get_id returns the id of the task\n    self._status_tasks[new_status][task.get_id()] = task  #assuming get_id returns the id of the task\n    task.set_status(new_status)  #assuming set_status is a method in the Task class"
        }
    ]
}