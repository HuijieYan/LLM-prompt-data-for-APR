{
    "luigi": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 550,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def prune(self, state, config, logger):\n    logger.info(\"Starting pruning of task graph\")\n    remove_workers = []\n    for worker in state.get_active_workers():\n        if worker.prune(config):\n            logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n\n    state.inactivate_workers(remove_workers)\n\n    assistant_ids = set(w.id for w in state.get_assistants())\n    remove_tasks = []\n\n    if assistant_ids:\n        necessary_tasks = state.get_necessary_tasks()\n    else:\n        necessary_tasks = ()\n\n    for task in state.get_active_tasks():\n        state.fail_dead_worker_task(task, config, assistant_ids)\n        if task.id not in necessary_tasks and state.prune(task, config):\n            remove_tasks.append(task.id)\n\n    state.inactivate_tasks(remove_tasks)\n\n    logger.info(\"Done pruning task graph\")",
            "import_list": []
        }
    ]
}