{
    "1.1.1": "def prune(self):\n    logger.info(\"Starting pruning of task graph\")\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n\n    self._state.inactivate_workers(remove_workers)\n\n    assistant_ids = set(w.id for w in self._state.get_assistants())\n    remove_tasks = []\n\n    if assistant_ids:\n        necessary_tasks = self._state.get_necessary_tasks()\n    else:\n        necessary_tasks = ()\n\n    for task in self._state.get_active_tasks():\n        self._state.fail_dead_worker_task(task, self._config, assistant_ids)\n        if task.id not in necessary_tasks and self._state.prune(task, self._config):\n            remove_tasks.append(task.id)\n\n    self._state.inactivate_tasks(remove_tasks)\n\n    logger.info(\"Done pruning task graph\")\n",
    "1.1.2": null,
    "1.2.1": "class CentralPlannerScheduler(Scheduler)",
    "1.2.2": "Async scheduler that can handle multiple workers, etc.\n\nCan be run locally or on a server (using RemoteScheduler + server.Server).",
    "1.2.3": [
        "prune(self)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "luigi/scheduler.py",
    "1.3.2": [
        "prune(self, config)",
        "get_active_tasks(self, status=None)",
        "fail_dead_worker_task(self, task, config, assistants)",
        "prune(self, task, config)",
        "inactivate_tasks(self, delete_tasks)",
        "get_active_workers(self, last_active_lt=None, last_get_work_gt=None)",
        "get_assistants(self, last_active_lt=None)",
        "inactivate_workers(self, delete_workers)",
        "get_necessary_tasks(self)",
        "prune(self)"
    ],
    "1.4.1": [
        "    def test_re_enable_failed_task_assistant(self):\n        self.setTime(0)\n        self.sch.add_worker('X', [('assistant', True)])\n        self.sch.add_task(worker='X', task_id='A', status=FAILED, assistant=True)\n\n        # should be failed now\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])\n\n        # resets to PENDING after 100 seconds\n        self.setTime(101)\n        self.sch.ping(worker='X')  # worker still alive\n        self.assertEqual('PENDING', self.sch.task_list('', '')['A']['status'])"
    ],
    "1.4.2": [
        "test/central_planner_test.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: 'PENDING' != 'FAILED'\nE       - PENDING\nE       + FAILED"
        ]
    ],
    "2.1.2": [
        [
            "self = <central_planner_test.CentralPlannerTest testMethod=test_re_enable_failed_task_assistant>\n\n    def test_re_enable_failed_task_assistant(self):\n        self.setTime(0)\n        self.sch.add_worker('X', [('assistant', True)])\n        self.sch.add_task(worker='X', task_id='A', status=FAILED, assistant=True)\n    \n        # should be failed now\n        self.assertEqual(FAILED, self.sch.task_list('', '')['A']['status'])\n    \n        # resets to PENDING after 100 seconds\n        self.setTime(101)\n        self.sch.ping(worker='X')  # worker still alive\n>       self.assertEqual('PENDING', self.sch.task_list('', '')['A']['status'])",
            "\ntest/central_planner_test.py:299: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self._state": {
                    "value": "<luigi.scheduler.SimpleTaskState object at 0x10f732160>",
                    "shape": null,
                    "omitted": false
                },
                "self": {
                    "value": "<luigi.scheduler.CentralPlannerScheduler object at 0x10f732100>",
                    "shape": null,
                    "omitted": false
                },
                "self._config": {
                    "value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, disable_window=10, disable_failures=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "remove_workers": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "worker": {
                    "value": "<luigi.scheduler.Worker object at 0x10f732430>",
                    "shape": null,
                    "omitted": false
                },
                "worker.id": {
                    "value": "'X'",
                    "shape": "1",
                    "omitted": false
                },
                "assistant_ids": {
                    "value": "{'X'}",
                    "shape": "1",
                    "omitted": false
                },
                "remove_tasks": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "necessary_tasks": {
                    "value": "{'A'}",
                    "shape": "1",
                    "omitted": false
                },
                "task": {
                    "value": "Task({'id': 'A', 'stakeholders': set(), 'workers': {'X'}, 'deps': set(), 'status': 'FAILED', 'time': 0, 'retry': 100, 'remove': None, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 3, 'disable_hard_timeout': 3600, 'failures': <luigi.scheduler.Failures object at 0x10f732220>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})",
                    "shape": null,
                    "omitted": false
                },
                "task.id": {
                    "value": "'A'",
                    "shape": "1",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self._state": "SimpleTaskState",
                "self": "CentralPlannerScheduler",
                "self._config": "scheduler"
            },
            {
                "remove_workers": "list",
                "worker": "Worker",
                "worker.id": "str",
                "assistant_ids": "set",
                "remove_tasks": "list",
                "necessary_tasks": "set",
                "task": "Task",
                "task.id": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self._state": {
                    "value": "<luigi.scheduler.SimpleTaskState object at 0x10779f190>",
                    "shape": null,
                    "omitted": false
                },
                "self": {
                    "value": "<luigi.scheduler.CentralPlannerScheduler object at 0x10779f100>",
                    "shape": null,
                    "omitted": false
                },
                "self._config": {
                    "value": "scheduler(retry_delay=100, remove_delay=1000, worker_disconnect_delay=10, state_path=/var/lib/luigi-server/state.pickle, disable_window=10, disable_failures=3, disable_hard_timeout=3600, disable_persist=10, max_shown_tasks=100000, max_graph_nodes=100000, prune_done_tasks=False, record_task_history=False, prune_on_get_work=False)",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "remove_workers": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "worker": {
                    "value": "<luigi.scheduler.Worker object at 0x10779f3a0>",
                    "shape": null,
                    "omitted": false
                },
                "worker.id": {
                    "value": "'X'",
                    "shape": "1",
                    "omitted": false
                },
                "assistant_ids": {
                    "value": "{'X'}",
                    "shape": "1",
                    "omitted": false
                },
                "remove_tasks": {
                    "value": "[]",
                    "shape": "0",
                    "omitted": false
                },
                "necessary_tasks": {
                    "value": "{'A'}",
                    "shape": "1",
                    "omitted": false
                },
                "task": {
                    "value": "Task({'id': 'A', 'stakeholders': set(), 'workers': {'X'}, 'deps': set(), 'status': 'FAILED', 'time': 0, 'retry': 100, 'remove': 1000, 'worker_running': None, 'time_running': None, 'expl': None, 'priority': 0, 'resources': {}, 'family': '', 'module': None, 'params': {}, 'disable_failures': 3, 'disable_hard_timeout': 3600, 'failures': <luigi.scheduler.Failures object at 0x10779f250>, 'tracking_url': None, 'scheduler_disable_time': None, 'runnable': True})",
                    "shape": null,
                    "omitted": false
                },
                "removed": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "task.id": {
                    "value": "'A'",
                    "shape": "1",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self._state": "SimpleTaskState",
                "self": "CentralPlannerScheduler",
                "self._config": "scheduler"
            },
            {
                "remove_workers": "list",
                "worker": "Worker",
                "worker.id": "str",
                "assistant_ids": "set",
                "remove_tasks": "list",
                "necessary_tasks": "set",
                "task": "Task",
                "removed": "bool",
                "task.id": "str"
            }
        ]
    ],
    "3.1.1": [
        "Assistant workers never retry failed tasks\n"
    ],
    "3.1.2": [
        "Assistant workers never retry failed tasks that are eligible for retry.\n\nI noticed this with ExternalTasks, but same goes for regular task failures, given the correct retry configurations.\n"
    ]
}