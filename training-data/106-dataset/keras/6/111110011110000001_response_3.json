{
    "keras": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 375,
            "file_name": "keras/engine/training_utils.py",
            "replace_code": "def weighted_masked_objective(fn):\n\n    \"\"\"Adds support for masking and sample-weighting to an objective function.\n    \n    It transforms an objective function `fn(y_true, y_pred)`\n    into a sample-weighted, cost-masked objective function\n    `fn(y_true, y_pred, weights, mask)`.\n    \n    # Arguments\n        fn: The objective function to wrap,\n            with signature `fn(y_true, y_pred)`.\n    \n    # Returns\n        A function with signature `fn(y_true, y_pred, weights, mask)`.\n    \"\"\"\n    if fn is None:\n        return None\n    \n    def weighted(y_true, y_pred, weights=None, mask=None):\n        \"\"\"Wrapper function.\n    \n        # Arguments\n            y_true: `y_true` argument of `fn`.\n            y_pred: `y_pred` argument of `fn`.\n            weights: Weights tensor (optional).\n            mask: Mask tensor (optional).\n    \n        # Returns\n            Scalar tensor.\n        \"\"\"\n        # Calculate score_array using the provided objective function\n        score_array = fn(y_true, y_pred)\n    \n        if mask is not None:\n            # Apply mask to score_array\n            score_array = score_array * mask\n            # Adjust the score based on the number of unmasked samples\n            score_array = score_array / K.mean(mask)\n    \n        if weights is not None:\n            # Apply sample weighting\n            score_array = score_array * weights\n            # Normalize the score by the number of non-zero weights\n            score_array = score_array / K.sum(K.cast(K.not_equal(weights, 0), K.floatx()))\n    \n        return K.mean(score_array)\n    \n    return weighted"
        }
    ]
}