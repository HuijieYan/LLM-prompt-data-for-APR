{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \n    ndim = len(inputs.shape)\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    # Transpose to time-major, i.e.\n    # from (batch, time, ...) to (time, batch, ...)\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n\n    if mask is not None:\n        mask = tf.transpose(mask, axes)\n\n    if constants is None:\n        constants = []\n\n    if unroll:\n        if not inputs.shape[0]:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list = input_list[::-1]\n\n        for inp in input_list:\n            output, new_states = step_function(inp, states + constants)\n            successive_outputs.append(output)\n            successive_states.append(new_states)\n        \n        last_output = successive_outputs[-1]\n        new_states = successive_states[-1]\n        outputs = tf.stack(successive_outputs)\n            \n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, [0])\n\n        states = tuple(initial_states)\n\n        time_steps = tf.shape(inputs)[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n        output_ta = tf.TensorArray(tf.float32, size=time_steps, name='output_ta')\n        input_ta = tf.TensorArray(tf.float32, size=time_steps, name='input_ta')\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype='int32', name='time')\n\n        if mask is not None:\n            if len(states) == 0:\n                raise ValueError('No initial states provided! '\n                                 'When using masking in an RNN, you should '\n                                 'provide initial states '\n                                 '(and your step function should return '\n                                 'as its first state at time `t` '\n                                 'the output at time `t-1`).')\n            if go_backwards:\n                mask = tf.reverse(mask, [0])\n\n            mask_ta = tf.TensorArray(tf.bool, size=time_steps, name='mask_ta')\n            mask_ta = mask_ta.unstack(mask)\n\n            def _step(time, output_ta_t, *states):\n                current_input = input_ta.read(time)\n                mask_t = mask_ta.read(time)\n                output, new_states = step_function(current_input,\n                                                   tuple(states) +\n                                                   tuple(constants))\n                for i in range(len(states)):\n                    new_states[i] = tf.cast(new_states[i], states[i].dtype)\n                    new_states[i] = tf.where(mask_t, new_states[i], states[i])\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + new_states\n        else:\n            def _step(time, output_ta_t, *states):\n                current_input = input_ta.read(time)\n                output, new_states = step_function(current_input,\n                                                   tuple(states) +\n                                                   tuple(constants))\n                for i in range(len(states)):\n                    new_states[i] = tf.cast(new_states[i], states[i].dtype)\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + new_states\n\n        final_outputs = tf.while_loop(\n            cond=lambda time, *args: time < time_steps,\n            body=_step,\n            loop_vars=(time, output_ta) + states,\n            parallel_iterations=32)\n        outputs = final_outputs[1].stack()\n        last_output = output_ta.read(final_outputs[0] - 1)\n\n    axes = [1, 0] + list(range(2, outputs.shape.ndims))\n    outputs = tf.transpose(outputs, axes)\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow import keras"
            ]
        }
    ]
}