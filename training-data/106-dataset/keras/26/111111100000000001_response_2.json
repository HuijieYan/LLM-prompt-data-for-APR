{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \n    if not tf_should_use.tf.internals.should_use_tf_function():\n        tf_should_use.tf.internals.disallow_tracing()\n\n    ndim = len(inputs.shape)\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.shape) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=-1)\n\n        mask = tf.transpose(mask, axes)\n\n    if constants is None:\n        constants = []\n\n    if unroll:\n        if not inputs.shape[0]:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list = input_list[::-1]\n\n        for inp in input_list:\n            output, new_states = step_function(inp, states + constants)\n            if hasattr(output, '_uses_learning_phase') and output._uses_learning_phase:\n                tf.keras.backend.manual_variable_initialization(True)\n\n            successive_outputs.append(output)\n            successive_states.append(new_states)\n\n        last_output = successive_outputs[-1]\n        new_states = successive_states[-1]\n        outputs = tf.stack(successive_outputs)\n\n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, [0])\n\n        states = initial_states\n\n        time_steps = inputs.shape[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n\n        output_ta = tf.TensorArray(dtype=outputs.dtype, size=time_steps)\n        input_ta = tf.TensorArray(dtype=inputs.dtype, size=time_steps)\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype='int32')\n\n        output_ta, final_outputs, last_time = tf.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(time, output_ta) + states,\n            parallel_iterations=32,\n            swap_memory=True)\n\n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time - 1)\n\n    axes = [1, 0] + list(range(2, len(outputs.shape)))\n    outputs = tf.transpose(outputs, axes)\n    last_output._uses_learning_phase = hasattr(outputs, '_uses_learning_phase') and outputs._uses_learning_phase\n\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow.python.util import tf_should_use"
            ]
        }
    ]
}