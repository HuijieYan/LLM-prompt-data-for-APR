{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \n    # Validate input dimension\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    # Transpose inputs to time-major format\n    inputs = tf.transpose(inputs, [1, 0] + list(range(2, ndim)))\n    \n    # Mask handling\n    if mask is not None:\n        mask = tf.cast(mask, dtype=tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=-1)\n        mask = tf.transpose(mask, [1, 0] + list(range(2, ndim)))\n    \n    # Initialize constants if not provided\n    if constants is None:\n        constants = []\n    \n    # Flag for learning phase usage\n    uses_learning_phase = False\n    \n    # Initialize states and outputs depending on unroll param\n    if unroll:\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list = input_list[::-1]\n        \n        for inp in input_list:\n            output, states = step_function(inp, states + constants)\n            if getattr(output, '_uses_learning_phase', False):\n                uses_learning_phase = True\n            successive_outputs.append(output)\n            successive_states.append(states)\n        \n        last_output = successive_outputs[-1]\n        new_states = successive_states[-1]\n        outputs = tf.stack(successive_outputs)\n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, axis=[0])\n        \n        time_steps = tf.shape(inputs)[0]\n        states = tuple(initial_states)\n        outputs, _ = step_function(inputs[0], tuple(initial_states) + tuple(constants))\n        output_ta = tensor_array_ops.TensorArray(dtype=outputs.dtype, size=time_steps, tensor_array_name='output_ta')\n    \n        # Implementation of the while loop for handling the RNN\n        def _step(time, output_ta_t, *states):\n            current_input = inputs[time]\n            output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n            if getattr(output, '_uses_learning_phase', False):\n                nonlocal uses_learning_phase\n                uses_learning_phase = True\n            new_states = [tf.convert_to_tensor(new_state) for new_state in new_states]\n            output_ta_t = output_ta_t.write(time, output)\n            return (time + 1, output_ta_t) + tuple(new_states)\n    \n        final_outputs = control_flow_ops.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(0, output_ta) + states,\n            parallel_iterations=32,\n            swap_memory=True)\n        \n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n        \n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time - 1)\n    \n    # Transpose the outputs to the original format\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, axes)\n    \n    # Set learning phase flag\n    last_output._uses_learning_phase = uses_learning_phase\n    \n    return last_output, outputs, new_states",
            "import_list": [
                "import tensorflow as tf",
                "from tensorflow.python.ops import tensor_array_ops, control_flow_ops"
            ]
        }
    ]
}