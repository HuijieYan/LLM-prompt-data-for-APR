{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states, go_backwards=False, mask=None, \n        constants=None, unroll=False, input_length=None):\n    import tensorflow as tf\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    inputs = tf.transpose(inputs, perm=[1, 0, 2])\n    \n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=2)\n        mask = tf.transpose(mask, perm=[1, 0, 2])\n    \n    if constants is None:\n        constants = []\n    \n    uses_learning_phase = False\n    \n    if unroll:\n        if inputs.get_shape()[0] is None:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n    \n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list.reverse()\n    \n        for inp, mask_t in zip(input_list, mask):\n            output, new_states = step_function(inp, states + constants)\n            if getattr(output, '_uses_learning_phase', False):\n                uses_learning_phase = True\n    \n            if mask is not None:\n                output = tf.where(mask_t, output, tf.zeros_like(output))\n                new_states = [tf.where(mask_t, new_states[i], states[i]) for i in range(len(states))]\n            successive_outputs.append(output)\n            successive_states.append(new_states)\n        \n        last_output = successive_outputs[-1]\n        new_states = successive_states[-1]\n        outputs = tf.stack(successive_outputs)\n    \n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, axis=[0])\n    \n        states = tuple(initial_states)\n    \n        time_steps = tf.shape(inputs)[0]\n        output_ta = tf.TensorArray(dtype=inputs.dtype, size=time_steps)\n        \n        def _step(time, output_ta, *states):\n            current_input = inputs[time]\n            output, new_states = step_function(current_input, states + constants)\n            if getattr(output, '_uses_learning_phase', False):\n                nonlocal uses_learning_phase\n                uses_learning_phase = True\n            output_ta = output_ta.write(time, output)\n            return (time + 1, output_ta) + new_states\n    \n        final_outputs = tf.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(0, output_ta) + states,\n            parallel_iterations=32,\n            swap_memory=True)\n        \n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n    \n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time - 1)\n    \n    outputs = tf.transpose(outputs, perm=[1, 0, 2])\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states"
        }
    ]
}