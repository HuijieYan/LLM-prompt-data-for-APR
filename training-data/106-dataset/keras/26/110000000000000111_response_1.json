{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \n    import tensorflow as tf\n    from tensorflow.python.util import nest\n    from tensorflow.python.ops import control_flow_ops\n    from tensorflow.python.ops import tensor_array_ops\n    \n    def reverse(tensor, axis):\n        if axis < 0:\n            rank = tf.rank(tensor) - 1\n            axis %= rank\n        return tensor[::-1]\n\n    def expand_dims(tensor):\n        return tf.expand_dims(tensor, axis=-1)\n\n    def zeros_like(tensor):\n        return tf.zeros_like(tensor)\n\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = expand_dims(mask)\n        mask = tf.transpose(mask, axes)\n\n    if constants is None:\n        constants = []\n\n    uses_learning_phase = False\n\n    if unroll:\n        if inputs.get_shape()[0].value is None:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        \n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list = input_list[::-1]\n\n        for inp in input_list:\n            output, states = step_function(inp, states + constants)\n            if getattr(output, '_uses_learning_phase', False):\n                uses_learning_phase = True\n            successive_outputs.append(output)\n            successive_states.append(states)\n\n        last_output = successive_outputs[-1]\n        new_states = successive_states[-1]\n        outputs = tf.stack(successive_outputs)\n\n    else:\n        if go_backwards:\n            inputs = reverse(inputs, 0)\n\n        states = nest.pack_sequence_as(initial_states, initial_states)\n        time_steps = tf.shape(inputs)[0]\n        outputs, final_states = control_flow_ops.scan(\n            fn=step_function,\n            elems=inputs,\n            initializer=states,\n            parallel_iterations=32,\n            swap_memory=True)\n\n        outputs = tf.transpose(outputs, [1, 0, 2])\n        last_output = outputs[-1]\n        new_states = nest.flatten(final_states)\n\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
            "import_list": [
                "import tensorflow as tf",
                "from tensorflow.python.util import nest",
                "from tensorflow.python.ops import control_flow_ops",
                "from tensorflow.python.ops import tensor_array_ops"
            ]
        }
    ]
}