{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    ndim = len(inputs.shape)\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    if constants is None:\n        constants = []\n\n    if unroll:\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        for time in range(inputs.shape[1]):\n            inp = inputs[:, time, :]\n            output, new_states = step_function(inp, states + constants)\n\n            if len(successive_outputs) == 0:\n                prev_output = tf.zeros_like(output)\n            else:\n                prev_output = successive_outputs[-1]\n\n            mask_t = mask[:, time] if mask is not None else 1\n            tiled_mask_t = tf.tile(tf.expand_dims(mask_t, axis=-1), [1, tf.shape(output)[1]])\n            output = tf.where(tf.cast(tiled_mask_t, tf.bool), output, prev_output)\n\n            return_states = [tf.where(tf.cast(tiled_mask_t, tf.bool), new_states[i], states[i]) for i in range(len(states))]\n            states = return_states\n            successive_outputs.append(output)\n            successive_states.append(states)\n        \n        last_output = successive_outputs[-1]\n        new_states = successive_states[-1]\n        outputs = tf.stack(successive_outputs)\n\n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, [1])\n\n        states = tuple(initial_states)\n        output_ta = tf.TensorArray(size=inputs.shape[1], dtype=tf.float32)\n        \n        for time in range(inputs.shape[1]):\n            current_input = inputs[:, time, :]\n            output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n\n            mask_t = mask[:, time] if mask is not None else 1\n            tiled_mask_t = tf.tile(tf.expand_dims(mask_t, axis=-1), [1, tf.shape(output)[1]])\n            output = tf.where(tf.cast(tiled_mask_t, tf.bool), output, states[0])\n            new_states = [tf.where(tf.cast(tiled_mask_t, tf.bool), new_states[i], states[i]) for i in range(len(states))]\n            \n            output_ta = output_ta.write(time, output)\n            \n            states = new_states\n        \n        outputs = output_ta.stack()\n        last_output = output_ta.read(inputs.shape[1] - 1)\n\n    last_output._uses_learning_phase = False\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf"
            ]
        }
    ]
}