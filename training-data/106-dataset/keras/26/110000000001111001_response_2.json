{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n        (same as the provided function)\n\n    # Returns (same as the provided function)\n\n    # Raises (same as the provided function)\n    \"\"\"\n\n    if unroll:\n        # Unrolling implementation (same as the provided function)\n        pass\n    else:\n        if mask is not None:\n            if not inputs.get_shape()[0]:\n                raise ValueError('Unrolling requires a '\n                                 'fixed number of timesteps.')\n            states = initial_states\n            time_steps = tf.shape(inputs)[0]\n            outputs, _ = step_function(inputs[0], initial_states + constants)\n            output_ta = tensor_array_ops.TensorArray(\n                dtype=outputs.dtype,\n                size=time_steps,\n                tensor_array_name='output_ta')\n            input_ta = tensor_array_ops.TensorArray(\n                dtype=inputs.dtype,\n                size=time_steps,\n                tensor_array_name='input_ta')\n            input_ta = input_ta.unstack(inputs)\n            time = tf.constant(0, dtype='int32', name='time')\n\n            if mask is not None:\n                mask_ta = tensor_array_ops.TensorArray(\n                    dtype=tf.bool,\n                    size=time_steps,\n                    tensor_array_name='mask_ta')\n                mask_ta = mask_ta.unstack(mask)\n\n                def _step(time, output_ta_t, *states):\n                    current_input = input_ta.read(time)\n                    mask_t = mask_ta.read(time)\n                    output, new_states = step_function(current_input,\n                                                       tuple(states) +\n                                                       tuple(constants))\n                    if getattr(output, '_uses_learning_phase', False):\n                        global uses_learning_phase\n                        uses_learning_phase = True\n                    for state, new_state in zip(states, new_states):\n                        new_state.set_shape(state.get_shape())\n                    tiled_mask_t = tf.tile(mask_t,\n                                           tf.stack([1, tf.shape(output)[1]]))\n                    output = tf.where(tiled_mask_t, output, states[0])\n                    new_states = [tf.where(tiled_mask_t, new_states[i], states[i]) for i in range(len(states))]\n                    output_ta_t = output_ta_t.write(time, output)\n                    return (time + 1, output_ta_t) + tuple(new_states)\n            else:\n                def _step(time, output_ta_t, *states):\n                    current_input = input_ta.read(time)\n                    output, new_states = step_function(current_input,\n                                                       tuple(states) +\n                                                       tuple(constants))\n                    if getattr(output, '_uses_learning_phase', False):\n                        global uses_learning_phase\n                        uses_learning_phase = True\n                    for state, new_state in zip(states, new_states):\n                        new_state.set_shape(state.get_shape())\n                    output_ta_t = output_ta_t.write(time, output)\n                    return (time + 1, output_ta_t) + tuple(new_states)\n\n            final_outputs = control_flow_ops.while_loop(\n                cond=lambda time, *_: time < time_steps,\n                body=_step,\n                loop_vars=(time, output_ta) + states,\n                parallel_iterations=32,\n                swap_memory=True)\n            last_time = final_outputs[0]\n            output_ta = final_outputs[1]\n            new_states = final_outputs[2:]\n\n            outputs = output_ta.stack()\n            last_output = output_ta.read(last_time - 1)\n\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
            "import_list": [
                "import tensorflow as tf",
                "from tensorflow.python.util import tf_decorator",
                "from tensorflow.python.ops import control_flow_ops, tensor_array_ops"
            ]
        }
    ]
}