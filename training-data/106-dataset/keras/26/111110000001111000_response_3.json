{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    def expand_dims(x, dim=-1):\n        return tf.expand_dims(x, dim)\n\n    inputs = tf.convert_to_tensor(inputs)\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    if mask is not None:\n        mask = tf.expand_dims(mask, -1)\n        mask = tf.cast(mask, tf.bool)\n\n    if constants is None:\n        constants = []\n    else:\n        constants = nest.flatten(constants)\n        \n    if unroll:\n        if input_length is None:\n            raise ValueError(\"`input_length` must be specified when `unroll` is used.\")\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n        time = input_length\n        current_input = inputs\n        for t in range(time):\n            output, new_states = step_function(current_input, states + constants)\n            if getattr(output, '_uses_learning_phase', False):\n                uses_learning_phase = True\n            if mask is not None:\n                # apply mask\n                new_output = output if successive_outputs else tf.zeros_like(output)\n                output = tf.where(mask[t], new_output, successive_outputs[-1])\n                new_states = [tf.where(mask[t], new_state, state) for new_state, state in zip(new_states, states)]\n                \n            successive_outputs.append(output)\n            successive_states.append(new_states)\n            states = new_states\n            current_input = output\n        last_output = successive_outputs[-1]\n        new_states = successive_states[-1]\n        outputs = tf.stack(successive_outputs, axis=1)\n        return last_output, outputs, new_states\n        \n    else:\n        if not go_backwards:\n            time = tf.shape(inputs)[1]\n            idx = lambda time: time\n        else:\n            time = tf.constant(0, dtype='int32')\n            idx = lambda time: -1 - time\n            \n        states = initial_states\n        output_ta = tensor_array_ops.TensorArray(dtype=outputs.dtype, size=time, dynamic_size=False)\n \n        def _step(time, output_ta, *states):\n            current_input = inputs[:,idx(time),:]\n            output, new_states = step_function(current_input, states + constants)\n            output_ta = output_ta.write(time, output)\n            return (time + 1, output_ta) + tuple(new_states)\n        \n        final_outputs = control_flow_ops.while_loop(\n            cond=lambda time, *_: time < time,\n            body=_step,\n            loop_vars=(time, output_ta) + tuple(states),\n            parallel_iterations=32,\n            swap_memory=unroll)\n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n\n        outputs = output_ta.stack()\n        if go_backwards:\n            outputs = tf.reverse(outputs, [1])\n        outputs._uses_learning_phase = uses_learning_phase\n        \n        last_output = outputs[:, idx(last_time - 1),:]\n        return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow.python.util import nest",
                "from tensorflow.python.ops import tensor_array_ops, control_flow_ops"
            ]
        }
    ]
}