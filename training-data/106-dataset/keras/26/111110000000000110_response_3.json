{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    ndim = len(inputs.shape)\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    if mask is not None:\n        if len(mask.shape) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=-1)\n\n    if constants is None:\n        constants = []\n\n    if unroll:\n        if inputs.shape[0].value is None:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n        outputs = []\n        inputs = inputs.numpy().transpose(1, 0, 2)\n\n        if mask is not None:\n            mask = mask.numpy().transpose(1, 0, 2)\n            for i in range(inputs.shape[0]):\n                output, new_states = step_function(inputs[i], states + constants)\n                output = tf.expand_dims(output, axis=0)\n                new_states = [tf.expand_dims(state, axis=0) for state in new_states]\n                if len(successive_outputs) != 0:\n                    prev_output = successive_outputs[-1]\n                else:\n                    prev_output = output\n                output = tf.where(mask[i], output, prev_output)\n                states = [tf.where(mask[i], state, new_states[j]) for j, state in enumerate(states)]\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs, axis=1)\n        else:\n            for i in range(inputs.shape[0]):\n                output, states = step_function(inputs[i], states + constants)\n                if hasattr(output, 'uses_learning_phase'):\n                    uses_learning_phase = True\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs, axis=0)\n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, [0])\n\n        states = tuple(initial_states)\n\n        time_steps = inputs.shape[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n        input_ta = tf.TensorArray(dtype=inputs.dtype, size=time_steps)\n        input_ta = input_ta.unstack(inputs)\n\n        if mask is not None:\n            mask = mask.unstack(mask)\n\n            def _step(time, output_ta_t, *states):\n                current_input = input_ta.read(time)\n                mask_t = mask.read(time)\n                output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n                if hasattr(output, 'uses_learning_phase'):\n                    uses_learning_phase = True\n                output = tf.where(mask_t, output, states[0])\n                new_states = [tf.where(mask_t, new_states[i], states[i]) for i in range(len(states))]\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + tuple(new_states)\n        else:\n            def _step(time, output_ta_t, *states):\n                current_input = input_ta.read(time)\n                output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n                if hasattr(output, 'uses_learning_phase'):\n                    uses_learning_phase = True\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + tuple(new_states)\n\n        final_outputs = tf.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(tf.constant(0, dtype='int32'), tf.TensorArray(dtype=inputs.dtype, size=time_steps)) + states,\n            parallel_iterations=32,\n            swap_memory=True)\n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n\n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time - 1)\n\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
            "imports": []
        }
    ]
}