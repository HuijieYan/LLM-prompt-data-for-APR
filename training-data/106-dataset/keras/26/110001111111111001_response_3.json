{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n    ... (same as the original function)\n\n    # Returns\n    ... (same as the original function)\n\n    # Raises\n    ... (same as the original function)\n    \"\"\"\n    if unroll:\n        ...\n    else:\n        states = (initial_states,)\n\n        time_steps = tf.shape(inputs)[0]\n        outputs = tf.TensorArray(dtype=inputs.dtype, size=time_steps, dynamic_size=False)\n\n        def _step(time, output_ta_t, *states):\n            current_input = inputs[time]\n            output, new_states = step_function(current_input, states + constants)\n            output_ta_t = output_ta_t.write(time, output)\n            return (time + 1, output_ta_t) + new_states\n\n        final_time, final_outputs, final_states = tf.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(0, outputs, *states),\n            parallel_iterations=32,\n            swap_memory=True\n        )\n\n        last_output = final_outputs.read(final_time - 1)\n        new_states = final_states[1:]  # Exclude the initial state\n        outputs = final_outputs.stack()\n\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
            "import_list": []
        }
    ]
}