{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    import tensorflow as tf\n    from tensorflow.python.util import nest\n    from tensorflow.python.ops import control_flow_ops\n    from tensorflow.python.ops import tensor_array_ops\n    from tensorflow.python.framework import ops\n    def create_ta(d, s, name=None):\n        return tensor_array_ops.TensorArray(dtype=d, size=s, tensor_array_name=name)\n    \n    def _create_ta(d, s, static, name=None):\n        return tensor_array_ops.TensorArray(dtype=d, size=s, dynamic_size=not static, element_shape=(),\n                                            tensor_array_name=name)\n    \n    # ... (previous code)\n    \n    # Fix for shape inconsistencies with mask\n    def _step(time, output_ta_t, *states):\n        # ...(previous code)...\n        \n        current_input = input_ta.read(time)\n        output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n        if getattr(output, '_uses_learning_phase', False):\n            global uses_learning_phase\n            uses_learning_phase = True\n        for state, new_state in zip(states, new_states):\n            new_state.set_shape(state.get_shape())\n        analyser = nest.flatten(states) + nest.flatten(new_states)\n        mask = control_flow_ops.cond(tf.greater(time, 0), lambda: mask_ta.read(time - 1), lambda: mask_k)\n        # Use the expand_dims operation to ensure that mask and output have compatible shapes\n        masked_output = tf.where(tf.expand_dims(mask, -1), output, states[0])\n        new_states = [tf.where(tf.expand_dims(mask, -1), new_state, state) for state, new_state in zip(states, new_states)]\n    \n        output_ta_t = output_ta_t.write(time, masked_output)\n        return (time + 1, output_ta_t) + tuple(new_states)\n    \n    # ... (remaining code)\n    \n    # Other parts of the function\n    # ...\n    \n    final_outputs = control_flow_ops.while_loop(\n        cond=lambda time, *_: time < time_steps,\n        body=_step,\n        loop_vars=(time, output_ta) + states,\n        parallel_iterations=32,\n        swap_memory=True)\n    last_time = final_outputs[0]\n    output_ta = final_outputs[1]\n    new_states = final_outputs[2:]"
        }
    ]
}