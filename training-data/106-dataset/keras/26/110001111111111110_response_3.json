{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    import tensorflow as tf\n    from tensorflow.python.ops import while_ops\n    \"\"\"Iterates over the time dimension of a tensor.\n    \n    # Arguments\n    ... [Same as before]\n    \"\"\"\n    \n    # Make necessary imports\n    import tensorflow as tf\n    from tensorflow.python.ops import while_ops\n    \n    # ... [Code snippet omitted]\n    \n    def rnn_fn(time, output_ta_t, *states):\n        \"\"\"RNN step function.\n    \n        # Arguments\n            time: Current timestep value.\n            output_ta_t: TensorArray.\n            *states: List of states.\n    \n        # Returns\n            Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n        \"\"\"\n        current_input = input_ta.read(time)\n        mask_time = tf.expand_dims(mask_ta.read(time), -1) if mask_ta is not None else None\n        output, new_states = step_function(current_input, list(states) + list(constants))\n        if getattr(output, '_uses_learning_phase', False):\n            nonlocal uses_learning_phase\n            uses_learning_phase = True\n        new_states = [tf.where(mask_time, new_states[i], states[i]) if mask_ta is not None else new_states[i] for i in range(len(states))]\n        output_ta_t = output_ta_t.write(time, output)\n        return (time + 1, output_ta_t) + tuple(new_states)\n    \n    final_outputs = while_ops.while_loop(\n        cond=lambda time, *_: time < time_steps,\n        body=rnn_fn,\n        loop_vars=(time, output_ta) + tuple(states),\n        parallel_iterations=32,\n        swap_memory=True)\n    last_time = final_outputs[0]\n    output_ta = final_outputs[1]\n    new_states = final_outputs[2:]"
        }
    ]
}