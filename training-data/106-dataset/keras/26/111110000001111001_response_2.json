{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    if mask is not None:\n        mask = tf.convert_to_tensor(mask, dtype=tf.bool)\n\n    if constants is None:\n        constants = []\n\n    if unroll:\n        raise ValueError('Unrolling is not supported in this implementation')\n\n    states = initial_states\n    successive_outputs = []\n\n    if go_backwards:\n        inputs = tf.reverse(inputs, axis=[1])\n        if mask is not None:\n            mask = tf.reverse(mask, axis=[1])\n\n    input_time_major = tf.transpose(inputs, perm=[1, 0, 2])\n\n    input_list = tf.unstack(input_time_major)\n    if mask is not None:\n        mask_list = tf.unstack(mask)\n\n    for inp, mask_t in zip(input_list, mask_list) if mask is not None else zip(input_list, [None] * len(input_list)):\n        output, states = step_function(inp, states + constants)\n        if getattr(output, '_uses_learning_phase', False):\n            global uses_learning_phase\n            uses_learning_phase = True\n        if mask is not None:\n            output = tf.where(mask_t, output, tf.zeros_like(output))\n            states = [tf.where(mask_t, new_state, state) for state, new_state in zip(states, new_states)]\n        successive_outputs.append(output)\n\n    last_output = states[0]  # assuming the first state is the last_output\n    outputs = tf.stack(successive_outputs)\n    new_states = states\n\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow.python.ops import tensor_array_ops, control_flow_ops"
            ]
        }
    ]
}