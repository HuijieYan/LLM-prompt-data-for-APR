{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    if len(inputs.get_shape()) < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    # Transpose to time-major, i.e. from (batch, time, ...) to (time, batch, ...)\n    inputs = array_ops.transpose(inputs, [1, 0, 2])\n\n    if unroll:\n        if inputs.shape[0] is None:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = array_ops.unstack(inputs)\n        if go_backwards:\n            input_list = array_ops.reverse(input_list, axis=[0])\n\n        for inp in input_list:\n            output, states = step_function(inp, states + constants)\n            successive_outputs.append(output)\n            successive_states.append(states)\n\n        last_output = successive_outputs[-1]\n        new_states = successive_states[-1]\n        outputs = array_ops.stack(successive_outputs)\n    else:\n        # Handle non-unrolled RNN\n        # ...\n        pass\n\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = array_ops.transpose(outputs, axes)\n    last_output._uses_learning_phase = False  # Assuming it was determined previously\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow.python.ops import control_flow_ops",
                "from tensorflow.python.ops import tensor_array_ops",
                "from tensorflow.python.ops import array_ops"
            ]
        }
    ]
}