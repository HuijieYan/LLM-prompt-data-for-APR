{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n        step_function: RNN step function.\n            Parameters:\n                inputs: tensor with shape `(samples, ...)` (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                states: list of tensors.\n            Returns:\n                outputs: tensor with shape `(samples, output_dim)`\n                    (no time dimension).\n                new_states: list of tensors, same length and shapes\n                    as 'states'. The first state in the list must be the\n                    output tensor at the previous timestep.\n        inputs: tensor of temporal data of shape `(samples, time, ...)`\n            (at least 3D).\n        initial_states: tensor with shape (samples, output_dim)\n            (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n        go_backwards: boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n        mask: binary tensor with shape `(samples, time, 1)`,\n            with a zero for every element that is masked.\n        constants: a list of constant values passed at each step.\n        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n        input_length: not relevant in the TensorFlow implementation.\n            Must be specified if using unrolling with Theano.\n\n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n\n            last_output: the latest output of the rnn, of shape `(samples, ...)`\n            outputs: tensor with shape `(samples, time, ...)` where each\n                entry `outputs[s, t]` is the output of the step function\n                at time `t` for sample `s`.\n            new_states: list of tensors, latest states returned by\n                the step function, of shape `(samples, ...)`.\n\n    # Raises\n        ValueError: if input dimension is less than 3.\n        ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n        ValueError: if `mask` is provided (not `None`) but states is not provided\n            (`len(states)` == 0).\n    \"\"\"\n    import tensorflow as tf\n    import numpy as np\n    def zeros_like(tensor):\n        return tf.zeros_like(tensor)\n    \n    def reference_operations_rnn(x, weights, initial_state, **kwargs):\n        sampled_states = [initial_state]\n\n        if 'unroll' in kwargs and kwargs['unroll']:\n            # Using TF while_loop for unrolling the rnn\n            total_time = kwargs['input_length']\n            i = 0\n            func_name = 'while' if 'mask' in kwargs else 'while_2'\n            func_name_output_ta = 'output_ta' if 'mask' in kwargs else 'output_ta_2'\n            create_ta = lambda x: tf.TensorArray(dtype=tf.float32, size=total_time, name=x)\n\n            output_ta = create_ta(func_name_output_ta)\n            time = tf.constant(0, name='time')\n\n            def _step(time, output_ta_t, *states):\n                current_input = x[:, time, :]\n                output, new_states = step_function(current_input, states + constants)\n                output_ta_t = output_ta_t.write(time, output)\n\n                new_states = [tf.convert_to_tensor(new_state) for new_state in new_states]  # Convert to Tensor for better inference types otherwise it throws error in tf.while_loop\n                return (time + 1, output_ta_t) + tuple(new_states)\n            # While loop logic for time dim iterations\n            _, output_ta, *sampled_states = tf.while_loop(\n                cond=lambda time, *_: time < total_time,\n                body=_step,\n                loop_vars=(time, output_ta) + tuple(sampled_states),\n                name=func_name)\n            outputs = output_ta.stack()\n        return outputs\n        \n    def reverse(tensor, axis):\n        return tf.reverse(tensor, axis)\n      \n    def expand_dims(_input):\n        return tf.expand_dims(_input, axis=-1)\n      \n    def parse_shape_or_val(val):\n        shape = val\n        val = np.empty(shape)\n        if 'int' in str(val.dtype):\n            return shape, val.astype(int)\n        else:\n            return shape, val.astype(float)\n      \n    def rnn_fn(x_k, h_k):\n        _, wi_k, wh_k, mask_k, num_samples, timesteps = x_k.shape, h_k[0].shape, h_k[1].shape, mask_k.shape, InitialState[0].shape, InitialState[0].shape[1]\n        y_k = tf.matmul(x_k, wi_k) + tf.matmul(h_k[0], wh_k)\n\n        y_k_shape = y_k.get_shape()\n\n        if \"mask\" in kwargs:\n            mask_ta = tf.TensorArray(dtype=tf.bool, size=timesteps, name='mask_ta', clear_after_read=False)\n            mask_ta = mask_ta.unstack(mask)\n\n            _, outputs, sampled_states = reference_operations_rnn(x, [wi_k, wh_k, None], h_k, mask=mask_k.numpy(), **kwargs)\n        \n        else:\n            outputs = reference_operations_rnn(x, [wi_k, wh_k, None], h_k, **kwargs)\n        \n        h0_k_1 = np.concatenate([h_k[0].numpy(), h_k[0].numpy()], axis=-1)\n        return y_k, [y_k, h0_k_1]",
            "import_list": [
                "import tensorflow as tf",
                "import numpy as np"
            ]
        }
    ]
}