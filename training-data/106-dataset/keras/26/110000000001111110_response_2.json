{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n            go_backwards=False, mask=None, constants=None,\n            unroll=False, input_length=None):\n        \n        ndim = len(inputs.get_shape())\n        if ndim < 3:\n            raise ValueError('Input should be at least 3D.')\n\n        axes = [1, 0] + list(range(2, ndim))\n        inputs = tf.transpose(inputs, (axes))\n        if mask is not None:\n            if mask.dtype != tf.bool:\n                mask = tf.cast(mask, tf.bool)\n            if len(mask.get_shape()) == ndim - 1:\n                mask = tf.expand_dims(mask, axis=-1)\n            mask = tf.transpose(mask, axes)\n\n        if constants is None:\n            constants = []\n        if not isinstance(constants, (list, tuple)):\n            constants = [constants]\n\n        if unroll:\n            pass  # Your code for unroll\n        else:\n            pass",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow.python.util import tf_decorator",
                "import tensorflow.python.util.deprecation as deprecation",
                "from tensorflow.python.util.tf_export import keras_export"
            ]
        }
    ]
}