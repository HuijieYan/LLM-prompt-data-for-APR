{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n        \"\"\"Iterates over the time dimension of a tensor.\n    \n        # Arguments\n        # ... (other function arguments)\n\n        # Returns\n        # ...(function return details)\n\n        # Raises\n        # ...(function raise details)\n        \"\"\"\n        ndim = len(inputs.get_shape())\n        if ndim < 3:\n            raise ValueError('Input should be at least 3D.')\n    \n        # Transpose to time-major, i.e.\n        # from (batch, time, ...) to (time, batch, ...)\n        axes = [1, 0] + list(range(2, ndim))\n        inputs = tf.transpose(inputs, (axes))\n    \n        # Handling of mask\n        if mask is not None:\n            if mask.dtype != tf.bool:\n                mask = tf.cast(mask, tf.bool)\n            if len(mask.get_shape()) == ndim - 1:\n                mask = tf.expand_dims(mask, axis=-1)  # using tf.expand_dims instead of expand_dims\n            mask = tf.transpose(mask, axes)\n    \n        if constants is None:\n            constants = []\n    \n        global uses_learning_phase\n        uses_learning_phase = False",
            "import_list": []
        }
    ]
}