{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=-1)\n        mask = tf.transpose(mask, axes)\n\n    if constants is None:\n        constants = []\n\n    uses_learning_phase = False\n\n    if unroll:\n        if not inputs.get_shape()[0]:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list = reversed(input_list)\n\n        for inp in input_list:\n            output, new_states = step_function(inp, states + constants)\n            if getattr(output, '_uses_learning_phase', False):\n                uses_learning_phase = True\n            successive_outputs.append(output)\n            successive_states.append(new_states)\n\n        outputs = tf.stack(successive_outputs)\n        if mask is not None:\n            mask_list = tf.unstack(mask)\n            if go_backwards:\n                mask_list = reversed(mask_list)\n            mask_tensor = tf.stack(mask_list)\n            outputs = tf.where(mask_tensor, outputs, tf.zeros_like(outputs))\n\n        new_states = successive_states[-1]\n        last_output = successive_outputs[-1]\n\n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, axis=[0])\n\n        time_steps = tf.shape(inputs)[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n        output_ta = tf.TensorArray(\n            dtype=outputs.dtype,\n            size=time_steps)\n        input_ta = tf.TensorArray(\n            dtype=inputs.dtype,\n            size=time_steps)\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype='int32', name='time')\n\n        if mask is not None:\n            if not states:\n                raise ValueError('No initial states provided! '\n                                 'When using masking in an RNN, you should '\n                                 'provide initial states '\n                                 '(and your step function should return '\n                                 'as its first state at time `t` '\n                                 'the output at time `t-1`).')\n            if go_backwards:\n                mask = tf.reverse(mask, axis=[0])\n\n            mask_ta = tf.TensorArray(\n                dtype=tf.bool,\n                size=time_steps)\n            mask_ta = mask_ta.unstack(mask)\n        else:\n            mask_ta = None\n\n        def _step(time, output_ta_t, *states):\n            current_input = input_ta.read(time)\n            mask_t = mask_ta.read(time) if mask_ta is not None else None\n            output, new_states = step_function(current_input,\n                                               tuple(states) + tuple(constants))\n            if getattr(output, '_uses_learning_phase', False):\n                nonlocal uses_learning_phase\n                uses_learning_phase = True\n            output_ta_t = output_ta_t.write(time, output)\n            return (time + 1, output_ta_t) + tuple(new_states)\n\n        final_outputs = tf.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(time, output_ta) + tuple(initial_states),\n            parallel_iterations=32,\n            swap_memory=True)\n        last_time = final_outputs[0]\n        outputs_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n\n        if mask_ta is not None:\n            outputs = outputs_ta.stack()\n            last_output = outputs_ta.read(last_time - 1)\n            outputs = tf.transpose(outputs, axes)\n            outputs = tf.where(tf.transpose(mask, axes), outputs, tf.zeros_like(outputs))\n        else:\n            outputs = outputs[1].stack()\n            last_output = outputs[-1]\n\n    return last_output, outputs, new_states",
            "import_list": []
        }
    ]
}