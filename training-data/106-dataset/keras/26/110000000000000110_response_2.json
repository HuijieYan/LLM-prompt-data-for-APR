{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n        step_function: RNN step function.\n            Parameters:\n                inputs: tensor with shape `(samples, ...)` (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                states: list of tensors.\n            Returns:\n                outputs: tensor with shape `(samples, output_dim)`\n                    (no time dimension).\n                new_states: list of tensors, same length and shapes\n                    as 'states'. The first state in the list must be the\n                    output tensor at the previous timestep.\n        inputs: tensor of temporal data of shape `(samples, time, ...)`\n            (at least 3D).\n        initial_states: tensor with shape (samples, output_dim)\n            (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n        go_backwards: boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n        mask: binary tensor with shape `(samples, time, 1)`,\n            with a zero for every element that is masked.\n        constants: a list of constant values passed at each step.\n        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n        input_length: not relevant in the TensorFlow implementation.\n            Must be specified if using unrolling with Theano.\n\n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n\n            last_output: the latest output of the rnn, of shape `(samples, ...)`\n            outputs: tensor with shape `(samples, time, ...)` where each\n                entry `outputs[s, t]` is the output of the step function\n                at time `t` for sample `s`.\n            new_states: list of tensors, latest states returned by\n                the step function, of shape `(samples, ...)`.\n\n    # Raises\n        ValueError: if input dimension is less than 3.\n        ValueError: if `unroll` is `True` but input time-step is not a fixed number.\n        ValueError: if `mask` is provided (not `None`) but states are not provided\n            (`len(states)` == 0).\n    \"\"\"\n\n    import tensorflow as tf\n    from tensorflow.python.ops import tensor_array_ops, control_flow_ops\n    from tensorflow.python.framework import dtypes\n\n    def reverse(tensor, axis):\n        if hasattr(tf, 'reverse'):\n            return tf.reverse(tensor, [axis])\n        else:\n            return tf.reverse(tensor, axis)\n\n    def expand_dims(x):\n        if hasattr(tf, 'expand_dims'):\n            return tf.expand_dims(x, 2)\n        else:\n            return tf.expand_dims(x, -1)\n\n    def zeros_like(tensor):\n        custom_zeros_like = tf.zeros_like if hasattr(tf, 'zeros_like') else tf.zeros\n        return custom_zeros_like(tensor, dtype=tf.float32) if 'int' not in tensor.dtype.name \\\n            else custom_zeros_like(tensor, dtype=tf.int32)\n\n    inputs_shape = tf.shape(inputs)\n    ndim = tf.rank(inputs)\n    if mask is not None:\n        mask = tf.cast(mask, tf.bool)\n        if tf.rank(mask) != ndim - 1:\n            mask = expand_dims(mask)\n        mask = tf.transpose(mask, [1, 0] + list(range(2, ndim)))\n\n\n\n    if constants is None:\n        constants = []\n\n    def unroll_time_loop(inputs, initial_states, step_function):\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list = list(reversed(input_list))\n\n        if mask is not None:\n            mask_list = tf.unstack(mask)\n            if go_backwards:\n                mask_list = list(reversed(mask_list))\n\n            for inp, mask_t in zip(input_list, mask_list):\n                output, new_states = step_function(inp, states + constants)\n                if hasattr(output, '_uses_learning_phase'):\n                    global uses_learning_phase\n                    uses_learning_phase = True\n\n                tiled_mask_t = tf.tile(mask_t, [1, tf.shape(output)[1]])\n                prev_output = successive_outputs[-1] if successive_outputs else zeros_like(output)\n                output = tf.where(tiled_mask_t, output, prev_output)\n\n                return_states = [tf.where(tiled_mask_t, new_state, state) for state, new_state in\n                                 zip(states, new_states)]\n\n                states, successive_outputs = return_states, successive_outputs + [output]\n\n            last_output = successive_outputs[-1]\n            new_states = states\n            outputs = tf.stack(successive_outputs)\n\n        else:\n            for inp in input_list:\n                output, states = step_function(inp, states + constants)\n                if hasattr(output, '_uses_learning_phase'):\n                    global uses_learning_phase\n                    uses_learning_phase = True\n                successive_outputs.append(output)\n            last_output = successive_outputs[-1]\n            new_states = states\n            outputs = tf.stack(successive_outputs)\n        return last_output, outputs, new_states, uses_learning_phase\n\n    if unroll:\n        if not inputs.get_shape()[0].value:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        last_output, outputs, new_states, uses_learning_phase = \\\n            unroll_time_loop(inputs, initial_states, step_function)\n    else:\n        if go_backwards:\n            inputs = reverse(inputs, 0)\n            if mask is not None:\n                mask = reverse(mask, 0)\n        states = tuple(initial_states)\n        time_steps = inputs_shape[0]\n        _, outputs, new_states, last_output = control_flow_ops.while_loop(\n            lambda time, *_: time < time_steps,\n            lambda time, outputs_ta, *args: (\n                time + 1, outputs_ta.write(time, step_function(inputs[time],\n                                                                 tuple(args) + tuple(constants))),\n                *step_function(inputs[0], initial_states + tuple(constants))),\n            loop_vars=(tf.constant(0, dtype=dtypes.int32),\n                       tensor_array_ops.TensorArray(dtype=outputs.dtype,\n                                                    size=time_steps,\n                                                    dynamic_size=False, infer_shape=True),\n                       *states),\n            parallel_iterations=32,\n            swap_memory=True)\n\n        outputs = outputs.stack()\n        if mask is not None:\n            last_output = outputs[-1]\n\n    outputs = tf.transpose(outputs, (1, 0, 2) + tuple(range(3, ndim)))\n\n    last_output._uses_learning_phase = uses_learning_phase  # Add Learning phase flag\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow.python.ops import tensor_array_ops, control_flow_ops",
                "from tensorflow.python.framework import dtypes"
            ]
        }
    ]
}