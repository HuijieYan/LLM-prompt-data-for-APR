{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\" Iterates over the time dimension of a tensor.\n\n    # Arguments\n        step_function: RNN step function.\n            Parameters:\n                inputs: tensor with shape `(samples, ...)` (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                states: list of tensors.\n            Returns:\n                outputs: tensor with shape `(samples, output_dim)`\n                    (no time dimension).\n                new_states: list of tensors, same length and shapes\n                    as 'states'. The first state in the list must be the\n                    output tensor at the previous timestep.\n        inputs: tensor of temporal data of shape `(samples, time, ...)`\n            (at least 3D).\n        initial_states: tensor with shape (samples, output_dim)\n            (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n        go_backwards: boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n        mask: binary tensor with shape `(samples, time, 1)`,\n            with a zero for every element that is masked.\n        constants: a list of constant values passed at each step.\n        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n        input_length: not relevant in the TensorFlow implementation.\n            Must be specified if using unrolling with Theano.\n\n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n\n            last_output: the latest output of the rnn, of shape `(samples, ...)`\n            outputs: tensor with shape `(samples, time, ...)` where each\n                entry `outputs[s, t]` is the output of the step function\n                at time `t` for sample `s`.\n            new_states: list of tensors, latest states returned by\n                the step function, of shape `(samples, ...)`.\n\n    # Raises\n        ValueError: if input dimension is less than 3.\n        ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n        ValueError: if `mask` is provided (not `None`) but states is not provided\n            (`len(states)` == 0).\n    \"\"\"\n\n    # force inputs to be 3D via time major\n    import tensorflow as tf\n    inputs = tf.transpose(inputs, (1, 0, 2))\n    mask_inputs = mask\n\n    # use length of input tensor if not provided\n    if input_length is None:\n        input_length = tf.shape(inputs)[0]\n\n    outputs = []\n    states = initial_states\n    iteration = 0\n\n   # iterate through each time step\n    while iteration < input_length:\n        if mask_inputs is not None:\n            if go_backwards:\n                index = input_length - 1 - iteration\n            else:\n                index = iteration\n\n            masked_inputs = inputs[index] * mask_inputs[index]  # apply mask\n            output, new_states = step_function(masked_inputs, states + constants)\n\n            outputs.append(output)  # add output\n            states = new_states  # update states\n        else:\n            if go_backwards:\n                tensor_index = input_length - 1 - iteration\n            else:\n                tensor_index = iteration\n\n            output, states = step_function(inputs[tensor_index], states + constants)\n            outputs.append(output)  # add the most recent output\n            iteration += 1\n\n    # get last output\n    last_output = outputs[-1]\n    import numpy as np\n    # reverse the list if we are going backwards\n    if go_backwards:\n        outputs.reverse()\n\n    # include time information in the output handling\n    # by checking if the backend is Theano\n    if backend._backend == \"theano\":\n        output = np.vstack(outputs)\n\n        # ensure correct shape\n        if last_output.ndim == 1:\n            last_output = last_output[:, None]\n\n    else:\n        output = np.array(outputs)\n        output = np.swapaxes(output, 0, 1)\n\n    # return the last output, outputs and new states\n    new_states = states\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf",
                "import numpy as np"
            ]
        }
    ]
}