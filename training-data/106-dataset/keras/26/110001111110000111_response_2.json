{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"\n    Iterates over the time dimension of a tensor.\n    \n    # Arguments\n    step_function: RNN step function.\n        Parameters:\n            inputs: tensor with shape `(samples, ...)` (no time dimension),\n                representing input for the batch of samples at a certain\n                time step.\n            states: list of tensors.\n        Returns:\n            outputs: tensor with shape `(samples, output_dim)`\n                (no time dimension).\n            new_states: list of tensors, same length and shapes\n                as 'states'. The first state in the list must be the\n                output tensor at the previous timestep.\n    inputs: tensor of temporal data of shape `(samples, time, ...)`\n        (at least 3D).\n    initial_states: tensor with shape (samples, output_dim)\n        (no time dimension),\n        containing the initial values for the states used in\n        the step function.\n    go_backwards: boolean. If True, do the iteration over the time\n        dimension in reverse order and return the reversed sequence.\n    mask: binary tensor with shape `(samples, time, 1)`,\n        with a zero for every element that is masked.\n    constants: a list of constant values passed at each step.\n    unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n    input_length: not relevant in the TensorFlow implementation.\n        Must be specified if using unrolling with Theano.\n\n    # Returns\n    A tuple, `(last_output, outputs, new_states)`.\n\n    last_output: the latest output of the rnn, of shape `(samples, ...)`\n    outputs: tensor with shape `(samples, time, ...)` where each\n        entry `outputs[s, t]` is the output of the step function\n        at time `t` for sample `s`.\n    new_states: list of tensors, latest states returned by\n        the step function, of shape `(samples, ...)`.\n\n    # Raises\n    ValueError: if input dimension is less than 3.\n    ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n    ValueError: if `mask` is provided (not `None`) but states is not provided\n        (`len(states)` == 0).\n    \"\"\"\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    # Transpose to time-major, i.e.\n    # from (batch, time, ...) to (time, batch, ...)\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = expand_dims(mask)\n        mask = tf.transpose(mask, axes)\n\n    if constants is None:\n        constants = []\n\n    # Rest of the code for unrolling and step function execution\n    # ... (omitted code for brevity) ...\n    return last_output, outputs, new_states",
            "import_list": []
        }
    ]
}