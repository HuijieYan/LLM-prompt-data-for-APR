{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    import tensorflow as tf\n    from tensorflow.python.ops import control_flow_ops, tensor_array_ops\n    from tensorflow.python.ops import math_ops\n    \"\"\"Iterates over the time dimension of a tensor.\n    \n    # Arguments\n        step_function: RNN step function.\n            Parameters:\n                inputs: tensor with shape `(samples, ...)` (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                states: list of tensors.\n            Returns:\n                outputs: tensor with shape `(samples, output_dim)`\n                    (no time dimension).\n                new_states: list of tensors, same length and shapes\n                    as 'states'. The first state in the list must be the\n                    output tensor at the previous timestep.\n        inputs: tensor of temporal data of shape `(samples, time, ...)`\n            (at least 3D).\n        initial_states: tensor with shape (samples, output_dim)\n            (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n        go_backwards: boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n        mask: binary tensor with shape `(samples, time, 1)`,\n            with a zero for every element that is masked.\n        constants: a list of constant values passed at each step.\n        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n        input_length: not relevant in the TensorFlow implementation.\n            Must be specified if using unrolling with Theano.\n    \n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n    \n            last_output: the latest output of the rnn, of shape `(samples, ...)`\n            outputs: tensor with shape `(samples, time, ...)` where each\n                entry `outputs[s, t]` is the output of the step function\n                at time `t` for sample `s`.\n            new_states: list of tensors, latest states returned by\n                the step function, of shape `(samples, ...)`.\n    \n    # Raises\n        ValueError: if input dimension is less than 3.\n        ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n        ValueError: if `mask` is provided (not `None`) but states is not provided\n            (`len(states)` == 0).\n    \"\"\"\n    \n    import tensorflow as tf\n    from tensorflow.python.ops import control_flow_ops, tensor_array_ops\n    from tensorflow.python.ops import math_ops\n    \n    \n    ndim = len(inputs.get_shape().as_list())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    # Transpose to time-major, i.e.\n    # from (batch, time, ...) to (time, batch, ...)\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n    \n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=-1)\n        mask = tf.transpose(mask, axes)\n    \n    if constants is None:\n        constants = []\n    else:\n        constants = list(constants)\n    \n    global uses_learning_phase\n    uses_learning_phase = False\n    \n    if unroll:\n        if not inputs.get_shape().as_list()[0]:\n            raise ValueError('Unrolling requires a '\n                             'fixed number of timesteps.')\n        states = initial_states\n        n_time = inputs.get_shape().as_list()[0]\n        if go_backwards:\n            inputs = tf.reverse(inputs, axis=[0])\n        time_dim = 1\n        inputs_list = tf.unstack(inputs, axis=time_dim)\n        if mask is not None:\n            mask = tf.transpose(mask, [time_dim, 0] + list(range(2, ndim)))\n            mask_list = tf.unstack(mask, axis=time_dim)\n            if go_backwards:\n                mask_list = list(mask_list)\n                mask_list.reverse()\n            for i, inp in enumerate(inputs_list):\n                output, new_states = step_function(inp, states + tuple(constants))\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                tiled_mask = tf.tile(mask_list[i], [1, tf.shape(output)[1]])\n                output = math_ops.where(tiled_mask, output, tf.zeros_like(output))\n                states = [math_ops.where(tiled_mask, new_states[i], states[i]) for i in range(len(states))]\n            last_output = output\n            new_states = states\n            outputs = tf.stack(last_output)\n        else:\n            successive_outputs = []\n            for i, inp in enumerate(inputs_list):\n                output, states = step_function(inp, states + tuple(constants))\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                successive_outputs.append(output)\n            last_output = successive_outputs[-1]\n            new_states = states\n            outputs = tf.stack(successive_outputs)\n    axes = [1, 0] + list(range(2, ndim))\n    outputs = tf.transpose(outputs, axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states"
        }
    ]
}